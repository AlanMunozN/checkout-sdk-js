{"version":3,"sources":["webpack://checkoutKit/webpack/bootstrap","webpack://checkoutKit/external \"tslib\"","webpack://checkoutKit/external \"@bigcommerce/data-store\"","webpack://checkoutKit/external \"lodash\"","webpack://checkoutKit/external \"rxjs\"","webpack://checkoutKit/./src/shipping/consignment-actions.ts","webpack://checkoutKit/./src/customer/customer-strategy-actions.ts","webpack://checkoutKit/./src/payment/payment-strategy-actions.ts","webpack://checkoutKit/./src/common/error/errors/missing-data-error.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-actions.ts","webpack://checkoutKit/./src/checkout/checkout-actions.ts","webpack://checkoutKit/./src/common/error/errors/standard-error.ts","webpack://checkoutKit/./src/common/utility/set-prototype-of.ts","webpack://checkoutKit/./src/coupon/coupon-actions.ts","webpack://checkoutKit/./src/billing/billing-address-actions.ts","webpack://checkoutKit/./src/order/order-actions.ts","webpack://checkoutKit/./src/payment/payment-method-actions.ts","webpack://checkoutKit/external \"rxjs/operators\"","webpack://checkoutKit/./src/checkout-buttons/checkout-button-actions.ts","webpack://checkoutKit/./src/coupon/gift-certificate-actions.ts","webpack://checkoutKit/./src/payment/instrument/instrument-actions.ts","webpack://checkoutKit/./src/embedded-checkout/embedded-checkout-events.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-actions.ts","webpack://checkoutKit/./src/common/error/errors/request-error.ts","webpack://checkoutKit/./src/config/config-actions.ts","webpack://checkoutKit/./src/geography/country-actions.ts","webpack://checkoutKit/./src/shipping/shipping-country-actions.ts","webpack://checkoutKit/external \"@bigcommerce/request-sender\"","webpack://checkoutKit/./src/payment/payment-status-types.ts","webpack://checkoutKit/external \"@bigcommerce/script-loader\"","webpack://checkoutKit/./src/common/http-request/content-type.ts","webpack://checkoutKit/external \"shallowequal\"","webpack://checkoutKit/./src/payment/payment-actions.ts","webpack://checkoutKit/./src/common/error/errors/invalid-argument-error.ts","webpack://checkoutKit/./src/common/utility/is-equal.ts","webpack://checkoutKit/./src/payment/payment-method-types.ts","webpack://checkoutKit/./src/embedded-checkout/is-iframe-event.ts","webpack://checkoutKit/./src/common/utility/cache-key-maps.ts","webpack://checkoutKit/./src/common/utility/cache-key-resolver.ts","webpack://checkoutKit/external \"@bigcommerce/form-poster\"","webpack://checkoutKit/external \"local-storage-fallback\"","webpack://checkoutKit/./src/embedded-checkout/iframe-event-poster.ts","webpack://checkoutKit/./src/customer/customer-actions.ts","webpack://checkoutKit/./src/order/spam-protection/spam-protection-actions.ts","webpack://checkoutKit/./src/payment/errors/payment-method-invalid-error.ts","webpack://checkoutKit/./src/common/error/error-actions.ts","webpack://checkoutKit/./src/payment/payment-method-action-creator.ts","webpack://checkoutKit/./src/payment/payment-method-request-sender.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-content/embedded-content-events.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-event-listener.ts","webpack://checkoutKit/./src/checkout/checkout-default-includes.ts","webpack://checkoutKit/./src/cart/map-to-internal-line-items.ts","webpack://checkoutKit/./src/cart/map-gift-certificate-to-internal-line-item.ts","webpack://checkoutKit/./src/common/http-request/internal-api-headers.ts","webpack://checkoutKit/./src/common/utility/bind-decorator.ts","webpack://checkoutKit/external \"reselect\"","webpack://checkoutKit/./src/checkout/checkout-params.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-sdk-creator.ts","webpack://checkoutKit/./src/cart/map-to-internal-line-item.ts","webpack://checkoutKit/external \"iframe-resizer\"","webpack://checkoutKit/./src/common/utility/is-private.ts","webpack://checkoutKit/./src/common/error/errors/not-initialized-error.ts","webpack://checkoutKit/./src/common/error/throw-error-action.ts","webpack://checkoutKit/./src/common/utility/amount-transformer.ts","webpack://checkoutKit/./src/common/url/parse-url.ts","webpack://checkoutKit/./src/common/data-store/cachable-action-decorator.ts","webpack://checkoutKit/./src/common/data-store/is-action-options.ts","webpack://checkoutKit/./src/common/data-store/cache-action.ts","webpack://checkoutKit/./src/common/utility/omit-deep.ts","webpack://checkoutKit/./src/checkout/checkout-action-creator.ts","webpack://checkoutKit/./src/shipping/consignment-action-creator.ts","webpack://checkoutKit/./src/shipping/consignment-request-sender.ts","webpack://checkoutKit/./src/payment/strategies/masterpass/get-callback-url.ts","webpack://checkoutKit/./src/shipping/map-to-internal-shipping-option.ts","webpack://checkoutKit/./src/common/error/errors/unrecoverable-error.ts","webpack://checkoutKit/./src/common/error/errors/map-from-internal-error-response.ts","webpack://checkoutKit/./src/common/error/errors/map-from-payment-error-response.ts","webpack://checkoutKit/./src/common/error/request-error-factory.ts","webpack://checkoutKit/./src/common/error/errors/map-from-storefront-error-response.ts","webpack://checkoutKit/./src/common/error/clear-error-reducer.ts","webpack://checkoutKit/./src/common/utility/replace.ts","webpack://checkoutKit/./src/common/utility/object-set.ts","webpack://checkoutKit/./src/billing/billing-address-state.ts","webpack://checkoutKit/./src/billing/billing-address-reducer.ts","webpack://checkoutKit/./src/common/utility/is-plain-object.ts","webpack://checkoutKit/./src/common/utility/array-replace.ts","webpack://checkoutKit/./src/common/utility/object-merge.ts","webpack://checkoutKit/./src/cart/cart-state.ts","webpack://checkoutKit/./src/cart/cart-reducer.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-reducer.ts","webpack://checkoutKit/./src/config/config-reducer.ts","webpack://checkoutKit/./src/coupon/coupon-state.ts","webpack://checkoutKit/./src/coupon/coupon-reducer.ts","webpack://checkoutKit/./src/coupon/gift-certificate-state.ts","webpack://checkoutKit/./src/coupon/gift-certificate-reducer.ts","webpack://checkoutKit/./src/customer/customer-reducer.ts","webpack://checkoutKit/./src/customer/customer-strategy-state.ts","webpack://checkoutKit/./src/customer/customer-strategy-reducer.ts","webpack://checkoutKit/./src/geography/country-reducer.ts","webpack://checkoutKit/./src/order/order-state.ts","webpack://checkoutKit/./src/order/order-reducer.ts","webpack://checkoutKit/./src/payment/payment-reducer.ts","webpack://checkoutKit/./src/payment/payment-method-reducer.ts","webpack://checkoutKit/./src/common/utility/merge-or-push.ts","webpack://checkoutKit/./src/payment/payment-strategy-state.ts","webpack://checkoutKit/./src/payment/payment-strategy-reducer.ts","webpack://checkoutKit/./src/payment/instrument/instrument-reducer.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-reducer.ts","webpack://checkoutKit/./src/shipping/consignment-reducer.ts","webpack://checkoutKit/./src/shipping/shipping-country-reducer.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-state.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-reducer.ts","webpack://checkoutKit/./src/checkout/checkout-reducer.ts","webpack://checkoutKit/./src/common/utility/memoize.ts","webpack://checkoutKit/./src/common/selector/create-selector.ts","webpack://checkoutKit/./src/common/selector/with-memoized-combiner.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-selector.ts","webpack://checkoutKit/./src/common/utility/create-freeze-proxy.ts","webpack://checkoutKit/./src/config/config-selector.ts","webpack://checkoutKit/./src/customer/customer-selector.ts","webpack://checkoutKit/./src/customer/customer-strategy-selector.ts","webpack://checkoutKit/./src/form/form-selector.ts","webpack://checkoutKit/./src/geography/country-selector.ts","webpack://checkoutKit/./src/payment/payment-method-selector.ts","webpack://checkoutKit/./src/payment/payment-strategy-selector.ts","webpack://checkoutKit/./src/payment/payment-selector.ts","webpack://checkoutKit/./src/payment/instrument/instrument-selector.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-selector.ts","webpack://checkoutKit/./src/shipping/shipping-address-selector.ts","webpack://checkoutKit/./src/shipping/shipping-country-selector.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-selector.ts","webpack://checkoutKit/./src/address/is-address-equal.ts","webpack://checkoutKit/./src/shipping/consignment-selector.ts","webpack://checkoutKit/./src/checkout/checkout-selector.ts","webpack://checkoutKit/./src/checkout/create-internal-checkout-selectors.ts","webpack://checkoutKit/./src/billing/billing-address-selector.ts","webpack://checkoutKit/./src/coupon/coupon-selector.ts","webpack://checkoutKit/./src/cart/cart-selector.ts","webpack://checkoutKit/./src/coupon/gift-certificate-selector.ts","webpack://checkoutKit/./src/order/order-selector.ts","webpack://checkoutKit/./src/checkout/create-checkout-store.ts","webpack://checkoutKit/./src/checkout/create-action-transformer.ts","webpack://checkoutKit/./src/common/error/create-request-error-factory.ts","webpack://checkoutKit/./src/checkout/create-checkout-store-reducer.ts","webpack://checkoutKit/./src/checkout/errors/checkout-not-available-error.ts","webpack://checkoutKit/./src/checkout/checkout-request-sender.ts","webpack://checkoutKit/./src/coupon/map-to-internal-coupon.ts","webpack://checkoutKit/./src/address/map-to-internal-address.ts","webpack://checkoutKit/./src/billing/is-billing-address-like.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-error-selector.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-status-selector.ts","webpack://checkoutKit/./src/checkout-buttons/create-checkout-button-selectors.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-initializer.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/checkout-button-method-type.ts","webpack://checkoutKit/./src/common/dom/is-element-id.ts","webpack://checkoutKit/./src/common/dom/set-unique-element-id.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-strategy-action-creator.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/braintree/braintree-paypal-button-strategy.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/googlepay/googlepay-button-strategy.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/masterpass/masterpass-button-strategy.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/paypal/paypal-button-strategy.ts","webpack://checkoutKit/./src/checkout-buttons/create-checkout-button-initializer.ts","webpack://checkoutKit/./src/checkout-buttons/create-checkout-button-registry.ts","webpack://checkoutKit/./src/embedded-checkout/errors/not-embeddable-error.ts","webpack://checkoutKit/./src/common/storage/browser-storage.ts","webpack://checkoutKit/./src/embedded-checkout/errors/invalid-login-token-error.ts","webpack://checkoutKit/./src/embedded-checkout/embedded-checkout.ts","webpack://checkoutKit/./src/embedded-checkout/loading-indicator.ts","webpack://checkoutKit/./src/embedded-checkout/resizable-iframe-creator.ts","webpack://checkoutKit/./src/embedded-checkout/embed-checkout.ts","webpack://checkoutKit/external \"@bigcommerce/bigpay-client\"","webpack://checkoutKit/external \"messageformat\"","webpack://checkoutKit/./src/common/error/errors/timeout-error.ts","webpack://checkoutKit/./src/common/selector/selector-decorator.ts","webpack://checkoutKit/./src/common/http-request/join-includes.ts","webpack://checkoutKit/./src/config/config-action-creator.ts","webpack://checkoutKit/./src/config/config-request-sender.ts","webpack://checkoutKit/./src/billing/billing-address-action-creator.ts","webpack://checkoutKit/./src/billing/billing-address-request-sender.ts","webpack://checkoutKit/./src/common/registry/registry.ts","webpack://checkoutKit/./src/payment/strategies/masterpass/masterpass-script-loader.ts","webpack://checkoutKit/./src/remote-checkout/errors/remote-checkout-synchronization-error.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-braintree-initializer.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-stripe-initializer.ts","webpack://checkoutKit/./src/customer/map-to-internal-customer.ts","webpack://checkoutKit/./src/coupon/map-to-internal-gift-certificate.ts","webpack://checkoutKit/./src/order/map-to-internal-order.ts","webpack://checkoutKit/./src/payment/strategies/paypal/paypal-script-loader.ts","webpack://checkoutKit/./src/common/error/error-action-creator.ts","webpack://checkoutKit/./src/common/utility/get-environment.ts","webpack://checkoutKit/./src/common/log/console-logger.ts","webpack://checkoutKit/./src/common/log/noop-logger.ts","webpack://checkoutKit/./src/common/log/get-default-logger.ts","webpack://checkoutKit/./src/common/log/create-logger.ts","webpack://checkoutKit/./src/coupon/coupon-action-creator.ts","webpack://checkoutKit/./src/coupon/coupon-request-sender.ts","webpack://checkoutKit/./src/coupon/gift-certificate-action-creator.ts","webpack://checkoutKit/./src/coupon/gift-certificate-request-sender.ts","webpack://checkoutKit/./src/customer/customer-strategy-action-creator.ts","webpack://checkoutKit/./src/payment/strategies/amazon-pay/amazon-pay-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-visacheckout-payment-processor.ts","webpack://checkoutKit/./src/payment/strategies/braintree/create-braintree-visacheckout-payment-processor.ts","webpack://checkoutKit/./src/payment/strategies/braintree/visacheckout-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/chasepay/chasepay-script-loader.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-request-sender.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-action-creator.ts","webpack://checkoutKit/./src/customer/customer-action-creator.ts","webpack://checkoutKit/./src/customer/customer-request-sender.ts","webpack://checkoutKit/./src/common/error/errors/not-implemented-error.ts","webpack://checkoutKit/./src/customer/strategies/amazon/amazon-pay-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/braintree/braintree-visacheckout-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/chasepay/chasepay-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/default/default-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/googlepay/googlepay-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/masterpass/masterpass-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/square/square-customer-strategy.ts","webpack://checkoutKit/./src/geography/country-action-creator.ts","webpack://checkoutKit/./src/geography/country-request-sender.ts","webpack://checkoutKit/./src/order/order-request-sender.ts","webpack://checkoutKit/./src/order/order-action-creator.ts","webpack://checkoutKit/./src/common/dom/mutation-observer.ts","webpack://checkoutKit/./src/order/spam-protection/errors/spam-protection-failed-error.ts","webpack://checkoutKit/./src/order/spam-protection/errors/spam-protection-not-completed-error.ts","webpack://checkoutKit/./src/order/spam-protection/google-recaptcha.ts","webpack://checkoutKit/./src/order/spam-protection/google-recaptcha-script-loader.ts","webpack://checkoutKit/./src/order/spam-protection/spam-protection-action-creator.ts","webpack://checkoutKit/./src/order/errors/order-finalization-not-required-error.ts","webpack://checkoutKit/./src/payment/payment-strategy-type.ts","webpack://checkoutKit/./src/payment/payment-strategy-action-creator.ts","webpack://checkoutKit/./src/cart/cart-comparator.ts","webpack://checkoutKit/./src/cart/errors/cart-changed-error.ts","webpack://checkoutKit/./src/checkout/checkout-validator.ts","webpack://checkoutKit/./src/payment/payment-action-creator.ts","webpack://checkoutKit/./src/payment/payment-request-sender.ts","webpack://checkoutKit/./src/payment/is-vaulted-instrument.ts","webpack://checkoutKit/./src/payment/payment-request-transformer.ts","webpack://checkoutKit/./src/order/order-params.ts","webpack://checkoutKit/./src/payment/payment-strategy-registry.ts","webpack://checkoutKit/./src/payment/errors/payment-argument-invalid-error.ts","webpack://checkoutKit/./src/payment/errors/payment-method-cancelled-error.ts","webpack://checkoutKit/./src/payment/strategies/affirm/affirm-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/affirm/affirmJs.ts","webpack://checkoutKit/./src/payment/strategies/affirm/affirm-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/afterpay/afterpay-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/afterpay/afterpay-script-loader.ts","webpack://checkoutKit/./src/address/is-internal-address-equal.ts","webpack://checkoutKit/./src/common/utility/omit-private.ts","webpack://checkoutKit/./src/address/map-from-internal-address.ts","webpack://checkoutKit/./src/payment/strategies/amazon-pay/amazon-pay-payment-strategy.ts","webpack://checkoutKit/./src/common/overlay/overlay.ts","webpack://checkoutKit/./src/common/utility/cancellable-promise.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-payment-processor.ts","webpack://checkoutKit/./src/payment/is-credit-card-like.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-credit-card-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-paypal-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/chasepay/chasepay.ts","webpack://checkoutKit/./src/payment/strategies/braintree/is-braintree-error.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-visacheckout-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/chasepay/chasepay-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/cybersource/cardinal.ts","webpack://checkoutKit/./src/payment/strategies/converge/converge-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/credit-card/credit-card-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/cybersource/cybersource-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/cybersource/cardinal-client.ts","webpack://checkoutKit/./src/payment/strategies/square/square-form.ts","webpack://checkoutKit/./src/payment/strategies/cybersource/cardinal-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/klarna/klarna-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/klarna/klarna-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/legacy/legacy-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/masterpass/masterpass-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/no-payment/no-payment-data-required-strategy.ts","webpack://checkoutKit/./src/payment/strategies/offline/offline-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/offsite/offsite-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/paypal/paypal-pro-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/paypal/paypal-express-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/sage-pay/sage-pay-payment-strategy.ts","webpack://checkoutKit/./src/common/error/errors/unsupported-browser-error.ts","webpack://checkoutKit/./src/payment/strategies/square/square-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/square/square-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/stripev3/stripev3-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/stripev3/stripev3-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/wepay/wepay-risk-client.ts","webpack://checkoutKit/./src/payment/strategies/wepay/wepay-payment-strategy.ts","webpack://checkoutKit/./src/payment/errors/payment-method-declined-error.ts","webpack://checkoutKit/./src/payment/strategies/zip/zip-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/zip/zip-script-loader.ts","webpack://checkoutKit/./src/payment/create-payment-strategy-registry.ts","webpack://checkoutKit/./src/payment/strategies/braintree/create-braintree-payment-processor.ts","webpack://checkoutKit/./src/payment/instrument/instrument-action-creator.ts","webpack://checkoutKit/./src/common/date-time/add-minutes.ts","webpack://checkoutKit/./src/common/date-time/is-future.ts","webpack://checkoutKit/./src/payment/instrument/instrument-response-transformer.ts","webpack://checkoutKit/./src/payment/instrument/instrument-request-sender.ts","webpack://checkoutKit/./src/shipping/shipping-country-action-creator.ts","webpack://checkoutKit/./src/shipping/shipping-country-request-sender.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-action-creator.ts","webpack://checkoutKit/./src/shipping/strategies/amazon/amazon-pay-shipping-strategy.ts","webpack://checkoutKit/./src/shipping/strategies/default/default-shipping-strategy.ts","webpack://checkoutKit/./src/common/data-store/data-store-projection.ts","webpack://checkoutKit/./src/common/utility/clone-decorator.ts","webpack://checkoutKit/./src/checkout/checkout-store-selector.ts","webpack://checkoutKit/./src/checkout/checkout-store-error-selector.ts","webpack://checkoutKit/./src/checkout/checkout-store-status-selector.ts","webpack://checkoutKit/./src/checkout/create-checkout-selectors.ts","webpack://checkoutKit/./src/common/error/error-message-transformer.ts","webpack://checkoutKit/./src/common/utility/to-single-line.ts","webpack://checkoutKit/./src/checkout/checkout-service.ts","webpack://checkoutKit/./src/checkout/create-checkout-service-error-transformer.ts","webpack://checkoutKit/./src/checkout/create-checkout-service.ts","webpack://checkoutKit/./src/order/spam-protection/create-spam-protection.ts","webpack://checkoutKit/./src/payment/create-payment-client.ts","webpack://checkoutKit/./src/customer/create-customer-strategy-registry.ts","webpack://checkoutKit/./src/shipping/create-shipping-strategy-registry.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-content/handle-frame-loaded-event.ts","webpack://checkoutKit/./src/common/error/errors/custom-error.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-content/iframe-embedded-checkout-messenger.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-content/noop-embedded-checkout-messenger.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-content/create-embedded-checkout-messenger.ts","webpack://checkoutKit/./src/locale/language-service.ts","webpack://checkoutKit/./src/locale/create-language-service.ts","webpack://checkoutKit/./src/currency/currency-formatter.ts","webpack://checkoutKit/./src/currency/currency-service.ts","webpack://checkoutKit/./src/currency/create-currency-service.ts","webpack://checkoutKit/./src/index.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-payment-processor.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/create-googlepay-payment-processor.ts","webpack://checkoutKit/./src/cart/map-to-internal-cart.ts","webpack://checkoutKit/./src/promotion/map-to-discount-notifications.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","ConsignmentActionType","__webpack_exports__","CustomerStrategyActionType","PaymentStrategyActionType","MissingDataErrorType","MissingDataError","_super","subtype","_this","this","type","MissingBillingAddress","MissingCart","MissingConsignments","MissingCheckout","MissingCheckoutConfig","MissingOrderConfig","MissingOrder","MissingOrderId","MissingPayment","MissingPaymentMethod","MissingShippingAddress","MissingSpamProtectionToken","getErrorMessage","tslib__WEBPACK_IMPORTED_MODULE_0__","_standard_error__WEBPACK_IMPORTED_MODULE_1__","ShippingStrategyActionType","CheckoutActionType","standard_error_StandardError","StandardError","message","_newTarget","setPrototypeOf","__proto__","Error","captureStackTrace","stack","external_tslib_","CouponActionType","BillingAddressActionType","OrderActionType","PaymentMethodActionType","CheckoutButtonActionType","GiftCertificateActionType","InstrumentActionType","EmbeddedCheckoutEventType","RemoteCheckoutActionType","DEFAULT_RESPONSE","body","headers","status","RequestError","response","_a","_b","errors","_c","ConfigActionType","CountryActionType","ShippingCountryActionType","ACKNOWLEDGE","FINALIZE","ContentType","PaymentActionType","InvalidArgumentError","isEqual","objectA","objectB","options","Array","isArray","length","index","length_1","isArrayEqual","Date","getTime","isDateEqual","RegExp","toString","isRegExpEqual","filter","keyFilter","keysA","keys","keysB","length_2","isObjectEqual","HOSTED","OFFLINE","isIframeEvent","isTerminalCacheKeyMap","map","cache_key_resolver_CacheKeyResolver","CacheKeyResolver","_lastId","_map","maps","_usedMaps","_options","maxSize","external_shallowequal_","onExpire","external_lodash_","getKey","args","_i","arguments","result","_resolveMap","apply","parentMap","cacheKey","usedCount","_generateMap","slice","_removeLeastUsedMap","getUsedCount","isMatched","mapIndex","unshift","splice","parent","terminalMap","recentlyUsedMap","indexOf","pop","_removeMap","isRootCacheKeyMap","_common_url__WEBPACK_IMPORTED_MODULE_0__","IframeEventPoster","targetOrigin","_targetWindow","_targetOrigin","origin","post","event","window","postMessage","setTarget","CustomerActionType","SpamProtectionActionType","PaymentMethodInvalidError","ErrorActionType","PaymentMethodActionCreator","_requestSender","loadPaymentMethods","rxjs__WEBPACK_IMPORTED_MODULE_2__","observer","next","_bigcommerce_data_store__WEBPACK_IMPORTED_MODULE_1__","_payment_method_actions__WEBPACK_IMPORTED_MODULE_4__","LoadPaymentMethodsRequested","then","meta","deviceSessionId","sessionHash","LoadPaymentMethodsSucceeded","complete","catch","error","LoadPaymentMethodsFailed","loadPaymentMethod","methodId","LoadPaymentMethodRequested","undefined","LoadPaymentMethodSucceeded","LoadPaymentMethodFailed","_common_data_store__WEBPACK_IMPORTED_MODULE_3__","_common_http_request__WEBPACK_IMPORTED_MODULE_0__","_common_http_request__WEBPACK_IMPORTED_MODULE_1__","PaymentMethodRequestSender","timeout","Accept","JsonV1","X-API-INTERNAL","url","EmbeddedContentEventType","IframeEventListener","sourceOrigin","_sourceOrigin","_common_url__WEBPACK_IMPORTED_MODULE_1__","_isListening","_listeners","listen","addEventListener","_handleMessage","stopListen","removeEventListener","addListener","listener","listeners","push","removeListener","trigger","forEach","_is_iframe_event__WEBPACK_IMPORTED_MODULE_3__","data","_common_utility__WEBPACK_IMPORTED_MODULE_2__","mapToInternalLineItems","itemMap","decimalPlaces","idKey","reduce","concat","item","amountTransformer","amount_transformer","id","imageUrl","amount","amountAfterDiscount","discount","integerAmount","toInteger","integerAmountAfterDiscount","integerDiscount","quantity","sender","recipient","attributes","variantId","mapGiftCertificateToInternalLineItem","map_to_internal_line_item","mapToInternalLineItemType","INTERNAL_USE_ONLY","bindDecorator","target","descriptor","bindMethodDecorator","decoratedTarget","class_1","getOwnPropertyNames","getOwnPropertyDescriptor","bindClassDecorator","method","boundMethod","set","CheckoutIncludes","_common_error_errors__WEBPACK_IMPORTED_MODULE_0__","BraintreeScriptLoader","_scriptLoader","_window","loadClient","loadScript","braintree","client","load3DS","threeDSecure","loadDataCollector","dataCollector","loadPaypal","paypal","loadPaypalCheckout","paypalCheckout","loadVisaCheckout","visaCheckout","loadGooglePayment","googlePayment","BraintreeSDKCreator","_braintreeScriptLoader","_dataCollectors","initialize","clientToken","_clientToken","getClient","_common_error_errors__WEBPACK_IMPORTED_MODULE_1__","PaymentNotInitialized","_client","authorization","getPaypal","_paypal","Promise","all","getPaypalCheckout","_paypalCheckout","get3DS","_3ds","getDataCollector","cached","kount","code","deviceData","teardown","resolve","getVisaCheckout","_visaCheckout","getGooglePaymentComponent","_googlePay","_teardown","default","mod","mapToInternalLineItem","_common_utility__WEBPACK_IMPORTED_MODULE_0__","extendedListPrice","extendedSalePrice","discountAmount","downloadsPageUrl","downloadPageUrl","brand","categoryNames","productId","option","addedByPromotion","isPrivate","NotInitializedErrorType","NotInitializedError","CustomerNotInitialized","ShippingNotInitialized","SpamProtectionNotInitialized","throwErrorAction","_bigcommerce_data_store__WEBPACK_IMPORTED_MODULE_0__","rxjs__WEBPACK_IMPORTED_MODULE_1__","action","payload","AmountTransformer","_decimalPlaces","Math","round","pow","parseUrl","_error_errors__WEBPACK_IMPORTED_MODULE_0__","test","anchor","document","createElement","href","hash","hostname","pathname","port","protocol","search","cachableActionDecorator","memoizedMethods","WeakMap","decorateMethod","param","lastArg","useCache","fn","resolver","instanceMethods","cache_key_resolver","external_rxjs_","pipe","operators_","store","omitDeep","lodash__WEBPACK_IMPORTED_MODULE_0__","predicate","CheckoutActionCreator","_checkoutRequestSender","_configActionCreator","loadCheckout","_checkout_actions__WEBPACK_IMPORTED_MODULE_7__","LoadCheckoutRequested","loadConfig","LoadCheckoutSucceeded","rxjs_operators__WEBPACK_IMPORTED_MODULE_3__","_common_error__WEBPACK_IMPORTED_MODULE_4__","LoadCheckoutFailed","loadDefaultCheckout","context","getState","config","getContextConfig","checkoutId","_common_error_errors__WEBPACK_IMPORTED_MODULE_5__","updateCheckout","checkout","getCheckout","_common_error_errors__WEBPACK_IMPORTED_MODULE_6__","UpdateCheckoutRequested","UpdateCheckoutSucceeded","UpdateCheckoutFailed","loadCurrentCheckout","ConsignmentActionCreator","_consignmentRequestSender","unassignItemsByAddress","consignment","state","_common_error_errors__WEBPACK_IMPORTED_MODULE_4__","existingConsignment","consignments","getConsignmentByAddress","shippingAddress","lineItems","_removeLineItems","cart","getCart","updateConsignment","deleteConsignment","assignItemsByAddress","_createOrUpdateConsignment","_addLineItems","selectShippingOption","getConsignments","consignmentUpdateBody","shippingOptionId","consignmentMeta","_consignment_actions__WEBPACK_IMPORTED_MODULE_6__","UpdateShippingOptionRequested","UpdateShippingOptionSucceeded","UpdateShippingOptionFailed","loadShippingOptions","LoadShippingOptionsRequested","params","include","_checkout_checkout_params__WEBPACK_IMPORTED_MODULE_3__","AvailableShippingOptions","LoadShippingOptionsSucceeded","LoadShippingOptionsFailed","updateAddress","address","_getConsignmentRequestBody","createConsignments","CreateConsignmentsRequested","CreateConsignmentsSucceeded","CreateConsignmentsFailed","UpdateConsignmentRequested","UpdateConsignmentSucceeded","UpdateConsignmentFailed","consignmentId","DeleteConsignmentRequested","DeleteConsignmentSucceeded","DeleteConsignmentFailed","updateShippingOption","_isUpdateConsignmentRequest","physicalItems","itemId","_hydrateLineItems","lineItemIds","existingItem","sharedItem","find","lineItem","request","DEFAULT_PARAMS","join","ConsignmentRequestSender","put","delete","getCallbackUrl","location","mapToInternalShippingOption","isSelected","description","price","cost","selected","isRecommended","transitTime","UnrecoverableError","request_error","joinErrors","map_from_payment_error_response_joinErrors","RequestErrorFactory","_factoryMethods","register","detail","title","mapFromInternalErrorResponse","mapFromStorefrontErrorResponse","mapFromPaymentErrorResponse","timeout_error","factoryMethod","createError","_getType","_isStorefrontErrorResponseBody","_isInternalErrorResponseBody","internalType","split","errorResponse","storefrontErrorResponse","internalErrorResponse","clearErrorReducer","error_actions","ClearError","isClearErrorAction","omit_deep","replace","currentValue","newValue","is_equal","objectSet","DEFAULT_STATE","statuses","billingAddressReducer","data_store_","dataReducer","errorsReducer","statusesReducer","reducer","billing_address_actions","UpdateBillingAddressSucceeded","ContinueAsGuestSucceeded","checkout_actions","order_actions","LoadOrderSucceeded","billingAddress","UpdateBillingAddressRequested","UpdateBillingAddressFailed","ContinueAsGuestRequested","ContinueAsGuestFailed","isPlainObject","arrayReplace","currentArray","newArray","matchObject","a","b","newItemCount","countNewItem","replacedValue","newItem","currentItem","objectMerge","currentObject","newObject","cart_state_DEFAULT_STATE","cartReducer","cart_reducer_dataReducer","cart_reducer_errorsReducer","cart_reducer_statusesReducer","consignment_actions","coupon_actions","ApplyCouponSucceeded","RemoveCouponSucceeded","gift_certificate_actions","ApplyGiftCertificateSucceeded","RemoveGiftCertificateSucceeded","checkout_button_reducer_DEFAULT_STATE","DEFAULT_DATA_STATE","initializedContainers","DEFAULT_ERROR_STATE","DEFAULT_STATUS_STATE","checkoutButtonReducer","checkout_button_reducer_dataReducer","checkout_button_reducer_errorsReducer","checkout_button_reducer_statusesReducer","checkout_button_actions","InitializeButtonSucceeded","containerId","DeinitializeButtonSucceeded","InitializeButtonRequested","initializeError","InitializeButtonFailed","DeinitializeButtonRequested","deinitializeError","DeinitializeButtonFailed","isInitializing","isDeinitializing","config_reducer_DEFAULT_STATE","configReducer","config_reducer_dataReducer","config_reducer_errorsReducer","config_reducer_statusesReducer","config_actions","LoadConfigSucceeded","loadError","LoadConfigFailed","LoadConfigRequested","isLoading","coupon_state_DEFAULT_STATE","couponReducer","coupon_reducer_dataReducer","coupon_reducer_errorsReducer","coupon_reducer_statusesReducer","coupons","ApplyCouponRequested","ApplyCouponFailed","RemoveCouponRequested","RemoveCouponFailed","gift_certificate_state_DEFAULT_STATE","giftCertificateReducer","gift_certificate_reducer_dataReducer","gift_certificate_reducer_errorsReducer","gift_certificate_reducer_statusesReducer","giftCertificates","ApplyGiftCertificateRequested","ApplyGiftCertificateFailed","RemoveGiftCertificateRequested","RemoveGiftCertificateFailed","customer_reducer_DEFAULT_STATE","customerReducer","customer_reducer_dataReducer","customer","customer_strategy_state_DEFAULT_STATE","customerStrategyReducer","customer_strategy_reducer_dataReducer","customer_strategy_reducer_errorsReducer","customer_strategy_reducer_statusesReducer","customer_strategy_actions","InitializeSucceeded","isInitialized","DeinitializeSucceeded","InitializeRequested","initializeMethodId","InitializeFailed","DeinitializeRequested","deinitializeMethodId","DeinitializeFailed","SignInRequested","SignInSucceeded","signInError","signInMethodId","SignInFailed","SignOutRequested","SignOutSucceeded","signOutError","signOutMethodId","SignOutFailed","WidgetInteractionStarted","WidgetInteractionFinished","widgetInteractionError","widgetInteractionMethodId","WidgetInteractionFailed","isSigningIn","isSigningOut","isWidgetInteracting","country_reducer_DEFAULT_STATE","countryReducer","country_reducer_dataReducer","country_reducer_errorsReducer","country_reducer_statusesReducer","country_actions","LoadCountriesSucceeded","LoadCountriesRequested","LoadCountriesFailed","order_state_DEFAULT_STATE","orderReducer","order_reducer_dataReducer","order_reducer_errorsReducer","metaReducer","order_reducer_statusesReducer","LoadOrderPaymentsSucceeded","FinalizeOrderSucceeded","SubmitOrderSucceeded","callbackUrl","order","orderToken","token","payment","spam_protection_actions","Completed","LoadOrderRequested","LoadOrderPaymentsRequested","LoadOrderFailed","LoadOrderPaymentsFailed","paymentReducer","payment_reducer_dataReducer","payment_actions","SubmitPaymentSucceeded","payment_method_reducer_DEFAULT_STATE","paymentMethodReducer","payment_method_reducer_dataReducer","payment_method_reducer_errorsReducer","payment_method_reducer_metaReducer","payment_method_reducer_statusesReducer","payment_method_actions","array","defaultPredicate","mergeOrPush","gateway","loadMethodId","loadMethodError","isLoadingMethod","payment_strategy_state_DEFAULT_STATE","paymentStrategyReducer","payment_strategy_reducer_dataReducer","payment_strategy_reducer_errorsReducer","payment_strategy_reducer_statusesReducer","payment_strategy_actions","ExecuteRequested","ExecuteSucceeded","executeError","executeMethodId","ExecuteFailed","FinalizeRequested","FinalizeSucceeded","finalizeError","finalizeMethodId","FinalizeFailed","isExecuting","isFinalizing","instrument_reducer_DEFAULT_STATE","instrumentReducer","instrument_reducer_dataReducer","instrument_reducer_errorsReducer","instrument_reducer_metaReducer","instrument_reducer_statusesReducer","instrument_actions","LoadInstrumentsSucceeded","vaultedInstruments","DeleteInstrumentSucceeded","instrument","bigpayToken","instrumentId","LoadInstrumentsRequested","DeleteInstrumentRequested","deleteError","failedInstrument","LoadInstrumentsFailed","DeleteInstrumentFailed","isDeleting","deletingInstrument","remote_checkout_reducer_DEFAULT_STATE","remoteCheckoutReducer","remote_checkout_reducer_dataReducer","remote_checkout_actions","InitializeRemoteBillingSucceeded","billing","InitializeRemoteShippingSucceeded","shipping","LoadRemoteSettingsSucceeded","settings","UpdateRemoteCheckout","consignment_reducer_DEFAULT_STATE","updateShippingOptionError","updateError","isUpdating","isUpdatingShippingOption","consignmentReducer","consignment_reducer_dataReducer","consignment_reducer_errorsReducer","consignment_reducer_statusesReducer","customer_actions","SignOutCustomerSucceeded","_d","_e","_f","isLoadingShippingOptions","isCreating","shipping_country_reducer_DEFAULT_STATE","shippingCountryReducer","shipping_country_reducer_dataReducer","shipping_country_reducer_errorsReducer","shipping_country_reducer_statusesReducer","shipping_country_actions","LoadShippingCountriesSucceeded","LoadShippingCountriesRequested","LoadShippingCountriesFailed","shipping_strategy_state_DEFAULT_STATE","shippingStrategyReducer","shipping_strategy_reducer_dataReducer","shipping_strategy_reducer_errorsReducer","shipping_strategy_reducer_statusesReducer","shipping_strategy_actions","UpdateAddressRequested","UpdateAddressSucceeded","updateAddressError","updateAddressMethodId","UpdateAddressFailed","SelectOptionRequested","SelectOptionSucceeded","selectOptionError","selectOptionMethodId","SelectOptionFailed","isUpdatingAddress","isSelectingOption","checkout_reducer_DEFAULT_STATE","checkoutReducer","checkout_reducer_dataReducer","checkout_reducer_errorsReducer","checkout_reducer_statusesReducer","orderId","memoize","cache","Map","memoized","memoizeOne","creator","create_selector","external_reselect_","combiner","combinerArgs","checkout_button_selector","CheckoutButtonSelector","_checkoutButton","getInitializeError","getDeinitializeError","selector_decorator","createFreezeProxy","trap","proxy","iteratee","getPrototypeOf","traversePrototypeOf","charAt","createProxy","config_selector","ConfigSelector","_config","getConfig","getStoreConfig","storeConfig","getExternalSource","externalSource","getLoadError","customer_selector","CustomerSelector","_customer","getCustomer","CustomerStrategySelector","_customerStrategies","getSignInError","getSignOutError","getWidgetInteractionError","form_selector","FormSelector","getShippingAddressFields","countries","countryCode","selectedCountry","formFields","shippingAddressFields","field","_processField","getBillingAddressFields","billingAddressFields","_processCountry","_processProvince","_processsPostCode","country","items","label","fieldType","itemtype","subdivisions","required","hasPostalCodes","Boolean","country_selector","CountrySelector","_countries","getCountries","payment_method_selector","PaymentMethodSelector","_paymentMethods","getPaymentMethods","getPaymentMethodsMeta","getPaymentMethod","gatewayId","getLoadMethodError","payment_strategy_selector","PaymentStrategySelector","_paymentStrategies","getExecuteError","getFinalizeError","getWidgetInteractingError","payment_selector","PaymentSelector","_checkout","_order","getPaymentId","internalPayment","_getInternalPayment","providerId","_getHostedPayment","_getGatewayPayment","getPaymentStatus","step","getPaymentToken","getOrderMeta","getPaymentRedirectUrl","redirectUrl","isPaymentDataRequired","useStoreCredit","grandTotal","getGrandTotal","isPaymentDataSubmitted","paymentMethod","nonce","payment_status_types","getOrder","payments","providerType","payment_method_types","InstrumentSelector","_instruments","getInstruments","getInstrumentsMeta","getDeleteError","remote_checkout_selector","RemoteCheckoutSelector","_remoteCheckout","shipping_address_selector","ShippingAddressSelector","_consignments","getShippingAddress","shipping_country_selector","ShippingCountrySelector","_shippingCountries","getShippingCountries","shipping_strategy_selector","ShippingStrategySelector","_shippingStrategies","getUpdateAddressError","getSelectOptionError","normalize","firstName","lastName","company","address1","address2","city","stateOrProvince","postalCode","phone","customFields","consignment_selector","ConsignmentSelector","_cart","getConsignmentById","addressA","addressB","getShippingOption","selectedShippingOption","getCreateError","getLoadShippingOptionsError","loadShippingOptionsError","getUnassignedItems","assignedLineItemIds","itemIds","getUpdateError","getItemAssignmentError","getUpdateShippingOptionError","isAssigningItems","checkout_selector","CheckoutSelector","_billingAddress","_coupons","_giftCertificates","getBillingAddress","getCoupons","getGiftCertificates","storeCredit","max","createInternalCheckoutSelectorsFactory","getContinueAsGuestError","isContinuingAsGuest","getRemoveError","getApplyError","isApplying","isRemoving","createBillingAddressSelector","continueAsGuestError","createCartSelector","createCartSelectorFactory","createCouponSelector","removeCouponError","applyCouponError","isApplyingCoupon","isRemovingCoupon","createGiftCertificateSelector","removeGiftCertificateError","applyGiftCertificateError","isApplyingGiftCertificate","isRemovingGiftCertificate","createGiftCertificateSelectorFactory","createOrderSelector","_","createOrderSelectorFactory","checkoutButton","customerStrategies","customer_strategy_selector","form","instruments","instrument_selector","paymentMethods","paymentStrategies","remoteCheckout","shippingCountries","shippingStrategies","selectors","shouldWarnMutation","createCheckoutStore","initialState","requestErrorFactory","factory","actionTransformer","request_error_factory","unrecoverable_error","payment_method_invalid_error","action$","every","createInternalCheckoutSelectors","stateTransformer","CheckoutNotAvailableError","checkout_request_sender_CheckoutRequestSender","CheckoutRequestSender","content_type","join_includes","checkout_default_includes","checkout_not_available_error","mapToInternalCoupon","couponTypes","coupon","displayName","discountType","couponType","mapToInternalAddress","addressId","isBillingAddressLike","addressLine1","addressLine2","province","provinceCode","stateOrProvinceCode","postCode","checkout_button_error_selector","CheckoutButtonErrorSelector","getInitializeButtonError","getDeinitializeButtonError","checkout_button_status_selector","CheckoutButtonStatusSelector","isInitializingButton","isDeinitializingButton","createCheckoutButtonSelectors","CheckoutButtonMethodType","checkout_button_initializer","CheckoutButtonInitializer","_store","_buttonStrategyActionCreator","_state","subscribe","subscriber","filters","initializeButton","containerIds","selector","idPrefix","containers","querySelectorAll","invalid_argument_error","container","setUniqueElementId","queueId","dispatch","deinitializeButton","deinitialize","bind_decorator","CheckoutButtonStrategyActionCreator","_registry","_paymentMethodActionCreator","throw_error_action","checkout_button_method_type","BraintreePaypalButtonStrategy","_checkoutActionCreator","_braintreeSDKCreator","_paypalScriptLoader","_formPoster","_offerCredit","paypalOptions","braintreepaypalcredit","braintreepaypal","_paymentMethod","missing_data_error","allowedSources","disallowedSources","allowCredit","FUNDING","CREDIT","Button","render","env","testMode","commit","shouldProcessPayment","funding","allowed","disallowed","style","shape","_setupPayment","onPaymentError","onAuthorize","_tokenizePayment","onAuthorizeError","onError","addresses","not_initialized_error","CheckoutButtonNotInitialized","createPayment","flow","enableShippingAddress","shippingAddressEditable","shippingAddressOverride","_mapToBraintreeAddress","currency","offerCredit","tokenizePayment","postForm","payment_type","provider","device_data","shipping_address","JSON","stringify","_mapToLegacyShippingAddress","billing_address","_mapToLegacyBillingAddress","details","recipientName","email","first_name","last_name","phone_number","address_line_1","line1","address_line_2","line2","country_code","postal_code","googlepay_button_strategy","GooglePayButtonStrategy","_googlePayPaymentProcessor","_methodId","_getMethodId","_walletButton","_createSignInButton","parentNode","removeChild","getElementById","googlePayButton","createButton","_handleWalletButtonClick","appendChild","preventDefault","displayWallet","paymentData","handleSuccess","updateShippingAddress","_onPaymentSelectComplete","_onError","Content-Type","masterpass_button_strategy","MasterpassButtonStrategy","_masterpassScriptLoader","initializationData","load","masterpass","_masterpassClient","_signInButton","buttonContainer","button","src","_createMasterpassPayload","allowedCardTypes","cartAmount","cartId","suppressShippingAddress","get_callback_url","PaypalButtonStrategy","_host","merchantId","clientId","actions","internal_api_headers","res","paymentID","payerID","paymentId","payerId","payerInfo","payer","payer_info","createCheckoutButtonInitializer","host","create_checkout_store","requestSender","request_sender_","formPoster","form_poster_","checkout_button_strategy_action_creator","registry","registry_registry","scriptLoader","script_loader_","checkoutActionCreator","checkout_action_creator","checkout_request_sender","config_action_creator","config_request_sender","BRAINTREE_PAYPAL","braintree_paypal_button_strategy","braintree_sdk_creator","braintree_script_loader","paypal_script_loader","BRAINTREE_PAYPAL_CREDIT","MASTERPASS","masterpass_script_loader","GOOGLEPAY_BRAINTREE","create_googlepay_payment_processor","googlepay_braintree_initializer","GOOGLEPAY_STRIPE","googlepay_stripe_initializer","PAYPALEXPRESS","paypal_button_strategy","createCheckoutButtonRegistry","payment_method_action_creator","payment_method_request_sender","NotEmbeddableErrorType","BrowserStorage","_namespace","getItem","rawValue","external_local_storage_fallback_default","withNamespace","parse","removeItem","getItemOnce","setItem","InvalidLoginTokenError","NotEmbeddableError","UnknownError","standard_error","embedded_checkout","EmbeddedCheckout","_iframeCreator","_messageListener","_messagePoster","_loadingIndicator","_storage","_location","_isAttached","onComplete","embedded_checkout_events","CheckoutComplete","CheckoutError","onLoad","CheckoutLoaded","onFrameLoad","FrameLoaded","onSignOut","SignedOut","_configureStyles","attach","show","_allowCookie","_attemptLogin","createFrame","iframe","_iframe","hide","_retryAllowCookie","FrameError","detach","iFrameResizer","close","contentWindow","styles","embedded_content_events","StyleConfigured","parse_url","reject","invalid_login_token_error","encodeURIComponent","visibility","not_embeddable_error","MissingContent","DEFAULT_STYLES","size","color","backgroundColor","ROTATION_ANIMATION","LoadingIndicator","_styles","_defineAnimation","_container","_buildContainer","_indicator","_buildIndicator","parentId","parent_1","opacity","handleTransitionEnd","display","bottom","left","height","width","position","right","top","transition","indicator","borderRadius","border","borderColor","margin","transform","transformStyle","animation","head","sheet","CSSStyleSheet","insertRule","ResizableIframeCreator","MissingContainer","allowPaymentRequest","_toResizableFrame","timeoutInterval","setTimeout","handleMessage","is_iframe_event","contentId","iframes","external_iframe_resizer_","scrolling","sizeWidth","heightCalculationMethod","clearTimeout","embedCheckout","STORAGE_PREFIX","resizable_iframe_creator","iframe_event_listener","iframe_event_poster","loading_indicator","loadingIndicator","browser_storage","TimeoutError","selectorDecorator","_utility__WEBPACK_IMPORTED_MODULE_2__","memoizedMethod","lodash__WEBPACK_IMPORTED_MODULE_1__","_utility__WEBPACK_IMPORTED_MODULE_3__","cachedValue","_utility__WEBPACK_IMPORTED_MODULE_4__","_utility__WEBPACK_IMPORTED_MODULE_5__","selectorMethodDecorator","joinIncludes","includes","ConfigActionCreator","_configRequestSender","_config_actions__WEBPACK_IMPORTED_MODULE_4__","ConfigRequestSender","BillingAddressActionCreator","continueAsGuest","credentials","_common_error_errors__WEBPACK_IMPORTED_MODULE_3__","isGuest","billingAddressRequestBody","existingBillingAddressRequestBody","_billing_address_actions__WEBPACK_IMPORTED_MODULE_5__","_createOrUpdateBillingAddress","createAddress","BillingAddressRequestSender","Registry","_factories","_instances","defaultToken","cacheToken","_getInstance","_hasFactory","_error_errors__WEBPACK_IMPORTED_MODULE_1__","_hasInstance","MasterpassScriptLoader","RemoteCheckoutSynchronizationError","GooglePayBraintreeInitializer","hasShippingAddress","googleBraintreePaymentInstance","_googlePaymentInstance","_createGooglePayPayload","parseResponse","paymentMethodData","tokenizationData","androidPayCards","cardType","lastFour","lastTwo","binData","platformToken","googlePayBraintreePaymentDataRequest","merchantInfo","authJwt","merchantName","googleMerchantName","googleMerchantId","transactionInfo","currencyCode","totalPriceStatus","totalPrice","toFixed","cardRequirements","billingAddressRequired","billingAddressFormat","shippingAddressRequired","emailRequired","phoneNumberRequired","_mapGooglePayBraintreeDataRequestToGooglePayDataRequestV2","createPaymentDataRequest","googlePayBraintreeDataRequestV1","apiVersion","apiVersionMinor","allowedPaymentMethods","parameters","allowedAuthMethods","allowedCardNetworks","billingAddressParameters","format","tokenizationSpecification","braintree:apiVersion","braintree:authorizationFingerprint","paymentMethodTokenizationParameters","braintree:merchantId","braintree:sdkVersion","shippingAddressParameters","GooglePayStripeInitializer","_mapGooglePayStripeDataRequestToGooglePayDataRequestV2","card","last4","err","stripe:version","stripeVersion","stripe:publishableKey","stripePublishableKey","mapToInternalCustomer","_address__WEBPACK_IMPORTED_MODULE_0__","customerId","fullName","mapToInternalGiftCertificate","giftCertificate","discountedAmount","used","remainingBalance","remaining","balance","purchaseDate","mapToInternalOrder","_cart__WEBPACK_IMPORTED_MODULE_1__","_coupon__WEBPACK_IMPORTED_MODULE_3__","orderMeta","customerCanBeCreated","mapToInternalOrderPayment","subtotal","baseAmount","sum","discountNotifications","totalDiscountedAmount","appliedGiftCertificates","socialData","mapToInternalSocialDataList","hasDigitalItems","isDownloadable","isComplete","shippingCostTotal","amountBeforeDiscount","shippingCostBeforeDiscount","integerAmountBeforeDiscount","mapToStoreCredit","taxes","taxTotal","handling","handlingCostTotal","orderAmount","orderAmountAsInteger","mapToInternalPaymentStatus","isDefaultOrderPayment","helpText","instructions","returnUrl","socialDataObject","digitalItems","socialMedia","image","link","shareText","text","sharingLink","channelName","channel","channelCode","PaypalScriptLoader","ErrorActionCreator","clearError","getEnvironment","process","NODE_ENV","e","ConsoleLogger","_console","log","messages","_logToConsole","info","warn","debug","NoopLogger","isEnabled","logger","console_logger","console","noop_logger","getDefaultLogger","CouponActionCreator","_couponRequestSender","applyCoupon","removeCoupon","CouponRequestSender","couponCode","checkout_params","GiftCertificateActionCreator","_giftCertificateRequestSender","applyGiftCertificate","removeGiftCertificate","GiftCertificateRequestSender","giftCertificateCode","CustomerStrategyActionCreator","_strategyRegistry","signIn","signOut","widgetInteraction","AmazonPayScriptLoader","loadWidget","onPaymentReady","region","toLowerCase","_configureWidget","onLoginReady","amazon","Login","setClientId","setUseCookie","onAmazonLoginReady","OffAmazonPayments","onAmazonPaymentsReady","BraintreeVisaCheckoutPaymentProcessor","createInitOptions","locale","collectShipping","paymentRequest","String","braintreeVisaCheckout","tokenize","tokenizedPayload","_toVisaCheckoutAddress","_postForm","userData","cardInformation","userEmail","card_information","_getCardInformation","_getAddress","phoneNumber","streetAddress","extendedAddress","locality","number","createBraintreeVisaCheckoutPaymentProcessor","braintreeScriptLoader","braintreeSDKCreator","braintree_visacheckout_payment_processor","VisaCheckoutScriptLoader","V","ChasePayScriptLoader","JPMC","RemoteCheckoutRequestSender","initializeBilling","methodName","initializeShipping","initializePayment","loadSettings","generateToken","trackAuthorizationEvent","RemoteCheckoutActionCreator","_remoteCheckoutRequestSender","InitializeRemoteBillingRequested","InitializeRemoteBillingFailed","InitializeRemoteShippingRequested","InitializeRemoteShippingFailed","InitializeRemotePaymentRequested","InitializeRemotePaymentSucceeded","InitializeRemotePaymentFailed","LoadRemoteSettingsRequested","LoadRemoteSettingsFailed","SignOutRemoteCustomerRequested","SignOutRemoteCustomerSucceeded","SignOutRemoteCustomerFailed","CustomerActionCreator","_customerRequestSender","signInCustomer","SignInCustomerRequested","SignInCustomerSucceeded","SignInCustomerFailed","signOutCustomer","SignOutCustomerRequested","SignOutCustomerFailed","CustomerRequestSender","NotImplementedError","AmazonPayCustomerStrategy","_remoteCheckoutActionCreator","amazonOptions","not_implemented_error","useAmazonAddressBook","_handleAuthorization","authorize","popup","scope","tokenPrefix","BraintreeVisaCheckoutCustomerStrategy","_customerStrategyActionCreator","_braintreeVisaCheckoutPaymentProcessor","_visaCheckoutScriptLoader","_buttonClassName","visaCheckoutOptions","braintreevisacheckout","initOptions","storeProfile","storeLanguage","signInButton","init","on","paymentSuccessPayload","_paymentInstrumentSelected","buttonClass","querySelector","_insertVisaCheckoutButton","visaCheckoutButton","className","innerHTML","ChasePayCustomerStrategy","_chasePayScriptLoader","chasePayOptions","chasepay","digitalSessionId","ChasePay","configure","language","isChasePayUp","insertButtons","EventType","START_CHECKOUT","sessionId","startCheckout","COMPLETE_CHECKOUT","requestId","merchantRequestId","_setExternalCheckoutData","_reloadPage","sessionToken","sendRequest","fromChasePay","DefaultCustomerStrategy","_customerActionCreator","googlepay_customer_strategy","GooglePayCustomerStrategy","googlePayOptions","_getGooglePayOptions","googlepaybraintree","googlepaystripe","MasterpassCustomerStrategy","masterpassOptions","Masterpass","SquareCustomerStrategy","CountryActionCreator","_countryRequestSender","loadCountries","CountryRequestSender","Accept-Language","OrderRequestSender","loadOrder","submitOrder","finalizeOrder","OrderActionCreator","_orderRequestSender","_checkoutValidator","_spamProtectionActionCreator","loadOrderPayments","loadCurrentOrder","_getCurrentOrderId","SubmitOrderRequested","spamProtectionToken","checkoutSettings","isSpamProtectionEnabled","validate","_mapToOrderRequestBody","customerMessage","SubmitOrderFailed","FinalizeOrderRequested","FinalizeOrderFailed","executeSpamProtection","execute","MutationObserverFactory","callback","MutationObserver","SpamProtectionFailedError","SpamProtectionNotCompletedError","GoogleRecaptcha","googleRecaptchaScriptLoader","mutationObserverFactory","sitekey","event$","_event$","recaptcha","getResponse","error-callback","spam_protection_failed_error","_recaptcha","_watchRecaptchaChallengeWindow","iframeElement","iframeContainer","parentElement","spam_protection_not_completed_error","observe","attributeFilter","GoogleRecaptchaScriptLoader","_loadPromise","_loadScript","grecaptcha","SpamProtectionActionCreator","_googleRecaptcha","recaptchaSitekey","googleRecaptchaSitekey","SubmitFailed","PaymentStrategyType","OrderFinalizationNotRequiredError","payment_strategy_type","PaymentStrategyActionCreator","_orderActionCreator","strategy","getByMethod","NO_PAYMENT_DATA_REQUIRED","finalize","_loadOrderPaymentsIfNeeded","order_finalization_not_required_error","CartComparator","cartA","cartB","_normalize","sort","itemA","itemB","localeCompare","giftWrapping","CartChangedError","CheckoutValidator","comparator","cart_comparator","_compareCoupons","_compareGiftCertificates","cart_changed_error","couponsA","couponsB","giftCertificatesA","giftCertificatesB","PaymentActionCreator","_paymentRequestSender","_paymentRequestTransformer","submitPayment","SubmitPaymentRequested","SubmitPaymentFailed","initializeOffsitePayment","InitializeOffsitePaymentRequested","InitializeOffsitePaymentSucceeded","InitializeOffsitePaymentFailed","PaymentRequestSender","_transformResponse","statusText","isVaultedInstrument","OrderIncludes","PaymentRequestTransformer","checkoutState","_getPaymentMethod","shippingOption","contextConfig","instrumentMeta","paymentMeta","internalCustomer","map_to_internal_customer","authToken","vaultAccessToken","map_to_internal_address","map_to_internal_shipping_option","map_to_internal_cart","map_to_internal_order","quoteMeta","geoCountryCode","source","paymentMethodSelector","PaymentStrategyRegistry","_getToken","_hasFactoryForMethod","_isLegacyMethod","LEGACY","OFFSITE","CREDIT_CARD","clientSidePaymentProviders","paymentSettings","PaymentArgumentInvalidError","invalidFields","PaymentMethodCancelledError","AffirmPaymentStrategy","_paymentActionCreator","_affirmScriptLoader","publicKey","affirm","_affirm","payment_argument_invalid_error","requestOptions","PhysicalItemsCategories","DigitalItemsCategories","_getCheckoutInformation","open","onFail","failObject","reason","payment_method_cancelled_error","onSuccess","successObject","ui","paymentPayload","checkout_token","_getBillingAddress","merchant","user_confirmation_url","links","checkoutLink","user_cancel_url","user_confirmation_url_action","_getShippingAddress","_getItems","metadata","shipping_type","_getShippingType","platform_type","platform_version","platform_affirm","discounts","_getDiscounts","order_id","shipping_amount","tax_amount","total","first","last","full","zipcode","display_name","sku","unit_price","salePrice","qty","item_image_url","item_url","categories","_getCategories","customItems","_g","listPrice","line","discount_amount","discount_display_name","DISCOUNTED_AMOUNT","categoryTree","category","affirmJs","Function","AffirmScriptLoader","apikey","scriptURI","_getScriptURI","AfterpayPaymentStrategy","_afterpayScriptLoader","storeCountryName","storeCountry","_mapCountryToISO2","afterpaySdk","_afterpaySdk","_redirectToAfterpay","afterpay","orderPayload","countryName","redirect","SCRIPTS_DEFAULT","SCRIPTS_US","AfterpayScriptLoader","AfterPay","isInternalAddressEqual","ignoredKeys","is_private","mapFromInternalAddress","AmazonPayPaymentStrategy","_billingAddressActionCreator","_walletOptions","_createWallet","referenceId","_getOrderReferenceId","sellerId","_getMerchantId","is3dsEnabled","_processPaymentWith3ds","onPaymentSelect","onReady","walletOptions","amazonOrderReferenceId","design","designMode","orderReference","_synchronizeBillingAddress","_updateOrderReference","widget","Widgets","Wallet","remote_checkout_synchronization_error","remoteAddress","internalBillingAddress","getAmazonOrderReferenceId","initConfirmationFlow","confirmationFlow","success","Overlay","_element","_createElement","_registerClick","remove","_unregisterClick","_removeAfterTransition","element","background","transitionDuration","zIndex","onClick","onClick_1","handeTransition","propertyName","promise","cancellable","cancel","race","BraintreePaymentProcessor","_overlay","_threeDSecureOptions","preloadPaypal","tokenizeCard","requestData","_mapToCreditCard","creditCards","focusWindow","useraction","verifyCard","addFrame","removeFrame","cancelVerifyCard","verification","cancellable_promise","appendSessionId","processedPayment","creditCard","cardholderName","ccName","ccNumber","cvv","ccCvv","expirationDate","ccExpiry","month","year","endpoint","isCreditCardLike","BraintreeCreditCardPaymentStrategy","_braintreePaymentProcessor","_is3dsEnabled","_handleError","orderRequest","_preparePaymentData","_isUsingVaulting","shouldSaveInstrument","tokenizedCard","ChasePayEventType","BraintreePaypalPaymentStrategy","_credit","braintreeOptions","isBraintreeError","BraintreeVisaCheckoutPaymentStrategy","_paymentStrategyActionCreator","visaInitOptions","CardinalInitializationType","CardinalEventType","CardinalValidatedAction","CardinalPaymentType","CardinalTriggerEvents","CardinalPaymentBrand","chasepay_payment_strategy","ChasePayPaymentStrategy","_wepayRiskClient","_walletEvent$","walletButton","_configureWallet","_chasePayClient","_getPayment","_displayWallet","_createOrder","logoContainer","insertBrandings","CancelCheckout","onCancel","CompleteCheckout","_setSessionToken","showLoadingAnimation","getRiskToken","riskToken","paymentCryptogram","cryptogramId","eci","transactionId","btoa","reqTokenId","expDate","substr","accountNum","accountMask","extraData","ConvergePaymentStrategy","three_ds_result","acs_url","PaReq","payer_auth_request","TermUrl","callback_url","MD","merchant_data","CreditCardPaymentStrategy","CyberSourcePaymentStrategy","_cardinalClient","_placeOrderUsing3DS","_placeOrder","runBinProcess","_getBinNumber","getThreeDSecureData","_getOrderData","entry","iin","CardinalSignatureValidationErrors","CardBrand","DigitalWalletType","CardinalClient","_sdk","_getClientSDK","SetupCompleted","off","Validated","ActionCode","ErrorNumber","setup","Init","jwt","binNumber","BinProcess","Status","threeDSecureData","orderData","Success","NoAction","ErrorDescription","Failure","continueObject","AcsUrl","Payload","partialOrder","_mapToPartialOrder","continue","CCA","consumer","BillingAddress","_mapToCardinalAddress","Account","_mapToCardinalAccount","Email1","ShippingAddress","Consumer","OrderDetails","OrderNumber","Amount","CurrencyCode","OrderChannel","TransactionId","AccountNumber","Number","ExpirationMonth","ExpirationYear","NameOnAccount","CardCode","cardinalAddress","FirstName","LastName","Address1","City","State","PostalCode","CountryCode","Address2","Phone1","CardinalScriptLoader","Cardinal","googlepay_payment_strategy","GooglePayPaymentStrategy","_googlePayOptions","statusCode","KlarnaPaymentStrategy","_klarnaScriptLoader","_supportedEUCountries","klarnaCredit","_klarnaCredit","_unsubscribe","_loadWidget","_authorize","authorizationToken","authorization_token","klarna","client_token","_getUpdateSessionData","_mapToKlarnaAddress","klarnaAddress","street_address","given_name","family_name","street_address2","updateSessionData","approved","show_form","KlarnaScriptLoader","Klarna","Credit","LegacyPaymentStrategy","masterpass_payment_strategy","MasterpassPaymentStrategy","NoPaymentDataRequiredPaymentStrategy","OfflinePaymentStrategy","OffsitePaymentStrategy","_shouldSubmitFullPayload","PaypalProPaymentStrategy","_isPaymentAcknowledged","PaypalExpressPaymentStrategy","_useRedirectFlow","paypalexpress","useRedirectFlow","_isInContextEnabled","_paypalSdk","environment","closeFlow","_isAcknowledgedOrFinalized","initXO","startFlow","SagePayPaymentStrategy","UnsupportedBrowserError","SquarePaymentStrategy","_syncPaymentMethod","createSquareForm","_paymentForm","_getFormOptions","build","_getNonceInstrument","_getCountryCode","toUpperCase","_deferredRequestNonce","requestCardNonce","deferred","squareOptions","square","_squareOptions","callbacks","cardNonceResponseReceived","cardData","billingContact","shippingContact","digital_wallet_type","none","_handleWalletNonceResponse","_handleCardNonceResponse","createPaymentRequest","_paymentRequestPayload","methodsSupported","methods","_showPaymentMethods","paymentFormLoaded","_setPostalCode","unsupportedBrowserDetected","unsupported_browser_error","requestShippingAddress","requestBillingInfo","storeName","pending","setPostalCode","masterpassBtn","elementId","SquareScriptLoader","SqPaymentForm","StripeV3PaymentStrategy","_stripeScriptLoader","stripeOptions","stripev3","stripeJs","_stripeV3Client","cardElement","elements","mount","_cardElement","paymentIntent","_getStripeJs","createPaymentMethod","_mapStripePaymentMethodOptions","stripePaymentMethod","stripeCardPaymentOptions","_mapStripeCardPaymentOptions","payment_method","handleCardPayment","stripeResponse","unmount","_mapStripeBillingAddress","_mapStripeShippingAddress","_mapStripeBillingDetails","stripeBillingDetails","_mapStripeShippingDetails","stripeShippingDetails","_getCustomer","shippingDetails","receipt_email","save_payment_method","billing_details","StripeV3ScriptLoader","publishableKey","Stripe","betas","WepayRiskClient","_riskClient","WePay","risk","generate_risk_token","get_risk_token","WepayPaymentStrategy","orderActionCreator","paymentActionCreator","payloadWithToken","credit_card_payment_strategy","PaymentMethodDeclinedError","ZipPaymentStrategy","_zipScriptLoader","zip","_zipClient","zipClient","Checkout","_prepareForReferredRegistration","payment_method_declined_error","onCheckout","openModal","externalId","ZipScriptLoader","Zip","createPaymentStrategyRegistry","paymentClient","spamProtection","payment_strategy_registry","paymentRequestTransformer","payment_request_transformer","paymentRequestSender","payment_request_sender","billingAddressActionCreator","billing_address_action_creator","billing_address_request_sender","braintreePaymentProcessor","overlay","overlay_overlay","braintree_payment_processor","createBraintreePaymentProcessor","checkoutRequestSender","checkoutValidator","checkout_validator","spamProtectionActionCreator","spam_protection_action_creator","order_action_creator","order_request_sender","payment_action_creator","paymentMethodActionCreator","remoteCheckoutActionCreator","remote_checkout_action_creator","remote_checkout_request_sender","configActionCreator","paymentStrategyActionCreator","payment_strategy_action_creator","AFFIRM","affirm_payment_strategy","affirm_script_loader","AFTERPAY","afterpay_payment_strategy","afterpay_script_loader","AMAZON","amazon_pay_payment_strategy","amazon_pay_script_loader","CYBERSOURCE","cybersource_payment_strategy","cardinal_client","cardinal_script_loader","KLARNA","klarna_payment_strategy","klarna_script_loader","legacy_payment_strategy","offline_payment_strategy","offsite_payment_strategy","PAYPAL","paypal_pro_payment_strategy","PAYPAL_EXPRESS","paypal_express_payment_strategy","PAYPAL_EXPRESS_CREDIT","SAGE_PAY","sage_pay_payment_strategy","SQUARE","square_payment_strategy","square_script_loader","no_payment_data_required_strategy","BRAINTREE","braintree_credit_card_payment_strategy","braintree_paypal_payment_strategy","BRAINTREE_VISA_CHECKOUT","braintree_visacheckout_payment_strategy","visacheckout_script_loader","CHASE_PAY","chasepay_script_loader","wepay_risk_client","BRAINTREE_GOOGLE_PAY","WE_PAY","wepay_payment_strategy","STRIPE_GOOGLE_PAY","ZIP","zip_payment_strategy","zip_script_loader","CONVERGE","converge_payment_strategy","STRIPEV3","stripev3_payment_strategy","stripev3_script_loader","InstrumentActionCreator","_instrumentRequestSender","loadInstruments","session","_getSessionContext","_getCurrentAccessToken","_getValidAccessToken","currentToken","deleteInstrument","_isValidVaultAccessToken","date","newDate","valueOf","now","isFuture","vaultAccessExpiry","setMinutes","getMinutes","getVaultAccessToken","storeId","shopperCurrency","isTransactional","InstrumentResponseTransformer","transformResponse","_transformVaultedInstruments","vaulted_instruments","transformErrorResponse","transformVaultAccessResponse","expires_at","bigpay_token","defaultInstrument","default_instrument","last_4","expiryMonth","expiry_month","expiryYear","expiry_year","trustedShippingAddress","trusted_shipping_address","InstrumentRequestSender","_transformer","instrument_response_transformer","requestContext","_loadInstrumentsWithAddress","_loadInstruments","deleteShopperInstrument","loadInstrumentsWithAddress","ShippingCountryActionCreator","_shippingCountryRequestSender","ShippingCountryRequestSender","ShippingStrategyActionCreator","selectOption","mergedOptions","AmazonPayShippingStrategy","_consignmentActionCreator","_createAddressBook","optionId","onAddressSelect","AddressBook","_synchronizeShippingAddress","DefaultShippingStrategy","DataStoreProjection","_transformState","_state$","getValue","stateA","stateB","filterFn","unsubscribe","cloneDecorator","cloneMethodDecorator","cloneClassDecorator","memoizedCloneDeep","checkout_store_selector","CheckoutStoreSelector","_form","_payment","_shippingAddress","getShippingOptions","availableShippingOptions","getSelectedShippingOption","getBillingCountries","getSelectedPaymentMethod","checkout_store_error_selector","CheckoutStoreErrorSelector","getError","getLoadCheckoutError","getSubmitOrderError","getFinalizeOrderError","getLoadOrderError","getLoadCartError","getLoadBillingCountriesError","getLoadShippingCountriesError","getLoadPaymentMethodsError","getLoadPaymentMethodError","getInitializePaymentError","getSelectShippingOptionError","getInitializeCustomerError","getUpdateShippingAddressError","getUpdateBillingAddressError","getUpdateConsignmentError","getCreateConsignmentsError","getDeleteConsignmentError","getInitializeShippingError","getApplyCouponError","getRemoveCouponError","getApplyGiftCertificateError","getRemoveGiftCertificateError","getLoadInstrumentsError","getDeleteInstrumentError","getLoadConfigError","getUpdateCheckoutError","checkout_store_status_selector","CheckoutStoreStatusSelector","isPending","isLoadingCheckout","isSubmittingOrder","isFinalizingOrder","isLoadingOrder","isLoadingCart","isLoadingBillingCountries","isLoadingShippingCountries","isLoadingPaymentMethods","isLoadingPaymentMethod","isInitializingPayment","isSelectingShippingOption","isInitializingCustomer","isUpdatingBillingAddress","isUpdatingShippingAddress","isUpdatingConsignment","isCreatingConsignments","isDeletingConsignment","isInitializingShipping","isLoadingInstruments","isDeletingInstrument","isLoadingConfig","isCustomerStepPending","isPaymentStepPending","isUpdatingCheckout","createCheckoutSelectors","ErrorMessageTransformer","_messageCustomizer","input","trim","checkout_service","CheckoutService","_countryActionCreator","_couponActionCreator","_errorActionCreator","_giftCertificateActionCreator","_instrumentActionCreator","_shippingCountryActionCreator","_shippingStrategyActionCreator","isDevelopment","_errorTransformer","error_message_transformer","isCheckoutServiceError","_storeProjection","data_store_projection","notifyState","_dispatch","loadCheckoutAction","loadConfigAction","finalizeOrderIfNeeded","deinitializePayment","loadBillingCountries","loadShippingCountries","loadBillingAddressFields","loadShippingAddressFields","initializeCustomer","deinitializeCustomer","deinitializeShipping","assignItemsToAddress","unassignItemsToAddress","selectConsignmentShippingOption","updateBillingAddress","initializeSpamProtection","createCheckoutService","bigpay_client_","setHost","bigpayBaseUrl","createPaymentClient","orderRequestSender","google_recaptcha","google_recaptcha_script_loader","consignment_action_creator","consignment_request_sender","country_action_creator","country_request_sender","coupon_action_creator","coupon_request_sender","customer_strategy_action_creator","remoteCheckoutRequestSender","amazon_pay_customer_strategy","braintree_visacheckout_customer_strategy","chasepay_customer_strategy","square_customer_strategy","masterpass_customer_strategy","default_customer_strategy","customer_action_creator","customer_request_sender","createCustomerStrategyRegistry","error_action_creator","gift_certificate_action_creator","gift_certificate_request_sender","instrument_action_creator","instrument_request_sender","shipping_country_action_creator","shipping_country_request_sender","shipping_strategy_action_creator","consignmentRequestSender","consignmentActionCreator","amazon_pay_shipping_strategy","default_shipping_strategy","createShippingStrategyRegistry","handleFrameLoadedEvent","hasAttribute","setAttribute","isCustomError","iframe_embedded_checkout_messenger","IframeEmbeddedCheckoutMessenger","_untargetedMessagePoster","_messageHandlers","postComplete","_postMessage","postError","_transformError","postFrameError","untargeted","postFrameLoaded","postLoaded","postSignedOut","receiveStyles","handler","_notifyMessageHandlers","noop_embedded_checkout_messenger","NoopEmbeddedCheckoutMessenger","createEmbeddedCheckoutMessenger","parentWindow","parentOrigin","language_service","LanguageService","_logger","_transformConfig","locales","translations","_locale","_locales","_translations","_formatters","mapKeys","translationKey","KEY_PREFIX","getLocale","_hasTranslations","translate","prefixedKey","messageFormat","external_messageformat_","compile","_transformData","output","defaultTranslations","_flattenObject","parentKey","resultKey","createLanguageService","CurrencyFormatter","currencySettings","symbolLocation","symbol","thousandsSeparator","decimalSeparator","parseInt","_symbolLocation","_symbol","_thousandsSeparator","_decimalSeparator","formattedNumber","_formatNumber","formattedCurrency","_formatCurrency","positiveAmount","abs","_toFixed","decimalAmount","parsedIntegerAmount","precision","currency_service","CurrencyService","_storeConfig","_customerFormatter","currency_formatter","_storeFormatter","toCustomerCurrency","exchangeRate","toStoreCurrency","createCurrencyService","create_checkout_button_initializer","embed_checkout","ButtonType","ButtonColor","GooglePayPaymentProcessor","_googlePayScriptLoader","_googlePayInitializer","_consigmentActionCreator","buttonType","buttonColor","Short","Default","_googlePayClient","loadPaymentData","_getPaymentDataRequest","_updateBillingAddress","_mapGooglePayAddressToShippingAddress","googlePay","paymentDataRequest","_getGooglePayClient","_paymentDataRequest","isReadyToPay","google","api","PaymentsClient","_mapGooglePayAddressToBillingAddress","companyName","address3","administrativeArea","postPaymentData","remoteBillingAddress","googlePayAddressMapped","GooglePayScriptLoader","createGooglePayPaymentProcessor","initializer","googlepay_payment_processor","googlepay_script_loader","mapToInternalCart","promotions","notifications","map_to_internal_line_items","map_to_internal_coupon","promotion","banners","banner","placeholders","messageHtml","certificate","map_to_internal_gift_certificate","isShippingRequired","taxSubtotal"],"mappings":"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","file":"checkout-sdk.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 141);\n","module.exports = require(\"tslib\");","module.exports = require(\"@bigcommerce/data-store\");","module.exports = require(\"lodash\");","module.exports = require(\"rxjs\");","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nimport { ConsignmentMeta } from './consignment';\n\nexport enum ConsignmentActionType {\n    CreateConsignmentsRequested = 'CREATE_CONSIGNMENTS_REQUESTED',\n    CreateConsignmentsSucceeded = 'CREATE_CONSIGNMENTS_SUCCEEDED',\n    CreateConsignmentsFailed = 'CREATE_CONSIGNMENTS_FAILED',\n\n    UpdateConsignmentRequested = 'UPDATE_CONSIGNMENT_REQUESTED',\n    UpdateConsignmentSucceeded = 'UPDATE_CONSIGNMENT_SUCCEEDED',\n    UpdateConsignmentFailed = 'UPDATE_CONSIGNMENT_FAILED',\n\n    DeleteConsignmentRequested = 'DELETE_CONSIGNMENT_REQUESTED',\n    DeleteConsignmentSucceeded = 'DELETE_CONSIGNMENT_SUCCEEDED',\n    DeleteConsignmentFailed = 'DELETE_CONSIGNMENT_FAILED',\n\n    UpdateShippingOptionRequested = 'UPDATE_SHIPPING_OPTION_REQUESTED',\n    UpdateShippingOptionSucceeded = 'UPDATE_SHIPPING_OPTION_SUCCEEDED',\n    UpdateShippingOptionFailed = 'UPDATE_SHIPPING_OPTION_FAILED',\n\n    LoadShippingOptionsRequested = 'LOAD_SHIPPING_OPTIONS_REQUESTED',\n    LoadShippingOptionsSucceeded = 'LOAD_SHIPPING_OPTIONS_SUCCEEDED',\n    LoadShippingOptionsFailed = 'LOAD_SHIPPING_OPTIONS_FAILED',\n}\n\nexport type ConsignmentAction =\n    CreateConsignmentsAction |\n    UpdateConsignmentAction |\n    DeleteConsignmentAction |\n    UpdateShippingOptionAction |\n    LoadShippingOptionsAction;\n\nexport type CreateConsignmentsAction =\n    CreateConsignmentsRequestedAction |\n    CreateConsignmentsSucceededAction |\n    CreateConsignmentsFailedAction;\n\nexport type UpdateConsignmentAction =\n    UpdateConsignmentRequestedAction |\n    UpdateConsignmentSucceededAction |\n    UpdateConsignmentFailedAction;\n\nexport type DeleteConsignmentAction =\n    DeleteConsignmentRequestedAction |\n    DeleteConsignmentSucceededAction |\n    DeleteConsignmentFailedAction;\n\nexport type UpdateShippingOptionAction =\n    UpdateShippingOptionRequestedAction |\n    UpdateShippingOptionSucceededAction |\n    UpdateShippingOptionFailedAction;\n\nexport type LoadShippingOptionsAction =\n    LoadShippingOptionsRequestedAction |\n    LoadShippingOptionsSucceededAction |\n    LoadShippingOptionsFailedAction;\n\nexport interface CreateConsignmentsRequestedAction extends Action {\n    type: ConsignmentActionType.CreateConsignmentsRequested;\n}\n\nexport interface CreateConsignmentsSucceededAction extends Action<Checkout> {\n    type: ConsignmentActionType.CreateConsignmentsSucceeded;\n}\n\nexport interface CreateConsignmentsFailedAction extends Action<Error> {\n    type: ConsignmentActionType.CreateConsignmentsFailed;\n}\n\nexport interface UpdateConsignmentRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentRequested;\n}\n\nexport interface UpdateConsignmentSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentSucceeded;\n}\n\nexport interface UpdateConsignmentFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentFailed;\n}\n\nexport interface DeleteConsignmentRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentRequested;\n}\n\nexport interface DeleteConsignmentSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentSucceeded;\n}\n\nexport interface DeleteConsignmentFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentFailed;\n}\n\nexport interface UpdateShippingOptionRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionRequested;\n}\n\nexport interface UpdateShippingOptionSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionSucceeded;\n}\n\nexport interface UpdateShippingOptionFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionFailed;\n}\n\nexport interface LoadShippingOptionsRequestedAction extends Action {\n    type: ConsignmentActionType.LoadShippingOptionsRequested;\n}\n\nexport interface LoadShippingOptionsSucceededAction extends Action<Checkout> {\n    type: ConsignmentActionType.LoadShippingOptionsSucceeded;\n}\n\nexport interface LoadShippingOptionsFailedAction extends Action<Error> {\n    type: ConsignmentActionType.LoadShippingOptionsFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum CustomerStrategyActionType {\n    SignInFailed = 'CUSTOMER_STRATEGY_SIGN_IN_FAILED',\n    SignInRequested = 'CUSTOMER_STRATEGY_SIGN_IN_REQUESTED',\n    SignInSucceeded = 'CUSTOMER_STRATEGY_SIGN_IN_SUCCEEDED',\n    SignOutFailed = 'CUSTOMER_STRATEGY_SIGN_OUT_FAILED',\n    SignOutRequested = 'CUSTOMER_STRATEGY_SIGN_OUT_REQUESTED',\n    SignOutSucceeded = 'CUSTOMER_STRATEGY_SIGN_OUT_SUCCEEDED',\n    InitializeFailed = 'CUSTOMER_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'CUSTOMER_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'CUSTOMER_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'CUSTOMER_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'CUSTOMER_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'CUSTOMER_STRATEGY_DEINITIALIZE_SUCCEEDED',\n    WidgetInteractionStarted = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_STARTED',\n    WidgetInteractionFinished = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_FINISHED',\n    WidgetInteractionFailed = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_FAILED',\n}\n\nexport type CustomerStrategyAction =\n    CustomerStrategySignInAction |\n    CustomerStrategySignOutAction |\n    CustomerStrategyInitializeAction |\n    CustomerStrategyDeinitializeAction |\n    CustomerStrategyWidgetAction;\n\nexport type CustomerStrategySignInAction =\n    SignInRequestedAction |\n    SignInSucceededAction |\n    SignInFailedAction;\n\nexport type CustomerStrategySignOutAction =\n    SignOutRequestedAction |\n    SignOutSucceededAction |\n    SignOutFailedAction;\n\nexport type CustomerStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type CustomerStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport type CustomerStrategyWidgetAction =\n    WidgetInteractionStartedAction |\n    WidgetInteractionFinishedAction |\n    WidgetInteractionFailedAction;\n\nexport interface SignInRequestedAction extends Action {\n    type: CustomerStrategyActionType.SignInRequested;\n}\n\nexport interface SignInSucceededAction extends Action {\n    type: CustomerStrategyActionType.SignInSucceeded;\n}\n\nexport interface SignInFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.SignInFailed;\n}\n\nexport interface SignOutRequestedAction extends Action {\n    type: CustomerStrategyActionType.SignOutRequested;\n}\n\nexport interface SignOutSucceededAction extends Action {\n    type: CustomerStrategyActionType.SignOutSucceeded;\n}\n\nexport interface SignOutFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.SignOutFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: CustomerStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: CustomerStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: CustomerStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: CustomerStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.DeinitializeFailed;\n}\n\nexport interface WidgetInteractionStartedAction extends Action {\n    type: CustomerStrategyActionType.WidgetInteractionStarted;\n}\n\nexport interface WidgetInteractionFinishedAction extends Action {\n    type: CustomerStrategyActionType.WidgetInteractionFinished;\n}\n\nexport interface WidgetInteractionFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.WidgetInteractionFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadOrderPaymentsAction } from '../order';\n\nexport enum PaymentStrategyActionType {\n    ExecuteFailed = 'PAYMENT_STRATEGY_EXECUTE_FAILED',\n    ExecuteRequested = 'PAYMENT_STRATEGY_EXECUTE_REQUESTED',\n    ExecuteSucceeded = 'PAYMENT_STRATEGY_EXECUTE_SUCCEEDED',\n    FinalizeFailed = 'PAYMENT_STRATEGY_FINALIZE_FAILED',\n    FinalizeRequested = 'PAYMENT_STRATEGY_FINALIZE_REQUESTED',\n    FinalizeSucceeded = 'PAYMENT_STRATEGY_FINALIZE_SUCCEEDED',\n    InitializeFailed = 'PAYMENT_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'PAYMENT_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'PAYMENT_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'PAYMENT_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'PAYMENT_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'PAYMENT_STRATEGY_DEINITIALIZE_SUCCEEDED',\n    WidgetInteractionStarted = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_STARTED',\n    WidgetInteractionFinished = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_FINISHED',\n    WidgetInteractionFailed = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_FAILED',\n}\n\nexport type PaymentStrategyAction =\n    PaymentStrategyExecuteAction |\n    PaymentStrategyFinalizeAction |\n    PaymentStrategyInitializeAction |\n    PaymentStrategyDeinitializeAction |\n    PaymentStrategyWidgetAction;\n\nexport type PaymentStrategyExecuteAction =\n    ExecuteRequestedAction |\n    ExecuteSucceededAction |\n    ExecuteFailedAction |\n    LoadOrderPaymentsAction;\n\nexport type PaymentStrategyFinalizeAction =\n    FinalizeRequestedAction |\n    FinalizeSucceededAction |\n    FinalizeFailedAction |\n    LoadOrderPaymentsAction;\n\nexport type PaymentStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type PaymentStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport type PaymentStrategyWidgetAction =\n    WidgetInteractionStartedAction |\n    WidgetInteractionFinishedAction |\n    WidgetInteractionFailedAction;\n\nexport interface ExecuteRequestedAction extends Action {\n    type: PaymentStrategyActionType.ExecuteRequested;\n}\n\nexport interface ExecuteSucceededAction extends Action {\n    type: PaymentStrategyActionType.ExecuteSucceeded;\n}\n\nexport interface ExecuteFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.ExecuteFailed;\n}\n\nexport interface FinalizeRequestedAction extends Action {\n    type: PaymentStrategyActionType.FinalizeRequested;\n}\n\nexport interface FinalizeSucceededAction extends Action {\n    type: PaymentStrategyActionType.FinalizeSucceeded;\n}\n\nexport interface FinalizeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.FinalizeFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: PaymentStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: PaymentStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: PaymentStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: PaymentStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.DeinitializeFailed;\n}\n\nexport interface WidgetInteractionStartedAction extends Action {\n    type: PaymentStrategyActionType.WidgetInteractionStarted;\n}\n\nexport interface WidgetInteractionFinishedAction extends Action {\n    type: PaymentStrategyActionType.WidgetInteractionFinished;\n}\n\nexport interface WidgetInteractionFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.WidgetInteractionFailed;\n}\n","import StandardError from './standard-error';\n\nexport enum MissingDataErrorType {\n    MissingBillingAddress,\n    MissingCart,\n    MissingCheckout,\n    MissingConsignments,\n    MissingCheckoutConfig,\n    MissingOrder,\n    MissingOrderConfig,\n    MissingOrderId,\n    MissingPayment,\n    MissingPaymentMethod,\n    MissingShippingAddress,\n    MissingSpamProtectionToken,\n}\n\nexport default class MissingDataError extends StandardError {\n    constructor(\n        public subtype: MissingDataErrorType\n    ) {\n        super(getErrorMessage(subtype));\n\n        this.name = 'MissingDataError';\n        this.type = 'missing_data';\n    }\n}\n\nfunction getErrorMessage(type: MissingDataErrorType): string {\n    switch (type) {\n    case MissingDataErrorType.MissingBillingAddress:\n        return 'Unable to proceed because billing address data is unavailable.';\n\n    case MissingDataErrorType.MissingCart:\n        return 'Unable to proceed because cart data is unavailable.';\n\n    case MissingDataErrorType.MissingConsignments:\n        return 'Unable to proceed because consignments data is unavailable.';\n\n    case MissingDataErrorType.MissingCheckout:\n        return 'Unable to proceed because checkout data is unavailable.';\n\n    case MissingDataErrorType.MissingCheckoutConfig:\n    case MissingDataErrorType.MissingOrderConfig:\n        return 'Unable to proceed because configuration data is unavailable.';\n\n    case MissingDataErrorType.MissingOrder:\n        return 'Unable to proceed because order data is unavailable.';\n\n    case MissingDataErrorType.MissingOrderId:\n        return 'Unable to proceed because order ID is unavailable or not generated yet.';\n\n    case MissingDataErrorType.MissingPayment:\n        return 'Unable to proceed because payment data is unavailable.';\n\n    case MissingDataErrorType.MissingPaymentMethod:\n        return 'Unable to proceed because payment method data is unavailable or not properly configured.';\n\n    case MissingDataErrorType.MissingShippingAddress:\n        return 'Unable to proceed because shipping address data is unavailable.';\n\n    case MissingDataErrorType.MissingSpamProtectionToken:\n        return 'Unable to proceed because spam protection token is not provided.';\n\n    default:\n        return 'Unable to proceed because the required data is unavailable.';\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum ShippingStrategyActionType {\n    UpdateAddressFailed = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_FAILED',\n    UpdateAddressRequested = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_REQUESTED',\n    UpdateAddressSucceeded = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_SUCCEEDED',\n    SelectOptionFailed = 'SHIPPING_STRATEGY_SELECT_OPTION_FAILED',\n    SelectOptionRequested = 'SHIPPING_STRATEGY_SELECT_OPTION_REQUESTED',\n    SelectOptionSucceeded = 'SHIPPING_STRATEGY_SELECT_OPTION_SUCCEEDED',\n    InitializeFailed = 'SHIPPING_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'SHIPPING_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'SHIPPING_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'SHIPPING_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'SHIPPING_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'SHIPPING_STRATEGY_DEINITIALIZE_SUCCEEDED',\n}\n\nexport type ShippingStrategyAction =\n    ShippingStrategyUpdateAddressAction |\n    ShippingStrategySelectOptionAction |\n    ShippingStrategyInitializeAction |\n    ShippingStrategyDeinitializeAction;\n\nexport type ShippingStrategyUpdateAddressAction =\n    UpdateAddressRequestedAction |\n    UpdateAddressSucceededAction |\n    UpdateAddressFailedAction;\n\nexport type ShippingStrategySelectOptionAction =\n    SelectOptionRequestedAction |\n    SelectOptionSucceededAction |\n    SelectOptionFailedAction;\n\nexport type ShippingStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type ShippingStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport interface UpdateAddressRequestedAction extends Action {\n    type: ShippingStrategyActionType.UpdateAddressRequested;\n}\n\nexport interface UpdateAddressSucceededAction extends Action {\n    type: ShippingStrategyActionType.UpdateAddressSucceeded;\n}\n\nexport interface UpdateAddressFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.UpdateAddressFailed;\n}\n\nexport interface SelectOptionRequestedAction extends Action {\n    type: ShippingStrategyActionType.SelectOptionRequested;\n}\n\nexport interface SelectOptionSucceededAction extends Action {\n    type: ShippingStrategyActionType.SelectOptionSucceeded;\n}\n\nexport interface SelectOptionFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.SelectOptionFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: ShippingStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: ShippingStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: ShippingStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: ShippingStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.DeinitializeFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadConfigAction } from '../config/config-actions';\n\nimport Checkout from './checkout';\n\nexport enum CheckoutActionType {\n    LoadCheckoutRequested = 'LOAD_CHECKOUT_REQUESTED',\n    LoadCheckoutSucceeded = 'LOAD_CHECKOUT_SUCCEEDED',\n    LoadCheckoutFailed = 'LOAD_CHECKOUT_FAILED',\n\n    UpdateCheckoutRequested = 'UPDATE_CHECKOUT_REQUESTED',\n    UpdateCheckoutSucceeded = 'UPDATE_CHECKOUT_SUCCEEDED',\n    UpdateCheckoutFailed = 'UPDATE_CHECKOUT_FAILED',\n}\n\nexport type CheckoutAction = LoadCheckoutAction | UpdateCheckoutAction;\n\nexport type LoadCheckoutAction =\n    LoadCheckoutRequestedAction |\n    LoadCheckoutSucceededAction |\n    LoadCheckoutFailedAction |\n    LoadConfigAction;\n\nexport type UpdateCheckoutAction =\n    UpdateCheckoutRequestedAction |\n    UpdateCheckoutSucceededAction |\n    UpdateCheckoutFailedAction;\n\nexport interface LoadCheckoutRequestedAction extends Action {\n    type: CheckoutActionType.LoadCheckoutRequested;\n}\n\nexport interface LoadCheckoutSucceededAction extends Action<Checkout> {\n    type: CheckoutActionType.LoadCheckoutSucceeded;\n}\n\nexport interface LoadCheckoutFailedAction extends Action<Error> {\n    type: CheckoutActionType.LoadCheckoutFailed;\n}\n\nexport interface UpdateCheckoutRequestedAction extends Action {\n    type: CheckoutActionType.UpdateCheckoutRequested;\n}\n\nexport interface UpdateCheckoutSucceededAction extends Action<Checkout> {\n    type: CheckoutActionType.UpdateCheckoutSucceeded;\n}\n\nexport interface UpdateCheckoutFailedAction extends Action<Error> {\n    type: CheckoutActionType.UpdateCheckoutFailed;\n}\n","import { setPrototypeOf } from '../../utility';\n\nimport CustomError from './custom-error';\n\nexport default class StandardError extends Error implements CustomError {\n    type = 'standard';\n\n    constructor(message?: string) {\n        super(message || 'An unexpected error has occurred.');\n\n        setPrototypeOf(this, new.target.prototype);\n\n        if (typeof Error.captureStackTrace === 'function') {\n            Error.captureStackTrace(this, new.target);\n        } else {\n            this.stack = (new Error(this.message)).stack;\n        }\n    }\n}\n","export default function setPrototypeOf(object: any, prototype: object) {\n    if (Object.setPrototypeOf) {\n        Object.setPrototypeOf(object, prototype);\n    } else {\n        object.__proto__ = prototype;\n    }\n\n    return object;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\nimport { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nexport enum CouponActionType {\n    ApplyCouponRequested = 'APPLY_COUPON_REQUESTED',\n    ApplyCouponSucceeded = 'APPLY_COUPON_SUCCEEDED',\n    ApplyCouponFailed = 'APPLY_COUPON_FAILED',\n\n    RemoveCouponRequested = 'REMOVE_COUPON_REQUESTED',\n    RemoveCouponSucceeded = 'REMOVE_COUPON_SUCCEEDED',\n    RemoveCouponFailed = 'REMOVE_COUPON_FAILED',\n}\n\nexport type CouponAction =\n    ApplyCouponAction |\n    RemoveCouponAction;\n\nexport type ApplyCouponAction =\n    ApplyCouponRequestedAction |\n    ApplyCouponSucceededAction |\n    ApplyCouponFailedAction;\n\nexport type RemoveCouponAction =\n    RemoveCouponRequestedAction |\n    RemoveCouponSucceededAction |\n    RemoveCouponFailedAction;\n\nexport interface ApplyCouponRequestedAction extends Action {\n    type: CouponActionType.ApplyCouponRequested;\n}\n\nexport interface ApplyCouponSucceededAction extends Action<Checkout> {\n    type: CouponActionType.ApplyCouponSucceeded;\n}\n\nexport interface ApplyCouponFailedAction extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: CouponActionType.ApplyCouponFailed;\n}\n\nexport interface RemoveCouponRequestedAction extends Action {\n    type: CouponActionType.RemoveCouponRequested;\n}\n\nexport interface RemoveCouponSucceededAction extends Action<Checkout> {\n    type: CouponActionType.RemoveCouponSucceeded;\n}\n\nexport interface RemoveCouponFailedAction extends Action<RequestError> {\n    type: CouponActionType.RemoveCouponFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nexport enum BillingAddressActionType {\n    UpdateBillingAddressRequested = 'UPDATE_BILLING_ADDRESS_REQUESTED',\n    UpdateBillingAddressSucceeded = 'UPDATE_BILLING_ADDRESS_SUCCEEDED',\n    UpdateBillingAddressFailed = 'UPDATE_BILLING_ADDRESS_FAILED',\n\n    ContinueAsGuestRequested = 'CONTINUE_AS_GUEST_REQUESTED',\n    ContinueAsGuestSucceeded = 'CONTINUE_AS_GUEST_SUCCEEDED',\n    ContinueAsGuestFailed = 'CONTINUE_AS_GUEST_FAILED',\n}\n\nexport type BillingAddressAction =\n    ContinueAsGuestAction |\n    UpdateBillingAddressAction;\n\nexport type UpdateBillingAddressAction =\n    UpdateBillingAddressRequested |\n    UpdateBillingAddressSucceeded |\n    UpdateBillingAddressFailed;\n\nexport type ContinueAsGuestAction =\n    ContinueAsGuestRequested |\n    ContinueAsGuestSucceeded |\n    ContinueAsGuestFailed;\n\nexport interface UpdateBillingAddressRequested extends Action {\n    type: BillingAddressActionType.UpdateBillingAddressRequested;\n}\n\nexport interface UpdateBillingAddressSucceeded extends Action<Checkout> {\n    type: BillingAddressActionType.UpdateBillingAddressSucceeded;\n}\n\nexport interface UpdateBillingAddressFailed extends Action<Error> {\n    type: BillingAddressActionType.UpdateBillingAddressFailed;\n}\n\nexport interface ContinueAsGuestRequested extends Action {\n    type: BillingAddressActionType.ContinueAsGuestRequested;\n}\n\nexport interface ContinueAsGuestSucceeded extends Action<Checkout> {\n    type: BillingAddressActionType.ContinueAsGuestSucceeded;\n}\n\nexport interface ContinueAsGuestFailed extends Action<Error> {\n    type: BillingAddressActionType.ContinueAsGuestFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { InternalOrderResponseData } from './internal-order-responses';\nimport Order from './order';\n\nexport enum OrderActionType {\n    LoadOrderRequested = 'LOAD_ORDER_REQUESTED',\n    LoadOrderSucceeded = 'LOAD_ORDER_SUCCEEDED',\n    LoadOrderFailed = 'LOAD_ORDER_FAILED',\n\n    LoadOrderPaymentsRequested = 'LOAD_ORDER_PAYMENTS_REQUESTED',\n    LoadOrderPaymentsSucceeded = 'LOAD_ORDER_PAYMENTS_SUCCEEDED',\n    LoadOrderPaymentsFailed = 'LOAD_ORDER_PAYMENTS_FAILED',\n\n    SubmitOrderRequested = 'SUBMIT_ORDER_REQUESTED',\n    SubmitOrderSucceeded = 'SUBMIT_ORDER_SUCCEEDED',\n    SubmitOrderFailed = 'SUBMIT_ORDER_FAILED',\n\n    FinalizeOrderRequested = 'FINALIZE_ORDER_REQUESTED',\n    FinalizeOrderSucceeded = 'FINALIZE_ORDER_SUCCEEDED',\n    FinalizeOrderFailed = 'FINALIZE_ORDER_FAILED',\n}\n\nexport type OrderAction = LoadOrderAction |\n    LoadOrderPaymentsAction |\n    SubmitOrderAction |\n    FinalizeOrderAction;\n\nexport type LoadOrderPaymentsAction = LoadOrderPaymentsRequestedAction |\n    LoadOrderPaymentsSucceededAction |\n    LoadOrderPaymentsFailedAction;\n\nexport type LoadOrderAction =\n    LoadOrderRequestedAction |\n    LoadOrderSucceededAction |\n    LoadOrderFailedAction;\n\nexport type SubmitOrderAction =\n    SubmitOrderRequestedAction |\n    SubmitOrderSucceededAction |\n    SubmitOrderFailedAction |\n    LoadOrderAction;\n\nexport type FinalizeOrderAction =\n    FinalizeOrderRequestedAction |\n    FinalizeOrderSucceededAction |\n    FinalizeOrderFailedAction |\n    LoadOrderAction;\n\nexport interface LoadOrderRequestedAction extends Action {\n    type: OrderActionType.LoadOrderRequested;\n}\n\nexport interface LoadOrderSucceededAction extends Action<Order> {\n    type: OrderActionType.LoadOrderSucceeded;\n}\n\nexport interface LoadOrderFailedAction extends Action<Error> {\n    type: OrderActionType.LoadOrderFailed;\n}\n\nexport interface LoadOrderPaymentsRequestedAction extends Action {\n    type: OrderActionType.LoadOrderPaymentsRequested;\n}\n\nexport interface LoadOrderPaymentsSucceededAction extends Action<Order> {\n    type: OrderActionType.LoadOrderPaymentsSucceeded;\n}\n\nexport interface LoadOrderPaymentsFailedAction extends Action<Error> {\n    type: OrderActionType.LoadOrderPaymentsFailed;\n}\n\nexport interface SubmitOrderRequestedAction extends Action {\n    type: OrderActionType.SubmitOrderRequested;\n}\n\nexport interface SubmitOrderSucceededAction extends Action<InternalOrderResponseData> {\n    type: OrderActionType.SubmitOrderSucceeded;\n}\n\nexport interface SubmitOrderFailedAction extends Action<Error> {\n    type: OrderActionType.SubmitOrderFailed;\n}\n\nexport interface FinalizeOrderRequestedAction extends Action {\n    type: OrderActionType.FinalizeOrderRequested;\n}\n\nexport interface FinalizeOrderSucceededAction extends Action<InternalOrderResponseData> {\n    type: OrderActionType.FinalizeOrderSucceeded;\n}\n\nexport interface FinalizeOrderFailedAction extends Action<Error> {\n    type: OrderActionType.FinalizeOrderFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport PaymentMethod from './payment-method';\nimport PaymentMethodMeta from './payment-method-meta';\n\nexport enum PaymentMethodActionType {\n    LoadPaymentMethodRequested = 'LOAD_PAYMENT_METHOD_REQUESTED',\n    LoadPaymentMethodSucceeded = 'LOAD_PAYMENT_METHOD_SUCCEEDED',\n    LoadPaymentMethodFailed = 'LOAD_PAYMENT_METHOD_FAILED',\n\n    LoadPaymentMethodsRequested = 'LOAD_PAYMENT_METHODS_REQUESTED',\n    LoadPaymentMethodsSucceeded = 'LOAD_PAYMENT_METHODS_SUCCEEDED',\n    LoadPaymentMethodsFailed = 'LOAD_PAYMENT_METHODS_FAILED',\n}\n\nexport type PaymentMethodAction = LoadPaymentMethodAction | LoadPaymentMethodsAction;\n\nexport type LoadPaymentMethodAction =\n    LoadPaymentMethodRequestedAction |\n    LoadPaymentMethodSucceededAction |\n    LoadPaymentMethodFailedAction;\n\nexport type LoadPaymentMethodsAction =\n    LoadPaymentMethodsRequestedAction |\n    LoadPaymentMethodsSucceededAction |\n    LoadPaymentMethodsFailedAction;\n\nexport interface LoadPaymentMethodRequestedAction extends Action {\n    type: PaymentMethodActionType.LoadPaymentMethodRequested;\n}\n\nexport interface LoadPaymentMethodSucceededAction extends Action<PaymentMethod> {\n    type: PaymentMethodActionType.LoadPaymentMethodSucceeded;\n}\n\nexport interface LoadPaymentMethodFailedAction extends Action<Error> {\n    type: PaymentMethodActionType.LoadPaymentMethodFailed;\n}\n\nexport interface LoadPaymentMethodsRequestedAction extends Action {\n    type: PaymentMethodActionType.LoadPaymentMethodsRequested;\n}\n\nexport interface LoadPaymentMethodsSucceededAction extends Action<PaymentMethod[], PaymentMethodMeta> {\n    type: PaymentMethodActionType.LoadPaymentMethodsSucceeded;\n}\n\nexport interface LoadPaymentMethodsFailedAction extends Action<Error> {\n    type: PaymentMethodActionType.LoadPaymentMethodsFailed;\n}\n","module.exports = require(\"rxjs/operators\");","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadPaymentMethodAction } from '../payment';\n\nimport { CheckoutButtonMethodType } from './strategies';\n\nexport enum CheckoutButtonActionType {\n    InitializeButtonFailed = 'INITIALIZE_BUTTON_FAILED',\n    InitializeButtonRequested = 'INITIALIZE_BUTTON_REQUESTED',\n    InitializeButtonSucceeded = 'INITIALIZE_BUTTON_SUCCEEDED',\n\n    DeinitializeButtonFailed = 'DEINITIALIZE_BUTTON_FAILED',\n    DeinitializeButtonRequested = 'DEINITIALIZE_BUTTON_REQUESTED',\n    DeinitializeButtonSucceeded = 'DEINITIALIZE_BUTTON_SUCCEEDED',\n}\n\nexport type CheckoutButtonAction = InitializeButtonAction | DeinitializeButtonAction;\n\nexport type InitializeButtonAction =\n    InitializeButtonRequestedAction |\n    InitializeButtonSucceededAction |\n    InitializeButtonFailedAction |\n    LoadPaymentMethodAction;\n\nexport type DeinitializeButtonAction =\n    DeinitializeButtonRequestedAction |\n    DeinitializeButtonSucceededAction |\n    DeinitializeButtonFailedAction;\n\nexport interface CheckoutButtonActionMeta {\n    methodId: CheckoutButtonMethodType;\n}\n\nexport interface InitializeButtonActionMeta extends CheckoutButtonActionMeta {\n    containerId: string;\n}\n\nexport interface InitializeButtonRequestedAction extends Action<undefined, InitializeButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonRequested;\n}\n\nexport interface InitializeButtonSucceededAction extends Action<undefined, InitializeButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonSucceeded;\n}\n\nexport interface InitializeButtonFailedAction extends Action<Error, InitializeButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonFailed;\n}\n\nexport interface DeinitializeButtonRequestedAction extends Action<undefined, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonRequested;\n}\n\nexport interface DeinitializeButtonSucceededAction extends Action<undefined, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonSucceeded;\n}\n\nexport interface DeinitializeButtonFailedAction extends Action<Error, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\nimport { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nexport enum GiftCertificateActionType {\n    ApplyGiftCertificateRequested = 'APPLY_GIFT_CERTIFICATE_REQUESTED',\n    ApplyGiftCertificateSucceeded = 'APPLY_GIFT_CERTIFICATE_SUCCEEDED',\n    ApplyGiftCertificateFailed = 'APPLY_GIFT_CERTIFICATE_FAILED',\n\n    RemoveGiftCertificateRequested = 'REMOVE_GIFT_CERTIFICATE_REQUESTED',\n    RemoveGiftCertificateSucceeded = 'REMOVE_GIFT_CERTIFICATE_SUCCEEDED',\n    RemoveGiftCertificateFailed = 'REMOVE_GIFT_CERTIFICATE_FAILED',\n}\n\nexport type GiftCertificateAction =\n    ApplyGiftCertificateAction |\n    RemoveGiftCertificateAction;\n\nexport type ApplyGiftCertificateAction =\n    ApplyGiftCertificateRequestedAction |\n    ApplyGiftCertificateSucceededAction |\n    ApplyGiftCertificateFailedAction;\n\nexport type RemoveGiftCertificateAction =\n    RemoveGiftCertificateRequestedAction |\n    RemoveGiftCertificateSucceededAction |\n    RemoveGiftCertificateFailedAction;\n\nexport interface ApplyGiftCertificateRequestedAction extends Action {\n    type: GiftCertificateActionType.ApplyGiftCertificateRequested;\n}\n\nexport interface ApplyGiftCertificateSucceededAction extends Action<Checkout> {\n    type: GiftCertificateActionType.ApplyGiftCertificateSucceeded;\n}\n\nexport interface ApplyGiftCertificateFailedAction extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: GiftCertificateActionType.ApplyGiftCertificateFailed;\n}\n\nexport interface RemoveGiftCertificateRequestedAction extends Action {\n    type: GiftCertificateActionType.RemoveGiftCertificateRequested;\n}\n\nexport interface RemoveGiftCertificateSucceededAction extends Action<Checkout> {\n    type: GiftCertificateActionType.RemoveGiftCertificateSucceeded;\n}\n\nexport interface RemoveGiftCertificateFailedAction extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: GiftCertificateActionType.RemoveGiftCertificateFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { InstrumentsResponseBody } from './instrument-response-body';\n\nexport enum InstrumentActionType {\n    LoadInstrumentsRequested = 'LOAD_INSTRUMENTS_REQUESTED',\n    LoadInstrumentsSucceeded = 'LOAD_INSTRUMENTS_SUCCEEDED',\n    LoadInstrumentsFailed = 'LOAD_INSTRUMENTS_FAILED',\n\n    DeleteInstrumentRequested = 'DELETE_INSTRUMENT_REQUESTED',\n    DeleteInstrumentSucceeded = 'DELETE_INSTRUMENT_SUCCEEDED',\n    DeleteInstrumentFailed = 'DELETE_INSTRUMENT_FAILED',\n}\n\nexport type InstrumentAction =\n    LoadInstrumentsAction |\n    DeleteInstrumentAction;\n\nexport type LoadInstrumentsAction =\n    LoadInstrumentsRequestedAction |\n    LoadInstrumentsSucceededAction |\n    LoadInstrumentsFailedAction;\n\nexport type DeleteInstrumentAction =\n    DeleteInstrumentRequestedAction |\n    DeleteInstrumentSucceededAction |\n    DeleteInstrumentFailedAction;\n\nexport interface LoadInstrumentsRequestedAction extends Action {\n    type: InstrumentActionType.LoadInstrumentsRequested;\n}\n\nexport interface LoadInstrumentsSucceededAction extends Action<InstrumentsResponseBody> {\n    type: InstrumentActionType.LoadInstrumentsSucceeded;\n}\n\nexport interface LoadInstrumentsFailedAction extends Action<Error> {\n    type: InstrumentActionType.LoadInstrumentsFailed;\n}\n\nexport interface DeleteInstrumentRequestedAction extends Action {\n    type: InstrumentActionType.DeleteInstrumentRequested;\n}\n\nexport interface DeleteInstrumentSucceededAction extends Action<InstrumentsResponseBody> {\n    type: InstrumentActionType.DeleteInstrumentSucceeded;\n}\n\nexport interface DeleteInstrumentFailedAction extends Action<Error> {\n    type: InstrumentActionType.DeleteInstrumentFailed;\n}\n","import EmbeddedCheckoutError from './embedded-checkout-error';\nimport EmbeddedContentOptions from './iframe-content/embedded-content-options';\n\nexport enum EmbeddedCheckoutEventType {\n    CheckoutComplete = 'CHECKOUT_COMPLETE',\n    CheckoutError = 'CHECKOUT_ERROR',\n    CheckoutLoaded = 'CHECKOUT_LOADED',\n    FrameError = 'FRAME_ERROR',\n    FrameLoaded = 'FRAME_LOADED',\n    SignedOut = 'SIGNED_OUT',\n}\n\nexport interface EmbeddedCheckoutEventMap {\n    [EmbeddedCheckoutEventType.CheckoutComplete]: EmbeddedCheckoutCompleteEvent;\n    [EmbeddedCheckoutEventType.CheckoutError]: EmbeddedCheckoutErrorEvent;\n    [EmbeddedCheckoutEventType.CheckoutLoaded]: EmbeddedCheckoutLoadedEvent;\n    [EmbeddedCheckoutEventType.FrameError]: EmbeddedCheckoutFrameErrorEvent;\n    [EmbeddedCheckoutEventType.FrameLoaded]: EmbeddedCheckoutFrameLoadedEvent;\n    [EmbeddedCheckoutEventType.SignedOut]: EmbeddedCheckoutSignedOutEvent;\n}\n\nexport type EmbeddedCheckoutEvent = (\n    EmbeddedCheckoutCompleteEvent |\n    EmbeddedCheckoutErrorEvent |\n    EmbeddedCheckoutFrameErrorEvent |\n    EmbeddedCheckoutFrameLoadedEvent |\n    EmbeddedCheckoutLoadedEvent |\n    EmbeddedCheckoutSignedOutEvent\n);\n\nexport interface EmbeddedCheckoutCompleteEvent {\n    type: EmbeddedCheckoutEventType.CheckoutComplete;\n}\n\nexport interface EmbeddedCheckoutErrorEvent {\n    type: EmbeddedCheckoutEventType.CheckoutError;\n    payload: EmbeddedCheckoutError;\n}\n\nexport interface EmbeddedCheckoutLoadedEvent {\n    type: EmbeddedCheckoutEventType.CheckoutLoaded;\n}\n\nexport interface EmbeddedCheckoutFrameErrorEvent {\n    type: EmbeddedCheckoutEventType.FrameError;\n    payload: EmbeddedCheckoutError;\n}\n\nexport interface EmbeddedCheckoutFrameLoadedEvent {\n    type: EmbeddedCheckoutEventType.FrameLoaded;\n    payload?: EmbeddedContentOptions;\n}\n\nexport interface EmbeddedCheckoutSignedOutEvent {\n    type: EmbeddedCheckoutEventType.SignedOut;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { AmazonPayRemoteCheckout } from './methods';\n\nexport enum RemoteCheckoutActionType {\n    InitializeRemoteBillingRequested = 'INITIALIZE_REMOTE_BILLING_REQUESTED',\n    InitializeRemoteBillingSucceeded = 'INITIALIZE_REMOTE_BILLING_SUCCEEDED',\n    InitializeRemoteBillingFailed = 'INITIALIZE_REMOTE_BILLING_FAILED',\n\n    InitializeRemoteShippingRequested = 'INITIALIZE_REMOTE_SHIPPING_REQUESTED',\n    InitializeRemoteShippingSucceeded = 'INITIALIZE_REMOTE_SHIPPING_SUCCEEDED',\n    InitializeRemoteShippingFailed = 'INITIALIZE_REMOTE_SHIPPING_FAILED',\n\n    InitializeRemotePaymentRequested = 'INITIALIZE_REMOTE_PAYMENT_REQUESTED',\n    InitializeRemotePaymentSucceeded = 'INITIALIZE_REMOTE_PAYMENT_SUCCEEDED',\n    InitializeRemotePaymentFailed = 'INITIALIZE_REMOTE_PAYMENT_FAILED',\n\n    LoadRemoteSettingsRequested = 'LOAD_REMOTE_SETTINGS_REQUESTED',\n    LoadRemoteSettingsSucceeded = 'LOAD_REMOTE_SETTINGS_SUCCEEDED',\n    LoadRemoteSettingsFailed = 'LOAD_REMOTE_SETTINGS_FAILED',\n\n    SignOutRemoteCustomerRequested = 'SIGN_OUT_REMOTE_CUSTOMER_REQUESTED',\n    SignOutRemoteCustomerSucceeded = 'SIGN_OUT_REMOTE_CUSTOMER_SUCCEEDED',\n    SignOutRemoteCustomerFailed = 'SIGN_OUT_REMOTE_CUSTOMER_FAILED',\n\n    UpdateRemoteCheckout = 'UPDATE_REMOTE_CHECKOUT',\n}\n\nexport type RemoteCheckoutAction = InitializeRemoteBillingAction |\n    InitializeRemoteShippingAction |\n    InitializeRemotePaymentAction |\n    SignOutRemoteCustomerAction |\n    LoadRemoteSettingsAction |\n    UpdateRemoteCheckoutAction;\n\nexport type InitializeRemoteBillingAction = InitializeRemoteBillingSucceededAction |\n    InitializeRemoteBillingFailedAction |\n    InitializeRemoteBillingRequestedAction;\n\nexport interface InitializeRemoteBillingSucceededAction extends Action<AmazonPayRemoteCheckout> {\n    type: RemoteCheckoutActionType.InitializeRemoteBillingSucceeded;\n}\n\nexport interface InitializeRemoteBillingFailedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteBillingFailed;\n}\n\nexport interface InitializeRemoteBillingRequestedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteBillingRequested;\n}\n\nexport type InitializeRemoteShippingAction = InitializeRemoteShippingSucceededAction |\n    InitializeRemoteShippingFailedAction |\n    InitializeRemoteShippingRequestedAction;\n\nexport interface InitializeRemoteShippingSucceededAction extends Action<AmazonPayRemoteCheckout> {\n    type: RemoteCheckoutActionType.InitializeRemoteShippingSucceeded;\n}\n\nexport interface InitializeRemoteShippingFailedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteShippingFailed;\n}\n\nexport interface InitializeRemoteShippingRequestedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteShippingRequested;\n}\n\nexport type InitializeRemotePaymentAction = InitializeRemotePaymentSucceededAction |\n    InitializeRemotePaymentFailedAction |\n    InitializeRemotePaymentRequestedAction;\n\nexport interface InitializeRemotePaymentSucceededAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemotePaymentSucceeded;\n}\n\nexport interface InitializeRemotePaymentFailedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemotePaymentFailed;\n}\n\nexport interface InitializeRemotePaymentRequestedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemotePaymentRequested;\n}\n\nexport type SignOutRemoteCustomerAction = SignOutRemoteCustomerSucceededAction |\n    SignOutRemoteCustomerFailedAction |\n    SignOutRemoteCustomerRequestedAction;\n\nexport interface SignOutRemoteCustomerSucceededAction extends Action {\n    type: RemoteCheckoutActionType.SignOutRemoteCustomerSucceeded;\n}\n\nexport interface SignOutRemoteCustomerFailedAction extends Action {\n    type: RemoteCheckoutActionType.SignOutRemoteCustomerFailed;\n}\n\nexport interface SignOutRemoteCustomerRequestedAction extends Action {\n    type: RemoteCheckoutActionType.SignOutRemoteCustomerRequested;\n}\n\nexport type LoadRemoteSettingsAction = LoadRemoteSettingsSucceededAction |\n    LoadRemoteSettingsRequestedAction |\n    LoadRemoteSettingsFailedAction;\n\nexport interface LoadRemoteSettingsSucceededAction extends Action {\n    type: RemoteCheckoutActionType.LoadRemoteSettingsSucceeded;\n}\n\nexport interface LoadRemoteSettingsRequestedAction extends Action {\n    type: RemoteCheckoutActionType.LoadRemoteSettingsRequested;\n}\n\nexport interface LoadRemoteSettingsFailedAction extends Action {\n    type: RemoteCheckoutActionType.LoadRemoteSettingsFailed;\n}\n\nexport interface UpdateRemoteCheckoutAction extends Action {\n    type: RemoteCheckoutActionType.UpdateRemoteCheckout;\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport StandardError from './standard-error';\n\nconst DEFAULT_RESPONSE = {\n    body: {},\n    headers: {},\n    status: 0,\n};\n\nexport default class RequestError<TBody = any> extends StandardError {\n    body: TBody | {};\n    headers: { [key: string]: any };\n    errors: Array<{ code: string; message?: string }>;\n    status: number;\n\n    constructor(\n        response?: Response<TBody | {}>,\n        { message, errors }: {\n            message?: string;\n            errors?: Array<{ code: string; message?: string }>;\n        } = {}\n    ) {\n        const { body, headers, status } = response || DEFAULT_RESPONSE;\n\n        super(message || 'An unexpected error has occurred.');\n\n        this.name = 'RequestError';\n        this.type = 'request';\n        this.body = body;\n        this.headers = headers;\n        this.status = status;\n        this.errors = errors || [];\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport Config from './config';\n\nexport enum ConfigActionType {\n    LoadConfigRequested = 'LOAD_CONFIG_REQUESTED',\n    LoadConfigSucceeded = 'LOAD_CONFIG_SUCCEEDED',\n    LoadConfigFailed = 'LOAD_CONFIG_FAILED',\n}\n\nexport type LoadConfigAction =\n    LoadConfigRequestedAction |\n    LoadConfigSucceededAction |\n    LoadConfigFailedAction;\n\nexport interface LoadConfigRequestedAction extends Action {\n    type: ConfigActionType.LoadConfigRequested;\n}\n\nexport interface LoadConfigSucceededAction extends Action<Config> {\n    type: ConfigActionType.LoadConfigSucceeded;\n}\n\nexport interface LoadConfigFailedAction extends Action<Error> {\n    type: ConfigActionType.LoadConfigFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport Country from './country';\n\nexport enum CountryActionType {\n    LoadCountriesRequested = 'LOAD_COUNTRIES_REQUESTED',\n    LoadCountriesSucceeded = 'LOAD_COUNTRIES_SUCCEEDED',\n    LoadCountriesFailed = 'LOAD_COUNTRIES_FAILED',\n}\n\nexport type LoadCountriesAction =\n    LoadCountriesRequestedAction |\n    LoadCountriesSucceededAction |\n    LoadCountriesFailedAction;\n\nexport interface LoadCountriesRequestedAction extends Action {\n    type: CountryActionType.LoadCountriesRequested;\n}\n\nexport interface LoadCountriesSucceededAction extends Action<Country[]> {\n    type: CountryActionType.LoadCountriesSucceeded;\n}\n\nexport interface LoadCountriesFailedAction extends Action<Error> {\n    type: CountryActionType.LoadCountriesFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Country } from '../geography';\n\nexport enum ShippingCountryActionType {\n    LoadShippingCountriesRequested = 'LOAD_SHIPPING_COUNTRIES_REQUESTED',\n    LoadShippingCountriesSucceeded = 'LOAD_SHIPPING_COUNTRIES_SUCCEEDED',\n    LoadShippingCountriesFailed = 'LOAD_SHIPPING_COUNTRIES_FAILED',\n}\n\nexport type LoadShippingCountriesAction = LoadShippingCountriesRequestedAction |\n    LoadShippingCountriesSucceededAction |\n    LoadShippingCountriesFailedAction;\n\nexport interface LoadShippingCountriesRequestedAction extends Action {\n    type: ShippingCountryActionType.LoadShippingCountriesRequested;\n}\n\nexport interface LoadShippingCountriesSucceededAction extends Action<Country[]> {\n    type: ShippingCountryActionType.LoadShippingCountriesSucceeded;\n}\n\nexport interface LoadShippingCountriesFailedAction extends Action<Error> {\n    type: ShippingCountryActionType.LoadShippingCountriesFailed;\n}\n","module.exports = require(\"@bigcommerce/request-sender\");","export const ACKNOWLEDGE = 'ACKNOWLEDGE';\nexport const FINALIZE = 'FINALIZE';\nexport const INITIALIZE = 'INITIALIZE';\n","module.exports = require(\"@bigcommerce/script-loader\");","enum ContentType {\n    Json = 'application/json',\n    JsonV1 = 'application/vnd.bc.v1+json',\n}\n\nexport default ContentType;\n","module.exports = require(\"shallowequal\");","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadOrderAction } from '../order';\n\nimport PaymentResponseBody from './payment-response-body';\n\nexport enum PaymentActionType {\n    SubmitPaymentRequested = 'SUBMIT_PAYMENT_REQUESTED',\n    SubmitPaymentSucceeded = 'SUBMIT_PAYMENT_SUCCEEDED',\n    SubmitPaymentFailed = 'SUBMIT_PAYMENT_FAILED',\n\n    InitializeOffsitePaymentRequested = 'INITIALIZE_OFFSITE_PAYMENT_REQUESTED',\n    InitializeOffsitePaymentSucceeded = 'INITIALIZE_OFFSITE_PAYMENT_SUCCEEDED',\n    InitializeOffsitePaymentFailed = 'INITIALIZE_OFFSITE_PAYMENT_FAILED',\n}\n\nexport type PaymentAction = SubmitPaymentAction |\n    InitializeOffsitePaymentAction;\n\nexport type SubmitPaymentAction =\n    SubmitPaymentRequestedAction |\n    SubmitPaymentSucceededAction |\n    SubmitPaymentFailedAction |\n    LoadOrderAction;\n\nexport type InitializeOffsitePaymentAction =\n    InitializeOffsitePaymentRequestedAction |\n    InitializeOffsitePaymentSucceededAction |\n    InitializeOffsitePaymentFailedAction;\n\nexport interface SubmitPaymentRequestedAction extends Action {\n    type: PaymentActionType.SubmitPaymentRequested;\n}\n\nexport interface SubmitPaymentSucceededAction extends Action<PaymentResponseBody> {\n    type: PaymentActionType.SubmitPaymentSucceeded;\n}\n\nexport interface SubmitPaymentFailedAction extends Action<Error> {\n    type: PaymentActionType.SubmitPaymentFailed;\n}\n\nexport interface InitializeOffsitePaymentRequestedAction extends Action {\n    type: PaymentActionType.InitializeOffsitePaymentRequested;\n}\n\nexport interface InitializeOffsitePaymentSucceededAction extends Action {\n    type: PaymentActionType.InitializeOffsitePaymentSucceeded;\n}\n\nexport interface InitializeOffsitePaymentFailedAction extends Action<Error> {\n    type: PaymentActionType.InitializeOffsitePaymentFailed;\n}\n","import StandardError from './standard-error';\n\nexport default class InvalidArgumentError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Invalid arguments have been provided.');\n\n        this.name = 'InvalidArgumentError';\n        this.type = 'invalid_argument';\n    }\n}\n","export interface CompareOptions {\n    keyFilter?(key: string): boolean;\n}\n\nexport default function isEqual(objectA: any, objectB: any, options?: CompareOptions): boolean {\n    if (objectA === objectB) {\n        return true;\n    }\n\n    if (objectA && objectB && typeof objectA === 'object' && typeof objectB === 'object') {\n        if (Array.isArray(objectA) && Array.isArray(objectB)) {\n            return isArrayEqual(objectA, objectB, options);\n        }\n\n        if (Array.isArray(objectA) || Array.isArray(objectB)) {\n            return false;\n        }\n\n        if ((objectA instanceof Date) && (objectB instanceof Date)) {\n            return isDateEqual(objectA, objectB);\n        }\n\n        if ((objectA instanceof Date) || (objectB instanceof Date)) {\n            return false;\n        }\n\n        if ((objectA instanceof RegExp) && (objectB instanceof RegExp)) {\n            return isRegExpEqual(objectA, objectB);\n        }\n\n        if ((objectA instanceof RegExp) || (objectB instanceof RegExp)) {\n            return false;\n        }\n\n        return isObjectEqual(objectA, objectB, options);\n    }\n\n    return objectA === objectB;\n}\n\nfunction isRegExpEqual(objectA: RegExp, objectB: RegExp): boolean {\n    return objectA.toString() === objectB.toString();\n}\n\nfunction isDateEqual(objectA: Date, objectB: Date): boolean {\n    return objectA.getTime() === objectB.getTime();\n}\n\nfunction isArrayEqual(objectA: any[], objectB: any[], options?: CompareOptions): boolean {\n    if (objectA.length !== objectB.length) {\n        return false;\n    }\n\n    for (let index = 0, length = objectA.length; index < length; index++) {\n        if (!isEqual(objectA[index], objectB[index], options)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nfunction isObjectEqual(\n    objectA: { [key: string]: any },\n    objectB: { [key: string]: any },\n    options?: CompareOptions\n): boolean {\n    const filter = options && options.keyFilter;\n    const keysA = filter ? Object.keys(objectA).filter(filter) : Object.keys(objectA);\n    const keysB = filter ? Object.keys(objectB).filter(filter) : Object.keys(objectB);\n\n    if (keysA.length !== keysB.length) {\n        return false;\n    }\n\n    for (let index = 0, length = keysA.length; index < length; index++) {\n        const key = keysA[index];\n\n        if (!objectB.hasOwnProperty(key)) {\n            return false;\n        }\n\n        if (!isEqual(objectA[key], objectB[key], options)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n","export const HOSTED = 'PAYMENT_TYPE_HOSTED';\nexport const OFFLINE = 'PAYMENT_TYPE_OFFLINE';\n","import IframeEvent from './iframe-event';\n\nexport default function isIframeEvent<TEvent extends IframeEvent<TType>, TType extends string>(\n    object: any,\n    type: TType\n): object is TEvent {\n    return object.type === type;\n}\n","export interface RootCacheKeyMap {\n    maps: ChildCacheKeyMap[];\n}\n\nexport interface IntermediateCacheKeyMap {\n    maps: ChildCacheKeyMap[];\n    parentMap: RootCacheKeyMap | IntermediateCacheKeyMap;\n    usedCount: number;\n    value: any;\n}\n\nexport interface TerminalCacheKeyMap extends IntermediateCacheKeyMap {\n    cacheKey: string;\n}\n\nexport type ChildCacheKeyMap = IntermediateCacheKeyMap | TerminalCacheKeyMap;\n\nexport function isTerminalCacheKeyMap(map: ChildCacheKeyMap): map is TerminalCacheKeyMap {\n    return map.hasOwnProperty('cacheKey');\n}\n\nexport function isRootCacheKeyMap(map: RootCacheKeyMap | ChildCacheKeyMap): map is RootCacheKeyMap {\n    return map.hasOwnProperty('parentMap');\n}\n","import { noop } from 'lodash';\nimport * as shallowEqual from 'shallowequal';\n\nimport { isRootCacheKeyMap, isTerminalCacheKeyMap, ChildCacheKeyMap, IntermediateCacheKeyMap, RootCacheKeyMap, TerminalCacheKeyMap } from './cache-key-maps';\n\nexport interface CacheKeyResolverOptions {\n    maxSize?: number;\n    onExpire?(key: string): void;\n    isEqual?(valueA: any, valueB: any): boolean;\n}\n\ninterface ResolveResult {\n    index: number;\n    parentMap: RootCacheKeyMap | IntermediateCacheKeyMap;\n    map?: TerminalCacheKeyMap;\n}\n\nexport default class CacheKeyResolver {\n    private _lastId = 0;\n    private _map: RootCacheKeyMap = { maps: [] };\n    private _usedMaps: TerminalCacheKeyMap[] = [];\n    private _options: Required<CacheKeyResolverOptions>;\n\n    constructor(options?: CacheKeyResolverOptions) {\n        this._options = {\n            maxSize: 0,\n            isEqual: shallowEqual,\n            onExpire: noop,\n            ...options,\n        };\n    }\n\n    getKey(...args: any[]): string {\n        const result = this._resolveMap(...args);\n        const { index, parentMap } = result;\n        let { map } = result;\n\n        if (map && map.cacheKey) {\n            map.usedCount++;\n        } else {\n            map = this._generateMap(parentMap, args.slice(index));\n        }\n\n        // Keep track of the least used map so we can remove it if the size of\n        // the stack exceeds the maximum size.\n        this._removeLeastUsedMap(map);\n\n        return map.cacheKey;\n    }\n\n    getUsedCount(...args: any[]): number {\n        const { map } = this._resolveMap(...args);\n\n        return map ? map.usedCount : 0;\n    }\n\n    private _resolveMap(...args: any[]): ResolveResult {\n        let index = 0;\n        let parentMap = this._map;\n\n        // Traverse the tree to find the linked list of maps that match the\n        // arguments of the call. Each intermediate or terminal map contains a\n        // value that could be used to match with the arguments. The last map in\n        // the list (the terminal) should contain a cache key. If it can does\n        // not exist, we will return a falsy value so that the caller could\n        // handle and generate a new cache key.\n        while (parentMap.maps.length) {\n            let isMatched = false;\n\n            for (let mapIndex = 0; mapIndex < parentMap.maps.length; mapIndex++) {\n                const map = parentMap.maps[mapIndex];\n\n                if (!this._options.isEqual(map.value, args[index])) {\n                    continue;\n                }\n\n                // Move the most recently used map to the top of the stack for\n                // quicker access\n                parentMap.maps.unshift(...parentMap.maps.splice(mapIndex, 1));\n\n                if ((args.length === 0 || index === args.length - 1) && isTerminalCacheKeyMap(map)) {\n                    return { index, map, parentMap };\n                }\n\n                isMatched = true;\n                parentMap = map;\n                index++;\n\n                break;\n            }\n\n            if (!isMatched) {\n                break;\n            }\n        }\n\n        return { index, parentMap };\n    }\n\n    private _generateMap(parent: RootCacheKeyMap | IntermediateCacheKeyMap, args: any[]): TerminalCacheKeyMap {\n        let index = 0;\n        let parentMap = parent;\n        let map: IntermediateCacheKeyMap;\n\n        do {\n            map = {\n                maps: [],\n                parentMap,\n                usedCount: 1,\n                value: args[index],\n            };\n\n            // Continue to build the tree of maps so that it could be resolved\n            // next time when the function is called with the same set of\n            // arguments.\n            parentMap.maps.unshift(map);\n\n            parentMap = map;\n            index++;\n        } while (index < args.length);\n\n        const terminalMap = map as TerminalCacheKeyMap;\n\n        terminalMap.cacheKey = `${++this._lastId}`;\n\n        return terminalMap;\n    }\n\n    private _removeLeastUsedMap(recentlyUsedMap: TerminalCacheKeyMap): void {\n        if (!this._options.maxSize) {\n            return;\n        }\n\n        const index = this._usedMaps.indexOf(recentlyUsedMap);\n\n        this._usedMaps.splice(\n            index === -1 ? 0 : index,\n            index === -1 ? 0 : 1,\n            recentlyUsedMap\n        );\n\n        if (this._usedMaps.length <= this._options.maxSize) {\n            return;\n        }\n\n        const map = this._usedMaps.pop();\n\n        if (!map) {\n            return;\n        }\n\n        this._removeMap(map);\n        this._options.onExpire(map.cacheKey);\n    }\n\n    private _removeMap(map: ChildCacheKeyMap): void {\n        if (!map.parentMap) {\n            return;\n        }\n\n        map.parentMap.maps.splice(map.parentMap.maps.indexOf(map), 1);\n\n        if (isRootCacheKeyMap(map.parentMap)) {\n            return;\n        }\n\n        this._removeMap(map.parentMap);\n    }\n}\n","module.exports = require(\"@bigcommerce/form-poster\");","module.exports = require(\"local-storage-fallback\");","import { parseUrl } from '../common/url';\n\nexport default class IframeEventPoster<TEvent> {\n    private _targetOrigin: string;\n\n    constructor(\n        targetOrigin: string,\n        private _targetWindow?: Window\n    ) {\n        this._targetOrigin = targetOrigin === '*' ? '*' : parseUrl(targetOrigin).origin;\n    }\n\n    post(event: TEvent): void {\n        if (window === this._targetWindow) {\n            return;\n        }\n\n        if (!this._targetWindow) {\n            throw new Error('Unable to post message becauset target window is not set.');\n        }\n\n        this._targetWindow.postMessage(event, this._targetOrigin);\n    }\n\n    setTarget(window: Window) {\n        this._targetWindow = window;\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadCheckoutAction } from '../checkout';\n\nimport { InternalCustomerResponseData } from './internal-customer-responses';\n\nexport enum CustomerActionType {\n    SignInCustomerRequested = 'SIGN_IN_CUSTOMER_REQUESTED',\n    SignInCustomerSucceeded = 'SIGN_IN_CUSTOMER_SUCCEEDED',\n    SignInCustomerFailed = 'SIGN_IN_CUSTOMER_FAILED',\n\n    SignOutCustomerRequested = 'SIGN_OUT_CUSTOMER_REQUESTED',\n    SignOutCustomerSucceeded = 'SIGN_OUT_CUSTOMER_SUCCEEDED',\n    SignOutCustomerFailed = 'SIGN_OUT_CUSTOMER_FAILED',\n}\n\nexport type CustomerAction =\n    SignInCustomerAction |\n    SignOutCustomerAction;\n\nexport type SignInCustomerAction =\n    SignInCustomerRequestedAction |\n    SignInCustomerSucceededAction |\n    SignInCustomerFailedAction |\n    LoadCheckoutAction;\n\nexport type SignOutCustomerAction =\n    SignOutCustomerRequestedAction |\n    SignOutCustomerSucceededAction |\n    SignOutCustomerFailedAction |\n    LoadCheckoutAction;\n\nexport interface SignInCustomerRequestedAction extends Action {\n    type: CustomerActionType.SignInCustomerRequested;\n}\n\nexport interface SignInCustomerSucceededAction extends Action<InternalCustomerResponseData> {\n    type: CustomerActionType.SignInCustomerSucceeded;\n}\n\nexport interface SignInCustomerFailedAction extends Action<Error> {\n    type: CustomerActionType.SignInCustomerFailed;\n}\n\nexport interface SignOutCustomerRequestedAction extends Action {\n    type: CustomerActionType.SignOutCustomerRequested;\n}\n\nexport interface SignOutCustomerSucceededAction extends Action<InternalCustomerResponseData> {\n    type: CustomerActionType.SignOutCustomerSucceeded;\n}\n\nexport interface SignOutCustomerFailedAction extends Action<Error> {\n    type: CustomerActionType.SignOutCustomerFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum SpamProtectionActionType {\n    InitializeFailed = 'SPAM_PROTECTION_INITIALIZE_FAILED',\n    InitializeSucceeded = 'SPAM_PROTECTION_INITIALIZE_SUCCEEDED',\n    InitializeRequested = 'SPAM_PROTECTION_INITIALIZE_REQUESTED',\n    ExecuteRequested = 'SPAM_PROTECTION_EXECUTE_REQUESTED',\n    Completed = 'SPAM_PROTECTION_COMPLETED',\n    SubmitFailed = 'SPAM_PROTECTION_SUBMIT_FAILED',\n}\n\nexport type SpamProtectionAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction |\n    ExecuteRequestedAction |\n    CompletedAction |\n    SubmitFailedAction;\n\nexport interface InitializeRequestedAction extends Action {\n    type: SpamProtectionActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: SpamProtectionActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: SpamProtectionActionType.InitializeFailed;\n}\n\nexport interface ExecuteRequestedAction extends Action {\n    type: SpamProtectionActionType.ExecuteRequested;\n}\n\nexport interface CompletedAction extends Action<string> {\n    type: SpamProtectionActionType.Completed;\n}\n\nexport interface SubmitFailedAction extends Action {\n    type: SpamProtectionActionType.SubmitFailed;\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { RequestError } from '../../common/error/errors';\n\nexport default class PaymentMethodInvalidError extends RequestError {\n    constructor(response?: Response) {\n        super(response, { message: 'There is a problem processing your payment. Please try again later.' });\n\n        this.name = 'PaymentMethodInvalidError';\n        this.type = 'payment_method_invalid';\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum ErrorActionType {\n    ClearError = 'CLEAR_ERROR',\n}\n\nexport type ErrorAction = ClearErrorAction;\n\nexport interface ClearErrorAction extends Action {\n    type: ErrorActionType.ClearError;\n    payload: Error;\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { cachableAction, ActionOptions } from '../common/data-store';\nimport { RequestOptions } from '../common/http-request';\n\nimport { LoadPaymentMethodsAction, LoadPaymentMethodAction, PaymentMethodActionType } from './payment-method-actions';\nimport PaymentMethodRequestSender from './payment-method-request-sender';\n\nexport default class PaymentMethodActionCreator {\n    constructor(\n        private _requestSender: PaymentMethodRequestSender\n    ) {}\n\n    loadPaymentMethods(options?: RequestOptions): Observable<LoadPaymentMethodsAction> {\n        return Observable.create((observer: Observer<LoadPaymentMethodsAction>) => {\n            observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodsRequested));\n\n            this._requestSender.loadPaymentMethods(options)\n                .then(response => {\n                    const meta = {\n                        deviceSessionId: response.headers['x-device-session-id'],\n                        sessionHash: response.headers['x-session-hash'],\n                    };\n\n                    observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodsSucceeded, response.body, meta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(PaymentMethodActionType.LoadPaymentMethodsFailed, response));\n                });\n        });\n    }\n\n    @cachableAction\n    loadPaymentMethod(methodId: string, options?: RequestOptions & ActionOptions): Observable<LoadPaymentMethodAction> {\n        return Observable.create((observer: Observer<LoadPaymentMethodAction>) => {\n            observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodRequested, undefined, { methodId }));\n\n            this._requestSender.loadPaymentMethod(methodId, options)\n                .then(response => {\n                    observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodSucceeded, response.body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(PaymentMethodActionType.LoadPaymentMethodFailed, response, { methodId }));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, INTERNAL_USE_ONLY, RequestOptions } from '../common/http-request';\n\nimport PaymentMethod from './payment-method';\n\nexport default class PaymentMethodRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadPaymentMethods({ timeout }: RequestOptions = {}): Promise<Response<PaymentMethod[]>> {\n        const url = '/api/storefront/payments';\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n        });\n    }\n\n    loadPaymentMethod(methodId: string, { timeout }: RequestOptions = {}): Promise<Response<PaymentMethod>> {\n        const url = `/api/storefront/payments/${methodId}`;\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n        });\n    }\n}\n","import EmbeddedCheckoutStyles from '../embedded-checkout-styles';\n\nexport enum EmbeddedContentEventType {\n    StyleConfigured = 'STYLE_CONFIGURED',\n}\n\nexport interface EmbeddedContentEventMap {\n    [EmbeddedContentEventType.StyleConfigured]: EmbeddedContentStyleConfiguredEvent;\n}\n\nexport type EmbeddedContentEvent = (\n    EmbeddedContentStyleConfiguredEvent\n);\n\nexport interface EmbeddedContentStyleConfiguredEvent {\n    type: EmbeddedContentEventType.StyleConfigured;\n    payload: EmbeddedCheckoutStyles;\n}\n","import { parseUrl } from '../common/url';\nimport { bindDecorator as bind } from '../common/utility';\n\nimport { IframeEventMap } from './iframe-event';\nimport isIframeEvent from './is-iframe-event';\n\nexport default class IframeEventListener<TEventMap extends IframeEventMap<keyof TEventMap>> {\n    private _isListening: boolean;\n    private _listeners: EventListeners<TEventMap>;\n    private _sourceOrigin: string;\n\n    constructor(\n        sourceOrigin: string\n    ) {\n        this._sourceOrigin = parseUrl(sourceOrigin).origin;\n        this._isListening = false;\n        this._listeners = {};\n    }\n\n    listen(): void {\n        if (this._isListening) {\n            return;\n        }\n\n        this._isListening = true;\n\n        window.addEventListener('message', this._handleMessage);\n    }\n\n    stopListen(): void {\n        if (!this._isListening) {\n            return;\n        }\n\n        this._isListening = false;\n\n        window.removeEventListener('message', this._handleMessage);\n    }\n\n    addListener<TType extends keyof TEventMap>(type: TType, listener: (event: TEventMap[TType]) => void): void {\n        let listeners = this._listeners[type];\n\n        if (!listeners) {\n            this._listeners[type] = listeners = [];\n        }\n\n        listeners.push(listener);\n    }\n\n    removeListener<TType extends keyof TEventMap>(type: TType, listener: (event: TEventMap[TType]) => void): void {\n        const listeners = this._listeners[type];\n\n        if (!listeners) {\n            return;\n        }\n\n        const index = listeners.indexOf(listener);\n\n        if (index >= 0) {\n            listeners.splice(index, 1);\n        }\n    }\n\n    trigger<TType extends keyof TEventMap>(event: TEventMap[TType]): void {\n        const listeners = this._listeners[event.type];\n\n        if (!listeners) {\n            return;\n        }\n\n        listeners.forEach(listener => listener(event));\n    }\n\n    @bind\n    private _handleMessage(event: MessageEvent): void {\n        if ((event.origin !== this._sourceOrigin) || !isIframeEvent(event.data, event.data.type)) {\n            return;\n        }\n\n        this.trigger(event.data);\n    }\n}\n\ntype EventListeners<TEventMap> = {\n    [key in keyof TEventMap]?: Array<(event: TEventMap[keyof TEventMap]) => void>;\n};\n","const CHECKOUT_DEFAULT_INCLUDES = [\n    'cart.lineItems.physicalItems.options',\n    'cart.lineItems.digitalItems.options',\n    'customer',\n    'payments',\n    'promotions.banners',\n];\n\nexport default CHECKOUT_DEFAULT_INCLUDES;\n","import InternalLineItem from './internal-line-item';\nimport { LineItem } from './line-item';\nimport LineItemMap from './line-item-map';\nimport mapGiftCertificateToInternalLineItem from './map-gift-certificate-to-internal-line-item';\nimport mapToInternalLineItem from './map-to-internal-line-item';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalLineItems(\n    itemMap: LineItemMap,\n    decimalPlaces: number,\n    idKey: keyof LineItem = 'id'\n): InternalLineItem[] {\n    return (Object.keys(itemMap) as Array<keyof LineItemMap>)\n        .reduce((result, key) => [\n            ...result,\n            ...(itemMap[key] as LineItem[]).map((item: any) => {\n                if (key === 'giftCertificates') {\n                    return mapGiftCertificateToInternalLineItem(item, decimalPlaces);\n                }\n\n                return mapToInternalLineItem(\n                    item,\n                    mapToInternalLineItemType(key),\n                    decimalPlaces,\n                    idKey\n                );\n            }),\n        ], [] as InternalLineItem[]);\n}\n\nfunction mapToInternalLineItemType(type: string): string {\n    switch (type) {\n        case 'physicalItems':\n            return 'ItemPhysicalEntity';\n\n        case 'digitalItems':\n            return 'ItemDigitalEntity';\n\n        case 'giftCertificates':\n            return 'ItemGiftCertificateEntity';\n\n        default:\n            return '';\n    }\n}\n","import { AmountTransformer } from '../common/utility';\n\nimport InternalLineItem from './internal-line-item';\nimport { GiftCertificateItem } from './line-item';\n\nexport default function mapGiftCertificateToInternalLineItem(\n    item: GiftCertificateItem,\n    decimalPlaces: number\n): InternalLineItem {\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: item.id,\n        imageUrl: '',\n        name: item.name,\n        amount: item.amount,\n        amountAfterDiscount: item.amount,\n        discount: 0,\n        integerAmount: amountTransformer.toInteger(item.amount),\n        integerAmountAfterDiscount: amountTransformer.toInteger(item.amount),\n        integerDiscount: 0,\n        quantity: 1,\n        sender: item.sender,\n        recipient: item.recipient,\n        type: 'ItemGiftCertificateEntity',\n        attributes: [],\n        variantId: null,\n    };\n}\n","export const INTERNAL_USE_ONLY = 'This API endpoint is for internal use only and may change in the future';\n","/**\n * Decorates a class or a method by binding all its prototype methods or itself\n * to the calling instance respectively.\n */\nexport default function bindDecorator<T extends Method>(target: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T>;\nexport default function bindDecorator<T extends Constructor<object>>(target: T): T;\nexport default function bindDecorator(target: any, key?: any, descriptor?: any): any {\n    if (!key || !descriptor) {\n        return bindClassDecorator(target);\n    }\n\n    return bindMethodDecorator(target, key, descriptor);\n}\n\n/**\n * Decorates a class by binding all its prototype methods to the calling\n * instance.\n */\nexport function bindClassDecorator<T extends Constructor<object>>(target: T): T {\n    const decoratedTarget = class extends target {};\n\n    Object.getOwnPropertyNames(target.prototype)\n        .forEach(key => {\n            const descriptor = Object.getOwnPropertyDescriptor(target.prototype, key);\n\n            if (!descriptor || key === 'constructor') {\n                return;\n            }\n\n            Object.defineProperty(\n                decoratedTarget.prototype,\n                key,\n                bindMethodDecorator(target.prototype, key, descriptor)\n            );\n        });\n\n    return decoratedTarget;\n}\n\n/**\n * Decorates a method by binding it to the calling instance.\n */\nexport function bindMethodDecorator<T extends Method>(target: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T> {\n    if (typeof descriptor.value !== 'function') {\n        return descriptor;\n    }\n\n    let method: T = descriptor.value;\n\n    return {\n        get() {\n            const boundMethod = method.bind(this);\n\n            Object.defineProperty(this, key, {\n                ...descriptor,\n                value: boundMethod,\n            });\n\n            return boundMethod;\n        },\n        set(value) {\n            method = value;\n        },\n    };\n}\n\nexport type Constructor<T> = new (...args: any[]) => T;\nexport type Method = (...args: any[]) => any;\n","module.exports = require(\"reselect\");","export enum CheckoutIncludes {\n    AvailableShippingOptions = 'consignments.availableShippingOptions',\n    PhysicalItemsCategoryNames = 'cart.lineItems.physicalItems.categoryNames',\n    DigitalItemsCategoryNames = 'cart.lineItems.digitalItems.categoryNames',\n}\n\nexport default interface CheckoutParams {\n    include?: CheckoutIncludes[];\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\nimport { GooglePayCreator } from '../googlepay';\n\nimport {\n    BraintreeClientCreator,\n    BraintreeDataCollectorCreator,\n    BraintreeHostWindow,\n    BraintreePaypalCheckoutCreator,\n    BraintreePaypalCreator,\n    BraintreeThreeDSecureCreator,\n    BraintreeVisaCheckoutCreator,\n} from './braintree';\n\nexport default class BraintreeScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: BraintreeHostWindow = window\n    ) {}\n\n    loadClient(): Promise<BraintreeClientCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/client.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.client) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.client;\n            });\n    }\n\n    load3DS(): Promise<BraintreeThreeDSecureCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/three-d-secure.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.threeDSecure) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.threeDSecure;\n            });\n    }\n\n    loadDataCollector(): Promise<BraintreeDataCollectorCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/data-collector.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.dataCollector) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.dataCollector;\n            });\n    }\n\n    loadPaypal(): Promise<BraintreePaypalCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/paypal.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.paypal) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.paypal;\n            });\n    }\n\n    loadPaypalCheckout(): Promise<BraintreePaypalCheckoutCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/paypal-checkout.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.paypalCheckout) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.paypalCheckout;\n            });\n    }\n\n    loadVisaCheckout(): Promise<BraintreeVisaCheckoutCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/visa-checkout.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.visaCheckout) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.visaCheckout;\n            });\n    }\n\n    loadGooglePayment(): Promise<GooglePayCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/google-payment.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.googlePayment) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.googlePayment;\n            });\n    }\n}\n","import { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\n\nimport {\n    BraintreeClient,\n    BraintreeDataCollector,\n    BraintreeModule,\n    BraintreePaypal,\n    BraintreePaypalCheckout,\n    BraintreeThreeDSecure,\n    BraintreeVisaCheckout,\n    GooglePayBraintreeSDK,\n} from './braintree';\nimport BraintreeScriptLoader from './braintree-script-loader';\n\nexport default class BraintreeSDKCreator {\n    private _client?: Promise<BraintreeClient>;\n    private _3ds?: Promise<BraintreeThreeDSecure>;\n    private _paypal?: Promise<BraintreePaypal>;\n    private _paypalCheckout?: Promise<BraintreePaypalCheckout>;\n    private _clientToken?: string;\n    private _visaCheckout?: Promise<BraintreeVisaCheckout>;\n    private _dataCollectors: {\n        default?: Promise<BraintreeDataCollector>;\n        paypal?: Promise<BraintreeDataCollector>;\n    } = {};\n    private _googlePay?: Promise<GooglePayBraintreeSDK>;\n\n    constructor(\n        private _braintreeScriptLoader: BraintreeScriptLoader\n    ) {}\n\n    initialize(clientToken: string) {\n        this._clientToken = clientToken;\n    }\n\n    getClient(): Promise<BraintreeClient> {\n        if (!this._clientToken) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!this._client) {\n            this._client = this._braintreeScriptLoader.loadClient()\n                .then(client => client.create({ authorization: this._clientToken }));\n        }\n\n        return this._client;\n    }\n\n    getPaypal(): Promise<BraintreePaypal> {\n        if (!this._paypal) {\n            this._paypal = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadPaypal(),\n            ])\n            .then(([client, paypal]) => paypal.create({ client }));\n        }\n\n        return this._paypal;\n    }\n\n    getPaypalCheckout(): Promise<BraintreePaypalCheckout> {\n        if (!this._paypalCheckout) {\n            this._paypalCheckout = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadPaypalCheckout(),\n            ])\n                .then(([client, paypalCheckout]) => paypalCheckout.create({ client }));\n        }\n\n        return this._paypalCheckout;\n    }\n\n    get3DS(): Promise<BraintreeThreeDSecure> {\n        if (!this._3ds) {\n            this._3ds = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.load3DS(),\n            ])\n            .then(([client, threeDSecure]) => threeDSecure.create({ client }));\n        }\n\n        return this._3ds;\n    }\n\n    getDataCollector(options?: { paypal: boolean }): Promise<BraintreeDataCollector> {\n        const cacheKey = options && options.paypal ? 'paypal' : 'default';\n        let cached = this._dataCollectors[cacheKey];\n\n        if (!cached) {\n            cached = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadDataCollector(),\n            ])\n            .then(([client, dataCollector]) => dataCollector.create({ client, kount: true, ...options }))\n            .catch(error => {\n                if (error && error.code === 'DATA_COLLECTOR_KOUNT_NOT_ENABLED') {\n                    return { deviceData: undefined, teardown: () => Promise.resolve() };\n                }\n\n                throw error;\n            });\n\n            this._dataCollectors[cacheKey] = cached;\n        }\n\n        return cached;\n    }\n\n    getVisaCheckout(): Promise<BraintreeVisaCheckout> {\n        if (!this._visaCheckout) {\n            this._visaCheckout = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadVisaCheckout(),\n            ])\n            .then(([client, visaCheckout]) => visaCheckout.create({ client }));\n        }\n\n        return this._visaCheckout;\n    }\n\n    getGooglePaymentComponent(): Promise<GooglePayBraintreeSDK> {\n        if (!this._googlePay) {\n            this._googlePay = Promise.all ([\n                this.getClient(),\n                this._braintreeScriptLoader.loadGooglePayment(),\n            ])\n                .then(([client, googlePay]) => googlePay.create({ client }));\n        }\n\n        return this._googlePay;\n    }\n\n    teardown(): Promise<void> {\n        return Promise.all([\n            this._teardown(this._3ds),\n            this._teardown(this._dataCollectors.default),\n            this._teardown(this._dataCollectors.paypal),\n            this._teardown(this._visaCheckout),\n            this._teardown(this._googlePay),\n        ]).then(() => {\n            this._3ds = undefined;\n            this._visaCheckout = undefined;\n            this._dataCollectors = {};\n            this._googlePay = undefined;\n        });\n    }\n\n    private _teardown(module?: Promise<BraintreeModule>) {\n        return module ?\n            module.then(mod => mod.teardown()) :\n            Promise.resolve();\n    }\n}\n","import { AmountTransformer } from '../common/utility';\n\nimport InternalLineItem from './internal-line-item';\nimport { DigitalItem, LineItem } from './line-item';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalLineItem(\n    item: LineItem,\n    type: string,\n    decimalPlaces: number,\n    idKey: keyof LineItem = 'id'\n): InternalLineItem {\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: (item[idKey] as string | number),\n        imageUrl: item.imageUrl,\n        amount: item.extendedListPrice,\n        amountAfterDiscount: item.extendedSalePrice,\n        discount: item.discountAmount,\n        integerAmount: amountTransformer.toInteger(item.extendedListPrice),\n        integerAmountAfterDiscount: amountTransformer.toInteger(item.extendedSalePrice),\n        integerDiscount: amountTransformer.toInteger(item.discountAmount),\n        downloadsPageUrl: (item as DigitalItem).downloadPageUrl,\n        name: item.name,\n        quantity: item.quantity,\n        brand: item.brand,\n        categoryNames: item.categoryNames,\n        variantId: item.variantId,\n        productId: item.productId,\n        attributes: (item.options || []).map(option => ({\n            name: option.name,\n            value: option.value,\n        })),\n        addedByPromotion: item.addedByPromotion,\n        type,\n    };\n}\n","module.exports = require(\"iframe-resizer\");","export default function isPrivate(key: string): boolean {\n    return `${key}`.indexOf('$$') === 0 || `${key}`.indexOf('_') === 0;\n}\n","import StandardError from './standard-error';\n\nexport enum NotInitializedErrorType {\n    CheckoutButtonNotInitialized,\n    CustomerNotInitialized,\n    PaymentNotInitialized,\n    ShippingNotInitialized,\n    SpamProtectionNotInitialized,\n}\n\nexport default class NotInitializedError extends StandardError {\n    constructor(\n        public subtype: NotInitializedErrorType\n    ) {\n        super(getErrorMessage(subtype));\n\n        this.name = 'NotInitializedError';\n        this.type = 'not_initialized';\n    }\n}\n\nfunction getErrorMessage(type: NotInitializedErrorType): string {\n    switch (type) {\n    case NotInitializedErrorType.CustomerNotInitialized:\n        return 'Unable to proceed because the customer step of checkout has not been initialized.';\n\n    case NotInitializedErrorType.PaymentNotInitialized:\n        return 'Unable to proceed because the payment step of checkout has not been initialized.';\n\n    case NotInitializedErrorType.ShippingNotInitialized:\n        return 'Unable to proceed because the shipping step of checkout has not been initialized.';\n\n    case NotInitializedErrorType.SpamProtectionNotInitialized:\n        return 'Unable to proceed because the checkout spam protection has not been initialized.';\n\n    default:\n        return 'Unable to proceed because the required component has not been initialized.';\n    }\n}\n","import { createErrorAction, Action } from '@bigcommerce/data-store';\nimport { concat, of, throwError, Observable } from 'rxjs';\n\nexport default function throwErrorAction<TPayload, TMeta, TType extends string>(\n    type: TType,\n    error?: TPayload,\n    meta?: TMeta\n): Observable<Action<TPayload, TMeta, TType>> {\n    if (isErrorAction(error)) {\n        return concat(of(error), throwError(createErrorAction(type, error.payload, meta)));\n    }\n\n    return throwError(createErrorAction(type, error, meta));\n}\n\nfunction isErrorAction(action: any): action is Action {\n    return action && action.type && action.error;\n}\n","export default class AmountTransformer {\n    constructor(private _decimalPlaces: number) {}\n\n    toInteger(amount: number): number {\n        return Math.round(amount * Math.pow(10, this._decimalPlaces));\n    }\n}\n","import { InvalidArgumentError } from '../error/errors';\n\nimport Url from './url';\n\nexport default function parseUrl(url: string): Url {\n    if (!/^(https?:)?\\/\\//.test(url)) {\n        throw new InvalidArgumentError('The provided URL must be absolute.');\n    }\n\n    // new URL() is not supported in IE11, use anchor tag instead\n    const anchor = document.createElement('a');\n\n    anchor.href = url;\n\n    return {\n        hash: anchor.hash,\n        hostname: anchor.hostname,\n        href: anchor.href,\n        origin: anchor.origin,\n        pathname: anchor.pathname,\n        port: anchor.port,\n        protocol: anchor.protocol,\n        search: anchor.search,\n    };\n}\n","import cacheAction from './cache-action';\nimport isActionOptions from './is-action-options';\n\nexport default function cachableActionDecorator<TMethod extends (...args: any[]) => any>(\n    target: object,\n    key: string,\n    descriptor: TypedPropertyDescriptor<TMethod>\n): TypedPropertyDescriptor<TMethod> {\n    const memoizedMethods = new WeakMap<object, { [key: string]: TMethod }>();\n\n    function decorateMethod(this: object, method: TMethod): TMethod {\n        return ((...args: any[]) => {\n            const lastArg = args[args.length - 1];\n            const { useCache } = isActionOptions(lastArg) ? lastArg : { useCache: false };\n\n            if (!useCache) {\n                return method.call(this, ...args);\n            }\n\n            const instanceMethods = memoizedMethods.get(this) || {};\n\n            if (!memoizedMethods.get(this)) {\n                memoizedMethods.set(this, instanceMethods);\n            }\n\n            if (!instanceMethods[key]) {\n                instanceMethods[key] = cacheAction(method);\n            }\n\n            return instanceMethods[key].call(this, ...args);\n        }) as TMethod;\n    }\n\n    return {\n        get() {\n            if (typeof descriptor.value !== 'function') {\n                return descriptor.value;\n            }\n\n            const value = decorateMethod.call(this, descriptor.value);\n\n            Object.defineProperty(this, key, { ...descriptor, value });\n\n            return value;\n        },\n    };\n}\n","import ActionOptions from './action-options';\n\nexport default function isActionOptions(param: any): param is ActionOptions {\n    return param && typeof param.useCache === 'boolean';\n}\n","import { Action, ThunkAction } from '@bigcommerce/data-store';\nimport { memoize } from 'lodash';\nimport { from, Observable } from 'rxjs';\nimport { shareReplay } from 'rxjs/operators';\n\nimport { CacheKeyResolver } from '../utility';\n\nexport default function cacheAction<TFunction extends CreateActionFn>(\n    fn: TFunction\n): TFunction {\n    const resolver = new CacheKeyResolver();\n\n    function decoratedFn(this: any, ...args: any[]) {\n        const action = fn.call(this, ...args);\n\n        if (action instanceof Observable) {\n            return from(action).pipe(shareReplay());\n        }\n\n        if (typeof action === 'function') {\n            return memoize(store => from(action(store)).pipe(shareReplay()));\n        }\n\n        return action;\n    }\n\n    return memoize(\n        decoratedFn as TFunction,\n        (...args) => resolver.getKey(...args)\n    );\n}\n\ntype CreateActionFn = (...args: any[]) => Observable<Action> | ThunkAction<Action> | Action;\n","import { isPlainObject, omitBy, transform } from 'lodash';\n\nexport default function omitDeep(object: any, predicate: (value: any, key: string) => boolean): any {\n    if (Array.isArray(object)) {\n        return object.map(value => omitDeep(value, predicate));\n    }\n\n    if (isPlainObject(object)) {\n        return transform(omitBy(object, predicate), (result, value, key) => {\n            result[key] = omitDeep(value, predicate);\n        }, {});\n    }\n\n    return object;\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, merge, of, Observable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType, StandardError } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { ConfigActionCreator } from '../config';\n\nimport { CheckoutRequestBody } from './checkout';\nimport { CheckoutActionType, LoadCheckoutAction, UpdateCheckoutAction } from './checkout-actions';\nimport CheckoutRequestSender from './checkout-request-sender';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\nexport default class CheckoutActionCreator {\n    constructor(\n        private _checkoutRequestSender: CheckoutRequestSender,\n        private _configActionCreator: ConfigActionCreator\n    ) {}\n\n    loadCheckout(id: string, options?: RequestOptions): Observable<LoadCheckoutAction> {\n        return concat(\n            of(createAction(CheckoutActionType.LoadCheckoutRequested)),\n            merge(\n                this._configActionCreator.loadConfig({ ...options, useCache: true }),\n                defer(() => this._checkoutRequestSender.loadCheckout(id, options)\n                    .then(({ body }) => createAction(CheckoutActionType.LoadCheckoutSucceeded, body)))\n            )\n        ).pipe(\n            catchError(error => throwErrorAction(CheckoutActionType.LoadCheckoutFailed, error))\n        );\n    }\n\n    loadDefaultCheckout(options?: RequestOptions): ThunkAction<LoadCheckoutAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(CheckoutActionType.LoadCheckoutRequested)),\n            this._configActionCreator.loadConfig(),\n            defer(() => {\n                const state = store.getState();\n                const context = state.config.getContextConfig();\n\n                if (!context || !context.checkoutId) {\n                    throw new StandardError('Unable to load checkout: no cart is available');\n                }\n\n                return this._checkoutRequestSender.loadCheckout(context.checkoutId, options)\n                    .then(({ body }) => createAction(CheckoutActionType.LoadCheckoutSucceeded, body));\n            })\n        ).pipe(\n            catchError(error => throwErrorAction(CheckoutActionType.LoadCheckoutFailed, error))\n        );\n    }\n\n    updateCheckout(\n        body: CheckoutRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateCheckoutAction, InternalCheckoutSelectors> {\n        return store => new Observable(observer => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(CheckoutActionType.UpdateCheckoutRequested));\n\n            this._checkoutRequestSender.updateCheckout(checkout.id, body, options)\n                .then(({ body }) => {\n                    observer.next(createAction(CheckoutActionType.UpdateCheckoutSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CheckoutActionType.UpdateCheckoutFailed, response));\n                });\n        });\n    }\n\n    loadCurrentCheckout(options?: RequestOptions): ThunkAction<LoadCheckoutAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            return this.loadCheckout(checkout.id, options);\n        };\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { AddressRequestBody } from '../address';\nimport { Cart } from '../cart';\nimport { InternalCheckoutSelectors, ReadableCheckoutStore } from '../checkout';\nimport { CheckoutIncludes } from '../checkout/checkout-params';\nimport CheckoutRequestSender from '../checkout/checkout-request-sender';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport Consignment, {\n    ConsignmentsRequestBody,\n    ConsignmentAssignmentRequestBody,\n    ConsignmentCreateRequestBody,\n    ConsignmentLineItem,\n    ConsignmentRequestBody,\n    ConsignmentShippingOptionRequestBody,\n    ConsignmentUpdateRequestBody\n} from './consignment';\nimport {\n    ConsignmentActionType,\n    CreateConsignmentsAction,\n    DeleteConsignmentAction,\n    LoadShippingOptionsAction,\n    UpdateConsignmentAction,\n    UpdateShippingOptionAction,\n} from './consignment-actions';\nimport ConsignmentRequestSender from './consignment-request-sender';\n\nexport default class ConsignmentActionCreator {\n    constructor(\n        private _consignmentRequestSender: ConsignmentRequestSender,\n        private _checkoutRequestSender: CheckoutRequestSender\n    ) {}\n\n    unassignItemsByAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<DeleteConsignmentAction | UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const existingConsignment = state.consignments.getConsignmentByAddress(consignment.shippingAddress);\n\n            if (!existingConsignment) {\n                throw new InvalidArgumentError('No consignment found for the specified address');\n            }\n\n            const lineItems = this._removeLineItems(\n                consignment.lineItems,\n                existingConsignment,\n                state.cart.getCart()\n            );\n\n            if (!lineItems.length) {\n                return this.deleteConsignment(existingConsignment.id, options)(store);\n            }\n\n            return this.updateConsignment({\n                id: existingConsignment.id,\n                shippingAddress: consignment.shippingAddress,\n                lineItems,\n            }, options)(store);\n        };\n    }\n\n    assignItemsByAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateConsignmentAction | CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const existingConsignment = state.consignments.getConsignmentByAddress(consignment.shippingAddress);\n\n            return this._createOrUpdateConsignment({\n                id: existingConsignment && existingConsignment.id,\n                shippingAddress: consignment.shippingAddress,\n                lineItems: this._addLineItems(\n                    consignment.lineItems,\n                    existingConsignment,\n                    state.cart.getCart()\n                ),\n            }, options)(store);\n        };\n    }\n\n    selectShippingOption(\n        id: string,\n        options?: RequestOptions\n    ): ThunkAction<UpdateShippingOptionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateShippingOptionAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n            const consignments = state.consignments.getConsignments();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            if (!consignments || !consignments.length) {\n                throw new MissingDataError(MissingDataErrorType.MissingConsignments);\n            }\n\n            const consignmentUpdateBody = {\n                id: consignments[0].id,\n                shippingOptionId: id,\n            };\n\n            const consignmentMeta = {\n                id: consignments[0].id,\n            };\n\n            observer.next(createAction(ConsignmentActionType.UpdateShippingOptionRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignmentUpdateBody, options)\n                .then(({ body }) => {\n                    observer.next(createAction(\n                        ConsignmentActionType.UpdateShippingOptionSucceeded,\n                        body,\n                        consignmentMeta\n                    ));\n\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(\n                        ConsignmentActionType.UpdateShippingOptionFailed,\n                        response,\n                        consignmentMeta\n                    ));\n                });\n        });\n    }\n\n    loadShippingOptions(options?: RequestOptions): ThunkAction<LoadShippingOptionsAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<LoadShippingOptionsAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.LoadShippingOptionsRequested));\n\n            this._checkoutRequestSender.loadCheckout(checkout.id, {\n                ...options,\n                params: {\n                    include: [CheckoutIncludes.AvailableShippingOptions],\n                },\n            })\n            .then(({ body }) => {\n                observer.next(createAction(ConsignmentActionType.LoadShippingOptionsSucceeded, body));\n                observer.complete();\n            })\n            .catch(response => {\n                observer.error(createErrorAction(ConsignmentActionType.LoadShippingOptionsFailed, response));\n            });\n        });\n    }\n\n    updateAddress(\n        address: AddressRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<CreateConsignmentsAction | UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return store => {\n            const consignment = this._getConsignmentRequestBody(address, store);\n            const consignments = store.getState().consignments.getConsignments();\n\n            if (consignments && consignments.length) {\n                (consignment as ConsignmentUpdateRequestBody).id = consignments[0].id;\n            }\n\n            return this._createOrUpdateConsignment(consignment, options)(store);\n        };\n    }\n\n    createConsignments(\n        consignments: ConsignmentsRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<CreateConsignmentsAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.CreateConsignmentsRequested));\n\n            this._consignmentRequestSender.createConsignments(checkout.id, consignments, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.CreateConsignmentsSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.CreateConsignmentsFailed, response));\n                });\n        });\n    }\n\n    updateConsignment(\n        consignment: ConsignmentUpdateRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateConsignmentAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const consignmentMeta = { id: consignment.id };\n\n            observer.next(createAction(ConsignmentActionType.UpdateConsignmentRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignment, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.UpdateConsignmentSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.UpdateConsignmentFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    deleteConsignment(\n        consignmentId: string,\n        options?: RequestOptions\n    ): ThunkAction<DeleteConsignmentAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<DeleteConsignmentAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n            const consignmentMeta = { id: consignmentId };\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.DeleteConsignmentRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.deleteConsignment(checkout.id, consignmentId, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.DeleteConsignmentSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.DeleteConsignmentFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    updateShippingOption(\n        consignment: ConsignmentShippingOptionRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateShippingOptionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateShippingOptionAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const consignmentMeta = { id: consignment.id };\n\n            observer.next(createAction(ConsignmentActionType.UpdateShippingOptionRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignment, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.UpdateShippingOptionSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.UpdateShippingOptionFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    private _createOrUpdateConsignment(\n        consignment: ConsignmentCreateRequestBody | ConsignmentUpdateRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateConsignmentAction | CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return store => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            if (this._isUpdateConsignmentRequest(consignment)) {\n                return this.updateConsignment(consignment, options)(store);\n            }\n\n            return this.createConsignments([consignment], options)(store);\n        };\n    }\n\n    private _getConsignmentRequestBody(\n        shippingAddress: AddressRequestBody,\n        store: ReadableCheckoutStore\n    ): ConsignmentRequestBody {\n        const state = store.getState();\n        const cart = state.cart.getCart();\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        return {\n            shippingAddress,\n            lineItems: (cart.lineItems && cart.lineItems.physicalItems || [])\n                .map(item => ({\n                    itemId: item.id,\n                    quantity: item.quantity,\n                })\n            ),\n        };\n    }\n\n    private _removeLineItems(\n        lineItems: ConsignmentLineItem[],\n        consignment: Consignment,\n        cart?: Cart\n    ): ConsignmentLineItem[] {\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        return this._hydrateLineItems(consignment.lineItemIds, cart).map(existingItem => {\n            const sharedItem = lineItems.find(lineItem => lineItem.itemId === existingItem.itemId);\n\n            return {\n                ...existingItem,\n                quantity: sharedItem ? (existingItem.quantity - sharedItem.quantity) : existingItem.quantity,\n            };\n        }).filter(lineItem => lineItem.quantity > 0);\n    }\n\n    private _addLineItems(\n        lineItems: ConsignmentLineItem[],\n        consignment?: Consignment,\n        cart?: Cart\n    ): ConsignmentLineItem[] {\n        if (!consignment) {\n            return lineItems;\n        }\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        return lineItems\n            .concat(this._hydrateLineItems(consignment.lineItemIds, cart))\n            .filter(lineItem => lineItem.quantity > 0);\n    }\n\n    private _hydrateLineItems(lineItemIds: string[], cart: Cart): ConsignmentLineItem[] {\n        return lineItemIds.map(itemId => {\n            const item = cart.lineItems.physicalItems.find(lineItem => lineItem.id === itemId );\n\n            return {\n                itemId,\n                quantity: item ? item.quantity : 0,\n            };\n        });\n    }\n\n    private _isUpdateConsignmentRequest(\n        request: ConsignmentRequestBody\n    ): request is ConsignmentUpdateRequestBody {\n        const updateRequest = request as ConsignmentUpdateRequestBody;\n\n        return !!updateRequest.id;\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout } from '../checkout';\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nimport { ConsignmentsRequestBody, ConsignmentUpdateRequestBody } from './consignment';\n\nconst DEFAULT_PARAMS = {\n    include: [\n        'consignments.availableShippingOptions',\n        'cart.lineItems.physicalItems.options',\n        'cart.lineItems.digitalItems.options',\n        'customer',\n        'promotions.banners',\n    ].join(','),\n};\n\nexport default class ConsignmentRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    createConsignments(checkoutId: string, consignments: ConsignmentsRequestBody, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, { body: consignments, params: DEFAULT_PARAMS, headers, timeout });\n    }\n\n    updateConsignment(checkoutId: string, consignment: ConsignmentUpdateRequestBody, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const { id, ...body } = consignment;\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.put(url, { params: DEFAULT_PARAMS, body, headers, timeout });\n    }\n\n    deleteConsignment(checkoutId: string, consignmentId: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments/${consignmentId}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.delete(url, { params: DEFAULT_PARAMS, headers, timeout });\n    }\n}\n","export default function getCallbackUrl(origin: string): string {\n    return `${window.location.origin}/checkout.php?action=set_external_checkout&provider=masterpass&gateway=stripe&origin=${origin}`;\n}\n","import InternalShippingOption from './internal-shipping-option';\nimport ShippingOption from './shipping-option';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalShippingOption(option: ShippingOption, isSelected: boolean): InternalShippingOption {\n    return {\n        description: option.description,\n        module: option.type,\n        price: option.cost,\n        id: option.id,\n        selected: isSelected,\n        isRecommended: option.isRecommended,\n        imageUrl: option.imageUrl,\n        transitTime: option.transitTime,\n    };\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport RequestError from './request-error';\n\nexport default class UnrecoverableError extends RequestError {\n    constructor(response: Response, message?: string) {\n        super(response, {\n            message: message || 'An unexpected error has occurred. The checkout process cannot continue as a result.',\n        });\n\n        this.name = 'UnrecoverableError';\n        this.type = 'unrecoverable';\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { InternalErrorResponseBody } from '../error-response-body';\n\nimport RequestError from './request-error';\n\nexport default function mapFromInternalErrorResponse(\n    response: Response<InternalErrorResponseBody>,\n    message?: string\n): RequestError {\n    const { body } = response;\n    const { errors = [] } = body;\n\n    return new RequestError(response, {\n        message: joinErrors(errors) || body.detail || body.title || message,\n        errors: errors.length ?\n            errors.map(message => ({ code: body.type, message })) :\n            [{ code: body.type, message: body.detail || body.title }],\n    });\n}\n\nfunction joinErrors(errors: string[]): string | undefined {\n    return errors.reduce((result: string[], error) => {\n        if (error) {\n            return [...result, error];\n        }\n\n        return result;\n    }, []).join(' ');\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { PaymentErrorResponseBody } from '../error-response-body';\n\nimport RequestError from './request-error';\n\nexport default function mapFromPaymentErrorResponse(\n    response: Response<PaymentErrorResponseBody>,\n    message?: string\n): RequestError {\n    const { body } = response;\n    const { errors = [] } = body;\n\n    return new RequestError(response, {\n        message: joinErrors(errors) || message,\n        errors,\n    });\n}\n\nfunction joinErrors(errors: Array<{ code: string; message?: string }>): string | undefined {\n    if (!Array.isArray(errors)) {\n        return;\n    }\n\n    return errors.reduce((result: string[], error) => {\n        if (error && error.message) {\n            return [...result, error.message];\n        }\n\n        return result;\n    }, []).join(' ');\n}\n","import { Response } from '@bigcommerce/request-sender';\nimport { last } from 'lodash';\n\nimport ErrorResponseBody, {\n    InternalErrorResponseBody,\n    StorefrontErrorResponseBody\n} from './error-response-body';\nimport { RequestError, TimeoutError } from './errors';\nimport mapFromInternalErrorResponse from './errors/map-from-internal-error-response';\nimport mapFromPaymentErrorResponse from './errors/map-from-payment-error-response';\nimport mapFromStorefrontErrorResponse from './errors/map-from-storefront-error-response';\n\nexport default class RequestErrorFactory {\n    private _factoryMethods: { [key: string]: ErrorFactoryMethod } = {};\n\n    constructor() {\n        this.register('default', (response, message) => new RequestError(response, { message }));\n        this.register('internal', (response, message) => mapFromInternalErrorResponse(response, message));\n        this.register('storefront', (response, message) => mapFromStorefrontErrorResponse(response, message));\n        this.register('payment', (response, message) => mapFromPaymentErrorResponse(response, message));\n        this.register('timeout', response => new TimeoutError(response));\n    }\n\n    register(type: string, factoryMethod: ErrorFactoryMethod): void {\n        this._factoryMethods[type] = factoryMethod;\n    }\n\n    createError(response: Response, message?: string): RequestError {\n        const factoryMethod = this._factoryMethods[this._getType(response)] || this._factoryMethods.default;\n\n        return factoryMethod(response, message);\n    }\n\n    private _getType(response: Response<ErrorResponseBody>): string {\n        if (response.status === 0) {\n            return 'timeout';\n        }\n\n        if (this._isStorefrontErrorResponseBody(response.body)) {\n            return 'storefront';\n        }\n\n        if (this._isInternalErrorResponseBody(response.body)) {\n            const internalType = last(response.body.type.split('/'));\n\n            return internalType && this._factoryMethods[internalType] ?\n                internalType :\n                'internal';\n        }\n\n        const error = last(response.body && response.body.errors);\n\n        if (error && error.code && this._factoryMethods[error.code]) {\n            return error.code;\n        }\n\n        return 'payment';\n    }\n\n    private _isStorefrontErrorResponseBody(\n        errorResponse: ErrorResponseBody\n    ): errorResponse is StorefrontErrorResponseBody {\n        const storefrontErrorResponse = errorResponse as StorefrontErrorResponseBody;\n\n        return !this._isInternalErrorResponseBody(errorResponse) &&\n            typeof storefrontErrorResponse.title === 'string' &&\n            typeof storefrontErrorResponse.type === 'string' &&\n            typeof storefrontErrorResponse.status === 'number' &&\n            typeof storefrontErrorResponse.detail === 'string';\n    }\n\n    private _isInternalErrorResponseBody(\n        errorResponse: ErrorResponseBody\n    ): errorResponse is InternalErrorResponseBody {\n        const internalErrorResponse = errorResponse as InternalErrorResponseBody;\n\n        return typeof internalErrorResponse.errors === 'object' &&\n            typeof internalErrorResponse.title === 'string' &&\n            typeof internalErrorResponse.type === 'string' &&\n            typeof internalErrorResponse.status === 'number';\n    }\n}\n\nexport type ErrorFactoryMethod = (response: Response, message?: string) => RequestError;\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { StorefrontErrorResponseBody } from '../error-response-body';\n\nimport RequestError from './request-error';\n\nexport default function mapFromStorefrontErrorResponse(\n    response: Response<StorefrontErrorResponseBody>,\n    message?: string\n): RequestError<StorefrontErrorResponseBody> {\n    const { body } = response;\n\n    return new RequestError(response, {\n        message: message || body.detail || body.title,\n        errors: [{\n            code: body.code || body.type,\n            message: body.detail || body.title,\n        }],\n    });\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { omitDeep } from '../utility';\n\nimport { ClearErrorAction, ErrorActionType } from './error-actions';\n\nexport default function clearErrorReducer<TState extends { [key: string]: any }, TAction extends Action>(\n    state: TState,\n    action: TAction\n): TState | undefined {\n    if (isClearErrorAction(action)) {\n        return omitDeep(state, value => value === action.payload);\n    }\n\n    return state;\n}\n\nfunction isClearErrorAction(action: Action): action is ClearErrorAction {\n    return action.type === ErrorActionType.ClearError;\n}\n","import isEqual from './is-equal';\n\n/**\n * Replace the current value with a new value if the former is different to the\n * latter.\n */\nexport default function replace<T>(currentValue: T, newValue?: T): T {\n    if (newValue === undefined || isEqual(currentValue, newValue)) {\n        return currentValue;\n    }\n\n    return newValue;\n}\n","import isEqual from './is-equal';\n\n/**\n * Set a new value to an object under a key if the new value is different to the\n * current value of the key.\n */\nexport default function objectSet<T extends { [key: string]: any }, K extends keyof T>(\n    object: T | undefined,\n    key: K,\n    value: T[K]\n): T {\n    if (object && object.hasOwnProperty(key) && isEqual(object[key], value)) {\n        return object;\n    }\n\n    return {\n        ...object as any,\n        [key]: value,\n    };\n}\n","import BillingAddress from './billing-address';\n\nexport default interface BillingAddressState {\n    data?: BillingAddress;\n    errors: BillingAddressErrorsState;\n    statuses: BillingAddressStatusesState;\n}\n\nexport interface BillingAddressErrorsState {\n    loadError?: Error;\n    updateError?: Error;\n    continueAsGuestError?: Error;\n}\n\nexport interface BillingAddressStatusesState {\n    isLoading?: boolean;\n    isUpdating?: boolean;\n    isContinuingAsGuest?: boolean;\n}\n\nexport const DEFAULT_STATE: BillingAddressState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { objectSet, replace } from '../common/utility';\nimport { OrderAction, OrderActionType } from '../order';\n\nimport BillingAddress from './billing-address';\nimport { BillingAddressAction, BillingAddressActionType } from './billing-address-actions';\nimport BillingAddressState, { BillingAddressErrorsState, BillingAddressStatusesState, DEFAULT_STATE } from './billing-address-state';\n\nexport default function billingAddressReducer(\n    state: BillingAddressState = DEFAULT_STATE,\n    action: Action\n): BillingAddressState {\n    const reducer = combineReducers<BillingAddressState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: BillingAddress | undefined,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddress | undefined {\n    switch (action.type) {\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case OrderActionType.LoadOrderSucceeded:\n        return replace(data, action.payload && action.payload.billingAddress);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: BillingAddressErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddressErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    case BillingAddressActionType.UpdateBillingAddressRequested:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n        return objectSet(errors, 'updateError', undefined);\n\n    case BillingAddressActionType.UpdateBillingAddressFailed:\n        return objectSet(errors, 'updateError', action.payload);\n\n    case BillingAddressActionType.ContinueAsGuestRequested:\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n        return objectSet(errors, 'continueAsGuestError', undefined);\n\n    case BillingAddressActionType.ContinueAsGuestFailed:\n        return objectSet(errors, 'continueAsGuestError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: BillingAddressStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddressStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.LoadCheckoutFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    case BillingAddressActionType.UpdateBillingAddressRequested:\n        return objectSet(statuses, 'isUpdating', true);\n\n    case BillingAddressActionType.UpdateBillingAddressFailed:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n        return objectSet(statuses, 'isUpdating', false);\n\n    case BillingAddressActionType.ContinueAsGuestRequested:\n        return objectSet(statuses, 'isContinuingAsGuest', true);\n\n    case BillingAddressActionType.ContinueAsGuestFailed:\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n        return objectSet(statuses, 'isContinuingAsGuest', false);\n\n    default:\n        return statuses;\n    }\n}\n","import { isPlainObject as lodashIsPlainObject } from 'lodash';\n\n// We need this wrapper because Lodash's version doesn't act as a type guard\nexport default function isPlainObject(value: any): value is object {\n    return lodashIsPlainObject(value);\n}\n","import { isArray } from 'lodash';\n\nimport isPlainObject from './is-plain-object';\nimport objectMerge from './object-merge';\nimport replace from './replace';\n\nexport interface ArrayReplaceOptions {\n    matchObject(objectA: any, objectB: any): boolean;\n}\n\nexport default function arrayReplace<T>(currentArray: T[] | undefined, newArray: T[], options?: ArrayReplaceOptions): T[];\nexport default function arrayReplace<T>(currentArray: T[], newArray?: T[], options?: ArrayReplaceOptions): undefined;\nexport default function arrayReplace<T>(currentArray?: T[], newArray?: T[], options?: ArrayReplaceOptions): T[] | undefined;\nexport default function arrayReplace<T>(currentArray?: T[], newArray?: T[], options?: ArrayReplaceOptions): T[] | undefined {\n    const { matchObject = (a: any, b: any) => a.id === b.id } = options || {};\n\n    if (!currentArray) {\n        return newArray;\n    }\n\n    // If the new array does not exist, or the current array is strictly equal\n    // to the new array, exit early and return the current array so that the\n    // object reference doesn't change\n    if (!newArray || currentArray === newArray) {\n        return currentArray;\n    }\n\n    // Otherwise, try to replace the items of the current array with the new\n    // array. If the item from the two arrays are the same, keep the current\n    // one. Do it recursively until all arrays are replaced.\n    let newItemCount = 0;\n\n    const countNewItem = <T>(replacedValue: T, currentValue: T, newValue: T): T => {\n        newItemCount += replacedValue === newValue && replacedValue !== currentValue ? 1 : 0;\n\n        return replacedValue;\n    };\n\n    const result = newArray.map((newItem, index) => {\n        const currentItem = currentArray && currentArray[index];\n\n        if (isPlainObject(currentItem) && isPlainObject(newItem)) {\n            if (matchObject(currentItem, newItem)) {\n                return countNewItem(\n                    objectMerge(currentItem, newItem),\n                    currentItem,\n                    newItem\n                );\n            }\n\n            return countNewItem(\n                replace(currentItem, newItem),\n                currentItem,\n                newItem\n            );\n        }\n\n        if (isArray(currentItem) && isArray(newItem)) {\n            return countNewItem(\n                arrayReplace(currentItem, newItem),\n                currentItem,\n                newItem\n            );\n        }\n\n        return countNewItem(\n            replace(currentItem, newItem),\n            currentItem,\n            newItem\n        );\n    }) as T[];\n\n    if (newItemCount === 0 && (currentArray && currentArray.length === newArray.length)) {\n        return currentArray;\n    }\n\n    if (newItemCount === newArray.length) {\n        return newArray;\n    }\n\n    return result;\n}\n","import { isArray } from 'lodash';\n\nimport arrayReplace from './array-replace';\nimport isPlainObject from './is-plain-object';\nimport objectSet from './object-set';\n\nexport default function objectMerge<T extends object>(currentObject: T, newObject?: Partial<T>): T;\nexport default function objectMerge<T extends object>(currentObject: T | undefined, newObject: Partial<T>): Partial<T>;\nexport default function objectMerge<T extends object>(currentObject?: T, newObject?: Partial<T>): T | undefined;\nexport default function objectMerge<T extends object>(currentObject?: T, newObject?: Partial<T>): T | Partial<T> | undefined {\n    if (!currentObject) {\n        return newObject;\n    }\n\n    // If the new object does not exist but the current object does, or the new\n    // object is strictly equal to the current object, return the current object\n    if (!newObject || currentObject === newObject) {\n        return currentObject;\n    }\n\n    // If both objects exist, but some values might be different, perform a merge.\n    // Retain values that are equal and only replace them with the new values if\n    // they are different.\n    return (Object.keys(newObject) as Array<keyof T>)\n        .reduce((result, key) => {\n            const currentValue = result[key];\n            const newValue = newObject[key];\n\n            if (isPlainObject(currentValue) && isPlainObject(newValue)) {\n                return objectSet(result, key, objectMerge(currentValue, newValue));\n            }\n\n            if (isArray(currentValue) && isArray(newValue)) {\n                return objectSet(result, key, arrayReplace(currentValue, newValue) as any);\n            }\n\n            return objectSet(result, key, newValue as any);\n        }, currentObject);\n}\n","import Cart from './cart';\n\nexport default interface CartState {\n    data?: Cart;\n    errors: CartErrorsState;\n    statuses: CartStatusesState;\n}\n\nexport interface CartErrorsState {\n    loadError?: Error;\n}\n\nexport interface CartStatusesState {\n    isLoading?: boolean;\n}\n\nexport const DEFAULT_STATE: CartState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { BillingAddressAction, BillingAddressActionType } from '../billing/billing-address-actions';\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\nimport { CouponAction, CouponActionType } from '../coupon/coupon-actions';\nimport { GiftCertificateAction, GiftCertificateActionType } from '../coupon/gift-certificate-actions';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping/consignment-actions';\n\nimport Cart from './cart';\nimport CartState, { CartErrorsState, CartStatusesState, DEFAULT_STATE } from './cart-state';\n\nexport default function cartReducer(\n    state: CartState = DEFAULT_STATE,\n    action: Action\n): CartState {\n    const reducer = combineReducers<CartState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Cart | undefined,\n    action: BillingAddressAction | CheckoutAction | ConsignmentAction | CouponAction | GiftCertificateAction\n): Cart | undefined {\n    switch (action.type) {\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return objectMerge(data, action.payload && action.payload.cart);\n\n    default:\n        return data;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CartStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction\n): CartStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return objectSet(statuses, 'isLoading', false);\n\n    default:\n        return statuses;\n    }\n}\n\nfunction errorsReducer(\n    errors: CartErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction\n): CartErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutButtonAction, CheckoutButtonActionType } from './checkout-button-actions';\nimport CheckoutButtonState, { CheckoutButtonDataState, CheckoutButtonErrorsState, CheckoutButtonStatusesState } from './checkout-button-state';\n\nconst DEFAULT_STATE: CheckoutButtonState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n\nconst DEFAULT_DATA_STATE: CheckoutButtonDataState = { initializedContainers: {} };\nconst DEFAULT_ERROR_STATE: CheckoutButtonErrorsState = {};\nconst DEFAULT_STATUS_STATE: CheckoutButtonStatusesState = {};\n\nexport default function checkoutButtonReducer(\n    state: CheckoutButtonState = DEFAULT_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonState {\n    if (!action.meta || !action.meta.methodId) {\n        return state;\n    }\n\n    const reducer = combineReducers<CheckoutButtonState>({\n        data: combineReducers({\n            [action.meta.methodId]: dataReducer,\n        }),\n        errors: combineReducers({\n            [action.meta.methodId]: errorsReducer,\n        }),\n        statuses: combineReducers({\n            [action.meta.methodId]: statusesReducer,\n        }),\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: CheckoutButtonDataState = DEFAULT_DATA_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonDataState {\n    switch (action.type) {\n    case CheckoutButtonActionType.InitializeButtonSucceeded:\n        if (!action.meta || !action.meta.containerId) {\n            return data;\n        }\n\n        return {\n            ...data,\n            initializedContainers: {\n                ...data.initializedContainers,\n                [action.meta.containerId]: true,\n            },\n        };\n\n    case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n        return {\n            ...data,\n            initializedContainers: {},\n        };\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: CheckoutButtonErrorsState = DEFAULT_ERROR_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonErrorsState {\n    switch (action.type) {\n    case CheckoutButtonActionType.InitializeButtonRequested:\n    case CheckoutButtonActionType.InitializeButtonSucceeded:\n        return {\n            ...errors,\n            initializeError: undefined,\n        };\n\n    case CheckoutButtonActionType.InitializeButtonFailed:\n        return {\n            ...errors,\n            initializeError: action.payload,\n        };\n\n    case CheckoutButtonActionType.DeinitializeButtonRequested:\n    case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n        return {\n            ...errors,\n            deinitializeError: undefined,\n        };\n\n    case CheckoutButtonActionType.DeinitializeButtonFailed:\n        return {\n            ...errors,\n            deinitializeError: action.payload,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CheckoutButtonStatusesState = DEFAULT_STATUS_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonStatusesState {\n    switch (action.type) {\n    case CheckoutButtonActionType.InitializeButtonRequested:\n        return {\n            ...statuses,\n            isInitializing: true,\n        };\n\n    case CheckoutButtonActionType.InitializeButtonFailed:\n    case CheckoutButtonActionType.InitializeButtonSucceeded:\n        return {\n            ...statuses,\n            isInitializing: false,\n        };\n\n    case CheckoutButtonActionType.DeinitializeButtonRequested:\n        return {\n            ...statuses,\n            isDeinitializing: true,\n        };\n\n    case CheckoutButtonActionType.DeinitializeButtonFailed:\n    case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n        return {\n            ...statuses,\n            isDeinitializing: false,\n        };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\n\nimport Config from './config';\nimport { ConfigActionType, LoadConfigAction } from './config-actions';\nimport ConfigState, { ConfigErrorsState, ConfigStatusesState } from './config-state';\n\nconst DEFAULT_STATE: ConfigState = {\n    meta: {},\n    errors: {},\n    statuses: {},\n};\n\nexport default function configReducer(\n    state: ConfigState = DEFAULT_STATE,\n    action: Action\n): ConfigState {\n    const reducer = combineReducers<ConfigState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Config | undefined,\n    action: LoadConfigAction\n): Config | undefined {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigSucceeded:\n        return action.payload ? action.payload : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ConfigErrorsState = DEFAULT_STATE.errors,\n    action: LoadConfigAction\n): ConfigErrorsState {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case ConfigActionType.LoadConfigFailed:\n        return { ...errors, loadError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ConfigStatusesState = DEFAULT_STATE.statuses,\n    action: LoadConfigAction\n): ConfigStatusesState {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigRequested:\n        return { ...statuses, isLoading: true };\n\n    case ConfigActionType.LoadConfigSucceeded:\n    case ConfigActionType.LoadConfigFailed:\n        return { ...statuses, isLoading: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nimport Coupon from './coupon';\n\nexport default interface CouponState {\n    data?: Coupon[];\n    errors: CouponErrorsState;\n    statuses: CouponStatusesState;\n}\n\nexport interface CouponErrorsState {\n    applyCouponError?: RequestError<StorefrontErrorResponseBody>;\n    removeCouponError?: RequestError<StorefrontErrorResponseBody>;\n}\n\nexport interface CouponStatusesState {\n    isApplyingCoupon?: boolean;\n    isRemovingCoupon?: boolean;\n}\n\nexport const DEFAULT_STATE: CouponState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectSet } from '../common/utility';\nimport { OrderAction, OrderActionType } from '../order';\n\nimport Coupon from './coupon';\nimport { CouponAction, CouponActionType } from './coupon-actions';\nimport CouponState, { CouponErrorsState, CouponStatusesState, DEFAULT_STATE } from './coupon-state';\n\nexport default function couponReducer(\n    state: CouponState = DEFAULT_STATE,\n    action: Action\n): CouponState {\n    const reducer = combineReducers<CouponState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Coupon[] | undefined,\n    action: CouponAction | CheckoutAction | OrderAction\n): Coupon[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case OrderActionType.LoadOrderSucceeded:\n        return arrayReplace(data, action.payload && action.payload.coupons);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CouponErrorsState = {},\n    action: CouponAction\n): CouponErrorsState {\n    switch (action.type) {\n    case CouponActionType.ApplyCouponRequested:\n    case CouponActionType.ApplyCouponSucceeded:\n        return objectSet(errors, 'applyCouponError', undefined);\n\n    case CouponActionType.ApplyCouponFailed:\n        return objectSet(errors, 'applyCouponError', action.payload);\n\n    case CouponActionType.RemoveCouponRequested:\n    case CouponActionType.RemoveCouponSucceeded:\n        return objectSet(errors, 'removeCouponError', undefined);\n\n    case CouponActionType.RemoveCouponFailed:\n        return objectSet(errors, 'removeCouponError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CouponStatusesState = {},\n    action: CouponAction\n): CouponStatusesState {\n    switch (action.type) {\n    case CouponActionType.ApplyCouponRequested:\n        return objectSet(statuses, 'isApplyingCoupon', true);\n\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.ApplyCouponFailed:\n        return objectSet(statuses, 'isApplyingCoupon', false);\n\n    case CouponActionType.RemoveCouponRequested:\n        return objectSet(statuses, 'isRemovingCoupon', true);\n\n    case CouponActionType.RemoveCouponSucceeded:\n    case CouponActionType.RemoveCouponFailed:\n        return objectSet(statuses, 'isRemovingCoupon', false);\n\n    default:\n        return statuses;\n    }\n}\n","import { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nimport GiftCertificate from './gift-certificate';\n\nexport default interface GiftCertificateState {\n    data?: GiftCertificate[];\n    errors: GiftCertificateErrorsState;\n    statuses: GiftCertificateStatusesState;\n}\n\nexport interface GiftCertificateErrorsState {\n    applyGiftCertificateError?: RequestError<StorefrontErrorResponseBody>;\n    removeGiftCertificateError?: RequestError<StorefrontErrorResponseBody>;\n}\n\nexport interface GiftCertificateStatusesState {\n    isApplyingGiftCertificate?: boolean;\n    isRemovingGiftCertificate?: boolean;\n}\n\nexport const DEFAULT_STATE: GiftCertificateState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectSet } from '../common/utility';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping/consignment-actions';\n\nimport { CouponAction, CouponActionType } from './coupon-actions';\nimport GiftCertificate from './gift-certificate';\nimport { GiftCertificateAction, GiftCertificateActionType } from './gift-certificate-actions';\nimport GiftCertificateState, { DEFAULT_STATE, GiftCertificateErrorsState, GiftCertificateStatusesState } from './gift-certificate-state';\n\nexport default function giftCertificateReducer(\n    state: GiftCertificateState = DEFAULT_STATE,\n    action: Action\n): GiftCertificateState {\n    const reducer = combineReducers<GiftCertificateState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: GiftCertificate[] | undefined,\n    action: CheckoutAction | GiftCertificateAction | ConsignmentAction | CouponAction\n): GiftCertificate[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return arrayReplace(data, action.payload && action.payload.giftCertificates);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: GiftCertificateErrorsState = DEFAULT_STATE.errors,\n    action: GiftCertificateAction\n): GiftCertificateErrorsState {\n    switch (action.type) {\n    case GiftCertificateActionType.ApplyGiftCertificateRequested:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n        return objectSet(errors, 'applyGiftCertificateError', undefined);\n\n    case GiftCertificateActionType.ApplyGiftCertificateFailed:\n        return objectSet(errors, 'applyGiftCertificateError', action.payload);\n\n    case GiftCertificateActionType.RemoveGiftCertificateRequested:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return objectSet(errors, 'removeGiftCertificateError', undefined);\n\n    case GiftCertificateActionType.RemoveGiftCertificateFailed:\n        return objectSet(errors, 'removeGiftCertificateError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: GiftCertificateStatusesState = DEFAULT_STATE.statuses,\n    action: GiftCertificateAction\n): GiftCertificateStatusesState {\n    switch (action.type) {\n    case GiftCertificateActionType.ApplyGiftCertificateRequested:\n        return objectSet(statuses, 'isApplyingGiftCertificate', true);\n\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateFailed:\n        return objectSet(statuses, 'isApplyingGiftCertificate', false);\n\n    case GiftCertificateActionType.RemoveGiftCertificateRequested:\n        return objectSet(statuses, 'isRemovingGiftCertificate', true);\n\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateFailed:\n        return objectSet(statuses, 'isRemovingGiftCertificate', false);\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\n\nimport Customer from './customer';\nimport CustomerState from './customer-state';\n\nconst DEFAULT_STATE: CustomerState = {};\n\nexport default function customerReducer(\n    state: CustomerState = DEFAULT_STATE,\n    action: CheckoutAction\n): CustomerState {\n    const reducer = combineReducers<CustomerState, CheckoutAction>({\n        data: dataReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Customer | undefined,\n    action: CheckoutAction\n): Customer | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return action.payload ? { ...data, ...action.payload.customer } : data;\n\n    default:\n        return data;\n    }\n}\n","export default interface CustomerStrategyState {\n    data: CustomerStrategyDataState;\n    errors: CustomerStrategyErrorsState;\n    statuses: CustomerStrategyStatusesState;\n}\n\nexport interface CustomerStrategyDataState {\n    [key: string]: {\n        isInitialized: boolean;\n    };\n}\n\nexport interface CustomerStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    signInError?: Error;\n    signInMethodId?: string;\n    signOutError?: Error;\n    signOutMethodId?: string;\n    widgetInteractionError?: Error;\n    widgetInteractionMethodId?: string;\n}\n\nexport interface CustomerStrategyStatusesState {\n    deinitializeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isInitializing?: boolean;\n    isSigningIn?: boolean;\n    isSigningOut?: boolean;\n    signInMethodId?: string;\n    signOutMethodId?: string;\n    isWidgetInteracting?: boolean;\n    widgetInteractionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: CustomerStrategyState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\n\nimport { CustomerStrategyAction, CustomerStrategyActionType } from './customer-strategy-actions';\nimport CustomerStrategyState, { CustomerStrategyDataState, CustomerStrategyErrorsState, CustomerStrategyStatusesState, DEFAULT_STATE } from './customer-strategy-state';\n\nexport default function customerStrategyReducer(\n    state: CustomerStrategyState = DEFAULT_STATE,\n    action: Action\n): CustomerStrategyState {\n    const reducer = combineReducers<CustomerStrategyState, CustomerStrategyAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: CustomerStrategyDataState = DEFAULT_STATE.data,\n    action: CustomerStrategyAction\n): CustomerStrategyDataState {\n    switch (action.type) {\n    case CustomerStrategyActionType.InitializeSucceeded:\n        return {\n            ...data,\n            [action.meta && action.meta.methodId]: {\n                isInitialized: true,\n            },\n        };\n\n    case CustomerStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...data,\n            [action.meta && action.meta.methodId]: {\n                isInitialized: false,\n            },\n        };\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: CustomerStrategyErrorsState = DEFAULT_STATE.errors,\n    action: CustomerStrategyAction\n): CustomerStrategyErrorsState {\n    switch (action.type) {\n    case CustomerStrategyActionType.InitializeRequested:\n    case CustomerStrategyActionType.InitializeSucceeded:\n        return {\n            ...errors,\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.InitializeFailed:\n        return {\n            ...errors,\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.DeinitializeRequested:\n    case CustomerStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...errors,\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.DeinitializeFailed:\n        return {\n            ...errors,\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.SignInRequested:\n    case CustomerStrategyActionType.SignInSucceeded:\n        return {\n            ...errors,\n            signInError: undefined,\n            signInMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.SignInFailed:\n        return {\n            ...errors,\n            signInError: action.payload,\n            signInMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.SignOutRequested:\n    case CustomerStrategyActionType.SignOutSucceeded:\n        return {\n            ...errors,\n            signOutError: undefined,\n            signOutMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.SignOutFailed:\n        return {\n            ...errors,\n            signOutError: action.payload,\n            signOutMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.WidgetInteractionStarted:\n    case CustomerStrategyActionType.WidgetInteractionFinished:\n        return {\n            ...errors,\n            widgetInteractionError: undefined,\n            widgetInteractionMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.WidgetInteractionFailed:\n        return {\n            ...errors,\n            widgetInteractionError: action.payload,\n            widgetInteractionMethodId: action.meta.methodId,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CustomerStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: CustomerStrategyAction\n): CustomerStrategyStatusesState {\n    switch (action.type) {\n    case CustomerStrategyActionType.InitializeRequested:\n        return {\n            ...statuses,\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.InitializeFailed:\n    case CustomerStrategyActionType.InitializeSucceeded:\n        return {\n            ...statuses,\n            isInitializing: false,\n            initializeMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.DeinitializeRequested:\n        return {\n            ...statuses,\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.DeinitializeFailed:\n    case CustomerStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...statuses,\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.SignInRequested:\n        return {\n            ...statuses,\n            isSigningIn: true,\n            signInMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.SignInFailed:\n    case CustomerStrategyActionType.SignInSucceeded:\n        return {\n            ...statuses,\n            isSigningIn: false,\n            signInMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.SignOutRequested:\n        return {\n            ...statuses,\n            isSigningOut: true,\n            signOutMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.SignOutFailed:\n    case CustomerStrategyActionType.SignOutSucceeded:\n        return {\n            ...statuses,\n            isSigningOut: false,\n            signOutMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.WidgetInteractionStarted:\n        return {\n            ...statuses,\n            isWidgetInteracting: true,\n            widgetInteractionMethodId: action.meta.methodId,\n         };\n\n    case CustomerStrategyActionType.WidgetInteractionFinished:\n    case CustomerStrategyActionType.WidgetInteractionFailed:\n         return {\n            ...statuses,\n            isWidgetInteracting: false,\n            widgetInteractionMethodId: undefined,\n         };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\n\nimport Country from './country';\nimport { CountryActionType, LoadCountriesAction } from './country-actions';\nimport CountryState, { CountryErrorsState, CountryStatusesState } from './country-state';\n\nconst DEFAULT_STATE: CountryState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function countryReducer(\n    state: CountryState = DEFAULT_STATE,\n    action: Action\n): CountryState {\n    const reducer = combineReducers<CountryState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Country[] | undefined,\n    action: LoadCountriesAction\n): Country[] | undefined {\n    switch (action.type) {\n    case CountryActionType.LoadCountriesSucceeded:\n        return action.payload || [];\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CountryErrorsState = DEFAULT_STATE.errors,\n    action: LoadCountriesAction\n): CountryErrorsState {\n    switch (action.type) {\n    case CountryActionType.LoadCountriesRequested:\n    case CountryActionType.LoadCountriesSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case CountryActionType.LoadCountriesFailed:\n        return { ...errors, loadError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CountryStatusesState = DEFAULT_STATE.statuses,\n    action: LoadCountriesAction\n): CountryStatusesState {\n    switch (action.type) {\n    case CountryActionType.LoadCountriesRequested:\n        return { ...statuses, isLoading: true };\n\n    case CountryActionType.LoadCountriesSucceeded:\n    case CountryActionType.LoadCountriesFailed:\n        return { ...statuses, isLoading: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { Omit } from '../common/types';\n\nimport { InternalOrderMeta, InternalOrderPayment } from './internal-order';\nimport Order from './order';\n\nexport default interface OrderState {\n    data?: OrderDataState;\n    meta?: OrderMetaState;\n    errors: OrderErrorsState;\n    statuses: OrderStatusesState;\n}\n\nexport type OrderDataState = Omit<Order, 'billingAddress' | 'coupons'>;\n\nexport interface OrderMetaState extends InternalOrderMeta {\n    token?: string;\n    orderToken?: string;\n    callbackUrl?: string;\n    payment?: InternalOrderPayment;\n    spamProtectionToken?: string;\n}\n\nexport interface OrderErrorsState {\n    loadError?: Error;\n    submitError?: Error;\n    finalizeError?: Error;\n}\n\nexport interface OrderStatusesState {\n    isLoading?: boolean;\n    isSubmitting?: boolean;\n    isFinalizing?: boolean;\n}\n\nexport const DEFAULT_STATE: OrderState = {\n    errors: {},\n    meta: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\nimport { omit } from 'lodash';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport { OrderAction, OrderActionType } from './order-actions';\nimport OrderState, { DEFAULT_STATE, OrderDataState, OrderErrorsState, OrderMetaState, OrderStatusesState } from './order-state';\nimport { SpamProtectionAction, SpamProtectionActionType } from './spam-protection';\n\nexport default function orderReducer(\n    state: OrderState = DEFAULT_STATE,\n    action: Action\n): OrderState {\n    const reducer = combineReducers<OrderState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: OrderDataState | undefined,\n    action: OrderAction\n): OrderDataState | undefined {\n    switch (action.type) {\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n        return objectMerge(data, omit(action.payload, ['billingAddress', 'coupons'])) as OrderDataState;\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(\n    meta: OrderMetaState | undefined,\n    action: OrderAction | SpamProtectionAction\n): OrderMetaState | undefined {\n    switch (action.type) {\n    case OrderActionType.FinalizeOrderSucceeded:\n    case OrderActionType.SubmitOrderSucceeded:\n        return objectMerge(meta, {\n            ...action.meta,\n            callbackUrl: action.payload && action.payload.order.callbackUrl,\n            orderToken: action.payload && action.payload.order.token,\n            payment: action.payload && action.payload.order && action.payload.order.payment,\n        });\n\n    case SpamProtectionActionType.Completed:\n        return objectSet(meta, 'spamProtectionToken', action.payload);\n\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: OrderErrorsState = DEFAULT_STATE.errors,\n    action: OrderAction\n): OrderErrorsState {\n    switch (action.type) {\n    case OrderActionType.LoadOrderRequested:\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n    case OrderActionType.LoadOrderPaymentsRequested:\n        return objectSet(errors, 'loadError', undefined);\n\n    case OrderActionType.LoadOrderFailed:\n    case OrderActionType.LoadOrderPaymentsFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: OrderStatusesState = DEFAULT_STATE.statuses,\n    action: OrderAction\n): OrderStatusesState {\n    switch (action.type) {\n    case OrderActionType.LoadOrderRequested:\n    case OrderActionType.LoadOrderPaymentsRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderFailed:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n    case OrderActionType.LoadOrderPaymentsFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { PaymentAction, PaymentActionType } from './payment-actions';\nimport PaymentResponseBody from './payment-response-body';\nimport PaymentState from './payment-state';\n\nexport default function paymentReducer(state: PaymentState = {}, action: PaymentAction): PaymentState {\n    const reducer = combineReducers<PaymentState, PaymentAction>({\n        data: dataReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(data: PaymentResponseBody | undefined, action: PaymentAction): PaymentResponseBody | undefined {\n    switch (action.type) {\n    case PaymentActionType.SubmitPaymentSucceeded:\n        return action.payload;\n\n    default:\n        return data;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { mergeOrPush } from '../common/utility';\n\nimport PaymentMethod from './payment-method';\nimport { PaymentMethodAction, PaymentMethodActionType } from './payment-method-actions';\nimport PaymentMethodMeta from './payment-method-meta';\nimport PaymentMethodState, { PaymentMethodErrorsState, PaymentMethodStatusesState } from './payment-method-state';\n\nconst DEFAULT_STATE: PaymentMethodState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function paymentMethodReducer(\n    state: PaymentMethodState = DEFAULT_STATE,\n    action: Action\n): PaymentMethodState {\n    const reducer = combineReducers<PaymentMethodState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: PaymentMethod[] | undefined,\n    action: PaymentMethodAction\n): PaymentMethod[] | undefined {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n        return action.payload ?\n            mergeOrPush(data || [], action.payload, {\n                id: action.payload.id,\n                gateway: action.payload.gateway,\n            }) :\n            data;\n\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        return action.payload ? action.payload : [];\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(\n    meta: PaymentMethodMeta | undefined,\n    action: PaymentMethodAction\n): PaymentMethodMeta | undefined {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        return action.meta ? { ...meta, ...action.meta } : meta;\n\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: PaymentMethodErrorsState = DEFAULT_STATE.errors,\n    action: PaymentMethodAction\n): PaymentMethodErrorsState {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodsRequested:\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case PaymentMethodActionType.LoadPaymentMethodsFailed:\n        return { ...errors, loadError: action.payload };\n\n    case PaymentMethodActionType.LoadPaymentMethodRequested:\n    case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n        return {\n            ...errors,\n            loadMethodId: undefined,\n            loadMethodError: undefined,\n        };\n\n    case PaymentMethodActionType.LoadPaymentMethodFailed:\n        return {\n            ...errors,\n            loadMethodId: action.meta.methodId,\n            loadMethodError: action.payload,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: PaymentMethodStatusesState = DEFAULT_STATE.statuses,\n    action: PaymentMethodAction\n): PaymentMethodStatusesState {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodsRequested:\n        return { ...statuses, isLoading: true };\n\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n    case PaymentMethodActionType.LoadPaymentMethodsFailed:\n        return { ...statuses, isLoading: false };\n\n    case PaymentMethodActionType.LoadPaymentMethodRequested:\n        return {\n            ...statuses,\n            isLoadingMethod: true,\n            loadMethodId: action.meta.methodId,\n        };\n\n    case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n    case PaymentMethodActionType.LoadPaymentMethodFailed:\n        return {\n            ...statuses,\n            isLoadingMethod: false,\n            loadMethodId: undefined,\n        };\n\n    default:\n        return statuses;\n    }\n}\n","import { findIndex, pick, pickBy } from 'lodash';\n\nimport { PartialDeep } from '../types';\n\nimport isPlainObject from './is-plain-object';\nimport objectMerge from './object-merge';\n\n/**\n * Push an item to an array if it doesn't exist in the array. Otherwise, merge\n * with the existing item in the array. This function always returns a new array.\n */\nexport default function mergeOrPush<T>(\n    array: T[],\n    item?: T,\n    predicate?: ((item: T) => boolean) | PartialDeep<T>\n): T[] {\n    if (!item) {\n        return array;\n    }\n\n    const defaultPredicate = pick(item, 'id');\n    const index = findIndex(array, typeof predicate === 'object' ? pickBy(predicate) : (predicate || defaultPredicate));\n    const newArray = [...array];\n\n    if (index === -1) {\n        newArray.push(item);\n    } else {\n        const existingItem = array[index];\n\n        newArray[index] = isPlainObject(existingItem) && isPlainObject(item) ?\n            objectMerge(existingItem, item) :\n            item;\n    }\n\n    return newArray;\n}\n","export default interface PaymentStrategyState {\n    data: PaymentStrategyDataState;\n    errors: PaymentStrategyErrorsState;\n    statuses: PaymentStrategyStatusesState;\n}\n\nexport interface PaymentStrategyDataState {\n    [key: string]: {\n        isInitialized: boolean;\n    };\n}\n\nexport interface PaymentStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    executeError?: Error;\n    executeMethodId?: string;\n    finalizeError?: Error;\n    finalizeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    widgetInteractionError?: Error;\n    widgetInteractionMethodId?: string;\n}\n\nexport interface PaymentStrategyStatusesState {\n    deinitializeMethodId?: string;\n    executeMethodId?: string;\n    finalizeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isExecuting?: boolean;\n    isFinalizing?: boolean;\n    isInitializing?: boolean;\n    isWidgetInteracting?: boolean;\n    widgetInteractionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: PaymentStrategyState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\n\nimport { PaymentStrategyAction, PaymentStrategyActionType } from './payment-strategy-actions';\nimport PaymentStrategyState, { DEFAULT_STATE, PaymentStrategyDataState, PaymentStrategyErrorsState, PaymentStrategyStatusesState } from './payment-strategy-state';\n\nexport default function paymentStrategyReducer(\n    state: PaymentStrategyState = DEFAULT_STATE,\n    action: Action\n): PaymentStrategyState {\n    const reducer = combineReducers<PaymentStrategyState, PaymentStrategyAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: PaymentStrategyDataState = DEFAULT_STATE.data,\n    action: PaymentStrategyAction\n): PaymentStrategyDataState {\n    switch (action.type) {\n    case PaymentStrategyActionType.InitializeSucceeded:\n        return {\n            ...data,\n            [action.meta && action.meta.methodId]: {\n                isInitialized: true,\n            },\n        };\n\n    case PaymentStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...data,\n            [action.meta && action.meta.methodId]: {\n                isInitialized: false,\n            },\n        };\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: PaymentStrategyErrorsState = DEFAULT_STATE.errors,\n    action: PaymentStrategyAction\n): PaymentStrategyErrorsState {\n    switch (action.type) {\n    case PaymentStrategyActionType.InitializeRequested:\n    case PaymentStrategyActionType.InitializeSucceeded:\n        return {\n            ...errors,\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.InitializeFailed:\n        return {\n            ...errors,\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.DeinitializeRequested:\n    case PaymentStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...errors,\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.DeinitializeFailed:\n        return {\n            ...errors,\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.ExecuteRequested:\n    case PaymentStrategyActionType.ExecuteSucceeded:\n        return {\n            ...errors,\n            executeError: undefined,\n            executeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.ExecuteFailed:\n        return {\n            ...errors,\n            executeError: action.payload,\n            executeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.FinalizeRequested:\n    case PaymentStrategyActionType.FinalizeSucceeded:\n        return {\n            ...errors,\n            finalizeError: undefined,\n            finalizeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.FinalizeFailed:\n        return {\n            ...errors,\n            finalizeError: action.payload,\n            finalizeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.WidgetInteractionStarted:\n    case PaymentStrategyActionType.WidgetInteractionFinished:\n        return {\n            ...errors,\n            widgetInteractionError: undefined,\n            widgetInteractionMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.WidgetInteractionFailed:\n        return {\n            ...errors,\n            widgetInteractionError: action.payload,\n            widgetInteractionMethodId: action.meta.methodId,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: PaymentStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: PaymentStrategyAction\n): PaymentStrategyStatusesState {\n    switch (action.type) {\n    case PaymentStrategyActionType.InitializeRequested:\n        return {\n            ...statuses,\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.InitializeFailed:\n    case PaymentStrategyActionType.InitializeSucceeded:\n        return {\n            ...statuses,\n            isInitializing: false,\n            initializeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.DeinitializeRequested:\n        return {\n            ...statuses,\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.DeinitializeFailed:\n    case PaymentStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...statuses,\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.ExecuteRequested:\n        return {\n            ...statuses,\n            isExecuting: true,\n            executeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.ExecuteFailed:\n    case PaymentStrategyActionType.ExecuteSucceeded:\n        return {\n            ...statuses,\n            isExecuting: false,\n            executeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.FinalizeRequested:\n        return {\n            ...statuses,\n            isFinalizing: true,\n            finalizeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.FinalizeFailed:\n    case PaymentStrategyActionType.FinalizeSucceeded:\n        return {\n            ...statuses,\n            isFinalizing: false,\n            finalizeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.WidgetInteractionStarted:\n    return {\n        ...statuses,\n        isWidgetInteracting: true,\n        widgetInteractionMethodId: action.meta.methodId,\n     };\n\n    case PaymentStrategyActionType.WidgetInteractionFinished:\n    case PaymentStrategyActionType.WidgetInteractionFailed:\n     return {\n        ...statuses,\n        isWidgetInteracting: false,\n        widgetInteractionMethodId: undefined,\n     };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../../common/error';\n\nimport Instrument from './instrument';\nimport { InstrumentAction, InstrumentActionType } from './instrument-actions';\nimport InstrumentState, { InstrumentErrorState, InstrumentMeta, InstrumentStatusState } from './instrument-state';\n\nconst DEFAULT_STATE = {\n    data: [],\n    errors: {},\n    statuses: {},\n};\n\nexport default function instrumentReducer(\n    state: InstrumentState = DEFAULT_STATE,\n    action: Action\n): InstrumentState {\n    const reducer = combineReducers<InstrumentState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Instrument[] = DEFAULT_STATE.data,\n    action: InstrumentAction\n): Instrument[] {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n        return action.payload ? action.payload.vaultedInstruments : [];\n\n    case InstrumentActionType.DeleteInstrumentSucceeded:\n        return data.filter(instrument =>\n            instrument.bigpayToken !== action.meta.instrumentId\n        );\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(\n    meta: InstrumentMeta | undefined,\n    action: InstrumentAction\n): InstrumentMeta | undefined {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n    case InstrumentActionType.DeleteInstrumentSucceeded:\n        return { ...meta, ...action.meta };\n\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: InstrumentErrorState = DEFAULT_STATE.errors,\n    action: InstrumentAction\n): InstrumentErrorState {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsRequested:\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case InstrumentActionType.DeleteInstrumentRequested:\n    case InstrumentActionType.DeleteInstrumentSucceeded:\n        return {\n            ...errors,\n            deleteError: undefined,\n            failedInstrument: undefined,\n        };\n\n    case InstrumentActionType.LoadInstrumentsFailed:\n        return { ...errors, loadError: action.payload };\n\n    case InstrumentActionType.DeleteInstrumentFailed:\n        return {\n            ...errors,\n            deleteError: action.payload,\n            failedInstrument: action.meta.instrumentId,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: InstrumentStatusState = DEFAULT_STATE.statuses,\n    action: InstrumentAction\n): InstrumentStatusState {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsRequested:\n        return { ...statuses, isLoading: true };\n\n    case InstrumentActionType.DeleteInstrumentRequested:\n        return {\n            ...statuses,\n            isDeleting: true,\n            deletingInstrument: action.meta.instrumentId,\n        };\n\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n    case InstrumentActionType.LoadInstrumentsFailed:\n        return { ...statuses, isLoading: false };\n\n    case InstrumentActionType.DeleteInstrumentSucceeded:\n    case InstrumentActionType.DeleteInstrumentFailed:\n        return {\n            ...statuses,\n            isDeleting: false,\n            deletingInstrument: undefined,\n        };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport RemoteCheckout from './remote-checkout';\nimport { RemoteCheckoutAction, RemoteCheckoutActionType } from './remote-checkout-actions';\nimport RemoteCheckoutState, { RemoteCheckoutStateData } from './remote-checkout-state';\n\nconst DEFAULT_STATE: RemoteCheckoutState = {\n    data: {},\n};\n\nexport default function remoteCheckoutReducer(\n    state: RemoteCheckoutState = DEFAULT_STATE,\n    action: RemoteCheckoutAction\n): RemoteCheckoutState {\n    if (!action.meta || !action.meta.methodId) {\n        return state;\n    }\n\n    const reducer = combineReducers<RemoteCheckoutState>({\n        data: combineReducers<RemoteCheckoutStateData>({\n            [action.meta.methodId]: dataReducer,\n        }),\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: RemoteCheckout = DEFAULT_STATE.data,\n    action: RemoteCheckoutAction\n): RemoteCheckout {\n    switch (action.type) {\n    case RemoteCheckoutActionType.InitializeRemoteBillingSucceeded:\n        return action.payload ? { ...data, billing: action.payload.billing } : data;\n\n    case RemoteCheckoutActionType.InitializeRemoteShippingSucceeded:\n        return action.payload ? { ...data, shipping: action.payload.shipping } : data;\n\n    case RemoteCheckoutActionType.LoadRemoteSettingsSucceeded:\n        return { ...data, settings: action.payload };\n\n    case RemoteCheckoutActionType.UpdateRemoteCheckout:\n        return { ...data, ...action.payload };\n\n    default:\n        return data;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { CouponAction, CouponActionType } from '../coupon';\nimport { CustomerAction, CustomerActionType } from '../customer';\n\nimport Consignment from './consignment';\nimport { ConsignmentAction, ConsignmentActionType } from './consignment-actions';\nimport ConsignmentState, { ConsignmentErrorsState, ConsignmentStatusesState } from './consignment-state';\n\nconst DEFAULT_STATE: ConsignmentState = {\n    errors: {\n        updateShippingOptionError: {},\n        updateError: {},\n        deleteError: {},\n    },\n    statuses: {\n        isUpdating: {},\n        isUpdatingShippingOption: {},\n        isDeleting: {},\n    },\n};\n\nexport default function consignmentReducer(\n    state: ConsignmentState = DEFAULT_STATE,\n    action: Action\n): ConsignmentState {\n    const reducer = combineReducers<ConsignmentState, ConsignmentAction | CheckoutAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Consignment[] | undefined,\n    action: ConsignmentAction | CheckoutAction | CouponAction | CustomerAction\n): Consignment[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n        return action.payload ? action.payload.consignments : data;\n\n    case CustomerActionType.SignOutCustomerSucceeded:\n        return [];\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ConsignmentErrorsState = DEFAULT_STATE.errors,\n    action: ConsignmentAction | CheckoutAction\n): ConsignmentErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsRequested:\n        return { ...errors, loadError: undefined };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case ConsignmentActionType.LoadShippingOptionsFailed:\n        return { ...errors, loadError: action.payload };\n\n    case ConsignmentActionType.CreateConsignmentsRequested:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n        return { ...errors, createError: undefined };\n\n    case ConsignmentActionType.CreateConsignmentsFailed:\n        return { ...errors, createError: action.payload };\n\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentRequested:\n        if (action.meta) {\n            errors = {\n                ...errors,\n                updateError: {\n                    ...errors.updateError,\n                    [action.meta.id]: undefined,\n                },\n            };\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateConsignmentFailed:\n        if (action.meta) {\n            errors = {\n                ...errors,\n                updateError: {\n                    ...errors.updateError,\n                    [action.meta.id]: action.payload,\n                },\n            };\n        }\n\n        return errors;\n\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentRequested:\n        if (action.meta) {\n            errors = {\n                ...errors,\n                deleteError: {\n                    ...errors.deleteError,\n                    [action.meta.id]: undefined,\n                },\n            };\n        }\n\n        return errors;\n\n    case ConsignmentActionType.DeleteConsignmentFailed:\n        if (action.meta) {\n            errors = {\n                ...errors,\n                deleteError: {\n                    ...errors.deleteError,\n                    [action.meta.id]: action.payload,\n                },\n            };\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateShippingOptionRequested:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n        if (action.meta) {\n            errors = {\n                ...errors,\n                updateShippingOptionError: {\n                    ...errors.updateShippingOptionError,\n                    [action.meta.id]: undefined,\n                },\n            };\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateShippingOptionFailed:\n        if (action.meta) {\n            errors = {\n                ...errors,\n                updateShippingOptionError: {\n                    ...errors.updateShippingOptionError,\n                    [action.meta.id]: action.payload,\n                },\n            };\n        }\n\n        return errors;\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ConsignmentStatusesState = DEFAULT_STATE.statuses,\n    action: ConsignmentAction | CheckoutAction\n): ConsignmentStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return { ...statuses, isLoading: true };\n\n    case ConsignmentActionType.LoadShippingOptionsRequested:\n        return { ...statuses, isLoadingShippingOptions: true };\n\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.LoadCheckoutFailed:\n        return { ...statuses, isLoading: false };\n\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsFailed:\n        return { ...statuses, isLoadingShippingOptions: false };\n\n    case ConsignmentActionType.CreateConsignmentsRequested:\n        return { ...statuses, isCreating: true };\n\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.CreateConsignmentsFailed:\n        return { ...statuses, isCreating: false };\n\n    case ConsignmentActionType.UpdateConsignmentRequested:\n        if (action.meta) {\n            statuses = {\n                ...statuses,\n                isUpdating: {\n                    ...statuses.isUpdating,\n                    [action.meta.id]: true,\n                },\n            };\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentFailed:\n        if (action.meta) {\n            statuses = {\n                ...statuses,\n                isUpdating: {\n                    ...statuses.isUpdating,\n                    [action.meta.id]: false,\n                },\n            };\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.DeleteConsignmentRequested:\n        if (action.meta) {\n            statuses = {\n                ...statuses,\n                isDeleting: {\n                    ...statuses.isDeleting,\n                    [action.meta.id]: true,\n                },\n            };\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentFailed:\n        if (action.meta) {\n            statuses = {\n                ...statuses,\n                isDeleting: {\n                    ...statuses.isDeleting,\n                    [action.meta.id]: false,\n                },\n            };\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateShippingOptionRequested:\n        if (action.meta) {\n            statuses = {\n                ...statuses,\n                isUpdatingShippingOption: {\n                    ...statuses.isUpdatingShippingOption,\n                    [action.meta.id]: true,\n                },\n            };\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionFailed:\n        if (action.meta) {\n            statuses = {\n                ...statuses,\n                isUpdatingShippingOption: {\n                    ...statuses.isUpdatingShippingOption,\n                    [action.meta.id]: false,\n                },\n            };\n        }\n\n        return statuses;\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { Country } from '../geography';\n\nimport { LoadShippingCountriesAction, ShippingCountryActionType } from './shipping-country-actions';\nimport ShippingCountryState, { ShippingCountryErrorsState, ShippingCountryStatusesState } from './shipping-country-state';\n\nconst DEFAULT_STATE: ShippingCountryState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function shippingCountryReducer(\n    state: ShippingCountryState = DEFAULT_STATE,\n    action: Action\n): ShippingCountryState {\n    const reducer = combineReducers<ShippingCountryState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Country[] | undefined,\n    action: LoadShippingCountriesAction\n): Country[] | undefined {\n    switch (action.type) {\n    case ShippingCountryActionType.LoadShippingCountriesSucceeded:\n        return action.payload || [];\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ShippingCountryErrorsState = DEFAULT_STATE.errors,\n    action: LoadShippingCountriesAction\n): ShippingCountryErrorsState {\n    switch (action.type) {\n    case ShippingCountryActionType.LoadShippingCountriesRequested:\n    case ShippingCountryActionType.LoadShippingCountriesSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case ShippingCountryActionType.LoadShippingCountriesFailed:\n        return { ...errors, loadError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ShippingCountryStatusesState = DEFAULT_STATE.statuses,\n    action: LoadShippingCountriesAction\n): ShippingCountryStatusesState {\n    switch (action.type) {\n    case ShippingCountryActionType.LoadShippingCountriesRequested:\n        return { ...statuses, isLoading: true };\n\n    case ShippingCountryActionType.LoadShippingCountriesSucceeded:\n    case ShippingCountryActionType.LoadShippingCountriesFailed:\n        return { ...statuses, isLoading: false };\n\n    default:\n        return statuses;\n    }\n}\n","export default interface ShippingStrategyState {\n    data: ShippingStrategyDataState;\n    errors: ShippingStrategyErrorsState;\n    statuses: ShippingStrategyStatusesState;\n}\n\nexport interface ShippingStrategyDataState {\n    [key: string]: {\n        isInitialized: boolean;\n    };\n}\n\nexport interface ShippingStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    updateAddressError?: Error;\n    updateAddressMethodId?: string;\n    selectOptionError?: Error;\n    selectOptionMethodId?: string;\n}\n\nexport interface ShippingStrategyStatusesState {\n    deinitializeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isInitializing?: boolean;\n    isUpdatingAddress?: boolean;\n    isSelectingOption?: boolean;\n    updateAddressMethodId?: string;\n    selectOptionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: ShippingStrategyState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\n\nimport { ShippingStrategyAction, ShippingStrategyActionType } from './shipping-strategy-actions';\nimport ShippingStrategyState, { DEFAULT_STATE, ShippingStrategyDataState, ShippingStrategyErrorsState, ShippingStrategyStatusesState } from './shipping-strategy-state';\n\nexport default function shippingStrategyReducer(\n    state: ShippingStrategyState = DEFAULT_STATE,\n    action: Action\n): ShippingStrategyState {\n    const reducer = combineReducers<ShippingStrategyState, ShippingStrategyAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: ShippingStrategyDataState = DEFAULT_STATE.data,\n    action: ShippingStrategyAction\n): ShippingStrategyDataState {\n    switch (action.type) {\n    case ShippingStrategyActionType.InitializeSucceeded:\n        return {\n            ...data,\n            [action.meta && action.meta.methodId]: {\n                isInitialized: true,\n            },\n        };\n\n    case ShippingStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...data,\n            [action.meta && action.meta.methodId]: {\n                isInitialized: false,\n            },\n        };\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: ShippingStrategyErrorsState = DEFAULT_STATE.errors,\n    action: ShippingStrategyAction\n): ShippingStrategyErrorsState {\n    switch (action.type) {\n    case ShippingStrategyActionType.InitializeRequested:\n    case ShippingStrategyActionType.InitializeSucceeded:\n        return {\n            ...errors,\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.InitializeFailed:\n        return {\n            ...errors,\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.DeinitializeRequested:\n    case ShippingStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...errors,\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.DeinitializeFailed:\n        return {\n            ...errors,\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.UpdateAddressRequested:\n    case ShippingStrategyActionType.UpdateAddressSucceeded:\n        return {\n            ...errors,\n            updateAddressError: undefined,\n            updateAddressMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.UpdateAddressFailed:\n        return {\n            ...errors,\n            updateAddressError: action.payload,\n            updateAddressMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.SelectOptionRequested:\n    case ShippingStrategyActionType.SelectOptionSucceeded:\n        return {\n            ...errors,\n            selectOptionError: undefined,\n            selectOptionMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.SelectOptionFailed:\n        return {\n            ...errors,\n            selectOptionError: action.payload,\n            selectOptionMethodId: action.meta && action.meta.methodId,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ShippingStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: ShippingStrategyAction\n): ShippingStrategyStatusesState {\n    switch (action.type) {\n    case ShippingStrategyActionType.InitializeRequested:\n        return {\n            ...statuses,\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.InitializeFailed:\n    case ShippingStrategyActionType.InitializeSucceeded:\n        return {\n            ...statuses,\n            isInitializing: false,\n            initializeMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.DeinitializeRequested:\n        return {\n            ...statuses,\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.DeinitializeFailed:\n    case ShippingStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...statuses,\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.UpdateAddressRequested:\n        return {\n            ...statuses,\n            isUpdatingAddress: true,\n            updateAddressMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.UpdateAddressFailed:\n    case ShippingStrategyActionType.UpdateAddressSucceeded:\n        return {\n            ...statuses,\n            isUpdatingAddress: false,\n            updateAddressMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.SelectOptionRequested:\n        return {\n            ...statuses,\n            isSelectingOption: true,\n            selectOptionMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.SelectOptionFailed:\n    case ShippingStrategyActionType.SelectOptionSucceeded:\n        return {\n            ...statuses,\n            isSelectingOption: false,\n            selectOptionMethodId: undefined,\n        };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\nimport { omit } from 'lodash';\n\nimport { BillingAddressAction, BillingAddressActionType } from '../billing';\nimport { clearErrorReducer } from '../common/error';\nimport { CouponAction, CouponActionType, GiftCertificateAction, GiftCertificateActionType } from '../coupon';\nimport { OrderAction, OrderActionType } from '../order';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping';\n\nimport { CheckoutAction, CheckoutActionType } from './checkout-actions';\nimport CheckoutState, { CheckoutDataState, CheckoutErrorsState, CheckoutStatusesState } from './checkout-state';\n\nconst DEFAULT_STATE: CheckoutState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function checkoutReducer(\n    state: CheckoutState = DEFAULT_STATE,\n    action: Action\n): CheckoutState {\n    const reducer = combineReducers<CheckoutState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: CheckoutDataState | undefined,\n    action: CheckoutAction | BillingAddressAction | ConsignmentAction | CouponAction | GiftCertificateAction | OrderAction\n): CheckoutDataState | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return action.payload\n            ? omit({ ...data, ...action.payload }, ['billingAddress', 'cart', 'consignments', 'customer', 'coupons', 'giftCertifcates'])\n            : data;\n\n    case OrderActionType.SubmitOrderSucceeded:\n        return action.payload && data\n            ? { ...data, orderId: action.payload.order.orderId }\n            : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CheckoutErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction | OrderAction\n): CheckoutErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return {\n            ...errors,\n            loadError: undefined,\n        };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return {\n            ...errors,\n            loadError: action.payload,\n        };\n\n    case CheckoutActionType.UpdateCheckoutRequested:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n        return {\n            ...errors,\n            updateError: undefined,\n        };\n\n    case CheckoutActionType.UpdateCheckoutFailed:\n        return {\n            ...errors,\n            updateError: action.payload,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CheckoutStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction | OrderAction\n): CheckoutStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return {\n            ...statuses,\n            isLoading: true,\n        };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return {\n            ...statuses,\n            isLoading: false,\n        };\n\n    case CheckoutActionType.UpdateCheckoutRequested:\n        return {\n            ...statuses,\n            isUpdating: true,\n        };\n\n    case CheckoutActionType.UpdateCheckoutFailed:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n        return {\n            ...statuses,\n            isUpdating: false,\n        };\n\n    default:\n        return statuses;\n    }\n}\n","import { memoize as lodashMemoize } from 'lodash';\nimport * as shallowEqual from 'shallowequal';\n\nimport { Omit } from '../types';\n\nimport CacheKeyResolver from './cache-key-resolver';\n\nexport interface MemoizeOptions {\n    maxSize?: number;\n    isEqual?(valueA: any, valueB: any): boolean;\n}\n\nexport default function memoize<T extends (...args: any[]) => any>(\n    fn: T,\n    options?: MemoizeOptions\n) {\n    const { maxSize, isEqual } = { maxSize: 0, isEqual: shallowEqual, ...options };\n    const cache = new Map();\n    const resolver = new CacheKeyResolver({\n        maxSize,\n        isEqual,\n        onExpire: key => cache.delete(key),\n    });\n    const memoized = lodashMemoize(fn, (...args) => resolver.getKey(...args));\n\n    memoized.cache = cache;\n\n    return memoized;\n}\n\nexport function memoizeOne<T extends (...args: any[]) => any>(\n    fn: T,\n    options?: Omit<MemoizeOptions, 'maxSize'>\n) {\n    return memoize(fn, { ...options, maxSize: 1 });\n}\n","import { createSelector as defaultSelectorCreator } from 'reselect';\n\nimport withMemoizedCombiner from './with-memoized-combiner';\n\n/**\n * This is a decorated version of Reselect's default `createSelector` function.\n * If the return value of the combiner function is a function, it will create a\n * memorized version of that function and return it instead.\n */\nexport default withMemoizedCombiner(defaultSelectorCreator);\n","import { createSelector as defaultSelectorCreator } from 'reselect';\n\nimport memoize from '../utility/memoize';\n\n/**\n * Decorate selector creators with the ability to memoize the return value of\n * their combiner if it is a function (which effectively works as a partially\n * applied combiner).\n */\nexport default function withMemoizedCombiner<T extends typeof defaultSelectorCreator>(\n    creator: T\n): T {\n    return ((...args: any[]) => {\n        const combiner = args.pop();\n\n        // Reselect's default `createSelector` has many overloads. To avoid having\n        // to redefine all of them, we're using `any` to bypass the typechecker.\n        return (creator as any)(...args, (...combinerArgs: any[]) => {\n            // Although there are many overloads, all of them have the last argument\n            // as the combiner.\n            const result = combiner(...combinerArgs);\n\n            if (typeof result === 'function') {\n                return memoize(combiner(...combinerArgs));\n            }\n\n            return result;\n        });\n    }) as T;\n}\n","import { find, some, values } from 'lodash';\n\nimport { selector } from '../common/selector';\n\nimport CheckoutButtonState from './checkout-button-state';\nimport { CheckoutButtonMethodType } from './strategies';\n\n@selector\nexport default class CheckoutButtonSelector {\n    constructor(\n        private _checkoutButton: CheckoutButtonState\n    ) {}\n\n    getState(): CheckoutButtonState {\n        return this._checkoutButton;\n    }\n\n    isInitializing(methodId?: CheckoutButtonMethodType): boolean {\n        if (methodId) {\n            const method = this._checkoutButton.statuses[methodId];\n\n            return (method && method.isInitializing) === true;\n        }\n\n        return some(this._checkoutButton.statuses, { isInitializing: true });\n    }\n\n    isInitialized(methodId: CheckoutButtonMethodType, containerId?: string): boolean {\n        const method = this._checkoutButton.data[methodId];\n\n        if (!method) {\n            return false;\n        }\n\n        if (!containerId) {\n            return some(method.initializedContainers, isInitialized => isInitialized === true);\n        }\n\n        return method.initializedContainers[containerId] === true;\n    }\n\n    isDeinitializing(methodId?: CheckoutButtonMethodType): boolean {\n        if (methodId) {\n            const method = this._checkoutButton.statuses[methodId];\n\n            return (method && method.isDeinitializing) === true;\n        }\n\n        return some(this._checkoutButton.statuses, { isDeinitializing: true });\n    }\n\n    getInitializeError(methodId?: CheckoutButtonMethodType): Error | undefined {\n        const method = methodId ?\n            this._checkoutButton.errors[methodId] :\n            find(values(this._checkoutButton.errors), method => !!(method && method.initializeError));\n\n        return method && method.initializeError;\n    }\n\n    getDeinitializeError(methodId?: CheckoutButtonMethodType): Error | undefined {\n        const method = methodId ?\n            this._checkoutButton.errors[methodId] :\n            find(values(this._checkoutButton.errors), method => !!(method && method.deinitializeError));\n\n        return method && method.deinitializeError;\n    }\n}\n","import { deepFreeze } from '@bigcommerce/data-store';\n\n// tslint:disable-next-line:ban-types\ntype FunctionProperties<T> = { [K in keyof T]: T[K] extends Function ? T[K] : never };\n\nexport default function createFreezeProxy<T extends object>(target: T): T {\n    return createProxy(target, (target, name) =>\n        (...args: any[]) => deepFreeze(target[name].call(target, ...args))\n    );\n}\n\nexport function createFreezeProxies<T extends { [key: string]: object }>(map: T): T {\n    return Object.keys(map)\n        .reduce((result, key) => {\n            result[key] = createFreezeProxy(map[key]);\n\n            return result;\n        }, {} as T);\n}\n\nfunction createProxy<T extends object>(target: T, trap: (target: FunctionProperties<T>, name: keyof FunctionProperties<T>, proxy: T) => any): T {\n    const proxy = Object.create(target);\n\n    traversePrototypeOf(target, prototype => {\n        Object.getOwnPropertyNames(prototype)\n            .forEach(name => {\n                if (name === 'constructor' || typeof proxy[name] !== 'function' || name.charAt(0) === '_') {\n                    return;\n                }\n\n                proxy[name] = trap(target as FunctionProperties<T>, name as keyof T, proxy);\n            });\n    });\n\n    return proxy;\n}\n\nfunction traversePrototypeOf(target: object, iteratee: (prototype: object) => void): void {\n    let prototype = Object.getPrototypeOf(target);\n\n    while (prototype) {\n        iteratee(prototype);\n\n        prototype = Object.getPrototypeOf(prototype);\n    }\n}\n","import { selector } from '../common/selector';\n\nimport Config, { ContextConfig, StoreConfig } from './config';\nimport ConfigState from './config-state';\n\n@selector\nexport default class ConfigSelector {\n    constructor(\n        private _config: ConfigState\n    ) {}\n\n    getConfig(): Config | undefined {\n        return this._config.data;\n    }\n\n    getStoreConfig(): StoreConfig | undefined {\n        return this._config.data && this._config.data.storeConfig;\n    }\n\n    getContextConfig(): ContextConfig | undefined {\n        return this._config.data && this._config.data.context;\n    }\n\n    getExternalSource(): string | undefined {\n        return this._config.meta && this._config.meta.externalSource;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._config.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return !!this._config.statuses.isLoading;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport Customer from './customer';\nimport CustomerState from './customer-state';\n\n@selector\nexport default class CustomerSelector {\n    constructor(\n        private _customer: CustomerState\n    ) {}\n\n    getCustomer(): Customer | undefined {\n        return this._customer.data;\n    }\n}\n","import CustomerStrategyState from './customer-strategy-state';\n\nexport default class CustomerStrategySelector {\n    constructor(\n        private _customerStrategies: CustomerStrategyState\n    ) {}\n\n    getSignInError(methodId?: string): Error | undefined {\n        if (methodId && this._customerStrategies.errors.signInMethodId !== methodId) {\n            return;\n        }\n\n        return this._customerStrategies.errors.signInError;\n    }\n\n    getSignOutError(methodId?: string): Error | undefined {\n        if (methodId && this._customerStrategies.errors.signOutMethodId !== methodId) {\n            return;\n        }\n\n        return this._customerStrategies.errors.signOutError;\n    }\n\n    getInitializeError(methodId?: string): Error | undefined {\n        if (methodId && this._customerStrategies.errors.initializeMethodId !== methodId) {\n            return;\n        }\n\n        return this._customerStrategies.errors.initializeError;\n    }\n\n    getWidgetInteractionError(methodId?: string): Error | undefined {\n        if (methodId && this._customerStrategies.errors.widgetInteractionMethodId !== methodId) {\n            return;\n        }\n\n        return this._customerStrategies.errors.widgetInteractionError;\n    }\n\n    isSigningIn(methodId?: string): boolean {\n        if (methodId && this._customerStrategies.statuses.signInMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._customerStrategies.statuses.isSigningIn;\n    }\n\n    isSigningOut(methodId?: string): boolean {\n        if (methodId && this._customerStrategies.statuses.signOutMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._customerStrategies.statuses.isSigningOut;\n    }\n\n    isInitializing(methodId?: string): boolean {\n        if (methodId && this._customerStrategies.statuses.initializeMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._customerStrategies.statuses.isInitializing;\n    }\n\n    isInitialized(methodId: string): boolean {\n        return !!(\n            this._customerStrategies.data[methodId] &&\n            this._customerStrategies.data[methodId].isInitialized\n        );\n    }\n\n    isWidgetInteracting(methodId?: string): boolean {\n        if (methodId && this._customerStrategies.statuses.widgetInteractionMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._customerStrategies.statuses.isWidgetInteracting;\n    }}\n","import { find } from 'lodash';\n\nimport { selector } from '../common/selector';\nimport { ConfigState } from '../config';\nimport { Country } from '../geography';\n\nimport FormField from './form-field';\n\n@selector\nexport default class FormSelector {\n    constructor(\n        private _config: ConfigState\n    ) {}\n\n    getShippingAddressFields(countries: Country[] = [], countryCode: string): FormField[] {\n        const selectedCountry = find(countries, { code: countryCode });\n        const fields = this._config.data ? this._config.data.storeConfig.formFields.shippingAddressFields : [];\n\n        return fields.map((field: any) => this._processField(field, countries, selectedCountry));\n    }\n\n    getBillingAddressFields(countries: Country[] = [], countryCode: string): FormField[] {\n        const selectedCountry = find(countries, { code: countryCode });\n        const fields = this._config.data ? this._config.data.storeConfig.formFields.billingAddressFields : [];\n\n        return fields.map((field: any) => this._processField(field, countries, selectedCountry));\n    }\n\n    private _processField(field: FormField, countries: Country[], selectedCountry?: Country): FormField {\n        if (field.name === 'countryCode') {\n            return this._processCountry(field, countries, selectedCountry);\n        }\n\n        if (field.name === 'stateOrProvince') {\n            return this._processProvince(field, selectedCountry);\n        }\n\n        if (field.name === 'postalCode') {\n            return this._processsPostCode(field, selectedCountry);\n        }\n\n        return field;\n    }\n\n    private _processCountry(field: FormField, countries: Country[] = [], country?: Country): FormField {\n        if (!countries.length) {\n            return field;\n        }\n\n        const { code = '' } = country || {};\n        const items = countries.map(({ code, name }: any) => ({\n            value: code,\n            label: name,\n        }));\n\n        return {\n            ...field,\n            options: { items },\n            default: code,\n            type: 'array',\n            fieldType: 'dropdown',\n            itemtype: 'string',\n        };\n    }\n\n    private _processProvince(field: FormField, country?: Country): FormField {\n        const { subdivisions = [] } = country || {};\n\n        if (!subdivisions.length) {\n            return {\n                ...field,\n                required: false,\n            };\n        }\n\n        const items = subdivisions.map(({ code, name }: any) => ({\n            value: code,\n            label: name,\n        }));\n\n        return {\n            ...field,\n            name: 'stateOrProvinceCode',\n            options: { items },\n            required: true,\n            type: 'array',\n            fieldType: 'dropdown',\n            itemtype: 'string',\n        };\n    }\n\n    private _processsPostCode(field: FormField, country?: Country): FormField {\n        const { hasPostalCodes = [] } = country || {};\n\n        if (hasPostalCodes === undefined) {\n            return field;\n        }\n\n        return { ...field, required: Boolean(hasPostalCodes) };\n    }\n}\n","import { selector } from '../common/selector';\n\nimport Country from './country';\nimport CountryState from './country-state';\n\n@selector\nexport default class CountrySelector {\n    constructor(\n        private _countries: CountryState\n    ) {}\n\n    getCountries(): Country[] | undefined {\n        return this._countries.data;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._countries.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return !!this._countries.statuses.isLoading;\n    }\n}\n","import { find } from 'lodash';\n\nimport { selector } from '../common/selector';\n\nimport PaymentMethod from './payment-method';\nimport PaymentMethodMeta from './payment-method-meta';\nimport PaymentMethodState from './payment-method-state';\n\n@selector\nexport default class PaymentMethodSelector {\n    constructor(\n        private _paymentMethods: PaymentMethodState\n    ) {}\n\n    getPaymentMethods(): PaymentMethod[] | undefined {\n        return this._paymentMethods.data;\n    }\n\n    getPaymentMethodsMeta(): PaymentMethodMeta | undefined {\n        return this._paymentMethods.meta;\n    }\n\n    getPaymentMethod(methodId: string, gatewayId?: string): PaymentMethod | undefined {\n        return gatewayId ?\n            find(this._paymentMethods.data, { id: methodId, gateway: gatewayId }) :\n            find(this._paymentMethods.data, { id: methodId });\n    }\n\n    getLoadError(): Error | undefined {\n        return this._paymentMethods.errors && this._paymentMethods.errors.loadError;\n    }\n\n    getLoadMethodError(methodId?: string): Error | undefined {\n        if (methodId && this._paymentMethods.errors.loadMethodId !== methodId) {\n            return;\n        }\n\n        return this._paymentMethods.errors.loadMethodError;\n    }\n\n    isLoading(): boolean {\n        return !!this._paymentMethods.statuses.isLoading;\n    }\n\n    isLoadingMethod(methodId?: string): boolean {\n        if (methodId && this._paymentMethods.statuses.loadMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._paymentMethods.statuses.isLoadingMethod;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport PaymentStrategyState, { DEFAULT_STATE } from './payment-strategy-state';\n\n@selector\nexport default class PaymentStrategySelector {\n    constructor(\n        private _paymentStrategies: PaymentStrategyState = DEFAULT_STATE\n    ) {}\n\n    getInitializeError(methodId?: string): Error | undefined {\n        if (methodId && this._paymentStrategies.errors.initializeMethodId !== methodId) {\n            return;\n        }\n\n        return this._paymentStrategies.errors.initializeError;\n    }\n\n    getExecuteError(methodId?: string): Error | undefined {\n        if (methodId && this._paymentStrategies.errors.executeMethodId !== methodId) {\n            return;\n        }\n\n        return this._paymentStrategies.errors.executeError;\n    }\n\n    getFinalizeError(methodId?: string): Error | undefined {\n        if (methodId && this._paymentStrategies.errors.finalizeMethodId !== methodId) {\n            return;\n        }\n\n        return this._paymentStrategies.errors.finalizeError;\n    }\n\n    getWidgetInteractingError(methodId?: string): Error | undefined {\n        if (methodId && this._paymentStrategies.errors.widgetInteractionMethodId !== methodId) {\n            return;\n        }\n\n        return this._paymentStrategies.errors.widgetInteractionError;\n    }\n\n    isInitializing(methodId?: string): boolean {\n        if (methodId && this._paymentStrategies.statuses.initializeMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._paymentStrategies.statuses.isInitializing;\n    }\n\n    isInitialized(methodId: string): boolean {\n        return !!(\n            this._paymentStrategies.data[methodId] &&\n            this._paymentStrategies.data[methodId].isInitialized\n        );\n    }\n\n    isExecuting(methodId?: string): boolean {\n        if (methodId && this._paymentStrategies.statuses.executeMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._paymentStrategies.statuses.isExecuting;\n    }\n\n    isFinalizing(methodId?: string): boolean {\n        if (methodId && this._paymentStrategies.statuses.finalizeMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._paymentStrategies.statuses.isFinalizing;\n    }\n\n    isWidgetInteracting(methodId?: string): boolean {\n        if (methodId && this._paymentStrategies.statuses.widgetInteractionMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._paymentStrategies.statuses.isWidgetInteracting;\n    }\n}\n","import { find } from 'lodash';\n\nimport { CheckoutPayment, CheckoutSelector } from '../checkout';\nimport { selector } from '../common/selector';\nimport { GatewayOrderPayment, InternalOrderPayment, OrderSelector } from '../order';\n\nimport PaymentMethod from './payment-method';\nimport { HOSTED } from './payment-method-types';\nimport { ACKNOWLEDGE, FINALIZE } from './payment-status-types';\n\n@selector\nexport default class PaymentSelector {\n    constructor(\n        private _checkout: CheckoutSelector,\n        private _order: OrderSelector\n    ) {}\n\n    getPaymentId(): { providerId: string; gatewayId?: string } | undefined {\n        const internalPayment = this._getInternalPayment();\n\n        if (internalPayment && internalPayment.id) {\n            return {\n                providerId: internalPayment.id,\n                gatewayId: internalPayment.gateway,\n            };\n        }\n\n        const payment = this._getHostedPayment() || this._getGatewayPayment();\n\n        if (payment && payment.providerId) {\n            return {\n                providerId: payment.providerId,\n                gatewayId: payment.gatewayId,\n            };\n        }\n    }\n\n    getPaymentStatus(): string | undefined {\n        const internalPayment = this._getInternalPayment();\n\n        if (internalPayment && internalPayment.status) {\n            return internalPayment.status.replace('PAYMENT_STATUS_', '');\n        }\n\n        const payment = this._getHostedPayment() || this._getGatewayPayment();\n\n        if (payment) {\n            return payment.detail.step;\n        }\n    }\n\n    getPaymentToken(): string | undefined {\n        const meta = this._order.getOrderMeta();\n\n        return meta && meta.token;\n    }\n\n    getPaymentRedirectUrl(): string | undefined {\n        const payment = this._getInternalPayment();\n\n        return payment && payment.redirectUrl;\n    }\n\n    isPaymentDataRequired(useStoreCredit: boolean = false): boolean {\n        const grandTotal = this._checkout.getGrandTotal(useStoreCredit);\n\n        return grandTotal ? grandTotal > 0 : false;\n    }\n\n    isPaymentDataSubmitted(paymentMethod?: PaymentMethod): boolean {\n        if (paymentMethod && paymentMethod.nonce) {\n            return true;\n        }\n\n        return this.getPaymentStatus() === ACKNOWLEDGE || this.getPaymentStatus() === FINALIZE;\n    }\n\n    private _getInternalPayment(): InternalOrderPayment | undefined {\n        const meta = this._order.getOrderMeta();\n\n        return meta && meta.payment;\n    }\n\n    private _getGatewayPayment(): GatewayOrderPayment | undefined {\n        const order = this._order.getOrder();\n\n        return find(order && order.payments, ({ providerId }) =>\n            providerId !== 'giftcertificate' && providerId !== 'storecredit'\n        ) as GatewayOrderPayment;\n    }\n\n    private _getHostedPayment(): CheckoutPayment | undefined {\n        const checkout = this._checkout.getCheckout();\n\n        return find(checkout && checkout.payments, ({ providerType }) =>\n            providerType === HOSTED\n        );\n    }\n}\n","import Instrument from './instrument';\nimport InstrumentState, { InstrumentMeta } from './instrument-state';\n\nexport default class InstrumentSelector {\n    constructor(\n        private _instruments: InstrumentState\n    ) {}\n\n    getInstruments(): Instrument[] | undefined {\n        return this._instruments.data;\n    }\n\n    getInstrumentsMeta(): InstrumentMeta | undefined {\n        return this._instruments.meta;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._instruments.errors && this._instruments.errors.loadError;\n    }\n\n    getDeleteError(instrumentId?: string): Error | undefined {\n        if (!this._instruments.errors || (instrumentId && this._instruments.errors.failedInstrument !== instrumentId)) {\n            return;\n        }\n\n        return this._instruments.errors.deleteError;\n    }\n\n    isLoading(): boolean {\n        return !!(this._instruments.statuses && this._instruments.statuses.isLoading);\n    }\n\n    isDeleting(instrumentId?: string): boolean {\n        if (!this._instruments.statuses || (instrumentId && this._instruments.statuses.deletingInstrument !== instrumentId)) {\n            return false;\n        }\n\n        return !!this._instruments.statuses.isDeleting;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport RemoteCheckoutState, { RemoteCheckoutStateData } from './remote-checkout-state';\n\n@selector\nexport default class RemoteCheckoutSelector {\n    constructor(\n        private _remoteCheckout: RemoteCheckoutState\n    ) {}\n\n    getCheckout<TMethodId extends keyof RemoteCheckoutStateData>(\n        methodId: TMethodId\n    ): RemoteCheckoutStateData[TMethodId] | undefined {\n        return this._remoteCheckout.data[methodId];\n    }\n}\n","import { Address } from '../address';\nimport { selector } from '../common/selector';\n\nimport ConsignmentState from './consignment-state';\n\n@selector\nexport default class ShippingAddressSelector {\n    constructor(\n        private _consignments: ConsignmentState\n    ) {}\n\n    getShippingAddress(): Address | undefined {\n        const consignments = this._consignments.data;\n\n        if (!consignments || !consignments[0]) {\n            return;\n        }\n\n        return consignments[0].shippingAddress;\n    }\n}\n","import { selector } from '../common/selector';\nimport { Country } from '../geography';\n\nimport ShippingCountryState from './shipping-country-state';\n\n@selector\nexport default class ShippingCountrySelector {\n    constructor(\n        private _shippingCountries: ShippingCountryState\n    ) {}\n\n    getShippingCountries(): Country[] | undefined {\n        return this._shippingCountries.data;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._shippingCountries.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return !!this._shippingCountries.statuses.isLoading;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport ShippingStrategyState from './shipping-strategy-state';\n\n@selector\nexport default class ShippingStrategySelector {\n    constructor(\n        private _shippingStrategies: ShippingStrategyState\n    ) {}\n\n    getUpdateAddressError(methodId?: string): Error | undefined {\n        if (methodId && this._shippingStrategies.errors.updateAddressMethodId !== methodId) {\n            return;\n        }\n\n        return this._shippingStrategies.errors.updateAddressError;\n    }\n\n    getSelectOptionError(methodId?: string): Error | undefined {\n        if (methodId && this._shippingStrategies.errors.selectOptionMethodId !== methodId) {\n            return;\n        }\n\n        return this._shippingStrategies.errors.selectOptionError;\n    }\n\n    getInitializeError(methodId?: string): Error | undefined {\n        if (methodId && this._shippingStrategies.errors.initializeMethodId !== methodId) {\n            return;\n        }\n\n        return this._shippingStrategies.errors.initializeError;\n    }\n\n    isUpdatingAddress(methodId?: string): boolean {\n        if (methodId && this._shippingStrategies.statuses.updateAddressMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._shippingStrategies.statuses.isUpdatingAddress;\n    }\n\n    isSelectingOption(methodId?: string): boolean {\n        if (methodId && this._shippingStrategies.statuses.selectOptionMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._shippingStrategies.statuses.isSelectingOption;\n    }\n\n    isInitializing(methodId?: string): boolean {\n        if (methodId && this._shippingStrategies.statuses.initializeMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._shippingStrategies.statuses.isInitializing;\n    }\n\n    isInitialized(methodId: string): boolean {\n        return !!(\n            this._shippingStrategies.data[methodId] &&\n            this._shippingStrategies.data[methodId].isInitialized\n        );\n    }\n}\n","import { identity, isEqual, pickBy } from 'lodash';\n\nimport Address from './address';\n\nexport default function isAddressEqual(addressA: Partial<Address>, addressB: Partial<Address>): boolean {\n    return isEqual(normalize(addressA), normalize(addressB));\n}\n\nfunction normalize(address: Partial<Address>): Partial<Address> {\n    return pickBy({\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        address1: address.address1,\n        address2: address.address2,\n        city: address.city,\n        stateOrProvince: address.stateOrProvince,\n        countryCode: address.countryCode,\n        postalCode: address.postalCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    }, identity);\n}\n","import { find } from 'lodash';\n\nimport { isAddressEqual, AddressRequestBody } from '../address';\nimport { CartSelector, PhysicalItem } from '../cart';\nimport { selector } from '../common/selector';\n\nimport Consignment from './consignment';\nimport ConsignmentState from './consignment-state';\nimport ShippingOption from './shipping-option';\n\n@selector\nexport default class ConsignmentSelector {\n    constructor(\n        private _consignments: ConsignmentState,\n        private _cart: CartSelector\n    ) {}\n\n    getConsignments(): Consignment[] | undefined {\n        return this._consignments.data;\n    }\n\n    getConsignmentById(id: string): Consignment | undefined {\n        const consignments = this._consignments.data;\n\n        if (!consignments || !consignments.length) {\n            return;\n        }\n\n        return find(consignments, { id });\n    }\n\n    getConsignmentByAddress(address: AddressRequestBody): Consignment | undefined {\n        const consignments = this._consignments.data;\n\n        if (!consignments || !consignments.length) {\n            return;\n        }\n\n        return find(consignments, consignment =>\n            isAddressEqual(consignment.shippingAddress, address)\n        );\n    }\n\n    getShippingOption(): ShippingOption | undefined {\n        const consignments = this._consignments.data;\n\n        if (consignments && consignments.length) {\n            return consignments[0].selectedShippingOption;\n        }\n    }\n\n    getLoadError(): Error | undefined {\n        return this._consignments.errors.loadError;\n    }\n\n    getCreateError(): Error | undefined {\n        return this._consignments.errors.createError;\n    }\n\n    getLoadShippingOptionsError(): Error | undefined {\n        return this._consignments.errors.loadShippingOptionsError;\n    }\n\n    getUnassignedItems(): PhysicalItem[] {\n        const cart = this._cart.getCart();\n\n        if (!cart) {\n            return [];\n        }\n\n        const assignedLineItemIds = (this.getConsignments() || []).reduce(\n            (itemIds, consignment) => itemIds.concat(consignment.lineItemIds),\n            [] as string[]\n        );\n\n        return (cart.lineItems.physicalItems || []).filter(\n            item => assignedLineItemIds.indexOf(item.id as string) < 0\n        );\n    }\n\n    getUpdateError(consignmentId?: string): Error | undefined {\n        if (consignmentId) {\n            return this._consignments.errors.updateError[consignmentId];\n        }\n\n        return find(this._consignments.errors.updateError);\n    }\n\n    getDeleteError(consignmentId?: string): Error | undefined {\n        if (consignmentId) {\n            return this._consignments.errors.deleteError[consignmentId];\n        }\n\n        return find(this._consignments.errors.deleteError);\n    }\n\n    getItemAssignmentError(address: AddressRequestBody): Error | undefined {\n        const consignment = this.getConsignmentByAddress(address);\n\n        return consignment ? this.getUpdateError(consignment.id) : this.getCreateError();\n    }\n\n    getUpdateShippingOptionError(consignmentId?: string): Error | undefined {\n        if (consignmentId) {\n            return this._consignments.errors.updateShippingOptionError[consignmentId];\n        }\n\n        return find(this._consignments.errors.updateShippingOptionError);\n    }\n\n    isLoading(): boolean {\n        return this._consignments.statuses.isLoading === true;\n    }\n\n    isLoadingShippingOptions(): boolean {\n        return this._consignments.statuses.isLoadingShippingOptions === true;\n    }\n\n    isCreating(): boolean {\n        return this._consignments.statuses.isCreating === true;\n    }\n\n    isUpdating(consignmentId?: string): boolean {\n        if (consignmentId) {\n            return this._consignments.statuses.isUpdating[consignmentId] === true;\n        }\n\n        return find(this._consignments.statuses.isUpdating) === true;\n    }\n\n    isDeleting(consignmentId?: string): boolean {\n        if (consignmentId) {\n            return this._consignments.statuses.isDeleting[consignmentId] === true;\n        }\n\n        return find(this._consignments.statuses.isDeleting) === true;\n    }\n\n    isAssigningItems(address: AddressRequestBody): boolean {\n        const consignment = this.getConsignmentByAddress(address);\n\n        return consignment ? this.isUpdating(consignment.id) : this.isCreating();\n    }\n\n    isUpdatingShippingOption(consignmentId?: string): boolean {\n        if (consignmentId) {\n            return this._consignments.statuses.isUpdatingShippingOption[consignmentId] === true;\n        }\n\n        return find(this._consignments.statuses.isUpdatingShippingOption) === true;\n    }\n}\n","import { BillingAddressSelector } from '../billing';\nimport { CartSelector } from '../cart';\nimport { selector } from '../common/selector';\nimport { CouponSelector, GiftCertificateSelector } from '../coupon';\nimport { CustomerSelector } from '../customer';\nimport { ConsignmentSelector } from '../shipping';\n\nimport Checkout from './checkout';\nimport CheckoutState from './checkout-state';\n\n@selector\nexport default class CheckoutSelector {\n    constructor(\n        private _checkout: CheckoutState,\n        private _billingAddress: BillingAddressSelector,\n        private _cart: CartSelector,\n        private _consignments: ConsignmentSelector,\n        private _coupons: CouponSelector,\n        private _customer: CustomerSelector,\n        private _giftCertificates: GiftCertificateSelector\n    ) {}\n\n    getCheckout(): Checkout | undefined {\n        const { data } = this._checkout;\n        const billingAddress = this._billingAddress.getBillingAddress();\n        const cart = this._cart.getCart();\n        const customer = this._customer.getCustomer();\n        const consignments = this._consignments.getConsignments() || [];\n        const coupons = this._coupons.getCoupons() || [];\n        const giftCertificates = this._giftCertificates.getGiftCertificates() || [];\n\n        if (!data || !cart || !customer) {\n            return;\n        }\n\n        return {\n            ...data,\n            billingAddress,\n            cart,\n            customer,\n            consignments,\n            coupons,\n            giftCertificates,\n        };\n    }\n\n    getGrandTotal(useStoreCredit?: boolean): number | undefined {\n        const checkout = this.getCheckout();\n\n        if (!checkout) {\n            return;\n        }\n\n        const grandTotal = checkout.grandTotal || 0;\n        const storeCredit = checkout.customer.storeCredit || 0;\n\n        return useStoreCredit ? Math.max(grandTotal - storeCredit, 0) : grandTotal;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._checkout.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return this._checkout.statuses.isLoading === true;\n    }\n\n    getUpdateError(): Error | undefined {\n        return this._checkout.errors.updateError;\n    }\n\n    isUpdating(): boolean {\n        return this._checkout.statuses.isUpdating === true;\n    }\n}\n","import { createBillingAddressSelectorFactory } from '../billing';\nimport { createCartSelectorFactory } from '../cart/cart-selector';\nimport { CheckoutButtonSelector } from '../checkout-buttons';\nimport { createFreezeProxies } from '../common/utility';\nimport { ConfigSelector } from '../config';\nimport { createCouponSelectorFactory, createGiftCertificateSelectorFactory } from '../coupon';\nimport { CustomerSelector, CustomerStrategySelector } from '../customer';\nimport { FormSelector } from '../form';\nimport { CountrySelector } from '../geography';\nimport { createOrderSelectorFactory } from '../order';\nimport { PaymentMethodSelector, PaymentSelector, PaymentStrategySelector } from '../payment';\nimport { InstrumentSelector } from '../payment/instrument';\nimport { RemoteCheckoutSelector } from '../remote-checkout';\nimport { ConsignmentSelector, ShippingAddressSelector, ShippingCountrySelector, ShippingStrategySelector } from '../shipping';\n\nimport CheckoutSelector from './checkout-selector';\nimport { CheckoutStoreOptions } from './checkout-store';\nimport CheckoutStoreState from './checkout-store-state';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\nexport type InternalCheckoutSelectorsFactory = (\n    state: CheckoutStoreState,\n    options?: CheckoutStoreOptions\n) => InternalCheckoutSelectors;\n\nexport function createInternalCheckoutSelectorsFactory(): InternalCheckoutSelectorsFactory {\n    const createBillingAddressSelector = createBillingAddressSelectorFactory();\n    const createCartSelector = createCartSelectorFactory();\n    const createCouponSelector = createCouponSelectorFactory();\n    const createGiftCertificateSelector = createGiftCertificateSelectorFactory();\n    const createOrderSelector = createOrderSelectorFactory();\n\n    return (state, options = {}) => {\n        const billingAddress = createBillingAddressSelector(state.billingAddress);\n        const cart = createCartSelector(state.cart);\n        const checkoutButton = new CheckoutButtonSelector(state.checkoutButton);\n        const config = new ConfigSelector(state.config);\n        const countries = new CountrySelector(state.countries);\n        const coupons = createCouponSelector(state.coupons);\n        const customer = new CustomerSelector(state.customer);\n        const customerStrategies = new CustomerStrategySelector(state.customerStrategies);\n        const form = new FormSelector(state.config);\n        const giftCertificates = createGiftCertificateSelector(state.giftCertificates);\n        const instruments = new InstrumentSelector(state.instruments);\n        const paymentMethods = new PaymentMethodSelector(state.paymentMethods);\n        const paymentStrategies = new PaymentStrategySelector(state.paymentStrategies);\n        const shippingAddress = new ShippingAddressSelector(state.consignments);\n        const remoteCheckout = new RemoteCheckoutSelector(state.remoteCheckout);\n        const shippingCountries = new ShippingCountrySelector(state.shippingCountries);\n        const shippingStrategies = new ShippingStrategySelector(state.shippingStrategies);\n\n        // Compose selectors\n        const consignments = new ConsignmentSelector(state.consignments, cart);\n        const checkout = new CheckoutSelector(state.checkout, billingAddress, cart, consignments, coupons, customer, giftCertificates);\n        const order = createOrderSelector(state.order, billingAddress, coupons);\n        const payment = new PaymentSelector(checkout, order);\n\n        const selectors = {\n            billingAddress,\n            cart,\n            checkout,\n            checkoutButton,\n            config,\n            consignments,\n            countries,\n            coupons,\n            customer,\n            customerStrategies,\n            form,\n            giftCertificates,\n            instruments,\n            order,\n            payment,\n            paymentMethods,\n            paymentStrategies,\n            remoteCheckout,\n            shippingAddress,\n            shippingCountries,\n            shippingStrategies,\n        };\n\n        return options.shouldWarnMutation ? createFreezeProxies(selectors) : selectors;\n    };\n}\n\nexport default function createInternalCheckoutSelectors(\n    state: CheckoutStoreState,\n    options?: CheckoutStoreOptions\n): InternalCheckoutSelectors {\n    return createInternalCheckoutSelectorsFactory()(state, options);\n}\n","import { createSelector } from '../common/selector';\nimport { memoizeOne } from '../common/utility';\n\nimport BillingAddress from './billing-address';\nimport BillingAddressState, { DEFAULT_STATE } from './billing-address-state';\n\nexport default interface BillingAddressSelector {\n    getBillingAddress(): BillingAddress | undefined;\n    getUpdateError(): Error | undefined;\n    getContinueAsGuestError(): Error | undefined;\n    getLoadError(): Error | undefined;\n    isUpdating(): boolean;\n    isContinuingAsGuest(): boolean;\n    isLoading(): boolean;\n}\n\nexport type BillingAddressSelectorFactory = (state: BillingAddressState) => BillingAddressSelector;\n\nexport function createBillingAddressSelectorFactory(): BillingAddressSelectorFactory {\n    const getBillingAddress = createSelector(\n        (state: BillingAddressState) => state.data,\n        data => () => data\n    );\n\n    const getUpdateError = createSelector(\n        (state: BillingAddressState) => state.errors.updateError,\n        error => () => error\n    );\n\n    const getContinueAsGuestError = createSelector(\n        (state: BillingAddressState) => state.errors.continueAsGuestError,\n        error => () => error\n    );\n\n    const getLoadError = createSelector(\n        (state: BillingAddressState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const isUpdating = createSelector(\n        (state: BillingAddressState) => !!state.statuses.isUpdating,\n        status => () => status\n    );\n\n    const isContinuingAsGuest = createSelector(\n        (state: BillingAddressState) => !!state.statuses.isContinuingAsGuest,\n        status => () => status\n    );\n\n    const isLoading = createSelector(\n        (state: BillingAddressState) => !!state.statuses.isLoading,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: BillingAddressState = DEFAULT_STATE\n    ): BillingAddressSelector => {\n        return {\n            getBillingAddress: getBillingAddress(state),\n            getUpdateError: getUpdateError(state),\n            getContinueAsGuestError: getContinueAsGuestError(state),\n            getLoadError: getLoadError(state),\n            isUpdating: isUpdating(state),\n            isContinuingAsGuest: isContinuingAsGuest(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { RequestError } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { memoizeOne } from '../common/utility';\n\nimport Coupon from './coupon';\nimport CouponState, { DEFAULT_STATE } from './coupon-state';\n\nexport default interface CouponSelector {\n    getCoupons(): Coupon[] | undefined;\n    getRemoveError(): RequestError | undefined;\n    getApplyError(): RequestError | undefined;\n    isApplying(): boolean;\n    isRemoving(): boolean;\n}\n\nexport type CouponSelectorFactory = (state: CouponState) => CouponSelector;\n\nexport function createCouponSelectorFactory(): CouponSelectorFactory {\n    const getCoupons = createSelector(\n        (state: CouponState) => state.data,\n        data => () => data\n    );\n\n    const getRemoveError = createSelector(\n        (state: CouponState) => state.errors.removeCouponError,\n        error => () => error\n    );\n\n    const getApplyError = createSelector(\n        (state: CouponState) => state.errors.applyCouponError,\n        error => () => error\n    );\n\n    const isApplying = createSelector(\n        (state: CouponState) => !!state.statuses.isApplyingCoupon,\n        status => () => status\n    );\n\n    const isRemoving = createSelector(\n        (state: CouponState) => !!state.statuses.isRemovingCoupon,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: CouponState = DEFAULT_STATE\n    ): CouponSelector => {\n        return {\n            getCoupons: getCoupons(state),\n            getRemoveError: getRemoveError(state),\n            getApplyError: getApplyError(state),\n            isApplying: isApplying(state),\n            isRemoving: isRemoving(state),\n        };\n    });\n}\n","import { createSelector } from '../common/selector';\nimport { memoizeOne } from '../common/utility';\n\nimport Cart from './cart';\nimport CartState, { DEFAULT_STATE } from './cart-state';\n\nexport default interface CartSelector {\n    getCart(): Cart | undefined;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type CartSelectorFactory = (state: CartState) => CartSelector;\n\nexport function createCartSelectorFactory() {\n    const getCart = createSelector(\n        (state: CartState) => state.data,\n        cart => () => cart\n    );\n\n    const getLoadError = createSelector(\n        (state: CartState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const isLoading = createSelector(\n        (state: CartState) => !!state.statuses.isLoading,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: CartState = DEFAULT_STATE\n    ): CartSelector => {\n        return {\n            getCart: getCart(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { memoizeOne } from '../common/utility';\n\nimport GiftCertificate from './gift-certificate';\nimport GiftCertificateState, { DEFAULT_STATE } from './gift-certificate-state';\n\nexport default interface GiftCertificateSelector {\n    getGiftCertificates(): GiftCertificate[] | undefined;\n    getRemoveError(): RequestError<StorefrontErrorResponseBody> | undefined;\n    getApplyError(): RequestError<StorefrontErrorResponseBody> | undefined;\n    isApplying(): boolean;\n    isRemoving(): boolean;\n}\n\nexport type GiftCertificateSelectorFactory = (state: GiftCertificateState) => GiftCertificateSelector;\n\nexport function createGiftCertificateSelectorFactory(): GiftCertificateSelectorFactory {\n    const getGiftCertificates = createSelector(\n        (state: GiftCertificateState) => state.data,\n        data => () => data\n    );\n\n    const getRemoveError = createSelector(\n        (state: GiftCertificateState) => state.errors.removeGiftCertificateError,\n        error => () => error\n    );\n\n    const getApplyError = createSelector(\n        (state: GiftCertificateState) => state.errors.applyGiftCertificateError,\n        error => () => error\n    );\n\n    const isApplying = createSelector(\n        (state: GiftCertificateState) => !!state.statuses.isApplyingGiftCertificate,\n        status => () => status\n    );\n\n    const isRemoving = createSelector(\n        (state: GiftCertificateState) => !!state.statuses.isRemovingGiftCertificate,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: GiftCertificateState = DEFAULT_STATE\n    ): GiftCertificateSelector => {\n        return {\n            getGiftCertificates: getGiftCertificates(state),\n            getRemoveError: getRemoveError(state),\n            getApplyError: getApplyError(state),\n            isApplying: isApplying(state),\n            isRemoving: isRemoving(state),\n        };\n    });\n}\n","import { BillingAddressSelector } from '../billing';\nimport { createSelector } from '../common/selector';\nimport { memoizeOne } from '../common/utility';\nimport { CouponSelector } from '../coupon';\n\nimport Order from './order';\nimport OrderState, { DEFAULT_STATE, OrderMetaState } from './order-state';\n\nexport default interface OrderSelector {\n    getOrder(): Order | undefined;\n    getOrderMeta(): OrderMetaState | undefined;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type OrderSelectorFactory = (\n    state: OrderState,\n    billingAddress: BillingAddressSelector,\n    coupons: CouponSelector\n) => OrderSelector;\n\ninterface OrderSelectorDependencies {\n    billingAddress: BillingAddressSelector;\n    coupons: CouponSelector;\n}\n\nexport function createOrderSelectorFactory(): OrderSelectorFactory {\n    const getOrder = createSelector(\n        (state: OrderState) => state.data,\n        (_: OrderState, { billingAddress }: OrderSelectorDependencies) => billingAddress.getBillingAddress(),\n        (_: OrderState, { coupons }: OrderSelectorDependencies) => coupons.getCoupons(),\n        (data, billingAddress, coupons = []) => () => {\n            if (!data || !billingAddress) {\n                return;\n            }\n\n            return {\n                ...data,\n                billingAddress,\n                coupons,\n            };\n        }\n    );\n\n    const getOrderMeta = createSelector(\n        (state: OrderState) => state.meta,\n        meta => () => meta\n    );\n\n    const getLoadError = createSelector(\n        (state: OrderState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const isLoading = createSelector(\n        (state: OrderState) => !!state.statuses.isLoading,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: OrderState = DEFAULT_STATE,\n        billingAddress: BillingAddressSelector,\n        coupons: CouponSelector\n    ): OrderSelector => {\n        return {\n            getOrder: getOrder(state, { billingAddress, coupons }),\n            getOrderMeta: getOrderMeta(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { createDataStore } from '@bigcommerce/data-store';\n\nimport { createRequestErrorFactory } from '../common/error';\n\nimport CheckoutStore, { CheckoutStoreOptions } from './checkout-store';\nimport CheckoutStoreState from './checkout-store-state';\nimport createActionTransformer from './create-action-transformer';\nimport createCheckoutStoreReducer from './create-checkout-store-reducer';\nimport { createInternalCheckoutSelectorsFactory } from './create-internal-checkout-selectors';\n\nexport default function createCheckoutStore(\n    initialState: Partial<CheckoutStoreState> = {},\n    options?: CheckoutStoreOptions\n): CheckoutStore {\n    const actionTransformer = createActionTransformer(createRequestErrorFactory());\n    const createInternalCheckoutSelectors = createInternalCheckoutSelectorsFactory();\n    const stateTransformer = (state: CheckoutStoreState) => createInternalCheckoutSelectors(state);\n\n    return createDataStore(\n        createCheckoutStoreReducer(),\n        initialState,\n        { actionTransformer, stateTransformer, ...options }\n    );\n}\n","import { Action } from '@bigcommerce/data-store';\nimport { from, Observable, Subscribable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { RequestErrorFactory } from '../common/error';\n\nexport default function createActionTransformer(\n    requestErrorFactory: RequestErrorFactory\n): (action: Subscribable<Action>) => Observable<Action> {\n    return action$ => from(action$).pipe(catchError<Action, never>(action => {\n        if (action instanceof Error || action.payload instanceof Error) {\n            throw action;\n        }\n\n        if (isResponse(action.payload)) {\n            const message = action.payload.body && action.payload.body.detail;\n\n            throw { ...action, payload: requestErrorFactory.createError(action.payload, message) };\n        }\n\n        throw action;\n    }));\n}\n\nfunction isResponse(object: any) {\n    if (!object || typeof object !== 'object') {\n        return false;\n    }\n\n    return ['body', 'headers', 'status', 'statusText'].every(key =>\n        object.hasOwnProperty(key)\n    );\n}\n","import { PaymentMethodInvalidError } from '../../payment/errors';\n\nimport { UnrecoverableError } from './errors';\nimport RequestErrorFactory from './request-error-factory';\n\nexport default function createRequestErrorFactory(): RequestErrorFactory {\n    const factory = new RequestErrorFactory();\n\n    const unrecoverableErrorTypes = [\n        'catalog_only',\n        'empty_cart',\n        'invalid_order_id',\n        'invalid_order_token',\n        'missing_order_token',\n        'missing_provider_token',\n        'missing_shipping_method',\n        'order_completion_error',\n        'order_could_not_be_finalized_error',\n        'order_create_failed',\n        'provider_fatal_error',\n        'provider_setup_error',\n        'stock_too_low',\n    ];\n\n    unrecoverableErrorTypes.forEach(type => {\n        factory.register(type, (response, message) => new UnrecoverableError(response, message));\n    });\n\n    factory.register('invalid_payment_provider', response => new PaymentMethodInvalidError(response));\n    factory.register('payment_config_not_found', response => new PaymentMethodInvalidError(response));\n\n    return factory;\n}\n","import { combineReducers, Action, Reducer } from '@bigcommerce/data-store';\n\nimport { billingAddressReducer } from '../billing';\nimport { cartReducer } from '../cart';\nimport { checkoutButtonReducer } from '../checkout-buttons';\nimport { configReducer } from '../config';\nimport { couponReducer, giftCertificateReducer } from '../coupon';\nimport { customerReducer, customerStrategyReducer } from '../customer';\nimport { countryReducer } from '../geography';\nimport { orderReducer } from '../order';\nimport { paymentMethodReducer, paymentReducer, paymentStrategyReducer } from '../payment';\nimport { instrumentReducer } from '../payment/instrument';\nimport { remoteCheckoutReducer } from '../remote-checkout';\nimport { consignmentReducer, shippingCountryReducer, shippingStrategyReducer } from '../shipping';\n\nimport checkoutReducer from './checkout-reducer';\nimport CheckoutStoreState from './checkout-store-state';\n\nexport default function createCheckoutStoreReducer(): Reducer<CheckoutStoreState, Action> {\n    return combineReducers({\n        billingAddress: billingAddressReducer,\n        cart: cartReducer,\n        checkout: checkoutReducer,\n        checkoutButton: checkoutButtonReducer,\n        config: configReducer,\n        consignments: consignmentReducer,\n        countries: countryReducer,\n        coupons: couponReducer,\n        customer: customerReducer,\n        customerStrategies: customerStrategyReducer,\n        giftCertificates: giftCertificateReducer,\n        instruments: instrumentReducer,\n        order: orderReducer,\n        payment: paymentReducer,\n        paymentMethods: paymentMethodReducer,\n        paymentStrategies: paymentStrategyReducer,\n        remoteCheckout: remoteCheckoutReducer,\n        shippingCountries: shippingCountryReducer,\n        shippingStrategies: shippingStrategyReducer,\n    });\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { InternalErrorResponseBody } from '../../common/error';\nimport { RequestError } from '../../common/error/errors';\n\nexport default class CheckoutNotAvailableError extends RequestError {\n    constructor(response: Response<InternalErrorResponseBody>) {\n        super(response, { message: response.body.title });\n\n        this.name = 'CheckoutNotAvailableError';\n        this.type = 'checkout_not_available';\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { joinIncludes, ContentType, RequestOptions } from '../common/http-request';\n\nimport Checkout, { CheckoutRequestBody } from './checkout';\nimport CHECKOUT_DEFAULT_INCLUDES from './checkout-default-includes';\nimport CheckoutParams from './checkout-params';\nimport { CheckoutNotAvailableError } from './errors';\n\nexport default class CheckoutRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadCheckout(id: string, { params, timeout }: RequestOptions<CheckoutParams> = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkout/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.get(url, {\n            params: {\n                include: joinIncludes([\n                    ...CHECKOUT_DEFAULT_INCLUDES,\n                    ...(params && params.include || []),\n                ]),\n            },\n            headers,\n            timeout,\n        }).catch(error => {\n            if (error.status >= 400 && error.status < 500) {\n                throw new CheckoutNotAvailableError(error);\n            }\n\n            throw error;\n        });\n    }\n\n    updateCheckout(id: string, body: CheckoutRequestBody, { params, timeout }: RequestOptions<CheckoutParams> = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkout/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.put(url, {\n            params: {\n                include: joinIncludes([\n                    ...CHECKOUT_DEFAULT_INCLUDES,\n                    ...(params && params.include || []),\n                ]),\n            },\n            body,\n            headers,\n            timeout,\n        });\n    }\n}\n","import Coupon from './coupon';\nimport InternalCoupon from './internal-coupon';\n\nconst couponTypes = [\n    'per_item_discount',\n    'percentage_discount',\n    'per_total_discount',\n    'shipping_discount',\n    'free_shipping',\n];\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalCoupon(coupon: Coupon): InternalCoupon {\n    return {\n        code: coupon.code,\n        discount: coupon.displayName,\n        discountType: couponTypes.indexOf(coupon.couponType),\n    };\n}\n","import { isBillingAddressLike } from '../billing';\nimport BillingAddress from '../billing/billing-address';\nimport { Consignment } from '../shipping';\n\nimport Address from './address';\nimport InternalAddress from './internal-address';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalAddress(address: Address | BillingAddress, consignments?: Consignment[]): InternalAddress {\n    let addressId;\n\n    if (isBillingAddressLike(address)) {\n        addressId = address.id;\n    } else if (consignments && consignments.length) {\n        addressId = consignments[0].id;\n    }\n\n    return {\n        id: addressId,\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        addressLine1: address.address1,\n        addressLine2: address.address2,\n        city: address.city,\n        province: address.stateOrProvince,\n        provinceCode: address.stateOrProvinceCode,\n        postCode: address.postalCode,\n        country: address.country,\n        countryCode: address.countryCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    };\n}\n","import Address from '../address/address';\n\nimport BillingAddress from './billing-address';\n\nexport default function isBillingAddressLike(address: Address): address is BillingAddress {\n    const billingAddress = address as BillingAddress;\n\n    return typeof billingAddress.id !== 'undefined';\n}\n","import { InternalCheckoutSelectors } from '../checkout';\nimport { selector } from '../common/selector';\n\nimport CheckoutButtonSelector from './checkout-button-selector';\nimport { CheckoutButtonMethodType } from './strategies';\n\n@selector\nexport default class CheckoutButtonErrorSelector {\n    private _checkoutButton: CheckoutButtonSelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._checkoutButton = selectors.checkoutButton;\n    }\n\n    getInitializeButtonError(methodId?: CheckoutButtonMethodType): Error | undefined {\n        return this._checkoutButton.getInitializeError(methodId);\n    }\n\n    getDeinitializeButtonError(methodId?: CheckoutButtonMethodType): Error | undefined {\n        return this._checkoutButton.getDeinitializeError(methodId);\n    }\n}\n","import { InternalCheckoutSelectors } from '../checkout';\nimport { selector } from '../common/selector';\n\nimport CheckoutButtonSelector from './checkout-button-selector';\nimport { CheckoutButtonMethodType } from './strategies';\n\n@selector\nexport default class CheckoutButtonStatusSelector {\n    private _checkoutButton: CheckoutButtonSelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._checkoutButton = selectors.checkoutButton;\n    }\n\n    isInitializingButton(methodId?: CheckoutButtonMethodType): boolean {\n        return this._checkoutButton.isInitializing(methodId);\n    }\n\n    isDeinitializingButton(methodId?: CheckoutButtonMethodType): boolean {\n        return this._checkoutButton.isDeinitializing(methodId);\n    }\n}\n","import { InternalCheckoutSelectors } from '../checkout';\n\nimport CheckoutButtonErrorSelector from './checkout-button-error-selector';\nimport CheckoutButtonSelectors from './checkout-button-selectors';\nimport CheckoutButtonStatusSelector from './checkout-button-status-selector';\n\nexport default function createCheckoutButtonSelectors(selectors: InternalCheckoutSelectors): CheckoutButtonSelectors {\n    const errors = new CheckoutButtonErrorSelector(selectors);\n    const statuses = new CheckoutButtonStatusSelector(selectors);\n\n    return {\n        errors,\n        statuses,\n    };\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../checkout';\nimport { isElementId, setUniqueElementId } from '../common/dom';\nimport { bindDecorator as bind } from '../common/utility';\n\nimport { CheckoutButtonInitializeOptions, CheckoutButtonOptions } from './checkout-button-options';\nimport CheckoutButtonSelectors from './checkout-button-selectors';\nimport CheckoutButtonStrategyActionCreator from './checkout-button-strategy-action-creator';\nimport createCheckoutButtonSelectors from './create-checkout-button-selectors';\n\n@bind\nexport default class CheckoutButtonInitializer {\n    private _state: CheckoutButtonSelectors;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _store: CheckoutStore,\n        private _buttonStrategyActionCreator: CheckoutButtonStrategyActionCreator\n    ) {\n        this._state = createCheckoutButtonSelectors(this._store.getState());\n\n        this._store.subscribe(state => {\n            this._state = createCheckoutButtonSelectors(state);\n        });\n    }\n\n    /**\n     * Returns a snapshot of the current state.\n     *\n     * The method returns a new instance every time there is a change in the\n     * state. You can query the state by calling any of its getter methods.\n     *\n     * ```js\n     * const state = service.getState();\n     *\n     * console.log(state.errors.getInitializeButtonError());\n     * console.log(state.statuses.isInitializingButton());\n     * ```\n     *\n     * @returns The current customer's checkout state\n     */\n    getState(): CheckoutButtonSelectors {\n        return this._state;\n    }\n\n    /**\n     * Subscribes to any changes to the current state.\n     *\n     * The method registers a callback function and executes it every time there\n     * is a change in the current state.\n     *\n     * ```js\n     * service.subscribe(state => {\n     *     console.log(state.statuses.isInitializingButton());\n     * });\n     * ```\n     *\n     * The method can be configured to notify subscribers only regarding\n     * relevant changes, by providing a filter function.\n     *\n     * ```js\n     * const filter = state => state.errors.getInitializeButtonError();\n     *\n     * // Only trigger the subscriber when the cart changes.\n     * service.subscribe(state => {\n     *     console.log(state.errors.getInitializeButtonError())\n     * }, filter);\n     * ```\n     *\n     * @param subscriber - The function to subscribe to state changes.\n     * @param filters - One or more functions to filter out irrelevant state\n     * changes. If more than one function is provided, the subscriber will only\n     * be triggered if all conditions are met.\n     * @returns A function, if called, will unsubscribe the subscriber.\n     */\n    subscribe(\n        subscriber: (state: CheckoutButtonSelectors) => void,\n        ...filters: Array<(state: CheckoutButtonSelectors) => any>\n    ): () => void {\n        return this._store.subscribe(\n            () => subscriber(this.getState()),\n            state => state.checkoutButton.getState(),\n            ...filters.map(filter => (state: InternalCheckoutSelectors) => filter(createCheckoutButtonSelectors(state)))\n        );\n    }\n\n    /**\n     * Initializes the checkout button of a payment method.\n     *\n     * When the checkout button is initialized, it will be inserted into the DOM,\n     * ready to be interacted with by the customer.\n     *\n     * ```js\n     * initializer.initializeButton({\n     *     methodId: 'braintreepaypal',\n     *     containerId: 'checkoutButton',\n     *     braintreepaypal: {\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the checkout button.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeButton(options: CheckoutButtonInitializeOptions): Promise<CheckoutButtonSelectors> {\n        const containerIds = isElementId(options.containerId) ?\n            [options.containerId] :\n            setUniqueElementId(options.containerId, `${options.methodId}-container`);\n\n        return Promise.all(\n            containerIds.map(containerId => {\n                const action = this._buttonStrategyActionCreator.initialize({ ...options, containerId });\n                const queueId = `checkoutButtonStrategy:${options.methodId}:${containerId}`;\n\n                return this._store.dispatch(action, { queueId });\n            })\n        )\n            .then(() => this.getState());\n    }\n\n    /**\n     * De-initializes the checkout button by performing any necessary clean-ups.\n     *\n     * ```js\n     * await service.deinitializeButton({\n     *     methodId: 'braintreepaypal',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the checkout button.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeButton(options: CheckoutButtonOptions): Promise<CheckoutButtonSelectors> {\n        const action = this._buttonStrategyActionCreator.deinitialize(options);\n        const queueId = `checkoutButtonStrategy:${options.methodId}`;\n\n        return this._store.dispatch(action, { queueId })\n            .then(() => this.getState());\n    }\n}\n","enum CheckoutButtonMethodType {\n    BRAINTREE_PAYPAL = 'braintreepaypal',\n    BRAINTREE_PAYPAL_CREDIT = 'braintreepaypalcredit',\n    GOOGLEPAY_BRAINTREE = 'googlepaybraintree',\n    GOOGLEPAY_STRIPE = 'googlepaystripe',\n    MASTERPASS = 'masterpass',\n    PAYPALEXPRESS = 'paypalexpress',\n}\n\nexport default CheckoutButtonMethodType;\n","export default function isElementId(id: string): boolean {\n    return /^\\w[\\w\\-\\:\\.]*$/.test(id);\n}\n","import { uniqueId } from 'lodash';\n\nimport { InvalidArgumentError } from '../error/errors';\n\nexport default function setUniqueElementId(selector: string, idPrefix: string): string[] {\n    const containers = document.querySelectorAll(selector);\n\n    if (!containers.length) {\n        throw new InvalidArgumentError(`Unable to find any element with the specified selector: ${selector}`);\n    }\n\n    return Array.prototype.slice.call(containers)\n        .map((container: HTMLElement) => {\n            if (!container.id) {\n                container.id = uniqueId(idPrefix);\n            }\n\n            return container.id;\n        });\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, empty, of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { Registry } from '../common/registry';\nimport { PaymentMethodActionCreator } from '../payment';\n\nimport { CheckoutButtonActionType, DeinitializeButtonAction, InitializeButtonAction } from './checkout-button-actions';\nimport { CheckoutButtonInitializeOptions, CheckoutButtonOptions } from './checkout-button-options';\nimport { CheckoutButtonStrategy } from './strategies';\n\nexport default class CheckoutButtonStrategyActionCreator {\n    constructor(\n        private _registry: Registry<CheckoutButtonStrategy>,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): ThunkAction<InitializeButtonAction, InternalCheckoutSelectors> {\n        return store => {\n            const meta = { methodId: options.methodId, containerId: options.containerId };\n\n            if (store.getState().checkoutButton.isInitialized(options.methodId, options.containerId)) {\n                return empty();\n            }\n\n            return concat(\n                of(createAction(CheckoutButtonActionType.InitializeButtonRequested, undefined, meta)),\n                this._paymentMethodActionCreator.loadPaymentMethod(options.methodId, { timeout: options.timeout, useCache: true }),\n                defer(() => this._registry.get(options.methodId).initialize(options)\n                    .then(() => createAction(CheckoutButtonActionType.InitializeButtonSucceeded, undefined, meta)))\n            ).pipe(\n                catchError(error => throwErrorAction(CheckoutButtonActionType.InitializeButtonFailed, error, meta))\n            );\n        };\n    }\n\n    deinitialize(options: CheckoutButtonOptions): ThunkAction<DeinitializeButtonAction, InternalCheckoutSelectors> {\n        return store => {\n            const meta = { methodId: options.methodId };\n\n            if (!store.getState().checkoutButton.isInitialized(options.methodId)) {\n                return empty();\n            }\n\n            return concat(\n                of(createAction(CheckoutButtonActionType.DeinitializeButtonRequested, undefined, meta)),\n                defer(() => this._registry.get(options.methodId).deinitialize()\n                    .then(() => createAction(CheckoutButtonActionType.DeinitializeButtonSucceeded, undefined, meta)))\n            ).pipe(\n                catchError(error => throwErrorAction(CheckoutButtonActionType.DeinitializeButtonFailed, error, meta))\n            );\n        };\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { pick } from 'lodash';\n\nimport { Address, LegacyAddress } from '../../../address';\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, StandardError } from '../../../common/error/errors';\nimport { PaymentMethod } from '../../../payment';\nimport { BraintreeAddress, BraintreeError, BraintreePaypalCheckout, BraintreeSDKCreator, BraintreeTokenizePayload } from '../../../payment/strategies/braintree';\nimport { PaypalAuthorizeData, PaypalScriptLoader } from '../../../payment/strategies/paypal';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class BraintreePaypalButtonStrategy implements CheckoutButtonStrategy {\n    private _paypalCheckout?: BraintreePaypalCheckout;\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _braintreeSDKCreator: BraintreeSDKCreator,\n        private _paypalScriptLoader: PaypalScriptLoader,\n        private _formPoster: FormPoster,\n        private _offerCredit: boolean = false\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const paypalOptions = (this._offerCredit ? options.braintreepaypalcredit : options.braintreepaypal) || {};\n        const state = this._store.getState();\n        const paymentMethod = this._paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n        if (!paymentMethod || !paymentMethod.clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._braintreeSDKCreator.initialize(paymentMethod.clientToken);\n\n        return Promise.all([\n            this._braintreeSDKCreator.getPaypalCheckout(),\n            this._paypalScriptLoader.loadPaypal(),\n        ])\n            .then(([paypalCheckout, paypal]) => {\n                this._paypalCheckout = paypalCheckout;\n\n                const allowedSources = [];\n                const disallowedSources = [];\n\n                if (paypalOptions.allowCredit) {\n                    allowedSources.push(paypal.FUNDING.CREDIT);\n                } else {\n                    disallowedSources.push(paypal.FUNDING.CREDIT);\n                }\n\n                return paypal.Button.render({\n                    env: paymentMethod.config.testMode ? 'sandbox' : 'production',\n                    commit: paypalOptions.shouldProcessPayment ? true : false,\n                    funding: {\n                        allowed: allowedSources,\n                        disallowed: disallowedSources,\n                    },\n                    style: {\n                        shape: 'rect',\n                        label: this._offerCredit ? 'credit' : undefined,\n                        ...pick(paypalOptions.style, 'layout', 'size', 'color', 'label', 'shape', 'tagline', 'fundingicons'),\n                    },\n                    payment: () => this._setupPayment(paypalOptions.onPaymentError),\n                    onAuthorize: data => this._tokenizePayment(data, paypalOptions.shouldProcessPayment, paypalOptions.onAuthorizeError),\n                }, options.containerId);\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        this._paypalCheckout = undefined;\n        this._paymentMethod = undefined;\n\n        this._braintreeSDKCreator.teardown();\n\n        return Promise.resolve();\n    }\n\n    private _setupPayment(onError?: (error: BraintreeError | StandardError) => void): Promise<string> {\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(state => {\n                const checkout = state.checkout.getCheckout();\n                const config = state.config.getStoreConfig();\n                const customer = state.customer.getCustomer();\n                const address = customer && customer.addresses && customer.addresses[0];\n\n                if (!this._paypalCheckout) {\n                    throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n                }\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!config) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                return this._paypalCheckout.createPayment({\n                    flow: 'checkout',\n                    enableShippingAddress: true,\n                    shippingAddressEditable: false,\n                    shippingAddressOverride: address ? this._mapToBraintreeAddress(address) : undefined,\n                    amount: checkout.grandTotal,\n                    currency: config.currency.code,\n                    offerCredit: this._offerCredit,\n                });\n            })\n            .catch(error => {\n                if (onError) {\n                    onError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    private _tokenizePayment(\n        data: PaypalAuthorizeData,\n        shouldProcessPayment?: boolean,\n        onError?: (error: BraintreeError | StandardError) => void\n    ): Promise<BraintreeTokenizePayload> {\n        if (!this._paypalCheckout || !this._paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        const methodId = this._paymentMethod.id;\n\n        return Promise.all([\n            this._paypalCheckout.tokenizePayment(data),\n            this._braintreeSDKCreator.getDataCollector({ paypal: true }),\n        ])\n            .then(([payload, { deviceData }]) => {\n                this._formPoster.postForm('/checkout.php', {\n                    payment_type: 'paypal',\n                    provider: methodId,\n                    action: shouldProcessPayment ? 'process_payment' : 'set_external_checkout',\n                    nonce: payload.nonce,\n                    device_data: deviceData,\n                    shipping_address: JSON.stringify(this._mapToLegacyShippingAddress(payload)),\n                    billing_address: JSON.stringify(this._mapToLegacyBillingAddress(payload)),\n                });\n\n                return payload;\n            })\n            .catch(error => {\n                if (onError) {\n                    onError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    private _mapToLegacyShippingAddress(payload: BraintreeTokenizePayload): Partial<LegacyAddress> {\n        const shippingAddress = payload.details.shippingAddress;\n        const recipientName = shippingAddress && shippingAddress.recipientName || '';\n        const [firstName, lastName] = recipientName.split(' ');\n\n        return {\n            email: payload.details.email,\n            first_name: firstName,\n            last_name: lastName,\n            phone_number: shippingAddress && shippingAddress.phone || payload.details.phone,\n            address_line_1: shippingAddress && shippingAddress.line1,\n            address_line_2: shippingAddress && shippingAddress.line2,\n            city: shippingAddress && shippingAddress.city,\n            state: shippingAddress && shippingAddress.state,\n            country_code: shippingAddress && shippingAddress.countryCode,\n            postal_code: shippingAddress && shippingAddress.postalCode,\n        };\n    }\n\n    private _mapToLegacyBillingAddress(payload: BraintreeTokenizePayload): Partial<LegacyAddress> {\n        const billingAddress = payload.details.billingAddress;\n        const shippingAddress = payload.details.shippingAddress;\n\n        if (billingAddress) {\n            return {\n                email: payload.details.email,\n                first_name: billingAddress.firstName || payload.details.firstName,\n                last_name: billingAddress.lastName || payload.details.lastName,\n                phone_number: billingAddress.phone || payload.details.phone,\n                address_line_1: billingAddress.line1,\n                address_line_2: billingAddress.line2,\n                city: billingAddress.city,\n                state: billingAddress.state,\n                country_code: billingAddress.countryCode,\n                postal_code: billingAddress.postalCode,\n            };\n        }\n\n        return {\n            email: payload.details.email,\n            first_name: payload.details.firstName,\n            last_name: payload.details.lastName,\n            phone_number: payload.details.phone,\n            address_line_1: shippingAddress && shippingAddress.line1,\n            address_line_2: shippingAddress && shippingAddress.line2,\n            city: shippingAddress && shippingAddress.city,\n            state: shippingAddress && shippingAddress.state,\n            country_code: shippingAddress && shippingAddress.countryCode,\n            postal_code: shippingAddress && shippingAddress.postalCode,\n        };\n    }\n\n    private _mapToBraintreeAddress(address: Address): BraintreeAddress {\n        return {\n            line1: address.address1,\n            line2: address.address2,\n            city: address.city,\n            state: address.stateOrProvinceCode,\n            postalCode: address.postalCode,\n            countryCode: address.countryCode,\n            phone: address.phone,\n            recipientName: `${address.firstName} ${address.lastName}`,\n        };\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { InvalidArgumentError, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { GooglePayPaymentProcessor } from '../../../payment/strategies/googlepay';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class GooglePayButtonStrategy implements CheckoutButtonStrategy {\n    private _methodId?: string;\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _formPoster: FormPoster,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _googlePayPaymentProcessor: GooglePayPaymentProcessor\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { containerId, methodId } = options;\n\n        if (!containerId || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"containerId\" argument is not provided.');\n        }\n\n        this._methodId = methodId;\n\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(() => this._googlePayPaymentProcessor.initialize(this._getMethodId()))\n            .then(() => {\n                this._walletButton = this._createSignInButton(containerId);\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        if (this._walletButton && this._walletButton.parentNode) {\n            this._walletButton.parentNode.removeChild(this._walletButton);\n            this._walletButton = undefined;\n        }\n\n        return this._googlePayPaymentProcessor.deinitialize();\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const container = document.getElementById(containerId);\n\n        if (!container) {\n            throw new InvalidArgumentError('Unable to create sign-in button without valid container ID.');\n        }\n\n        const googlePayButton = this._googlePayPaymentProcessor.createButton(this._handleWalletButtonClick);\n\n        container.appendChild(googlePayButton);\n\n        return googlePayButton;\n    }\n\n    private _getMethodId(): string {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._methodId;\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): Promise<void> {\n        event.preventDefault();\n\n        return this._googlePayPaymentProcessor.displayWallet()\n            .then(paymentData => this._googlePayPaymentProcessor.handleSuccess(paymentData)\n            .then(() => {\n                if (paymentData.shippingAddress) {\n                    this._googlePayPaymentProcessor.updateShippingAddress(paymentData.shippingAddress);\n                }\n            }))\n            .then(() => this._onPaymentSelectComplete())\n            .catch(error => this._onError(error));\n    }\n\n    private _onPaymentSelectComplete(): void {\n        this._formPoster.postForm('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n        });\n    }\n\n    private _onError(error?: Error): void {\n        if (error && error.message !== 'CANCELED') {\n            throw error;\n        }\n    }\n}\n","import { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType\n} from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { getCallbackUrl, Masterpass, MasterpassCheckoutOptions, MasterpassScriptLoader } from '../../../payment/strategies/masterpass';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class MasterpassButtonStrategy implements CheckoutButtonStrategy {\n    private _masterpassClient?: Masterpass;\n    private _methodId?: string;\n    private _signInButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _masterpassScriptLoader: MasterpassScriptLoader\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { containerId, methodId } = options;\n\n        if (!containerId || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"containerId\" argument is not provided.');\n        }\n\n        this._methodId = methodId;\n\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!paymentMethod || !paymentMethod.initializationData.checkoutId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                return this._masterpassScriptLoader.load(paymentMethod.config.testMode);\n            })\n            .then(masterpass => {\n                this._masterpassClient = masterpass;\n                this._signInButton = this._createSignInButton(containerId);\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        if (this._signInButton && this._signInButton.parentNode) {\n            this._signInButton.removeEventListener('click', this._handleWalletButtonClick);\n            this._signInButton.parentNode.removeChild(this._signInButton);\n            this._signInButton = undefined;\n        }\n\n        return Promise.resolve();\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const buttonContainer = document.getElementById(containerId);\n\n        if (!buttonContainer) {\n            throw new Error('Need a container to place the button');\n        }\n\n        const button = document.createElement('input');\n\n        button.type = 'image';\n        button.src = 'https://static.masterpass.com/dyn/img/btn/global/mp_chk_btn_160x037px.svg';\n        buttonContainer.appendChild(button);\n\n        button.addEventListener('click', this._handleWalletButtonClick);\n\n        return button;\n    }\n\n    private _createMasterpassPayload(): MasterpassCheckoutOptions {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const paymentMethod = this._methodId ? state.paymentMethods.getPaymentMethod(this._methodId) : null;\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return {\n            checkoutId: paymentMethod.initializationData.checkoutId,\n            allowedCardTypes: paymentMethod.initializationData.allowedCardTypes,\n            amount: checkout.cart.cartAmount.toString(),\n            currency: checkout.cart.currency.code,\n            cartId: checkout.cart.id,\n            suppressShippingAddress: false,\n            callbackUrl: getCallbackUrl('cart'),\n        };\n    }\n\n    @bind\n    private _handleWalletButtonClick(): void {\n        if (!this._masterpassClient) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        this._masterpassClient.checkout(this._createMasterpassPayload());\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { pick } from 'lodash';\n\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, StandardError } from '../../../common/error/errors';\nimport { INTERNAL_USE_ONLY } from '../../../common/http-request';\nimport { PaymentMethod } from '../../../payment';\nimport { PaypalActions, PaypalAuthorizeData, PaypalClientToken, PaypalScriptLoader } from '../../../payment/strategies/paypal';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class PaypalButtonStrategy implements CheckoutButtonStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paypalScriptLoader: PaypalScriptLoader,\n        private _formPoster: FormPoster,\n        private _host: string = ''\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const paypalOptions = options.paypal;\n        const state = this._store.getState();\n        const paymentMethod = this._paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n        if (!paypalOptions) {\n            throw new InvalidArgumentError();\n        }\n\n        return this._paypalScriptLoader.loadPaypal()\n            .then(paypal => {\n                if (!paymentMethod || !paymentMethod.config.merchantId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const merchantId = paymentMethod.config.merchantId;\n                const env = paymentMethod.config.testMode ? 'sandbox' : 'production';\n                const clientToken: PaypalClientToken = { [env]: paypalOptions.clientId };\n\n                const allowedSources = [];\n                const disallowedSources = [];\n\n                if (paypalOptions.allowCredit) {\n                    allowedSources.push(paypal.FUNDING.CREDIT);\n                } else {\n                    disallowedSources.push(paypal.FUNDING.CREDIT);\n                }\n\n                return paypal.Button.render({\n                    env,\n                    client: clientToken,\n                    commit: paypalOptions.shouldProcessPayment,\n                    funding: {\n                        allowed: allowedSources,\n                        disallowed: disallowedSources,\n                    },\n                    style: {\n                        shape: 'rect',\n                        ...pick(paypalOptions.style, 'layout', 'size', 'color', 'label', 'shape', 'tagline', 'fundingicons'),\n                    },\n                    payment: (data, actions) => this._setupPayment(merchantId, actions, paypalOptions.onPaymentError),\n                    onAuthorize: (data, actions) => this._tokenizePayment(data, actions, paypalOptions.shouldProcessPayment, paypalOptions.onAuthorizeError),\n                }, options.containerId);\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        this._paymentMethod = undefined;\n\n        return Promise.resolve();\n    }\n\n    private _setupPayment(merchantId: string, actions?: PaypalActions, onError?: (error: StandardError) => void): Promise<string> {\n        if (!actions) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(state => {\n                const cart = state.cart.getCart();\n                const cartId = cart ? cart.id : '';\n\n                return actions.request.post(`${this._host}/api/storefront/payment/paypalexpress`, { merchantId, cartId }, {\n                    headers: {\n                        'X-API-INTERNAL': INTERNAL_USE_ONLY,\n                    },\n                });\n            })\n            .then(res => res.id)\n            .catch(error => {\n                if (onError) {\n                    onError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    private _tokenizePayment(\n        data: PaypalAuthorizeData,\n        actions?: PaypalActions,\n        shouldProcessPayment?: boolean,\n        onError?: (error: StandardError) => void\n    ): Promise<void> {\n        if (!this._paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        if (!actions) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        if (!data.paymentID || !data.payerID) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        const methodId = this._paymentMethod.id;\n\n        return actions.payment.get(data.paymentID).then(payload => {\n            this._formPoster.postForm('/checkout.php', {\n                payment_type: 'paypal',\n                provider: methodId,\n                action: shouldProcessPayment ? 'process_payment' : 'set_external_checkout',\n                paymentId: data.paymentID,\n                payerId: data.payerID,\n                payerInfo: JSON.stringify(payload.payer.payer_info),\n            });\n        });\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport { createCheckoutStore } from '../checkout';\nimport { PaymentMethodActionCreator, PaymentMethodRequestSender } from '../payment';\n\nimport CheckoutButtonInitializer from './checkout-button-initializer';\nimport CheckoutButtonInitializerOptions from './checkout-button-initializer-options';\nimport CheckoutButtonStrategyActionCreator from './checkout-button-strategy-action-creator';\nimport createCheckoutButtonRegistry from './create-checkout-button-registry';\n\n/**\n * Creates an instance of `CheckoutButtonInitializer`.\n *\n * @remarks\n * ```js\n * const initializer = createCheckoutButtonInitializer();\n *\n * initializer.initializeButton({\n *     methodId: 'braintreepaypal',\n *     braintreepaypal: {\n *         container: '#checkoutButton',\n *     },\n * });\n * ```\n *\n * @alpha\n * Please note that `CheckoutButtonInitializer` is currently in an early stage\n * of development. Therefore the API is unstable and not ready for public\n * consumption.\n *\n * @param options - A set of construction options.\n * @returns an instance of `CheckoutButtonInitializer`.\n */\nexport default function createCheckoutButtonInitializer(\n    options?: CheckoutButtonInitializerOptions\n): CheckoutButtonInitializer {\n    const host = options && options.host;\n    const store = createCheckoutStore();\n    const requestSender = createRequestSender({ host });\n    const formPoster = createFormPoster({ host });\n\n    return new CheckoutButtonInitializer(\n        store,\n        new CheckoutButtonStrategyActionCreator(\n            createCheckoutButtonRegistry(store, requestSender, formPoster, host),\n            new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender))\n        )\n    );\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { CheckoutActionCreator, CheckoutRequestSender, CheckoutStore } from '../checkout';\nimport { Registry } from '../common/registry';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { BraintreeScriptLoader, BraintreeSDKCreator } from '../payment/strategies/braintree';\nimport { createGooglePayPaymentProcessor, GooglePayBraintreeInitializer, GooglePayStripeInitializer } from '../payment/strategies/googlepay';\nimport { MasterpassScriptLoader } from '../payment/strategies/masterpass';\nimport { PaypalScriptLoader } from '../payment/strategies/paypal';\n\nimport { CheckoutButtonMethodType, CheckoutButtonStrategy } from './strategies';\nimport { BraintreePaypalButtonStrategy } from './strategies/braintree';\nimport { GooglePayButtonStrategy } from './strategies/googlepay';\nimport { MasterpassButtonStrategy } from './strategies/masterpass';\nimport { PaypalButtonStrategy } from './strategies/paypal';\n\nexport default function createCheckoutButtonRegistry(\n    store: CheckoutStore,\n    requestSender: RequestSender,\n    formPoster: FormPoster,\n    host?: string\n): Registry<CheckoutButtonStrategy, CheckoutButtonMethodType> {\n    const registry = new Registry<CheckoutButtonStrategy, CheckoutButtonMethodType>();\n    const scriptLoader = getScriptLoader();\n    const checkoutActionCreator = new CheckoutActionCreator(\n        new CheckoutRequestSender(requestSender),\n        new ConfigActionCreator(new ConfigRequestSender(requestSender))\n    );\n\n    registry.register(CheckoutButtonMethodType.BRAINTREE_PAYPAL, () =>\n        new BraintreePaypalButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new BraintreeSDKCreator(new BraintreeScriptLoader(scriptLoader)),\n            new PaypalScriptLoader(scriptLoader),\n            formPoster\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.BRAINTREE_PAYPAL_CREDIT, () =>\n        new BraintreePaypalButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new BraintreeSDKCreator(new BraintreeScriptLoader(scriptLoader)),\n            new PaypalScriptLoader(scriptLoader),\n            formPoster,\n            true\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.MASTERPASS, () =>\n        new MasterpassButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new MasterpassScriptLoader(scriptLoader)\n        ));\n\n    registry.register(CheckoutButtonMethodType.GOOGLEPAY_BRAINTREE, () =>\n        new GooglePayButtonStrategy(\n            store,\n            formPoster,\n            checkoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayBraintreeInitializer(\n                    new BraintreeSDKCreator(\n                        new BraintreeScriptLoader(scriptLoader)\n                    )\n                )\n            )\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.GOOGLEPAY_STRIPE, () =>\n        new GooglePayButtonStrategy(\n            store,\n            formPoster,\n            checkoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayStripeInitializer()\n            )\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.PAYPALEXPRESS, () =>\n        new PaypalButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new PaypalScriptLoader(scriptLoader),\n            formPoster,\n            host\n        )\n    );\n\n    return registry;\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport enum NotEmbeddableErrorType {\n    MissingContainer = 'missing_container',\n    MissingContent = 'missing_content',\n    UnknownError = 'unknown_error',\n}\n\nexport default class NotEmbeddableError extends StandardError {\n    constructor(\n        message?: string,\n        public subtype: NotEmbeddableErrorType = NotEmbeddableErrorType.UnknownError\n    ) {\n        super(message || 'Unable to embed the checkout form.');\n\n        this.name = 'NotEmbeddableError';\n        this.type = 'not_embeddable';\n    }\n}\n","import { default as storage } from 'local-storage-fallback';\n\nexport default class BrowserStorage {\n    constructor(\n        private _namespace: string\n    ) {}\n\n    getItem<TValue = any>(key: string): TValue | null {\n        const rawValue = storage.getItem(this.withNamespace(key));\n\n        if (rawValue === null) {\n            return null;\n        }\n\n        try {\n            return JSON.parse(rawValue);\n        } catch (error) {\n            // Clean up invalid values\n            this.removeItem(this.withNamespace(key));\n\n            return null;\n        }\n    }\n\n    getItemOnce<TValue = any>(key: string): TValue | null {\n        const value = this.getItem(key);\n\n        this.removeItem(key);\n\n        return value;\n    }\n\n    setItem<TValue = any>(key: string, value: TValue): void {\n        return storage.setItem(this.withNamespace(key), JSON.stringify(value));\n    }\n\n    removeItem(key: string): void {\n        return storage.removeItem(this.withNamespace(key));\n    }\n\n    private withNamespace(key: string): string {\n        return `${this._namespace}.${key}`;\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { InternalErrorResponseBody } from '../../common/error';\nimport { RequestError } from '../../common/error/errors';\n\nexport default class InvalidLoginTokenError extends RequestError {\n    constructor(response: Response<InternalErrorResponseBody>) {\n        super(response, { message: response.body.title });\n\n        this.name = 'InvalidLoginTokenError';\n        this.type = 'invalid_login_token';\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { IFrameComponent } from 'iframe-resizer';\n\nimport { BrowserStorage } from '../common/storage';\nimport { parseUrl } from '../common/url';\nimport { bindDecorator as bind } from '../common/utility';\n\nimport EmbeddedCheckoutError from './embedded-checkout-error';\nimport { EmbeddedCheckoutEventMap, EmbeddedCheckoutEventType } from './embedded-checkout-events';\nimport EmbeddedCheckoutOptions from './embedded-checkout-options';\nimport { InvalidLoginTokenError, NotEmbeddableError, NotEmbeddableErrorType } from './errors';\nimport { EmbeddedContentEvent, EmbeddedContentEventType } from './iframe-content/embedded-content-events';\nimport IframeEventListener from './iframe-event-listener';\nimport IframeEventPoster from './iframe-event-poster';\nimport LoadingIndicator from './loading-indicator';\nimport ResizableIframeCreator from './resizable-iframe-creator';\n\nconst CAN_RETRY_ALLOW_COOKIE = 'canRetryAllowCookie';\nconst IS_COOKIE_ALLOWED_KEY = 'isCookieAllowed';\n\n@bind\nexport default class EmbeddedCheckout {\n    private _iframe?: IFrameComponent;\n    private _isAttached: boolean;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _iframeCreator: ResizableIframeCreator,\n        private _messageListener: IframeEventListener<EmbeddedCheckoutEventMap>,\n        private _messagePoster: IframeEventPoster<EmbeddedContentEvent>,\n        private _loadingIndicator: LoadingIndicator,\n        private _requestSender: RequestSender,\n        private _storage: BrowserStorage,\n        private _location: Location,\n        private _options: EmbeddedCheckoutOptions\n    ) {\n        this._isAttached = false;\n\n        if (this._options.onComplete) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.CheckoutComplete, this._options.onComplete);\n        }\n\n        if (this._options.onError) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.CheckoutError, this._options.onError);\n        }\n\n        if (this._options.onLoad) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.CheckoutLoaded, this._options.onLoad);\n        }\n\n        if (this._options.onFrameLoad) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.FrameLoaded, this._options.onFrameLoad);\n        }\n\n        if (this._options.onSignOut) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.SignedOut, this._options.onSignOut);\n        }\n\n        this._messageListener.addListener(EmbeddedCheckoutEventType.FrameLoaded, () => this._configureStyles());\n    }\n\n    attach(): Promise<this> {\n        if (this._isAttached) {\n            return Promise.resolve(this);\n        }\n\n        this._isAttached = true;\n        this._messageListener.listen();\n        this._loadingIndicator.show(this._options.containerId);\n\n        return this._allowCookie()\n            .then(() => this._attemptLogin())\n            .then(url => this._iframeCreator.createFrame(url, this._options.containerId))\n            .then(iframe => {\n                this._iframe = iframe;\n\n                this._configureStyles();\n                this._loadingIndicator.hide();\n            })\n            .catch(error => {\n                this._isAttached = false;\n\n                return this._retryAllowCookie(error)\n                    .catch(() => {\n                        this._messageListener.trigger({\n                            type: EmbeddedCheckoutEventType.FrameError,\n                            payload: error,\n                        });\n\n                        this._loadingIndicator.hide();\n\n                        throw error;\n                    });\n            })\n            .then(() => this);\n    }\n\n    detach(): void {\n        if (!this._isAttached) {\n            return;\n        }\n\n        this._isAttached = false;\n        this._messageListener.stopListen();\n\n        if (this._iframe && this._iframe.parentNode) {\n            this._iframe.parentNode.removeChild(this._iframe);\n            this._iframe.iFrameResizer.close();\n        }\n    }\n\n    private _configureStyles(): void {\n        if (!this._iframe || !this._iframe.contentWindow || !this._options.styles) {\n            return;\n        }\n\n        this._messagePoster.setTarget(this._iframe.contentWindow);\n\n        this._messagePoster.post({\n            type: EmbeddedContentEventType.StyleConfigured,\n            payload: this._options.styles,\n        });\n    }\n\n    private _attemptLogin(): Promise<string> {\n        if (!/^\\/login\\/token/.test(parseUrl(this._options.url).pathname)) {\n            return Promise.resolve(this._options.url);\n        }\n\n        return this._requestSender.post(this._options.url)\n            .then(({ body: { redirectUrl } }) => redirectUrl)\n            .catch(response => Promise.reject(new InvalidLoginTokenError(response)));\n    }\n\n    /**\n     * This workaround is required for certain browsers (namely Safari) that\n     * prevent session cookies to be set for a third party website unless the\n     * user has recently visited such website. Therefore, before we attempt to\n     * login or set an active cart in the session, we need to first redirect the\n     * user to the domain of Embedded Checkout.\n     */\n    private _allowCookie(): Promise<void> {\n        if (this._storage.getItem(IS_COOKIE_ALLOWED_KEY)) {\n            // It could be possible that the flag is set to true but the browser\n            // has already removed the permission to store cookie. In that case,\n            // we should try to redirect the user again.\n            this._storage.setItem(CAN_RETRY_ALLOW_COOKIE, true);\n\n            return Promise.resolve();\n        }\n\n        this._storage.removeItem(CAN_RETRY_ALLOW_COOKIE);\n        this._storage.setItem(IS_COOKIE_ALLOWED_KEY, true);\n\n        const { origin } = parseUrl(this._options.url);\n        const redirectUrl = `${origin}/embedded-checkout/allow-cookie?returnUrl=${encodeURIComponent(this._location.href)}`;\n\n        document.body.style.visibility = 'hidden';\n        this._location.replace(redirectUrl);\n\n        return new Promise<never>(() => {});\n    }\n\n    private _retryAllowCookie(error: EmbeddedCheckoutError): Promise<void> {\n        const canRetry = (\n            this._storage.getItem(CAN_RETRY_ALLOW_COOKIE) &&\n            error instanceof NotEmbeddableError &&\n            error.subtype === NotEmbeddableErrorType.MissingContent\n        );\n\n        if (!canRetry) {\n            return Promise.reject();\n        }\n\n        this._storage.removeItem(CAN_RETRY_ALLOW_COOKIE);\n        this._storage.removeItem(IS_COOKIE_ALLOWED_KEY);\n\n        return this._allowCookie();\n    }\n}\n","import { LoadingIndicatorStyles } from './embedded-checkout-styles';\n\nconst DEFAULT_STYLES: LoadingIndicatorStyles = {\n    size: 70,\n    color: '#d9d9d9',\n    backgroundColor: '#ffffff',\n};\n\nconst ROTATION_ANIMATION = 'embedded-checkout-loading-indicator-rotation';\n\nexport default class LoadingIndicator {\n    private _container: HTMLElement;\n    private _indicator: HTMLElement;\n    private _styles: LoadingIndicatorStyles;\n\n    constructor(\n        options?: { styles?: LoadingIndicatorStyles }\n    ) {\n        this._styles = { ...DEFAULT_STYLES, ...options && options.styles };\n\n        this._defineAnimation();\n\n        this._container = this._buildContainer();\n        this._indicator = this._buildIndicator();\n\n        this._container.appendChild(this._indicator);\n    }\n\n    show(parentId?: string): void {\n        if (parentId) {\n            const parent = document.getElementById(parentId);\n\n            if (!parent) {\n                throw new Error('Unable to attach the loading indicator because the parent ID is not valid.');\n            }\n\n            parent.appendChild(this._container);\n        }\n\n        this._container.style.visibility = 'visible';\n        this._container.style.opacity = '1';\n    }\n\n    hide(): void {\n        const handleTransitionEnd = () => {\n            this._container.style.visibility = 'hidden';\n\n            this._container.removeEventListener('transitionend', handleTransitionEnd);\n        };\n\n        this._container.addEventListener('transitionend', handleTransitionEnd);\n\n        this._container.style.opacity = '0';\n    }\n\n    private _buildContainer(): HTMLElement {\n        const container = document.createElement('div');\n\n        container.style.display = 'block';\n        container.style.bottom = '0';\n        container.style.left = '0';\n        container.style.height = '100%';\n        container.style.width = '100%';\n        container.style.position = 'absolute';\n        container.style.right = '0';\n        container.style.top = '0';\n        container.style.transition = 'all 250ms ease-out';\n        container.style.opacity = '0';\n\n        return container;\n    }\n\n    private _buildIndicator(): HTMLElement {\n        const indicator = document.createElement('div');\n\n        indicator.style.display = 'block';\n        indicator.style.width = `${this._styles.size}px`;\n        indicator.style.height = `${this._styles.size}px`;\n        indicator.style.borderRadius = `${this._styles.size}px`;\n        indicator.style.border = 'solid 1px';\n        indicator.style.borderColor = `${this._styles.backgroundColor} ${this._styles.backgroundColor} ${this._styles.color} ${this._styles.color}`;\n        indicator.style.margin = '0 auto';\n        indicator.style.position = 'absolute';\n        indicator.style.left = '0';\n        indicator.style.right = '0';\n        indicator.style.top = '50%';\n        indicator.style.transform = 'translateY(-50%) rotate(0deg)';\n        indicator.style.transformStyle = 'preserve-3d';\n        indicator.style.animation = `${ROTATION_ANIMATION} 500ms infinite cubic-bezier(0.69, 0.31, 0.56, 0.83)`;\n\n        return indicator;\n    }\n\n    private _defineAnimation(): void {\n        // In order to define CSS animation, we need to insert a stylesheet into the host frame.\n        // We only have to do it once.\n        if (document.getElementById(ROTATION_ANIMATION)) {\n            return;\n        }\n\n        const style = document.createElement('style');\n\n        style.id = ROTATION_ANIMATION;\n\n        document.head.appendChild(style);\n\n        if (style.sheet instanceof CSSStyleSheet) {\n            style.sheet.insertRule(`\n                @keyframes ${ROTATION_ANIMATION} {\n                    0% { transform: translateY(-50%) rotate(0deg); }\n                    100% { transform: translateY(-50%) rotate(360deg); }\n                }\n            `);\n        }\n    }\n}\n","import { iframeResizer, IFrameComponent } from 'iframe-resizer';\n\nimport { parseUrl } from '../common/url';\n\nimport { EmbeddedCheckoutEventType } from './embedded-checkout-events';\nimport { NotEmbeddableError, NotEmbeddableErrorType } from './errors';\nimport isIframeEvent from './is-iframe-event';\n\nexport default class ResizableIframeCreator {\n    constructor(\n        private _options?: { timeout: number }\n    ) {}\n\n    createFrame(src: string, containerId: string): Promise<IFrameComponent> {\n        const container = document.getElementById(containerId);\n        const { timeout = 60000 } = this._options || {};\n\n        if (!container) {\n            throw new NotEmbeddableError(\n                'Unable to embed the iframe because the container element could not be found.',\n                NotEmbeddableErrorType.MissingContainer\n            );\n        }\n\n        const iframe = document.createElement('iframe');\n\n        iframe.src = src;\n        iframe.style.border = 'none';\n        iframe.style.display = 'none';\n        iframe.style.width = '100%';\n        iframe.allowPaymentRequest = true;\n\n        container.appendChild(iframe);\n\n        return this._toResizableFrame(iframe, timeout)\n            .catch(error => {\n                container.removeChild(iframe);\n\n                throw error;\n            });\n    }\n\n    private _toResizableFrame(iframe: HTMLIFrameElement, timeoutInterval: number): Promise<IFrameComponent> {\n        // Can't simply listen to `load` event because it always gets triggered even if there's an error.\n        // Instead, listen to the `load` inside the iframe and let the parent frame know when it happens.\n        return new Promise((resolve, reject) => {\n            const timeout = window.setTimeout(() => {\n                reject(new NotEmbeddableError('Unable to embed the iframe because the content could not be loaded.'));\n            }, timeoutInterval);\n\n            const handleMessage = (event: MessageEvent) => {\n                if (event.origin !== parseUrl(iframe.src).origin) {\n                    return;\n                }\n\n                if (isIframeEvent(event.data, EmbeddedCheckoutEventType.FrameError)) {\n                    teardown();\n                    reject(new NotEmbeddableError(event.data.payload.message, NotEmbeddableErrorType.MissingContent));\n                }\n\n                if (isIframeEvent(event.data, EmbeddedCheckoutEventType.FrameLoaded)) {\n                    iframe.style.display = '';\n\n                    const contentId = event.data.payload && event.data.payload.contentId;\n                    const iframes = iframeResizer({\n                        scrolling: false,\n                        sizeWidth: false,\n                        heightCalculationMethod: contentId ? 'taggedElement' : 'lowestElement',\n                    }, iframe);\n\n                    teardown();\n                    resolve(iframes[iframes.length - 1]);\n                }\n            };\n\n            const teardown = () => {\n                window.removeEventListener('message', handleMessage);\n                window.clearTimeout(timeout);\n            };\n\n            window.addEventListener('message', handleMessage);\n        });\n    }\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\n\nimport { BrowserStorage } from '../common/storage';\nimport { parseUrl } from '../common/url';\n\nimport EmbeddedCheckout from './embedded-checkout';\nimport { EmbeddedCheckoutEventMap } from './embedded-checkout-events';\nimport EmbeddedCheckoutOptions from './embedded-checkout-options';\nimport { EmbeddedContentEvent } from './iframe-content/embedded-content-events';\nimport IframeEventListener from './iframe-event-listener';\nimport IframeEventPoster from './iframe-event-poster';\nimport LoadingIndicator from './loading-indicator';\nimport ResizableIframeCreator from './resizable-iframe-creator';\n\nconst STORAGE_PREFIX = 'BigCommerce.EmbeddedCheckout';\n\n/**\n * Embed the checkout form in an iframe.\n *\n * @remarks\n * Once the iframe is embedded, it will automatically resize according to the\n * size of the checkout form. It will also notify the parent window when certain\n * events have occurred. i.e.: when the form is loaded and ready to be used.\n *\n * ```js\n * embedCheckout({\n *     url: 'https://checkout/url',\n *     containerId: 'container-id',\n * });\n * ```\n *\n * @param options - Options for embedding the checkout form.\n * @returns A promise that resolves to an instance of `EmbeddedCheckout`.\n */\nexport default function embedCheckout(options: EmbeddedCheckoutOptions): Promise<EmbeddedCheckout> {\n    const origin = parseUrl(options.url).origin;\n    const embeddedCheckout = new EmbeddedCheckout(\n        new ResizableIframeCreator(),\n        new IframeEventListener<EmbeddedCheckoutEventMap>(origin),\n        new IframeEventPoster<EmbeddedContentEvent>(origin),\n        new LoadingIndicator({ styles: options.styles && options.styles.loadingIndicator }),\n        createRequestSender(),\n        new BrowserStorage(STORAGE_PREFIX),\n        window.location,\n        options\n    );\n\n    return embeddedCheckout.attach();\n}\n","module.exports = require(\"@bigcommerce/bigpay-client\");","module.exports = require(\"messageformat\");","import { Response } from '@bigcommerce/request-sender';\n\nimport RequestError from './request-error';\n\nexport default class TimeoutError extends RequestError<{}> {\n    constructor(response?: Response) {\n        super(response, {\n            message: 'The request has timed out or aborted.',\n        });\n\n        this.name = 'TimeoutError';\n        this.type = 'timeout';\n    }\n}\n","import { memoize } from 'lodash';\n\nimport { bindDecorator, isEqual, isPrivate, CacheKeyResolver } from '../utility';\n\n/**\n * Decorates a class by patching all of its methods to cache their return values\n * and return them if they are called again with the same set of parameters. The\n * decorator also binds all the methods to the calling instance so it can be\n * destructed.\n */\nexport default function selectorDecorator<T extends Constructor<object>>(target: T): T {\n    const decoratedTarget = class extends target {};\n\n    Object.getOwnPropertyNames(target.prototype)\n        .forEach(key => {\n            const descriptor = Object.getOwnPropertyDescriptor(target.prototype, key);\n\n            if (!descriptor || key === 'constructor') {\n                return;\n            }\n\n            Object.defineProperty(\n                decoratedTarget.prototype,\n                key,\n                selectorMethodDecorator(target.prototype, key, descriptor)\n            );\n        });\n\n    return decoratedTarget;\n}\n\nfunction selectorMethodDecorator<T extends Method>(target: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T> {\n    if (typeof descriptor.value !== 'function') {\n        return descriptor;\n    }\n\n    let resolver = new CacheKeyResolver();\n    let method = descriptor.value;\n    let memoizedMethod = memoize(method, (...args) => resolver.getKey(...args));\n\n    return bindDecorator(target, key, {\n        get() {\n            const value = ((...args: any[]) => {\n                const cachedValue = memoizedMethod.call(this, ...args);\n\n                if (resolver.getUsedCount(...args) === 1) {\n                    return cachedValue;\n                }\n\n                const newValue = method.call(this, ...args);\n\n                if (isEqual(newValue, cachedValue, { keyFilter: key => !isPrivate(key) })) {\n                    return cachedValue;\n                }\n\n                memoizedMethod.cache.set(resolver.getKey(...args), newValue);\n\n                return newValue;\n            }) as T;\n\n            Object.defineProperty(this, key, { ...descriptor, value });\n\n            return value;\n        },\n        set(value) {\n            resolver = new CacheKeyResolver();\n            method = value;\n            memoizedMethod = memoize(method, (...args) => resolver.getKey(...args));\n        },\n    });\n}\n\nexport type Constructor<T> = new (...args: any[]) => T;\ntype Method = (...args: any[]) => any;\n","import { uniq } from 'lodash';\n\nexport default function joinIncludes(includes: string[]): string {\n    return uniq(includes).join(',');\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { cachableAction, ActionOptions } from '../common/data-store';\nimport { RequestOptions } from '../common/http-request';\n\nimport { ConfigRequestSender } from '.';\nimport { ConfigActionType, LoadConfigAction } from './config-actions';\n\nexport default class ConfigActionCreator {\n    constructor(\n        private _configRequestSender: ConfigRequestSender\n    ) {}\n\n    @cachableAction\n    loadConfig(options?: RequestOptions & ActionOptions): Observable<LoadConfigAction> {\n        return Observable.create((observer: Observer<LoadConfigAction>) => {\n            observer.next(createAction(ConfigActionType.LoadConfigRequested));\n\n            this._configRequestSender.loadConfig(options)\n                .then(response => {\n                    observer.next(createAction(ConfigActionType.LoadConfigSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConfigActionType.LoadConfigFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, INTERNAL_USE_ONLY, RequestOptions } from '../common/http-request';\n\nimport Config from './config';\n\nexport default class ConfigRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadConfig({ timeout }: RequestOptions = {}): Promise<Response<Config>> {\n        const url = '/api/storefront/checkout-settings';\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n        });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Response } from '@bigcommerce/request-sender';\nimport { Observable, Observer } from 'rxjs';\n\nimport { Checkout, InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType, StandardError } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { GuestCredentials } from '../customer';\n\nimport { BillingAddressRequestSender } from '.';\nimport { BillingAddressUpdateRequestBody } from './billing-address';\nimport { BillingAddressActionType, ContinueAsGuestAction, UpdateBillingAddressAction } from './billing-address-actions';\n\nexport default class BillingAddressActionCreator {\n    constructor(\n        private _requestSender: BillingAddressRequestSender\n    ) {}\n\n    continueAsGuest(\n        credentials: GuestCredentials,\n        options?: RequestOptions\n    ): ThunkAction<ContinueAsGuestAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ContinueAsGuestAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const customer = state.customer.getCustomer();\n\n            if (customer && !customer.isGuest) {\n                throw new StandardError('Cannot continue as guest: customer is logged in.');\n            }\n\n            const billingAddress = state.billingAddress.getBillingAddress();\n\n            let billingAddressRequestBody;\n\n            if (!billingAddress) {\n                billingAddressRequestBody = credentials;\n            } else {\n                const { country, ...existingBillingAddressRequestBody } = billingAddress;\n\n                billingAddressRequestBody = {\n                    ...existingBillingAddressRequestBody,\n                    ...credentials,\n                };\n            }\n\n            observer.next(createAction(BillingAddressActionType.ContinueAsGuestRequested));\n\n            this._createOrUpdateBillingAddress(checkout.id, billingAddressRequestBody, options)\n                .then(({ body }) => {\n                    observer.next(createAction(BillingAddressActionType.ContinueAsGuestSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(BillingAddressActionType.ContinueAsGuestFailed, response));\n                });\n        });\n    }\n\n    updateAddress(\n        address: Partial<BillingAddressUpdateRequestBody>,\n        options?: RequestOptions\n    ): ThunkAction<UpdateBillingAddressAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateBillingAddressAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(BillingAddressActionType.UpdateBillingAddressRequested));\n\n            const billingAddress = state.billingAddress.getBillingAddress();\n\n            // If email is not present in the address provided by the client, then\n            // fall back to the stored email as it could have been set separately\n            // using a convenience method. We can't rely on billingAddress having\n            // an ID to consider that there's a preexisting email, as billingAddress\n            // object from Order doesn't have an ID.\n            const billingAddressRequestBody = {\n                ...address,\n                email: typeof address.email === 'undefined' && billingAddress ? billingAddress.email : address.email,\n            };\n\n            if (billingAddress && billingAddress.id) {\n                billingAddressRequestBody.id = billingAddress.id;\n            }\n\n            this._createOrUpdateBillingAddress(checkout.id, billingAddressRequestBody, options)\n                .then(({ body }) => {\n                    observer.next(createAction(BillingAddressActionType.UpdateBillingAddressSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(BillingAddressActionType.UpdateBillingAddressFailed, response));\n                });\n        });\n    }\n\n    private _createOrUpdateBillingAddress(\n        checkoutId: string,\n        address: Partial<BillingAddressUpdateRequestBody>,\n        options?: RequestOptions\n    ): Promise<Response<Checkout>> {\n        if (!address.id) {\n            return this._requestSender.createAddress(checkoutId, address, options);\n        }\n\n        return this._requestSender.updateAddress(checkoutId, address, options);\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { AddressRequestBody } from '../address';\nimport { Checkout } from '../checkout';\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nimport { BillingAddressUpdateRequestBody } from './billing-address';\n\nconst DEFAULT_PARAMS = {\n    include: [\n        'cart.lineItems.physicalItems.options',\n        'cart.lineItems.digitalItems.options',\n        'customer',\n        'promotions.banners',\n    ].join(','),\n};\n\nexport default class BillingAddressRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    createAddress(checkoutId: string, address: Partial<AddressRequestBody>, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/billing-address`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, { body: address, params: DEFAULT_PARAMS, headers, timeout });\n    }\n\n    updateAddress(checkoutId: string, address: Partial<BillingAddressUpdateRequestBody>, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const { id, ...body } = address;\n        const url = `/api/storefront/checkouts/${checkoutId}/billing-address/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.put(url, { params: DEFAULT_PARAMS, body, headers, timeout });\n    }\n}\n","import { InvalidArgumentError } from '../error/errors';\n\nexport default class Registry<T, K extends string = string> {\n    private _factories: { [key: string]: Factory<T> };\n    private _instances: { [key: string]: T };\n    private _options: RegistryOptions;\n\n    constructor(options?: RegistryOptions) {\n        this._factories = {};\n        this._instances = {};\n        this._options = { defaultToken: 'default', ...options };\n    }\n\n    get(token?: K, cacheToken?: string): T {\n        try {\n            return this._getInstance(\n                token || this._options.defaultToken,\n                cacheToken || token || this._options.defaultToken\n            );\n        } catch (error) {\n            return this._getInstance(\n                this._options.defaultToken,\n                cacheToken || this._options.defaultToken\n            );\n        }\n    }\n\n    register(token: K, factory: Factory<T>): void {\n        if (this._hasFactory(token)) {\n            throw new InvalidArgumentError(`'${token}' is already registered.`);\n        }\n\n        this._factories[token] = factory;\n    }\n\n    protected _hasFactory(token: string): boolean {\n        return !!this._factories[token];\n    }\n\n    private _hasInstance(token: string): boolean {\n        return !!this._instances[token];\n    }\n\n    private _getInstance(token: string, cacheToken: string): T {\n        if (!this._hasInstance(cacheToken)) {\n            const factory = this._factories[token];\n\n            if (!factory) {\n                throw new InvalidArgumentError(`'${token}' is not registered.`);\n            }\n\n            this._instances[cacheToken] = factory();\n        }\n\n        return this._instances[cacheToken];\n    }\n}\n\nexport type Factory<T> = () => T;\n\nexport interface RegistryOptions {\n    defaultToken: string;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { Masterpass, MasterpassHostWindow } from './masterpass';\n\nexport default class MasterpassScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        public _window: MasterpassHostWindow = window\n    ) {}\n\n    load(testMode?: boolean): Promise<Masterpass> {\n        return this._scriptLoader\n            .loadScript(`//${testMode ? 'sandbox.' : ''}masterpass.com/integration/merchant.js`)\n            .then(() => {\n                if (!this._window.masterpass) {\n                    throw new StandardError();\n                }\n\n                return this._window.masterpass;\n            });\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class RemoteCheckoutSynchronizationError extends StandardError {\n    constructor(\n        public error?: Error\n    ) {\n        super('Unable to synchronize your checkout details with a third party provider. Please try again later.');\n\n        this.name = 'RemoteCheckoutSynchronizationError';\n        this.type = 'remote_checkout_synchronization';\n    }\n}\n","import { round } from 'lodash';\n\nimport { Checkout } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport PaymentMethod from '../../payment-method';\nimport { BraintreeSDKCreator, GooglePayBraintreeSDK } from '../braintree';\n\nimport {\n    GooglePaymentData,\n    GooglePayInitializer,\n    GooglePayPaymentDataRequestV2,\n    TokenizePayload\n} from './googlepay';\nimport { GooglePayBraintreeDataRequest, GooglePayBraintreePaymentDataRequestV1 } from './googlepay-braintree';\n\nexport default class GooglePayBraintreeInitializer implements GooglePayInitializer {\n    private _googlePaymentInstance!: GooglePayBraintreeSDK;\n\n    constructor(\n        private _braintreeSDKCreator: BraintreeSDKCreator\n    ) {}\n\n    initialize(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        if (!paymentMethod.clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._braintreeSDKCreator.initialize(paymentMethod.clientToken);\n\n        return this._braintreeSDKCreator.getGooglePaymentComponent()\n            .then(googleBraintreePaymentInstance => {\n                this._googlePaymentInstance = googleBraintreePaymentInstance;\n\n                return this._createGooglePayPayload(\n                    checkout,\n                    paymentMethod.initializationData,\n                    hasShippingAddress\n                );\n            });\n    }\n\n    teardown(): Promise<void> {\n        return this._braintreeSDKCreator.teardown();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): TokenizePayload {\n        const payload = JSON.parse(paymentData.paymentMethodData.tokenizationData.token).androidPayCards[0];\n\n        return {\n            nonce: payload.nonce,\n            type: payload.type,\n            description: payload.description,\n            details: {\n                cardType: payload.details.cardType,\n                lastFour: payload.details.lastFour,\n                lastTwo: payload.details.lastTwo,\n            },\n            binData: payload.binData,\n        };\n    }\n\n    private _createGooglePayPayload(\n        checkout: Checkout,\n        initializationData: any,\n        hasShippingAddress: boolean\n    ): GooglePayPaymentDataRequestV2 {\n        if (!initializationData.platformToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const googlePayBraintreePaymentDataRequest: GooglePayBraintreeDataRequest = {\n            merchantInfo: {\n                authJwt: initializationData.platformToken,\n                merchantName: initializationData.googleMerchantName,\n                merchantId: initializationData.googleMerchantId,\n            },\n            transactionInfo: {\n                currencyCode: checkout.cart.currency.code,\n                totalPriceStatus: 'FINAL',\n                totalPrice: round(checkout.grandTotal, 2).toFixed(2),\n            },\n            cardRequirements: {\n                billingAddressRequired: true,\n                billingAddressFormat: 'FULL',\n            },\n            shippingAddressRequired: !hasShippingAddress,\n            emailRequired: true,\n            phoneNumberRequired: true,\n        };\n\n        return this._mapGooglePayBraintreeDataRequestToGooglePayDataRequestV2(\n            this._googlePaymentInstance.createPaymentDataRequest(googlePayBraintreePaymentDataRequest)\n        );\n    }\n\n    private _mapGooglePayBraintreeDataRequestToGooglePayDataRequestV2(googlePayBraintreeDataRequestV1: GooglePayBraintreePaymentDataRequestV1): GooglePayPaymentDataRequestV2 {\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt: googlePayBraintreeDataRequestV1.merchantInfo.authJwt,\n                merchantId: googlePayBraintreeDataRequestV1.merchantInfo.merchantId,\n                merchantName: googlePayBraintreeDataRequestV1.merchantInfo.merchantName,\n            },\n            allowedPaymentMethods: [{\n                type: 'CARD',\n                parameters: {\n                    allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                    allowedCardNetworks: googlePayBraintreeDataRequestV1.cardRequirements.allowedCardNetworks,\n                    billingAddressRequired: true,\n                    billingAddressParameters: {\n                        format: 'FULL',\n                        phoneNumberRequired: true,\n                    },\n                },\n                tokenizationSpecification: {\n                    type: 'PAYMENT_GATEWAY',\n                    parameters: {\n                        gateway: 'braintree',\n                        'braintree:apiVersion': 'v1',\n                        'braintree:authorizationFingerprint': googlePayBraintreeDataRequestV1.paymentMethodTokenizationParameters.parameters['braintree:authorizationFingerprint'],\n                        'braintree:merchantId': googlePayBraintreeDataRequestV1.paymentMethodTokenizationParameters.parameters['braintree:merchantId'],\n                        'braintree:sdkVersion': googlePayBraintreeDataRequestV1.paymentMethodTokenizationParameters.parameters['braintree:sdkVersion'],\n                    },\n                },\n            }],\n            transactionInfo: googlePayBraintreeDataRequestV1.transactionInfo,\n            emailRequired: true,\n            shippingAddressRequired: googlePayBraintreeDataRequestV1.shippingAddressRequired,\n            shippingAddressParameters: {\n                phoneNumberRequired: googlePayBraintreeDataRequestV1.phoneNumberRequired,\n            },\n        };\n    }\n}\n","import { round } from 'lodash';\n\nimport { Checkout } from '../../../checkout';\nimport { InvalidArgumentError } from '../../../common/error/errors';\nimport PaymentMethod from '../../payment-method';\n\nimport {\n    GooglePaymentData,\n    GooglePayInitializer,\n    GooglePayPaymentDataRequestV2,\n    TokenizePayload\n} from './googlepay';\n\nexport default class GooglePayStripeInitializer implements GooglePayInitializer {\n    initialize(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        return Promise.resolve(this._mapGooglePayStripeDataRequestToGooglePayDataRequestV2(\n            checkout,\n            paymentMethod.initializationData,\n            hasShippingAddress\n        ));\n    }\n\n    teardown(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): TokenizePayload {\n        try {\n            const payload = JSON.parse(paymentData.paymentMethodData.tokenizationData.token);\n\n            return {\n                nonce: payload.id,\n                type: payload.type,\n                details: {\n                    cardType: payload.card.brand,\n                    lastFour: payload.card.last4,\n                },\n            };\n        } catch (err) {\n            throw new InvalidArgumentError('Unable to parse response from Google Pay.');\n        }\n    }\n\n    private _mapGooglePayStripeDataRequestToGooglePayDataRequestV2(\n        checkout: Checkout,\n        initializationData: any,\n        hasShippingAddress: boolean\n    ): GooglePayPaymentDataRequestV2 {\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt: initializationData.platformToken,\n                merchantId: initializationData.googleMerchantId,\n                merchantName: initializationData.googleMerchantName,\n            },\n            allowedPaymentMethods: [{\n                type: 'CARD',\n                parameters: {\n                    allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                    allowedCardNetworks: ['AMEX', 'DISCOVER', 'JCB', 'MASTERCARD', 'VISA'],\n                    billingAddressRequired: true,\n                    billingAddressParameters: {\n                        format: 'FULL',\n                        phoneNumberRequired: true,\n                    },\n                },\n                tokenizationSpecification: {\n                    type: 'PAYMENT_GATEWAY',\n                    parameters: {\n                        gateway: 'stripe',\n                        'stripe:version': initializationData.stripeVersion,\n                        'stripe:publishableKey': initializationData.stripePublishableKey,\n                    },\n                },\n            }],\n            transactionInfo: {\n                currencyCode: checkout.cart.currency.code,\n                totalPriceStatus: 'FINAL',\n                totalPrice: round(checkout.grandTotal, 2).toFixed(2),\n            },\n            emailRequired: true,\n            shippingAddressRequired: !hasShippingAddress,\n            shippingAddressParameters: {\n                phoneNumberRequired: true,\n            },\n        };\n    }\n}\n","import { mapToInternalAddress } from '../address';\nimport { BillingAddress } from '../billing';\n\nimport { Customer } from '.';\nimport InternalCustomer from './internal-customer';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalCustomer(customer: Customer, billingAddress: BillingAddress): InternalCustomer {\n    const firstName = customer.firstName || billingAddress.firstName || '';\n    const lastName = customer.lastName || billingAddress.lastName || '';\n\n    return {\n        addresses: (customer.addresses || []).map(address => mapToInternalAddress(address)),\n        customerId: customer.id,\n        isGuest: customer.isGuest,\n        storeCredit: customer.storeCredit,\n        email: customer.email || billingAddress.email || '',\n        firstName,\n        lastName,\n        name: customer.fullName || [firstName, lastName].join(' '),\n    };\n}\n","import GiftCertificate from './gift-certificate';\nimport InternalGiftCertificate from './internal-gift-certificate';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalGiftCertificate(giftCertificate: GiftCertificate): InternalGiftCertificate {\n    return {\n        code: giftCertificate.code,\n        discountedAmount: giftCertificate.used,\n        remainingBalance: giftCertificate.remaining,\n        giftCertificate: {\n            balance: giftCertificate.balance,\n            code: giftCertificate.code,\n            purchaseDate: giftCertificate.purchaseDate,\n        },\n    };\n}\n","import { filter, find, keyBy, reduce } from 'lodash';\n\nimport { mapToInternalLineItems, LineItem } from '../cart';\nimport { Checkout } from '../checkout';\nimport { AmountTransformer } from '../common/utility';\nimport { mapToInternalCoupon } from '../coupon';\nimport { HOSTED } from '../payment';\n\nimport InternalOrder, { InternalGiftCertificateList, InternalIncompleteOrder, InternalOrderPayment, InternalSocialDataList } from './internal-order';\nimport Order, { GatewayOrderPayment, GiftCertificateOrderPayment, OrderPayment, OrderPayments } from './order';\nimport { OrderMetaState } from './order-state';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalOrder(order: Order, orderMeta: OrderMetaState = {}): InternalOrder {\n    const decimalPlaces = order.currency.decimalPlaces;\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: order.orderId,\n        items: mapToInternalLineItems(order.lineItems, order.currency.decimalPlaces, 'productId'),\n        orderId: order.orderId,\n        currency: order.currency.code,\n        customerCanBeCreated: order.customerCanBeCreated,\n        payment: mapToInternalOrderPayment(order.payments, orderMeta.payment),\n        subtotal: {\n            amount: order.baseAmount,\n            integerAmount: amountTransformer.toInteger(order.baseAmount),\n        },\n        coupon: {\n            discountedAmount: reduce(order.coupons, (sum, coupon) => {\n                return sum + coupon.discountedAmount;\n            }, 0),\n            coupons: order.coupons.map(mapToInternalCoupon),\n        },\n        discount: {\n            amount: order.discountAmount,\n            integerAmount: amountTransformer.toInteger(order.discountAmount),\n        },\n        token: orderMeta.orderToken,\n        callbackUrl: orderMeta.callbackUrl,\n        discountNotifications: [],\n        giftCertificate: mapToGiftCertificates(order.payments),\n        socialData: mapToInternalSocialDataList(order),\n        status: order.status,\n        hasDigitalItems: order.hasDigitalItems,\n        isDownloadable: order.isDownloadable,\n        isComplete: order.isComplete,\n        shipping: {\n            amount: order.shippingCostTotal,\n            integerAmount: amountTransformer.toInteger(order.shippingCostTotal),\n            amountBeforeDiscount: order.shippingCostBeforeDiscount,\n            integerAmountBeforeDiscount: amountTransformer.toInteger(order.shippingCostBeforeDiscount),\n        },\n        storeCredit: {\n            amount: mapToStoreCredit(order.payments),\n        },\n        taxes: order.taxes,\n        taxTotal: {\n            amount: order.taxTotal,\n            integerAmount: amountTransformer.toInteger(order.taxTotal),\n        },\n        handling: {\n            amount: order.handlingCostTotal,\n            integerAmount: amountTransformer.toInteger(order.handlingCostTotal),\n        },\n        grandTotal: {\n            amount: order.orderAmount,\n            integerAmount: order.orderAmountAsInteger,\n        },\n    };\n}\n\nexport function mapToInternalIncompleteOrder(checkout: Checkout): InternalIncompleteOrder {\n    const payment = find(checkout.payments, { providerType: HOSTED });\n\n    return {\n        orderId: null,\n        isComplete: false,\n        payment: !payment ? {} : {\n            id: payment.providerId,\n            gateway: payment.gatewayId,\n            status: mapToInternalPaymentStatus(payment.detail.step),\n        },\n    };\n}\n\nfunction mapToInternalPaymentStatus(status: string): string {\n    return `PAYMENT_STATUS_${status}`;\n}\n\nfunction mapToStoreCredit(payments?: OrderPayments): number {\n    const item = find(payments, { providerId: 'storecredit' });\n\n    return item ? item.amount : 0;\n}\n\nfunction mapToGiftCertificates(payments?: OrderPayments): InternalGiftCertificateList {\n    const items = filter(payments, { providerId: 'giftcertificate' }) as GiftCertificateOrderPayment[];\n\n    return {\n        totalDiscountedAmount: reduce(items, (sum, item) => item.amount + sum, 0),\n        appliedGiftCertificates: keyBy(items.map(item => ({\n            code: item.detail.code,\n            discountedAmount: item.amount,\n            remainingBalance: item.detail.remaining,\n            giftCertificate: {\n                balance: item.amount + item.detail.remaining,\n                code: item.detail.code,\n                purchaseDate: '',\n            },\n        })), 'code'),\n    };\n}\n\nfunction mapToInternalOrderPayment(payments?: OrderPayments, payment: InternalOrderPayment = {}): InternalOrderPayment {\n    const item = find(payments, isDefaultOrderPayment) as GatewayOrderPayment;\n\n    if (!item) {\n        return {};\n    }\n\n    return {\n        id: item.providerId,\n        status: mapToInternalPaymentStatus(item.detail.step),\n        helpText: item.detail.instructions,\n        returnUrl: payment.returnUrl,\n    };\n}\n\nfunction isDefaultOrderPayment(payment: OrderPayment): payment is GatewayOrderPayment {\n    return payment.providerId !== 'giftcertificate' && payment.providerId !== 'storecredit';\n}\n\nfunction mapToInternalSocialDataList(order: Order): { [itemId: string]: InternalSocialDataList } | undefined {\n    const socialDataObject: { [itemId: string]: InternalSocialDataList } = {};\n    const items = [\n        ...order.lineItems.physicalItems,\n        ...order.lineItems.digitalItems,\n    ];\n\n    items.forEach(item => {\n        socialDataObject[item.id] = mapToInternalSocialData(item);\n    });\n\n    return socialDataObject;\n}\n\nfunction mapToInternalSocialData(lineItem: LineItem): InternalSocialDataList {\n    const codes = ['fb', 'tw', 'gp'];\n\n    return codes.reduce((socialData, code) => {\n        const item = lineItem.socialMedia && lineItem.socialMedia.find(item => item.code === code);\n\n        if (!item) {\n            return socialData;\n        }\n\n        socialData[code] = {\n            name: lineItem.name,\n            description: lineItem.name,\n            image: lineItem.imageUrl,\n            url: item.link,\n            shareText: item.text,\n            sharingLink: item.link,\n            channelName: item.channel,\n            channelCode: item.code,\n        };\n\n        return socialData;\n    }, {} as InternalSocialDataList);\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { PaypalHostWindow, PaypalSDK } from './paypal-sdk';\n\nexport default class PaypalScriptLoader {\n    private _window: PaypalHostWindow;\n\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    loadPaypal(): Promise<PaypalSDK> {\n        return this._scriptLoader\n            .loadScript('//www.paypalobjects.com/api/checkout.min.js')\n            .then(() => {\n                if (!this._window.paypal) {\n                    throw new StandardError();\n                }\n\n                return this._window.paypal;\n            });\n    }\n}\n","import { ClearErrorAction, ErrorActionType } from './error-actions';\n\nexport default class ErrorActionCreator {\n    clearError(error: Error): ClearErrorAction {\n        return {\n            type: ErrorActionType.ClearError,\n            payload: error,\n        };\n    }\n}\n","export default function getEnvironment(): string {\n    try {\n        return process.env.NODE_ENV || 'development';\n    } catch (e) {\n        return 'development';\n    }\n}\n","import Logger from './logger';\n\nexport default class ConsoleLogger implements Logger {\n    constructor(\n        private _console?: Console\n    ) {}\n\n    log(...messages: any[]): void {\n        this._logToConsole('log', ...messages);\n    }\n\n    info(...messages: any[]): void {\n        this._logToConsole('info', ...messages);\n    }\n\n    warn(...messages: any[]): void {\n        this._logToConsole('warn', ...messages);\n    }\n\n    error(...messages: any[]): void {\n        this._logToConsole('error', ...messages);\n    }\n\n    debug(...messages: any[]): void {\n        this._logToConsole('debug', ...messages);\n    }\n\n    private _logToConsole(type: keyof Console, ...messages: any[]): void {\n        if (!this._console || !this._console[type]) {\n            return;\n        }\n\n        this._console[type].call(this._console, ...messages);\n    }\n}\n","import Logger from './logger';\n\nexport default class NoopLogger implements Logger {\n    log(): void {}\n\n    info(): void {}\n\n    warn(): void {}\n\n    error(): void {}\n\n    debug(): void {}\n}\n","import { getEnvironment } from '../utility';\n\nimport createLogger from './create-logger';\nimport Logger from './logger';\n\nconst logger = createLogger(getEnvironment() !== 'test');\n\nexport default function getDefaultLogger(): Logger {\n    return logger;\n}\n","import ConsoleLogger from './console-logger';\nimport Logger from './logger';\nimport NoopLogger from './noop-logger';\n\nexport default function createLogger(isEnabled = true): Logger {\n    if (!isEnabled) {\n        return new NoopLogger();\n    }\n\n    return new ConsoleLogger(console);\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport { ApplyCouponAction, CouponAction, CouponActionType, RemoveCouponAction } from './coupon-actions';\nimport CouponRequestSender from './coupon-request-sender';\n\nexport default class CouponActionCreator {\n    constructor(\n        private _couponRequestSender: CouponRequestSender\n    ) {}\n\n    applyCoupon(code: string, options?: RequestOptions): ThunkAction<CouponAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ApplyCouponAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(CouponActionType.ApplyCouponRequested));\n\n            this._couponRequestSender.applyCoupon(checkout.id, code, options)\n                .then(({ body }) => {\n                    observer.next(createAction(CouponActionType.ApplyCouponSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CouponActionType.ApplyCouponFailed, response));\n                });\n        });\n    }\n\n    removeCoupon(code: string, options?: RequestOptions): ThunkAction<CouponAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<RemoveCouponAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(CouponActionType.RemoveCouponRequested));\n\n            this._couponRequestSender.removeCoupon(checkout.id, code, options)\n                .then(({ body }) => {\n                    observer.next(createAction(CouponActionType.RemoveCouponSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CouponActionType.RemoveCouponFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout, CheckoutIncludes, CHECKOUT_DEFAULT_INCLUDES } from '../checkout';\nimport { joinIncludes, ContentType, RequestOptions } from '../common/http-request';\n\nexport default class CouponRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    applyCoupon(checkoutId: string, couponCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/coupons`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes([\n                    ...CHECKOUT_DEFAULT_INCLUDES,\n                    CheckoutIncludes.AvailableShippingOptions,\n                ]),\n            },\n            body: { couponCode },\n        });\n    }\n\n    removeCoupon(checkoutId: string, couponCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/coupons/${couponCode}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.delete(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes([\n                    ...CHECKOUT_DEFAULT_INCLUDES,\n                    CheckoutIncludes.AvailableShippingOptions,\n                ]),\n            },\n        });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable ,  Observer } from 'rxjs';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport { GiftCertificateRequestSender } from '.';\nimport { ApplyGiftCertificateAction, GiftCertificateActionType, RemoveGiftCertificateAction } from './gift-certificate-actions';\n\nexport default class GiftCertificateActionCreator {\n    constructor(\n        private _giftCertificateRequestSender: GiftCertificateRequestSender\n    ) {}\n\n    applyGiftCertificate(giftCertificate: string, options?: RequestOptions): ThunkAction<ApplyGiftCertificateAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ApplyGiftCertificateAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(GiftCertificateActionType.ApplyGiftCertificateRequested));\n\n            this._giftCertificateRequestSender.applyGiftCertificate(checkout.id, giftCertificate, options)\n                .then(({ body }) => {\n                    observer.next(createAction(GiftCertificateActionType.ApplyGiftCertificateSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(GiftCertificateActionType.ApplyGiftCertificateFailed, response));\n                });\n        });\n    }\n\n    removeGiftCertificate(giftCertificate: string, options?: RequestOptions): ThunkAction<RemoveGiftCertificateAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<RemoveGiftCertificateAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(GiftCertificateActionType.RemoveGiftCertificateRequested));\n\n            this._giftCertificateRequestSender.removeGiftCertificate(checkout.id, giftCertificate, options)\n                .then(({ body }) => {\n                    observer.next(createAction(GiftCertificateActionType.RemoveGiftCertificateSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(GiftCertificateActionType.RemoveGiftCertificateFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout, CHECKOUT_DEFAULT_INCLUDES } from '../checkout';\nimport { joinIncludes, ContentType, RequestOptions } from '../common/http-request';\n\nexport default class GiftCertificateRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    applyGiftCertificate(checkoutId: string, giftCertificateCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/gift-certificates`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes(CHECKOUT_DEFAULT_INCLUDES),\n            },\n            body: { giftCertificateCode },\n        });\n    }\n\n    removeGiftCertificate(checkoutId: string, giftCertificateCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/gift-certificates/${giftCertificateCode}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.delete(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes(CHECKOUT_DEFAULT_INCLUDES),\n            },\n        });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { Registry } from '../common/registry';\n\nimport CustomerCredentials from './customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from './customer-request-options';\nimport {\n    CustomerStrategyActionType,\n    CustomerStrategyDeinitializeAction,\n    CustomerStrategyInitializeAction,\n    CustomerStrategySignInAction,\n    CustomerStrategySignOutAction,\n    CustomerStrategyWidgetAction,\n} from './customer-strategy-actions';\nimport { CustomerStrategy } from './strategies';\n\nexport default class CustomerStrategyActionCreator {\n    constructor(\n        private _strategyRegistry: Registry<CustomerStrategy>\n    ) {}\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Observable<CustomerStrategySignInAction> {\n        return Observable.create((observer: Observer<CustomerStrategySignInAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.SignInRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .signIn(credentials, options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.SignInSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.SignInFailed, error, meta));\n                });\n        });\n    }\n\n    signOut(options?: CustomerRequestOptions): Observable<CustomerStrategySignOutAction> {\n        return Observable.create((observer: Observer<CustomerStrategySignOutAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.SignOutRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .signOut(options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.SignOutSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.SignOutFailed, error, meta));\n                });\n        });\n    }\n\n    initialize(options?: CustomerInitializeOptions): ThunkAction<CustomerStrategyInitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<CustomerStrategyInitializeAction>) => {\n            const state = store.getState();\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            if (methodId && state.customerStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(CustomerStrategyActionType.InitializeRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .initialize(options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.InitializeSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.InitializeFailed, error, meta));\n                });\n        });\n    }\n\n    deinitialize(options?: CustomerRequestOptions): ThunkAction<CustomerStrategyDeinitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<CustomerStrategyDeinitializeAction>) => {\n            const state = store.getState();\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            if (methodId && !state.customerStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(CustomerStrategyActionType.DeinitializeRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .deinitialize(options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.DeinitializeSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.DeinitializeFailed, error, meta));\n                });\n        });\n    }\n\n    widgetInteraction(method: () => Promise<any>, options?: CustomerRequestOptions): Observable<CustomerStrategyWidgetAction> {\n        return Observable.create((observer: Observer<CustomerStrategyWidgetAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.WidgetInteractionStarted, undefined, meta));\n\n            method().then(() => {\n                observer.next(createAction(CustomerStrategyActionType.WidgetInteractionFinished, undefined, meta));\n                observer.complete();\n            })\n            .catch(error => {\n                observer.error(createErrorAction(CustomerStrategyActionType.WidgetInteractionFailed, error, meta));\n            });\n        });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport PaymentMethod from '../../payment-method';\n\nimport AmazonPayWindow from './amazon-pay-window';\n\nexport default class AmazonPayScriptLoader {\n    private _window: AmazonPayWindow;\n\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    loadWidget(method: PaymentMethod, onPaymentReady?: () => void): Promise<Event> {\n        const {\n            config: { merchantId, testMode },\n            initializationData: { region = 'us' } = {},\n        } = method;\n\n        const url = 'https://' +\n            (region.toLowerCase() !== 'us' ? 'static-eu.' : 'static-na.') +\n            'payments-amazon.com/OffAmazonPayments/' +\n            `${region.toLowerCase()}/` +\n            (testMode ? 'sandbox/' : '') +\n            (region.toLowerCase() !== 'us' ? 'lpa/' : '') +\n            `js/Widgets.js?sellerId=${merchantId}`;\n\n        this._configureWidget(method, onPaymentReady);\n\n        return this._scriptLoader.loadScript(url);\n    }\n\n    private _configureWidget(method: PaymentMethod, onPaymentReady?: () => void): void {\n        const onLoginReady = () => {\n            if (!this._window.amazon) {\n                return;\n            }\n\n            this._window.amazon.Login.setClientId(method.initializationData.clientId);\n            this._window.amazon.Login.setUseCookie(true);\n        };\n\n        if (this._window.amazon && this._window.amazon.Login) {\n            onLoginReady();\n        } else {\n            this._window.onAmazonLoginReady = onLoginReady;\n        }\n\n        if (this._window.OffAmazonPayments && onPaymentReady) {\n            onPaymentReady();\n        } else {\n            this._window.onAmazonPaymentsReady = onPaymentReady;\n        }\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\n\nimport { Address, LegacyAddress } from '../../../address';\n\nimport { BraintreeDataCollector } from './braintree';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\nimport {\n    VisaCheckoutAddress,\n    VisaCheckoutInitOptions,\n    VisaCheckoutPaymentSuccessPayload,\n    VisaCheckoutTokenizedPayload,\n} from './visacheckout';\n\nexport default class BraintreeVisaCheckoutPaymentProcessor {\n    constructor(\n        private _braintreeSDKCreator: BraintreeSDKCreator,\n        private _requestSender: RequestSender\n    ) {}\n\n    initialize(clientToken: string, options: VisaCheckoutInitializeOptions): Promise<VisaCheckoutInitOptions> {\n        this._braintreeSDKCreator.initialize(clientToken);\n\n        return this._braintreeSDKCreator.getVisaCheckout()\n            .then(visaCheckout => visaCheckout.createInitOptions({\n                settings: {\n                    locale: options.locale,\n                    shipping: {\n                        collectShipping: options.collectShipping,\n                    },\n                },\n                paymentRequest: {\n                    currencyCode: options.currencyCode,\n                    subtotal: String(options.subtotal),\n                },\n            }));\n    }\n\n    deinitialize(): Promise<void> {\n        return this._braintreeSDKCreator.teardown();\n    }\n\n    handleSuccess(payment: VisaCheckoutPaymentSuccessPayload, shipping?: Address, billing?: Address): Promise<any> {\n        return this._braintreeSDKCreator.getVisaCheckout()\n            .then(braintreeVisaCheckout => Promise.all([\n                braintreeVisaCheckout.tokenize(payment),\n                this._braintreeSDKCreator.getDataCollector(),\n            ])\n            .then(([tokenizedPayload, dataCollector]) => {\n                const {\n                    shippingAddress = this._toVisaCheckoutAddress(shipping),\n                    billingAddress = this._toVisaCheckoutAddress(billing),\n                } = tokenizedPayload;\n\n                return this._postForm({\n                    ...tokenizedPayload,\n                    shippingAddress,\n                    billingAddress,\n                }, dataCollector);\n            }));\n    }\n\n    private _postForm(paymentData: VisaCheckoutTokenizedPayload, dataCollector: BraintreeDataCollector) {\n        const {\n            userData,\n            billingAddress,\n            shippingAddress,\n            details: cardInformation,\n        } = paymentData;\n        const { userEmail } = userData;\n        const { deviceData } = dataCollector;\n\n        return this._requestSender.post('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: {\n                payment_type: paymentData.type,\n                nonce: paymentData.nonce,\n                provider: 'braintreevisacheckout',\n                action: 'set_external_checkout',\n                device_data: deviceData,\n                card_information: this._getCardInformation(cardInformation),\n                billing_address: this._getAddress(userEmail, billingAddress),\n                shipping_address: this._getAddress(userEmail, shippingAddress),\n            },\n        });\n    }\n\n    private _toVisaCheckoutAddress(address?: Address): VisaCheckoutAddress {\n        if (!address) {\n            return {};\n        }\n\n        return {\n            firstName: address.firstName,\n            lastName: address.lastName,\n            phoneNumber: address.phone,\n            streetAddress: address.address1,\n            extendedAddress: address.address2,\n            locality: address.city,\n            region: address.stateOrProvinceCode,\n            countryCode: address.countryCode,\n            postalCode: address.postalCode,\n        };\n    }\n\n    private _getAddress(email: string, address: VisaCheckoutAddress = {}): Partial<LegacyAddress> {\n        return {\n            email,\n            first_name: address.firstName,\n            last_name: address.lastName,\n            phone_number: address.phoneNumber,\n            address_line_1: address.streetAddress,\n            address_line_2: address.extendedAddress,\n            city: address.locality,\n            state: address.region,\n            country_code: address.countryCode,\n            postal_code: address.postalCode,\n        };\n    }\n\n    private _getCardInformation(cardInformation: { cardType: string; lastTwo: string }) {\n        return {\n            type: cardInformation.cardType,\n            number: cardInformation.lastTwo,\n        };\n    }\n}\n\nexport interface VisaCheckoutInitializeOptions {\n    locale?: string;\n    collectShipping?: boolean;\n    subtotal?: number;\n    currencyCode?: string;\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport BraintreeScriptLoader from './braintree-script-loader';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\nimport BraintreeVisaCheckoutPaymentProcessor from './braintree-visacheckout-payment-processor';\n\nexport default function createBraintreeVisaCheckoutPaymentProcessor(\n    scriptLoader: ScriptLoader,\n    requestSender: RequestSender\n) {\n    const braintreeScriptLoader = new BraintreeScriptLoader(scriptLoader);\n    const braintreeSDKCreator = new BraintreeSDKCreator(braintreeScriptLoader);\n\n    return new BraintreeVisaCheckoutPaymentProcessor(braintreeSDKCreator, requestSender);\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { VisaCheckoutHostWindow, VisaCheckoutSDK } from './visacheckout';\n\nexport default class VisaCheckoutScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: VisaCheckoutHostWindow = window\n    ) {}\n\n    load(testMode?: boolean): Promise<VisaCheckoutSDK> {\n        return this._scriptLoader\n            .loadScript(`//${testMode ? 'sandbox-' : ''}assets.secure.checkout.visa.com/checkout-widget/resources/js/integration/v1/sdk.js`)\n            .then(() => {\n                if (!this._window.V) {\n                    throw new StandardError();\n                }\n\n                return this._window.V;\n            });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\nimport { ChasePayHostWindow, JPMC } from '../chasepay/chasepay';\n\nexport default class ChasePayScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        public _window: ChasePayHostWindow = window\n    ) {}\n\n    load(testMode?: boolean): Promise<JPMC> {\n        return this._scriptLoader\n            .loadScript(`//pwc${testMode ? 'psb' : ''}.chase.com/pwc/checkout/js/v20170521/list.action?type=raw&applId=PWC&channelId=CWC&version=1`)\n            .then(() => {\n                if (!this._window.JPMC) {\n                    throw new StandardError();\n                }\n\n                return this._window.JPMC;\n            });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\n\n/**\n * @todo Convert this file into TypeScript properly\n */\nexport default class RemoteCheckoutRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    initializeBilling(methodName: string, params?: { referenceId: string }, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/billing`;\n\n        return this._requestSender.get(url, { params, timeout });\n    }\n\n    initializeShipping(methodName: string, params?: { referenceId: string }, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/shipping`;\n\n        return this._requestSender.get(url, { params, timeout });\n    }\n\n    initializePayment(methodName: string, params?: InitializePaymentOptions, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/payment`;\n\n        return this._requestSender.get(url, { params, timeout });\n    }\n\n    loadSettings(methodName: string, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/settings`;\n\n        return this._requestSender.get(url, { timeout });\n    }\n\n    signOut(methodName: string, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/signout`;\n\n        return this._requestSender.get(url, { timeout });\n    }\n\n    generateToken({ timeout }: RequestOptions = {}): Promise<Response> {\n        const url = '/remote-checkout-token';\n\n        return this._requestSender.get(url, { timeout });\n    }\n\n    trackAuthorizationEvent({ timeout }: RequestOptions = {}): Promise<Response> {\n        const url = '/remote-checkout/events/shopper-checkout-service-provider-authorization-requested';\n\n        return this._requestSender.post(url, { timeout });\n    }\n}\n\nexport interface InitializePaymentOptions {\n    authorizationToken?: string;\n    customerMessage?: string;\n    referenceId?: string;\n    useStoreCredit?: boolean;\n}\n","import { createAction, createErrorAction, Action } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport { RemoteCheckoutActionType } from './remote-checkout-actions';\nimport RemoteCheckoutRequestSender, { InitializePaymentOptions } from './remote-checkout-request-sender';\nimport { RemoteCheckoutStateData } from './remote-checkout-state';\n\n/**\n * @todo Convert this file into TypeScript properly\n * i.e.: Action<T>\n */\nexport default class RemoteCheckoutActionCreator {\n    constructor(\n        private _remoteCheckoutRequestSender: RemoteCheckoutRequestSender\n    ) {}\n\n    initializeBilling(methodId: string, params?: { referenceId: string }, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.InitializeRemoteBillingRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.initializeBilling(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(createAction(RemoteCheckoutActionType.InitializeRemoteBillingSucceeded, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.InitializeRemoteBillingFailed, response, { methodId }));\n                });\n        });\n    }\n\n    initializeShipping(methodId: string, params?: { referenceId: string }, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.InitializeRemoteShippingRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.initializeShipping(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(createAction(RemoteCheckoutActionType.InitializeRemoteShippingSucceeded, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.InitializeRemoteShippingFailed, response, { methodId }));\n                });\n        });\n    }\n\n    initializePayment(methodId: string, params?: InitializePaymentOptions, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.InitializeRemotePaymentRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.initializePayment(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(createAction(RemoteCheckoutActionType.InitializeRemotePaymentSucceeded, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.InitializeRemotePaymentFailed, response, { methodId }));\n                });\n        });\n    }\n\n    loadSettings(methodId: string, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.LoadRemoteSettingsRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.loadSettings(methodId, options)\n                .then(({ body }) => {\n                    observer.next(createAction(RemoteCheckoutActionType.LoadRemoteSettingsSucceeded, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.LoadRemoteSettingsFailed, response, { methodId }));\n                });\n        });\n    }\n\n    signOut(methodId: string, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.SignOutRemoteCustomerRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.signOut(methodId, options)\n                .then(() => {\n                    observer.next(createAction(RemoteCheckoutActionType.SignOutRemoteCustomerSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.SignOutRemoteCustomerFailed, response, { methodId }));\n                });\n        });\n    }\n\n    updateCheckout<K extends keyof RemoteCheckoutStateData>(methodId: K, data: Partial<RemoteCheckoutStateData[K]>): Action {\n        return createAction(RemoteCheckoutActionType.UpdateRemoteCheckout, data, { methodId });\n    }\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, from, of } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\n\nimport { CheckoutActionCreator, InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { RequestOptions } from '../common/http-request';\n\nimport { CustomerActionType, SignInCustomerAction, SignOutCustomerAction } from './customer-actions';\nimport CustomerCredentials from './customer-credentials';\nimport CustomerRequestSender from './customer-request-sender';\n\nexport default class CustomerActionCreator {\n    constructor(\n        private _customerRequestSender: CustomerRequestSender,\n        private _checkoutActionCreator: CheckoutActionCreator\n    ) {}\n\n    signInCustomer(\n        credentials: CustomerCredentials,\n        options?: RequestOptions\n    ): ThunkAction<SignInCustomerAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(CustomerActionType.SignInCustomerRequested)),\n            from(this._customerRequestSender.signInCustomer(credentials, options))\n                .pipe(\n                    switchMap(({ body }) => concat(\n                        this._checkoutActionCreator.loadCurrentCheckout(options)(store),\n                        of(createAction(CustomerActionType.SignInCustomerSucceeded, body.data))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(CustomerActionType.SignInCustomerFailed, error))\n        );\n    }\n\n    signOutCustomer(\n        options?: RequestOptions\n    ): ThunkAction<SignOutCustomerAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(CustomerActionType.SignOutCustomerRequested)),\n            from(this._customerRequestSender.signOutCustomer(options))\n                .pipe(\n                    switchMap(({ body }) => concat(\n                        this._checkoutActionCreator.loadCurrentCheckout(options)(store),\n                        of(createAction(CustomerActionType.SignOutCustomerSucceeded, body.data))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(CustomerActionType.SignOutCustomerFailed, error))\n        );\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport CustomerCredentials from './customer-credentials';\nimport { InternalCustomerResponseBody } from './internal-customer-responses';\n\nexport default class CustomerRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    signInCustomer(credentials: CustomerCredentials, { timeout }: RequestOptions = {}): Promise<Response<InternalCustomerResponseBody>> {\n        const url = '/internalapi/v1/checkout/customer';\n\n        return this._requestSender.post(url, { timeout, body: credentials });\n    }\n\n    signOutCustomer({ timeout }: RequestOptions = {}): Promise<Response<InternalCustomerResponseBody>> {\n        const url = '/internalapi/v1/checkout/customer';\n\n        return this._requestSender.delete(url, { timeout });\n    }\n}\n","import StandardError from './standard-error';\n\nexport default class NotImplementedError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Not implemented.');\n\n        this.name = 'NotImplementedError';\n        this.type = 'not_implemented';\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { AmazonPayLoginButton, AmazonPayScriptLoader, AmazonPayWindow } from '../../../payment/strategies/amazon-pay';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../../../remote-checkout';\nimport CustomerCredentials from '../../customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nimport AmazonPayCustomerInitializeOptions from './amazon-pay-customer-initialize-options';\n\nexport default class AmazonPayCustomerStrategy implements CustomerStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _window: AmazonPayWindow;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _remoteCheckoutRequestSender: RemoteCheckoutRequestSender,\n        private _scriptLoader: AmazonPayScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { amazon: amazonOptions, methodId } = options;\n\n        if (!amazonOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.amazon\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => new Promise((resolve, reject) => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const { onError = () => {} } = amazonOptions;\n                const onReady = () => {\n                    this._createSignInButton({\n                        ...amazonOptions,\n                        onError: error => {\n                            reject(error);\n                            onError(error);\n                        },\n                    });\n\n                    resolve();\n                };\n\n                this._scriptLoader.loadWidget(this._paymentMethod, onReady)\n                    .catch(reject);\n            }))\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via AmazonPay, the shopper must click on \"Login with Amazon\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _createSignInButton(options: AmazonPayCustomerInitializeOptions): AmazonPayLoginButton {\n        if (!this._paymentMethod || !this._window.OffAmazonPayments) {\n            throw new NotInitializedError(NotInitializedErrorType.CustomerNotInitialized);\n        }\n\n        if (!this._paymentMethod.config.merchantId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { initializationData } = this._paymentMethod;\n\n        return new this._window.OffAmazonPayments.Button(options.container, this._paymentMethod.config.merchantId, {\n            color: options.color || 'Gold',\n            size: options.size || 'small',\n            type: 'PwA',\n            useAmazonAddressBook: true,\n            onError: options.onError,\n            authorization: () => {\n                this._handleAuthorization(initializationData);\n            },\n        });\n    }\n\n    private _handleAuthorization(options: AuthorizationOptions): void {\n        this._remoteCheckoutRequestSender.generateToken()\n            .then(({ body }) => {\n                if (!this._window.amazon) {\n                    throw new NotInitializedError(NotInitializedErrorType.ShippingNotInitialized);\n                }\n\n                this._window.amazon.Login.authorize({\n                    popup: false,\n                    scope: 'payments:shipping_address payments:billing_address payments:widget profile',\n                    state: `${options.tokenPrefix}${body.token}`,\n                }, options.redirectUrl);\n\n                this._remoteCheckoutRequestSender.trackAuthorizationEvent();\n            });\n    }\n}\n\ninterface AuthorizationOptions {\n    redirectUrl: string;\n    tokenPrefix: string;\n}\n","import { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError } from '../../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { BraintreeVisaCheckoutPaymentProcessor, VisaCheckoutScriptLoader } from '../../../payment/strategies/braintree';\nimport { VisaCheckoutPaymentSuccessPayload } from '../../../payment/strategies/braintree/visacheckout';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport CustomerCredentials from '../../customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategyActionCreator from '../../customer-strategy-action-creator';\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class BraintreeVisaCheckoutCustomerStrategy implements CustomerStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _buttonClassName: string = 'visa-checkout-wrapper';\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _customerStrategyActionCreator: CustomerStrategyActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _braintreeVisaCheckoutPaymentProcessor: BraintreeVisaCheckoutPaymentProcessor,\n        private _visaCheckoutScriptLoader: VisaCheckoutScriptLoader\n    ) {}\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { braintreevisacheckout: visaCheckoutOptions, methodId } = options;\n\n        if (!visaCheckoutOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.braintreevisacheckout\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                const checkout = state.checkout.getCheckout();\n                const storeConfig = state.config.getStoreConfig();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const {\n                    container,\n                    onError = () => {},\n                } = visaCheckoutOptions;\n\n                const initOptions = {\n                    locale: storeConfig.storeProfile.storeLanguage,\n                    collectShipping: true,\n                    subtotal: checkout.subtotal,\n                    currencyCode: storeConfig.currency.code,\n                };\n\n                return Promise.all([\n                    this._visaCheckoutScriptLoader.load(this._paymentMethod.config.testMode),\n                    this._braintreeVisaCheckoutPaymentProcessor.initialize(this._paymentMethod.clientToken, initOptions),\n                ])\n                .then(([visaCheckout, initOptions]) => {\n                    const signInButton = this._createSignInButton(container, this._buttonClassName);\n\n                    visaCheckout.init(initOptions);\n                    visaCheckout.on('payment.success', (paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) =>\n                        this._paymentInstrumentSelected(paymentSuccessPayload)\n                            .catch(error => onError(error))\n                    );\n                    visaCheckout.on('payment.error', (payment, error) => onError(error));\n\n                    return signInButton;\n                })\n                .then(signInButton => { signInButton.style.visibility = 'visible'; });\n            })\n            .then(() => this._store.getState());\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via VisaCheckout, the shopper must click on \"Visa Checkout\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut('braintreevisacheckout', options)\n        );\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        return this._braintreeVisaCheckoutPaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    private _paymentInstrumentSelected(paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) {\n        const state = this._store.getState();\n\n        if (!this._paymentMethod) {\n            throw new Error('Payment method not initialized');\n        }\n\n        const { id: methodId } = this._paymentMethod;\n\n        return this._store.dispatch(\n            this._customerStrategyActionCreator.widgetInteraction(() => {\n                return this._braintreeVisaCheckoutPaymentProcessor.handleSuccess(\n                    paymentSuccessPayload,\n                    state.shippingAddress.getShippingAddress(),\n                    state.billingAddress.getBillingAddress()\n                )\n                .then(() => this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()));\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _createSignInButton(containerId: string, buttonClass: string): HTMLElement {\n        const container = document.querySelector(`#${containerId}`);\n\n        if (!container) {\n            throw new Error('Need a container to place the button');\n        }\n\n        return (container.querySelector('.' + buttonClass) as HTMLElement) ||\n            this._insertVisaCheckoutButton(container, buttonClass);\n    }\n\n    private _insertVisaCheckoutButton(container: Element, buttonClass: string): HTMLElement {\n        const buttonSource = 'https://secure.checkout.visa.com/wallet-services-web/xo/button.png?acceptCanadianVisaDebit=false&cobrand=true&size=154';\n        const buttonTemplate = `\n            <img\n                alt=\"Visa Checkout\"\n                class=\"v-button\"\n                role=\"button\"\n                src=\"${buttonSource}\"\n                />\n            <a class=\"v-learn v-learn-default\" style=\"text-align: right; display: block; font-size: 10px; color: #003366;\" href=\"#\" data-locale=\"en_US\">Tell Me More</a>`;\n\n        const visaCheckoutButton = document.createElement('div');\n        visaCheckoutButton.style.visibility = 'hidden';\n        visaCheckoutButton.className = buttonClass;\n        visaCheckoutButton.innerHTML = buttonTemplate;\n\n        container.appendChild(visaCheckoutButton);\n\n        return visaCheckoutButton;\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { ChasePayScriptLoader, ChasePaySuccessPayload } from '../../../payment/strategies/chasepay';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport CustomerCredentials from '../../customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class ChasePayCustomerStrategy implements CustomerStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _chasePayScriptLoader: ChasePayScriptLoader,\n        private _requestSender: RequestSender,\n        private _formPoster: FormPoster\n    ) {}\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { chasepay: chasePayOptions, methodId } = options;\n\n        if (!chasePayOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.chasepay\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                const cart = state.cart.getCart();\n                const storeConfig = state.config.getStoreConfig();\n\n                if (!cart) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCart);\n                }\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!this._paymentMethod || !this._paymentMethod.initializationData.digitalSessionId) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n\n                const { container } = chasePayOptions;\n\n                return this._chasePayScriptLoader.load(this._paymentMethod.config.testMode)\n                    .then(JPMC => {\n                        const ChasePay = JPMC.ChasePay;\n\n                        ChasePay.configure({\n                            language: storeConfig.storeProfile.storeLanguage,\n                        });\n\n                        if (ChasePay.isChasePayUp) {\n                            ChasePay.insertButtons({\n                                containers: [container],\n                            });\n                        }\n\n                        ChasePay.on(ChasePay.EventType.START_CHECKOUT, () => {\n                            this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n                                .then(() => {\n                                    const state = this._store.getState();\n                                    const method = state.paymentMethods.getPaymentMethod(methodId);\n                                    const sessionId = method && method.initializationData && method.initializationData.digitalSessionId;\n\n                                    if (sessionId) {\n                                        ChasePay.startCheckout(sessionId);\n                                    }\n                                });\n                        });\n\n                        ChasePay.on(ChasePay.EventType.COMPLETE_CHECKOUT, (payload: ChasePaySuccessPayload) => {\n                            const state = this._store.getState();\n                            const method = state.paymentMethods.getPaymentMethod(methodId);\n                            const requestId = method && method.initializationData && method.initializationData.merchantRequestId;\n\n                            if (requestId) {\n                                this._setExternalCheckoutData(payload, requestId)\n                                    .then(() => {\n                                        this._reloadPage();\n                                });\n                            }\n                        });\n                    });\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Chase Pay®, the shopper must click on \"Chase Pay®\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _setExternalCheckoutData(payload: ChasePaySuccessPayload, requestId: string): Promise<Response> {\n        const url = `checkout.php?provider=chasepay&action=set_external_checkout`;\n        const options = {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\n            },\n            body: {\n                sessionToken: payload.sessionToken,\n                merchantRequestId: requestId,\n            },\n            method: 'post',\n        };\n\n        return this._requestSender.sendRequest(url, options);\n    }\n\n    private _reloadPage() {\n        this._formPoster.postForm('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            params: {\n                fromChasePay: true,\n            },\n        });\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport CustomerActionCreator from '../../customer-action-creator';\nimport CustomerCredentials from '../../customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class DefaultCustomerStrategy implements CustomerStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _customerActionCreator: CustomerActionCreator\n    ) {}\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._customerActionCreator.signInCustomer(credentials, options)\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._customerActionCreator.signOutCustomer(options)\n        );\n    }\n\n    initialize(options?: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError } from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { GooglePayPaymentProcessor } from '../../../payment/strategies/googlepay';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport CustomerCredentials from '../../customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nimport GooglePayCustomerInitializeOptions from './googlepay-customer-initialize-options';\n\nexport default class GooglePayCustomerStrategy implements CustomerStrategy {\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _googlePayPaymentProcessor: GooglePayPaymentProcessor,\n        private _formPoster: FormPoster\n    ) {}\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId }  = options;\n\n        const googlePayOptions = this._getGooglePayOptions(options);\n\n        if (!methodId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._googlePayPaymentProcessor.initialize(methodId)\n            .then(() => {\n                this._walletButton = this._createSignInButton(googlePayOptions.container);\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._walletButton && this._walletButton.parentNode) {\n            this._walletButton.parentNode.removeChild(this._walletButton);\n            this._walletButton = undefined;\n        }\n\n        return this._googlePayPaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Google Pay, the shopper must click on \"Google Pay\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const container = document.querySelector(`#${containerId}`);\n\n        if (!container) {\n            throw new InvalidArgumentError('Unable to create sign-in button without valid container ID.');\n        }\n\n        const button = this._googlePayPaymentProcessor.createButton(this._handleWalletButtonClick);\n\n        container.appendChild(button);\n\n        return button;\n    }\n\n    private _getGooglePayOptions(options: CustomerInitializeOptions): GooglePayCustomerInitializeOptions {\n        if (options.methodId === 'googlepaybraintree' && options.googlepaybraintree) {\n            return options.googlepaybraintree;\n        }\n\n        if (options.methodId === 'googlepaystripe' && options.googlepaystripe) {\n            return options.googlepaystripe;\n        }\n\n        throw new InvalidArgumentError();\n    }\n\n    private _onPaymentSelectComplete(): void {\n        this._formPoster.postForm('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n        });\n    }\n\n    private _onError(error?: Error): void {\n        if (error && error.message !== 'CANCELED') {\n            throw error;\n        }\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): Promise<void> {\n        event.preventDefault();\n\n        return this._googlePayPaymentProcessor.displayWallet()\n            .then(paymentData => this._googlePayPaymentProcessor.handleSuccess(paymentData)\n            .then(() => {\n                if (paymentData.shippingAddress) {\n                    this._googlePayPaymentProcessor.updateShippingAddress(paymentData.shippingAddress);\n                }\n            }))\n            .then(() => this._onPaymentSelectComplete())\n            .catch(error => this._onError(error));\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotImplementedError\n} from '../../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { getCallbackUrl, MasterpassScriptLoader } from '../../../payment/strategies/masterpass';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport CustomerCredentials from '../../customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class MasterpassCustomerStrategy implements CustomerStrategy {\n    private _signInButton?: HTMLElement;\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _masterpassScriptLoader: MasterpassScriptLoader\n    ) {}\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { masterpass: masterpassOptions, methodId } = options;\n\n        if (!masterpassOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.masterpass\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n                if (!this._paymentMethod || !this._paymentMethod.initializationData.checkoutId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const cart = state.cart.getCart();\n                if (!cart) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCart);\n                }\n\n                const { container } = masterpassOptions;\n\n                const payload = {\n                    checkoutId: this._paymentMethod.initializationData.checkoutId,\n                    allowedCardTypes: this._paymentMethod.initializationData.allowedCardTypes,\n                    amount: cart.cartAmount.toString(),\n                    currency: cart.currency.code,\n                    cartId: cart.id,\n                    suppressShippingAddress: false,\n                    callbackUrl: getCallbackUrl('checkout'),\n                };\n\n                return this._masterpassScriptLoader.load(this._paymentMethod.config.testMode)\n                    .then(Masterpass => {\n                        this._signInButton = this._createSignInButton(container);\n\n                        this._signInButton.addEventListener('click', () => {\n                            Masterpass.checkout(payload);\n                        });\n                    });\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        if (this._signInButton && this._signInButton.parentNode) {\n            this._signInButton.parentNode.removeChild(this._signInButton);\n            this._signInButton = undefined;\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Masterpass, the shopper must click on \"Masterpass\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const container = document.querySelector(`#${containerId}`);\n\n        if (!container) {\n            throw new InvalidArgumentError('Unable to create sign-in button without valid container ID.');\n        }\n\n        const button = document.createElement('input');\n\n        button.type = 'image';\n        button.src = 'https://static.masterpass.com/dyn/img/btn/global/mp_chk_btn_160x037px.svg';\n        container.appendChild(button);\n\n        return button;\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { NotImplementedError } from '../../../common/error/errors';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport CustomerCredentials from '../../customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class SquareCustomerStrategy implements CustomerStrategy {\n\n    constructor(\n        private _store: CheckoutStore,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator\n    ) {}\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Masterpass, the shopper must click on \"Masterpass\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    initialize(options?: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { createAction, createErrorAction, Action } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport Country from './country';\nimport { CountryActionType } from './country-actions';\nimport CountryRequestSender from './country-request-sender';\n\nexport default class CountryActionCreator {\n    constructor(\n        private _countryRequestSender: CountryRequestSender\n    ) {}\n\n    loadCountries(options?: RequestOptions): Observable<Action<Country[]>> {\n        return Observable.create((observer: Observer<Action<Country[]>>) => {\n            observer.next(createAction(CountryActionType.LoadCountriesRequested));\n\n            this._countryRequestSender.loadCountries(options)\n                .then(response => {\n                    observer.next(createAction(CountryActionType.LoadCountriesSucceeded, response.body.data));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CountryActionType.LoadCountriesFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport { CountryResponseBody } from './country-responses';\n\nexport default class CountryRequestSender {\n    constructor(\n        private _requestSender: RequestSender,\n        private _config: { locale?: string }\n    ) {}\n\n    loadCountries({ timeout }: RequestOptions = {}): Promise<Response<CountryResponseBody>> {\n        const url = '/internalapi/v1/store/countries';\n        const headers = {\n            'Accept-Language': this._config.locale,\n        };\n\n        return this._requestSender.get(url, { headers, timeout });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { joinIncludes, ContentType, RequestOptions } from '../common/http-request';\n\nimport InternalOrderRequestBody from './internal-order-request-body';\nimport { InternalOrderResponseBody } from './internal-order-responses';\nimport Order from './order';\nimport OrderParams from './order-params';\n\nexport default class OrderRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadOrder(orderId: number, { timeout, params }: RequestOptions<OrderParams> = {}): Promise<Response<Order>> {\n        const url = `/api/storefront/orders/${orderId}`;\n        const headers = { Accept: ContentType.JsonV1 };\n        const include = [\n            'payments',\n            'lineItems.physicalItems.socialMedia',\n            'lineItems.physicalItems.options',\n            'lineItems.digitalItems.socialMedia',\n            'lineItems.digitalItems.options',\n        ];\n\n        return this._requestSender.get(url, {\n            params: {\n                include: joinIncludes([\n                    ...include,\n                    ...(params && params.include || []),\n                ]),\n            },\n            headers,\n            timeout,\n        });\n    }\n\n    submitOrder(body: InternalOrderRequestBody, { timeout }: RequestOptions = {}): Promise<Response<InternalOrderResponseBody>> {\n        const url = '/internalapi/v1/checkout/order';\n\n        return this._requestSender.post(url, { body, timeout });\n    }\n\n    finalizeOrder(orderId: number, { timeout }: RequestOptions = {}): Promise<Response<InternalOrderResponseBody>> {\n        const url = `/internalapi/v1/checkout/order/${orderId}`;\n\n        return this._requestSender.post(url, { timeout });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, empty, from, of, Observable, Observer } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\n\nimport { CheckoutValidator, InternalCheckoutSelectors, ReadableCheckoutStore } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport InternalOrderRequestBody from './internal-order-request-body';\nimport { FinalizeOrderAction, LoadOrderAction, LoadOrderPaymentsAction, OrderActionType, SubmitOrderAction } from './order-actions';\nimport OrderRequestBody from './order-request-body';\nimport OrderRequestSender from './order-request-sender';\nimport { SpamProtectionAction, SpamProtectionActionCreator } from './spam-protection';\n\nexport default class OrderActionCreator {\n    constructor(\n        private _orderRequestSender: OrderRequestSender,\n        private _checkoutValidator: CheckoutValidator,\n        private _spamProtectionActionCreator: SpamProtectionActionCreator\n    ) {}\n\n    loadOrder(orderId: number, options?: RequestOptions): Observable<LoadOrderAction> {\n        return new Observable((observer: Observer<LoadOrderAction>) => {\n            observer.next(createAction(OrderActionType.LoadOrderRequested));\n\n            this._orderRequestSender.loadOrder(orderId, options)\n                .then(response => {\n                    observer.next(createAction(OrderActionType.LoadOrderSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(OrderActionType.LoadOrderFailed, response));\n                });\n        });\n    }\n\n    // TODO: Remove when checkout does not contain unrelated order data.\n    loadOrderPayments(orderId: number, options?: RequestOptions): Observable<LoadOrderPaymentsAction> {\n        return new Observable((observer: Observer<LoadOrderPaymentsAction>) => {\n            observer.next(createAction(OrderActionType.LoadOrderPaymentsRequested));\n\n            this._orderRequestSender.loadOrder(orderId, options)\n                .then(response => {\n                    observer.next(createAction(OrderActionType.LoadOrderPaymentsSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(OrderActionType.LoadOrderPaymentsFailed, response));\n                });\n        });\n    }\n\n    loadCurrentOrder(options?: RequestOptions): ThunkAction<LoadOrderAction, InternalCheckoutSelectors> {\n        return store => defer(() => {\n            const orderId = this._getCurrentOrderId(store.getState());\n\n            if (!orderId) {\n                throw new MissingDataError(MissingDataErrorType.MissingOrderId);\n            }\n\n            return this.loadOrder(orderId, options);\n        });\n    }\n\n    submitOrder(payload: OrderRequestBody, options?: RequestOptions): ThunkAction<SubmitOrderAction | SpamProtectionAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(OrderActionType.SubmitOrderRequested)),\n            defer(() => {\n                const state = store.getState();\n                const externalSource = state.config.getExternalSource();\n                const checkout = state.checkout.getCheckout();\n                const orderMeta = state.order.getOrderMeta();\n                const storeConfig = state.config.getStoreConfig();\n                const spamProtectionToken = orderMeta && orderMeta.spamProtectionToken;\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                const { isSpamProtectionEnabled } = storeConfig.checkoutSettings;\n\n                if (isSpamProtectionEnabled && !spamProtectionToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingSpamProtectionToken);\n                }\n\n                return from(\n                    this._checkoutValidator.validate(checkout, options)\n                        .then(() => this._orderRequestSender.submitOrder(this._mapToOrderRequestBody(\n                            payload,\n                            checkout.customerMessage,\n                            externalSource,\n                            spamProtectionToken\n                        ), options))\n                ).pipe(\n                    switchMap(response => concat(\n                        // TODO: Remove once we can submit orders using storefront API\n                        this.loadOrder(response.body.data.order.orderId, options),\n                        of(createAction(OrderActionType.SubmitOrderSucceeded, response.body.data, { ...response.body.meta, token: response.headers.token }))\n                    ))\n                );\n            }).pipe(\n                catchError(error => throwErrorAction(OrderActionType.SubmitOrderFailed, error))\n            )\n        );\n    }\n\n    finalizeOrder(orderId: number, options?: RequestOptions): Observable<FinalizeOrderAction | LoadOrderAction> {\n        return concat(\n            of(createAction(OrderActionType.FinalizeOrderRequested)),\n            from(this._orderRequestSender.finalizeOrder(orderId, options))\n                .pipe(\n                    switchMap(response => concat(\n                        this.loadOrder(orderId, options),\n                        of(createAction(OrderActionType.FinalizeOrderSucceeded, response.body.data))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(OrderActionType.FinalizeOrderFailed, error))\n        );\n    }\n\n    executeSpamProtection(): ThunkAction<SpamProtectionAction> {\n        return store => {\n            const storeConfig = store.getState().config.getStoreConfig();\n\n            if (!storeConfig) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n            }\n\n            const { isSpamProtectionEnabled } = storeConfig.checkoutSettings;\n\n            if (!isSpamProtectionEnabled) {\n                return empty();\n            }\n\n            return this._spamProtectionActionCreator.execute();\n        };\n    }\n\n    private _getCurrentOrderId(state: InternalCheckoutSelectors): number | undefined {\n        const order = state.order.getOrder();\n        const checkout = state.checkout.getCheckout();\n\n        return (order && order.orderId) || (checkout && checkout.orderId);\n    }\n\n    private _mapToOrderRequestBody(\n        payload: OrderRequestBody,\n        customerMessage: string,\n        externalSource?: string,\n        spamProtectionToken?: string\n    ): InternalOrderRequestBody {\n        const { payment, ...order } = payload;\n\n        if (!payment) {\n            return {\n                ...order,\n                customerMessage,\n                externalSource,\n                spamProtectionToken,\n            };\n        }\n\n        return {\n            ...order,\n            customerMessage,\n            externalSource,\n            spamProtectionToken,\n            payment: {\n                paymentData: payment.paymentData,\n                name: payment.methodId,\n                gateway: payment.gatewayId,\n            },\n        };\n    }\n}\n","export interface MutationObeserverCreator {\n    prototype: MutationObserver;\n    new(callback: MutationCallback): MutationObserver;\n}\n\nexport interface MutationObserverWindow extends Window {\n    MutationObserver: MutationObeserverCreator;\n}\n\nexport class MutationObserverFactory {\n    constructor(\n        private _window: MutationObserverWindow = window as MutationObserverWindow\n    ) {}\n\n    create(callback: MutationCallback): MutationObserver {\n        return new this._window.MutationObserver(callback);\n    }\n}\n","import { StandardError } from '../../../common/error/errors';\n\nexport default class SpamProtectionFailedError extends StandardError {\n    constructor() {\n        super('We were not able to complete our spam protection verification. Please try again.');\n\n        this.name = 'SpamProtectionFailedError';\n        this.type = 'spam_protection_failed';\n    }\n}\n","import { StandardError } from '../../../common/error/errors';\n\nexport default class SpamProtectionNotCompletedError extends StandardError {\n    constructor() {\n        super('You haven\\'t complete our spam protection verification. Please try again.');\n\n        this.name = 'SpamProtectionNotCompletedError';\n        this.type = 'spam_protection_not_completed';\n    }\n}\n","import { Observable, Subject } from 'rxjs';\n\nimport { MutationObserverFactory } from '../../common/dom/mutation-observer';\nimport { NotInitializedError, NotInitializedErrorType } from '../../common/error/errors';\n\nimport { SpamProtectionFailedError, SpamProtectionNotCompletedError } from './errors';\nimport GoogleRecaptchaScriptLoader from './google-recaptcha-script-loader';\n\nexport interface RecaptchaResult {\n    error?: Error;\n    token?: string;\n}\n\nexport default class GoogleRecaptcha {\n    private _event$?: Subject<RecaptchaResult>;\n    private _recaptcha?: ReCaptchaV2.ReCaptcha;\n\n    constructor(\n        private googleRecaptchaScriptLoader: GoogleRecaptchaScriptLoader,\n        private mutationObserverFactory: MutationObserverFactory\n    ) {}\n\n    load(containerId: string, sitekey: string): Promise<void> {\n        const event$ = new Subject<RecaptchaResult>();\n        this._event$ = event$;\n\n        return this.googleRecaptchaScriptLoader.load()\n            .then(recaptcha => {\n                recaptcha.render(containerId, {\n                    sitekey,\n                    size: 'invisible',\n                    callback: () => {\n                        event$.next({\n                            token: recaptcha.getResponse(),\n                        });\n                    },\n                    'error-callback': () => {\n                        event$.next({\n                            error: new SpamProtectionFailedError(),\n                        });\n                    },\n                });\n\n                this._recaptcha = recaptcha;\n            });\n    }\n\n    execute(): Observable<RecaptchaResult> {\n        if (!this._event$ || !this._recaptcha) {\n            throw new NotInitializedError(NotInitializedErrorType.SpamProtectionNotInitialized);\n        }\n\n        this._watchRecaptchaChallengeWindow(this._event$);\n\n        this._recaptcha.execute();\n\n        return this._event$;\n    }\n\n    private _watchRecaptchaChallengeWindow(event: Subject<RecaptchaResult>) {\n        const iframeElement = document.querySelector('iframe[title=\"recaptcha challenge\"]');\n\n        if (!iframeElement) {\n            throw new Error('Recaptcha challenge iframe not found.');\n        }\n\n        const iframeContainer = iframeElement.parentElement;\n\n        if (!iframeContainer) {\n            throw new Error('Recaptcha challenge iframe container not found.');\n        }\n\n        const container = iframeContainer.parentElement;\n\n        if (!container) {\n            throw new Error('Recaptcha challenge container not found.');\n        }\n\n        this.mutationObserverFactory.create(() => {\n            // When customer closes the Google ReCaptcha challenge window, throw SpamProtectionNotCompletedError\n            if (container.style.visibility === 'hidden') {\n                event.next({\n                    error: new SpamProtectionNotCompletedError(),\n                });\n            }\n        })\n\n        .observe(container, { attributes: true, attributeFilter: ['style'] });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nexport default class GoogleRecaptchaScriptLoader {\n    private _loadPromise?: Promise<ReCaptchaV2.ReCaptcha>;\n\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: GoogleRecaptchaWindow = window\n    ) {}\n\n    load(): Promise<ReCaptchaV2.ReCaptcha> {\n        if (!this._loadPromise) {\n            this._loadPromise = this._loadScript();\n        }\n\n        return this._loadPromise;\n    }\n\n    private _loadScript(): Promise<ReCaptchaV2.ReCaptcha> {\n        const callbackName = 'initRecaptcha';\n        const params = [\n            `onload=${callbackName}`,\n            'render=explicit',\n        ].join('&');\n\n        return new Promise((resolve, reject) => {\n            this._window[callbackName] = () => resolve(this._window.grecaptcha);\n\n            this._scriptLoader.loadScript(`//www.google.com/recaptcha/api.js?${params}`)\n                .catch(error => {\n                    this._loadPromise = undefined;\n                    reject(error);\n                });\n        });\n    }\n}\n\nexport interface GoogleRecaptchaWindow extends Window {\n    grecaptcha?: ReCaptchaV2.ReCaptcha;\n    initRecaptcha?(): void;\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, of, throwError, Observable, Observer } from 'rxjs';\nimport { switchMap, take } from 'rxjs/operators';\n\nimport { InternalCheckoutSelectors } from '../../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../../common/error/errors';\n\nimport GoogleRecaptcha from './google-recaptcha';\nimport { SpamProtectionAction, SpamProtectionActionType } from './spam-protection-actions';\nimport { SpamProtectionOptions } from './spam-protection-options';\n\nexport default class SpamProtectionActionCreator {\n    constructor(\n        private _googleRecaptcha: GoogleRecaptcha\n    ) {}\n\n    initialize(options: SpamProtectionOptions): ThunkAction<SpamProtectionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<SpamProtectionAction>) => {\n            const state = store.getState();\n            const config = state.config.getConfig();\n            const { containerId } = options;\n\n            if (!config) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n            }\n\n            observer.next(createAction(SpamProtectionActionType.InitializeRequested, undefined));\n\n            const recaptchaSitekey = config.storeConfig.checkoutSettings.googleRecaptchaSitekey;\n\n            return this._googleRecaptcha.load(containerId, recaptchaSitekey)\n                .then(() => {\n                    observer.next(createAction(SpamProtectionActionType.InitializeSucceeded));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(SpamProtectionActionType.InitializeFailed, error, containerId));\n                });\n        });\n    }\n\n    execute(): Observable<SpamProtectionAction> {\n        return concat(\n            of(createAction(SpamProtectionActionType.ExecuteRequested, undefined)),\n            this._googleRecaptcha.execute()\n                .pipe(take(1))\n                .pipe(switchMap(({ error, token }) => {\n                    return error ?\n                        throwError(createErrorAction(SpamProtectionActionType.SubmitFailed, error)) :\n                        of(createAction(SpamProtectionActionType.Completed, token));\n                }))\n        );\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class OrderFinalizationNotRequiredError extends StandardError {\n    constructor() {\n        super('The current order does not need to be finalized at this stage.');\n\n        this.name = 'OrderFinalizationNotRequiredError';\n        this.type = 'order_finalization_not_required';\n    }\n}\n","enum PaymentStrategyType {\n    AFFIRM = 'affirm',\n    AFTERPAY = 'afterpay',\n    AMAZON = 'amazon',\n    CREDIT_CARD = 'creditcard',\n    CYBERSOURCE = 'cybersource',\n    KLARNA = 'klarna',\n    LEGACY = 'legacy',\n    OFFLINE = 'offline',\n    OFFSITE = 'offsite',\n    PAYPAL = 'paypal',\n    PAYPAL_EXPRESS = 'paypalexpress',\n    PAYPAL_EXPRESS_CREDIT = 'paypalexpresscredit',\n    SAGE_PAY = 'sagepay',\n    SQUARE = 'squarev2',\n    STRIPEV3 = 'stripev3',\n    NO_PAYMENT_DATA_REQUIRED = 'nopaymentdatarequired',\n    BRAINTREE = 'braintree',\n    BRAINTREE_PAYPAL = 'braintreepaypal',\n    BRAINTREE_PAYPAL_CREDIT = 'braintreepaypalcredit',\n    BRAINTREE_VISA_CHECKOUT = 'braintreevisacheckout',\n    BRAINTREE_GOOGLE_PAY = 'googlepaybraintree',\n    CHASE_PAY = 'chasepay',\n    WE_PAY = 'wepay',\n    MASTERPASS = 'masterpass',\n    STRIPE_GOOGLE_PAY = 'googlepaystripe',\n    ZIP = 'zip',\n    CONVERGE = 'converge',\n}\n\nexport default PaymentStrategyType;\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, empty, from, of, Observable, Observer } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { InternalCheckoutSelectors, ReadableCheckoutStore } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { LoadOrderPaymentsAction, OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../order';\nimport { OrderFinalizationNotRequiredError } from '../order/errors';\nimport { SpamProtectionAction } from '../order/spam-protection';\n\nimport { PaymentInitializeOptions, PaymentRequestOptions } from './payment-request-options';\nimport {\n    PaymentStrategyActionType,\n    PaymentStrategyDeinitializeAction,\n    PaymentStrategyExecuteAction,\n    PaymentStrategyFinalizeAction,\n    PaymentStrategyInitializeAction,\n    PaymentStrategyWidgetAction,\n} from './payment-strategy-actions';\nimport PaymentStrategyRegistry from './payment-strategy-registry';\nimport PaymentStrategyType from './payment-strategy-type';\nimport { PaymentStrategy } from './strategies';\n\nexport default class PaymentStrategyActionCreator {\n    constructor(\n        private _strategyRegistry: PaymentStrategyRegistry,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: RequestOptions): ThunkAction<PaymentStrategyExecuteAction | SpamProtectionAction, InternalCheckoutSelectors> {\n        return store => concat(\n            this._orderActionCreator.executeSpamProtection()(store),\n            new Observable((observer: Observer<PaymentStrategyExecuteAction>) => {\n                const state = store.getState();\n                const { payment = {} as OrderPaymentRequestBody, useStoreCredit } = payload;\n                const meta = { methodId: payment.methodId };\n\n                let strategy: PaymentStrategy;\n\n                if (state.payment.isPaymentDataRequired(useStoreCredit)) {\n                    const method = state.paymentMethods.getPaymentMethod(payment.methodId, payment.gatewayId);\n\n                    if (!method) {\n                        throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                    }\n\n                    strategy = this._strategyRegistry.getByMethod(method);\n                } else {\n                    strategy = this._strategyRegistry.get(PaymentStrategyType.NO_PAYMENT_DATA_REQUIRED);\n                }\n\n                observer.next(createAction(PaymentStrategyActionType.ExecuteRequested, undefined, meta));\n\n                strategy\n                    .execute(payload, { ...options, methodId: payment.methodId, gatewayId: payment.gatewayId })\n                    .then(() => {\n                        observer.next(createAction(PaymentStrategyActionType.ExecuteSucceeded, undefined, meta));\n                        observer.complete();\n                    })\n                    .catch(error => {\n                        observer.error(createErrorAction(PaymentStrategyActionType.ExecuteFailed, error, meta));\n                    });\n            })\n        );\n    }\n\n    finalize(options?: RequestOptions): ThunkAction<PaymentStrategyFinalizeAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(PaymentStrategyActionType.FinalizeRequested)),\n            this._loadOrderPaymentsIfNeeded(store, options),\n            defer(() => {\n                const state = store.getState();\n                const { providerId = '', gatewayId = '' } = state.payment.getPaymentId() || {};\n                const method = state.paymentMethods.getPaymentMethod(providerId, gatewayId);\n\n                if (!method) {\n                    throw new OrderFinalizationNotRequiredError();\n                }\n\n                return this._strategyRegistry.getByMethod(method)\n                    .finalize({ ...options, methodId: method.id, gatewayId: method.gateway })\n                    .then(() => createAction(PaymentStrategyActionType.FinalizeSucceeded, undefined, { methodId: method.id }));\n            })\n        ).pipe(\n            catchError(error => {\n                const state = store.getState();\n                const payment = state.payment.getPaymentId();\n\n                return throwErrorAction(PaymentStrategyActionType.FinalizeFailed, error, { methodId: payment && payment.providerId });\n            })\n        );\n    }\n\n    initialize(options: PaymentInitializeOptions): ThunkAction<PaymentStrategyInitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<PaymentStrategyInitializeAction>) => {\n            const state = store.getState();\n            const { methodId, gatewayId } = options;\n            const method = state.paymentMethods.getPaymentMethod(methodId, gatewayId);\n\n            if (!method) {\n                throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n            }\n\n            if (methodId && state.paymentStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(PaymentStrategyActionType.InitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.getByMethod(method)\n                .initialize({ ...options, methodId, gatewayId })\n                .then(() => {\n                    observer.next(createAction(PaymentStrategyActionType.InitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(PaymentStrategyActionType.InitializeFailed, error, { methodId }));\n                });\n        });\n    }\n\n    deinitialize(options: PaymentRequestOptions): ThunkAction<PaymentStrategyDeinitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<PaymentStrategyDeinitializeAction>) => {\n            const state = store.getState();\n            const { methodId, gatewayId } = options;\n            const method = state.paymentMethods.getPaymentMethod(methodId, gatewayId);\n\n            if (!method) {\n                throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n            }\n\n            if (methodId && !state.paymentStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(PaymentStrategyActionType.DeinitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.getByMethod(method)\n                .deinitialize({ ...options, methodId, gatewayId })\n                .then(() => {\n                    observer.next(createAction(PaymentStrategyActionType.DeinitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(PaymentStrategyActionType.DeinitializeFailed, error, { methodId }));\n                });\n        });\n    }\n\n    widgetInteraction(method: () => Promise<any>, options?: PaymentRequestOptions): ThunkAction<PaymentStrategyWidgetAction> {\n        return store => Observable.create((observer: Observer<PaymentStrategyWidgetAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(PaymentStrategyActionType.WidgetInteractionStarted, undefined, meta));\n\n            method().then(() => {\n                observer.next(createAction(PaymentStrategyActionType.WidgetInteractionFinished, undefined, meta));\n                observer.complete();\n            })\n            .catch(error => {\n                observer.error(createErrorAction(PaymentStrategyActionType.WidgetInteractionFailed, error, meta));\n            });\n        });\n    }\n\n    private _loadOrderPaymentsIfNeeded(store: ReadableCheckoutStore, options?: RequestOptions): Observable<LoadOrderPaymentsAction> {\n        const state = store.getState();\n        const checkout = state.checkout.getCheckout();\n\n        if (checkout && checkout.orderId) {\n            return this._orderActionCreator.loadOrderPayments(checkout.orderId, options);\n        }\n\n        return empty();\n    }\n}\n","import { isEqual } from 'lodash';\n\nimport { PartialDeep } from '../common/types';\n\nimport Cart from './cart';\n\nexport default class CartComparator {\n    isEqual(cartA: Cart, cartB: Cart): boolean {\n        return isEqual(\n            this._normalize(cartA),\n            this._normalize(cartB)\n        );\n    }\n\n    private _normalize(cart: Cart): PartialDeep<Cart> {\n        return {\n            cartAmount: cart.cartAmount,\n            currency: cart.currency,\n            id: cart.id,\n            lineItems: {\n                digitalItems: cart.lineItems.digitalItems\n                    .slice()\n                    .sort((itemA, itemB) =>\n                        `${itemA.productId}${itemA.variantId}`.localeCompare(`${itemB.productId}${itemB.variantId}`)\n                    )\n                    .map(item => ({\n                        extendedSalePrice: item.extendedSalePrice,\n                        productId: item.productId,\n                        quantity: item.quantity,\n                        variantId: item.variantId,\n                    })),\n                giftCertificates: cart.lineItems.giftCertificates\n                    .slice()\n                    .sort((itemA, itemB) => `${itemA.id}`.localeCompare(`${itemB.id}`))\n                    .map(item => ({\n                        amount: item.amount,\n                        recipient: item.recipient,\n                    })),\n                physicalItems: cart.lineItems.physicalItems\n                    .slice()\n                    .sort((itemA, itemB) =>\n                        `${itemA.productId}${itemA.variantId}`.localeCompare(`${itemB.productId}${itemB.variantId}`)\n                    )\n                    .map(item => ({\n                        extendedSalePrice: item.extendedSalePrice,\n                        productId: item.productId,\n                        quantity: item.quantity,\n                        variantId: item.variantId,\n                        giftWrapping: item.giftWrapping,\n                    })),\n            },\n        };\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class CartChangedError extends StandardError {\n    constructor() {\n        super('An update to your shopping cart has been detected and your available shipping costs have been updated.');\n\n        this.name = 'CartChangedError';\n        this.type = 'cart_changed';\n    }\n}\n","import { isEqual, map } from 'lodash';\n\nimport { CartComparator } from '../cart';\nimport { CartChangedError } from '../cart/errors';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { Coupon, GiftCertificate } from '../coupon';\n\nimport Checkout from './checkout';\nimport CheckoutRequestSender from './checkout-request-sender';\n\nexport default class CheckoutValidator {\n    constructor(\n        private _checkoutRequestSender: CheckoutRequestSender\n    ) {}\n\n    validate(checkout?: Checkout, options?: RequestOptions): Promise<void> {\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        return this._checkoutRequestSender.loadCheckout(checkout.id, options)\n            .then(response => {\n                const comparator = new CartComparator();\n\n                if (checkout.grandTotal === response.body.grandTotal\n                    && this._compareCoupons(checkout.coupons, response.body.coupons)\n                    && this._compareGiftCertificates(checkout.giftCertificates, response.body.giftCertificates)\n                    && comparator.isEqual(checkout.cart, response.body.cart)\n                ) {\n                    return;\n                }\n\n                throw new CartChangedError();\n            });\n    }\n\n    private _compareCoupons(couponsA: Coupon[], couponsB: Coupon[]): boolean {\n        return isEqual(map(couponsA, 'code'), map(couponsB, 'code'));\n    }\n\n    private _compareGiftCertificates(giftCertificatesA: GiftCertificate[], giftCertificatesB: GiftCertificate[]): boolean {\n        return isEqual(map(giftCertificatesA, 'code'), map(giftCertificatesB, 'code'));\n    }\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, from, of } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { OrderActionCreator } from '../order';\n\nimport Payment from './payment';\nimport { InitializeOffsitePaymentAction, PaymentActionType, SubmitPaymentAction } from './payment-actions';\nimport PaymentRequestSender from './payment-request-sender';\nimport PaymentRequestTransformer from './payment-request-transformer';\n\nexport default class PaymentActionCreator {\n    constructor(\n        private _paymentRequestSender: PaymentRequestSender,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentRequestTransformer: PaymentRequestTransformer\n    ) {}\n\n    submitPayment(payment: Payment): ThunkAction<SubmitPaymentAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(PaymentActionType.SubmitPaymentRequested)),\n            from(this._paymentRequestSender.submitPayment(\n                this._paymentRequestTransformer.transform(payment, store.getState())\n            ))\n                .pipe(\n                    switchMap(({ body }) => concat(\n                        this._orderActionCreator.loadCurrentOrder()(store),\n                        of(createAction(PaymentActionType.SubmitPaymentSucceeded, body))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(PaymentActionType.SubmitPaymentFailed, error))\n        );\n    }\n\n    initializeOffsitePayment(\n        methodId: string,\n        gatewayId?: string\n    ): ThunkAction<InitializeOffsitePaymentAction, InternalCheckoutSelectors> {\n        return store => {\n            const payload = this._paymentRequestTransformer.transform({ gatewayId, methodId }, store.getState());\n\n            return concat(\n                of(createAction(PaymentActionType.InitializeOffsitePaymentRequested)),\n                this._paymentRequestSender.initializeOffsitePayment(payload)\n                    .then(() => createAction(PaymentActionType.InitializeOffsitePaymentSucceeded))\n            ).pipe(\n                catchError(error => throwErrorAction(PaymentActionType.InitializeOffsitePaymentFailed, error))\n            );\n        };\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport PaymentRequestBody from './payment-request-body';\n\n/**\n * @todo Convert this file into TypeScript properly\n */\nexport default class PaymentRequestSender {\n    /**\n     * @constructor\n     * @param {BigpayClient} client\n     */\n    constructor(\n        private _client: any\n    ) {}\n\n    submitPayment(payload: PaymentRequestBody): Promise<Response> {\n        return new Promise((resolve, reject) => {\n            this._client.submitPayment(payload, (error: any, response: any) => {\n                if (error) {\n                    reject(this._transformResponse(error));\n                } else {\n                    resolve(this._transformResponse(response));\n                }\n            });\n        });\n    }\n\n    initializeOffsitePayment(payload: PaymentRequestBody): Promise<void> {\n        return new Promise(() => {\n            this._client.initializeOffsitePayment(payload);\n        });\n    }\n\n    private _transformResponse(response: any): Response {\n        return {\n            headers: {},\n            body: response.data,\n            status: response.status,\n            statusText: response.statusText,\n        };\n    }\n}\n","import { PaymentInstrument, VaultedInstrument } from './payment';\n\nexport default function isVaultedInstrument(instrument: PaymentInstrument): instrument is VaultedInstrument {\n    return Boolean((instrument as VaultedInstrument).instrumentId);\n}\n","import { pick } from 'lodash';\n\nimport { mapToInternalAddress } from '../address';\nimport { mapToInternalCart } from '../cart';\nimport InternalCheckoutSelectors from '../checkout/internal-checkout-selectors';\nimport { StandardError } from '../common/error/errors';\nimport { mapToInternalCustomer } from '../customer';\nimport { mapToInternalOrder } from '../order';\nimport { mapToInternalShippingOption } from '../shipping';\n\nimport isVaultedInstrument from './is-vaulted-instrument';\nimport Payment from './payment';\nimport PaymentMethod from './payment-method';\nimport PaymentMethodSelector from './payment-method-selector';\nimport PaymentRequestBody from './payment-request-body';\n\nexport default class PaymentRequestTransformer {\n    transform(payment: Payment, checkoutState: InternalCheckoutSelectors): PaymentRequestBody {\n        const billingAddress = checkoutState.billingAddress.getBillingAddress();\n        const checkout = checkoutState.checkout.getCheckout();\n        const customer = checkoutState.customer.getCustomer();\n        const order = checkoutState.order.getOrder();\n        const paymentMethod = this._getPaymentMethod(checkoutState.paymentMethods, payment.methodId, payment.gatewayId);\n        const shippingAddress = checkoutState.shippingAddress.getShippingAddress();\n        const consignments = checkoutState.consignments.getConsignments();\n        const shippingOption = checkoutState.consignments.getShippingOption();\n        const storeConfig = checkoutState.config.getStoreConfig();\n        const contextConfig = checkoutState.config.getContextConfig();\n        const instrumentMeta = checkoutState.instruments.getInstrumentsMeta();\n        const paymentMeta = checkoutState.paymentMethods.getPaymentMethodsMeta();\n        const orderMeta = checkoutState.order.getOrderMeta();\n        const internalCustomer = customer && billingAddress && mapToInternalCustomer(customer, billingAddress);\n\n        const authToken = instrumentMeta && payment.paymentData && isVaultedInstrument(payment.paymentData) ?\n            `${checkoutState.payment.getPaymentToken()}, ${instrumentMeta.vaultAccessToken}` :\n            checkoutState.payment.getPaymentToken();\n\n        if (!authToken) {\n            throw new StandardError();\n        }\n\n        return {\n            authToken,\n            paymentMethod,\n            customer: internalCustomer,\n            billingAddress: billingAddress && mapToInternalAddress(billingAddress),\n            shippingAddress: shippingAddress && mapToInternalAddress(shippingAddress, consignments),\n            shippingOption: shippingOption && mapToInternalShippingOption(shippingOption, true),\n            cart: checkout && mapToInternalCart(checkout),\n            order: order && mapToInternalOrder(order, orderMeta),\n            orderMeta,\n            payment: payment.paymentData,\n            quoteMeta: {\n                request: {\n                    ...paymentMeta,\n                    geoCountryCode: contextConfig && contextConfig.geoCountryCode,\n                },\n            },\n            source: 'bigcommerce-checkout-js-sdk',\n            store: pick(storeConfig && storeConfig.storeProfile, [\n                'storeHash',\n                'storeId',\n                'storeLanguage',\n                'storeName',\n            ]),\n        };\n    }\n\n    private _getPaymentMethod(\n        paymentMethodSelector: PaymentMethodSelector,\n        methodId: string,\n        gatewayId?: string\n    ): PaymentMethod | undefined {\n        const paymentMethod = paymentMethodSelector.getPaymentMethod(methodId, gatewayId);\n\n        if (!paymentMethod) {\n            return;\n        }\n\n        if (paymentMethod.method === 'multi-option' && !paymentMethod.gateway) {\n            return { ...paymentMethod, gateway: paymentMethod.id };\n        }\n\n        if (paymentMethod.initializationData && paymentMethod.initializationData.gateway) {\n            return { ...paymentMethod, id: paymentMethod.initializationData.gateway };\n        }\n\n        return paymentMethod;\n    }\n}\n","export enum OrderIncludes {\n    DigitalItemsCategories = 'lineItems.digitalItems.categories',\n    PhysicalItemsCategories = 'lineItems.physicalItems.categories',\n}\n\nexport default interface OrderParams {\n    include?: OrderIncludes[];\n}\n","import { ReadableDataStore } from '@bigcommerce/data-store';\nimport { some } from 'lodash';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { Registry } from '../common/registry';\nimport { RegistryOptions } from '../common/registry/registry';\n\nimport PaymentMethod from './payment-method';\nimport * as paymentMethodTypes from './payment-method-types';\nimport PaymentStrategyType from './payment-strategy-type';\nimport PaymentStrategy from './strategies/payment-strategy';\n\nexport default class PaymentStrategyRegistry extends Registry<PaymentStrategy, PaymentStrategyType> {\n    constructor(\n        private _store: ReadableDataStore<InternalCheckoutSelectors>,\n        options?: PaymentStrategyRegistryOptions\n    ) {\n        super(options);\n    }\n\n    getByMethod(paymentMethod?: PaymentMethod): PaymentStrategy {\n        if (!paymentMethod) {\n            return this.get();\n        }\n\n        const token = this._getToken(paymentMethod);\n        const cacheToken = paymentMethod.gateway || paymentMethod.id;\n\n        return this.get(token, cacheToken);\n    }\n\n    private _getToken(paymentMethod: PaymentMethod): PaymentStrategyType {\n        const methodId = paymentMethod.gateway || paymentMethod.id;\n\n        if (this._hasFactoryForMethod(methodId)) {\n            return methodId;\n        }\n\n        if (paymentMethod.type === paymentMethodTypes.OFFLINE) {\n            return PaymentStrategyType.OFFLINE;\n        }\n\n        if (this._isLegacyMethod(paymentMethod)) {\n            return PaymentStrategyType.LEGACY;\n        }\n\n        if (paymentMethod.type === paymentMethodTypes.HOSTED) {\n            return PaymentStrategyType.OFFSITE;\n        }\n\n        return PaymentStrategyType.CREDIT_CARD;\n    }\n\n    private _hasFactoryForMethod(\n        methodId: string\n    ): methodId is PaymentStrategyType {\n        return this._hasFactory(methodId);\n    }\n\n    private _isLegacyMethod(paymentMethod: PaymentMethod): boolean {\n        const config = this._store.getState().config.getStoreConfig();\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        const { clientSidePaymentProviders } = config.paymentSettings;\n\n        if (!clientSidePaymentProviders || paymentMethod.gateway === 'adyen') {\n            return false;\n        }\n\n        return !some(clientSidePaymentProviders, id =>\n            paymentMethod.id === id || paymentMethod.gateway === id\n        );\n    }\n}\n\nexport interface PaymentStrategyRegistryOptions extends RegistryOptions {\n    clientSidePaymentProviders?: string[];\n}\n","import { InvalidArgumentError } from '../../common/error/errors';\n\nexport default class PaymentArgumentInvalidError extends InvalidArgumentError {\n    constructor(invalidFields?: string[]) {\n        let message = 'Unable to submit payment for the order because the payload is invalid.';\n\n        if (invalidFields) {\n            message = `${message} Make sure the following fields are provided correctly: ${invalidFields.join(', ')}.`;\n        }\n\n        super(message);\n\n        this.name = 'PaymentArgumentInvalidError';\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class PaymentMethodCancelledError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Payment process was cancelled.');\n\n        this.name = 'PaymentMethodCancelledError';\n        this.type = 'payment_cancelled';\n    }\n}\n","import { LineItemCategory } from '../../../cart/line-item';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { AmountTransformer } from '../../../common/utility';\nimport { Order, OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { OrderIncludes } from '../../../order/order-params';\nimport { Consignment } from '../../../shipping';\nimport { PaymentArgumentInvalidError, PaymentMethodCancelledError, PaymentMethodInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { Affirm, AffirmAddress, AffirmDiscount, AffirmFailResponse, AffirmItem, AffirmRequestData, AffirmSuccessResponse } from './affirm';\nimport AffirmScriptLoader from './affirm-script-loader';\n\nexport default class AffirmPaymentStrategy implements PaymentStrategy {\n    private _affirm?: Affirm;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _affirmScriptLoader: AffirmScriptLoader\n    ) { }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(options.methodId))\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n                if (!paymentMethod || !paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const { config: { testMode }, clientToken: publicKey } = paymentMethod;\n\n                return this._affirmScriptLoader.load(publicKey, testMode);\n            })\n            .then(affirm => {\n                this._affirm = affirm;\n\n                return this._store.getState();\n            });\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const methodId = payload.payment && payload.payment.methodId;\n        const { useStoreCredit } = payload;\n        const { _affirm } = this;\n\n        if (!_affirm) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!methodId) {\n            throw new PaymentArgumentInvalidError(['payment.methodId']);\n        }\n\n        const requestOptions = {\n            ...options,\n            params: {\n                include: [\n                    OrderIncludes.PhysicalItemsCategories,\n                    OrderIncludes.DigitalItemsCategories,\n                ],\n            },\n        };\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder({ useStoreCredit }, requestOptions))\n            .then<AffirmSuccessResponse>(() => {\n                _affirm.checkout(this._getCheckoutInformation());\n\n                return new Promise((resolve, reject) => {\n                    _affirm.checkout.open({\n                        onFail: (failObject: AffirmFailResponse) => {\n                            failObject.reason === 'canceled' ? reject(new PaymentMethodCancelledError()) : reject(new PaymentMethodInvalidError());\n                        },\n                        onSuccess: successObject => { resolve(successObject); },\n                    });\n                    _affirm.ui.error.on('close', () => {\n                        reject(new PaymentMethodCancelledError());\n                    });\n                });\n            })\n            .then(result => {\n                const paymentPayload = {\n                    methodId,\n                    paymentData: { nonce: result.checkout_token },\n                };\n\n                return this._store.dispatch(this._paymentActionCreator.submitPayment(paymentPayload));\n            });\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._affirm) {\n            this._affirm = undefined;\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _getCheckoutInformation(): AffirmRequestData {\n        const state = this._store.getState();\n        const config = state.config.getStoreConfig();\n        const consignments = state.consignments.getConsignments();\n        const order = state.order.getOrder();\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!order) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        const amountTransformer = new AmountTransformer(order.currency.decimalPlaces);\n        const billingAddress = this._getBillingAddress();\n\n        return {\n            merchant: {\n                user_confirmation_url: config.links.checkoutLink,\n                user_cancel_url: config.links.checkoutLink,\n                user_confirmation_url_action: 'POST',\n            },\n            shipping: this._getShippingAddress() || billingAddress,\n            billing: billingAddress,\n            items: this._getItems(amountTransformer, order),\n            metadata: {\n                shipping_type: this._getShippingType(consignments),\n                mode: 'modal',\n                platform_type: 'BigCommerce',\n                platform_version: '',\n                platform_affirm: '',\n            },\n            discounts: this._getDiscounts(amountTransformer, order),\n            order_id: order.orderId ? order.orderId.toString() : '',\n            shipping_amount: amountTransformer.toInteger(order.shippingCostTotal),\n            tax_amount: amountTransformer.toInteger(order.taxTotal),\n            total: amountTransformer.toInteger(order.orderAmount),\n        };\n    }\n\n    private _getShippingType(consignments?: Consignment[]): string {\n        if (!consignments) {\n            return '';\n        }\n\n        const consignment = consignments[0];\n\n        return consignment && consignment.selectedShippingOption ?\n            consignment.selectedShippingOption.type : '';\n    }\n\n    private _getBillingAddress(): AffirmAddress {\n        const state = this._store.getState();\n        const billingAddress = state.billingAddress.getBillingAddress();\n\n        if (!billingAddress) {\n            throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n        }\n\n        const billingInformation = {\n            name: {\n                first: billingAddress.firstName,\n                last: billingAddress.lastName,\n                full: `${billingAddress.firstName} ${billingAddress.lastName}`,\n            },\n            address: {\n                line1: billingAddress.address1,\n                line2: billingAddress.address2,\n                city: billingAddress.city,\n                state: billingAddress.stateOrProvinceCode,\n                zipcode: billingAddress.postalCode,\n                country: billingAddress.countryCode,\n            },\n            phone_number: billingAddress.phone,\n            email: billingAddress.email,\n        };\n\n        return billingInformation;\n    }\n\n    private _getShippingAddress(): AffirmAddress | undefined {\n        const state = this._store.getState();\n        const shippingAddress = state.shippingAddress.getShippingAddress();\n\n        if (!shippingAddress) {\n            return;\n        }\n\n        const shippingInformation = {\n            name: {\n                first: shippingAddress.firstName,\n                last: shippingAddress.lastName,\n                full: `${shippingAddress.firstName} ${shippingAddress.lastName}`,\n            },\n            address: {\n                line1: shippingAddress.address1,\n                line2: shippingAddress.address2,\n                city: shippingAddress.city,\n                state: shippingAddress.stateOrProvinceCode,\n                zipcode: shippingAddress.postalCode,\n                country: shippingAddress.countryCode,\n            },\n            phone_number: shippingAddress.phone,\n        };\n\n        return shippingInformation;\n    }\n\n    private _getItems(amountTransformer: AmountTransformer, order: Order): AffirmItem[] {\n        const items: AffirmItem[] = [];\n\n        for (const item of order.lineItems.physicalItems) {\n            items.push({\n                display_name: item.name,\n                sku: item.sku,\n                unit_price: amountTransformer.toInteger(item.salePrice),\n                qty: item.quantity,\n                item_image_url: item.imageUrl,\n                item_url: item.url,\n                categories: this._getCategories(item.categories),\n            });\n        }\n\n        for (const item of order.lineItems.digitalItems) {\n            items.push({\n                display_name: item.name,\n                sku: item.sku,\n                unit_price: amountTransformer.toInteger(item.salePrice),\n                qty: item.quantity,\n                item_image_url: item.imageUrl,\n                item_url: item.url,\n                categories: this._getCategories(item.categories),\n            });\n        }\n\n        for (const item of order.lineItems.giftCertificates) {\n            items.push({\n                display_name: item.name,\n                sku: '',\n                unit_price: amountTransformer.toInteger(item.amount),\n                qty: 1,\n                item_image_url: '',\n                item_url: '',\n            });\n        }\n\n        if (order.lineItems.customItems) {\n            for (const item of order.lineItems.customItems) {\n                items.push({\n                    display_name: item.name,\n                    sku: item.sku,\n                    unit_price: amountTransformer.toInteger(item.listPrice),\n                    qty: item.quantity,\n                    item_image_url: '',\n                    item_url: '',\n                });\n            }\n        }\n\n        return items;\n    }\n\n    private _getDiscounts(amountTransformer: AmountTransformer, order: Order): AffirmDiscount {\n        const discounts: AffirmDiscount = {};\n\n        for (const line of order.coupons) {\n            if (line.discountedAmount > 0) {\n                discounts[line.code] = {\n                    discount_amount: amountTransformer.toInteger(line.discountedAmount),\n                    discount_display_name: line.displayName,\n                };\n            }\n        }\n\n        if (order.discountAmount > 0) {\n            discounts.DISCOUNTED_AMOUNT = {\n                discount_amount: amountTransformer.toInteger(order.discountAmount),\n                discount_display_name: 'discount',\n            };\n        }\n\n        return discounts;\n    }\n\n    private _getCategories(categories?: LineItemCategory[][]): string[][] {\n        if (!categories) {\n            return[[]];\n        }\n\n        return categories.map(categoryTree => categoryTree.map(category => category.name));\n    }\n}\n","/**\n * Used this approach as Affirm uses snipped for initializing. Please refer to Affirm documentation in: https://docs.affirm.com/Integrate_Affirm/Direct_API#1._Add_Affirm.js\n */\nexport default Function(`\n'use strict';\nreturn function loadAffirmJS(apiKey, scriptURL) {\n    var _affirm_config = {\n        public_api_key:  apiKey,\n        script:          scriptURL\n    };\n    (function(l,g,m,e,a,f,b){var d,c=l[m]||{},h=document.createElement(f),n=document.getElementsByTagName(f)[0],k=function(a,b,c){return function(){a[b]._.push([c,arguments])}};c[e]=k(c,e,\"set\");d=c[e];c[a]={};c[a]._=[];d._=[];c[a][b]=k(c,a,b);a=0;for(b=\"set add save post open empty reset on off trigger ready setProduct\".split(\" \");a<b.length;a++)d[b[a]]=k(c,e,b[a]);a=0;for(b=[\"get\",\"token\",\"url\",\"items\"];a<b.length;a++)d[b[a]]=function(){};h.async=!0;h.src=g[f];n.parentNode.insertBefore(h,n);delete g[f];d(g);l[m]=c})(window,_affirm_config,\"affirm\",\"checkout\",\"ui\",\"script\",\"ready\");\n}`)();\n","import { StandardError } from '../../../common/error/errors';\n\nimport { Affirm, AffirmHostWindow, AffirmScripts } from './affirm';\nimport loadAffirmJS from './affirmJs';\n\nexport default class AffirmScriptLoader {\n    constructor(\n        public _window: AffirmHostWindow = window\n    ) { }\n\n    load(apikey?: string, testMode?: boolean): Promise<Affirm> {\n        const scriptURI = this._getScriptURI(testMode);\n\n        loadAffirmJS(apikey, scriptURI);\n        if (!this._window.affirm) {\n            throw new StandardError();\n        }\n\n        return Promise.resolve(this._window.affirm);\n    }\n\n    private _getScriptURI(testMode: boolean = false): string {\n        const SCRIPTS_DEFAULT: AffirmScripts = {\n            PROD: '//cdn1.affirm.com/js/v2/affirm.js',\n            SANDBOX: '//cdn1-sandbox.affirm.com/js/v2/affirm.js',\n        };\n\n        return testMode ? SCRIPTS_DEFAULT.SANDBOX : SCRIPTS_DEFAULT.PROD;\n    }\n}\n","import { CheckoutStore, CheckoutValidator, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport AfterpayScriptLoader from './afterpay-script-loader';\nimport AfterpaySdk from './afterpay-sdk';\n\nexport default class AfterpayPaymentStrategy implements PaymentStrategy {\n    private _afterpaySdk?: AfterpaySdk;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutValidator: CheckoutValidator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _afterpayScriptLoader: AfterpayScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId, options.gatewayId);\n        const config = state.config.getStoreConfig();\n        const storeCountryName = config ? config.storeProfile.storeCountry : '';\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._afterpayScriptLoader.load(paymentMethod, this._mapCountryToISO2(storeCountryName))\n            .then(afterpaySdk => {\n                this._afterpaySdk = afterpaySdk;\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._afterpaySdk) {\n            this._afterpaySdk = undefined;\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const paymentId = payload.payment && payload.payment.gatewayId;\n\n        if (!paymentId) {\n            throw new PaymentArgumentInvalidError(['payment.gatewayId']);\n        }\n\n        const useStoreCredit = !!payload.useStoreCredit;\n        const state = this._store.getState();\n        const config = state.config.getStoreConfig();\n        const storeCountryName = config ? config.storeProfile.storeCountry : '';\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.initializePayment(paymentId, { useStoreCredit })\n        )\n            .then(state => this._checkoutValidator.validate(state.checkout.getCheckout(), options))\n            .then(() => this._store.dispatch(\n                this._paymentMethodActionCreator.loadPaymentMethod(paymentId, options)\n            ))\n            .then(state => this._redirectToAfterpay(storeCountryName, state.paymentMethods.getPaymentMethod(paymentId)))\n            // Afterpay will handle the rest of the flow so return a promise that doesn't really resolve\n            .then(() => new Promise<never>(() => {}));\n    }\n\n    finalize(options: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._remoteCheckoutActionCreator.loadSettings(options.methodId))\n            .then(state => {\n                const payment = state.payment.getPaymentId();\n                const config = state.config.getContextConfig();\n                const afterpay = state.remoteCheckout.getCheckout('afterpay');\n\n                if (!payment) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!config || !config.payment.token) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!afterpay || !afterpay.settings) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n\n                const orderPayload = {\n                    useStoreCredit: afterpay.settings.useStoreCredit,\n                };\n\n                const paymentPayload = {\n                    methodId: payment.providerId,\n                    paymentData: { nonce: config.payment.token },\n                };\n\n                return this._store.dispatch(this._orderActionCreator.submitOrder(orderPayload, options))\n                    .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment(paymentPayload)));\n            });\n    }\n\n    private _redirectToAfterpay(countryName: string, paymentMethod?: PaymentMethod): void {\n        if (!this._afterpaySdk || !paymentMethod || !paymentMethod.clientToken) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        this._afterpaySdk.initialize({ countryCode: this._mapCountryToISO2(countryName)});\n        this._afterpaySdk.redirect({ token: paymentMethod.clientToken });\n    }\n\n    private _mapCountryToISO2(countryName: string): string {\n        switch (countryName) {\n        case 'Australia':\n            return 'AU';\n\n        case 'New Zealand':\n            return 'NZ';\n\n        case 'United States':\n            return 'US';\n\n        default:\n            return 'AU';\n        }\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport PaymentMethod from '../../payment-method';\n\nimport AfterpaySdk from './afterpay-sdk';\nimport AfterpayWindow from './afterpay-window';\n\ninterface AfterpayScripts {\n    PROD: string;\n    SANDBOX: string;\n}\n\nconst SCRIPTS_DEFAULT: AfterpayScripts = {\n    PROD: '//portal.afterpay.com/afterpay-async.js',\n    SANDBOX: '//portal-sandbox.afterpay.com/afterpay-async.js',\n};\n\nconst SCRIPTS_US: AfterpayScripts = {\n    PROD: '//portal.afterpay.com/afterpay-async.js',\n    SANDBOX: '//portal.us-sandbox.afterpay.com/afterpay-async.js',\n};\n\n/** Class responsible for loading the Afterpay SDK */\nexport default class AfterpayScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    /**\n     * Loads the appropriate Afterpay SDK depending on the payment method data.\n     * @param method the payment method data\n     */\n    load(method: PaymentMethod, countryCode: string): Promise<AfterpaySdk> {\n        const testMode = method.config.testMode || false;\n        const scriptURI = this._getScriptURI(countryCode, testMode);\n\n        return this._scriptLoader.loadScript(scriptURI)\n            .then(() => (window as AfterpayWindow).AfterPay);\n    }\n\n    private _getScriptURI(countryCode: string, testMode: boolean): string {\n        if (countryCode === 'US') {\n            return testMode ? SCRIPTS_US.SANDBOX : SCRIPTS_US.PROD;\n        }\n\n        return testMode ? SCRIPTS_DEFAULT.SANDBOX : SCRIPTS_DEFAULT.PROD;\n    }\n\n}\n","import { isEqual } from 'lodash';\n\nimport { omitPrivate } from '../common/utility';\n\nimport InternalAddress from './internal-address';\n\nexport default function isInternalAddressEqual(addressA: Partial<InternalAddress>, addressB: Partial<InternalAddress>): boolean {\n    return isEqual(normalize(addressA), normalize(addressB));\n}\n\nfunction normalize(address: Partial<InternalAddress>): Partial<InternalAddress> {\n    const ignoredKeys = ['id', 'provinceCode'];\n\n    return (Object.keys(omitPrivate(address) || {}) as Array<keyof InternalAddress>)\n        .reduce(\n            (result, key) => ignoredKeys.indexOf(key) === -1 && address[key] ?\n                { ...result, [key]: address[key] } :\n                result,\n            {}\n        );\n}\n","import isPrivate from './is-private';\nimport omitDeep from './omit-deep';\n\nexport default function omitPrivate(object: any): any {\n    return omitDeep(object, (value: any, key: string) => isPrivate(key));\n}\n","import { BillingAddress } from '../billing';\n\nimport Address from './address';\nimport InternalAddress from './internal-address';\n\nexport default function mapFromInternalAddress(address: InternalAddress): Address | BillingAddress {\n    return {\n        id: address.id,\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        address1: address.addressLine1,\n        address2: address.addressLine2,\n        city: address.city,\n        stateOrProvince: address.province,\n        stateOrProvinceCode: address.provinceCode,\n        postalCode: address.postCode,\n        country: address.country,\n        countryCode: address.countryCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    };\n}\n","import { noop } from 'lodash';\n\nimport {\n    isInternalAddressEqual,\n    mapFromInternalAddress,\n    mapToInternalAddress\n} from '../../../address';\nimport { BillingAddressActionCreator } from '../../../billing';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    RequestError\n} from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { RemoteCheckoutSynchronizationError } from '../../../remote-checkout/errors';\nimport PaymentMethod from '../../payment-method';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport AmazonPayConfirmationFlow from './amazon-pay-confirmation-flow';\nimport AmazonPayOrderReference from './amazon-pay-order-reference';\nimport AmazonPayPaymentInitializeOptions from './amazon-pay-payment-initialize-options';\nimport AmazonPayScriptLoader from './amazon-pay-script-loader';\nimport AmazonPayWallet, { AmazonPayWalletOptions } from './amazon-pay-wallet';\nimport AmazonPayWindow from './amazon-pay-window';\n\nexport default class AmazonPayPaymentStrategy implements PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _walletOptions?: AmazonPayPaymentInitializeOptions;\n    private _window: AmazonPayWindow;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _scriptLoader: AmazonPayScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { amazon: amazonOptions, methodId } = options;\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n        if (!amazonOptions) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.amazon\" argument is not provided.');\n        }\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._walletOptions = amazonOptions;\n        this._paymentMethod = paymentMethod;\n\n        return new Promise((resolve, reject) => {\n            const onReady = () => {\n                this._createWallet(amazonOptions)\n                    .then(resolve)\n                    .catch(reject);\n            };\n\n            this._scriptLoader.loadWidget(paymentMethod, onReady)\n                .catch(reject);\n        })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._walletOptions = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const referenceId = this._getOrderReferenceId();\n        const sellerId = this._getMerchantId();\n\n        if (!referenceId || !sellerId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!payload.payment) {\n            throw new InvalidArgumentError('Unable to proceed because \"payload.payment.methodId\" argument is not provided.');\n        }\n\n        const { payment: { paymentData, ...paymentPayload }, useStoreCredit = false } = payload;\n\n        if (options && this._paymentMethod && this._paymentMethod.config.is3dsEnabled) {\n            return this._processPaymentWith3ds(\n                sellerId,\n                referenceId,\n                paymentPayload.methodId,\n                useStoreCredit,\n                options\n            );\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.initializePayment(paymentPayload.methodId, { referenceId, useStoreCredit })\n        )\n            .then(() => this._store.dispatch(\n                this._orderActionCreator.submitOrder({\n                    ...payload,\n                    payment: paymentPayload,\n                }, options)\n            ))\n            .catch(error => {\n                if (error instanceof RequestError && error.body.type === 'provider_widget_error' && this._walletOptions) {\n                    return this._createWallet(this._walletOptions)\n                        .then(() => Promise.reject(error));\n                }\n\n                return Promise.reject(error);\n            });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _getMerchantId(): string | undefined {\n        return this._paymentMethod && this._paymentMethod.config.merchantId;\n    }\n\n    private _getOrderReferenceId(): string | undefined {\n        const state = this._store.getState();\n        const amazon = state.remoteCheckout.getCheckout('amazon');\n\n        return amazon ? amazon.referenceId : undefined;\n    }\n\n    private _createWallet(options: AmazonPayPaymentInitializeOptions): Promise<AmazonPayWallet> {\n        return new Promise((resolve, reject) => {\n            const { container, onError = noop, onPaymentSelect = noop, onReady = noop } = options;\n            const referenceId = this._getOrderReferenceId();\n            const merchantId = this._getMerchantId();\n\n            if (!document.getElementById(container)) {\n                return reject(new InvalidArgumentError('Unable to create AmazonPay Wallet widget without valid container ID.'));\n            }\n\n            if (!this._window.OffAmazonPayments) {\n                return reject(new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized));\n            }\n\n            if (!merchantId) {\n                return reject(new MissingDataError(MissingDataErrorType.MissingPaymentMethod));\n            }\n\n            const walletOptions: AmazonPayWalletOptions = {\n                amazonOrderReferenceId: referenceId,\n                design: { designMode: 'responsive' },\n                scope: 'payments:billing_address payments:shipping_address payments:widget profile',\n                sellerId: merchantId,\n                onError: error => {\n                    reject(error);\n                    onError(error);\n                },\n                onPaymentSelect: orderReference => {\n                    this._synchronizeBillingAddress()\n                        .then(() => onPaymentSelect(orderReference))\n                        .catch(onError);\n                },\n                onReady: orderReference => {\n                    resolve();\n                    onReady(orderReference);\n                },\n            };\n\n            if (!walletOptions.amazonOrderReferenceId) {\n                walletOptions.onReady = orderReference => {\n                    this._updateOrderReference(orderReference)\n                        .then(() => {\n                            resolve();\n                            onReady(orderReference);\n                        })\n                        .catch(onError);\n                };\n            }\n\n            const widget = new this._window.OffAmazonPayments.Widgets.Wallet(walletOptions);\n\n            widget.bind(container);\n\n            return widget;\n        });\n    }\n\n    private _synchronizeBillingAddress(): Promise<InternalCheckoutSelectors> {\n        const referenceId = this._getOrderReferenceId();\n        const methodId = this._paymentMethod && this._paymentMethod.id;\n\n        if (!methodId || !referenceId) {\n            throw new RemoteCheckoutSynchronizationError();\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.initializeBilling(methodId, { referenceId })\n        )\n            .then(state => {\n                const amazon = state.remoteCheckout.getCheckout('amazon');\n                const remoteAddress = amazon && amazon.billing && amazon.billing.address;\n                const billingAddress = state.billingAddress.getBillingAddress();\n                const internalBillingAddress = billingAddress && mapToInternalAddress(billingAddress);\n\n                if (remoteAddress === false) {\n                    throw new RemoteCheckoutSynchronizationError();\n                }\n\n                if (!remoteAddress || isInternalAddressEqual(remoteAddress, internalBillingAddress || {})) {\n                    return this._store.getState();\n                }\n\n                return this._store.dispatch(\n                    this._billingAddressActionCreator.updateAddress(mapFromInternalAddress(remoteAddress))\n                );\n            });\n    }\n\n    private _updateOrderReference(orderReference: AmazonPayOrderReference): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.updateCheckout('amazon', {\n                referenceId: orderReference.getAmazonOrderReferenceId(),\n            })\n        );\n    }\n\n    private _processPaymentWith3ds(sellerId: string, referenceId: string, methodId: string, useStoreCredit: boolean, options: PaymentRequestOptions): Promise<never> {\n        return new Promise((resolve, reject) => {\n            if (!this._window.OffAmazonPayments) {\n                return reject(new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized));\n            }\n\n            return this._window.OffAmazonPayments.initConfirmationFlow(\n                sellerId,\n                referenceId,\n                (confirmationFlow: AmazonPayConfirmationFlow) => {\n                    return this._store.dispatch(\n                        this._orderActionCreator.submitOrder({useStoreCredit}, options)\n                    )\n                        .then(() => this._store.dispatch(\n                            this._remoteCheckoutActionCreator.initializePayment(methodId, {\n                                referenceId,\n                                useStoreCredit,\n                            }))\n                        )\n                        .then(() => {\n                            confirmationFlow.success();\n\n                            return new Promise<never>(() => {});\n                        })\n                        .catch(error => {\n                            confirmationFlow.error();\n\n                            return reject(error);\n                        });\n                }\n            );\n        });\n    }\n}\n","export interface OverlayOptions {\n    background?: string;\n    id?: string;\n    transitionDuration?: number;\n}\n\nexport interface OverlayShowOptions {\n    onClick?(event: MouseEvent): void;\n}\n\nexport default class Overlay {\n    private _element: HTMLElement;\n    private _unregisterClick?: () => void;\n\n    constructor(options?: OverlayOptions) {\n        this._element = this._createElement(options);\n    }\n\n    show(options?: OverlayShowOptions): void {\n        if (this._element.parentElement) {\n            return;\n        }\n\n        this._registerClick(options);\n\n        document.body.appendChild(this._element);\n\n        // Fade In\n        setTimeout(() => this._element.style.opacity = '1');\n    }\n\n    remove(): void {\n        if (!this._element.parentElement) {\n            return;\n        }\n\n        if (this._unregisterClick) {\n            this._unregisterClick();\n        }\n\n        this._removeAfterTransition();\n\n        setTimeout(() => this._element.style.opacity = '0');\n    }\n\n    private _createElement(options?: OverlayOptions): HTMLElement {\n        const element = document.createElement('div');\n        const {\n            background = 'rgba(0, 0, 0, 0.8)',\n            id = null,\n            transitionDuration = 400,\n        } = options || {};\n\n        element.style.background = background;\n        element.style.display = 'block';\n        element.style.height = '100%';\n        element.style.left = '0px';\n        element.style.opacity = '0';\n        element.style.position = 'fixed';\n        element.style.top = '0px';\n        element.style.transition = `opacity ${transitionDuration}ms ease-out`;\n        element.style.width = '100%';\n        element.style.zIndex = '2147483647';\n\n        if (id) {\n            element.id = id;\n        }\n\n        return element;\n    }\n\n    private _registerClick(options?: OverlayShowOptions): void {\n        if (this._unregisterClick) {\n            this._unregisterClick();\n        }\n\n        if (options && options.onClick) {\n            const { onClick } = options;\n\n            this._element.addEventListener('click', onClick);\n\n            this._unregisterClick = () => {\n                this._element.removeEventListener('click', onClick);\n                this._unregisterClick = undefined;\n            };\n        }\n    }\n\n    private _removeAfterTransition(): void {\n        const handeTransition: (event: Event) => void = event => {\n            // NOTE: `event` is not correctly typed in this version of TS\n            if ((event as TransitionEvent).propertyName !== 'opacity') {\n                return;\n            }\n\n            if (this._element.parentElement) {\n                this._element.parentElement.removeChild(this._element);\n            }\n\n            this._element.removeEventListener('transitionend', handeTransition);\n        };\n\n        this._element.addEventListener('transitionend', handeTransition);\n    }\n}\n","export default class CancellablePromise<T> {\n    promise: Promise<T>;\n    cancel!: (reason?: any) => void;\n\n    constructor(promise: Promise<T>) {\n        const cancellable = new Promise<T>((resolve, reject) => {\n            this.cancel = reject;\n        });\n\n        this.promise = Promise.race([promise, cancellable]);\n    }\n}\n","import { Address } from '../../../address';\nimport { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { Overlay } from '../../../common/overlay';\nimport { CancellablePromise } from '../../../common/utility';\nimport { OrderPaymentRequestBody } from '../../../order';\nimport { PaymentMethodCancelledError } from '../../errors';\nimport { CreditCardInstrument, NonceInstrument } from '../../payment';\n\nimport { BraintreePaypal, BraintreeRequestData } from './braintree';\nimport { BraintreePaymentInitializeOptions, BraintreeThreeDSecureOptions } from './braintree-payment-options';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\n\nexport default class BraintreePaymentProcessor {\n    private _threeDSecureOptions?: BraintreeThreeDSecureOptions;\n\n    constructor(\n        private _braintreeSDKCreator: BraintreeSDKCreator,\n        private _overlay: Overlay\n    ) {}\n\n    initialize(clientToken: string, options?: BraintreePaymentInitializeOptions): void {\n        this._braintreeSDKCreator.initialize(clientToken);\n        this._threeDSecureOptions = options && options.threeDSecure;\n    }\n\n    preloadPaypal(): Promise<BraintreePaypal> {\n        return this._braintreeSDKCreator.getPaypal();\n    }\n\n    tokenizeCard(payment: OrderPaymentRequestBody, billingAddress: Address): Promise<NonceInstrument> {\n        const { paymentData } = payment;\n        const requestData = this._mapToCreditCard(paymentData as CreditCardInstrument, billingAddress);\n\n        return this._braintreeSDKCreator.getClient()\n            .then(client => client.request(requestData))\n            .then(({ creditCards }) => ({\n                nonce: creditCards[0].nonce,\n            }));\n    }\n\n    paypal(amount: number, storeLanguage: string, currency: string, offerCredit: boolean): Promise<NonceInstrument> {\n        return this._braintreeSDKCreator.getPaypal()\n            .then(paypal => {\n                this._overlay.show({\n                    onClick: () => paypal.focusWindow(),\n                });\n\n                return paypal.tokenize({\n                    amount,\n                    currency,\n                    enableShippingAddress: true,\n                    flow: 'checkout',\n                    locale: storeLanguage,\n                    offerCredit,\n                    useraction: 'commit',\n                });\n            })\n            .then(response => {\n                this._overlay.remove();\n\n                return response;\n            })\n            .catch(error => {\n                this._overlay.remove();\n\n                throw error;\n            });\n    }\n\n    verifyCard(payment: OrderPaymentRequestBody, billingAddress: Address, amount: number): Promise<NonceInstrument> {\n        if (!this._threeDSecureOptions) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const { addFrame, removeFrame } = this._threeDSecureOptions;\n\n        return Promise.all([\n            this.tokenizeCard(payment, billingAddress),\n            this._braintreeSDKCreator.get3DS(),\n        ]).then(([paymentData, threeDSecure]) => {\n            const { nonce } = paymentData;\n            const cancelVerifyCard = () => threeDSecure.cancelVerifyCard()\n                .then(response => {\n                    verification.cancel(new PaymentMethodCancelledError());\n\n                    return response;\n                });\n\n            const verification = new CancellablePromise(\n                threeDSecure.verifyCard({\n                    addFrame: (error, iframe) => {\n                        addFrame(error, iframe, cancelVerifyCard);\n                    },\n                    amount,\n                    nonce,\n                    removeFrame,\n                })\n            );\n\n            return verification.promise;\n        });\n    }\n\n    appendSessionId(processedPayment: Promise<NonceInstrument>): Promise<NonceInstrument> {\n        return processedPayment\n            .then(paymentData => Promise.all([paymentData, this._braintreeSDKCreator.getDataCollector()]))\n            .then(([paymentData, { deviceData }]) => ({ ...paymentData, deviceSessionId: deviceData }));\n    }\n\n    deinitialize(): Promise<void> {\n        return this._braintreeSDKCreator.teardown();\n    }\n\n    private _mapToCreditCard(creditCard: CreditCardInstrument, billingAddress: Address): BraintreeRequestData {\n        let streetAddress = billingAddress.address1;\n\n        if (billingAddress.address2) {\n            streetAddress = ` ${billingAddress.address2}`;\n        }\n\n        return {\n            data: {\n                creditCard: {\n                    cardholderName: creditCard.ccName,\n                    number: creditCard.ccNumber,\n                    cvv: creditCard.ccCvv,\n                    expirationDate: `${creditCard.ccExpiry.month}/${creditCard.ccExpiry.year}`,\n                    options: {\n                        validate: false,\n                    },\n                    billingAddress: {\n                        countryName: billingAddress.country,\n                        postalCode: billingAddress.postalCode,\n                        streetAddress,\n                    },\n                },\n            },\n            endpoint: 'payment_methods/credit_cards',\n            method: 'post',\n        };\n    }\n}\n","import isVaultedInstrument from './is-vaulted-instrument';\nimport { CreditCardInstrument, PaymentInstrument } from './payment';\n\nexport default function isCreditCardLike(instrument: PaymentInstrument): instrument is CreditCardInstrument {\n    const card = instrument as CreditCardInstrument;\n\n    return !isVaultedInstrument(card) &&\n        typeof card.ccName === 'string' &&\n        typeof card.ccNumber === 'string' &&\n        typeof card.ccExpiry === 'object' &&\n        typeof card.ccExpiry.month === 'string' &&\n        typeof card.ccExpiry.year === 'string';\n    }\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, StandardError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport isCreditCardLike from '../../is-credit-card-like';\nimport isVaultedInstrument from '../../is-vaulted-instrument';\nimport Payment, { PaymentInstrument } from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport BraintreePaymentProcessor from './braintree-payment-processor';\n\nexport default class BraintreeCreditCardPaymentStrategy implements PaymentStrategy {\n    private _is3dsEnabled?: boolean;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _braintreePaymentProcessor: BraintreePaymentProcessor\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(options.methodId))\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n                if (!paymentMethod || !paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                this._braintreePaymentProcessor.initialize(paymentMethod.clientToken, options.braintree);\n                this._is3dsEnabled = paymentMethod.config.is3dsEnabled;\n\n                return this._store.getState();\n            })\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        return this._store.dispatch(\n            this._orderActionCreator.submitOrder(order, options)\n        )\n            .then(state =>\n                state.payment.isPaymentDataRequired(order.useStoreCredit) && payment ?\n                    this._preparePaymentData(payment) :\n                    Promise.resolve(payment as Payment)\n            )\n            .then(payment =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment(payment))\n            )\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._braintreePaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    private _handleError(error: Error): never {\n        if (error.name === 'BraintreeError') {\n            throw new StandardError(error.message);\n        }\n\n        throw error;\n    }\n\n    private _isUsingVaulting(paymentData: PaymentInstrument): boolean {\n        if (isCreditCardLike(paymentData)) {\n            return Boolean(paymentData.shouldSaveInstrument);\n        }\n\n        return isVaultedInstrument(paymentData);\n    }\n\n    private _preparePaymentData(payment: OrderPaymentRequestBody): Promise<Payment> {\n        const { paymentData } = payment;\n        const state = this._store.getState();\n\n        if (paymentData && this._isUsingVaulting(paymentData)) {\n            return Promise.resolve(payment as Payment);\n        }\n\n        const order = state.order.getOrder();\n        const billingAddress = state.billingAddress.getBillingAddress();\n\n        if (!order) {\n            throw new MissingDataError(MissingDataErrorType.MissingOrder);\n        }\n\n        if (!billingAddress) {\n            throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n        }\n\n        const tokenizedCard = this._is3dsEnabled ?\n            this._braintreePaymentProcessor.verifyCard(payment, billingAddress, order.orderAmount) :\n            this._braintreePaymentProcessor.tokenizeCard(payment, billingAddress);\n\n        return this._braintreePaymentProcessor.appendSessionId(tokenizedCard)\n            .then(paymentData => ({ ...payment, paymentData }));\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, StandardError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError, PaymentMethodCancelledError } from '../../errors';\nimport Payment from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { BraintreeError } from './braintree';\nimport BraintreePaymentProcessor from './braintree-payment-processor';\nimport isBraintreeError from './is-braintree-error';\n\nexport default class BraintreePaypalPaymentStrategy implements PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _braintreePaymentProcessor: BraintreePaymentProcessor,\n        private _credit: boolean = false\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { braintree: braintreeOptions, methodId } = options;\n\n        this._paymentMethod = this._store.getState().paymentMethods.getPaymentMethod(methodId);\n\n        if (this._paymentMethod && this._paymentMethod.nonce) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                this._braintreePaymentProcessor.initialize(this._paymentMethod.clientToken, braintreeOptions);\n\n                return this._braintreePaymentProcessor.preloadPaypal();\n            })\n            .then(() => this._store.getState())\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        return (payment ? this._preparePaymentData(payment, order.useStoreCredit) : Promise.resolve(payment))\n            .then(payment => Promise.all([payment, this._store.dispatch(this._orderActionCreator.submitOrder(order, options))]))\n            .then(([payment]) => this._store.dispatch(this._paymentActionCreator.submitPayment(payment)))\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(options: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._braintreePaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    private _handleError(error: BraintreeError | Error): never {\n        if (!isBraintreeError(error)) {\n            throw error;\n        }\n\n        if (error.code === 'PAYPAL_POPUP_CLOSED') {\n            throw new PaymentMethodCancelledError(error.message);\n        }\n\n        throw new StandardError(error.message);\n    }\n\n    private _preparePaymentData(payment: OrderPaymentRequestBody, useStoreCredit?: boolean): Promise<Payment> {\n        const state = this._store.getState();\n        const grandTotal = state.checkout.getGrandTotal(useStoreCredit);\n        const config = state.config.getStoreConfig();\n\n        if (!grandTotal) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!this._paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const { currency, storeProfile: { storeLanguage } } = config;\n        const { method, nonce } = this._paymentMethod;\n\n        if (nonce) {\n            return Promise.resolve({ ...payment, paymentData: { nonce, method } });\n        }\n\n        const tokenizedCard = this._braintreePaymentProcessor\n            .paypal(grandTotal, storeLanguage, currency.code, this._credit);\n\n        return this._braintreePaymentProcessor.appendSessionId(tokenizedCard)\n            .then(paymentData => ({ ...payment, paymentData: { ...paymentData, method } }));\n    }\n}\n","export enum ChasePayEventType {\n    StartCheckout = 'startCheckout',\n    CompleteCheckout = 'completeCheckout',\n    CancelCheckout = 'cancelCheckout',\n}\n\nexport interface ChasePayEventMap {\n    [ChasePayEventType.StartCheckout](digitalSessionId: string): void;\n    [ChasePayEventType.CompleteCheckout](payload: ChasePaySuccessPayload): void;\n    [ChasePayEventType.CancelCheckout](): void;\n}\n\nexport interface ChasePayHostWindow extends Window {\n    JPMC?: JPMC;\n}\n\nexport interface JPMC {\n    ChasePay: ChasePay;\n}\n\nexport interface ChasePaySuccessPayload {\n    sessionToken: string;\n}\n\nexport interface ChasePayInsertOptions {\n    color?: string;\n    containers?: string[];\n    height?: number;\n    width?: number;\n}\n\nexport interface ChasePayConfigureOptions {\n    language?: string;\n    zindex?: number;\n    sessionWarningTime?: number;\n    sessionTimeoutTime?: number;\n}\n\nexport interface ChasePay {\n    EventType: {\n        START_CHECKOUT: ChasePayEventType.StartCheckout;\n        COMPLETE_CHECKOUT: ChasePayEventType.CompleteCheckout;\n        CANCEL_CHECKOUT: ChasePayEventType.CancelCheckout;\n    };\n    isChasePayUp(): boolean;\n    insertButtons(options: ChasePayInsertOptions): void;\n    insertBrandings(options: ChasePayInsertOptions): void;\n    startCheckout(digitalSessionId?: string): void;\n    showLoadingAnimation(): void;\n    configure(options: ChasePayConfigureOptions): void;\n    on<ChasePayEventType extends keyof ChasePayEventMap>(eventType: ChasePayEventType, callback: ChasePayEventMap[ChasePayEventType]): {};\n}\n\nexport interface ChasePayInitializeOptions {\n    /**\n     * This container is used to host the chasepay branding logo.\n     * It should be an HTML element.\n     */\n    logoContainer: string;\n\n    /**\n     * This walletButton is used to set an event listener, provide an element ID if you want\n     * users to be able to launch the ChasePay wallet modal by clicking on a button.\n     * It should be an HTML element.\n     */\n    walletButton?: string;\n\n    /**\n     * A callback that gets called when the customer selects a payment option.\n     */\n    onPaymentSelect?(): void;\n}\n","import { BraintreeError } from './braintree';\n\nexport default function isBraintreeError(error: BraintreeError | Error): error is BraintreeError {\n    return error.name === 'BraintreeError';\n}\n","import { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, StandardError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategyActionCreator from '../../payment-strategy-action-creator';\nimport PaymentStrategy from '../payment-strategy';\n\nimport BraintreeVisaCheckoutPaymentProcessor from './braintree-visacheckout-payment-processor';\nimport { VisaCheckoutPaymentSuccessPayload } from './visacheckout';\nimport VisaCheckoutScriptLoader from './visacheckout-script-loader';\n\nexport default class BraintreeVisaCheckoutPaymentStrategy implements PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _braintreeVisaCheckoutPaymentProcessor: BraintreeVisaCheckoutPaymentProcessor,\n        private _visaCheckoutScriptLoader: VisaCheckoutScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { braintreevisacheckout: visaCheckoutOptions, methodId } = options;\n\n        if (!visaCheckoutOptions) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.braintreevisacheckout\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                const checkout = state.checkout.getCheckout();\n                const storeConfig = state.config.getStoreConfig();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const {\n                    onError = () => {},\n                    onPaymentSelect = () => {},\n                } = visaCheckoutOptions;\n\n                const initOptions = {\n                    locale: storeConfig.storeProfile.storeLanguage,\n                    collectShipping: false,\n                    subtotal: checkout.subtotal,\n                    currencyCode: storeConfig.currency.code,\n                };\n\n                return Promise.all([\n                    this._visaCheckoutScriptLoader.load(this._paymentMethod.config.testMode),\n                    this._braintreeVisaCheckoutPaymentProcessor.initialize(this._paymentMethod.clientToken, initOptions),\n                ])\n                .then(([visaCheckout, visaInitOptions]) => {\n                    visaCheckout.init(visaInitOptions);\n                    visaCheckout.on('payment.success', (paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) =>\n                        this._paymentInstrumentSelected(paymentSuccessPayload)\n                            .then(() => onPaymentSelect())\n                            .catch(error => onError(error))\n                    );\n                    visaCheckout.on('payment.error', (payment, error) => onError(error));\n                });\n            })\n            .then(() => this._store.getState());\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new InvalidArgumentError('Unable to submit payment because \"payload.payment\" argument is not provided.');\n        }\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData || !this._paymentMethod.initializationData.nonce) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { nonce } = this._paymentMethod.initializationData;\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData: { nonce } }))\n            )\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._braintreeVisaCheckoutPaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    private _paymentInstrumentSelected(paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) {\n        const state = this._store.getState();\n\n        if (!this._paymentMethod) {\n            throw new Error('Payment method not initialized');\n        }\n\n        const { id: methodId } = this._paymentMethod;\n\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            return this._braintreeVisaCheckoutPaymentProcessor.handleSuccess(\n                paymentSuccessPayload,\n                state.shippingAddress.getShippingAddress(),\n                state.billingAddress.getBillingAddress()\n            )\n            .then(() => Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId)),\n            ]));\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _handleError(error: Error): never {\n        if (error.name === 'BraintreeError') {\n            throw new StandardError(error.message);\n        }\n\n        throw error;\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { Subject } from 'rxjs';\nimport { take } from 'rxjs/operators';\n\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentMethodCancelledError } from '../../errors';\nimport Payment from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategyActionCreator from '../../payment-strategy-action-creator';\nimport PaymentStrategy from '../payment-strategy';\nimport { WepayRiskClient } from '../wepay';\n\nimport { ChasePay, ChasePayEventType, ChasePaySuccessPayload } from './chasepay';\nimport ChasePayInitializeOptions from './chasepay-initialize-options';\nimport ChasePayScriptLoader from './chasepay-script-loader';\n\nexport default class ChasePayPaymentStrategy implements PaymentStrategy {\n    private _chasePayClient?: ChasePay;\n    private _methodId!: string;\n    private _walletButton?: HTMLElement;\n    private _walletEvent$: Subject<{ type: ChasePayEventType }>;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _requestSender: RequestSender,\n        private _chasePayScriptLoader: ChasePayScriptLoader,\n        private _wepayRiskClient: WepayRiskClient\n    ) {\n        this._walletEvent$ = new Subject();\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._methodId = options.methodId;\n\n        if (!options.chasepay) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.chasepay\" argument is not provided.');\n        }\n\n        const walletButton = options.chasepay.walletButton && document.getElementById(options.chasepay.walletButton);\n\n        if (walletButton) {\n            this._walletButton = walletButton;\n            this._walletButton.addEventListener('click', this._handleWalletButtonClick);\n        }\n\n        return this._configureWallet(options.chasepay)\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._walletButton) {\n            this._walletButton.removeEventListener('click', this._handleWalletButtonClick);\n        }\n\n        this._walletButton = undefined;\n        this._chasePayClient = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._getPayment()\n            .catch(error => {\n                if (error.subtype === MissingDataErrorType.MissingPayment) {\n                    return this._displayWallet()\n                        .then(() => this._getPayment());\n                }\n\n                throw error;\n            })\n            .then(payment =>\n                this._createOrder(payment, payload.useStoreCredit, options)\n            );\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _configureWallet(options: ChasePayInitializeOptions): Promise<void> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n        const storeConfig = state.config.getStoreConfig();\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (!storeConfig) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        return this._chasePayScriptLoader.load(paymentMethod.config.testMode)\n            .then(({ ChasePay }) => {\n                this._chasePayClient = ChasePay;\n\n                if (options.logoContainer && document.getElementById(options.logoContainer)) {\n                    this._chasePayClient.insertBrandings({\n                        color: 'white',\n                        containers: [options.logoContainer],\n                    });\n                }\n\n                this._chasePayClient.configure({\n                    language: storeConfig.storeProfile.storeLanguage,\n                });\n\n                this._chasePayClient.on(ChasePayEventType.CancelCheckout, () => {\n                    this._walletEvent$.next({ type: ChasePayEventType.CancelCheckout });\n\n                    if (options.onCancel) {\n                        options.onCancel();\n                    }\n                });\n\n                this._chasePayClient.on(ChasePayEventType.CompleteCheckout, (payload: ChasePaySuccessPayload) => {\n                    this._setSessionToken(payload.sessionToken)\n                        .then(() => {\n                            this._walletEvent$.next({ type: ChasePayEventType.CompleteCheckout });\n\n                            if (options.onPaymentSelect) {\n                                options.onPaymentSelect();\n                            }\n                        });\n                });\n            });\n    }\n\n    private _displayWallet(): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(this._methodId))\n                .then(state => {\n                    const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n\n                    if (!this._chasePayClient) {\n                        throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                    }\n\n                    if (!paymentMethod) {\n                        throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                    }\n\n                    this._chasePayClient.showLoadingAnimation();\n                    this._chasePayClient.startCheckout(paymentMethod.initializationData.digitalSessionId);\n                });\n\n            // Wait for payment selection\n            return new Promise((resolve, reject) => {\n                this._walletEvent$\n                    .pipe(take(1))\n                    .subscribe((event: { type: ChasePayEventType }) => {\n                        if (event.type === ChasePayEventType.CancelCheckout) {\n                            reject(new PaymentMethodCancelledError());\n                        } else if (event.type === ChasePayEventType.CompleteCheckout) {\n                            resolve();\n                        }\n                    });\n            });\n        }, { methodId: this._methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _setSessionToken(sessionToken: string): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n        const merchantRequestId = paymentMethod && paymentMethod.initializationData.merchantRequestId;\n\n        return this._requestSender.post('checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\n            },\n            body: {\n                action: 'set_external_checkout',\n                provider: this._methodId,\n                sessionToken,\n                merchantRequestId,\n            },\n        })\n            // Re-hydrate checkout data\n            .then(() => Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(this._methodId)),\n            ]))\n            .then(() => this._store.getState());\n    }\n\n    private _getPayment(): Promise<Payment> {\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(this._methodId))\n            .then(() => {\n                if (this._methodId === 'wepay') {\n                    return this._wepayRiskClient.initialize()\n                        .then(client => client.getRiskToken());\n                }\n\n                return '';\n            })\n            .then(riskToken => {\n                const state = this._store.getState();\n                const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n\n                if (!paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                if (!paymentMethod.initializationData.paymentCryptogram) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPayment);\n                }\n\n                const paymentData = {\n                    method: this._methodId,\n                    cryptogramId: paymentMethod.initializationData.paymentCryptogram,\n                    eci: paymentMethod.initializationData.eci,\n                    transactionId: btoa(paymentMethod.initializationData.reqTokenId),\n                    ccExpiry: {\n                        month: paymentMethod.initializationData.expDate.toString().substr(0, 2),\n                        year: paymentMethod.initializationData.expDate.toString().substr(2, 2),\n                    },\n                    ccNumber: paymentMethod.initializationData.accountNum,\n                    accountMask: paymentMethod.initializationData.accountMask,\n                    extraData: riskToken ? { riskToken } : undefined,\n                };\n\n                return {\n                    methodId: this._methodId,\n                    paymentData,\n                };\n            });\n    }\n\n    private _createOrder(payment: Payment, useStoreCredit?: boolean, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._orderActionCreator.submitOrder({ useStoreCredit }, options))\n            .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment(payment)));\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): void {\n        event.preventDefault();\n\n        this._displayWallet();\n    }\n}\n","export const CardinalSignatureValidationErrors = [100004, 1010, 1011, 1020];\n\nexport interface CardinalSDK {\n    configure(params: CardinalConfiguration): void;\n    on(params: CardinalEventType, callback: CardinalEventMap[CardinalEventType]): void;\n    off(params: CardinalEventType): void;\n    setup<K extends keyof CardinalInitializationDataMap>(initializationType: K, initializationData: CardinalInitializationDataMap[K]): void;\n    trigger(event: CardinalTriggerEvents, data?: string): Promise<CardinalBinProcessResponse | void>;\n    continue(paymentBrand: CardinalPaymentBrand, continueObject: CardinalContinue, order: CardinalPartialOrder): void;\n    start(paymentBrand: CardinalPaymentBrand, order: CardinalPartialOrder, jwt?: string): void;\n}\n\nexport interface CardinalWindow extends Window {\n    Cardinal?: CardinalSDK;\n}\n\nexport interface CardinalEventMap {\n    [CardinalEventType.SetupCompleted](setupCompleteData: CardinalSetupCompletedData): void;\n    [CardinalEventType.Validated](data: CardinalValidatedData, jwt?: string): void;\n}\n\nexport type CardinalConfiguration = Partial<{\n    logging: {\n        level: string;\n    };\n    payment: {\n        view: string;\n        framework: string;\n        displayLoading: boolean;\n    };\n}>;\n\nexport interface CardinalSetupCompletedData {\n    sessionId: string;\n    modules: CardinalModuleState[];\n}\n\nexport interface CardinalModuleState {\n    loaded: boolean;\n    module: string;\n}\n\nexport enum CardinalInitializationType {\n    Init = 'init',\n    Complete = 'complete',\n    Confirm = 'confirm',\n}\n\nexport interface CardinalInitializationDataMap {\n    [CardinalInitializationType.Init]: CardinalInitTypeData;\n    [CardinalInitializationType.Complete]: CardinalCompleteTypeData;\n    [CardinalInitializationType.Confirm]: CardinalConfirmTypeData;\n}\n\nexport interface CardinalInitTypeData {\n    jwt: string;\n}\n\nexport interface CardinalCompleteTypeData {\n    Status: string;\n}\n\nexport interface CardinalConfirmTypeData {\n    jwt: string;\n    cardinalResponseJwt: string;\n}\n\nexport interface CardinalValidatedData {\n    ActionCode: CardinalValidatedAction;\n    ErrorDescription: string;\n    ErrorNumber: number;\n    Validated: boolean;\n    Payment?: CardinalPayment;\n}\n\nexport interface CardinalPayment {\n    ProcessorTransactionId: string;\n    Type: CardinalPaymentType;\n}\n\nexport interface CardinalBinProcessResponse {\n    Status: boolean;\n}\n\nexport interface CardinalContinue {\n    AcsUrl: string;\n    Payload: string;\n}\n\nexport interface CardinalPartialOrder {\n    OrderDetails: CardinalOrderDetails;\n    Consumer?: CardinalConsumer;\n}\n\nexport interface CardinalConsumer {\n    Email1?: string;\n    Email2?: string;\n    ShippingAddress?: CardinalAddress;\n    BillingAddress?: CardinalAddress;\n    Account?: CardinalAccount;\n}\n\nexport interface CardinalAccount {\n    AccountNumber: number;\n    ExpirationMonth: number;\n    ExpirationYear: number;\n    NameOnAccount: string;\n    CardCode: number;\n}\n\nexport interface CardinalAddress {\n    FullName?: string;\n    FirstName: string;\n    MiddleName?: string;\n    LastName: string;\n    Address1: string;\n    Address2?: string;\n    Address3?: string;\n    City: string;\n    State: string;\n    PostalCode: string;\n    CountryCode: string;\n    Phone1?: string;\n    Phone2?: string;\n}\n\nexport interface CardinalOrderDetails {\n    OrderNumber: string;\n    Amount: number;\n    CurrencyCode: string;\n    OrderDescription?: string;\n    OrderChannel: string;\n    TransactionId?: string;\n}\n\nexport enum CardinalEventType {\n    SetupCompleted = 'payments.setupComplete',\n    Validated = 'payments.validated',\n}\n\nexport enum CardinalValidatedAction {\n    Success = 'SUCCESS',\n    NoAction = 'NOACTION',\n    Failure = 'FAILURE',\n    Error = 'ERROR',\n}\n\nexport enum CardinalPaymentType {\n    CCA = 'CCA',\n    Paypal = 'Paypal',\n    Wallet = 'Wallet',\n    VisaCheckout = 'VisaCheckout',\n    ApplePay = 'ApplePay',\n    DiscoverWallet = 'DiscoverWallet',\n}\n\nexport enum CardinalTriggerEvents {\n    BinProcess = 'bin.process',\n}\n\nexport enum CardinalPaymentBrand {\n    CCA = 'cca',\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { some } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { RequestError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class ConvergePaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _formPoster: FormPoster\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n            )\n            .catch(error => {\n                if (!(error instanceof RequestError) || !some(error.body.errors, { code: 'three_d_secure_required' })) {\n                    return Promise.reject(error);\n                }\n\n                return new Promise(() => {\n                    this._formPoster.postForm(error.body.three_ds_result.acs_url, {\n                        PaReq: error.body.three_ds_result.payer_auth_request,\n                        TermUrl: error.body.three_ds_result.callback_url,\n                        MD: error.body.three_ds_result.merchant_data,\n                    });\n                });\n            });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n\n        if (order && state.payment.getPaymentStatus() === paymentStatusTypes.FINALIZE) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class CreditCardPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n            );\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { find, some } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    MissingDataError,\n    MissingDataErrorType,\n    RequestError\n} from '../../../common/error/errors';\nimport { OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport isCreditCardLike from '../../is-credit-card-like';\nimport isVaultedInstrument from '../../is-vaulted-instrument';\nimport { CreditCardInstrument, VaultedInstrument } from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport {\n    CardinalClient,\n    CardinalOrderData,\n    CardinalSupportedPaymentInstrument\n} from './index';\n\nexport default class CyberSourcePaymentStrategy implements PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _cardinalClient: CardinalClient\n    ) { }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId } = options;\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod || !this._paymentMethod.config) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                return this._cardinalClient.initialize(this._paymentMethod.config.testMode)\n                    .then(() => this._store.getState());\n            });\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n\n        if (!payment) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        if (!this._paymentMethod || !this._paymentMethod.config) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._paymentMethod.config.is3dsEnabled ?\n            this._placeOrderUsing3DS(order, payment, options, this._paymentMethod.clientToken) :\n            this._placeOrder(order, payment, options);\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _placeOrderUsing3DS(order: OrderRequestBody, payment: OrderPaymentRequestBody, options?: PaymentRequestOptions, clientToken?: string): Promise<InternalCheckoutSelectors> {\n        if (!clientToken) {\n            return Promise.reject(new MissingDataError(MissingDataErrorType.MissingPaymentMethod));\n        }\n\n        if (!payment.paymentData) {\n            return Promise.reject(new MissingDataError(MissingDataErrorType.MissingPayment));\n        }\n\n        const paymentData = payment.paymentData as CreditCardInstrument;\n\n        return this._cardinalClient.configure(clientToken)\n            .then(() => this._cardinalClient.runBinProcess(this._getBinNumber(paymentData)))\n            .then(() => {\n                return this._placeOrder(order, payment, options)\n                    .catch(error => {\n                        if (!(error instanceof RequestError) || !some(error.body.errors, { code: 'enrolled_card' })) {\n                            return Promise.reject(error);\n                        }\n\n                        return this._cardinalClient.getThreeDSecureData(error.body.three_ds_result, this._getOrderData(paymentData))\n                            .then(threeDSecure =>\n                                this._store.dispatch(this._paymentActionCreator.submitPayment({\n                                    ...payment,\n                                    paymentData: {\n                                        ...paymentData,\n                                        threeDSecure,\n                                    },\n                                }))\n                            );\n                    });\n            });\n    }\n\n    private _placeOrder(order: OrderRequestBody, payment: OrderPaymentRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!payment.paymentData) {\n            return Promise.reject(new MissingDataError(MissingDataErrorType.MissingPayment));\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment(payment))\n            );\n    }\n\n    private _getBinNumber(payment: CardinalSupportedPaymentInstrument): string {\n        if (isVaultedInstrument(payment)) {\n            const instruments = this._store.getState().instruments.getInstruments();\n\n            const { instrumentId } = payment;\n\n            const entry = find(instruments, { bigpayToken: instrumentId });\n\n            return entry && entry.iin || '';\n        }\n\n        return payment.ccNumber;\n    }\n\n    private _getOrderData(paymentData: CardinalSupportedPaymentInstrument): CardinalOrderData {\n        const state = this._store.getState();\n        const billingAddress = state.billingAddress.getBillingAddress();\n        const shippingAddress = state.shippingAddress.getShippingAddress();\n        const checkout = state.checkout.getCheckout();\n        const order = state.order.getOrder();\n\n        if (!billingAddress || !billingAddress.email) {\n            throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n        }\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!order) {\n            throw new MissingDataError(MissingDataErrorType.MissingOrder);\n        }\n\n        const payment: CardinalOrderData = {\n            billingAddress,\n            shippingAddress,\n            currencyCode: checkout.cart.currency.code,\n            id: order.orderId.toString(),\n            amount: checkout.cart.cartAmount,\n        };\n\n        if (isCreditCardLike(paymentData)) {\n            payment.paymentData = paymentData;\n        }\n\n        return payment;\n    }\n}\n","import { includes } from 'lodash';\n\nimport Address from '../../../address/address';\nimport BillingAddress from '../../../billing/billing-address';\nimport {\n    MissingDataError, MissingDataErrorType, NotInitializedError,\n    NotInitializedErrorType, StandardError\n} from '../../../common/error/errors';\nimport { CreditCardInstrument, ThreeDSecureToken, VaultedInstrument } from '../../payment';\nimport { ThreeDsResult } from '../../payment-response-body';\n\nimport {\n    CardinalAccount,\n    CardinalAddress,\n    CardinalConsumer,\n    CardinalEventType,\n    CardinalInitializationType,\n    CardinalPartialOrder,\n    CardinalPaymentBrand,\n    CardinalScriptLoader,\n    CardinalSignatureValidationErrors,\n    CardinalSDK,\n    CardinalTriggerEvents,\n    CardinalValidatedAction,\n    CardinalValidatedData\n} from './index';\n\nexport type CardinalSupportedPaymentInstrument = CreditCardInstrument | VaultedInstrument;\n\nexport interface CardinalOrderData {\n    billingAddress: BillingAddress;\n    shippingAddress?: Address;\n    currencyCode: string;\n    id: string;\n    amount: number;\n    paymentData?: CreditCardInstrument;\n}\n\nexport default class CardinalClient {\n    private _sdk?: Promise<CardinalSDK>;\n\n    constructor(\n        private _scriptLoader: CardinalScriptLoader\n    ) {}\n\n    initialize(testMode?: boolean): Promise<void> {\n        if (!this._sdk) {\n            this._sdk = this._scriptLoader.load(testMode);\n        }\n\n        return this._sdk.then(() => {});\n    }\n\n    configure(clientToken: string): Promise<void> {\n        return this._getClientSDK()\n            .then(client => new Promise<void>((resolve, reject) => {\n                client.on(CardinalEventType.SetupCompleted, () => {\n                    client.off(CardinalEventType.SetupCompleted);\n                    client.off(CardinalEventType.Validated);\n\n                    resolve();\n                });\n\n                client.on(CardinalEventType.Validated, (data: CardinalValidatedData) => {\n                    client.off(CardinalEventType.SetupCompleted);\n                    client.off(CardinalEventType.Validated);\n\n                    switch (data.ActionCode) {\n                        case CardinalValidatedAction.Error:\n                            if (includes(CardinalSignatureValidationErrors, data.ErrorNumber)) {\n                                reject(new MissingDataError(MissingDataErrorType.MissingPaymentMethod));\n                            }\n                            break;\n                    }\n                });\n\n                client.setup(CardinalInitializationType.Init, {\n                    jwt: clientToken,\n                });\n        }));\n    }\n\n    runBinProcess(binNumber: string): Promise<void> {\n        return this._getClientSDK()\n            .then(client => client.trigger(CardinalTriggerEvents.BinProcess, binNumber).catch(() => {}))\n            .then(result => {\n                if (!result || !result.Status) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n            });\n    }\n\n    getThreeDSecureData(threeDSecureData: ThreeDsResult, orderData: CardinalOrderData): Promise<ThreeDSecureToken> {\n        return this._getClientSDK()\n            .then(client => {\n                return new Promise<ThreeDSecureToken>((resolve, reject) => {\n                    client.on(CardinalEventType.Validated, (data: CardinalValidatedData, jwt: string) => {\n                        client.off(CardinalEventType.Validated);\n                        switch (data.ActionCode) {\n                            case CardinalValidatedAction.Success:\n                                resolve({ token: jwt });\n                                break;\n                            case CardinalValidatedAction.NoAction:\n                                if (data.ErrorNumber > 0) {\n                                    reject(new StandardError(data.ErrorDescription));\n                                } else {\n                                    resolve({ token: jwt });\n                                }\n                                break;\n                            case CardinalValidatedAction.Failure:\n                                reject(new StandardError('User failed authentication or an error was encountered while processing the transaction'));\n                                break;\n                            case CardinalValidatedAction.Error:\n                                reject(new StandardError(data.ErrorDescription));\n                        }\n                    });\n\n                    const continueObject = {\n                        AcsUrl: threeDSecureData.acs_url,\n                        Payload: threeDSecureData.merchant_data,\n                    };\n\n                    const partialOrder = this._mapToPartialOrder(orderData, threeDSecureData.payer_auth_request);\n\n                    client.continue(CardinalPaymentBrand.CCA, continueObject, partialOrder);\n                });\n        });\n    }\n\n    private _mapToPartialOrder(orderData: CardinalOrderData, transactionId: string): CardinalPartialOrder {\n        const consumer: CardinalConsumer = {\n            BillingAddress: this._mapToCardinalAddress(orderData.billingAddress),\n        };\n\n        if (orderData.paymentData) {\n            consumer.Account = this._mapToCardinalAccount(orderData.paymentData);\n        }\n\n        if (orderData.billingAddress.email) {\n            consumer.Email1 = orderData.billingAddress.email;\n        }\n\n        if (orderData.shippingAddress) {\n            consumer.ShippingAddress = this._mapToCardinalAddress(orderData.shippingAddress);\n        }\n\n        return  {\n            Consumer: consumer,\n            OrderDetails: {\n                OrderNumber: orderData.id,\n                Amount: orderData.amount,\n                CurrencyCode: orderData.currencyCode,\n                OrderChannel: 'S',\n                TransactionId: transactionId,\n            },\n        };\n    }\n\n    private _mapToCardinalAccount(paymentData: CreditCardInstrument): CardinalAccount {\n        return {\n            AccountNumber: Number(paymentData.ccNumber),\n            ExpirationMonth: Number(paymentData.ccExpiry.month),\n            ExpirationYear: Number(paymentData.ccExpiry.year),\n            NameOnAccount: paymentData.ccName,\n            CardCode: Number(paymentData.ccCvv),\n        };\n    }\n\n    private _mapToCardinalAddress(address: Address): CardinalAddress {\n        const cardinalAddress: CardinalAddress = {\n            FirstName: address.firstName,\n            LastName: address.lastName,\n            Address1: address.address1,\n            City: address.city,\n            State: address.stateOrProvince,\n            PostalCode: address.postalCode,\n            CountryCode: address.countryCode,\n        };\n\n        if (address.address2) {\n            cardinalAddress.Address2 = address.address2;\n        }\n\n        if (address.phone) {\n            cardinalAddress.Phone1 = address.phone;\n        }\n\n        return cardinalAddress;\n    }\n\n    private _getClientSDK(): Promise<CardinalSDK> {\n        if (!this._sdk) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._sdk;\n    }\n}\n","export default interface SquarePaymentForm {\n    build(): void;\n    requestCardNonce(): void;\n    setPostalCode(postalCode: string): void;\n}\n\nexport type SquarePaymentFormConstructor = new(options: SquareFormOptions) => SquarePaymentForm;\n\nexport interface SquareFormOptions {\n    applicationId: string;\n    env: string;\n    locationId: string;\n    inputClass?: string;\n    inputStyles?: string[];\n    callbacks?: SquareFormCallbacks;\n    cardNumber: SquareFormElement;\n    cvv: SquareFormElement;\n    expirationDate: SquareFormElement;\n    postalCode: SquareFormElement;\n    masterpass: SquareFormElement;\n}\nexport interface LineItem {\n    label: string;\n    amount: string;\n    pending: boolean;\n}\n\nexport interface SquarePaymentRequest {\n    requestShippingAddress: boolean;\n    requestBillingInfo: boolean;\n    shippingContact?: Contact;\n    countryCode: string;\n    currencyCode: string;\n    lineItems?: LineItem[];\n    total: LineItem;\n}\n\nexport interface NonceGenerationError {\n    type: string;\n    message: string;\n    field: string;\n}\n\nexport interface CardData {\n    card_brand: CardBrand;\n    last_4: number;\n    exp_month: number;\n    exp_year: number;\n    billing_postal_code: string;\n    digital_wallet_type: DigitalWalletType;\n}\n\nexport interface Contact {\n    familyName: string;\n    givenName: string;\n    email: string;\n    country: string;\n    countryName: string;\n    region: string;\n    city: string;\n    addressLines: string[];\n    postalCode: string;\n    phone: string;\n}\n\nexport enum CardBrand {\n    americanExpress = 'AMERICAN_EXPRESS',\n    discover = 'DISCOVER',\n    discoverDiners = 'DISCOVER_DINERS',\n    JCB = 'JCB',\n    masterCard = 'MASTERCARD',\n    unionPay = 'CHINA_UNIONPAY',\n    unknown = 'OTHER_BRAND',\n    visa = 'VISA',\n    squareGift = 'SQUARE_GIFT_CARD',\n}\n\nexport enum DigitalWalletType {\n    applePay = 'APPLEPAY',\n    masterpass = 'MASTERPASS',\n    none = 'NONE',\n}\n\n/**\n * Configures any form element provided by Square payment.\n */\nexport interface SquareFormElement {\n    /**\n     * The ID of the container which the form element should insert into.\n     */\n    elementId: string;\n\n    /**\n     * The placeholder text to use for the form element, if provided.\n     */\n    placeholder?: string;\n}\n\nexport interface SquareFormCallbacks {\n    paymentFormLoaded?(form: SquarePaymentForm): void;\n    unsupportedBrowserDetected?(): void;\n    cardNonceResponseReceived?(\n        errors?: NonceGenerationError[],\n        nonce?: string,\n        cardData?: CardData,\n        billingContact?: Contact,\n        shippingContact?: Contact): void;\n    methodsSupported?(methods: { [key: string]: boolean }): void;\n    createPaymentRequest?(): void;\n}\n\nexport type SquareFormFactory = (options: SquareFormOptions) => SquarePaymentForm;\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { CardinalSDK, CardinalWindow } from './cardinal';\n\nconst SDK_TEST_URL = 'https://songbirdstag.cardinalcommerce.com/edge/v1/songbird.js';\nconst SDK_PROD_URL = 'https://songbird.cardinalcommerce.com/edge/v1/songbird.js';\n\nexport default class CardinalScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: CardinalWindow = window\n    ) {}\n\n    load(testMode?: boolean): Promise<CardinalSDK> {\n        return this._scriptLoader\n            .loadScript(testMode ? SDK_TEST_URL : SDK_PROD_URL)\n            .then(() => {\n                if (!this._window.Cardinal) {\n                    throw new StandardError();\n                }\n\n                return this._window.Cardinal;\n            });\n    }\n}\n","\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n} from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategyActionCreator from '../../payment-strategy-action-creator';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { GooglePaymentData, PaymentMethodData } from './googlepay';\nimport GooglePayPaymentInitializeOptions from './googlepay-initialize-options';\nimport GooglePayPaymentProcessor from './googlepay-payment-processor';\n\nexport default class GooglePayPaymentStrategy implements PaymentStrategy {\n    private _googlePayOptions?: GooglePayPaymentInitializeOptions;\n    private _methodId?: string;\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _googlePayPaymentProcessor: GooglePayPaymentProcessor\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._methodId = options.methodId;\n\n        return this._googlePayPaymentProcessor.initialize(this._methodId)\n            .then(() => {\n                this._googlePayOptions = this._getGooglePayOptions(options);\n\n                if (!this._googlePayOptions) {\n                    throw new InvalidArgumentError('Unable to initialize payment because \"options.googlepay\" argument is not provided.');\n                }\n\n                const walletButton = this._googlePayOptions.walletButton && document.getElementById(this._googlePayOptions.walletButton);\n\n                if (walletButton) {\n                    this._walletButton = walletButton;\n                    this._walletButton.addEventListener('click', this._handleWalletButtonClick);\n                }\n\n                return this._store.getState();\n            });\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._walletButton) {\n            this._walletButton.removeEventListener('click', this._handleWalletButtonClick);\n        }\n\n        this._walletButton = undefined;\n\n        return this._googlePayPaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!this._googlePayOptions) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.googlepay\" argument is not provided.');\n        }\n\n        const {\n            onError = () => {},\n            onPaymentSelect = () => {},\n        } = this._googlePayOptions;\n\n        return Promise.resolve(this._getPayment())\n            .then(payment => {\n                if (!payment.paymentData.nonce || !payment.paymentData.cardInformation) {\n                    // TODO: Find a way to share the code with _handleWalletButtonClick method\n                    return this._googlePayPaymentProcessor.displayWallet()\n                        .then(paymentData => this._paymentInstrumentSelected(paymentData))\n                        .then(() => onPaymentSelect())\n                        .then(() => this._getPayment())\n                        .catch(error => {\n                            if (error.statusCode !== 'CANCELED') {\n                                onError(error);\n                            }\n                        });\n                }\n\n                return payment;\n            })\n            .then(payment =>\n                this._store.dispatch(this._orderActionCreator.submitOrder({ useStoreCredit: payload.useStoreCredit }, options))\n                    .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment(this._getPayment())))\n            );\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _paymentInstrumentSelected(paymentData: GooglePaymentData) {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const methodId = this._methodId;\n\n        // TODO: Revisit how we deal with GooglePaymentData after receiving it from Google\n        return this._googlePayPaymentProcessor.handleSuccess(paymentData)\n            .then(() => Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId)),\n            ]));\n    }\n\n    private _getGooglePayOptions(options: PaymentInitializeOptions): GooglePayPaymentInitializeOptions {\n        if (options.methodId === 'googlepaybraintree' && options.googlepaybraintree) {\n            return options.googlepaybraintree;\n        }\n\n        if (options.methodId === 'googlepaystripe' && options.googlepaystripe) {\n            return options.googlepaystripe;\n        }\n\n        throw new InvalidArgumentError();\n    }\n\n    private _getPayment(): PaymentMethodData {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (!paymentMethod.initializationData.nonce) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        const paymentData = {\n            method: this._methodId,\n            nonce: paymentMethod.initializationData.nonce,\n            cardInformation: paymentMethod.initializationData.card_information,\n        };\n\n        return {\n            methodId: this._methodId,\n            paymentData,\n        };\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): Promise<InternalCheckoutSelectors> {\n        event.preventDefault();\n\n        if (!this._methodId || !this._googlePayOptions) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const methodId = this._methodId;\n\n        const {\n            onError = () => {},\n            onPaymentSelect = () => {},\n        } = this._googlePayOptions;\n\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            return this._googlePayPaymentProcessor.displayWallet()\n                .then(paymentData => this._paymentInstrumentSelected(paymentData))\n                .then(() => onPaymentSelect())\n                .catch(error => {\n                    if (error.statusCode !== 'CANCELED') {\n                        onError(error);\n                    }\n                });\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n}\n","import { includes } from 'lodash';\n\nimport { Address } from '../../../address';\nimport BillingAddress from '../../../billing/billing-address';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType\n} from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { PaymentMethodCancelledError } from '../../errors';\nimport PaymentMethodInvalidError from '../../errors/payment-method-invalid-error';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport KlarnaCredit, { KlarnaAddress, KlarnaLoadResponse, KlarnaUpdateSessionParams } from './klarna-credit';\nimport KlarnaScriptLoader from './klarna-script-loader';\n\nexport default class KlarnaPaymentStrategy implements PaymentStrategy {\n    private _klarnaCredit?: KlarnaCredit;\n    private _unsubscribe?: (() => void);\n    private _supportedEUCountries = ['AT', 'DE', 'DK', 'FI', 'GB', 'NL', 'NO', 'SE', 'CH'];\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _klarnaScriptLoader: KlarnaScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return this._klarnaScriptLoader.load()\n            .then(klarnaCredit => { this._klarnaCredit = klarnaCredit; })\n            .then(() => {\n                this._unsubscribe = this._store.subscribe(\n                    state => {\n                        if (state.paymentStrategies.isInitialized(options.methodId)) {\n                            this._loadWidget(options);\n                        }\n                    },\n                    state => {\n                        const checkout = state.checkout.getCheckout();\n\n                        return checkout && checkout.grandTotal;\n                    }\n                );\n\n                return this._loadWidget(options);\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._unsubscribe) {\n            this._unsubscribe();\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!payload.payment) {\n            throw new InvalidArgumentError('Unable to proceed because \"payload.payment\" argument is not provided.');\n        }\n\n        const { payment: { paymentData, ...paymentPayload } } = payload;\n\n        return this._authorize()\n            .then(({ authorization_token: authorizationToken }) => this._store.dispatch(\n                this._remoteCheckoutActionCreator.initializePayment(paymentPayload.methodId, { authorizationToken })\n            ))\n            .then(() => this._store.dispatch(\n                this._orderActionCreator.submitOrder({\n                    ...payload,\n                    payment: paymentPayload,\n                    // Note: API currently doesn't support using Store Credit with Klarna.\n                    // To prevent deducting customer's store credit, set it as false.\n                    useStoreCredit: false,\n                }, options)\n            ));\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _loadWidget(options: PaymentInitializeOptions): Promise<KlarnaLoadResponse> {\n        if (!options.klarna) {\n            throw new InvalidArgumentError('Unable to load widget because \"options.klarna\" argument is not provided.');\n        }\n\n        const { methodId, klarna: { container, onLoad } } = options;\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => new Promise<KlarnaLoadResponse>((resolve, reject) => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                if (!this._klarnaCredit || !paymentMethod.clientToken) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n\n                this._klarnaCredit.init({ client_token: paymentMethod.clientToken });\n\n                this._klarnaCredit.load({ container }, response => {\n                    if (onLoad) {\n                        onLoad(response);\n                    }\n                    resolve(response);\n                });\n            }));\n    }\n\n    private _getUpdateSessionData(billingAddress: BillingAddress, shippingAddress?: Address): KlarnaUpdateSessionParams {\n        if (!includes(this._supportedEUCountries, billingAddress.countryCode)) {\n            return {};\n        }\n\n        const data: KlarnaUpdateSessionParams = {\n            billing_address: this._mapToKlarnaAddress(billingAddress, billingAddress.email),\n        };\n\n        if (shippingAddress) {\n            data.shipping_address = this._mapToKlarnaAddress(shippingAddress, billingAddress.email);\n        }\n\n        return data;\n    }\n\n    private _mapToKlarnaAddress(address: Address, email?: string): KlarnaAddress {\n        const klarnaAddress: KlarnaAddress = {\n            street_address: address.address1,\n            city: address.city,\n            country: address.countryCode,\n            given_name: address.firstName,\n            family_name: address.lastName,\n            postal_code: address.postalCode,\n            region: address.stateOrProvince,\n            email,\n        };\n\n        if (address.address2) {\n            klarnaAddress.street_address2 = address.address2;\n        }\n\n        if (address.phone) {\n            klarnaAddress.phone = address.phone;\n        }\n\n        return klarnaAddress;\n    }\n\n    private _authorize(): Promise<any> {\n        return new Promise((resolve, reject) => {\n            const billingAddress = this._store.getState().billingAddress.getBillingAddress();\n            const shippingAddress = this._store.getState().shippingAddress.getShippingAddress();\n\n            if (!billingAddress) {\n                throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n            }\n\n            if (!this._klarnaCredit) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            const updateSessionData = this._getUpdateSessionData(billingAddress, shippingAddress);\n\n            this._klarnaCredit.authorize(updateSessionData, res => {\n                if (res.approved) {\n                    return resolve(res);\n                }\n\n                if (res.show_form) {\n                    return reject(new PaymentMethodCancelledError());\n                }\n\n                reject(new PaymentMethodInvalidError());\n            });\n        });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport KlarnaCredit from './klarna-credit';\nimport KlarnaWindow from './klarna-window';\n\nconst SDK_URL = '//credit.klarnacdn.net/lib/v1/api.js';\n\nexport default class KlarnaScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    load(): Promise<KlarnaCredit> {\n        return this._scriptLoader.loadScript(SDK_URL)\n            .then(() => (window as KlarnaWindow).Klarna.Credit);\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class LegacyPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options));\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport getCallbackUrl from './get-callback-url';\nimport { Masterpass, MasterpassCheckoutOptions } from './masterpass';\nimport MasterpassScriptLoader from './masterpass-script-loader';\n\nexport default class MasterpassPaymentStrategy implements PaymentStrategy {\n    private _masterpassClient?: Masterpass;\n    private _paymentMethod?: PaymentMethod;\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _masterpassScriptLoader: MasterpassScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId } = options;\n\n        this._paymentMethod = this._store.getState().paymentMethods.getPaymentMethod(methodId);\n\n        if (!this._paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._masterpassScriptLoader.load(this._paymentMethod.config.testMode)\n            .then(masterpass => {\n                this._masterpassClient = masterpass;\n\n                if (!options.masterpass) {\n                    throw new InvalidArgumentError('Unable to initialize payment because \"options.masterpass\" argument is not provided.');\n                }\n\n                const walletButton  = options.masterpass.walletButton && document.getElementById(options.masterpass.walletButton);\n\n                if (walletButton) {\n                    this._walletButton = walletButton;\n                    this._walletButton.addEventListener('click', this._handleWalletButtonClick);\n                }\n\n                return this._store.getState();\n            });\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        if (this._walletButton) {\n            this._walletButton.removeEventListener('click', this._handleWalletButtonClick);\n        }\n\n        this._walletButton = undefined;\n        this._masterpassClient = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment } = payload;\n        const order = { useStoreCredit: payload.useStoreCredit };\n\n        if (!payment) {\n            throw new InvalidArgumentError('Unable to submit payment because \"payload.payment\" argument is not provided.');\n        }\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData || !this._paymentMethod.initializationData.gateway) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        // TODO: Refactor the API endpoint to return nonce in the right place.\n        const paymentData = this._paymentMethod.initializationData.paymentData;\n\n        // TODO: Redirect to Masterpass if nonce has not been generated yet. And then finalise the order when the shopper is redirected back to the checkout page.\n        if (!paymentData) {\n            throw new InvalidArgumentError('Unable to proceed because \"paymentMethod.initializationData.paymentData\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData })));\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _createMasterpassPayload(): MasterpassCheckoutOptions {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const storeConfig = state.config.getStoreConfig();\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!storeConfig) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return {\n            checkoutId: this._paymentMethod.initializationData.checkoutId,\n            allowedCardTypes: this._paymentMethod.initializationData.allowedCardTypes,\n            amount: checkout.subtotal.toFixed(2),\n            currency: storeConfig.currency.code,\n            cartId: checkout.cart.id,\n            suppressShippingAddress: false,\n            callbackUrl: getCallbackUrl('checkout'),\n        };\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event) {\n        event.preventDefault();\n\n        if (!this._masterpassClient) {\n            return;\n        }\n\n        const payload = this._createMasterpassPayload();\n        this._masterpassClient.checkout(payload);\n    }\n}\n","import { omit } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class NoPaymentDataRequiredPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._orderActionCreator.submitOrder(omit(orderRequest, 'payment'), options)\n        );\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class OfflinePaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const action = this._orderActionCreator.submitOrder({\n            ...payload,\n            payment: payload.payment ? { methodId: payload.payment.methodId } : undefined,\n        }, options);\n\n        return this._store.dispatch(action);\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class OffsitePaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const orderPayload = this._shouldSubmitFullPayload(payment) ? payload : order;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(orderPayload, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.initializeOffsitePayment(payment.methodId, payment.gatewayId))\n            );\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n        const status = state.payment.getPaymentStatus();\n\n        if (order && (status === paymentStatusTypes.ACKNOWLEDGE || status === paymentStatusTypes.FINALIZE)) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _shouldSubmitFullPayload(payment?: OrderPaymentRequestBody): boolean {\n        // FIXME: A temporary workaround to support offsite payment methods\n        // where their return URL needs to be provided by the core app.\n        if (!payment) {\n            return false;\n        }\n\n        return payment.gatewayId === 'adyen' || payment.methodId === 'ccavenuemars';\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class PaypalProPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._isPaymentAcknowledged()) {\n            return this._store.dispatch(\n                this._orderActionCreator.submitOrder({\n                    ...payload,\n                    payment: payload.payment ? { methodId: payload.payment.methodId } : undefined,\n                }, options)\n            );\n        }\n\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n            );\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _isPaymentAcknowledged(): boolean {\n        const state = this._store.getState();\n\n        return state.payment.getPaymentStatus() === paymentStatusTypes.ACKNOWLEDGE;\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentMethod from '../../payment-method';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\nimport PaymentStrategy from '../payment-strategy';\n\nimport PaypalScriptLoader from './paypal-script-loader';\nimport { PaypalHostWindow, PaypalSDK } from './paypal-sdk';\n\nexport default class PaypalExpressPaymentStrategy implements PaymentStrategy {\n    private _paypalSdk?: PaypalSDK;\n    private _paymentMethod?: PaymentMethod;\n    private _useRedirectFlow: boolean = false;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _scriptLoader: PaypalScriptLoader,\n        private _window: PaypalHostWindow = window\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n\n        this._paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n        this._useRedirectFlow = (options.paypalexpress && options.paypalexpress.useRedirectFlow) === true;\n\n        if (!this._isInContextEnabled()) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._scriptLoader.loadPaypal()\n            .then(paypal => {\n                this._paypalSdk = paypal;\n\n                if (!this._paymentMethod || !this._paymentMethod.config.merchantId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                this._paypalSdk.checkout.setup(this._paymentMethod.config.merchantId, {\n                    button: 'paypal-button',\n                    environment: this._paymentMethod.config.testMode ? 'sandbox' : 'production',\n                });\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._isInContextEnabled() && this._paypalSdk) {\n            this._paypalSdk.checkout.closeFlow();\n            this._paypalSdk = undefined;\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const paypal = this._paypalSdk;\n\n        if (this._isAcknowledgedOrFinalized()) {\n            return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options));\n        }\n\n        if (!this._isInContextEnabled() || this._useRedirectFlow) {\n            return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options))\n                .then(state => {\n                    const redirectUrl = state.payment.getPaymentRedirectUrl();\n\n                    if (redirectUrl) {\n                        this._window.top.location.href = redirectUrl;\n                    }\n\n                    // We need to hold execution so the consumer does not redirect us somewhere else\n                    return new Promise<never>(() => {});\n                });\n        }\n\n        if (!paypal) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        paypal.checkout.initXO();\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options))\n            .then(state => {\n                const redirectUrl = state.payment.getPaymentRedirectUrl();\n\n                if (redirectUrl) {\n                    paypal.checkout.startFlow(redirectUrl);\n                }\n\n                // We need to hold execution so the consumer does not redirect us somewhere else\n                return new Promise<never>(() => {});\n            })\n            .catch(error => {\n                paypal.checkout.closeFlow();\n\n                return Promise.reject(error);\n            });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n\n        if (order && this._isAcknowledgedOrFinalized()) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _isAcknowledgedOrFinalized(): boolean {\n        const state = this._store.getState();\n\n        return state.payment.getPaymentStatus() === paymentStatusTypes.ACKNOWLEDGE\n            || state.payment.getPaymentStatus() === paymentStatusTypes.FINALIZE;\n    }\n\n    private _isInContextEnabled(): boolean {\n        return !!(this._paymentMethod && this._paymentMethod.config.merchantId);\n    }\n}\n","import { some } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { RequestError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class SagePayPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _formPoster: any\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n            )\n            .catch(error => {\n                if (!(error instanceof RequestError) || !some(error.body.errors, { code: 'three_d_secure_required' })) {\n                    return Promise.reject(error);\n                }\n\n                return new Promise(() => {\n                    this._formPoster.postForm(error.body.three_ds_result.acs_url, {\n                        PaReq: error.body.three_ds_result.payer_auth_request,\n                        TermUrl: error.body.three_ds_result.callback_url,\n                        MD: error.body.three_ds_result.merchant_data,\n                    });\n                });\n            });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n\n        if (order && state.payment.getPaymentStatus() === paymentStatusTypes.FINALIZE) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import StandardError from './standard-error';\n\nexport default class UnsupportedBrowserError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Unsupported browser error');\n\n        this.name = 'UnsupportedBrowserError';\n        this.type = 'unsupported_browser';\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\nimport { omit } from 'lodash';\nimport { noop } from 'rxjs';\n\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    StandardError,\n    TimeoutError,\n    UnsupportedBrowserError,\n} from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { NonceInstrument } from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategyActionCreator from '../../payment-strategy-action-creator';\nimport PaymentStrategy from '../payment-strategy';\n\nimport SquarePaymentForm, {\n    CardData,\n    Contact,\n    DigitalWalletType,\n    NonceGenerationError,\n    SquareFormElement,\n    SquareFormOptions,\n    SquarePaymentRequest\n} from './square-form';\nimport SquarePaymentInitializeOptions from './square-payment-initialize-options';\nimport SquareScriptLoader from './square-script-loader';\n\nexport default class SquarePaymentStrategy implements PaymentStrategy {\n    private _deferredRequestNonce?: DeferredPromise;\n    private _paymentForm?: SquarePaymentForm;\n    private _paymentMethod?: PaymentMethod;\n    private _squareOptions?: SquarePaymentInitializeOptions;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _requestSender: RequestSender,\n        private _scriptLoader: SquareScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId } = options;\n\n        this._syncPaymentMethod(methodId);\n\n        return this._scriptLoader.load()\n            .then(createSquareForm =>\n                new Promise((resolve, reject) => {\n                    this._paymentForm = createSquareForm(\n                        this._getFormOptions(options, { resolve, reject })\n                    );\n                    this._paymentForm.build();\n                }))\n            .then(() => this._store.getState());\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment } = orderRequest;\n\n        if (!payment || !payment.methodId) {\n            throw new InvalidArgumentError('Unable to submit payment because \"payload.payment.methodId\" argument is not provided.');\n        }\n\n        this._syncPaymentMethod(payment.methodId);\n\n        return this._getNonceInstrument(payment.methodId)\n            .then(paymentData =>\n                this._store.dispatch(this._orderActionCreator.submitOrder(omit(orderRequest, 'payment'), options))\n                .then(() =>\n                    this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n                ));\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _syncPaymentMethod(methodId: string): void {\n        const state = this._store.getState();\n        this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n    }\n\n    private _getCountryCode(countryName: string) {\n        switch (countryName.toUpperCase()) {\n            case 'NEW ZELAND':\n                return 'NZ';\n            case 'AUSTRALIA':\n                return 'AU';\n            default:\n                return 'US';\n        }\n    }\n\n    private _getNonceInstrument(methodId: string): Promise<NonceInstrument> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n        if (paymentMethod) {\n            const { initializationData } = paymentMethod;\n            if (initializationData && initializationData.paymentData.nonce) {\n                return Promise.resolve({ nonce: paymentMethod.initializationData.paymentData.nonce });\n            }\n        }\n\n        return new Promise<NonceInstrument>((resolve, reject) => {\n            if (!this._paymentForm) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            if (this._deferredRequestNonce) {\n                this._deferredRequestNonce.reject(new TimeoutError());\n            }\n\n            this._deferredRequestNonce = { resolve, reject };\n            this._paymentForm.requestCardNonce();\n        });\n    }\n\n    private _getFormOptions(options: PaymentInitializeOptions, deferred: DeferredPromise): SquareFormOptions {\n        const { square: squareOptions } = options;\n\n        if (!squareOptions || !this._paymentMethod) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.square\" argument is not provided.');\n        }\n\n        this._squareOptions = squareOptions;\n\n        return {\n            ...this._squareOptions,\n            ...this._paymentMethod.initializationData,\n            callbacks: {\n                cardNonceResponseReceived: (errors, nonce, cardData, billingContact, shippingContact) => {\n                    if (cardData && cardData.digital_wallet_type !== DigitalWalletType.none) {\n                        this._handleWalletNonceResponse(errors, nonce, cardData, billingContact, shippingContact);\n                    } else {\n                        this._handleCardNonceResponse(errors, nonce);\n                    }\n                },\n                createPaymentRequest: () => this._paymentRequestPayload(),\n                methodsSupported: methods => {\n                    const { masterpass } = squareOptions;\n\n                    if (masterpass) {\n                        this._showPaymentMethods(methods, masterpass);\n                    }\n                },\n                paymentFormLoaded: () => {\n                    deferred.resolve();\n                    this._setPostalCode();\n                },\n                unsupportedBrowserDetected: () => deferred.reject(new UnsupportedBrowserError()),\n            },\n        };\n    }\n\n    private _handleWalletNonceResponse(\n        errors?: NonceGenerationError[],\n        nonce?: string,\n        cardData?: CardData,\n        billingContact?: Contact,\n        shippingContact?: Contact\n    ): void {\n        const onError = this._squareOptions && this._squareOptions.onError || noop;\n        const onPaymentSelect = this._squareOptions && this._squareOptions.onPaymentSelect || noop;\n\n        if (errors) {\n            onError(errors);\n        } else if (nonce && this._paymentMethod) {\n            this._paymentInstrumentSelected(\n                this._paymentMethod.id,\n                nonce,\n                cardData,\n                billingContact,\n                shippingContact\n            )\n                .then(onPaymentSelect)\n                .catch(onError);\n        }\n    }\n\n    private _handleCardNonceResponse(errors?: NonceGenerationError[], nonce?: string): void {\n        if (!this._deferredRequestNonce) {\n            throw new StandardError();\n        }\n\n        if (nonce && !errors) {\n            this._deferredRequestNonce.resolve({ nonce });\n\n            return;\n        }\n\n        const onError = this._squareOptions && this._squareOptions.onError || noop;\n\n        onError(errors);\n\n        this._deferredRequestNonce.reject(errors);\n    }\n\n    private _paymentInstrumentSelected(\n        methodId: string,\n        nonce?: string,\n        cardData?: CardData,\n        billingContact?: Contact,\n        shippingContact?: Contact): Promise<InternalCheckoutSelectors> {\n\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            return this._setExternalCheckoutData(nonce, cardData, billingContact, shippingContact)\n            .then(() =>\n                Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId)),\n            ]));\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _paymentRequestPayload(): SquarePaymentRequest {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const storeConfig = state.config.getStoreConfig();\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!storeConfig) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        return {\n            requestShippingAddress: true,\n            requestBillingInfo: true,\n            currencyCode: storeConfig.currency.code,\n            countryCode: this._getCountryCode(storeConfig.storeProfile.storeCountry),\n            total: {\n                label: storeConfig.storeProfile.storeName,\n                amount: String(checkout.subtotal),\n                pending: false,\n            },\n        };\n    }\n\n    private _setExternalCheckoutData(nonce?: string, cardData?: CardData, billingContact?: Contact, shippingContact?: Contact): Promise<Response<any>> {\n        return this._requestSender.post('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: {\n                nonce,\n                provider: 'squarev2',\n                action: 'set_external_checkout',\n                cardData: JSON.stringify(cardData),\n                billingContact: JSON.stringify(billingContact),\n                shippingContact: JSON.stringify(shippingContact),\n            },\n        });\n    }\n\n    private _setPostalCode(): void {\n        const state = this._store.getState();\n        const billingAddress = state.billingAddress.getBillingAddress();\n\n        if (!this._paymentForm) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (billingAddress && billingAddress.postalCode) {\n            this._paymentForm.setPostalCode(billingAddress.postalCode);\n        }\n    }\n\n    private _showPaymentMethods(methods: { [key: string]: boolean }, element: SquareFormElement): void {\n        const masterpassBtn = document.getElementById(element.elementId);\n\n        if (masterpassBtn && methods.masterpass) {\n            masterpassBtn.style.display = 'inline-block';\n        }\n    }\n}\n\nexport interface DeferredPromise {\n    resolve(resolution?: NonceInstrument): void;\n    reject(reason?: any): void;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { SquareFormFactory, SquareFormOptions } from './square-form';\nimport SquareWindow from './square-window';\n\nexport default class SquareScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    load(): Promise<SquareFormFactory> {\n        const scriptURI = '//js.squareup.com/v2/paymentform';\n\n        return this._scriptLoader.loadScript(scriptURI)\n            .then(() => (options: SquareFormOptions) =>\n                new (window as SquareWindow).SqPaymentForm(options)\n            );\n    }\n}\n","import { Address } from '../../../address';\nimport { BillingAddress } from '../../../billing';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    StandardError\n} from '../../../common/error/errors';\nimport { Customer } from '../../../customer';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport isVaultedInstrument from '../../is-vaulted-instrument';\nimport { HostedInstrument } from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentRequestSender from '../../payment-request-sender';\nimport PaymentRequestTransformer from '../../payment-request-transformer';\nimport PaymentStrategy from '../payment-strategy';\n\nimport {\n    StripeAddress,\n    StripeBillingDetails,\n    StripeCardElement,\n    StripeHandleCardPaymentOptions,\n    StripePaymentMethodData,\n    StripeShippingDetails,\n    StripeV3Client\n} from './stripev3';\nimport StripeV3ScriptLoader from './stripev3-script-loader';\n\nexport default class StripeV3PaymentStrategy implements PaymentStrategy {\n    private _stripeV3Client?: StripeV3Client;\n    private _cardElement?: StripeCardElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _stripeScriptLoader: StripeV3ScriptLoader,\n        private _paymentRequestSender: PaymentRequestSender,\n        private _paymentRequestTransformer: PaymentRequestTransformer\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const stripeOptions = options.stripev3;\n\n        if (!stripeOptions) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.stripev3\" argument is not provided.');\n        }\n\n        const paymentMethod = this._store.getState().paymentMethods.getPaymentMethod(options.methodId);\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._stripeScriptLoader.load(paymentMethod.initializationData.stripePublishableKey)\n            .then(stripeJs => {\n                this._stripeV3Client = stripeJs;\n                const elements = this._stripeV3Client.elements();\n                const cardElement = elements.create('card', {\n                    style: stripeOptions.style,\n                });\n\n                cardElement.mount(`#${stripeOptions.containerId}`);\n\n                this._cardElement = cardElement;\n\n                return Promise.resolve(this._store.getState());\n            });\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n        const shouldSaveInstrument = Boolean(paymentData && (paymentData as HostedInstrument).shouldSaveInstrument);\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() => {\n                if (paymentData && isVaultedInstrument(paymentData)) {\n                    return this._store.dispatch(this._paymentActionCreator.submitPayment({...payment, paymentData}));\n                }\n\n                return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(payment.methodId))\n                    .then(state => {\n                        const paymentMethod = state.paymentMethods.getPaymentMethod(payment.methodId);\n                        const paymentIntent = paymentMethod && paymentMethod.clientToken;\n\n                        if (!this._cardElement) {\n                            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                        }\n\n                        return this._getStripeJs().createPaymentMethod('card', this._cardElement,\n                            this._mapStripePaymentMethodOptions()\n                        ).then(stripePaymentMethod => {\n                            if (stripePaymentMethod.error || !stripePaymentMethod.paymentMethod.id) {\n                                throw new StandardError(stripePaymentMethod.error && stripePaymentMethod.error.message);\n                            }\n\n                            if (!paymentIntent) {\n                                throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                            }\n\n                            const stripeCardPaymentOptions = {\n                                ...this._mapStripeCardPaymentOptions(shouldSaveInstrument),\n                                payment_method: stripePaymentMethod.paymentMethod.id,\n                            };\n\n                            return this._getStripeJs().handleCardPayment(paymentIntent, stripeCardPaymentOptions);\n                        })\n                            .then(stripeResponse => {\n                                if (stripeResponse.error || !stripeResponse.paymentIntent.id) {\n                                    throw new StandardError(stripeResponse.error && stripeResponse.error.message);\n                                }\n\n                                const paymentPayload = {\n                                    methodId: payment.methodId,\n                                    paymentData: {\n                                        nonce: stripeResponse.paymentIntent.id,\n                                        shouldSaveInstrument,\n                                    },\n                                };\n\n                                return this._store.dispatch(this._paymentActionCreator.submitPayment(paymentPayload));\n                            });\n                    });\n            });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._cardElement) {\n            this._cardElement.unmount();\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _getStripeJs(): StripeV3Client {\n        if (!this._stripeV3Client) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._stripeV3Client;\n    }\n\n    private _mapStripeBillingAddress(billingAddress: BillingAddress | undefined): StripeAddress | undefined {\n        if (!billingAddress) {\n            return undefined;\n        }\n\n        return {\n            city: billingAddress.city,\n            country: billingAddress.countryCode,\n            line1: billingAddress.address1,\n            line2: billingAddress.address2,\n            postal_code: billingAddress.postalCode,\n            state: billingAddress.stateOrProvinceCode,\n        };\n    }\n\n    private _mapStripeShippingAddress(shippingAddress: Address | undefined): StripeAddress {\n        if (!shippingAddress) {\n            return { };\n        }\n\n        return {\n            city: shippingAddress.city,\n            country: shippingAddress.countryCode,\n            line1: shippingAddress.address1,\n            line2: shippingAddress.address2,\n            postal_code: shippingAddress.postalCode,\n            state: shippingAddress.stateOrProvinceCode,\n        };\n    }\n\n    private _mapStripeBillingDetails({ billingAddress, customer }: { billingAddress?: BillingAddress; customer?: Customer } = {}): StripeBillingDetails {\n        const stripeBillingDetails = {\n            address: this._mapStripeBillingAddress(billingAddress),\n        };\n\n        if (customer) {\n            return {\n                ...stripeBillingDetails,\n                email: customer.email,\n                name: `${customer.firstName} ${customer.lastName}`,\n            };\n        }\n\n        if (billingAddress) {\n            return {\n                ...stripeBillingDetails,\n                email: billingAddress.email,\n                name: `${billingAddress.firstName} ${billingAddress.lastName}`,\n            };\n        }\n\n        return {\n            name: 'Guest',\n        };\n    }\n\n    private _mapStripeShippingDetails({ shippingAddress, customer }: { shippingAddress?: Address ; customer?: Customer } = {}): StripeShippingDetails {\n        const stripeShippingDetails = {\n            address: this._mapStripeShippingAddress(shippingAddress),\n        };\n\n        if (customer) {\n            return {\n                ...stripeShippingDetails,\n                name: `${customer.firstName} ${customer.lastName}`,\n            };\n        }\n\n        if (shippingAddress) {\n            return {\n                ...stripeShippingDetails,\n                name: `${shippingAddress.firstName} ${shippingAddress.lastName}`,\n            };\n        }\n\n        return {\n            ...stripeShippingDetails,\n            name: 'Guest',\n        };\n    }\n\n    private _getCustomer(): Customer | undefined {\n        const customer = this._store.getState().customer.getCustomer();\n\n        if (customer) {\n            if (customer.firstName === '' || customer.lastName === '' || customer.email === '') {\n                return undefined;\n            }\n        }\n\n        return customer;\n    }\n\n    private _mapStripeCardPaymentOptions(shouldSaveInstrument: boolean): StripeHandleCardPaymentOptions {\n        const customer = this._getCustomer();\n        const shippingAddress = this._store.getState().shippingAddress.getShippingAddress();\n\n        const shippingDetails = {\n            shipping: this._mapStripeShippingDetails({ shippingAddress, customer }),\n        };\n\n        if (customer) {\n            return {\n                ...shippingDetails,\n                receipt_email: customer.email,\n                save_payment_method: shouldSaveInstrument,\n            };\n        } else {\n            return {\n                ...shippingDetails,\n            };\n        }\n    }\n\n    private _mapStripePaymentMethodOptions(): StripePaymentMethodData {\n        const customer = this._getCustomer();\n        const billingAddress = this._store.getState().billingAddress.getBillingAddress();\n\n        return {\n            billing_details: this._mapStripeBillingDetails({ billingAddress, customer }),\n        };\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { StripeHostWindow, StripeV3Client } from './stripev3';\n\nexport default class StripeV3ScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: StripeHostWindow = window\n    ) {}\n\n    load(publishableKey: string): Promise<StripeV3Client> {\n        return this._scriptLoader\n            .loadScript('https://js.stripe.com/v3/')\n            .then(() => {\n                if (!this._window.Stripe) {\n                    throw new StandardError();\n                }\n\n                return this._window.Stripe(publishableKey, {\n                    betas: ['payment_intent_beta_3'],\n                });\n            });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\n\nimport WepayRisk from './wepay-risk';\nimport WepayWindow from './wepay-window';\n\nconst SCRIPT_SRC = '//static.wepay.com/min/js/risk.1.latest.js';\n\nexport default class WepayRiskClient {\n    private _riskClient?: WepayRisk;\n\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    initialize(): Promise<WepayRiskClient> {\n        return this._scriptLoader\n            .loadScript(SCRIPT_SRC)\n            .then(() => this._riskClient = (window as WepayWindow).WePay.risk)\n            .then(() => this);\n    }\n\n    getRiskToken(): string {\n        if (!this._riskClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        this._riskClient.generate_risk_token();\n\n        return this._riskClient.get_risk_token();\n    }\n}\n","import { merge } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport CreditCardPaymentStrategy from '../credit-card/credit-card-payment-strategy';\n\nimport WepayRiskClient from './wepay-risk-client';\n\nexport default class WepayPaymentStrategy extends CreditCardPaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        orderActionCreator: OrderActionCreator,\n        paymentActionCreator: PaymentActionCreator,\n        private _wepayRiskClient: WepayRiskClient\n    ) {\n        super(store, orderActionCreator, paymentActionCreator);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._wepayRiskClient.initialize();\n\n        return super.initialize(options);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const token = this._wepayRiskClient.getRiskToken();\n        const payloadWithToken = merge({}, payload, {\n            payment: {\n                paymentData: {\n                    deviceSessionId: token,\n                },\n            },\n        });\n\n        return super.execute(payloadWithToken, options);\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class PaymentMethodDeclinedError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'The selected payment method was declined. Please select another payment method.');\n\n        this.name = 'PaymentMethodDeclinedError';\n        this.type = 'payment_declined';\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n} from '../../../common/error/errors';\nimport { ContentType, INTERNAL_USE_ONLY } from '../../../common/http-request';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { PaymentMethodCancelledError, PaymentMethodDeclinedError, PaymentMethodInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { Zip, ZipModalEvent } from './zip';\nimport ZipScriptLoader from './zip-script-loader';\n\nexport default class ZipPaymentStrategy implements PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _zipClient?: Zip;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _zipScriptLoader: ZipScriptLoader,\n        private _requestSender: RequestSender\n    ) { }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return this._zipScriptLoader.load()\n            .then(zip => {\n                this._zipClient = zip;\n\n                return this._store.getState();\n            });\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n        this._zipClient = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const { _zipClient: zipClient } = this;\n        const useStoreCredit = !!payload.useStoreCredit;\n\n        if (!payment) {\n            throw new InvalidArgumentError('Unable to submit payment because \"payload.payment\" argument is not provided.');\n        }\n\n        if (!zipClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() => this._store.dispatch(\n                this._remoteCheckoutActionCreator.initializePayment(payment.methodId, { useStoreCredit })\n            ))\n            .then(()  => {\n                return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(payment.methodId, options))\n                    .then(state => {\n                        this._paymentMethod = state.paymentMethods.getPaymentMethod(payment.methodId);\n\n                        if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                        }\n                    })\n                    .then(() => new Promise<string | undefined>((resolve, reject) => {\n                        zipClient.Checkout.init({\n                            onComplete: ({ checkoutId, state }) => {\n                                if (state === ZipModalEvent.CancelCheckout) {\n                                    return reject(new PaymentMethodCancelledError());\n                                }\n\n                                if (state === ZipModalEvent.CheckoutReferred && checkoutId) {\n                                    return this._prepareForReferredRegistration(payment.methodId, checkoutId)\n                                        .then(() => resolve());\n                                }\n\n                                if (state === ZipModalEvent.CheckoutApproved && checkoutId) {\n                                    return resolve(checkoutId);\n                                }\n\n                                if (state === ZipModalEvent.CheckoutDeclined) {\n                                    return reject(new PaymentMethodDeclinedError('Unfortunately your application was declined. Please select another payment method.'));\n                                }\n\n                                reject(new PaymentMethodInvalidError());\n                            },\n                            onCheckout: openModal => {\n                                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                                }\n\n                                openModal(JSON.parse(this._paymentMethod.clientToken));\n                            },\n                        });\n                    })\n                    .then(nonce => {\n                        if (nonce !== undefined) {\n                            return this._store.dispatch(this._paymentActionCreator.submitPayment({\n                                methodId: payment.methodId,\n                                paymentData: { nonce },\n                            }));\n                        }\n\n                        return this._store.getState();\n                    }\n                    ));\n            });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _prepareForReferredRegistration(provider: string, externalId: string): Promise<Response> {\n        const url = `/api/storefront/payment/${provider}/save-external-id`;\n        const options = {\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n            body: {\n                externalId,\n                provider,\n            },\n        };\n\n        return this._requestSender.post(url, options);\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\nimport { Zip, ZipHostWindow } from '../zip/zip';\n\nexport default class ZipScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        public _window: ZipHostWindow = window\n    ) {}\n\n    load(): Promise<Zip> {\n        return this._scriptLoader\n            .loadScript(`//static.zipmoney.com.au/checkout/checkout-v1.min.js`)\n            .then(() => {\n                if (!this._window.Zip) {\n                    throw new StandardError();\n                }\n\n                return this._window.Zip;\n            });\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../billing';\nimport { CheckoutActionCreator, CheckoutRequestSender, CheckoutStore, CheckoutValidator } from '../checkout';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { OrderActionCreator, OrderRequestSender } from '../order';\nimport { SpamProtectionActionCreator } from '../order/spam-protection';\nimport GoogleRecaptcha from '../order/spam-protection/google-recaptcha';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../remote-checkout';\n\nimport PaymentActionCreator from './payment-action-creator';\nimport PaymentMethodActionCreator from './payment-method-action-creator';\nimport PaymentMethodRequestSender from './payment-method-request-sender';\nimport PaymentRequestSender from './payment-request-sender';\nimport PaymentRequestTransformer from './payment-request-transformer';\nimport PaymentStrategyActionCreator from './payment-strategy-action-creator';\nimport PaymentStrategyRegistry from './payment-strategy-registry';\nimport PaymentStrategyType from './payment-strategy-type';\nimport { AffirmPaymentStrategy, AffirmScriptLoader } from './strategies/affirm';\nimport { AfterpayPaymentStrategy, AfterpayScriptLoader } from './strategies/afterpay';\nimport { AmazonPayPaymentStrategy, AmazonPayScriptLoader } from './strategies/amazon-pay';\nimport {\n    createBraintreePaymentProcessor,\n    createBraintreeVisaCheckoutPaymentProcessor,\n    BraintreeCreditCardPaymentStrategy,\n    BraintreePaypalPaymentStrategy,\n    BraintreeScriptLoader,\n    BraintreeSDKCreator,\n    BraintreeVisaCheckoutPaymentStrategy,\n    VisaCheckoutScriptLoader\n} from './strategies/braintree';\nimport { ChasePayPaymentStrategy, ChasePayScriptLoader } from './strategies/chasepay';\nimport { ConvergePaymentStrategy } from './strategies/converge';\nimport { CreditCardPaymentStrategy } from './strategies/credit-card';\nimport {\n    CardinalClient,\n    CardinalScriptLoader,\n    CyberSourcePaymentStrategy\n} from './strategies/cybersource';\nimport {\n    createGooglePayPaymentProcessor,\n    GooglePayBraintreeInitializer,\n    GooglePayPaymentStrategy,\n    GooglePayStripeInitializer\n} from './strategies/googlepay';\nimport { KlarnaPaymentStrategy, KlarnaScriptLoader } from './strategies/klarna';\nimport { LegacyPaymentStrategy } from './strategies/legacy';\nimport { MasterpassPaymentStrategy, MasterpassScriptLoader } from './strategies/masterpass';\nimport { NoPaymentDataRequiredPaymentStrategy } from './strategies/no-payment';\nimport { OfflinePaymentStrategy } from './strategies/offline';\nimport { OffsitePaymentStrategy } from './strategies/offsite';\nimport { PaypalExpressPaymentStrategy, PaypalProPaymentStrategy, PaypalScriptLoader } from './strategies/paypal';\nimport { SagePayPaymentStrategy } from './strategies/sage-pay';\nimport { SquarePaymentStrategy, SquareScriptLoader } from './strategies/square';\nimport { StripeScriptLoader, StripeV3PaymentStrategy } from './strategies/stripev3';\nimport { WepayPaymentStrategy, WepayRiskClient } from './strategies/wepay';\nimport { ZipPaymentStrategy, ZipScriptLoader } from './strategies/zip';\n\nexport default function createPaymentStrategyRegistry(\n    store: CheckoutStore,\n    paymentClient: any,\n    requestSender: RequestSender,\n    spamProtection: GoogleRecaptcha\n) {\n    const registry = new PaymentStrategyRegistry(store, { defaultToken: PaymentStrategyType.CREDIT_CARD });\n    const scriptLoader = getScriptLoader();\n    const paymentRequestTransformer = new PaymentRequestTransformer();\n    const paymentRequestSender = new PaymentRequestSender(paymentClient);\n    const billingAddressActionCreator = new BillingAddressActionCreator(new BillingAddressRequestSender(requestSender));\n    const braintreePaymentProcessor = createBraintreePaymentProcessor(scriptLoader);\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const checkoutValidator = new CheckoutValidator(checkoutRequestSender);\n    const spamProtectionActionCreator = new SpamProtectionActionCreator(spamProtection);\n    const orderActionCreator = new OrderActionCreator(new OrderRequestSender(requestSender), checkoutValidator, spamProtectionActionCreator);\n    const paymentActionCreator = new PaymentActionCreator(paymentRequestSender, orderActionCreator, paymentRequestTransformer);\n    const paymentMethodActionCreator = new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender));\n    const remoteCheckoutActionCreator = new RemoteCheckoutActionCreator(new RemoteCheckoutRequestSender(requestSender));\n    const configActionCreator = new ConfigActionCreator(new ConfigRequestSender(requestSender));\n    const checkoutActionCreator = new CheckoutActionCreator(checkoutRequestSender, configActionCreator);\n    const paymentStrategyActionCreator = new PaymentStrategyActionCreator(registry, orderActionCreator);\n    const formPoster = createFormPoster();\n\n    registry.register(PaymentStrategyType.AFFIRM, () =>\n        new AffirmPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            new AffirmScriptLoader()\n        )\n    );\n\n    registry.register(PaymentStrategyType.AFTERPAY, () =>\n        new AfterpayPaymentStrategy(\n            store,\n            checkoutValidator,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new AfterpayScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.AMAZON, () =>\n        new AmazonPayPaymentStrategy(\n            store,\n            orderActionCreator,\n            billingAddressActionCreator,\n            remoteCheckoutActionCreator,\n            new AmazonPayScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.CREDIT_CARD, () =>\n        new CreditCardPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.CYBERSOURCE, () =>\n        new CyberSourcePaymentStrategy(\n            store,\n            paymentMethodActionCreator,\n            orderActionCreator,\n            paymentActionCreator,\n            new CardinalClient(new CardinalScriptLoader(scriptLoader))\n        )\n    );\n\n    registry.register(PaymentStrategyType.KLARNA, () =>\n        new KlarnaPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new KlarnaScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.LEGACY, () =>\n        new LegacyPaymentStrategy(\n            store,\n            orderActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.OFFLINE, () =>\n        new OfflinePaymentStrategy(\n            store,\n            orderActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.OFFSITE, () =>\n        new OffsitePaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.PAYPAL, () =>\n        new PaypalProPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.PAYPAL_EXPRESS, () =>\n        new PaypalExpressPaymentStrategy(\n            store,\n            orderActionCreator,\n            new PaypalScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.PAYPAL_EXPRESS_CREDIT, () =>\n        new PaypalExpressPaymentStrategy(\n            store,\n            orderActionCreator,\n            new PaypalScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.SAGE_PAY, () =>\n        new SagePayPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            formPoster\n        )\n    );\n\n    registry.register(PaymentStrategyType.SQUARE, () =>\n        new SquarePaymentStrategy(\n            store,\n            checkoutActionCreator,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            requestSender,\n            new SquareScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.NO_PAYMENT_DATA_REQUIRED, () =>\n        new NoPaymentDataRequiredPaymentStrategy(\n            store,\n            orderActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.BRAINTREE, () =>\n        new BraintreeCreditCardPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            braintreePaymentProcessor\n        )\n    );\n\n    registry.register(PaymentStrategyType.BRAINTREE_PAYPAL, () =>\n        new BraintreePaypalPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            braintreePaymentProcessor\n        )\n    );\n\n    registry.register(PaymentStrategyType.BRAINTREE_PAYPAL_CREDIT, () =>\n        new BraintreePaypalPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            braintreePaymentProcessor,\n            true\n        )\n    );\n\n    registry.register(PaymentStrategyType.BRAINTREE_VISA_CHECKOUT, () =>\n        new BraintreeVisaCheckoutPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            paymentActionCreator,\n            orderActionCreator,\n            createBraintreeVisaCheckoutPaymentProcessor(scriptLoader, requestSender),\n            new VisaCheckoutScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.CHASE_PAY, () =>\n        new ChasePayPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            requestSender,\n            new ChasePayScriptLoader(scriptLoader),\n            new WepayRiskClient(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.BRAINTREE_GOOGLE_PAY, () =>\n        new GooglePayPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            paymentActionCreator,\n            orderActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayBraintreeInitializer(\n                    new BraintreeSDKCreator(\n                        new BraintreeScriptLoader(scriptLoader)\n                    )\n                )\n            )\n        )\n    );\n\n    registry.register(PaymentStrategyType.WE_PAY, () =>\n        new WepayPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            new WepayRiskClient(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.MASTERPASS, () =>\n        new MasterpassPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            new MasterpassScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.STRIPE_GOOGLE_PAY, () =>\n        new GooglePayPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            paymentActionCreator,\n            orderActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayStripeInitializer()\n            )\n        )\n    );\n\n    registry.register(PaymentStrategyType.ZIP, () =>\n        new ZipPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new ZipScriptLoader(scriptLoader),\n            requestSender\n        )\n    );\n\n    registry.register(PaymentStrategyType.CONVERGE, () =>\n        new ConvergePaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            formPoster\n            )\n    );\n\n    registry.register(PaymentStrategyType.STRIPEV3, () =>\n        new StripeV3PaymentStrategy(\n            store,\n            paymentMethodActionCreator,\n            paymentActionCreator,\n            orderActionCreator,\n            new StripeScriptLoader(scriptLoader),\n            paymentRequestSender,\n            paymentRequestTransformer\n        )\n    );\n\n    return registry;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { Overlay } from '../../../common/overlay';\n\nimport BraintreePaymentProcessor from './braintree-payment-processor';\nimport BraintreeScriptLoader from './braintree-script-loader';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\n\nexport default function createBraintreePaymentProcessor(scriptLoader: ScriptLoader) {\n    const braintreeScriptLoader = new BraintreeScriptLoader(scriptLoader);\n    const braintreeSDKCreator = new BraintreeSDKCreator(braintreeScriptLoader);\n    const overlay = new Overlay();\n\n    return new BraintreePaymentProcessor(braintreeSDKCreator, overlay);\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { Address } from '../../address';\nimport { InternalCheckoutSelectors, ReadableCheckoutStore } from '../../checkout';\nimport { addMinutes, isFuture } from '../../common/date-time';\nimport { MissingDataError, MissingDataErrorType } from '../../common/error/errors';\n\nimport { SessionContext, VaultAccessToken } from './instrument';\nimport { DeleteInstrumentAction, InstrumentActionType, LoadInstrumentsAction } from './instrument-actions';\nimport InstrumentRequestSender from './instrument-request-sender';\n\nexport default class InstrumentActionCreator {\n    constructor(\n        private _instrumentRequestSender: InstrumentRequestSender\n    ) {}\n\n    loadInstruments(): ThunkAction<LoadInstrumentsAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<LoadInstrumentsAction>) => {\n            observer.next(createAction(InstrumentActionType.LoadInstrumentsRequested));\n\n            const session = this._getSessionContext(store);\n            const token = this._getCurrentAccessToken(store);\n            const shippingAddress = this._getShippingAddress(store);\n\n            return this._getValidAccessToken(token)\n                .then(currentToken =>\n                    this._instrumentRequestSender.loadInstruments({\n                            ...session,\n                            authToken: currentToken.vaultAccessToken,\n                        },\n                        shippingAddress\n                    )\n                        .then(({ body }) => {\n                            observer.next(createAction(\n                                InstrumentActionType.LoadInstrumentsSucceeded,\n                                body,\n                                currentToken\n                            ));\n                            observer.complete();\n                        })\n                )\n                .catch(response => {\n                    observer.error(createErrorAction(InstrumentActionType.LoadInstrumentsFailed, response));\n                });\n        });\n    }\n\n    deleteInstrument(instrumentId: string): ThunkAction<DeleteInstrumentAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<DeleteInstrumentAction>) => {\n            observer.next(createAction(InstrumentActionType.DeleteInstrumentRequested, undefined, { instrumentId }));\n\n            const session = this._getSessionContext(store);\n            const token = this._getCurrentAccessToken(store);\n\n            return this._getValidAccessToken(token)\n                .then(currentToken =>\n                    this._instrumentRequestSender.deleteInstrument({\n                        ...session,\n                        authToken: currentToken.vaultAccessToken,\n                    }, instrumentId)\n                        .then(({ body }) => {\n                            observer.next(createAction(InstrumentActionType.DeleteInstrumentSucceeded, body, {\n                                instrumentId,\n                                ...currentToken,\n                            }));\n                            observer.complete();\n                        })\n                )\n                .catch(response => {\n                    observer.error(createErrorAction(InstrumentActionType.DeleteInstrumentFailed, response, { instrumentId }));\n                });\n        });\n    }\n\n    private _isValidVaultAccessToken(token: VaultAccessToken): boolean {\n        if (!token || !token.vaultAccessToken) {\n            return false;\n        }\n\n        const expiryBuffer = 2;\n        const expiry = addMinutes(new Date(token.vaultAccessExpiry), expiryBuffer);\n\n        return isFuture(expiry);\n    }\n\n    private _getCurrentAccessToken(store: ReadableCheckoutStore): VaultAccessToken | undefined {\n        const { instruments } = store.getState();\n        const meta = instruments.getInstrumentsMeta();\n\n        if (!meta) {\n            return;\n        }\n\n        return {\n            vaultAccessToken: meta.vaultAccessToken,\n            vaultAccessExpiry: meta.vaultAccessExpiry,\n        };\n    }\n\n    private _getValidAccessToken(token?: VaultAccessToken): Promise<VaultAccessToken> {\n        return token && this._isValidVaultAccessToken(token) ?\n            Promise.resolve(token) :\n            this._instrumentRequestSender.getVaultAccessToken().then(({ body }) => body);\n    }\n\n    private _getShippingAddress(store: ReadableCheckoutStore): Address | undefined {\n        const state = store.getState();\n\n        return state.shippingAddress.getShippingAddress();\n    }\n\n    private _getSessionContext(store: ReadableCheckoutStore): SessionContext {\n        const state = store.getState();\n        const config = state.config.getStoreConfig();\n        const cart = state.cart.getCart();\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        const { customerId } = cart;\n        const { storeId } = config.storeProfile;\n        const { code } = config.shopperCurrency.isTransactional ? config.shopperCurrency : config.currency;\n\n        return {\n            customerId,\n            storeId,\n            currencyCode: code,\n        };\n    }\n}\n","export default function addMinutes(date: Date, amount: number): Date {\n    const newDate = new Date(date.getTime());\n\n    newDate.setMinutes(date.getMinutes() + amount);\n\n    return newDate;\n}\n","export default function isFuture(date: Date): boolean {\n    return date.valueOf() > Date.now();\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport PaymentResponse from '../payment-response';\n\nimport Instrument, { VaultAccessToken } from './instrument';\nimport {\n    InstrumentsResponseBody,\n    InstrumentErrorResponseBody,\n    InternalInstrument,\n    InternalInstrumentsResponseBody,\n    InternalInstrumentErrorResponseBody,\n    InternalVaultAccessTokenResponseBody,\n} from './instrument-response-body';\n\nexport default class InstrumentResponseTransformer {\n    transformResponse(\n        response: PaymentResponse<InternalInstrumentsResponseBody>\n    ): Response<InstrumentsResponseBody> {\n        const { body, ...payload } = this._transformResponse(response);\n\n        return {\n            ...payload,\n            body: {\n                vaultedInstruments: this._transformVaultedInstruments(body.vaulted_instruments),\n            },\n        };\n    }\n\n    transformErrorResponse(\n        response: PaymentResponse<InternalInstrumentErrorResponseBody>\n    ): Response<InstrumentErrorResponseBody> {\n        return this._transformResponse(response);\n    }\n\n    transformVaultAccessResponse(\n        response: Response<InternalVaultAccessTokenResponseBody>\n    ): Response<VaultAccessToken> {\n        return {\n            ...response,\n            body: {\n                vaultAccessToken: response.body.data.token,\n                vaultAccessExpiry: response.body.data.expires_at,\n            },\n        };\n    }\n\n    private _transformVaultedInstruments(vaultedInstruments: InternalInstrument[] = []): Instrument[] {\n        return vaultedInstruments.map(instrument => ({\n            bigpayToken: instrument.bigpay_token,\n            defaultInstrument: instrument.default_instrument,\n            provider: instrument.provider,\n            iin: instrument.iin,\n            last4: instrument.last_4,\n            expiryMonth: instrument.expiry_month,\n            expiryYear: instrument.expiry_year,\n            brand: instrument.brand,\n            trustedShippingAddress: instrument.trusted_shipping_address,\n        }));\n    }\n\n    private _transformResponse<T>(response: PaymentResponse<T>): Response<T> {\n        const { data: body, ...payload } = response;\n\n        return {\n            ...payload,\n            body,\n        };\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { mapToInternalAddress, Address } from '../../address';\nimport { RequestOptions } from '../../common/http-request';\nimport PaymentResponse from '../payment-response';\n\nimport { InstrumentRequestContext, VaultAccessToken } from './instrument';\nimport {\n    InstrumentsResponseBody,\n    InternalInstrumentsResponseBody,\n    InternalInstrumentErrorResponseBody,\n} from './instrument-response-body';\nimport InstrumentResponseTransformer from './instrument-response-transformer';\n\nexport default class InstrumentRequestSender {\n    private _transformer: InstrumentResponseTransformer;\n\n    constructor(\n        private _client: any,\n        private _requestSender: RequestSender\n    ) {\n        this._transformer = new InstrumentResponseTransformer();\n    }\n\n    getVaultAccessToken(\n        { timeout }: RequestOptions = {}\n    ): Promise<Response<VaultAccessToken>> {\n        const url = '/internalapi/v1/checkout/payments/vault-access-token';\n\n        return this._requestSender.get(url, { timeout }).then(response => ({\n            ...response,\n            body: {\n                vaultAccessToken: response.body.data.token,\n                vaultAccessExpiry: response.body.data.expires_at,\n            },\n        }));\n    }\n\n    loadInstruments(\n        requestContext: InstrumentRequestContext,\n        shippingAddress?: Address\n    ): Promise<Response<InstrumentsResponseBody>> {\n        return (shippingAddress) ?\n            this._loadInstrumentsWithAddress(requestContext, shippingAddress) :\n            this._loadInstruments(requestContext);\n    }\n\n    deleteInstrument(\n        requestContext: InstrumentRequestContext,\n        instrumentId: string\n    ): Promise<Response<InstrumentsResponseBody>> {\n        const payload = {\n            ...requestContext,\n            instrumentId,\n        };\n\n        return new Promise((resolve, reject) => {\n            this._client.deleteShopperInstrument(\n                payload, (\n                    errorResponse: PaymentResponse<InternalInstrumentErrorResponseBody>,\n                    response: PaymentResponse<InternalInstrumentsResponseBody>\n                ) =>  errorResponse ?\n                    reject(this._transformer.transformErrorResponse(errorResponse)) :\n                    resolve(this._transformer.transformResponse(response))\n            );\n        });\n    }\n\n    private _loadInstruments(\n        requestContext: InstrumentRequestContext\n    ): Promise<Response<InstrumentsResponseBody>> {\n        return new Promise((resolve, reject) => {\n            this._client.loadInstruments(\n                requestContext, (\n                    errorResponse: PaymentResponse<InternalInstrumentErrorResponseBody>,\n                    response: PaymentResponse<InternalInstrumentsResponseBody>\n                ) => errorResponse ?\n                    reject(this._transformer.transformErrorResponse(errorResponse)) :\n                    resolve(this._transformer.transformResponse(response))\n            );\n        });\n    }\n\n    private _loadInstrumentsWithAddress(\n        requestContext: InstrumentRequestContext,\n        shippingAddress: Address\n    ): Promise<Response<InstrumentsResponseBody>> {\n        const payload = {\n            ...requestContext,\n            shippingAddress: mapToInternalAddress(shippingAddress),\n        };\n\n        return new Promise((resolve, reject) => {\n            this._client.loadInstrumentsWithAddress(\n                payload, (\n                    errorResponse: PaymentResponse<InternalInstrumentErrorResponseBody>,\n                    response: PaymentResponse<InternalInstrumentsResponseBody>\n                ) => errorResponse ?\n                    reject(this._transformer.transformErrorResponse(errorResponse)) :\n                    resolve(this._transformer.transformResponse(response))\n            );\n        });\n    }\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport { LoadShippingCountriesAction, ShippingCountryActionType } from './shipping-country-actions';\nimport ShippingCountryRequestSender from './shipping-country-request-sender';\n\nexport default class ShippingCountryActionCreator {\n    constructor(\n        private _shippingCountryRequestSender: ShippingCountryRequestSender\n    ) {}\n\n    loadCountries(options?: RequestOptions): Observable<LoadShippingCountriesAction> {\n        return Observable.create((observer: Observer<LoadShippingCountriesAction>) => {\n            observer.next(createAction(ShippingCountryActionType.LoadShippingCountriesRequested));\n\n            this._shippingCountryRequestSender.loadCountries(options)\n                .then(response => {\n                    observer.next(createAction(ShippingCountryActionType.LoadShippingCountriesSucceeded, response.body.data));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ShippingCountryActionType.LoadShippingCountriesFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\nimport { CountryResponseBody } from '../geography';\n\nexport default class ShippingCountryRequestSender {\n    constructor(\n        private _requestSender: RequestSender,\n        private _config: { locale?: string }\n    ) {}\n\n    loadCountries({ timeout }: RequestOptions = {}): Promise<Response<CountryResponseBody>> {\n        const url = '/internalapi/v1/shipping/countries';\n        const headers = {\n            'Accept-Language': this._config.locale,\n        };\n\n        return this._requestSender.get(url, { headers, timeout });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { AddressRequestBody } from '../address';\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { Registry } from '../common/registry';\n\nimport { ShippingInitializeOptions, ShippingRequestOptions } from './shipping-request-options';\nimport {\n    ShippingStrategyActionType,\n    ShippingStrategyDeinitializeAction,\n    ShippingStrategyInitializeAction,\n    ShippingStrategySelectOptionAction,\n    ShippingStrategyUpdateAddressAction,\n} from './shipping-strategy-actions';\nimport { ShippingStrategy } from './strategies';\n\nexport default class ShippingStrategyActionCreator {\n    constructor(\n        private _strategyRegistry: Registry<ShippingStrategy>\n    ) {}\n\n    updateAddress(address: Partial<AddressRequestBody>, options?: ShippingRequestOptions): ThunkAction<ShippingStrategyUpdateAddressAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategyUpdateAddressAction>) => {\n            const payment = store.getState().payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n\n            observer.next(createAction(ShippingStrategyActionType.UpdateAddressRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .updateAddress(address, { ...options, methodId })\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.UpdateAddressSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.UpdateAddressFailed, error, { methodId }));\n                });\n        });\n    }\n\n    selectOption(shippingOptionId: string, options?: ShippingRequestOptions): ThunkAction<ShippingStrategySelectOptionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategySelectOptionAction>) => {\n            const payment = store.getState().payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n\n            observer.next(createAction(ShippingStrategyActionType.SelectOptionRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .selectOption(shippingOptionId, { ...options, methodId })\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.SelectOptionSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.SelectOptionFailed, error, { methodId }));\n                });\n        });\n    }\n\n    initialize(options?: ShippingInitializeOptions): ThunkAction<ShippingStrategyInitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategyInitializeAction>) => {\n            const state = store.getState();\n            const payment = state.payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n            const mergedOptions = { ...options, methodId };\n\n            if (methodId && state.shippingStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(ShippingStrategyActionType.InitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .initialize(mergedOptions)\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.InitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.InitializeFailed, error, { methodId }));\n                });\n        });\n    }\n\n    deinitialize(options?: ShippingRequestOptions): ThunkAction<ShippingStrategyDeinitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategyDeinitializeAction>) => {\n            const state = store.getState();\n            const payment = state.payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n\n            if (methodId && !state.shippingStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(ShippingStrategyActionType.DeinitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .deinitialize({ ...options, methodId })\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.DeinitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.DeinitializeFailed, error, { methodId }));\n                });\n        });\n    }\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\n\nimport { isInternalAddressEqual, mapFromInternalAddress, AddressRequestBody } from '../../../address';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { AmazonPayAddressBook, AmazonPayOrderReference, AmazonPayScriptLoader, AmazonPayWindow } from '../../../payment/strategies/amazon-pay';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { RemoteCheckoutSynchronizationError } from '../../../remote-checkout/errors';\nimport ConsignmentActionCreator from '../../consignment-action-creator';\nimport { ShippingInitializeOptions, ShippingRequestOptions } from '../../shipping-request-options';\nimport { ShippingStrategyActionType } from '../../shipping-strategy-actions';\nimport ShippingStrategy from '../shipping-strategy';\n\nimport AmazonPayShippingInitializeOptions from './amazon-pay-shipping-initialize-options';\n\nexport default class AmazonPayShippingStrategy implements ShippingStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _window: AmazonPayWindow;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _consignmentActionCreator: ConsignmentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _scriptLoader: AmazonPayScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    initialize(options: ShippingInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { amazon: amazonOptions, methodId } = options;\n\n        if (!amazonOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.amazon\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => new Promise((resolve, reject) => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const onReady = () => {\n                    this._createAddressBook(amazonOptions)\n                        .then(resolve)\n                        .catch(reject);\n                };\n\n                this._scriptLoader.loadWidget(this._paymentMethod, onReady)\n                    .catch(reject);\n            }))\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    updateAddress(address: AddressRequestBody, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    selectOption(optionId: string, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.selectShippingOption(optionId, options)\n        );\n    }\n\n    private _createAddressBook(options: AmazonPayShippingInitializeOptions): Promise<AmazonPayAddressBook> {\n        return new Promise((resolve, reject) => {\n            const { container, onAddressSelect = () => {}, onError = () => {}, onReady = () => {} } = options;\n            const merchantId = this._paymentMethod && this._paymentMethod.config.merchantId;\n\n            if (!document.getElementById(container)) {\n                return reject(new InvalidArgumentError('Unable to create AmazonPay AddressBook widget without valid container ID.'));\n            }\n\n            if (!this._window.OffAmazonPayments) {\n                return reject(new NotInitializedError(NotInitializedErrorType.ShippingNotInitialized));\n            }\n\n            if (!merchantId) {\n                return reject(new MissingDataError(MissingDataErrorType.MissingPaymentMethod));\n            }\n\n            const widget = new this._window.OffAmazonPayments.Widgets.AddressBook({\n                design: {\n                    designMode: 'responsive',\n                },\n                scope: 'payments:billing_address payments:shipping_address payments:widget profile',\n                sellerId: merchantId,\n                onAddressSelect: orderReference => {\n                    this._synchronizeShippingAddress()\n                        .then(() => onAddressSelect(orderReference))\n                        .catch(onError);\n                },\n                onError: error => {\n                    reject(error);\n                    onError(error);\n                },\n                onReady: orderReference => {\n                    this._updateOrderReference(orderReference)\n                        .then(() => {\n                            resolve();\n                            onReady(orderReference);\n                        })\n                        .catch(onError);\n                },\n            });\n\n            widget.bind(container);\n\n            return widget;\n        });\n    }\n\n    private _synchronizeShippingAddress(): Promise<InternalCheckoutSelectors> {\n        const methodId = this._paymentMethod && this._paymentMethod.id;\n        const amazon = this._store.getState().remoteCheckout.getCheckout('amazon');\n        const referenceId = amazon ? amazon.referenceId : undefined;\n\n        if (!methodId || !referenceId) {\n            throw new RemoteCheckoutSynchronizationError();\n        }\n\n        return this._store.dispatch(\n            createAction(ShippingStrategyActionType.UpdateAddressRequested, undefined, { methodId })\n        )\n            .then(() => this._store.dispatch(\n                this._remoteCheckoutActionCreator.initializeShipping(methodId, { referenceId })\n            ))\n            .then(state => {\n                const amazon = state.remoteCheckout.getCheckout('amazon');\n                const remoteAddress = amazon && amazon.shipping && amazon.shipping.address;\n                const address = state.shippingAddress.getShippingAddress();\n\n                if (remoteAddress === false) {\n                    throw new RemoteCheckoutSynchronizationError();\n                }\n\n                if (!remoteAddress || isInternalAddressEqual(remoteAddress, address || {})) {\n                    return this._store.getState();\n                }\n\n                return this._store.dispatch(\n                    this._consignmentActionCreator.updateAddress(mapFromInternalAddress(remoteAddress))\n                );\n            })\n            .then(() => this._store.dispatch(\n                createAction(ShippingStrategyActionType.UpdateAddressSucceeded, undefined, { methodId })\n            ))\n            .catch(error => this._store.dispatch(\n                createErrorAction(ShippingStrategyActionType.UpdateAddressFailed, error, { methodId })\n            ));\n    }\n\n    private _updateOrderReference(orderReference: AmazonPayOrderReference): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.updateCheckout('amazon', {\n                referenceId: orderReference.getAmazonOrderReferenceId(),\n            })\n        );\n    }\n}\n","import { AddressRequestBody } from '../../../address';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport ConsignmentActionCreator from '../../consignment-action-creator';\nimport { ShippingRequestOptions } from '../../shipping-request-options';\nimport ShippingStrategy from '../shipping-strategy';\n\nexport default class DefaultShippingStrategy implements ShippingStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _consignmentActionCreator: ConsignmentActionCreator\n    ) {}\n\n    updateAddress(address: AddressRequestBody, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.updateAddress(address, options)\n        );\n    }\n\n    selectOption(optionId: string, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.selectShippingOption(optionId, options)\n        );\n    }\n\n    initialize(options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { Action, DataStore, Filter, ReadableDataStore, Subscriber, SubscribeOptions, Unsubscriber } from '@bigcommerce/data-store';\nimport { BehaviorSubject } from 'rxjs';\nimport { distinctUntilChanged } from 'rxjs/operators';\n\nimport { isEqual } from '../utility';\n\nexport default class DataStoreProjection<TState, TTransformedState = TState> implements ReadableDataStore<TTransformedState> {\n    private _state$: BehaviorSubject<TTransformedState>;\n\n    constructor(\n        private _store: DataStore<any, Action, TState>,\n        private _transformState: (state: TState) => TTransformedState\n    ) {\n        this._state$ = new BehaviorSubject(this._transformState(this._store.getState()));\n\n        this._store.subscribe(state => {\n            this._state$.next(this._transformState(state));\n        });\n    }\n\n    getState(): TTransformedState {\n        return this._state$.getValue();\n    }\n\n    subscribe(subscriber: Subscriber<TTransformedState>, ...filters: Array<Filter<TTransformedState>>): Unsubscriber;\n    subscribe(subscriber: Subscriber<TTransformedState>, options: SubscribeOptions<TTransformedState>): Unsubscriber;\n    subscribe(subscriber: Subscriber<TTransformedState>, ...args: any[]): Unsubscriber {\n        const options: SubscribeOptions<TTransformedState> = typeof args[0] === 'object' ? args[0] : undefined;\n        const filters: Array<Filter<TTransformedState>> = options ? (options.filters || []) : args;\n        const subscription = this._state$\n            .pipe(distinctUntilChanged((stateA, stateB) =>\n                filters.length > 0 ?\n                    filters.every(filterFn => isEqual(filterFn(stateA), filterFn(stateB))) :\n                    false\n            ))\n            .subscribe(subscriber);\n\n        return subscription.unsubscribe;\n    }\n}\n","import { cloneDeep, memoize } from 'lodash';\n\nexport default function cloneDecorator<T extends Method>(target: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T>;\nexport default function cloneDecorator<T extends Constructor<object>>(target: T): T;\nexport default function cloneDecorator(target: any, key?: any, descriptor?: any): any {\n    if (!key || !descriptor) {\n        return cloneClassDecorator(target);\n    }\n\n    return cloneMethodDecorator(target, key, descriptor);\n}\n\nexport function cloneClassDecorator<T extends Constructor<object>>(target: T): T {\n    const decoratedTarget = class extends target {};\n\n    Object.getOwnPropertyNames(target.prototype)\n        .forEach(key => {\n            const descriptor = Object.getOwnPropertyDescriptor(target.prototype, key);\n\n            if (!descriptor || key === 'constructor') {\n                return;\n            }\n\n            Object.defineProperty(\n                decoratedTarget.prototype,\n                key,\n                cloneMethodDecorator(target.prototype, key, descriptor)\n            );\n        });\n\n    return decoratedTarget;\n}\n\nexport function cloneMethodDecorator<T extends Method>(target: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T> {\n    if (typeof descriptor.value !== 'function') {\n        return descriptor;\n    }\n\n    let method = descriptor.value;\n    const memoizedCloneDeep = memoize(cloneDeep);\n\n    // Use WeakMap as the MapCache, this allows for better garbage collection\n    // There's a deprecated `clear` method in the lodash implementation\n    // of MapCache, hence the `any`\n    memoizedCloneDeep.cache = new WeakMap() as any;\n\n    return {\n        get() {\n            const value = ((...args: any[]) => {\n                const result = method.apply(this, args);\n\n                return result && typeof result === 'object'\n                    ? memoizedCloneDeep(result)\n                    : result;\n            }) as T;\n\n            Object.defineProperty(this, key, { ...descriptor, value });\n\n            return value;\n        },\n        set(value) {\n            method = value;\n        },\n    };\n}\n\nexport type Constructor<T> = new (...args: any[]) => T;\nexport type Method = (...args: any[]) => any;\n","import { Address } from '../address';\nimport { BillingAddress, BillingAddressSelector } from '../billing';\nimport { Cart, CartSelector } from '../cart';\nimport { selector } from '../common/selector';\nimport { clone } from '../common/utility';\nimport { ConfigSelector } from '../config';\nimport { StoreConfig } from '../config/config';\nimport { Coupon, CouponSelector, GiftCertificate, GiftCertificateSelector } from '../coupon';\nimport { Customer, CustomerSelector } from '../customer';\nimport { FormField, FormSelector } from '../form';\nimport { Country, CountrySelector } from '../geography';\nimport { Order, OrderSelector } from '../order';\nimport { PaymentMethod, PaymentMethodSelector, PaymentSelector } from '../payment';\nimport { Instrument, InstrumentSelector } from '../payment/instrument';\nimport {\n    Consignment,\n    ConsignmentSelector,\n    ShippingAddressSelector,\n    ShippingCountrySelector,\n    ShippingOption,\n} from '../shipping';\n\nimport Checkout from './checkout';\nimport CheckoutSelector from './checkout-selector';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for getting the state of the current checkout.\n *\n * This object has a set of methods that allow you to get a specific piece of\n * checkout information, such as shipping and billing details.\n */\n@selector\n@clone\nexport default class CheckoutStoreSelector {\n    private _billingAddress: BillingAddressSelector;\n    private _cart: CartSelector;\n    private _checkout: CheckoutSelector;\n    private _config: ConfigSelector;\n    private _consignments: ConsignmentSelector;\n    private _countries: CountrySelector;\n    private _coupons: CouponSelector;\n    private _customer: CustomerSelector;\n    private _form: FormSelector;\n    private _giftCertificates: GiftCertificateSelector;\n    private _instruments: InstrumentSelector;\n    private _order: OrderSelector;\n    private _payment: PaymentSelector;\n    private _paymentMethods: PaymentMethodSelector;\n    private _shippingAddress: ShippingAddressSelector;\n    private _shippingCountries: ShippingCountrySelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._billingAddress = selectors.billingAddress;\n        this._cart = selectors.cart;\n        this._checkout = selectors.checkout;\n        this._config = selectors.config;\n        this._consignments = selectors.consignments;\n        this._countries = selectors.countries;\n        this._coupons = selectors.coupons;\n        this._customer = selectors.customer;\n        this._form = selectors.form;\n        this._giftCertificates = selectors.giftCertificates;\n        this._instruments = selectors.instruments;\n        this._order = selectors.order;\n        this._payment = selectors.payment;\n        this._paymentMethods = selectors.paymentMethods;\n        this._shippingAddress = selectors.shippingAddress;\n        this._shippingCountries = selectors.shippingCountries;\n    }\n\n    /**\n     * Gets the current checkout.\n     *\n     * @returns The current checkout if it is loaded, otherwise undefined.\n     */\n    getCheckout(): Checkout | undefined {\n        return this._checkout.getCheckout();\n    }\n\n    /**\n     * Gets the current order.\n     *\n     * @returns The current order if it is loaded, otherwise undefined.\n     */\n    getOrder(): Order | undefined {\n        return this._order.getOrder();\n    }\n\n    /**\n     * Gets the checkout configuration of a store.\n     *\n     * @returns The configuration object if it is loaded, otherwise undefined.\n     */\n    getConfig(): StoreConfig | undefined {\n        return this._config.getStoreConfig();\n    }\n\n    /**\n     * Gets the shipping address of the current checkout.\n     *\n     * If the address is partially complete, it may not have shipping options\n     * associated with it.\n     *\n     * @returns The shipping address object if it is loaded, otherwise\n     * undefined.\n     */\n    getShippingAddress(): Address | undefined {\n        const shippingAddress = this._shippingAddress.getShippingAddress();\n        const context = this._config.getContextConfig();\n\n        if (!shippingAddress) {\n            if (!context || !context.geoCountryCode) {\n                return;\n            }\n\n            return {\n                firstName: '',\n                lastName: '',\n                company: '',\n                address1: '',\n                address2: '',\n                city: '',\n                stateOrProvince: '',\n                stateOrProvinceCode: '',\n                postalCode: '',\n                country: '',\n                phone: '',\n                customFields: [],\n                countryCode: context.geoCountryCode,\n            };\n        }\n\n        return shippingAddress;\n    }\n\n    /**\n     * Gets a list of shipping options available for the shipping address.\n     *\n     * If there is no shipping address assigned to the current checkout, the\n     * list of shipping options will be empty.\n     *\n     * @returns The list of shipping options if any, otherwise undefined.\n     */\n    getShippingOptions(): ShippingOption[] | undefined {\n        const consignments = this._consignments.getConsignments();\n\n        if (consignments && consignments.length) {\n            return consignments[0].availableShippingOptions;\n        }\n\n        return;\n    }\n\n    /**\n     * Gets a list of consignments.\n     *\n     * If there are no consignments created for to the current checkout, the\n     * list will be empty.\n     *\n     * @returns The list of consignments if any, otherwise undefined.\n     */\n    getConsignments(): Consignment[] | undefined {\n        return this._consignments.getConsignments();\n    }\n\n    /**\n     * Gets the selected shipping option for the current checkout.\n     *\n     * @returns The shipping option object if there is a selected option,\n     * otherwise undefined.\n     */\n    getSelectedShippingOption(): ShippingOption | undefined {\n        const consignments = this._consignments.getConsignments();\n\n        if (!consignments || !consignments.length) {\n            return;\n        }\n\n        return consignments[0].selectedShippingOption;\n    }\n\n    /**\n     * Gets a list of countries available for shipping.\n     *\n     * @returns The list of countries if it is loaded, otherwise undefined.\n     */\n    getShippingCountries(): Country[] | undefined {\n        return this._shippingCountries.getShippingCountries();\n    }\n\n    /**\n     * Gets the billing address of an order.\n     *\n     * @returns The billing address object if it is loaded, otherwise undefined.\n     */\n    getBillingAddress(): BillingAddress | undefined {\n        return this._billingAddress.getBillingAddress();\n    }\n\n    /**\n     * Gets a list of countries available for billing.\n     *\n     * @returns The list of countries if it is loaded, otherwise undefined.\n     */\n    getBillingCountries(): Country[] | undefined {\n        return this._countries.getCountries();\n    }\n\n    /**\n     * Gets a list of payment methods available for checkout.\n     *\n     * @returns The list of payment methods if it is loaded, otherwise undefined.\n     */\n    getPaymentMethods(): PaymentMethod[] | undefined {\n        return this._paymentMethods.getPaymentMethods();\n    }\n\n    /**\n     * Gets a payment method by an id.\n     *\n     * The method returns undefined if unable to find a payment method with the\n     * specified id, either because it is not available for the customer, or it\n     * is not loaded.\n     *\n     * @param methodId - The identifier of the payment method.\n     * @param gatewayId - The identifier of a payment provider providing the\n     * payment method.\n     * @returns The payment method object if loaded and available, otherwise,\n     * undefined.\n     */\n    getPaymentMethod(methodId: string, gatewayId?: string): PaymentMethod | undefined {\n        return this._paymentMethods.getPaymentMethod(methodId, gatewayId);\n    }\n\n    /**\n     * Gets the payment method that is selected for checkout.\n     *\n     * @returns The payment method object if there is a selected method;\n     * undefined if otherwise.\n     */\n    getSelectedPaymentMethod(): PaymentMethod | undefined {\n        const payment = this._payment.getPaymentId();\n\n        return payment && this._paymentMethods.getPaymentMethod(payment.providerId, payment.gatewayId);\n    }\n\n    /**\n     * Gets the current cart.\n     *\n     * @returns The current cart object if it is loaded, otherwise undefined.\n     */\n    getCart(): Cart | undefined {\n        return this._cart.getCart();\n    }\n\n    /**\n     * Gets a list of coupons that are applied to the current checkout.\n     *\n     * @returns The list of applied coupons if there is any, otherwise undefined.\n     */\n    getCoupons(): Coupon[] | undefined {\n        return this._coupons.getCoupons();\n    }\n\n    /**\n     * Gets a list of gift certificates that are applied to the current checkout.\n     *\n     * @returns The list of applied gift certificates if there is any, otherwise undefined.\n     */\n    getGiftCertificates(): GiftCertificate[] | undefined {\n        return this._giftCertificates.getGiftCertificates();\n    }\n\n    /**\n     * Gets the current customer.\n     *\n     * @returns The current customer object if it is loaded, otherwise\n     * undefined.\n     */\n    getCustomer(): Customer | undefined {\n        return this._customer.getCustomer();\n    }\n\n    /**\n     * Checks if payment data is required or not.\n     *\n     * If payment data is required, customers should be prompted to enter their\n     * payment details.\n     *\n     * ```js\n     * if (state.checkout.isPaymentDataRequired()) {\n     *     // Render payment form\n     * } else {\n     *     // Render \"Payment is not required for this order\" message\n     * }\n     * ```\n     *\n     * @param useStoreCredit - If true, check whether payment data is required\n     * with store credit applied; otherwise, check without store credit.\n     * @returns True if payment data is required, otherwise false.\n     */\n    isPaymentDataRequired(useStoreCredit?: boolean): boolean {\n        return this._payment.isPaymentDataRequired(useStoreCredit);\n    }\n\n    /**\n     * Checks if payment data is submitted or not.\n     *\n     * If payment data is already submitted using a payment method, customers\n     * should not be prompted to enter their payment details again.\n     *\n     * @param methodId - The identifier of the payment method.\n     * @param gatewayId - The identifier of a payment provider providing the\n     * payment method.\n     * @returns True if payment data is submitted, otherwise false.\n     */\n    isPaymentDataSubmitted(methodId: string, gatewayId?: string): boolean {\n        return this._payment.isPaymentDataSubmitted(this.getPaymentMethod(methodId, gatewayId));\n    }\n\n    /**\n     * Gets a list of payment instruments associated with the current customer.\n     *\n     * @returns The list of payment instruments if it is loaded, otherwise undefined.\n     */\n    getInstruments(): Instrument[] | undefined {\n        return this._instruments.getInstruments();\n    }\n\n    /**\n     * Gets a set of form fields that should be presented to customers in order\n     * to capture their billing address for a specific country.\n     *\n     * @param countryCode - A 2-letter country code (ISO 3166-1 alpha-2).\n     * @returns The set of billing address form fields if it is loaded,\n     * otherwise undefined.\n     */\n    getBillingAddressFields(countryCode: string): FormField[] {\n        return this._form.getBillingAddressFields(this.getBillingCountries(), countryCode);\n    }\n\n    /**\n     * Gets a set of form fields that should be presented to customers in order\n     * to capture their shipping address for a specific country.\n     *\n     * @param countryCode - A 2-letter country code (ISO 3166-1 alpha-2).\n     * @returns The set of shipping address form fields if it is loaded,\n     * otherwise undefined.\n     */\n    getShippingAddressFields(countryCode: string): FormField[] {\n        return this._form.getShippingAddressFields(this.getShippingCountries(), countryCode);\n    }\n}\n","import { BillingAddressSelector } from '../billing';\nimport { CartSelector } from '../cart';\nimport { RequestError } from '../common/error/errors';\nimport { selector } from '../common/selector';\nimport { ConfigSelector } from '../config';\nimport { CouponSelector, GiftCertificateSelector } from '../coupon';\nimport { CustomerStrategySelector } from '../customer';\nimport { CountrySelector } from '../geography';\nimport { OrderSelector } from '../order';\nimport { PaymentMethodSelector, PaymentStrategySelector } from '../payment';\nimport { InstrumentSelector } from '../payment/instrument';\nimport { ConsignmentSelector, ShippingCountrySelector, ShippingStrategySelector } from '../shipping';\n\nimport CheckoutSelector from './checkout-selector';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for getting the error of any asynchronous checkout action, if\n * there is any.\n *\n * This object has a set of getters that would return an error if an action is\n * not executed successfully. For example, if you are unable to submit an order,\n * you can use this object to retrieve the reason for the failure.\n */\n@selector\nexport default class CheckoutStoreErrorSelector {\n    private _billingAddress: BillingAddressSelector;\n    private _cart: CartSelector;\n    private _checkout: CheckoutSelector;\n    private _config: ConfigSelector;\n    private _consignments: ConsignmentSelector;\n    private _countries: CountrySelector;\n    private _coupons: CouponSelector;\n    private _customerStrategies: CustomerStrategySelector;\n    private _giftCertificates: GiftCertificateSelector;\n    private _instruments: InstrumentSelector;\n    private _order: OrderSelector;\n    private _paymentMethods: PaymentMethodSelector;\n    private _paymentStrategies: PaymentStrategySelector;\n    private _shippingCountries: ShippingCountrySelector;\n    private _shippingStrategies: ShippingStrategySelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._billingAddress = selectors.billingAddress;\n        this._cart = selectors.cart;\n        this._checkout = selectors.checkout;\n        this._config = selectors.config;\n        this._consignments = selectors.consignments;\n        this._countries = selectors.countries;\n        this._coupons = selectors.coupons;\n        this._customerStrategies = selectors.customerStrategies;\n        this._giftCertificates = selectors.giftCertificates;\n        this._instruments = selectors.instruments;\n        this._order = selectors.order;\n        this._paymentMethods = selectors.paymentMethods;\n        this._paymentStrategies = selectors.paymentStrategies;\n        this._shippingCountries = selectors.shippingCountries;\n        this._shippingStrategies = selectors.shippingStrategies;\n    }\n\n    /**\n     * Gets the error of any checkout action that has failed.\n     *\n     * @returns The error object if unable to perform any checkout action,\n     * otherwise undefined.\n     */\n    getError(): Error | undefined {\n        // tslint:disable-next-line:cyclomatic-complexity\n        return this.getLoadCheckoutError() ||\n            this.getSubmitOrderError() ||\n            this.getFinalizeOrderError() ||\n            this.getLoadOrderError() ||\n            this.getLoadCartError() ||\n            this.getLoadBillingCountriesError() ||\n            this.getLoadShippingCountriesError() ||\n            this.getLoadPaymentMethodsError() ||\n            this.getLoadPaymentMethodError() ||\n            this.getInitializePaymentError() ||\n            this.getLoadShippingOptionsError() ||\n            this.getSelectShippingOptionError() ||\n            this.getSignInError() ||\n            this.getSignOutError() ||\n            this.getInitializeCustomerError() ||\n            this.getUpdateShippingAddressError() ||\n            this.getUpdateBillingAddressError() ||\n            this.getContinueAsGuestError() ||\n            this.getUpdateConsignmentError() ||\n            this.getCreateConsignmentsError() ||\n            this.getDeleteConsignmentError() ||\n            this.getInitializeShippingError() ||\n            this.getApplyCouponError() ||\n            this.getRemoveCouponError() ||\n            this.getApplyGiftCertificateError() ||\n            this.getRemoveGiftCertificateError() ||\n            this.getLoadInstrumentsError() ||\n            this.getDeleteInstrumentError() ||\n            this.getLoadConfigError();\n    }\n\n    /**\n     * Returns an error if unable to load the current checkout.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadCheckoutError(): Error | undefined {\n        return this._checkout.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to update the current checkout.\n     *\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateCheckoutError(): Error | undefined {\n        return this._checkout.getUpdateError();\n    }\n\n    /**\n     * Returns an error if unable to submit the current order.\n     *\n     * @returns The error object if unable to submit, otherwise undefined.\n     */\n    getSubmitOrderError(): Error | undefined {\n        return this._paymentStrategies.getExecuteError();\n    }\n\n    /**\n     * Returns an error if unable to finalize the current order.\n     *\n     * @returns The error object if unable to finalize, otherwise undefined.\n     */\n    getFinalizeOrderError(): Error | undefined {\n        return this._paymentStrategies.getFinalizeError();\n    }\n\n    /**\n     * Returns an error if unable to load the current order.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadOrderError(): Error | undefined {\n        return this._order.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to load the current cart.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadCartError(): Error | undefined {\n        return this._cart.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to load billing countries.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadBillingCountriesError(): Error | undefined {\n        return this._countries.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to load shipping countries.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadShippingCountriesError(): Error | undefined {\n        return this._shippingCountries.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to load payment methods.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadPaymentMethodsError(): Error | undefined {\n        return this._paymentMethods.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to load a specific payment method.\n     *\n     * @param methodId - The identifier of the payment method to load.\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadPaymentMethodError(methodId?: string): Error | undefined {\n        return this._paymentMethods.getLoadMethodError(methodId);\n    }\n\n    /**\n     * Returns an error if unable to initialize a specific payment method.\n     *\n     * @param methodId - The identifier of the payment method to initialize.\n     * @returns The error object if unable to initialize, otherwise undefined.\n     */\n    getInitializePaymentError(methodId?: string): Error | undefined {\n        return this._paymentStrategies.getInitializeError(methodId);\n    }\n\n    /**\n     * Returns an error if unable to sign in.\n     *\n     * @returns The error object if unable to sign in, otherwise undefined.\n     */\n    getSignInError(): Error | undefined {\n        return this._customerStrategies.getSignInError();\n    }\n\n    /**\n     * Returns an error if unable to sign out.\n     *\n     * @returns The error object if unable to sign out, otherwise undefined.\n     */\n    getSignOutError(): Error | undefined {\n        return this._customerStrategies.getSignOutError();\n    }\n\n    /**\n     * Returns an error if unable to initialize the customer step of a checkout\n     * process.\n     *\n     * @param methodId - The identifer of the initialization method to execute.\n     * @returns The error object if unable to initialize, otherwise undefined.\n     */\n    getInitializeCustomerError(methodId?: string): Error | undefined {\n        return this._customerStrategies.getInitializeError(methodId);\n    }\n\n    /**\n     * Returns an error if unable to load shipping options.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadShippingOptionsError(): Error | undefined {\n        return this._consignments.getLoadShippingOptionsError();\n    }\n\n    /**\n     * Returns an error if unable to select a shipping option.\n     *\n     * A consignment ID should be provided when checking for an error for a\n     * specific consignment, otherwise it will check for all available consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns The error object if unable to select, otherwise undefined.\n     */\n    getSelectShippingOptionError(consignmentId?: string): Error | undefined {\n        return this._shippingStrategies.getSelectOptionError() ||\n            this._consignments.getUpdateShippingOptionError(consignmentId);\n    }\n\n    /**\n     * Returns an error if unable to continue as guest.\n     *\n     * @returns The error object if unable to continue, otherwise undefined.\n     */\n    getContinueAsGuestError(): Error | undefined {\n        return this._billingAddress.getContinueAsGuestError();\n    }\n\n    /**\n     * Returns an error if unable to update billing address.\n     *\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateBillingAddressError(): Error | undefined {\n        return this._billingAddress.getUpdateError();\n    }\n\n    /**\n     * Returns an error if unable to update shipping address.\n     *\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateShippingAddressError(): Error | undefined {\n        return this._shippingStrategies.getUpdateAddressError();\n    }\n\n    /**\n     * Returns an error if unable to delete a consignment.\n     *\n     * A consignment ID should be provided when checking for an error for a\n     * specific consignment, otherwise it will check for all available consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns The error object if unable to delete, otherwise undefined.\n     */\n    getDeleteConsignmentError(consignmentId?: string): Error | undefined {\n        return this._consignments.getDeleteError(consignmentId);\n    }\n\n    /**\n     * Returns an error if unable to update a consignment.\n     *\n     * A consignment ID should be provided when checking for an error for a\n     * specific consignment, otherwise it will check for all available consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateConsignmentError(consignmentId?: string): Error | undefined {\n        return this._consignments.getUpdateError(consignmentId);\n    }\n\n    /**\n     * Returns an error if unable to create consignments.\n     *\n     * @returns The error object if unable to create, otherwise undefined.\n     */\n    getCreateConsignmentsError(): Error | undefined {\n        return this._consignments.getCreateError();\n    }\n\n    /**\n     * Returns an error if unable to initialize the shipping step of a checkout\n     * process.\n     *\n     * @param methodId - The identifer of the initialization method to execute.\n     * @returns The error object if unable to initialize, otherwise undefined.\n     */\n    getInitializeShippingError(methodId?: string): Error | undefined {\n        return this._shippingStrategies.getInitializeError(methodId);\n    }\n\n    /**\n     * Returns an error if unable to apply a coupon code.\n     *\n     * @returns The error object if unable to apply, otherwise undefined.\n     */\n    getApplyCouponError(): RequestError | undefined {\n        return this._coupons.getApplyError();\n    }\n\n    /**\n     * Returns an error if unable to remove a coupon code.\n     *\n     * @returns The error object if unable to remove, otherwise undefined.\n     */\n    getRemoveCouponError(): RequestError | undefined {\n        return this._coupons.getRemoveError();\n    }\n\n    /**\n     * Returns an error if unable to apply a gift certificate.\n     *\n     * @returns The error object if unable to apply, otherwise undefined.\n     */\n    getApplyGiftCertificateError(): RequestError | undefined {\n        return this._giftCertificates.getApplyError();\n    }\n\n    /**\n     * Returns an error if unable to remove a gift certificate.\n     *\n     * @returns The error object if unable to remove, otherwise undefined.\n     */\n    getRemoveGiftCertificateError(): RequestError | undefined {\n        return this._giftCertificates.getRemoveError();\n    }\n\n    /**\n     * Returns an error if unable to load payment instruments.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadInstrumentsError(): Error | undefined {\n        return this._instruments.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to delete a payment instrument.\n     *\n     * @param instrumentId - The identifier of the payment instrument to delete.\n     * @returns The error object if unable to delete, otherwise undefined.\n     */\n    getDeleteInstrumentError(instrumentId?: string): Error | undefined {\n        return this._instruments.getDeleteError(instrumentId);\n    }\n\n    /**\n     * Returns an error if unable to load the checkout configuration of a store.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadConfigError(): Error | undefined {\n        return this._config.getLoadError();\n    }\n}\n","import { BillingAddressSelector } from '../billing';\nimport { CartSelector } from '../cart';\nimport { selector } from '../common/selector';\nimport { ConfigSelector } from '../config';\nimport { CouponSelector, GiftCertificateSelector } from '../coupon';\nimport { CustomerStrategySelector } from '../customer';\nimport { CountrySelector } from '../geography';\nimport { OrderSelector } from '../order';\nimport { PaymentMethodSelector, PaymentStrategySelector } from '../payment';\nimport { InstrumentSelector } from '../payment/instrument';\nimport { ConsignmentSelector, ShippingCountrySelector, ShippingStrategySelector } from '../shipping';\n\nimport CheckoutSelector from './checkout-selector';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for checking the statuses of various asynchronous actions related\n * to checkout.\n *\n * This object has a set of getters that return true if an action is in\n * progress. For example, you can check whether a customer is submitting an\n * order and waiting for the request to complete.\n */\n@selector\nexport default class CheckoutStoreStatusSelector {\n    private _billingAddress: BillingAddressSelector;\n    private _cart: CartSelector;\n    private _checkout: CheckoutSelector;\n    private _config: ConfigSelector;\n    private _consignments: ConsignmentSelector;\n    private _countries: CountrySelector;\n    private _coupons: CouponSelector;\n    private _customerStrategies: CustomerStrategySelector;\n    private _giftCertificates: GiftCertificateSelector;\n    private _instruments: InstrumentSelector;\n    private _order: OrderSelector;\n    private _paymentMethods: PaymentMethodSelector;\n    private _paymentStrategies: PaymentStrategySelector;\n    private _shippingCountries: ShippingCountrySelector;\n    private _shippingStrategies: ShippingStrategySelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._billingAddress = selectors.billingAddress;\n        this._cart = selectors.cart;\n        this._checkout = selectors.checkout;\n        this._config = selectors.config;\n        this._consignments = selectors.consignments;\n        this._countries = selectors.countries;\n        this._coupons = selectors.coupons;\n        this._customerStrategies = selectors.customerStrategies;\n        this._giftCertificates = selectors.giftCertificates;\n        this._instruments = selectors.instruments;\n        this._order = selectors.order;\n        this._paymentMethods = selectors.paymentMethods;\n        this._paymentStrategies = selectors.paymentStrategies;\n        this._shippingCountries = selectors.shippingCountries;\n        this._shippingStrategies = selectors.shippingStrategies;\n    }\n\n    /**\n     * Checks whether any checkout action is pending.\n     *\n     * @returns True if there is a pending action, otherwise false.\n     */\n    isPending(): boolean {\n        // tslint:disable-next-line:cyclomatic-complexity\n        return this.isLoadingCheckout() ||\n            this.isSubmittingOrder() ||\n            this.isFinalizingOrder() ||\n            this.isLoadingOrder() ||\n            this.isLoadingCart() ||\n            this.isLoadingBillingCountries() ||\n            this.isLoadingShippingCountries() ||\n            this.isLoadingPaymentMethods() ||\n            this.isLoadingPaymentMethod() ||\n            this.isInitializingPayment() ||\n            this.isLoadingShippingOptions() ||\n            this.isSelectingShippingOption() ||\n            this.isSigningIn() ||\n            this.isSigningOut() ||\n            this.isInitializingCustomer() ||\n            this.isUpdatingBillingAddress() ||\n            this.isContinuingAsGuest() ||\n            this.isUpdatingShippingAddress() ||\n            this.isUpdatingConsignment() ||\n            this.isCreatingConsignments() ||\n            this.isDeletingConsignment() ||\n            this.isInitializingShipping() ||\n            this.isApplyingCoupon() ||\n            this.isRemovingCoupon() ||\n            this.isApplyingGiftCertificate() ||\n            this.isRemovingGiftCertificate() ||\n            this.isLoadingInstruments() ||\n            this.isDeletingInstrument() ||\n            this.isLoadingConfig() ||\n            this.isCustomerStepPending() ||\n            this.isPaymentStepPending();\n    }\n\n    /**\n     * Checks whether the current checkout is loading.\n     *\n     * @returns True if the current checkout is loading, otherwise false.\n     */\n    isLoadingCheckout(): boolean {\n        return this._checkout.isLoading();\n    }\n\n    /**\n     * Checks whether the current checkout is being updated.\n     *\n     * @returns True if the current checkout is being updated, otherwise false.\n     */\n    isUpdatingCheckout(): boolean {\n        return this._checkout.isUpdating();\n    }\n\n    /**\n     * Checks whether the current order is submitting.\n     *\n     * @returns True if the current order is submitting, otherwise false.\n     */\n    isSubmittingOrder(): boolean {\n        return this._paymentStrategies.isExecuting();\n    }\n\n    /**\n     * Checks whether the current order is finalizing.\n     *\n     * @returns True if the current order is finalizing, otherwise false.\n     */\n    isFinalizingOrder(): boolean {\n        return this._paymentStrategies.isFinalizing();\n    }\n\n    /**\n     * Checks whether the current order is loading.\n     *\n     * @returns True if the current order is loading, otherwise false.\n     */\n    isLoadingOrder(): boolean {\n        return this._order.isLoading();\n    }\n\n    /**\n     * Checks whether the current cart is loading.\n     *\n     * @returns True if the current cart is loading, otherwise false.\n     */\n    isLoadingCart(): boolean {\n        return this._cart.isLoading();\n    }\n\n    /**\n     * Checks whether billing countries are loading.\n     *\n     * @returns True if billing countries are loading, otherwise false.\n     */\n    isLoadingBillingCountries(): boolean {\n        return this._countries.isLoading();\n    }\n\n    /**\n     * Checks whether shipping countries are loading.\n     *\n     * @returns True if shipping countries are loading, otherwise false.\n     */\n    isLoadingShippingCountries(): boolean {\n        return this._shippingCountries.isLoading();\n    }\n\n    /**\n     * Checks whether payment methods are loading.\n     *\n     * @returns True if payment methods are loading, otherwise false.\n     */\n    isLoadingPaymentMethods(): boolean {\n        return this._paymentMethods.isLoading();\n    }\n\n    /**\n     * Checks whether a specific or any payment method is loading.\n     *\n     * The method returns true if no ID is provided and at least one payment\n     * method is loading.\n     *\n     * @param methodId - The identifier of the payment method to check.\n     * @returns True if the payment method is loading, otherwise false.\n     */\n    isLoadingPaymentMethod(methodId?: string): boolean {\n        return this._paymentMethods.isLoadingMethod(methodId);\n    }\n\n    /**\n     * Checks whether a specific or any payment method is initializing.\n     *\n     * The method returns true if no ID is provided and at least one payment\n     * method is initializing.\n     *\n     * @param methodId - The identifier of the payment method to check.\n     * @returns True if the payment method is initializing, otherwise false.\n     */\n    isInitializingPayment(methodId?: string): boolean {\n        return this._paymentStrategies.isInitializing(methodId);\n    }\n\n    /**\n     * Checks whether the current customer is signing in.\n     *\n     * If an ID is provided, the method also checks whether the customer is\n     * signing in using a specific customer method with the same ID.\n     *\n     * @param methodId - The identifier of the method used for signing in the\n     * current customer.\n     * @returns True if the customer is signing in, otherwise false.\n     */\n    isSigningIn(methodId?: string): boolean {\n        return this._customerStrategies.isSigningIn(methodId);\n    }\n\n    /**\n     * Checks whether the current customer is signing out.\n     *\n     * If an ID is provided, the method also checks whether the customer is\n     * signing out using a specific customer method with the same ID.\n     *\n     * @param methodId - The identifier of the method used for signing out the\n     * current customer.\n     * @returns True if the customer is signing out, otherwise false.\n     */\n    isSigningOut(methodId?: string): boolean {\n        return this._customerStrategies.isSigningOut(methodId);\n    }\n\n    /**\n     * Checks whether the customer step is initializing.\n     *\n     * If an ID is provided, the method also checks whether the customer step is\n     * initializing using a specific customer method with the same ID.\n     *\n     * @param methodId - The identifier of the method used for initializing the\n     * customer step of checkout.\n     * @returns True if the customer step is initializing, otherwise false.\n     */\n    isInitializingCustomer(methodId?: string): boolean {\n        return this._customerStrategies.isInitializing(methodId);\n    }\n\n    /**\n     * Checks whether shipping options are loading.\n     *\n     * @returns True if shipping options are loading, otherwise false.\n     */\n    isLoadingShippingOptions(): boolean {\n        return this._consignments.isLoadingShippingOptions();\n    }\n\n    /**\n     * Checks whether a shipping option is being selected.\n     *\n     * A consignment ID should be provided when checking if a shipping option\n     * is being selected for a specific consignment, otherwise it will check\n     * for all consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns True if selecting a shipping option, otherwise false.\n     */\n    isSelectingShippingOption(consignmentId?: string): boolean {\n        return this._shippingStrategies.isSelectingOption() ||\n            this._consignments.isUpdatingShippingOption(consignmentId);\n    }\n\n    /**\n     * Checks whether the billing address is being updated.\n     *\n     * @returns True if updating their billing address, otherwise false.\n     */\n    isUpdatingBillingAddress(): boolean {\n        return this._billingAddress.isUpdating();\n    }\n\n    /**\n     * Checks whether the shopper is continuing out as a guest.\n     *\n     * @returns True if continuing as guest, otherwise false.\n     */\n    isContinuingAsGuest(): boolean {\n        return this._billingAddress.isContinuingAsGuest();\n    }\n\n    /**\n     * Checks the shipping address is being updated.\n     *\n     * @returns True if updating their shipping address, otherwise false.\n     */\n    isUpdatingShippingAddress(): boolean {\n        return this._shippingStrategies.isUpdatingAddress();\n    }\n\n    /**\n     * Checks whether a given/any consignment is being updated.\n     *\n     * A consignment ID should be provided when checking for a specific consignment,\n     * otherwise it will check for any consignment.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns True if updating consignment(s), otherwise false.\n     */\n    isUpdatingConsignment(consignmentId?: string): boolean {\n        return this._consignments.isUpdating(consignmentId);\n    }\n\n    /**\n     * Checks whether a given/any consignment is being deleted.\n     *\n     * A consignment ID should be provided when checking for a specific consignment,\n     * otherwise it will check for any consignment.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns True if deleting consignment(s), otherwise false.\n     */\n    isDeletingConsignment(consignmentId?: string): boolean {\n        return this._consignments.isDeleting(consignmentId);\n    }\n\n    /**\n     * Checks whether a given/any consignment is being updated.\n     *\n     * A consignment ID should be provided when checking for a specific consignment,\n     * otherwise it will check for any consignment.\n     *\n     * @returns True if creating consignments, otherwise false.\n     */\n    isCreatingConsignments(): boolean {\n        return this._consignments.isCreating();\n    }\n\n    /**\n     * Checks whether the shipping step of a checkout process is initializing.\n     *\n     * If an identifier is provided, the method also checks whether the shipping\n     * step is initializing using a specific shipping method with the same\n     * identifier.\n     *\n     * @param methodId - The identifer of the initialization method to check.\n     * @returns True if the shipping step is initializing, otherwise false.\n     */\n    isInitializingShipping(methodId?: string) {\n        return this._shippingStrategies.isInitializing(methodId);\n    }\n\n    /**\n     * Checks whether the current customer is applying a coupon code.\n     *\n     * @returns True if applying a coupon code, otherwise false.\n     */\n    isApplyingCoupon(): boolean {\n        return this._coupons.isApplying();\n    }\n\n    /**\n     * Checks whether the current customer is removing a coupon code.\n     *\n     * @returns True if removing a coupon code, otherwise false.\n     */\n    isRemovingCoupon(): boolean {\n        return this._coupons.isRemoving();\n    }\n\n    /**\n     * Checks whether the current customer is applying a gift certificate.\n     *\n     * @returns True if applying a gift certificate, otherwise false.\n     */\n    isApplyingGiftCertificate(): boolean {\n        return this._giftCertificates.isApplying();\n    }\n\n    /**\n     * Checks whether the current customer is removing a gift certificate.\n     *\n     * @returns True if removing a gift certificate, otherwise false.\n     */\n    isRemovingGiftCertificate(): boolean {\n        return this._giftCertificates.isRemoving();\n    }\n\n    /**\n     * Checks whether the current customer's payment instruments are loading.\n     *\n     * @returns True if payment instruments are loading, otherwise false.\n     */\n    isLoadingInstruments(): boolean {\n        return this._instruments.isLoading();\n    }\n\n    /**\n     * Checks whether the current customer is deleting a payment instrument.\n     *\n     * @returns True if deleting a payment instrument, otherwise false.\n     */\n    isDeletingInstrument(instrumentId?: string): boolean {\n        return this._instruments.isDeleting(instrumentId);\n    }\n\n    /**\n     * Checks whether the checkout configuration of a store is loading.\n     *\n     * @returns True if the configuration is loading, otherwise false.\n     */\n    isLoadingConfig(): boolean {\n        return this._config.isLoading();\n    }\n\n    /**\n     * Checks whether the customer step of a checkout is in a pending state.\n     *\n     * The customer step is considered to be pending if it is in the process of\n     * initializing, signing in, signing out, and/or interacting with a customer\n     * widget.\n     *\n     * @returns True if the customer step is pending, otherwise false.\n     */\n    isCustomerStepPending(): boolean {\n        return this._customerStrategies.isInitializing() ||\n            this._customerStrategies.isSigningIn() ||\n            this._customerStrategies.isSigningOut() ||\n            this._customerStrategies.isWidgetInteracting();\n    }\n\n    /**\n     * Checks whether the payment step of a checkout is in a pending state.\n     *\n     * The payment step is considered to be pending if it is in the process of\n     * initializing, submitting an order, finalizing an order, and/or\n     * interacting with a payment widget.\n     *\n     * @returns True if the payment step is pending, otherwise false.\n     */\n    isPaymentStepPending(): boolean {\n        return this._paymentStrategies.isInitializing() ||\n            this._paymentStrategies.isExecuting() ||\n            this._paymentStrategies.isFinalizing() ||\n            this._paymentStrategies.isWidgetInteracting();\n    }\n}\n","import {\n    CheckoutSelectors,\n    CheckoutStoreErrorSelector,\n    CheckoutStoreSelector,\n    CheckoutStoreStatusSelector,\n    InternalCheckoutSelectors,\n} from '../checkout';\n\nexport default function createCheckoutSelectors(selectors: InternalCheckoutSelectors): CheckoutSelectors {\n    const data = new CheckoutStoreSelector(selectors);\n    const errors = new CheckoutStoreErrorSelector(selectors);\n    const statuses = new CheckoutStoreStatusSelector(selectors);\n\n    return {\n        data,\n        errors,\n        statuses,\n    };\n}\n","import { toSingleLine } from '../utility';\n\nexport default class ErrorMessageTransformer<TError extends Error = Error> {\n    constructor(\n        private _messageCustomizer: (type: TError) => string\n    ) {}\n\n    transform(error: TError): TError {\n        error.message = toSingleLine(this._messageCustomizer(error));\n\n        return error;\n    }\n}\n","export default function toSingleLine(input?: string) {\n    if (!input) {\n        return '';\n    }\n\n    return input.split(/(?:\\r\\n|\\n|\\r)/)\n        .map(line => line.replace(/^\\s+/gm, ''))\n        .join(' ')\n        .trim();\n}\n","import { Action, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs';\n\nimport { AddressRequestBody } from '../address';\nimport { BillingAddressActionCreator, BillingAddressRequestBody } from '../billing';\nimport { DataStoreProjection } from '../common/data-store';\nimport { ErrorActionCreator, ErrorMessageTransformer } from '../common/error';\nimport { RequestOptions } from '../common/http-request';\nimport { bindDecorator as bind } from '../common/utility';\nimport { ConfigActionCreator } from '../config';\nimport { CouponActionCreator, GiftCertificateActionCreator } from '../coupon';\nimport { CustomerCredentials, CustomerInitializeOptions, CustomerRequestOptions, CustomerStrategyActionCreator, GuestCredentials } from '../customer';\nimport { CountryActionCreator } from '../geography';\nimport { OrderActionCreator, OrderRequestBody } from '../order';\nimport { SpamProtectionActionCreator, SpamProtectionOptions } from '../order/spam-protection';\nimport { PaymentInitializeOptions, PaymentMethodActionCreator, PaymentRequestOptions, PaymentStrategyActionCreator } from '../payment';\nimport { InstrumentActionCreator } from '../payment/instrument';\nimport { ConsignmentsRequestBody, ConsignmentActionCreator, ShippingCountryActionCreator, ShippingInitializeOptions, ShippingRequestOptions, ShippingStrategyActionCreator } from '../shipping';\nimport { ConsignmentAssignmentRequestBody, ConsignmentUpdateRequestBody } from '../shipping/consignment';\n\nimport { CheckoutRequestBody } from './checkout';\nimport CheckoutActionCreator from './checkout-action-creator';\nimport CheckoutParams from './checkout-params';\nimport CheckoutSelectors from './checkout-selectors';\nimport CheckoutStore from './checkout-store';\nimport createCheckoutSelectors from './create-checkout-selectors';\nimport createCheckoutServiceErrorTransformer from './create-checkout-service-error-transformer';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for completing the checkout process for the current customer.\n *\n * This object can be used to collect all information that is required for\n * checkout, such as shipping and billing information. It can also be used to\n * retrieve the current checkout state and subscribe to its changes.\n */\n@bind\nexport default class CheckoutService {\n    private _storeProjection: DataStoreProjection<InternalCheckoutSelectors, CheckoutSelectors>;\n    private _errorTransformer: ErrorMessageTransformer;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _store: CheckoutStore,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _configActionCreator: ConfigActionCreator,\n        private _consignmentActionCreator: ConsignmentActionCreator,\n        private _countryActionCreator: CountryActionCreator,\n        private _couponActionCreator: CouponActionCreator,\n        private _customerStrategyActionCreator: CustomerStrategyActionCreator,\n        private _errorActionCreator: ErrorActionCreator,\n        private _giftCertificateActionCreator: GiftCertificateActionCreator,\n        private _instrumentActionCreator: InstrumentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _shippingCountryActionCreator: ShippingCountryActionCreator,\n        private _shippingStrategyActionCreator: ShippingStrategyActionCreator,\n        private _spamProtectionActionCreator: SpamProtectionActionCreator\n    ) {\n        this._errorTransformer = createCheckoutServiceErrorTransformer();\n        this._storeProjection = new DataStoreProjection(this._store, createCheckoutSelectors);\n    }\n\n    /**\n     * Returns a snapshot of the current checkout state.\n     *\n     * The method returns a new instance every time there is a change in the\n     * checkout state. You can query the state by calling any of its getter\n     * methods.\n     *\n     * ```js\n     * const state = service.getState();\n     *\n     * console.log(state.data.getOrder());\n     * console.log(state.errors.getSubmitOrderError());\n     * console.log(state.statuses.isSubmittingOrder());\n     * ```\n     *\n     * @returns The current customer's checkout state\n     */\n    getState(): CheckoutSelectors {\n        return this._storeProjection.getState();\n    }\n\n    /**\n     * Notifies all subscribers with the current state.\n     *\n     * When this method gets called, the subscribers get called regardless if\n     * they have any filters applied.\n     */\n    notifyState(): void {\n        this._store.notifyState();\n    }\n\n    /**\n     * Subscribes to any changes to the current state.\n     *\n     * The method registers a callback function and executes it every time there\n     * is a change in the checkout state.\n     *\n     * ```js\n     * service.subscribe(state => {\n     *     console.log(state.data.getCart());\n     * });\n     * ```\n     *\n     * The method can be configured to notify subscribers only regarding\n     * relevant changes, by providing a filter function.\n     *\n     * ```js\n     * const filter = state => state.data.getCart();\n     *\n     * // Only trigger the subscriber when the cart changes.\n     * service.subscribe(state => {\n     *     console.log(state.data.getCart())\n     * }, filter);\n     * ```\n     *\n     * @param subscriber - The function to subscribe to state changes.\n     * @param filters - One or more functions to filter out irrelevant state\n     * changes. If more than one function is provided, the subscriber will only\n     * be triggered if all conditions are met.\n     * @returns A function, if called, will unsubscribe the subscriber.\n     */\n    subscribe(\n        subscriber: (state: CheckoutSelectors) => void,\n        ...filters: Array<(state: CheckoutSelectors) => any>\n    ): () => void {\n        return this._storeProjection.subscribe(\n            () => subscriber(this.getState()),\n            ...filters.map(filter => (state: CheckoutSelectors) => filter(state))\n        );\n    }\n\n    /**\n     * Loads the current checkout.\n     *\n     * This method can only be called if there is an active checkout. Also, it\n     * can only retrieve data that belongs to the current customer. When it is\n     * successfully executed, you can retrieve the data by calling\n     * `CheckoutStoreSelector#getCheckout`.\n     *\n     * ```js\n     * const state = await service.loadCheckout('0cfd6c06-57c3-4e29-8d7a-de55cc8a9052');\n     *\n     * console.log(state.data.getCheckout());\n     * ```\n     *\n     * @param id - The identifier of the checkout to load, or the default checkout if not provided.\n     * @param options - Options for loading the current checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    loadCheckout(id?: string, options?: RequestOptions<CheckoutParams>): Promise<CheckoutSelectors> {\n        return this._dispatch(id ?\n            this._checkoutActionCreator.loadCheckout(id, options) :\n            this._checkoutActionCreator.loadDefaultCheckout(options)\n        );\n    }\n\n    /**\n     * Updates specific properties of the current checkout.\n     *\n     * ```js\n     * const state = await service.updateCheckout(checkout);\n     *\n     * console.log(state.data.getCheckout());\n     * ```\n     *\n     * @param payload - The checkout properties to be updated.\n     * @param options - Options for loading the current checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    updateCheckout(payload: CheckoutRequestBody, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._checkoutActionCreator.updateCheckout(payload, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Loads an order by an id.\n     *\n     * The method can only retrieve an order if the order belongs to the current\n     * customer. If it is successfully executed, the data can be retrieved by\n     * calling `CheckoutStoreSelector#getOrder`.\n     *\n     * ```js\n     * const state = await service.loadOrder(123);\n     *\n     * console.log(state.data.getOrder());\n     * ```\n     *\n     * @param orderId - The identifier of the order to load.\n     * @param options - Options for loading the order.\n     * @returns A promise that resolves to the current state.\n     */\n    loadOrder(orderId: number, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const loadCheckoutAction = this._orderActionCreator.loadOrder(orderId, options);\n        const loadConfigAction = this._configActionCreator.loadConfig(options);\n\n        return Promise.all([\n            this._dispatch(loadCheckoutAction),\n            this._dispatch(loadConfigAction, { queueId: 'config' }),\n        ])\n            .then(() => this.getState());\n    }\n\n    /**\n     * Submits an order, thereby completing a checkout process.\n     *\n     * Before you can submit an order, you must initialize the payment method\n     * chosen by the customer by calling `CheckoutService#initializePayment`.\n     *\n     * ```js\n     * await service.initializePayment({ methodId: 'braintree' });\n     * await service.submitOrder({\n     *     payment: {\n     *         methodId: 'braintree',\n     *         paymentData: {\n     *             ccExpiry: { month: 10, year: 20 },\n     *             ccName: 'BigCommerce',\n     *             ccNumber: '4111111111111111',\n     *             ccCvv: 123,\n     *         },\n     *     },\n     * });\n     * ```\n     *\n     * You are not required to include `paymentData` if the order does not\n     * require additional payment details. For example, the customer has already\n     * entered their payment details on the cart page using one of the hosted\n     * payment methods, such as PayPal. Or the customer has applied a gift\n     * certificate that exceeds the grand total amount.\n     *\n     * If the order is submitted successfully, you can retrieve the newly\n     * created order by calling `CheckoutStoreSelector#getOrder`.\n     *\n     * ```js\n     * const state = await service.submitOrder(payload);\n     *\n     * console.log(state.data.getOrder());\n     * ```\n     *\n     * @param payload - The request payload to submit for the current order.\n     * @param options - Options for submitting the current order.\n     * @returns A promise that resolves to the current state.\n     */\n    submitOrder(payload: OrderRequestBody, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.execute(payload, options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * Finalizes the submission process for an order.\n     *\n     * This method is only required for certain hosted payment methods that\n     * require a customer to enter their credit card details on their website.\n     * You need to call this method once the customer has redirected back to\n     * checkout in order to complete the checkout process.\n     *\n     * If the method is called before order finalization is required or for a\n     * payment method that does not require order finalization, an error will be\n     * thrown. Conversely, if the method is called successfully, you should\n     * immediately redirect the customer to the order confirmation page.\n     *\n     * ```js\n     * try {\n     *     await service.finalizeOrderIfNeeded();\n     *\n     *     window.location.assign('/order-confirmation');\n     * } catch (error) {\n     *     if (error.type !== 'order_finalization_not_required') {\n     *         throw error;\n     *     }\n     * }\n     * ```\n     *\n     * @param options - Options for finalizing the current order.\n     * @returns A promise that resolves to the current state.\n     * @throws `OrderFinalizationNotRequiredError` error if order finalization\n     * is not required for the current order at the time of execution.\n     */\n    finalizeOrderIfNeeded(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.finalize(options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * Loads a list of payment methods available for checkout.\n     *\n     * If a customer enters their payment details before navigating to the\n     * checkout page (i.e.: using PayPal checkout button on the cart page), only\n     * one payment method will be available for the customer - the selected\n     * payment method. Otherwise, by default, all payment methods configured by\n     * the merchant will be available for the customer.\n     *\n     * Once the method is executed successfully, you can call\n     * `CheckoutStoreSelector#getPaymentMethods` to retrieve the list of payment\n     * methods.\n     *\n     * ```js\n     * const state = service.loadPaymentMethods();\n     *\n     * console.log(state.data.getPaymentMethods());\n     * ```\n     *\n     * @param options - Options for loading the payment methods that are\n     * available to the current customer.\n     * @returns A promise that resolves to the current state.\n     */\n    loadPaymentMethods(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentMethodActionCreator.loadPaymentMethods(options);\n\n        return this._dispatch(action, { queueId: 'paymentMethods' });\n    }\n\n    /**\n     * Loads a payment method by an id.\n     *\n     * This method does not work with multi-option payment providers. Due to its\n     * limitation, it is deprecated and will be removed in the future.\n     *\n     * @deprecated\n     * @internal\n     * @param methodId - The identifier for the payment method to load.\n     * @param options - Options for loading the payment method.\n     * @returns A promise that resolves to the current state.\n     */\n    loadPaymentMethod(methodId: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentMethodActionCreator.loadPaymentMethod(methodId, options);\n\n        return this._dispatch(action, { queueId: 'paymentMethods' });\n    }\n\n    /**\n     * Initializes the payment step of a checkout process.\n     *\n     * Before a payment method can accept payment details, it must first be\n     * initialized. Some payment methods require you to provide additional\n     * initialization options. For example, Amazon requires a container ID in\n     * order to initialize their payment widget.\n     *\n     * ```js\n     * await service.initializePayment({\n     *     methodId: 'amazon',\n     *     amazon: {\n     *         container: 'walletWidget',\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the payment step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    initializePayment(options: PaymentInitializeOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * De-initializes the payment step of a checkout process.\n     *\n     * The method should be called once you no longer require a payment method\n     * to be initialized. It can perform any necessary clean-up behind the\n     * scene, i.e.: remove DOM nodes or event handlers that are attached as a\n     * result of payment initialization.\n     *\n     * ```js\n     * await service.deinitializePayment({\n     *     methodId: 'amazon',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the payment step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializePayment(options: PaymentRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.deinitialize(options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * Loads a list of countries available for billing.\n     *\n     * Once you make a successful request, you will be able to retrieve the list\n     * of countries by calling `CheckoutStoreSelector#getBillingCountries`.\n     *\n     * ```js\n     * const state = await service.loadBillingCountries();\n     *\n     * console.log(state.data.getBillingCountries());\n     * ```\n     *\n     * @param options - Options for loading the available billing countries.\n     * @returns A promise that resolves to the current state.\n     */\n    loadBillingCountries(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._countryActionCreator.loadCountries(options);\n\n        return this._dispatch(action, { queueId: 'billingCountries' });\n    }\n\n    /**\n     * Loads a list of countries available for shipping.\n     *\n     * The list is determined based on the shipping zones configured by a\n     * merchant. Once you make a successful call, you will be able to retrieve\n     * the list of available shipping countries by calling\n     * `CheckoutStoreSelector#getShippingCountries`.\n     *\n     * ```js\n     * const state = await service.loadShippingCountries();\n     *\n     * console.log(state.data.getShippingCountries());\n     * ```\n     *\n     * @param options - Options for loading the available shipping countries.\n     * @returns A promise that resolves to the current state.\n     */\n    loadShippingCountries(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingCountryActionCreator.loadCountries(options);\n\n        return this._dispatch(action, { queueId: 'shippingCountries' });\n    }\n\n    /**\n     * Loads a set of form fields that should be presented to customers in order\n     * to capture their billing address.\n     *\n     * Once the method has been executed successfully, you can call\n     * `CheckoutStoreSelector#getBillingAddressFields` to retrieve the set of\n     * form fields.\n     *\n     * ```js\n     * const state = service.loadBillingAddressFields();\n     *\n     * console.log(state.data.getBillingAddressFields('US'));\n     * ```\n     *\n     * @param options - Options for loading the billing address form fields.\n     * @returns A promise that resolves to the current state.\n     */\n    loadBillingAddressFields(options?: RequestOptions): Promise<CheckoutSelectors> {\n        return this.loadBillingCountries(options);\n    }\n\n    /**\n     * Loads a set of form fields that should be presented to customers in order\n     * to capture their shipping address.\n     *\n     * Once the method has been executed successfully, you can call\n     * `CheckoutStoreSelector#getShippingAddressFields` to retrieve the set of\n     * form fields.\n     *\n     * ```js\n     * const state = service.loadShippingAddressFields();\n     *\n     * console.log(state.data.getShippingAddressFields('US'));\n     * ```\n     *\n     * @param options - Options for loading the shipping address form fields.\n     * @returns A promise that resolves to the current state.\n     */\n    loadShippingAddressFields(options?: RequestOptions): Promise<CheckoutSelectors> {\n        return this.loadShippingCountries(options);\n    }\n\n    /**\n     * Initializes the sign-in step of a checkout process.\n     *\n     * Some payment methods, such as Amazon, have their own sign-in flow. In\n     * order to support them, this method must be called.\n     *\n     * ```js\n     * await service.initializeCustomer({\n     *     methodId: 'amazon',\n     *     amazon: {\n     *         container: 'signInButton',\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the customer step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeCustomer(options?: CustomerInitializeOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * De-initializes the sign-in step of a checkout process.\n     *\n     * It should be called once you no longer want to prompt customers to sign\n     * in. It can perform any necessary clean-up behind the scene, i.e.: remove\n     * DOM nodes or event handlers that are attached as a result of customer\n     * initialization.\n     *\n     * ```js\n     * await service.deinitializeCustomer({\n     *     methodId: 'amazon',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the customer step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeCustomer(options?: CustomerRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.deinitialize(options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * Continues to check out as a guest.\n     *\n     * The customer is required to provide their email address in order to\n     * continue. Once they provide their email address, it will be stored as a\n     * part of their billing address.\n     *\n     * @param credentials - The guest credentials to use.\n     * @param options - Options for continuing as a guest.\n     * @returns A promise that resolves to the current state.\n     */\n    continueAsGuest(credentials: GuestCredentials, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._billingAddressActionCreator.continueAsGuest(credentials, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Signs into a customer's registered account.\n     *\n     * Once the customer is signed in successfully, the checkout state will be\n     * populated with information associated with the customer, such as their\n     * saved addresses. You can call `CheckoutStoreSelector#getCustomer` to\n     * retrieve the data.\n     *\n     * ```js\n     * const state = await service.signInCustomer({\n     *     email: 'foo@bar.com',\n     *     password: 'password123',\n     * });\n     *\n     * console.log(state.data.getCustomer());\n     * ```\n     *\n     * @param credentials - The credentials to be used for signing in the customer.\n     * @param options - Options for signing in the customer.\n     * @returns A promise that resolves to the current state.\n     */\n    signInCustomer(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.signIn(credentials, options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * Signs out the current customer if they are previously signed in.\n     *\n     * Once the customer is successfully signed out, the checkout state will be\n     * reset automatically.\n     *\n     * ```js\n     * const state = await service.signOutCustomer();\n     *\n     * // The returned object should not contain information about the previously signed-in customer.\n     * console.log(state.data.getCustomer());\n     * ```\n     *\n     * @param options - Options for signing out the customer.\n     * @returns A promise that resolves to the current state.\n     */\n    signOutCustomer(options?: CustomerRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.signOut(options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * Loads a list of shipping options available for checkout.\n     *\n     * Available shipping options can only be determined once a customer\n     * provides their shipping address. If the method is executed successfully,\n     * `CheckoutStoreSelector#getShippingOptions` can be called to retrieve the\n     * list of shipping options.\n     *\n     * ```js\n     * const state = await service.loadShippingOptions();\n     *\n     * console.log(state.data.getShippingOptions());\n     * ```\n     *\n     * @param options - Options for loading the available shipping options.\n     * @returns A promise that resolves to the current state.\n     */\n    loadShippingOptions(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.loadShippingOptions(options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Initializes the shipping step of a checkout process.\n     *\n     * Some payment methods, such as Amazon, can provide shipping information to\n     * be used for checkout. In order to support them, this method must be\n     * called.\n     *\n     * ```js\n     * await service.initializeShipping({\n     *     methodId: 'amazon',\n     *     amazon: {\n     *         container: 'addressBook',\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the shipping step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeShipping(options?: ShippingInitializeOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * De-initializes the shipping step of a checkout process.\n     *\n     * It should be called once you no longer need to collect shipping details.\n     * It can perform any necessary clean-up behind the scene, i.e.: remove DOM\n     * nodes or event handlers that are attached as a result of shipping\n     * initialization.\n     *\n     * ```js\n     * await service.deinitializeShipping({\n     *     methodId: 'amazon',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the shipping step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeShipping(options?: ShippingRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.deinitialize(options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Selects a shipping option for the current address.\n     *\n     * If a shipping option has an additional cost, the quote for the current\n     * order will be adjusted once the option is selected.\n     *\n     * ```js\n     * const state = await service.selectShippingOption('address-id', 'shipping-option-id');\n     *\n     * console.log(state.data.getSelectedShippingOption());\n     * ```\n     *\n     * @param shippingOptionId - The identifier of the shipping option to\n     * select.\n     * @param options - Options for selecting the shipping option.\n     * @returns A promise that resolves to the current state.\n     */\n    selectShippingOption(shippingOptionId: string, options?: ShippingRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.selectOption(shippingOptionId, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Updates the shipping address for the current checkout.\n     *\n     * When a customer updates their shipping address for an order, they will\n     * see an updated list of shipping options and the cost for each option,\n     * unless no options are available. If the update is successful, you can\n     * call `CheckoutStoreSelector#getShippingAddress` to retrieve the address.\n     *\n     * If the shipping address changes and the selected shipping option becomes\n     * unavailable for the updated address, the shipping option will be\n     * deselected.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.updateShippingAddress(address);\n     *\n     * console.log(state.data.getShippingAddress());\n     * ```\n     *\n     * @param address - The address to be used for shipping.\n     * @param options - Options for updating the shipping address.\n     * @returns A promise that resolves to the current state.\n     */\n    updateShippingAddress(address: Partial<AddressRequestBody>, options?: ShippingRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.updateAddress(address, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Creates consignments given a list.\n     *\n     * Note: this is used when items need to be shipped to multiple addresses,\n     * for single shipping address, use `CheckoutService#updateShippingAddress`.\n     *\n     * When consignments are created, an updated list of shipping options will\n     * become available for each consignment, unless no options are available.\n     * If the update is successful, you can call\n     * `CheckoutStoreSelector#getConsignments` to retrieve the updated list of\n     * consignments.'\n     *\n     * Beware that if a consignment includes all line items from another\n     * consignment, that consignment will be deleted as a valid consignment must\n     * include at least one valid line item.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.createConsignments(consignments);\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignments - The list of consignments to be created.\n     * @param options - Options for updating the shipping address.\n     * @returns A promise that resolves to the current state.\n     */\n    createConsignments(\n        consignments: ConsignmentsRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.createConsignments(consignments, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Deletes a consignment\n     *\n     * ```js\n     * const state = await service.deleteConsignment('55c96cda6f04c');\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignmentId - The ID of the consignment to be deleted\n     * @param options - Options for the consignment delete request\n     * @returns A promise that resolves to the current state.\n     */\n    deleteConsignment(\n        consignmentId: string,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.deleteConsignment(consignmentId, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Updates a specific consignment.\n     *\n     * Note: this is used when items need to be shipped to multiple addresses,\n     * for single shipping address, use `CheckoutService#selectShippingOption`.\n     *\n     * When a shipping address for a consignment is updated, an updated list of\n     * shipping options will become available for the consignment, unless no\n     * options are available. If the update is successful, you can call\n     * `CheckoutStoreSelector#getConsignments` to retrieve updated list of\n     * consignments.\n     *\n     * Beware that if the updated consignment includes all line items from another\n     * consignment, that consignment will be deleted as a valid consignment must\n     * include at least one valid line item.\n     *\n     * If the shipping address changes and the selected shipping option becomes\n     * unavailable for the updated address, the shipping option will be\n     * deselected.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.updateConsignment(consignment);\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignment - The consignment data that will be used.\n     * @param options - Options for updating the shipping address.\n     * @returns A promise that resolves to the current state.\n     */\n    updateConsignment(\n        consignment: ConsignmentUpdateRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.updateConsignment(consignment, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Convenience method that assigns items to be shipped to a specific address.\n     *\n     * Note: this method finds an existing consignment that matches the provided address\n     * and assigns the provided items. If no consignment matches the address, a new one\n     * will be created.\n     *\n     * @param consignment - The consignment data that will be used.\n     * @param options - Options for the request\n     * @returns A promise that resolves to the current state.\n     */\n    assignItemsToAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.assignItemsByAddress(consignment, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Convenience method that unassigns items from a specific shipping address.\n     *\n     * Note: this method finds an existing consignment that matches the provided address\n     * and unassigns the specified items. If the consignment ends up with no line items\n     * after the unassignment, it will be deleted.\n     *\n     * @param consignment - The consignment data that will be used.\n     * @param options - Options for the request\n     * @returns A promise that resolves to the current state.\n     */\n    unassignItemsToAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.unassignItemsByAddress(consignment, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Selects a shipping option for a given consignment.\n     *\n     * Note: this is used when items need to be shipped to multiple addresses,\n     * for single shipping address, use `CheckoutService#updateShippingAddres`.\n     *\n     * If a shipping option has an additional cost, the quote for the current\n     * order will be adjusted once the option is selected.\n     *\n     * ```js\n     * const state = await service.selectConsignmentShippingOption(consignmentId, optionId);\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignmentId - The identified of the consignment to be updated.\n     * @param shippingOptionId - The identifier of the shipping option to\n     * select.\n     * @param options - Options for selecting the shipping option.\n     * @returns A promise that resolves to the current state.\n     */\n    selectConsignmentShippingOption(\n        consignmentId: string,\n        shippingOptionId: string,\n        options?: ShippingRequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.updateShippingOption({\n            id: consignmentId,\n            shippingOptionId,\n        }, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Updates the billing address for the current checkout.\n     *\n     * A customer must provide their billing address before they can proceed to\n     * pay for their order.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.updateBillingAddress(address);\n     *\n     * console.log(state.data.getBillingAddress());\n     * ```\n     *\n     * @param address - The address to be used for billing.\n     * @param options - Options for updating the billing address.\n     * @returns A promise that resolves to the current state.\n     */\n    updateBillingAddress(address: Partial<BillingAddressRequestBody>, options: RequestOptions = {}): Promise<CheckoutSelectors> {\n        const action = this._billingAddressActionCreator.updateAddress(address, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Applies a coupon code to the current checkout.\n     *\n     * Once the coupon code gets applied, the quote for the current checkout will\n     * be adjusted accordingly. The same coupon code cannot be applied more than\n     * once.\n     *\n     * ```js\n     * await service.applyCoupon('COUPON');\n     * ```\n     *\n     * @param code - The coupon code to apply to the current checkout.\n     * @param options - Options for applying the coupon code.\n     * @returns A promise that resolves to the current state.\n     */\n    applyCoupon(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._couponActionCreator.applyCoupon(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Removes a coupon code from the current checkout.\n     *\n     * Once the coupon code gets removed, the quote for the current checkout will\n     * be adjusted accordingly.\n     *\n     * ```js\n     * await service.removeCoupon('COUPON');\n     * ```\n     *\n     * @param code - The coupon code to remove from the current checkout.\n     * @param options - Options for removing the coupon code.\n     * @returns A promise that resolves to the current state.\n     */\n    removeCoupon(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._couponActionCreator.removeCoupon(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Applies a gift certificate to the current checkout.\n     *\n     * Once the gift certificate gets applied, the quote for the current\n     * checkout will be adjusted accordingly.\n     *\n     * ```js\n     * await service.applyGiftCertificate('GIFT_CERTIFICATE');\n     * ```\n     *\n     * @param code - The gift certificate to apply to the current checkout.\n     * @param options - Options for applying the gift certificate.\n     * @returns A promise that resolves to the current state.\n     */\n    applyGiftCertificate(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._giftCertificateActionCreator.applyGiftCertificate(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Removes a gift certificate from an order.\n     *\n     * Once the gift certificate gets removed, the quote for the current\n     * checkout will be adjusted accordingly.\n     *\n     * ```js\n     * await service.removeGiftCertificate('GIFT_CERTIFICATE');\n     * ```\n     *\n     * @param code - The gift certificate to remove from the current checkout.\n     * @param options - Options for removing the gift certificate.\n     * @returns A promise that resolves to the current state.\n     */\n    removeGiftCertificate(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._giftCertificateActionCreator.removeGiftCertificate(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Loads a list of payment instruments associated with a customer.\n     *\n     * Once the method has been called successfully, you can retrieve the list\n     * of payment instruments by calling `CheckoutStoreSelector#getInstruments`.\n     * If the customer does not have any payment instruments on record, i.e.:\n     * credit card, you will get an empty list instead.\n     *\n     * ```js\n     * const state = service.loadInstruments();\n     *\n     * console.log(state.data.getInstruments());\n     * ```\n     *\n     * @returns A promise that resolves to the current state.\n     */\n    loadInstruments(): Promise<CheckoutSelectors> {\n        const action = this._instrumentActionCreator.loadInstruments();\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Deletes a payment instrument by an id.\n     *\n     * Once an instrument gets removed, it can no longer be retrieved using\n     * `CheckoutStoreSelector#getInstruments`.\n     *\n     * ```js\n     * const state = service.deleteInstrument('123');\n     *\n     * console.log(state.data.getInstruments());\n     * ```\n     *\n     * @param instrumentId - The identifier of the payment instrument to delete.\n     * @returns A promise that resolves to the current state.\n     */\n    deleteInstrument(instrumentId: string): Promise<CheckoutSelectors> {\n        const action = this._instrumentActionCreator.deleteInstrument(instrumentId);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Clear errors that have been collected from previous calls.\n     *\n     * ```js\n     * const state = await service.clearError(error);\n     *\n     * console.log(state.errors.getError());\n     * ```\n     *\n     * @param error - Specific error object to clear\n     * @returns A promise that resolves to the current state.\n     */\n    clearError(error: Error): Promise<CheckoutSelectors> {\n        const action = this._errorActionCreator.clearError(error);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Initializes the spam protection for order creation.\n     *\n     * With spam protection enabled, the customer has to be verified as\n     * a human. The order creation will fail if spam protection\n     * is enabled but verification fails.\n     *\n     * ```js\n     * await service.initializeSpamProtection({\n     *     containerId: 'spamProtectionContainer',\n     * });\n     * ```\n     *\n     * @param options - Options for initializing spam protection.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeSpamProtection(options: SpamProtectionOptions): Promise<CheckoutSelectors> {\n        const action = this._spamProtectionActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'spamProtection' });\n    }\n\n    /**\n     * Dispatches an action through the data store and returns the current state\n     * once the action is dispatched.\n     *\n     * @param action - The action to dispatch.\n     * @returns A promise that resolves to the current state.\n     */\n    private _dispatch(action: Action | Observable<Action> | ThunkAction<Action>, options?: { queueId?: string }): Promise<CheckoutSelectors> {\n        return this._store.dispatch(action, options)\n            .then(() => this.getState())\n            .catch(error => {\n                throw this._errorTransformer.transform(error);\n            });\n    }\n}\n","import { ErrorMessageTransformer } from '../common/error';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../common/error/errors';\nimport { getEnvironment } from '../common/utility';\n\nexport type CheckoutServiceErrorType = MissingDataError | NotInitializedError;\nexport type CheckoutServiceErrorTransformer = ErrorMessageTransformer<CheckoutServiceErrorType | Error>;\n\nexport default function createCheckoutServiceErrorTransformer(\n    isDevelopment: boolean = getEnvironment() === 'development'\n): CheckoutServiceErrorTransformer {\n    return new ErrorMessageTransformer(error => {\n        if (!isDevelopment || !isCheckoutServiceError(error)) {\n            return error.message;\n        }\n\n        switch (error.subtype || error.type) {\n        case MissingDataErrorType.MissingConsignments:\n            return `\n                ${error.message}\n                The data could be unavailable because no shipping address has been provided.\n                To fix this, create a consignment or update the shipping address before performing\n                the same action again.\n            `;\n\n        case MissingDataErrorType.MissingCart:\n        case MissingDataErrorType.MissingCheckout:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server yet.\n                To fix this issue, you can try calling \\`CheckoutService#loadCheckout\\`\n                before performing the same action again.\n            `;\n\n        case MissingDataErrorType.MissingCheckoutConfig:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server yet.\n                To fix this issue, you need to make sure \\`CheckoutService\\` is initialized\n                properly by calling \\`CheckoutService#loadCheckout\\` before performing any\n                other actions.\n            `;\n\n        case MissingDataErrorType.MissingOrder:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server yet.\n                To fix this issue, you can try calling \\`CheckoutService#loadOrder\\`\n                before performing the same action again.\n            `;\n\n        case MissingDataErrorType.MissingOrderId:\n            return `\n                ${error.message}\n                The data could be unavailable because no order has been created yet. You have\n                to first create the order before you can perform the action.\n            `;\n\n        case MissingDataErrorType.MissingPaymentMethod:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server, or\n                configured by the merchant yet. To fix the former issue, you can try calling\n                \\`CheckoutService#loadPaymentMethods\\` before performing the same action again.\n            `;\n\n        case NotInitializedErrorType.CustomerNotInitialized:\n            return `\n                In order to initialize the customer step of checkout, you need to call\n                \\`CheckoutService#initializeCustomer\\`. Afterwards, you should be able to\n                submit customer details.\n            `;\n\n        case NotInitializedErrorType.PaymentNotInitialized:\n            return `\n                ${error.message}\n                In order to initialize the payment step of checkout, you need to call\n                \\`CheckoutService#initializePayment\\`. Afterwards, you should be able to\n                submit payment details.\n            `;\n\n        case NotInitializedErrorType.ShippingNotInitialized:\n            return `\n                ${error.message}\n                In order to initialize the shipping step of checkout, you need to call\n                \\`CheckoutService#initializeShipping\\`. Afterwards, you should be able to\n                submit shipping details.\n            `;\n\n        default:\n            return error.message;\n        }\n    });\n}\n\nfunction isCheckoutServiceError(error: any): error is CheckoutServiceErrorType {\n    return !!(error.subtype || error.type);\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\nimport { createScriptLoader } from '@bigcommerce/script-loader';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../billing';\nimport { ErrorActionCreator } from '../common/error';\nimport { getDefaultLogger } from '../common/log';\nimport { getEnvironment } from '../common/utility';\nimport { ConfigActionCreator, ConfigRequestSender, ConfigState } from '../config';\nimport { CouponActionCreator, CouponRequestSender, GiftCertificateActionCreator, GiftCertificateRequestSender } from '../coupon';\nimport { createCustomerStrategyRegistry, CustomerStrategyActionCreator } from '../customer';\nimport { CountryActionCreator, CountryRequestSender } from '../geography';\nimport { OrderActionCreator, OrderRequestSender } from '../order';\nimport { createSpamProtection, SpamProtectionActionCreator } from '../order/spam-protection';\nimport { createPaymentClient, createPaymentStrategyRegistry, PaymentMethodActionCreator, PaymentMethodRequestSender, PaymentStrategyActionCreator } from '../payment';\nimport { InstrumentActionCreator, InstrumentRequestSender } from '../payment/instrument';\nimport { createShippingStrategyRegistry, ConsignmentActionCreator, ConsignmentRequestSender, ShippingCountryActionCreator, ShippingCountryRequestSender, ShippingStrategyActionCreator } from '../shipping';\n\nimport CheckoutActionCreator from './checkout-action-creator';\nimport CheckoutRequestSender from './checkout-request-sender';\nimport CheckoutService from './checkout-service';\nimport CheckoutValidator from './checkout-validator';\nimport createCheckoutStore from './create-checkout-store';\n\n/**\n * Creates an instance of `CheckoutService`.\n *\n * @remarks\n * ```js\n * const service = createCheckoutService();\n *\n * service.subscribe(state => {\n *     console.log(state);\n * });\n *\n * service.loadCheckout();\n * ```\n *\n * @param options - A set of construction options.\n * @returns an instance of `CheckoutService`.\n */\nexport default function createCheckoutService(options?: CheckoutServiceOptions): CheckoutService {\n    if (document.location.protocol !== 'https:') {\n        getDefaultLogger().warn('The BigCommerce Checkout SDK should not be used on a non-HTTPS page');\n    }\n\n    if (getEnvironment() !== 'production') {\n        getDefaultLogger().warn('Note that the development build is not optimized. To create a production build, set process.env.NODE_ENV to `production`.');\n    }\n\n    const config: ConfigState = {\n        meta: {\n            externalSource: options && options.externalSource,\n        },\n        errors: {},\n        statuses: {},\n    };\n    const { locale = '', shouldWarnMutation = true } = options || {};\n    const requestSender = createRequestSender({ host: options && options.host });\n    const store = createCheckoutStore({ config }, { shouldWarnMutation });\n    const paymentClient = createPaymentClient(store);\n    const orderRequestSender = new OrderRequestSender(requestSender);\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const configActionCreator = new ConfigActionCreator(new ConfigRequestSender(requestSender));\n    const spamProtection = createSpamProtection(createScriptLoader());\n    const spamProtectionActionCreator = new SpamProtectionActionCreator(spamProtection);\n    const orderActionCreator = new OrderActionCreator(\n        orderRequestSender,\n        new CheckoutValidator(checkoutRequestSender),\n        spamProtectionActionCreator\n    );\n\n    return new CheckoutService(\n        store,\n        new BillingAddressActionCreator(new BillingAddressRequestSender(requestSender)),\n        new CheckoutActionCreator(checkoutRequestSender, configActionCreator),\n        configActionCreator,\n        new ConsignmentActionCreator(new ConsignmentRequestSender(requestSender), checkoutRequestSender),\n        new CountryActionCreator(new CountryRequestSender(requestSender, { locale })),\n        new CouponActionCreator(new CouponRequestSender(requestSender)),\n        new CustomerStrategyActionCreator(createCustomerStrategyRegistry(store, requestSender)),\n        new ErrorActionCreator(),\n        new GiftCertificateActionCreator(new GiftCertificateRequestSender(requestSender)),\n        new InstrumentActionCreator(new InstrumentRequestSender(paymentClient, requestSender)),\n        orderActionCreator,\n        new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender)),\n        new PaymentStrategyActionCreator(\n            createPaymentStrategyRegistry(store, paymentClient, requestSender, spamProtection),\n            orderActionCreator\n        ),\n        new ShippingCountryActionCreator(new ShippingCountryRequestSender(requestSender, { locale })),\n        new ShippingStrategyActionCreator(createShippingStrategyRegistry(store, requestSender)),\n        spamProtectionActionCreator\n    );\n}\n\nexport interface CheckoutServiceOptions {\n    locale?: string;\n    host?: string;\n    shouldWarnMutation?: boolean;\n    externalSource?: string;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { MutationObserverFactory } from '../../common/dom/mutation-observer';\n\nimport GoogleRecaptcha from './google-recaptcha';\nimport GoogleRecaptchaScriptLoader from './google-recaptcha-script-loader';\n\nexport default function createSpamProtection(scriptLoader: ScriptLoader) {\n    return new GoogleRecaptcha(\n        new GoogleRecaptchaScriptLoader(scriptLoader),\n        new MutationObserverFactory()\n    );\n}\n","// tslint:disable-next-line:no-reference\n/// <reference path=\"../payment/bigpay-client.d.ts\" />\nimport { createClient as createBigpayClient } from '@bigcommerce/bigpay-client';\n\nimport { CheckoutStore } from '../checkout';\n\nexport default function createPaymentClient(store: CheckoutStore) {\n    const paymentClient = createBigpayClient();\n\n    store.subscribe(\n        state => {\n            const config = state.config.getStoreConfig();\n\n            if (config) {\n                paymentClient.setHost(config.paymentSettings.bigpayBaseUrl);\n            }\n        },\n        state => state.config.getStoreConfig()\n    );\n\n    return paymentClient;\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { CheckoutActionCreator, CheckoutRequestSender, CheckoutStore } from '../checkout';\nimport { Registry } from '../common/registry';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { PaymentMethodActionCreator, PaymentMethodRequestSender } from '../payment';\nimport { AmazonPayScriptLoader } from '../payment/strategies/amazon-pay';\nimport {\n    createBraintreeVisaCheckoutPaymentProcessor,\n    BraintreeScriptLoader,\n    BraintreeSDKCreator,\n    VisaCheckoutScriptLoader\n} from '../payment/strategies/braintree';\nimport { ChasePayScriptLoader } from '../payment/strategies/chasepay';\nimport { createGooglePayPaymentProcessor, GooglePayBraintreeInitializer, GooglePayStripeInitializer } from '../payment/strategies/googlepay';\nimport { MasterpassScriptLoader } from '../payment/strategies/masterpass';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../remote-checkout';\n\nimport CustomerActionCreator from './customer-action-creator';\nimport CustomerRequestSender from './customer-request-sender';\nimport CustomerStrategyActionCreator from './customer-strategy-action-creator';\nimport { CustomerStrategy } from './strategies';\nimport { AmazonPayCustomerStrategy } from './strategies/amazon';\nimport { BraintreeVisaCheckoutCustomerStrategy } from './strategies/braintree';\nimport { ChasePayCustomerStrategy } from './strategies/chasepay';\nimport { DefaultCustomerStrategy } from './strategies/default';\nimport { GooglePayCustomerStrategy } from './strategies/googlepay';\nimport { MasterpassCustomerStrategy } from './strategies/masterpass';\nimport { SquareCustomerStrategy } from './strategies/square';\n\nexport default function createCustomerStrategyRegistry(\n    store: CheckoutStore,\n    requestSender: RequestSender\n): Registry<CustomerStrategy> {\n    const registry = new Registry<CustomerStrategy>();\n    const scriptLoader = getScriptLoader();\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const checkoutActionCreator = new CheckoutActionCreator(\n        checkoutRequestSender,\n        new ConfigActionCreator(new ConfigRequestSender(requestSender))\n    );\n    const formPoster = createFormPoster();\n    const paymentMethodActionCreator = new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender));\n    const remoteCheckoutRequestSender = new RemoteCheckoutRequestSender(requestSender);\n    const remoteCheckoutActionCreator = new RemoteCheckoutActionCreator(remoteCheckoutRequestSender);\n\n    registry.register('amazon', () =>\n        new AmazonPayCustomerStrategy(\n            store,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            remoteCheckoutRequestSender,\n            new AmazonPayScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('braintreevisacheckout', () =>\n        new BraintreeVisaCheckoutCustomerStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            new CustomerStrategyActionCreator(registry),\n            remoteCheckoutActionCreator,\n            createBraintreeVisaCheckoutPaymentProcessor(scriptLoader, requestSender),\n            new VisaCheckoutScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('chasepay', () =>\n        new ChasePayCustomerStrategy(\n            store,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new ChasePayScriptLoader(scriptLoader),\n            requestSender,\n            formPoster\n        )\n    );\n\n    registry.register('squarev2', () =>\n        new SquareCustomerStrategy(\n            store,\n            new RemoteCheckoutActionCreator(remoteCheckoutRequestSender)\n        )\n    );\n\n    registry.register('masterpass', () =>\n        new MasterpassCustomerStrategy(\n            store,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new MasterpassScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('googlepaybraintree', () =>\n        new GooglePayCustomerStrategy(\n            store,\n            remoteCheckoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayBraintreeInitializer(\n                    new BraintreeSDKCreator(\n                        new BraintreeScriptLoader(scriptLoader)\n                    )\n                )\n            ),\n            formPoster\n        )\n    );\n\n    registry.register('googlepaystripe', () =>\n        new GooglePayCustomerStrategy(\n            store,\n            remoteCheckoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayStripeInitializer()\n            ),\n            formPoster\n    )\n);\n\n    registry.register('default', () =>\n        new DefaultCustomerStrategy(\n            store,\n            new CustomerActionCreator(\n                new CustomerRequestSender(requestSender),\n                checkoutActionCreator\n            )\n        )\n    );\n\n    return registry;\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { CheckoutRequestSender, CheckoutStore } from '../checkout';\nimport { Registry } from '../common/registry';\nimport { PaymentMethodActionCreator, PaymentMethodRequestSender } from '../payment';\nimport { AmazonPayScriptLoader } from '../payment/strategies/amazon-pay';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../remote-checkout';\n\nimport ConsignmentActionCreator from './consignment-action-creator';\nimport ConsignmentRequestSender from './consignment-request-sender';\nimport { ShippingStrategy } from './strategies';\nimport { AmazonPayShippingStrategy } from './strategies/amazon';\nimport { DefaultShippingStrategy } from './strategies/default';\n\nexport default function createShippingStrategyRegistry(\n    store: CheckoutStore,\n    requestSender: RequestSender\n): Registry<ShippingStrategy> {\n    const registry = new Registry<ShippingStrategy>();\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const consignmentRequestSender = new ConsignmentRequestSender(requestSender);\n    const consignmentActionCreator = new ConsignmentActionCreator(consignmentRequestSender, checkoutRequestSender);\n\n    registry.register('amazon', () =>\n        new AmazonPayShippingStrategy(\n            store,\n            consignmentActionCreator,\n            new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender)),\n            new RemoteCheckoutActionCreator(new RemoteCheckoutRequestSender(requestSender)),\n            new AmazonPayScriptLoader(getScriptLoader())\n        )\n    );\n\n    registry.register('default', () =>\n        new DefaultShippingStrategy(\n            store,\n            consignmentActionCreator\n        )\n    );\n\n    return registry;\n}\n","import { EmbeddedCheckoutFrameLoadedEvent } from '../embedded-checkout-events';\n\nexport default function handleFrameLoadedEvent(message: EmbeddedCheckoutFrameLoadedEvent): void {\n    if (!message.payload || !message.payload.contentId) {\n        return;\n    }\n\n    const body = document.getElementById(message.payload.contentId);\n\n    if (!body || body.hasAttribute('data-iframe-height')) {\n        return;\n    }\n\n    body.setAttribute('data-iframe-height', '');\n}\n","export default interface CustomError extends Error {\n    message: string;\n    type: string;\n    subtype?: string;\n}\n\nexport function isCustomError(error: any): error is CustomError {\n    return (\n        typeof error.message === 'string' &&\n        typeof error.type === 'string' &&\n        (typeof error.subtype === 'string' || !error.subtype) &&\n        error instanceof Error\n    );\n}\n","import { isCustomError, CustomError } from '../../common/error/errors';\nimport { bindDecorator as bind } from '../../common/utility';\nimport EmbeddedCheckoutError from '../embedded-checkout-error';\nimport {\n    EmbeddedCheckoutCompleteEvent,\n    EmbeddedCheckoutErrorEvent,\n    EmbeddedCheckoutEvent,\n    EmbeddedCheckoutEventMap,\n    EmbeddedCheckoutEventType,\n    EmbeddedCheckoutFrameErrorEvent,\n    EmbeddedCheckoutFrameLoadedEvent,\n    EmbeddedCheckoutLoadedEvent,\n    EmbeddedCheckoutSignedOutEvent,\n} from '../embedded-checkout-events';\nimport EmbeddedCheckoutStyles from '../embedded-checkout-styles';\nimport IframeEventListener from '../iframe-event-listener';\nimport IframeEventPoster from '../iframe-event-poster';\n\nimport EmbeddedCheckoutMessenger from './embedded-checkout-messenger';\nimport { EmbeddedContentEventMap, EmbeddedContentEventType } from './embedded-content-events';\nimport EmbeddedContentOptions from './embedded-content-options';\n\n@bind\nexport default class IframeEmbeddedCheckoutMessenger implements EmbeddedCheckoutMessenger {\n    /**\n     * @internal\n     */\n    constructor(\n        private _messageListener: IframeEventListener<EmbeddedContentEventMap>,\n        private _messagePoster: IframeEventPoster<EmbeddedCheckoutEvent>,\n        private _untargetedMessagePoster: IframeEventPoster<EmbeddedCheckoutEvent>,\n        private _messageHandlers: EventCallbacks<EmbeddedCheckoutEventMap> = {}\n    ) {\n        this._messageListener.listen();\n    }\n\n    postComplete(): void {\n        const message: EmbeddedCheckoutCompleteEvent = {\n            type: EmbeddedCheckoutEventType.CheckoutComplete,\n        };\n\n        this._postMessage(message);\n    }\n\n    postError(payload: Error | CustomError): void {\n        const message: EmbeddedCheckoutErrorEvent = {\n            type: EmbeddedCheckoutEventType.CheckoutError,\n            payload: this._transformError(payload),\n        };\n\n        this._postMessage(message);\n    }\n\n    postFrameError(payload: Error | CustomError): void {\n        const message: EmbeddedCheckoutFrameErrorEvent = {\n            type: EmbeddedCheckoutEventType.FrameError,\n            payload: this._transformError(payload),\n        };\n\n        // Ideally, all messages should be targeted at a specific origin.\n        // However, for `FrameError` message, we have to post it in an\n        // untargeted fashion. This is because the error could be caused by a\n        // missing cart. That makes it not possible to determine of site origin\n        // of the parent window. Nevertheless, we still want to notify the\n        // parent window about the error.\n        this._postMessage(message, { untargeted: true });\n    }\n\n    postFrameLoaded(payload?: EmbeddedContentOptions): void {\n        const message: EmbeddedCheckoutFrameLoadedEvent = {\n            type: EmbeddedCheckoutEventType.FrameLoaded,\n            payload,\n        };\n\n        this._postMessage(message);\n    }\n\n    postLoaded(): void {\n        const message: EmbeddedCheckoutLoadedEvent = {\n            type: EmbeddedCheckoutEventType.CheckoutLoaded,\n        };\n\n        this._postMessage(message);\n    }\n\n    postSignedOut(): void {\n        const message: EmbeddedCheckoutSignedOutEvent = {\n            type: EmbeddedCheckoutEventType.SignedOut,\n        };\n\n        this._postMessage(message);\n    }\n\n    receiveStyles(handler: (styles: EmbeddedCheckoutStyles) => void): void {\n        this._messageListener.addListener(EmbeddedContentEventType.StyleConfigured, ({ payload }) => {\n            handler(payload);\n        });\n    }\n\n    private _postMessage(message: EmbeddedCheckoutEvent, options?: { untargeted?: boolean }): void {\n        this._notifyMessageHandlers(message);\n\n        if (options && options.untargeted) {\n            return this._untargetedMessagePoster.post(message);\n        }\n\n        this._messagePoster.post(message);\n    }\n\n    private _notifyMessageHandlers(message: EmbeddedCheckoutEvent): void {\n        Object.keys(this._messageHandlers)\n            .forEach(key => {\n                const handler = this._messageHandlers[key as keyof EmbeddedCheckoutEventMap];\n\n                if (handler) {\n                    handler.call(null, message);\n                }\n            });\n    }\n\n    private _transformError(error: Error | CustomError): EmbeddedCheckoutError {\n        return {\n            message: error.message,\n            type: isCustomError(error) ? error.type : undefined,\n            subtype: isCustomError(error) ? error.subtype : undefined,\n        };\n    }\n}\n\nexport type EventCallbacks<TEventMap> = {\n    [key in keyof TEventMap]?: (event: TEventMap[key]) => void;\n};\n","import { bindDecorator as bind } from '../../common/utility';\n\nimport EmbeddedCheckoutMessenger from './embedded-checkout-messenger';\n\n@bind\nexport default class NoopEmbeddedCheckoutMessenger implements EmbeddedCheckoutMessenger {\n    postComplete(): void {}\n\n    postError(): void {}\n\n    postFrameError(): void {}\n\n    postFrameLoaded(): void {}\n\n    postLoaded(): void {}\n\n    postSignedOut(): void {}\n\n    receiveStyles(): void {}\n}\n","import { EmbeddedCheckoutEvent, EmbeddedCheckoutEventType } from '../embedded-checkout-events';\nimport IframeEventListener from '../iframe-event-listener';\nimport IframeEventPoster from '../iframe-event-poster';\n\nimport EmbeddedCheckoutMessenger from './embedded-checkout-messenger';\nimport EmbeddedCheckoutMessengerOptions from './embedded-checkout-messenger-options';\nimport { EmbeddedContentEventMap } from './embedded-content-events';\nimport handleFrameLoadedEvent from './handle-frame-loaded-event';\nimport IframeEmbeddedCheckoutMessenger from './iframe-embedded-checkout-messenger';\nimport NoopEmbeddedCheckoutMessenger from './noop-embedded-checkout-messenger';\n\n/**\n * Create an instance of `EmbeddedCheckoutMessenger`.\n *\n * @remarks\n * The object is responsible for posting messages to the parent window from the\n * iframe when certain events have occurred. For example, when the checkout\n * form is first loaded, you should notify the parent window about it.\n *\n * The iframe can only be embedded in domains that are allowed by the store.\n *\n * ```ts\n * const messenger = createEmbeddedCheckoutMessenger({\n *     parentOrigin: 'https://some/website',\n * });\n *\n * messenger.postFrameLoaded();\n * ```\n *\n * @alpha\n * Please note that this feature is currently in an early stage of development.\n * Therefore the API is unstable and not ready for public consumption.\n *\n * @param options - Options for creating `EmbeddedCheckoutMessenger`\n * @returns - An instance of `EmbeddedCheckoutMessenger`\n */\nexport default function createEmbeddedCheckoutMessenger(options: EmbeddedCheckoutMessengerOptions): EmbeddedCheckoutMessenger {\n    const parentWindow = options.parentWindow || window.parent;\n\n    // Return a No-op messenger if it is not called inside an iframe\n    if (window === parentWindow) {\n        return new NoopEmbeddedCheckoutMessenger();\n    }\n\n    return new IframeEmbeddedCheckoutMessenger(\n        new IframeEventListener<EmbeddedContentEventMap>(options.parentOrigin),\n        new IframeEventPoster<EmbeddedCheckoutEvent>(options.parentOrigin, parentWindow),\n        new IframeEventPoster<EmbeddedCheckoutEvent>('*', parentWindow),\n        { [EmbeddedCheckoutEventType.FrameLoaded]: handleFrameLoadedEvent }\n    );\n}\n","import { isObject, union } from 'lodash';\nimport * as MessageFormat from 'messageformat';\n\nimport Logger from '../common/log/logger';\nimport { bindDecorator as bind } from '../common/utility';\n\nimport LanguageConfig, { Locales, Translations } from './language-config';\n\nconst DEFAULT_LOCALE = 'en';\nconst KEY_PREFIX = 'optimized_checkout';\n\n/**\n * Responsible for getting language strings.\n *\n * This object can be used to retrieve language strings that are most\n * appropriate for a given locale.\n *\n * The language strings provided to the object should follow [ICU\n * MessageFormat](http://userguide.icu-project.org/formatparse/messages) syntax.\n */\n@bind\nexport default class LanguageService {\n    private _locale: string;\n    private _locales: Locales;\n    private _translations: Translations;\n    private _formatters: { [key: string]: any };\n\n    /**\n     * @internal\n     */\n    constructor(\n        config: Partial<LanguageConfig>,\n        private _logger: Logger\n    ) {\n        const { locale, locales, translations } = this._transformConfig(config);\n\n        this._locale = locale;\n        this._locales = locales;\n        this._translations = translations;\n        this._formatters = {};\n    }\n\n    /**\n     * Remaps a set of language strings with a different set of keys.\n     *\n     * ```js\n     * service.mapKeys({\n     *     'new_key': 'existing_key',\n     * });\n     *\n     * console.log(service.translate('new_key'));\n     * ```\n     *\n     * @param maps - The set of language strings.\n     */\n    mapKeys(maps: { [key: string]: string }): void {\n        Object.keys(maps).forEach(key => {\n            const translationKey = `${KEY_PREFIX}.${maps[key]}`;\n\n            this._translations[`${KEY_PREFIX}.${key}`] = this._translations[translationKey];\n        });\n    }\n\n    /**\n     * Gets the preferred locale of the current customer.\n     *\n     * @returns The preferred locale code.\n     */\n    getLocale(): string {\n        return this._hasTranslations() ? this._locale : DEFAULT_LOCALE;\n    }\n\n    /**\n     * Gets a language string by a key.\n     *\n     * ```js\n     * service.translate('language_key');\n     * ```\n     *\n     * If the language string contains a placeholder, you can replace it by\n     * providing a second argument.\n     *\n     * ```js\n     * service.translate('language_key', { placeholder: 'Hello' });\n     * ```\n     *\n     * @param key - The language key.\n     * @param data - Data for replacing placeholders in the language string.\n     * @returns The translated language string.\n     */\n    translate(key: string, data: TranslationData = {}): string {\n        const prefixedKey = `${KEY_PREFIX}.${key}`;\n\n        if (typeof this._translations[prefixedKey] !== 'string') {\n            this._logger.warn(`Translation key \"${prefixedKey}\" is missing`);\n\n            return prefixedKey;\n        }\n\n        if (!this._formatters[prefixedKey]) {\n            const messageFormat = new MessageFormat(this._locales[prefixedKey]);\n\n            this._formatters[prefixedKey] = messageFormat.compile(this._translations[prefixedKey] || '');\n        }\n\n        return this._formatters[prefixedKey](this._transformData(data));\n    }\n\n    private _transformConfig(config: Partial<LanguageConfig> = {}): LanguageConfig {\n        const output: LanguageConfig = {\n            defaultTranslations: {},\n            translations: {},\n            locales: {},\n            locale: config.locale || DEFAULT_LOCALE,\n        };\n\n        const locales = config.locales || {};\n        const translations = this._flattenObject(config.translations || {});\n        const defaultTranslations = this._flattenObject(config.defaultTranslations || {});\n        const translationKeys = union(Object.keys(defaultTranslations), Object.keys(translations));\n\n        translationKeys.forEach(key => {\n            if (translations && translations[key]) {\n                output.translations[key] = translations[key];\n                output.locales[key] = locales[key] || output.locale;\n            } else {\n                output.translations[key] = defaultTranslations[key];\n                output.locales[key] = DEFAULT_LOCALE;\n            }\n        });\n\n        return output;\n    }\n\n    private _flattenObject(object: Translations, result: Translations = {}, parentKey: string = ''): Translations {\n        try {\n            Object.keys(object).forEach(key => {\n                const value = object[key];\n                const resultKey = parentKey ? `${parentKey}.${key}` : key;\n\n                if (isObject(value)) {\n                    return this._flattenObject(value as Translations, result, resultKey);\n                }\n\n                result[resultKey] = value;\n            });\n        } catch (err) {\n            this._logger.warn(`Unable to parse object: ${err}`);\n        }\n\n        return result;\n    }\n\n    private _transformData(data: TranslationData): TranslationData {\n        return Object.keys(data).reduce((result, key) => {\n            const value = data[key];\n\n            result[key] = value === null || value === undefined ? '' : value;\n\n            return result;\n        }, {} as TranslationData);\n    }\n\n    private _hasTranslations(): boolean {\n        return Object.keys(this._locales).map(key => this._locales[key])\n            .filter(code => code.split('-')[0] === this._locale.split('-')[0])\n            .length > 0;\n    }\n}\n\nexport interface TranslationData {\n    [key: string]: string | number;\n}\n","import { getDefaultLogger } from '../common/log';\n\nimport LanguageConfig from './language-config';\nimport LanguageService from './language-service';\n\n/**\n * Creates an instance of `LanguageService`.\n *\n * @remarks\n * ```js\n * const language = {{{langJson 'optimized_checkout'}}}; // `langJson` is a Handlebars helper provided by BigCommerce's Stencil template engine.\n * const service = createLanguageService(language);\n *\n * console.log(service.translate('address.city_label'));\n * ```\n *\n * @param config - A configuration object.\n * @returns An instance of `LanguageService`.\n */\nexport default function createLanguageService(config: Partial<LanguageConfig> = {}): LanguageService {\n    return new LanguageService(\n        config,\n        getDefaultLogger()\n    );\n}\n","import { InvalidArgumentError } from '../common/error/errors';\n\nimport { CurrencyConfig } from './currency';\n\nexport default class CurrencyFormatter {\n    private _decimalPlaces: number;\n    private _symbolLocation: string;\n    private _symbol: string;\n    private _thousandsSeparator: string;\n    private _decimalSeparator: string;\n\n    constructor(\n        currencySettings: CurrencyConfig\n    ) {\n        if (!currencySettings) {\n            throw new Error('Currency settings missing');\n        }\n\n        const {\n            decimalPlaces,\n            symbolLocation,\n            symbol,\n            thousandsSeparator,\n            decimalSeparator,\n        } = currencySettings;\n\n        if (\n            typeof symbolLocation !== 'string' ||\n            typeof symbol !== 'string' ||\n            typeof thousandsSeparator !== 'string' ||\n            typeof decimalSeparator !== 'string' ||\n            typeof decimalPlaces !== 'string'\n        ) {\n            throw new InvalidArgumentError('Invalid currency settings provided');\n        }\n\n        this._decimalPlaces = parseInt(decimalPlaces, 10);\n        this._symbolLocation = symbolLocation;\n        this._symbol = symbol;\n        this._thousandsSeparator = thousandsSeparator;\n        this._decimalSeparator = decimalSeparator;\n    }\n\n    format(amount?: number): string {\n        if (typeof amount !== 'number') {\n            throw new InvalidArgumentError('Invalid amount provided');\n        }\n\n        const formattedNumber = this._formatNumber(amount);\n\n        const formattedCurrency = this._formatCurrency(formattedNumber);\n\n        return amount < 0 ?\n            `-${formattedCurrency}` :\n            formattedCurrency;\n    }\n\n    private _formatNumber(amount: number): string {\n        const positiveAmount = Math.abs(amount);\n        const [ integerAmount, decimalAmount = '' ] = (this._toFixed(positiveAmount, this._decimalPlaces)).split('.');\n        const parsedIntegerAmount = integerAmount.replace(/\\B(?=(\\d{3})+(?!\\d))/g, this._thousandsSeparator);\n\n        if (this._decimalPlaces < 1) {\n            return parsedIntegerAmount;\n        }\n\n        return [\n            parsedIntegerAmount,\n            decimalAmount,\n        ].join(this._decimalSeparator);\n    }\n\n    private _formatCurrency(formattedNumber: string): string {\n        return (this._symbolLocation.toLowerCase() === 'left') ?\n            `${this._symbol}${formattedNumber}` :\n            `${formattedNumber}${this._symbol}`;\n    }\n\n    private _toFixed(value: number, precision: number): string {\n        return (+(Math.round(+(value + 'e' + precision)) + 'e' + -precision)).toFixed(precision);\n    }\n}\n","import { bindDecorator as bind } from '../common/utility';\nimport { StoreConfig } from '../config';\n\nimport CurrencyFormatter from './currency-formatter';\n\n/**\n * Responsible for formatting and converting currencies.\n */\n@bind\nexport default class CurrencyService {\n    private _customerFormatter: CurrencyFormatter;\n    private _storeFormatter: CurrencyFormatter;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _storeConfig: StoreConfig\n    ) {\n        this._customerFormatter = new CurrencyFormatter(this._storeConfig.shopperCurrency);\n        this._storeFormatter = new CurrencyFormatter(this._storeConfig.currency);\n    }\n\n    toCustomerCurrency(amount: number): string {\n        const exchangeRate = this._storeConfig.shopperCurrency.exchangeRate;\n\n        return this._customerFormatter.format(amount * exchangeRate);\n    }\n\n    toStoreCurrency(amount: number): string {\n        return this._storeFormatter.format(amount);\n    }\n}\n","import { StoreConfig } from '../config';\n\nimport CurrencyService from './currency-service';\n\n/**\n * Creates an instance of `CurrencyService`.\n *\n * @remarks\n * ```js\n * const { data } = checkoutService.getState();\n * const config = data.getConfig();\n * const checkout = data.getCheckout();\n * const currencyService = createCurrencyService(config);\n *\n * currencyService.toStoreCurrency(checkout.grandTotal);\n * currencyService.toCustomerCurrency(checkout.grandTotal);\n * ```\n *\n * @alpha\n * Please note that `CurrencyService` is currently in an early stage\n * of development. Therefore the API is unstable and not ready for public\n * consumption.\n *\n * @param config - The config object containing the currency configuration\n * @returns an instance of `CurrencyService`.\n */\nexport default function createCurrencyService(\n    config: StoreConfig\n): CurrencyService {\n    return new CurrencyService(config);\n}\n","export { createTimeout } from '@bigcommerce/request-sender';\n\nexport { createCheckoutService } from './checkout';\nexport { createCheckoutButtonInitializer } from './checkout-buttons';\nexport { embedCheckout } from './embedded-checkout';\nexport { createEmbeddedCheckoutMessenger } from './embedded-checkout/iframe-content';\nexport { createLanguageService } from './locale';\nexport { createCurrencyService } from './currency';\n","import { Checkout } from '../../../checkout';\nimport PaymentMethod from '../../payment-method';\nimport { BraintreeModuleCreator, GooglePayBraintreeSDK } from '../braintree';\n\nexport type EnvironmentType = 'PRODUCTION' | 'TEST';\ntype TokenizeType = 'AndroidPayCard' | 'CreditCard';\n\nexport interface GooglePayInitializer {\n    initialize(checkout: Checkout, paymentMethod: PaymentMethod, hasShippingAddress: boolean, publishableKey?: string): Promise<GooglePayPaymentDataRequestV2>;\n    teardown(): Promise<void>;\n    parseResponse(paymentData: GooglePaymentData): TokenizePayload;\n}\n\nexport interface GooglePayCreator extends BraintreeModuleCreator<GooglePayBraintreeSDK> {}\n\nexport interface GooglePayPaymentOptions {\n    environment: EnvironmentType;\n}\n\nexport interface GooglePayIsReadyToPayResponse {\n    result: boolean;\n    paymentMethodPresend?: boolean;\n}\n\nexport interface GooglePaySDK {\n    payments: {\n        api: {\n            PaymentsClient: new(options: GooglePayPaymentOptions) => GooglePayClient;\n        };\n    };\n}\n\nexport interface GooglePayClient {\n    isReadyToPay(options: object): Promise<GooglePayIsReadyToPayResponse>;\n    loadPaymentData(paymentDataRequest: GooglePayPaymentDataRequestV2): Promise<GooglePaymentData>;\n    createButton(options: { [key: string]: string | object }): HTMLElement;\n}\n\nexport interface GooglePayHostWindow extends Window {\n    google?: GooglePaySDK;\n}\n\nexport interface TokenizePayload {\n    nonce: string;\n    details: {\n        cardType: string;\n        lastFour: string;\n        lastTwo?: string;\n    };\n    description?: string;\n    type: TokenizeType;\n    binData?: {\n        commercial: string;\n        countryOfIssuance: string;\n        debit: string;\n        durbinRegulated: string;\n        healthcare: string;\n        issuingBank: string;\n        payroll: string;\n        prepaid: string;\n        productId: string;\n    };\n}\n\nexport interface GooglePaymentData {\n    apiVersion: number;\n    apiVersionMinor: number;\n    paymentMethodData: {\n        description: string;\n        info: {\n            cardDetails: string;\n            cardNetwork: string;\n            billingAddress: GooglePayAddress;\n        };\n        tokenizationData: {\n            token: string;\n            type: string;\n        };\n        type: string;\n    };\n    shippingAddress: GooglePayAddress;\n    email: string;\n}\n\nexport interface GooglePayAddress {\n    address1: string;\n    address2: string;\n    address3: string;\n    administrativeArea: string;\n    companyName: string;\n    countryCode: string;\n    locality: string;\n    name: string;\n    postalCode: string;\n    sortingCode: string;\n    phoneNumber: string;\n}\n\nexport interface GooglePaymentsError {\n    statusCode: string;\n    statusMessage?: string;\n}\n\nexport interface PaymentMethodData {\n    methodId: string;\n    paymentData: {\n        method: string;\n        nonce: string;\n        cardInformation: {\n            type: string;\n            number: string;\n        };\n    };\n}\n\nexport enum ButtonType {\n    Long = 'long',\n    Short = 'short',\n}\nexport enum ButtonColor {\n    Default = 'default',\n    Black = 'black',\n    White = 'white',\n}\n\nexport interface GooglePayPaymentDataRequestV2 {\n    apiVersion: number;\n    apiVersionMinor: number;\n    merchantInfo: {\n        authJwt?: string;\n        merchantId?: string;\n        merchantName?: string;\n    };\n    allowedPaymentMethods: [{\n        type: string;\n        parameters: {\n            allowedAuthMethods: string[];\n            allowedCardNetworks: string[];\n            allowPrepaidCards?: boolean;\n            billingAddressRequired?: boolean;\n            billingAddressParameters?: {\n                format?: string;\n                phoneNumberRequired?: boolean;\n            };\n        };\n        tokenizationSpecification?: {\n            type: string;\n            parameters: {\n                gateway: string;\n                gatewayMerchantId?: string;\n                'braintree:apiVersion'?: string;\n                'braintree:clientKey'?: string;\n                'braintree:merchantId'?: string;\n                'braintree:sdkVersion'?: string;\n                'braintree:authorizationFingerprint'?: string;\n                'stripe:version'?: string;\n                'stripe:publishableKey'?: string;\n            };\n        };\n    }];\n    transactionInfo: {\n        currencyCode: string;\n        totalPriceStatus: string;\n        totalPrice?: string;\n        checkoutOption?: string;\n    };\n    emailRequired?: boolean;\n    shippingAddressRequired?: boolean;\n    shippingAddressParameters?: {\n        allowedCountryCodes?: string[];\n        phoneNumberRequired?: boolean;\n    };\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { AddressRequestBody } from '../../../address';\nimport { BillingAddressActionCreator, BillingAddressUpdateRequestBody } from '../../../billing';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n} from '../../../common/error/errors';\nimport { RemoteCheckoutSynchronizationError } from '../../../remote-checkout/errors';\nimport { ConsignmentActionCreator } from '../../../shipping';\nimport PaymentMethodInvalidError from '../../errors/payment-method-invalid-error';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\n\nimport {\n    ButtonColor,\n    ButtonType,\n    EnvironmentType,\n    GooglePaymentData,\n    GooglePayAddress,\n    GooglePayClient,\n    GooglePayInitializer,\n    GooglePayPaymentDataRequestV2,\n    GooglePaySDK,\n    TokenizePayload\n} from './googlepay';\nimport GooglePayScriptLoader from './googlepay-script-loader';\n\nexport default class GooglePayPaymentProcessor {\n    private _googlePayClient?: GooglePayClient;\n    private _methodId?: string;\n    private _paymentDataRequest?: GooglePayPaymentDataRequestV2;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _googlePayScriptLoader: GooglePayScriptLoader,\n        private _googlePayInitializer: GooglePayInitializer,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _consigmentActionCreator: ConsignmentActionCreator,\n        private _requestSender: RequestSender\n    ) {}\n\n    initialize(methodId: string): Promise<void> {\n        this._methodId = methodId;\n\n        return this._configureWallet();\n    }\n\n    deinitialize(): Promise<void> {\n        return this._googlePayInitializer.teardown();\n    }\n\n    createButton(\n        onClick: (event: Event) => Promise<void>,\n        buttonType: ButtonType = ButtonType.Short,\n        buttonColor: ButtonColor = ButtonColor.Default\n    ): HTMLElement {\n        if (!this._googlePayClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._googlePayClient.createButton({\n            buttonColor,\n            buttonType,\n            onClick,\n        });\n    }\n\n    displayWallet(): Promise<GooglePaymentData> {\n        if (!this._googlePayClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._googlePayClient.loadPaymentData(this._getPaymentDataRequest());\n    }\n\n    handleSuccess(paymentData: GooglePaymentData): Promise<InternalCheckoutSelectors> {\n        return this._postForm(this._googlePayInitializer.parseResponse(paymentData))\n            .then(() => this._updateBillingAddress(paymentData));\n    }\n\n    updateShippingAddress(shippingAddress: GooglePayAddress): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consigmentActionCreator.updateAddress(this._mapGooglePayAddressToShippingAddress(shippingAddress))\n        );\n    }\n\n    private _configureWallet(): Promise<void> {\n        const methodId = this._getMethodId();\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n                const checkout = state.checkout.getCheckout();\n                const hasShippingAddress = !!state.shippingAddress.getShippingAddress();\n\n                if (!paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                const { testMode } = paymentMethod.config;\n\n                return Promise.all([\n                    this._googlePayScriptLoader.load(),\n                    this._googlePayInitializer.initialize(checkout, paymentMethod, hasShippingAddress),\n                ]).then(([googlePay, paymentDataRequest]) => {\n                    this._googlePayClient = this._getGooglePayClient(googlePay, testMode);\n                    this._paymentDataRequest = paymentDataRequest;\n\n                    return this._googlePayClient.isReadyToPay({\n                        allowedPaymentMethods: [\n                            {\n                                type: paymentDataRequest.allowedPaymentMethods[0].type,\n                                parameters: {\n                                    allowedAuthMethods: paymentDataRequest.allowedPaymentMethods[0].parameters.allowedAuthMethods,\n                                    allowedCardNetworks: paymentDataRequest.allowedPaymentMethods[0].parameters.allowedCardNetworks,\n                                },\n                            },\n                        ],\n                        apiVersion: paymentDataRequest.apiVersion,\n                        apiVersionMinor: paymentDataRequest.apiVersionMinor,\n                    }).then(response => {\n                        if (response.result) {\n                            return;\n                        }\n\n                        throw new PaymentMethodInvalidError();\n                    });\n                });\n            });\n    }\n\n    private _getCardInformation(cardInformation: { cardType: string; lastFour: string }) {\n        return {\n            type: cardInformation.cardType,\n            number: cardInformation.lastFour,\n        };\n    }\n\n    private _getPaymentDataRequest(): GooglePayPaymentDataRequestV2 {\n        if (!this._paymentDataRequest) {\n            throw new RemoteCheckoutSynchronizationError();\n        }\n\n        return this._paymentDataRequest;\n    }\n\n    private _getGooglePayClient(google: GooglePaySDK, testMode?: boolean): GooglePayClient {\n        if (testMode === undefined) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const environment: EnvironmentType = testMode ? 'TEST' : 'PRODUCTION';\n\n        return new google.payments.api.PaymentsClient({ environment });\n    }\n\n    private _getMethodId(): string {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._methodId;\n    }\n\n    private _mapGooglePayAddressToBillingAddress(paymentData: GooglePaymentData, id: string): BillingAddressUpdateRequestBody {\n        return {\n            id,\n            firstName: paymentData.paymentMethodData.info.billingAddress.name.split(' ').slice(0, -1).join(' '),\n            lastName: paymentData.paymentMethodData.info.billingAddress.name.split(' ').slice(-1).join(' '),\n            company: paymentData.paymentMethodData.info.billingAddress.companyName,\n            address1: paymentData.paymentMethodData.info.billingAddress.address1,\n            address2: paymentData.paymentMethodData.info.billingAddress.address2 + paymentData.paymentMethodData.info.billingAddress.address3,\n            city: paymentData.paymentMethodData.info.billingAddress.locality,\n            stateOrProvince: paymentData.paymentMethodData.info.billingAddress.administrativeArea,\n            stateOrProvinceCode: paymentData.paymentMethodData.info.billingAddress.administrativeArea,\n            postalCode: paymentData.paymentMethodData.info.billingAddress.postalCode,\n            countryCode: paymentData.paymentMethodData.info.billingAddress.countryCode,\n            phone: paymentData.paymentMethodData.info.billingAddress.phoneNumber,\n            customFields: [],\n            email: paymentData.email,\n        };\n    }\n\n    private _mapGooglePayAddressToShippingAddress(address: GooglePayAddress): AddressRequestBody {\n        return {\n            firstName: address.name.split(' ').slice(0, -1).join(' '),\n            lastName: address.name.split(' ').slice(-1).join(' '),\n            company: address.companyName,\n            address1: address.address1,\n            address2: address.address2 + address.address3,\n            city: address.locality,\n            stateOrProvince: address.administrativeArea,\n            stateOrProvinceCode: address.administrativeArea,\n            postalCode: address.postalCode,\n            countryCode: address.countryCode,\n            phone: address.phoneNumber,\n            customFields: [],\n        };\n    }\n\n    private _postForm(postPaymentData: TokenizePayload): Promise<Response<void>> {\n        const cardInformation = postPaymentData.details;\n\n        return this._requestSender.post('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: {\n                payment_type: postPaymentData.type,\n                nonce: postPaymentData.nonce,\n                provider: this._getMethodId(),\n                action: 'set_external_checkout',\n                card_information: this._getCardInformation(cardInformation),\n            },\n        });\n    }\n\n    private _updateBillingAddress(paymentData: GooglePaymentData): Promise<InternalCheckoutSelectors> {\n        const remoteBillingAddress = this._store.getState().billingAddress.getBillingAddress();\n\n        if (!remoteBillingAddress) {\n            throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n        }\n\n        const googlePayAddressMapped = this._mapGooglePayAddressToBillingAddress(paymentData, remoteBillingAddress.id);\n\n        return this._store.dispatch(\n            this._billingAddressActionCreator.updateAddress(googlePayAddressMapped)\n        );\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { GooglePayHostWindow, GooglePaySDK } from './googlepay';\n\nexport default class GooglePayScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: GooglePayHostWindow = window\n    ) {}\n\n    load(): Promise<GooglePaySDK> {\n        return this._scriptLoader\n            .loadScript('https://pay.google.com/gp/p/js/pay.js')\n            .then(() => {\n                if (!this._window.google) {\n                    throw new StandardError();\n                }\n\n                return this._window.google;\n            });\n    }\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../../../billing';\nimport { CheckoutRequestSender, CheckoutStore } from '../../../checkout';\nimport { ConsignmentActionCreator, ConsignmentRequestSender } from '../../../shipping';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport PaymentMethodRequestSender from '../../payment-method-request-sender';\n\nimport { GooglePayInitializer } from './googlepay';\nimport GooglePayPaymentProcessor from './googlepay-payment-processor';\nimport GooglePayScriptLoader from './googlepay-script-loader';\n\nexport default function createGooglePayPaymentProcessor(store: CheckoutStore, initializer: GooglePayInitializer): GooglePayPaymentProcessor {\n    const requestSender = createRequestSender();\n    const scriptLoader = getScriptLoader();\n\n    return new GooglePayPaymentProcessor(\n        store,\n        new PaymentMethodActionCreator(\n            new PaymentMethodRequestSender(requestSender)\n        ),\n        new GooglePayScriptLoader(scriptLoader),\n        initializer,\n        new BillingAddressActionCreator(\n            new BillingAddressRequestSender(requestSender)\n        ),\n        new ConsignmentActionCreator(\n            new ConsignmentRequestSender(requestSender),\n            new CheckoutRequestSender(requestSender)\n        ),\n        requestSender\n    );\n}\n","import { keyBy, reduce, some } from 'lodash';\n\nimport { Checkout } from '../checkout';\nimport { AmountTransformer } from '../common/utility';\nimport { mapToInternalCoupon, mapToInternalGiftCertificate } from '../coupon';\nimport { mapToDiscountNotifications } from '../promotion';\n\nimport InternalCart from './internal-cart';\nimport mapToInternalLineItems from './map-to-internal-line-items';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalCart(checkout: Checkout): InternalCart {\n    const decimalPlaces = checkout.cart.currency.decimalPlaces;\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: checkout.cart.id,\n        items: mapToInternalLineItems(checkout.cart.lineItems, decimalPlaces),\n        currency: checkout.cart.currency.code,\n        coupon: {\n            discountedAmount: reduce(checkout.cart.coupons, (sum, coupon) => {\n                return sum + coupon.discountedAmount;\n            }, 0),\n            coupons: checkout.cart.coupons.map(mapToInternalCoupon),\n        },\n        discount: {\n            amount: checkout.cart.discountAmount,\n            integerAmount: amountTransformer.toInteger(checkout.cart.discountAmount),\n        },\n        discountNotifications: mapToDiscountNotifications(checkout.promotions),\n        giftCertificate: {\n            totalDiscountedAmount: reduce(checkout.giftCertificates, (sum, certificate) => {\n                return sum + certificate.used;\n            }, 0),\n            appliedGiftCertificates: keyBy(checkout.giftCertificates.map(mapToInternalGiftCertificate), 'code'),\n        },\n        shipping: {\n            amount: checkout.shippingCostTotal,\n            integerAmount: amountTransformer.toInteger(checkout.shippingCostTotal),\n            amountBeforeDiscount: checkout.shippingCostBeforeDiscount,\n            integerAmountBeforeDiscount: amountTransformer.toInteger(checkout.shippingCostBeforeDiscount),\n            required: some(checkout.cart.lineItems.physicalItems, lineItem => lineItem.isShippingRequired),\n        },\n        subtotal: {\n            amount: checkout.subtotal,\n            integerAmount: amountTransformer.toInteger(checkout.subtotal),\n        },\n        storeCredit: {\n            amount: checkout.customer ? checkout.customer.storeCredit : 0,\n        },\n        taxSubtotal: {\n            amount: checkout.taxTotal,\n            integerAmount: amountTransformer.toInteger(checkout.taxTotal),\n        },\n        taxes: checkout.taxes,\n        taxTotal: {\n            amount: checkout.taxTotal,\n            integerAmount: amountTransformer.toInteger(checkout.taxTotal),\n        },\n        handling: {\n            amount: checkout.handlingCostTotal,\n            integerAmount: amountTransformer.toInteger(checkout.handlingCostTotal),\n        },\n        grandTotal: {\n            amount: checkout.grandTotal,\n            integerAmount: amountTransformer.toInteger(checkout.grandTotal),\n        },\n    };\n}\n","import { DiscountNotification } from '../discount';\n\nimport { Promotion } from '.';\n\nexport default function mapToDiscountNotifications(promotions?: Promotion[]): DiscountNotification[] {\n    const notifications: DiscountNotification[] = [];\n\n    (promotions || []).forEach(promotion => {\n        (promotion.banners || []).forEach(banner => {\n            notifications.push({\n                placeholders: [],\n                discountType: null,\n                message: '',\n                messageHtml: banner.text,\n            });\n        });\n    });\n\n    return notifications;\n}\n"],"sourceRoot":""}