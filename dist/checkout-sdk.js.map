{"version":3,"sources":["webpack://checkoutKit/webpack/bootstrap","webpack://checkoutKit/external \"tslib\"","webpack://checkoutKit/external \"@bigcommerce/data-store\"","webpack://checkoutKit/external \"lodash\"","webpack://checkoutKit/external \"rxjs\"","webpack://checkoutKit/./src/shipping/consignment-actions.ts","webpack://checkoutKit/external \"@bigcommerce/memoize\"","webpack://checkoutKit/./src/customer/customer-strategy-actions.ts","webpack://checkoutKit/./src/payment/payment-strategy-actions.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-actions.ts","webpack://checkoutKit/./src/common/error/errors/missing-data-error.ts","webpack://checkoutKit/./src/checkout/checkout-actions.ts","webpack://checkoutKit/external \"rxjs/operators\"","webpack://checkoutKit/./src/coupon/coupon-actions.ts","webpack://checkoutKit/./src/billing/billing-address-actions.ts","webpack://checkoutKit/./src/order/order-actions.ts","webpack://checkoutKit/./src/payment/payment-method-actions.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-actions.ts","webpack://checkoutKit/./src/coupon/gift-certificate-actions.ts","webpack://checkoutKit/./src/payment/instrument/instrument-actions.ts","webpack://checkoutKit/./src/embedded-checkout/embedded-checkout-events.ts","webpack://checkoutKit/./src/common/error/errors/standard-error.ts","webpack://checkoutKit/./src/common/utility/set-prototype-of.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-actions.ts","webpack://checkoutKit/./src/common/error/errors/request-error.ts","webpack://checkoutKit/./src/store-credit/store-credit-actions.ts","webpack://checkoutKit/./src/config/config-actions.ts","webpack://checkoutKit/./src/common/utility/is-plain-object.ts","webpack://checkoutKit/./src/geography/country-actions.ts","webpack://checkoutKit/./src/shipping/shipping-country-actions.ts","webpack://checkoutKit/external \"@bigcommerce/request-sender\"","webpack://checkoutKit/./src/payment/payment-status-types.ts","webpack://checkoutKit/./src/payment/errors/payment-method-client-unavailable-error.ts","webpack://checkoutKit/external \"@bigcommerce/script-loader\"","webpack://checkoutKit/./src/common/http-request/content-type.ts","webpack://checkoutKit/./src/payment/payment-actions.ts","webpack://checkoutKit/./src/common/error/errors/invalid-argument-error.ts","webpack://checkoutKit/./src/payment/payment-method-types.ts","webpack://checkoutKit/./src/embedded-checkout/is-iframe-event.ts","webpack://checkoutKit/external \"shallowequal\"","webpack://checkoutKit/./src/common/utility/is-equal.ts","webpack://checkoutKit/external \"@bigcommerce/form-poster\"","webpack://checkoutKit/external \"local-storage-fallback\"","webpack://checkoutKit/external \"reselect\"","webpack://checkoutKit/./src/embedded-checkout/iframe-event-poster.ts","webpack://checkoutKit/./src/customer/customer-actions.ts","webpack://checkoutKit/./src/order/spam-protection/spam-protection-actions.ts","webpack://checkoutKit/./src/common/error/errors/not-initialized-error.ts","webpack://checkoutKit/./src/payment/errors/payment-method-invalid-error.ts","webpack://checkoutKit/./src/common/selector/with-memoized-combiner.ts","webpack://checkoutKit/./src/common/error/error-actions.ts","webpack://checkoutKit/./src/payment/payment-method-action-creator.ts","webpack://checkoutKit/./src/payment/payment-method-request-sender.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-content/embedded-content-events.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-event-listener.ts","webpack://checkoutKit/./src/checkout/checkout-default-includes.ts","webpack://checkoutKit/./src/cart/map-to-internal-line-items.ts","webpack://checkoutKit/./src/cart/map-gift-certificate-to-internal-line-item.ts","webpack://checkoutKit/./src/common/http-request/internal-api-headers.ts","webpack://checkoutKit/./src/checkout/checkout-params.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-sdk-creator.ts","webpack://checkoutKit/./src/cart/map-to-internal-line-item.ts","webpack://checkoutKit/./src/common/error/throw-error-action.ts","webpack://checkoutKit/./src/common/utility/amount-transformer.ts","webpack://checkoutKit/./src/common/url/parse-url.ts","webpack://checkoutKit/./src/common/data-store/cachable-action-decorator.ts","webpack://checkoutKit/./src/common/data-store/is-action-options.ts","webpack://checkoutKit/./src/common/data-store/cache-action.ts","webpack://checkoutKit/./src/common/utility/bind-decorator.ts","webpack://checkoutKit/external \"iframe-resizer\"","webpack://checkoutKit/external \"iframe-resizer/js/iframeResizer.contentWindow\"","webpack://checkoutKit/./src/common/utility/omit-deep.ts","webpack://checkoutKit/./src/checkout/checkout-action-creator.ts","webpack://checkoutKit/./src/shipping/consignment-action-creator.ts","webpack://checkoutKit/./src/shipping/consignment-request-sender.ts","webpack://checkoutKit/./src/payment/strategies/masterpass/get-callback-url.ts","webpack://checkoutKit/./src/shipping/map-to-internal-shipping-option.ts","webpack://checkoutKit/./src/common/utility/is-private.ts","webpack://checkoutKit/./src/common/error/errors/unrecoverable-error.ts","webpack://checkoutKit/./src/common/error/errors/map-from-internal-error-response.ts","webpack://checkoutKit/./src/common/error/errors/map-from-payment-error-response.ts","webpack://checkoutKit/./src/common/error/request-error-factory.ts","webpack://checkoutKit/./src/common/error/errors/map-from-storefront-error-response.ts","webpack://checkoutKit/./src/common/error/clear-error-reducer.ts","webpack://checkoutKit/./src/common/utility/replace.ts","webpack://checkoutKit/./src/common/utility/object-set.ts","webpack://checkoutKit/./src/billing/billing-address-state.ts","webpack://checkoutKit/./src/billing/billing-address-reducer.ts","webpack://checkoutKit/./src/common/utility/array-replace.ts","webpack://checkoutKit/./src/common/utility/object-merge.ts","webpack://checkoutKit/./src/cart/cart-state.ts","webpack://checkoutKit/./src/cart/cart-reducer.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-state.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-reducer.ts","webpack://checkoutKit/./src/config/config-state.ts","webpack://checkoutKit/./src/config/config-reducer.ts","webpack://checkoutKit/./src/coupon/coupon-state.ts","webpack://checkoutKit/./src/coupon/coupon-reducer.ts","webpack://checkoutKit/./src/coupon/gift-certificate-state.ts","webpack://checkoutKit/./src/coupon/gift-certificate-reducer.ts","webpack://checkoutKit/./src/customer/customer-state.ts","webpack://checkoutKit/./src/customer/customer-reducer.ts","webpack://checkoutKit/./src/customer/customer-strategy-state.ts","webpack://checkoutKit/./src/customer/customer-strategy-reducer.ts","webpack://checkoutKit/./src/geography/country-state.ts","webpack://checkoutKit/./src/geography/country-reducer.ts","webpack://checkoutKit/./src/order/order-state.ts","webpack://checkoutKit/./src/order/order-reducer.ts","webpack://checkoutKit/./src/payment/payment-reducer.ts","webpack://checkoutKit/./src/payment/payment-method-state.ts","webpack://checkoutKit/./src/payment/payment-method-reducer.ts","webpack://checkoutKit/./src/common/utility/merge-or-push.ts","webpack://checkoutKit/./src/payment/payment-strategy-state.ts","webpack://checkoutKit/./src/payment/payment-strategy-reducer.ts","webpack://checkoutKit/./src/payment/instrument/instrument-state.ts","webpack://checkoutKit/./src/payment/instrument/instrument-reducer.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-state.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-reducer.ts","webpack://checkoutKit/./src/shipping/consignment-state.ts","webpack://checkoutKit/./src/shipping/consignment-reducer.ts","webpack://checkoutKit/./src/shipping/shipping-country-state.ts","webpack://checkoutKit/./src/shipping/shipping-country-reducer.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-state.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-reducer.ts","webpack://checkoutKit/./src/store-credit/store-credit-reducer.ts","webpack://checkoutKit/./src/checkout/checkout-state.ts","webpack://checkoutKit/./src/checkout/checkout-reducer.ts","webpack://checkoutKit/./src/common/utility/create-freeze-proxy.ts","webpack://checkoutKit/./src/form/form-selector.ts","webpack://checkoutKit/./src/address/is-address-equal.ts","webpack://checkoutKit/./src/shipping/consignment-selector.ts","webpack://checkoutKit/./src/store-credit/store-credit-state.ts","webpack://checkoutKit/./src/checkout/create-internal-checkout-selectors.ts","webpack://checkoutKit/./src/billing/billing-address-selector.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-selector.ts","webpack://checkoutKit/./src/coupon/coupon-selector.ts","webpack://checkoutKit/./src/customer/customer-selector.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-selector.ts","webpack://checkoutKit/./src/shipping/shipping-address-selector.ts","webpack://checkoutKit/./src/payment/payment-selector.ts","webpack://checkoutKit/./src/cart/cart-selector.ts","webpack://checkoutKit/./src/config/config-selector.ts","webpack://checkoutKit/./src/geography/country-selector.ts","webpack://checkoutKit/./src/customer/customer-strategy-selector.ts","webpack://checkoutKit/./src/coupon/gift-certificate-selector.ts","webpack://checkoutKit/./src/payment/instrument/instrument-selector.ts","webpack://checkoutKit/./src/payment/payment-method-selector.ts","webpack://checkoutKit/./src/payment/payment-strategy-selector.ts","webpack://checkoutKit/./src/shipping/shipping-country-selector.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-selector.ts","webpack://checkoutKit/./src/checkout/checkout-selector.ts","webpack://checkoutKit/./src/order/order-selector.ts","webpack://checkoutKit/./src/store-credit/store-credit-selector.ts","webpack://checkoutKit/./src/checkout/create-checkout-store.ts","webpack://checkoutKit/./src/checkout/create-action-transformer.ts","webpack://checkoutKit/./src/common/error/create-request-error-factory.ts","webpack://checkoutKit/./src/checkout/create-checkout-store-reducer.ts","webpack://checkoutKit/./src/checkout/errors/checkout-not-available-error.ts","webpack://checkoutKit/./src/checkout/checkout-request-sender.ts","webpack://checkoutKit/./src/coupon/map-to-internal-coupon.ts","webpack://checkoutKit/./src/address/map-to-internal-address.ts","webpack://checkoutKit/./src/billing/is-billing-address-like.ts","webpack://checkoutKit/./src/common/selector/selector-decorator.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-error-selector.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-status-selector.ts","webpack://checkoutKit/./src/checkout-buttons/create-checkout-button-selectors.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-initializer.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/checkout-button-method-type.ts","webpack://checkoutKit/./src/common/dom/is-element-id.ts","webpack://checkoutKit/./src/common/dom/set-unique-element-id.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-strategy-action-creator.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/braintree/braintree-paypal-button-strategy.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/googlepay/googlepay-button-strategy.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/masterpass/masterpass-button-strategy.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/paypal/paypal-button-strategy.ts","webpack://checkoutKit/./src/checkout-buttons/create-checkout-button-initializer.ts","webpack://checkoutKit/./src/checkout-buttons/create-checkout-button-registry.ts","webpack://checkoutKit/./src/embedded-checkout/errors/not-embeddable-error.ts","webpack://checkoutKit/./src/common/storage/browser-storage.ts","webpack://checkoutKit/./src/embedded-checkout/errors/invalid-login-token-error.ts","webpack://checkoutKit/./src/embedded-checkout/embedded-checkout.ts","webpack://checkoutKit/./src/embedded-checkout/loading-indicator.ts","webpack://checkoutKit/./src/embedded-checkout/resizable-iframe-creator.ts","webpack://checkoutKit/./src/embedded-checkout/embed-checkout.ts","webpack://checkoutKit/./src/common/utility/cache-key-maps.ts","webpack://checkoutKit/./src/common/utility/cache-key-resolver.ts","webpack://checkoutKit/external \"@bigcommerce/bigpay-client\"","webpack://checkoutKit/external \"messageformat\"","webpack://checkoutKit/./src/common/error/errors/timeout-error.ts","webpack://checkoutKit/./src/common/selector/create-selector.ts","webpack://checkoutKit/./src/common/http-request/join-includes.ts","webpack://checkoutKit/./src/config/config-action-creator.ts","webpack://checkoutKit/./src/config/config-request-sender.ts","webpack://checkoutKit/./src/billing/billing-address-request-sender.ts","webpack://checkoutKit/./src/common/registry/registry.ts","webpack://checkoutKit/./src/payment/strategies/masterpass/masterpass-script-loader.ts","webpack://checkoutKit/./src/remote-checkout/errors/remote-checkout-synchronization-error.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-braintree-initializer.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-stripe-initializer.ts","webpack://checkoutKit/./src/customer/map-to-internal-customer.ts","webpack://checkoutKit/./src/coupon/map-to-internal-gift-certificate.ts","webpack://checkoutKit/./src/order/map-to-internal-order.ts","webpack://checkoutKit/./src/payment/strategies/paypal/paypal-script-loader.ts","webpack://checkoutKit/./src/common/iframe/iframe-resizer.ts","webpack://checkoutKit/./src/common/error/error-action-creator.ts","webpack://checkoutKit/./src/common/utility/get-environment.ts","webpack://checkoutKit/./src/common/log/console-logger.ts","webpack://checkoutKit/./src/common/log/noop-logger.ts","webpack://checkoutKit/./src/common/log/get-default-logger.ts","webpack://checkoutKit/./src/common/log/create-logger.ts","webpack://checkoutKit/./src/coupon/coupon-action-creator.ts","webpack://checkoutKit/./src/coupon/coupon-request-sender.ts","webpack://checkoutKit/./src/coupon/gift-certificate-action-creator.ts","webpack://checkoutKit/./src/coupon/gift-certificate-request-sender.ts","webpack://checkoutKit/./src/customer/customer-strategy-action-creator.ts","webpack://checkoutKit/./src/payment/strategies/amazon-pay/amazon-pay-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-visacheckout-payment-processor.ts","webpack://checkoutKit/./src/payment/strategies/braintree/create-braintree-visacheckout-payment-processor.ts","webpack://checkoutKit/./src/payment/strategies/braintree/visacheckout-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/chasepay/chasepay-script-loader.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-request-sender.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-action-creator.ts","webpack://checkoutKit/./src/customer/customer-action-creator.ts","webpack://checkoutKit/./src/customer/customer-request-sender.ts","webpack://checkoutKit/./src/common/error/errors/not-implemented-error.ts","webpack://checkoutKit/./src/customer/strategies/amazon/amazon-pay-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/braintree/braintree-visacheckout-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/chasepay/chasepay-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/default/default-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/googlepay/googlepay-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/masterpass/masterpass-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/square/square-customer-strategy.ts","webpack://checkoutKit/./src/geography/country-action-creator.ts","webpack://checkoutKit/./src/geography/country-request-sender.ts","webpack://checkoutKit/./src/order/order-request-sender.ts","webpack://checkoutKit/./src/order/order-action-creator.ts","webpack://checkoutKit/./src/common/dom/mutation-observer.ts","webpack://checkoutKit/./src/order/spam-protection/errors/spam-protection-failed-error.ts","webpack://checkoutKit/./src/order/spam-protection/errors/spam-protection-not-completed-error.ts","webpack://checkoutKit/./src/order/spam-protection/google-recaptcha.ts","webpack://checkoutKit/./src/order/spam-protection/google-recaptcha-script-loader.ts","webpack://checkoutKit/./src/order/spam-protection/spam-protection-action-creator.ts","webpack://checkoutKit/./src/order/errors/order-finalization-not-required-error.ts","webpack://checkoutKit/./src/payment/payment-strategy-type.ts","webpack://checkoutKit/./src/payment/payment-strategy-action-creator.ts","webpack://checkoutKit/./src/cart/cart-comparator.ts","webpack://checkoutKit/./src/cart/errors/cart-changed-error.ts","webpack://checkoutKit/./src/checkout/checkout-validator.ts","webpack://checkoutKit/./src/store-credit/store-credit-action-creator.ts","webpack://checkoutKit/./src/store-credit/store-credit-request-sender.ts","webpack://checkoutKit/./src/payment/payment-action-creator.ts","webpack://checkoutKit/./src/payment/payment-request-sender.ts","webpack://checkoutKit/./src/payment/is-vaulted-instrument.ts","webpack://checkoutKit/./src/payment/payment-request-transformer.ts","webpack://checkoutKit/./src/payment/strategies/adyenv2/adyenv2.ts","webpack://checkoutKit/./src/payment/payment-strategy-registry.ts","webpack://checkoutKit/./src/payment/errors/payment-argument-invalid-error.ts","webpack://checkoutKit/./src/payment/strategies/adyenv2/adyenv2-payment-strategy.ts","webpack://checkoutKit/./src/order/order-params.ts","webpack://checkoutKit/./src/payment/strategies/adyenv2/adyenv2-script-loader.ts","webpack://checkoutKit/./src/payment/errors/payment-method-cancelled-error.ts","webpack://checkoutKit/./src/payment/strategies/affirm/affirm-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/affirm/affirmJs.ts","webpack://checkoutKit/./src/payment/strategies/affirm/affirm-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/afterpay/afterpay-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/afterpay/afterpay-script-loader.ts","webpack://checkoutKit/./src/address/is-internal-address-equal.ts","webpack://checkoutKit/./src/common/utility/omit-private.ts","webpack://checkoutKit/./src/address/map-from-internal-address.ts","webpack://checkoutKit/./src/payment/strategies/amazon-pay/amazon-pay-payment-strategy.ts","webpack://checkoutKit/./src/common/overlay/overlay.ts","webpack://checkoutKit/./src/common/utility/cancellable-promise.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-payment-processor.ts","webpack://checkoutKit/./src/payment/errors/payment-method-failed-error.ts","webpack://checkoutKit/./src/payment/is-credit-card-like.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-credit-card-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-paypal-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/cardinal/cardinal.ts","webpack://checkoutKit/./src/payment/strategies/braintree/is-braintree-error.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-visacheckout-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/cardinal/cardinal-three-d-secure-flow.ts","webpack://checkoutKit/./src/payment/strategies/cardinal/cardinal-client.ts","webpack://checkoutKit/./src/payment/strategies/chasepay/chasepay.ts","webpack://checkoutKit/./src/payment/strategies/cardinal/cardinal-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/chasepay/chasepay-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/square/square-form.ts","webpack://checkoutKit/./src/payment/strategies/converge/converge-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/credit-card/credit-card-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/cybersource/cybersource-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/klarna/klarna-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/klarna/klarna-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/legacy/legacy-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/masterpass/masterpass-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/no-payment/no-payment-data-required-strategy.ts","webpack://checkoutKit/./src/payment/strategies/offline/offline-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/offsite/offsite-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/paypal/paypal-pro-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/paypal/paypal-express-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/sage-pay/sage-pay-payment-strategy.ts","webpack://checkoutKit/./src/common/error/errors/unsupported-browser-error.ts","webpack://checkoutKit/./src/payment/strategies/square/square-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/square/square-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/stripev3/stripev3-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/stripev3/stripev3-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/wepay/wepay-risk-client.ts","webpack://checkoutKit/./src/payment/strategies/wepay/wepay-payment-strategy.ts","webpack://checkoutKit/./src/payment/errors/payment-method-declined-error.ts","webpack://checkoutKit/./src/payment/strategies/zip/zip-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/zip/zip-script-loader.ts","webpack://checkoutKit/./src/payment/create-payment-strategy-registry.ts","webpack://checkoutKit/./src/payment/strategies/braintree/create-braintree-payment-processor.ts","webpack://checkoutKit/./src/common/data-store/create-data-store-projection.ts","webpack://checkoutKit/./src/payment/instrument/instrument-action-creator.ts","webpack://checkoutKit/./src/common/date-time/add-minutes.ts","webpack://checkoutKit/./src/common/date-time/is-future.ts","webpack://checkoutKit/./src/payment/instrument/instrument-response-transformer.ts","webpack://checkoutKit/./src/payment/instrument/instrument-request-sender.ts","webpack://checkoutKit/./src/shipping/shipping-country-action-creator.ts","webpack://checkoutKit/./src/shipping/shipping-country-request-sender.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-action-creator.ts","webpack://checkoutKit/./src/shipping/strategies/amazon/amazon-pay-shipping-strategy.ts","webpack://checkoutKit/./src/shipping/strategies/default/default-shipping-strategy.ts","webpack://checkoutKit/./src/common/utility/clone-result.ts","webpack://checkoutKit/./src/common/selector/create-shallow-equal-selector.ts","webpack://checkoutKit/./src/checkout/create-checkout-selectors.ts","webpack://checkoutKit/./src/checkout/checkout-store-selector.ts","webpack://checkoutKit/./src/checkout/checkout-store-error-selector.ts","webpack://checkoutKit/./src/checkout/checkout-store-status-selector.ts","webpack://checkoutKit/./src/common/error/error-message-transformer.ts","webpack://checkoutKit/./src/common/utility/to-single-line.ts","webpack://checkoutKit/./src/checkout/checkout-service.ts","webpack://checkoutKit/./src/checkout/create-checkout-service-error-transformer.ts","webpack://checkoutKit/./src/checkout/create-checkout-service.ts","webpack://checkoutKit/./src/order/spam-protection/create-spam-protection.ts","webpack://checkoutKit/./src/payment/create-payment-client.ts","webpack://checkoutKit/./src/customer/create-customer-strategy-registry.ts","webpack://checkoutKit/./src/shipping/create-shipping-strategy-registry.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-content/handle-frame-loaded-event.ts","webpack://checkoutKit/./src/common/error/errors/custom-error.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-content/iframe-embedded-checkout-messenger.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-content/noop-embedded-checkout-messenger.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-content/create-embedded-checkout-messenger.ts","webpack://checkoutKit/./src/locale/language-service.ts","webpack://checkoutKit/./src/locale/create-language-service.ts","webpack://checkoutKit/./src/currency/currency-formatter.ts","webpack://checkoutKit/./src/currency/currency-service.ts","webpack://checkoutKit/./src/currency/create-currency-service.ts","webpack://checkoutKit/./src/index.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-payment-processor.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/create-googlepay-payment-processor.ts","webpack://checkoutKit/./src/cart/map-to-internal-cart.ts","webpack://checkoutKit/./src/promotion/map-to-discount-notifications.ts","webpack://checkoutKit/./src/billing/errors/unable-to-continue-as-guest-error.ts","webpack://checkoutKit/./src/billing/billing-address-action-creator.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","ConsignmentActionType","__webpack_exports__","CustomerStrategyActionType","PaymentStrategyActionType","ShippingStrategyActionType","MissingDataErrorType","MissingDataError","_super","subtype","_this","this","type","MissingBillingAddress","MissingCart","MissingConsignments","MissingCheckout","MissingCheckoutConfig","MissingOrderConfig","MissingOrder","MissingOrderId","MissingPayment","MissingPaymentToken","MissingPaymentMethod","MissingShippingAddress","MissingSpamProtectionToken","getErrorMessage","tslib__WEBPACK_IMPORTED_MODULE_0__","_standard_error__WEBPACK_IMPORTED_MODULE_1__","CheckoutActionType","CouponActionType","BillingAddressActionType","OrderActionType","PaymentMethodActionType","CheckoutButtonActionType","GiftCertificateActionType","InstrumentActionType","EmbeddedCheckoutEventType","standard_error_StandardError","StandardError","message","_newTarget","setPrototypeOf","__proto__","Error","captureStackTrace","stack","external_tslib_","RemoteCheckoutActionType","DEFAULT_RESPONSE","body","headers","status","RequestError","response","_a","_b","errors","_c","StoreCreditActionType","ConfigActionType","isPlainObject","lodash__WEBPACK_IMPORTED_MODULE_0__","CountryActionType","ShippingCountryActionType","ACKNOWLEDGE","FINALIZE","PaymentMethodClientUnavailableError","ContentType","PaymentActionType","InvalidArgumentError","HOSTED","OFFLINE","isIframeEvent","isEqual","objectA","objectB","options","Array","isArray","length","index","length_1","isArrayEqual","Date","getTime","isDateEqual","RegExp","toString","isRegExpEqual","filter","keyFilter","keysA","keys","keysB","length_2","isObjectEqual","_common_url__WEBPACK_IMPORTED_MODULE_0__","IframeEventPoster","targetOrigin","_targetWindow","_targetOrigin","origin","post","event","window","postMessage","setTarget","CustomerActionType","SpamProtectionActionType","NotInitializedErrorType","NotInitializedError","CustomerNotInitialized","PaymentNotInitialized","ShippingNotInitialized","SpamProtectionNotInitialized","PaymentMethodInvalidError","withMemoizedCombiner","creator","args","_i","arguments","combiner","pop","apply","combinerArgs","result","_bigcommerce_memoize__WEBPACK_IMPORTED_MODULE_1__","ErrorActionType","PaymentMethodActionCreator","_requestSender","loadPaymentMethods","rxjs__WEBPACK_IMPORTED_MODULE_2__","observer","next","_bigcommerce_data_store__WEBPACK_IMPORTED_MODULE_1__","_payment_method_actions__WEBPACK_IMPORTED_MODULE_4__","LoadPaymentMethodsRequested","then","meta","deviceSessionId","sessionHash","LoadPaymentMethodsSucceeded","complete","catch","error","LoadPaymentMethodsFailed","loadPaymentMethod","methodId","LoadPaymentMethodRequested","undefined","LoadPaymentMethodSucceeded","LoadPaymentMethodFailed","_common_data_store__WEBPACK_IMPORTED_MODULE_3__","_common_http_request__WEBPACK_IMPORTED_MODULE_0__","_common_http_request__WEBPACK_IMPORTED_MODULE_1__","PaymentMethodRequestSender","timeout","Accept","JsonV1","X-API-INTERNAL","url","EmbeddedContentEventType","IframeEventListener","sourceOrigin","_sourceOrigin","_common_url__WEBPACK_IMPORTED_MODULE_1__","_isListening","_listeners","listen","addEventListener","_handleMessage","stopListen","removeEventListener","addListener","listener","listeners","push","removeListener","indexOf","splice","trigger","forEach","_is_iframe_event__WEBPACK_IMPORTED_MODULE_3__","data","_common_utility__WEBPACK_IMPORTED_MODULE_2__","mapToInternalLineItems","itemMap","decimalPlaces","idKey","reduce","map","item","amountTransformer","amount_transformer","id","imageUrl","amount","amountAfterDiscount","discount","integerAmount","toInteger","integerAmountAfterDiscount","integerDiscount","quantity","sender","recipient","attributes","variantId","mapGiftCertificateToInternalLineItem","map_to_internal_line_item","mapToInternalLineItemType","INTERNAL_USE_ONLY","CheckoutIncludes","_errors__WEBPACK_IMPORTED_MODULE_0__","BraintreeScriptLoader","_scriptLoader","_window","loadClient","loadScript","braintree","client","load3DS","threeDSecure","loadDataCollector","dataCollector","loadPaypal","paypal","loadPaypalCheckout","paypalCheckout","loadVisaCheckout","visaCheckout","loadGooglePayment","googlePayment","BraintreeSDKCreator","_braintreeScriptLoader","_dataCollectors","initialize","clientToken","_clientToken","getClient","_common_error_errors__WEBPACK_IMPORTED_MODULE_1__","_client","authorization","getPaypal","_paypal","Promise","all","getPaypalCheckout","_paypalCheckout","get3DS","_3ds","getDataCollector","cacheKey","cached","kount","code","deviceData","teardown","resolve","getVisaCheckout","_visaCheckout","getGooglePaymentComponent","_googlePay","_teardown","default","mod","mapToInternalLineItem","_common_utility__WEBPACK_IMPORTED_MODULE_0__","extendedListPrice","extendedSalePrice","discountAmount","downloadsPageUrl","downloadPageUrl","brand","categoryNames","productId","option","addedByPromotion","throwErrorAction","_bigcommerce_data_store__WEBPACK_IMPORTED_MODULE_0__","rxjs__WEBPACK_IMPORTED_MODULE_1__","action","payload","AmountTransformer","_decimalPlaces","Math","round","pow","parseUrl","_error_errors__WEBPACK_IMPORTED_MODULE_0__","test","anchor","document","createElement","href","port","hostname","hash","protocol","pathname","search","cachableActionDecorator","_","descriptor","memoizedMethods","WeakMap","decorateMethod","method","param","lastArg","useCache","fn","instanceMethods","set","memoize_","external_rxjs_","pipe","operators_","store","bindDecorator","target","bindMethodDecorator","decoratedTarget","getOwnPropertyNames","getOwnPropertyDescriptor","bindClassDecorator","boundMethod","omitDeep","predicate","CheckoutActionCreator","_checkoutRequestSender","_configActionCreator","loadCheckout","_checkout_actions__WEBPACK_IMPORTED_MODULE_6__","LoadCheckoutRequested","loadConfig","LoadCheckoutSucceeded","rxjs_operators__WEBPACK_IMPORTED_MODULE_3__","_common_error__WEBPACK_IMPORTED_MODULE_4__","LoadCheckoutFailed","loadDefaultCheckout","state","getState","context","config","getContextConfig","checkoutId","_common_error_errors__WEBPACK_IMPORTED_MODULE_5__","sent","updateCheckout","checkout","getCheckout","UpdateCheckoutRequested","UpdateCheckoutSucceeded","UpdateCheckoutFailed","loadCurrentCheckout","ConsignmentActionCreator","_consignmentRequestSender","unassignItemsByAddress","consignment","existingConsignment","consignments","getConsignmentByAddress","shippingAddress","_common_error_errors__WEBPACK_IMPORTED_MODULE_6__","lineItems","_removeLineItems","cart","getCart","updateConsignment","deleteConsignment","assignItemsByAddress","_createOrUpdateConsignment","_addLineItems","selectShippingOption","rxjs__WEBPACK_IMPORTED_MODULE_3__","getConsignments","consignmentUpdateBody","shippingOptionId","consignmentMeta","_consignment_actions__WEBPACK_IMPORTED_MODULE_7__","UpdateShippingOptionRequested","UpdateShippingOptionSucceeded","UpdateShippingOptionFailed","loadShippingOptions","LoadShippingOptionsRequested","params","include","_checkout_checkout_params__WEBPACK_IMPORTED_MODULE_4__","AvailableShippingOptions","LoadShippingOptionsSucceeded","LoadShippingOptionsFailed","updateAddress","address","_getConsignmentRequestBody","createConsignments","CreateConsignmentsRequested","CreateConsignmentsSucceeded","CreateConsignmentsFailed","UpdateConsignmentRequested","UpdateConsignmentSucceeded","UpdateConsignmentFailed","consignmentId","DeleteConsignmentRequested","DeleteConsignmentSucceeded","DeleteConsignmentFailed","updateShippingOption","_isUpdateConsignmentRequest","physicalItems","itemId","_hydrateLineItems","lineItemIds","existingItem","sharedItem","lodash__WEBPACK_IMPORTED_MODULE_2__","lineItem","concat","request","DEFAULT_PARAMS","join","ConsignmentRequestSender","put","delete","getCallbackUrl","location","mapToInternalShippingOption","isSelected","description","price","cost","selected","isRecommended","transitTime","isPrivate","UnrecoverableError","request_error","joinErrors","map_from_payment_error_response_joinErrors","RequestErrorFactory","_factoryMethods","register","detail","title","mapFromInternalErrorResponse","mapFromStorefrontErrorResponse","mapFromPaymentErrorResponse","timeout_error","factoryMethod","createError","_getType","_isStorefrontErrorResponseBody","_isInternalErrorResponseBody","internalType","external_lodash_","split","errorResponse","storefrontErrorResponse","internalErrorResponse","clearErrorReducer","error_actions","ClearError","isClearErrorAction","omit_deep","replace","currentValue","newValue","is_equal","objectSet","DEFAULT_STATE","statuses","billingAddressReducer","data_store_","dataReducer","errorsReducer","statusesReducer","reducer","billing_address_actions","UpdateBillingAddressSucceeded","ContinueAsGuestSucceeded","checkout_actions","order_actions","LoadOrderSucceeded","billingAddress","UpdateBillingAddressRequested","UpdateBillingAddressFailed","ContinueAsGuestRequested","ContinueAsGuestFailed","arrayReplace","currentArray","newArray","matchObject","a","b","sameAsCurrentCount","sameAsNewCount","countSameAsReplaced","replacedValue","newItem","currentItem","is_plain_object","objectMerge","currentObject","newObject","cart_state_DEFAULT_STATE","cartReducer","cart_reducer_dataReducer","cart_reducer_errorsReducer","cart_reducer_statusesReducer","consignment_actions","coupon_actions","ApplyCouponSucceeded","RemoveCouponSucceeded","gift_certificate_actions","ApplyGiftCertificateSucceeded","RemoveGiftCertificateSucceeded","checkout_button_state_DEFAULT_STATE","DEFAULT_DATA_STATE","initializedContainers","DEFAULT_ERROR_STATE","DEFAULT_STATUS_STATE","checkoutButtonReducer","checkout_button_reducer_dataReducer","checkout_button_reducer_errorsReducer","checkout_button_reducer_statusesReducer","checkout_button_actions","InitializeButtonSucceeded","containerId","DeinitializeButtonSucceeded","InitializeButtonRequested","InitializeButtonFailed","DeinitializeButtonRequested","DeinitializeButtonFailed","config_state_DEFAULT_STATE","configReducer","config_reducer_dataReducer","config_reducer_errorsReducer","config_reducer_statusesReducer","config_actions","LoadConfigSucceeded","LoadConfigFailed","LoadConfigRequested","coupon_state_DEFAULT_STATE","couponReducer","coupon_reducer_dataReducer","coupon_reducer_errorsReducer","coupon_reducer_statusesReducer","coupons","ApplyCouponRequested","ApplyCouponFailed","RemoveCouponRequested","RemoveCouponFailed","gift_certificate_state_DEFAULT_STATE","giftCertificateReducer","gift_certificate_reducer_dataReducer","gift_certificate_reducer_errorsReducer","gift_certificate_reducer_statusesReducer","giftCertificates","ApplyGiftCertificateRequested","ApplyGiftCertificateFailed","RemoveGiftCertificateRequested","RemoveGiftCertificateFailed","customer_state_DEFAULT_STATE","customerReducer","customer_reducer_dataReducer","customer","customer_strategy_state_DEFAULT_STATE","customerStrategyReducer","customer_strategy_reducer_dataReducer","customer_strategy_reducer_errorsReducer","customer_strategy_reducer_statusesReducer","customer_strategy_actions","InitializeSucceeded","isInitialized","DeinitializeSucceeded","InitializeRequested","initializeError","initializeMethodId","InitializeFailed","DeinitializeRequested","deinitializeError","deinitializeMethodId","DeinitializeFailed","SignInRequested","SignInSucceeded","signInError","signInMethodId","SignInFailed","SignOutRequested","SignOutSucceeded","signOutError","signOutMethodId","SignOutFailed","WidgetInteractionStarted","WidgetInteractionFinished","widgetInteractionError","widgetInteractionMethodId","WidgetInteractionFailed","isInitializing","isDeinitializing","isSigningIn","isSigningOut","isWidgetInteracting","country_state_DEFAULT_STATE","countryReducer","country_reducer_dataReducer","country_reducer_errorsReducer","country_reducer_statusesReducer","country_actions","LoadCountriesSucceeded","LoadCountriesRequested","LoadCountriesFailed","order_state_DEFAULT_STATE","orderReducer","order_reducer_dataReducer","order_reducer_errorsReducer","metaReducer","order_reducer_statusesReducer","LoadOrderPaymentsSucceeded","FinalizeOrderSucceeded","SubmitOrderSucceeded","callbackUrl","order","orderToken","token","payment","spam_protection_actions","Completed","LoadOrderRequested","LoadOrderPaymentsRequested","LoadOrderFailed","LoadOrderPaymentsFailed","paymentReducer","payment_reducer_dataReducer","payment_actions","SubmitPaymentSucceeded","payment_method_state_DEFAULT_STATE","paymentMethodReducer","payment_method_reducer_dataReducer","payment_method_reducer_errorsReducer","payment_method_reducer_metaReducer","payment_method_reducer_statusesReducer","payment_method_actions","array","defaultPredicate","mergeOrPush","gateway","methodA","methodB","loadMethodId","loadMethodError","isLoadingMethod","payment_strategy_state_DEFAULT_STATE","paymentStrategyReducer","payment_strategy_reducer_dataReducer","payment_strategy_reducer_errorsReducer","payment_strategy_reducer_statusesReducer","payment_strategy_actions","ExecuteRequested","ExecuteSucceeded","executeError","executeMethodId","ExecuteFailed","FinalizeRequested","FinalizeSucceeded","finalizeError","finalizeMethodId","FinalizeFailed","isExecuting","isFinalizing","instrument_state_DEFAULT_STATE","instrumentReducer","instrument_reducer_dataReducer","instrument_reducer_errorsReducer","instrument_reducer_metaReducer","instrument_reducer_statusesReducer","instrument_actions","LoadInstrumentsSucceeded","vaultedInstruments","DeleteInstrumentSucceeded","instrument","bigpayToken","instrumentId","LoadInstrumentsRequested","DeleteInstrumentRequested","deleteError","failedInstrument","LoadInstrumentsFailed","DeleteInstrumentFailed","isDeleting","deletingInstrument","remote_checkout_state_DEFAULT_STATE","remoteCheckoutReducer","remote_checkout_reducer_dataReducer","remote_checkout_actions","InitializeRemoteBillingSucceeded","billing","InitializeRemoteShippingSucceeded","shipping","LoadRemoteSettingsSucceeded","UpdateRemoteCheckout","consignment_state_DEFAULT_STATE","updateShippingOptionError","updateError","isUpdating","isUpdatingShippingOption","consignmentReducer","consignment_reducer_dataReducer","consignment_reducer_errorsReducer","consignment_reducer_statusesReducer","customer_actions","SignOutCustomerSucceeded","_d","_e","_f","shipping_country_state_DEFAULT_STATE","shippingCountryReducer","shipping_country_reducer_dataReducer","shipping_country_reducer_errorsReducer","shipping_country_reducer_statusesReducer","shipping_country_actions","LoadShippingCountriesSucceeded","LoadShippingCountriesRequested","LoadShippingCountriesFailed","shipping_strategy_state_DEFAULT_STATE","shippingStrategyReducer","shipping_strategy_reducer_dataReducer","shipping_strategy_reducer_errorsReducer","shipping_strategy_reducer_statusesReducer","shipping_strategy_actions","UpdateAddressRequested","UpdateAddressSucceeded","updateAddressError","updateAddressMethodId","UpdateAddressFailed","SelectOptionRequested","SelectOptionSucceeded","selectOptionError","selectOptionMethodId","SelectOptionFailed","isUpdatingAddress","isSelectingOption","store_credit_reducer_DEFAULT_STATE","storeCreditReducer","store_credit_reducer_errorsReducer","store_credit_reducer_statusesReducer","store_credit_actions","ApplyStoreCreditRequested","ApplyStoreCreditSucceeded","ApplyStoreCreditFailed","checkout_state_DEFAULT_STATE","checkoutReducer","checkout_reducer_dataReducer","checkout_reducer_errorsReducer","checkout_reducer_statusesReducer","orderId","createFreezeProxy","trap","proxy","iteratee","getPrototypeOf","traversePrototypeOf","charAt","createProxy","createFormSelectorFactory","getShippingAddressFields","create_selector","countries","countryCode","selectedCountry","storeConfig","formFields","shippingAddressFields","field","processField","getBillingAddressFields","billingAddressFields","country","items","label","fieldType","itemtype","processCountry","subdivisions","required","processProvince","hasPostalCodes","Boolean","processsPostCode","normalize","firstName","lastName","company","address1","address2","city","stateOrProvince","postalCode","phone","customFields","createConsignmentSelectorFactory","getConsignmentById","addressA","addressB","getShippingOption","selectedShippingOption","getLoadError","loadError","getCreateError","getLoadShippingOptionsError","loadShippingOptionsError","getUnassignedItems","assignedLineItemIds","itemIds","getUpdateError","getDeleteError","getItemAssignmentError","getUpdateShippingOptionError","isLoading","isLoadingShippingOptions","isCreating","isAssigningItems","store_credit_state_DEFAULT_STATE","createInternalCheckoutSelectorsFactory","getBillingAddress","getContinueAsGuestError","isContinuingAsGuest","getInitializeError","getDeinitializeError","getCoupons","getRemoveError","getApplyError","isApplying","isRemoving","getCustomer","getShippingAddress","getInternalPayment","getGatewayPayment","getHostedPayment","getPaymentId","getPaymentStatus","getPaymentToken","getPaymentRedirectUrl","isPaymentDataRequired","isPaymentDataSubmitted","createBillingAddressSelector","continueAsGuestError","createCartSelector","createCartSelectorFactory","createCheckoutButtonSelector","createConfigSelector","getConfig","getStoreConfig","getExternalSource","externalSource","createConfigSelectorFactory","createCountrySelector","getCountries","createCountrySelectorFactory","createCouponSelector","removeCouponError","applyCouponError","isApplyingCoupon","isRemovingCoupon","createCustomerSelector","createCustomerStrategySelector","getSignInError","getSignOutError","getWidgetInteractionError","createCustomerStrategySelectorFactory","createGiftCertificateSelector","getGiftCertificates","removeGiftCertificateError","applyGiftCertificateError","isApplyingGiftCertificate","isRemovingGiftCertificate","createGiftCertificateSelectorFactory","createInstrumentSelector","getInstruments","instruments","getInstrumentsMeta","createInstrumentSelectorFactory","createFormSelector","createPaymentMethodSelector","getPaymentMethods","paymentMethods","getPaymentMethodsMeta","getPaymentMethod","gatewayId","getLoadMethodError","createPaymentMethodSelectorFactory","createPaymentStrategySelector","getExecuteError","getFinalizeError","getWidgetInteractingError","createPaymentStrategySelectorFactory","createRemoteCheckoutSelector","createShippingAddressSelector","createShippingCountrySelector","getShippingCountries","createShippingCountrySelectorFactory","createShippingStrategySelector","getUpdateAddressError","getSelectOptionError","createShippingStrategySelectorFactory","createConsignmentSelector","createCheckoutSelector","getOutstandingBalance","useStoreCredit","grandTotal","storeCredit","max","outstandingBalance","createCheckoutSelectorFactory","createOrderSelector","getOrder","getOrderMeta","createOrderSelectorFactory","createPaymentSelector","payments","providerId","providerType","payment_method_types","internalPayment","step","redirectUrl","paymentMethod","nonce","payment_status_types","createStoreCreditSelector","applyError","createStoreCreditSelectorFactory","checkoutButton","customerStrategies","form","paymentStrategies","remoteCheckout","shippingCountries","shippingStrategies","selectors","shouldWarnMutation","createCheckoutStore","initialState","requestErrorFactory","factory","actionTransformer","request_error_factory","unrecoverable_error","payment_method_invalid_error","action$","every","createInternalCheckoutSelectors","stateTransformer","CheckoutNotAvailableError","checkout_request_sender_CheckoutRequestSender","CheckoutRequestSender","content_type","join_includes","checkout_default_includes","checkout_not_available_error","mapToInternalCoupon","couponTypes","coupon","displayName","discountType","couponType","mapToInternalAddress","addressId","isBillingAddressLike","addressLine1","addressLine2","province","provinceCode","stateOrProvinceCode","postCode","selectorDecorator","resolver","cache_key_resolver","memoizedMethod","bind_decorator","cachedValue","getUsedCount","is_private","cache","getKey","selectorMethodDecorator","checkout_button_error_selector","CheckoutButtonErrorSelector","_checkoutButton","getInitializeButtonError","getDeinitializeButtonError","checkout_button_status_selector","CheckoutButtonStatusSelector","isInitializingButton","isDeinitializingButton","createCheckoutButtonSelectors","CheckoutButtonMethodType","checkout_button_initializer","CheckoutButtonInitializer","_store","_buttonStrategyActionCreator","_state","subscribe","subscriber","filters","initializeButton","containerIds","selector","idPrefix","containers","querySelectorAll","invalid_argument_error","slice","container","setUniqueElementId","queueId","dispatch","deinitializeButton","deinitialize","CheckoutButtonStrategyActionCreator","_registry","_paymentMethodActionCreator","throw_error_action","checkout_button_method_type","BraintreePaypalButtonStrategy","_checkoutActionCreator","_braintreeSDKCreator","_paypalScriptLoader","_formPoster","_offerCredit","paypalOptions","braintreepaypalcredit","braintreepaypal","_paymentMethod","missing_data_error","allowedSources","disallowedSources","allowCredit","FUNDING","CREDIT","Button","render","env","testMode","commit","shouldProcessPayment","funding","allowed","disallowed","style","shape","_setupPayment","onPaymentError","onAuthorize","_tokenizePayment","onAuthorizeError","onError","addresses","not_initialized_error","CheckoutButtonNotInitialized","createPayment","flow","enableShippingAddress","shippingAddressEditable","shippingAddressOverride","_mapToBraintreeAddress","currency","offerCredit","tokenizePayment","postForm","payment_type","provider","device_data","shipping_address","JSON","stringify","_mapToLegacyShippingAddress","billing_address","_mapToLegacyBillingAddress","details","recipientName","email","first_name","last_name","phone_number","address_line_1","line1","address_line_2","line2","country_code","postal_code","googlepay_button_strategy","GooglePayButtonStrategy","_googlePayPaymentProcessor","_methodId","_getMethodId","_walletButton","_createSignInButton","parentNode","removeChild","getElementById","googlePayButton","createButton","_handleWalletButtonClick","appendChild","preventDefault","displayWallet","paymentData","handleSuccess","updateShippingAddress","_onPaymentSelectComplete","_onError","Content-Type","masterpass_button_strategy","MasterpassButtonStrategy","_masterpassScriptLoader","initializationData","load","masterpass","_masterpassClient","_signInButton","buttonContainer","button","src","_createMasterpassPayload","allowedCardTypes","cartAmount","cartId","suppressShippingAddress","get_callback_url","PaypalButtonStrategy","_host","merchantId","clientId","actions","internal_api_headers","res","paymentID","payerID","paymentId","payerId","payerInfo","payer","payer_info","createCheckoutButtonInitializer","host","create_checkout_store","requestSender","request_sender_","formPoster","form_poster_","checkout_button_strategy_action_creator","registry","registry_registry","scriptLoader","script_loader_","checkoutActionCreator","checkout_action_creator","checkout_request_sender","config_action_creator","config_request_sender","BRAINTREE_PAYPAL","braintree_paypal_button_strategy","braintree_sdk_creator","braintree_script_loader","paypal_script_loader","BRAINTREE_PAYPAL_CREDIT","MASTERPASS","masterpass_script_loader","GOOGLEPAY_BRAINTREE","create_googlepay_payment_processor","googlepay_braintree_initializer","GOOGLEPAY_STRIPE","googlepay_stripe_initializer","PAYPALEXPRESS","paypal_button_strategy","createCheckoutButtonRegistry","payment_method_action_creator","payment_method_request_sender","NotEmbeddableErrorType","BrowserStorage","_namespace","getItem","rawValue","external_local_storage_fallback_default","withNamespace","parse","removeItem","getItemOnce","setItem","InvalidLoginTokenError","NotEmbeddableError","UnknownError","standard_error","embedded_checkout","EmbeddedCheckout","_iframeCreator","_messageListener","_messagePoster","_loadingIndicator","_storage","_location","_options","_isAttached","onComplete","embedded_checkout_events","CheckoutComplete","CheckoutError","onLoad","CheckoutLoaded","onFrameLoad","FrameLoaded","onSignOut","SignedOut","_configureStyles","attach","show","_allowCookie","_attemptLogin","createFrame","iframe","_iframe","hide","_retryAllowCookie","FrameError","detach","iFrameResizer","close","contentWindow","styles","embedded_content_events","StyleConfigured","parse_url","reject","invalid_login_token_error","encodeURIComponent","visibility","not_embeddable_error","MissingContent","DEFAULT_STYLES","size","color","backgroundColor","ROTATION_ANIMATION","LoadingIndicator","_styles","_defineAnimation","_container","_buildContainer","_indicator","_buildIndicator","parentId","parent_1","opacity","handleTransitionEnd","display","bottom","left","height","width","position","right","top","transition","indicator","borderRadius","border","borderColor","margin","transform","transformStyle","animation","head","sheet","CSSStyleSheet","insertRule","ResizableIframeCreator","MissingContainer","allowPaymentRequest","_toResizableFrame","timeoutInterval","setTimeout","handleMessage","is_iframe_event","contentId","iframes","iframe_resizer","scrolling","sizeWidth","heightCalculationMethod","clearTimeout","embedCheckout","STORAGE_PREFIX","resizable_iframe_creator","iframe_event_listener","iframe_event_poster","loading_indicator","loadingIndicator","browser_storage","isTerminalCacheKeyMap","cache_key_resolver_CacheKeyResolver","CacheKeyResolver","_lastId","_map","maps","_usedMaps","maxSize","external_shallowequal_","onExpire","_resolveMap","parentMap","usedCount","_generateMap","_removeLeastUsedMap","isMatched","mapIndex","unshift","parent","terminalMap","recentlyUsedMap","_removeMap","isRootCacheKeyMap","TimeoutError","reselect__WEBPACK_IMPORTED_MODULE_0__","_with_memoized_combiner__WEBPACK_IMPORTED_MODULE_1__","joinIncludes","includes","ConfigActionCreator","_configRequestSender","_config_actions__WEBPACK_IMPORTED_MODULE_4__","ConfigRequestSender","BillingAddressRequestSender","createAddress","Registry","_factories","_instances","defaultToken","cacheToken","_getInstance","_hasFactory","_error_errors__WEBPACK_IMPORTED_MODULE_1__","_hasInstance","MasterpassScriptLoader","RemoteCheckoutSynchronizationError","GooglePayBraintreeInitializer","hasShippingAddress","googleBraintreePaymentInstance","_googlePaymentInstance","_createGooglePayPayload","parseResponse","paymentMethodData","tokenizationData","androidPayCards","cardType","lastFour","lastTwo","binData","platformToken","googlePayBraintreePaymentDataRequest","merchantInfo","authJwt","merchantName","googleMerchantName","googleMerchantId","transactionInfo","currencyCode","totalPriceStatus","totalPrice","toFixed","cardRequirements","billingAddressRequired","billingAddressFormat","shippingAddressRequired","emailRequired","phoneNumberRequired","_mapGooglePayBraintreeDataRequestToGooglePayDataRequestV2","createPaymentDataRequest","googlePayBraintreeDataRequestV1","apiVersion","apiVersionMinor","allowedPaymentMethods","parameters","allowedAuthMethods","allowedCardNetworks","billingAddressParameters","format","tokenizationSpecification","braintree:apiVersion","braintree:authorizationFingerprint","paymentMethodTokenizationParameters","braintree:merchantId","braintree:sdkVersion","shippingAddressParameters","GooglePayStripeInitializer","_mapGooglePayStripeDataRequestToGooglePayDataRequestV2","card","last4","err","stripe:version","stripeVersion","stripe:publishableKey","stripePublishableKey","mapToInternalCustomer","_address__WEBPACK_IMPORTED_MODULE_0__","customerId","isGuest","fullName","customerGroupName","customerGroup","mapToInternalGiftCertificate","giftCertificate","discountedAmount","used","remainingBalance","remaining","balance","purchaseDate","mapToInternalOrder","orderMeta","_common_utility__WEBPACK_IMPORTED_MODULE_3__","_cart__WEBPACK_IMPORTED_MODULE_2__","customerCanBeCreated","mapToInternalOrderPayment","subtotal","baseAmount","lodash__WEBPACK_IMPORTED_MODULE_1__","sum","_coupon__WEBPACK_IMPORTED_MODULE_4__","discountNotifications","totalDiscountedAmount","appliedGiftCertificates","socialData","mapToInternalSocialDataList","hasDigitalItems","isDownloadable","isComplete","shippingCostTotal","amountBeforeDiscount","shippingCostBeforeDiscount","integerAmountBeforeDiscount","mapToStoreCredit","taxes","taxTotal","handling","handlingCostTotal","orderAmount","orderAmountAsInteger","mapToInternalPaymentStatus","isDefaultOrderPayment","helpText","instructions","returnUrl","socialDataObject","digitalItems","socialMedia","image","link","shareText","text","sharingLink","channelName","channel","channelCode","PaypalScriptLoader","iframeResizer","originalIframeResizer","setupContentWindowForIframeResizer","ErrorActionCreator","clearError","getEnvironment","process","NODE_ENV","e","ConsoleLogger","_console","log","messages","_logToConsole","info","warn","debug","NoopLogger","isEnabled","logger","console_logger","console","noop_logger","getDefaultLogger","CouponActionCreator","_couponRequestSender","applyCoupon","removeCoupon","CouponRequestSender","couponCode","checkout_params","GiftCertificateActionCreator","_giftCertificateRequestSender","applyGiftCertificate","removeGiftCertificate","GiftCertificateRequestSender","giftCertificateCode","CustomerStrategyActionCreator","_strategyRegistry","signIn","credentials","signOut","widgetInteraction","AmazonPayScriptLoader","loadWidget","onPaymentReady","region","toLowerCase","_configureWidget","onLoginReady","amazon","Login","setClientId","setUseCookie","onAmazonLoginReady","OffAmazonPayments","onAmazonPaymentsReady","BraintreeVisaCheckoutPaymentProcessor","createInitOptions","settings","locale","collectShipping","paymentRequest","String","braintreeVisaCheckout","tokenize","tokenizedPayload","_toVisaCheckoutAddress","_postForm","userData","cardInformation","userEmail","card_information","_getCardInformation","_getAddress","phoneNumber","streetAddress","extendedAddress","locality","number","createBraintreeVisaCheckoutPaymentProcessor","braintreeScriptLoader","braintreeSDKCreator","braintree_visacheckout_payment_processor","VisaCheckoutScriptLoader","V","payment_method_client_unavailable_error","ChasePayScriptLoader","JPMC","RemoteCheckoutRequestSender","initializeBilling","methodName","initializeShipping","initializePayment","loadSettings","generateToken","trackAuthorizationEvent","RemoteCheckoutActionCreator","_remoteCheckoutRequestSender","InitializeRemoteBillingRequested","InitializeRemoteBillingFailed","InitializeRemoteShippingRequested","InitializeRemoteShippingFailed","InitializeRemotePaymentRequested","InitializeRemotePaymentSucceeded","InitializeRemotePaymentFailed","LoadRemoteSettingsRequested","LoadRemoteSettingsFailed","SignOutRemoteCustomerRequested","SignOutRemoteCustomerSucceeded","SignOutRemoteCustomerFailed","CustomerActionCreator","_customerRequestSender","signInCustomer","SignInCustomerRequested","SignInCustomerSucceeded","SignInCustomerFailed","signOutCustomer","SignOutCustomerRequested","SignOutCustomerFailed","CustomerRequestSender","NotImplementedError","AmazonPayCustomerStrategy","_remoteCheckoutActionCreator","amazonOptions","not_implemented_error","useAmazonAddressBook","_handleAuthorization","authorize","popup","scope","tokenPrefix","BraintreeVisaCheckoutCustomerStrategy","_customerStrategyActionCreator","_braintreeVisaCheckoutPaymentProcessor","_visaCheckoutScriptLoader","_buttonClassName","visaCheckoutOptions","braintreevisacheckout","initOptions","storeProfile","storeLanguage","signInButton","init","on","paymentSuccessPayload","_paymentInstrumentSelected","buttonClass","querySelector","_insertVisaCheckoutButton","visaCheckoutButton","className","innerHTML","ChasePayCustomerStrategy","_chasePayScriptLoader","chasePayOptions","chasepay","digitalSessionId","ChasePay","configure","language","isChasePayUp","insertButtons","EventType","START_CHECKOUT","sessionId","startCheckout","COMPLETE_CHECKOUT","requestId","merchantRequestId","_setExternalCheckoutData","_reloadPage","sessionToken","sendRequest","fromChasePay","DefaultCustomerStrategy","_customerActionCreator","googlepay_customer_strategy","GooglePayCustomerStrategy","googlePayOptions","_getGooglePayOptions","googlepaybraintree","googlepaystripe","MasterpassCustomerStrategy","masterpassOptions","Masterpass","SquareCustomerStrategy","CountryActionCreator","_countryRequestSender","loadCountries","CountryRequestSender","_config","Accept-Language","OrderRequestSender","loadOrder","submitOrder","finalizeOrder","OrderActionCreator","_orderRequestSender","_checkoutValidator","_spamProtectionActionCreator","loadOrderPayments","loadCurrentOrder","_getCurrentOrderId","SubmitOrderRequested","spamProtectionToken","checkoutSettings","isSpamProtectionEnabled","validate","_mapToOrderRequestBody","customerMessage","SubmitOrderFailed","FinalizeOrderRequested","FinalizeOrderFailed","executeSpamProtection","execute","MutationObserverFactory","callback","MutationObserver","SpamProtectionFailedError","SpamProtectionNotCompletedError","GoogleRecaptcha","googleRecaptchaScriptLoader","mutationObserverFactory","sitekey","event$","_event$","recaptcha","getResponse","reset","error-callback","spam_protection_failed_error","_recaptcha","_watchRecaptchaChallengeWindow","iframeElement","iframeContainer","parentElement","spam_protection_not_completed_error","observe","attributeFilter","GoogleRecaptchaScriptLoader","_loadPromise","_loadScript","grecaptcha","SpamProtectionActionCreator","_googleRecaptcha","recaptchaSitekey","googleRecaptchaSitekey","SubmitFailed","PaymentStrategyType","OrderFinalizationNotRequiredError","payment_strategy_type","PaymentStrategyActionCreator","_orderActionCreator","strategy","getByMethod","NO_PAYMENT_DATA_REQUIRED","finalize","_loadOrderPaymentsIfNeeded","order_finalization_not_required_error","CartComparator","cartA","cartB","_normalize","sort","itemA","itemB","localeCompare","giftWrapping","CartChangedError","CheckoutValidator","comparator","cart_comparator","_compareCoupons","_compareGiftCertificates","cart_changed_error","couponsA","couponsB","giftCertificatesA","giftCertificatesB","StoreCreditActionCreator","_storeCreditRequestSender","applyStoreCredit","removeStoreCredit","StoreCreditRequestSender","PaymentActionCreator","_paymentRequestSender","_paymentRequestTransformer","submitPayment","SubmitPaymentRequested","SubmitPaymentFailed","initializeOffsitePayment","InitializeOffsitePaymentRequested","InitializeOffsitePaymentSucceeded","InitializeOffsitePaymentFailed","PaymentRequestSender","_transformResponse","statusText","isVaultedInstrument","ThreeDS2ComponentType","ResultCode","PaymentRequestTransformer","checkoutState","_getPaymentMethod","shippingOption","contextConfig","instrumentMeta","paymentMeta","internalCustomer","map_to_internal_customer","authToken","vaultAccessToken","map_to_internal_address","map_to_internal_shipping_option","map_to_internal_cart","map_to_internal_order","quoteMeta","geoCountryCode","source","paymentMethodSelector","PaymentStrategyRegistry","_getToken","_hasFactoryForMethod","_isLegacyMethod","LEGACY","OFFSITE","CREDIT_CARD","clientSidePaymentProviders","paymentSettings","PaymentArgumentInvalidError","invalidFields","OrderIncludes","AdyenV2PaymentStrategy","_paymentActionCreator","_adyenV2ScriptLoader","_locale","adyenv2","_adyenv2","configuration","environment","originKey","paymentMethodsResponse","adyenCheckout","_adyenCheckout","adyenComponent","onChange","_updateStateContainer","mount","_adyenComponent","shouldSaveInstrument","payment_argument_invalid_error","paymentPayload","_getStateContainer","three_ds_result","result_code","IdentifyShopper","_handle3DS2Fingerprint","ChallengeShopper","_handle3DS2Challenge","acs_url","PaReq","payer_auth_request","TermUrl","callback_url","MD","merchant_data","unmount","_getAdyenV2PaymentInitializeOptions","_stateContainer","_getThreeDS2ChallengeWidgetSize","threeDS2Options","threeDS2ChallengeWidgetSize","resultObject","paymentMethodId","threeDS2Component","ThreeDS2Challenge","challengeToken","challengeData","challengePaymentPayload","payment_data","threeDS2Container","threeDS2ContainerId","ThreeDS2DeviceFingerprint","fingerprintToken","fingerprintData","fingerprintPaymentPayload","newState","isValid","AdyenV2ScriptLoader","_stylesheets","_loadStylesheet","AdyenCheckout","stylesheet","onload","onerror","rel","PaymentMethodCancelledError","AffirmPaymentStrategy","_affirmScriptLoader","publicKey","affirm","_affirm","requestOptions","PhysicalItemsCategories","DigitalItemsCategories","_getCheckoutInformation","open","onFail","failObject","reason","payment_method_cancelled_error","onSuccess","successObject","ui","checkout_token","_getBillingAddress","merchant","user_confirmation_url","links","checkoutLink","user_cancel_url","user_confirmation_url_action","_getShippingAddress","_getItems","metadata","shipping_type","_getShippingType","platform_type","platform_version","platform_affirm","discounts","_getDiscounts","order_id","shipping_amount","tax_amount","total","first","last","full","zipcode","display_name","sku","unit_price","salePrice","qty","item_image_url","item_url","categories","_getCategories","customItems","_g","listPrice","line","discount_amount","discount_display_name","DISCOUNTED_AMOUNT","categoryTree","category","affirmJs","Function","AffirmScriptLoader","apikey","scriptURI","_getScriptURI","AfterpayPaymentStrategy","_storeCreditActionCreator","_afterpayScriptLoader","storeCountryName","storeCountry","_mapCountryToISO2","_afterpaySdk","_redirectToAfterpay","countryName","redirect","SCRIPTS_DEFAULT","SCRIPTS_US","AfterpayScriptLoader","AfterPay","isInternalAddressEqual","ignoredKeys","mapFromInternalAddress","AmazonPayPaymentStrategy","_billingAddressActionCreator","_isPaymentMethodSelected","_walletOptions","_createWallet","referenceId","_getOrderReferenceId","sellerId","_getMerchantId","is3dsEnabled","_processPaymentWith3ds","_getOrderReferenceIdFromInitializationData","orderReferenceId","onPaymentSelect","onReady","walletOptions","amazonOrderReferenceId","design","designMode","orderReference","_synchronizeBillingAddress","_updateOrderReference","widget","Widgets","Wallet","remote_checkout_synchronization_error","remoteAddress","internalBillingAddress","getAmazonOrderReferenceId","initConfirmationFlow","confirmationFlow","success","Overlay","_element","_createElement","_registerClick","remove","_unregisterClick","_removeAfterTransition","element","background","transitionDuration","zIndex","onClick","onClick_1","handeTransition","propertyName","promise","cancellable","cancel","race","BraintreePaymentProcessor","_overlay","_threeDSecureOptions","preloadPaypal","tokenizeCard","requestData","_mapToCreditCard","creditCards","focusWindow","useraction","verifyCard","addFrame","removeFrame","cancelVerifyCard","verification","cancellable_promise","appendSessionId","processedPayment","creditCard","cardholderName","ccName","ccNumber","cvv","ccCvv","expirationDate","ccExpiry","month","year","endpoint","PaymentMethodFailedError","isCreditCardLike","BraintreeCreditCardPaymentStrategy","_braintreePaymentProcessor","_is3dsEnabled","_handleError","orderRequest","_preparePaymentData","payment_method_failed_error","_isUsingVaulting","tokenizedCard","CardinalInitializationType","CardinalEventType","CardinalValidatedAction","CardinalPaymentType","CardinalTriggerEvents","CardinalPaymentBrand","CardinalSignatureVerification","BraintreePaypalPaymentStrategy","_credit","braintreeOptions","isBraintreeError","BraintreeVisaCheckoutPaymentStrategy","_paymentStrategyActionCreator","visaInitOptions","CardinalThreeDSecureFlow","_cardinalClient","prepare","start","runBinProcess","_getBinNumber","getThreeDSecureData","_getOrderData","entry","iin","CardinalSignatureValidationErrors","ChasePayEventType","CardinalClient","_sdk","_getClientSDK","SetupCompleted","off","Validated","ActionCode","ErrorNumber","ErrorDescription","setup","Init","jwt","binNumber","BinProcess","Status","threeDSecureData","orderData","Success","NoAction","Payment","ExtendedData","SignatureVerification","Yes","Failure","continueObject","AcsUrl","Payload","partialOrder","_mapToPartialOrder","continue","CCA","transactionId","consumer","BillingAddress","_mapToCardinalAddress","Account","_mapToCardinalAccount","Email1","ShippingAddress","Consumer","OrderDetails","OrderNumber","Amount","CurrencyCode","OrderChannel","TransactionId","AccountNumber","Number","ExpirationMonth","ExpirationYear","NameOnAccount","CardCode","cardinalAddress","FirstName","LastName","Address1","City","State","PostalCode","CountryCode","Address2","Phone1","CardinalScriptLoader","Cardinal","CardBrand","DigitalWalletType","chasepay_payment_strategy","ChasePayPaymentStrategy","_wepayRiskClient","_walletEvent$","walletButton","_configureWallet","_chasePayClient","_getPayment","_displayWallet","_createOrder","logoContainer","insertBrandings","CancelCheckout","onCancel","CompleteCheckout","_setSessionToken","showLoadingAnimation","getRiskToken","riskToken","paymentCryptogram","cryptogramId","eci","btoa","reqTokenId","expDate","substr","accountNum","accountMask","extraData","ConvergePaymentStrategy","CreditCardPaymentStrategy","CyberSourcePaymentStrategy","_threeDSecureFlow","googlepay_payment_strategy","GooglePayPaymentStrategy","_googlePayOptions","statusCode","KlarnaPaymentStrategy","_klarnaScriptLoader","_supportedEUCountries","klarnaCredit","_klarnaCredit","_unsubscribe","_loadWidget","_authorize","authorizationToken","authorization_token","klarna","client_token","_getUpdateSessionData","_mapToKlarnaAddress","klarnaAddress","street_address","given_name","family_name","street_address2","updateSessionData","approved","show_form","KlarnaScriptLoader","Klarna","Credit","LegacyPaymentStrategy","masterpass_payment_strategy","MasterpassPaymentStrategy","NoPaymentDataRequiredPaymentStrategy","OfflinePaymentStrategy","OffsitePaymentStrategy","orderPayload","_shouldSubmitFullPayload","PaypalProPaymentStrategy","_isPaymentAcknowledged","PaypalExpressPaymentStrategy","_useRedirectFlow","paypalexpress","useRedirectFlow","_isInContextEnabled","_paypalSdk","closeFlow","_isAcknowledgedOrFinalized","initXO","startFlow","SagePayPaymentStrategy","UnsupportedBrowserError","SquarePaymentStrategy","_syncPaymentMethod","createSquareForm","_paymentForm","_getFormOptions","build","_getNonceInstrument","_getCountryCode","toUpperCase","_deferredRequestNonce","requestCardNonce","deferred","squareOptions","square","_squareOptions","callbacks","cardNonceResponseReceived","cardData","billingContact","shippingContact","digital_wallet_type","none","_handleWalletNonceResponse","_handleCardNonceResponse","createPaymentRequest","_paymentRequestPayload","methodsSupported","methods","_showPaymentMethods","paymentFormLoaded","_setPostalCode","unsupportedBrowserDetected","unsupported_browser_error","requestShippingAddress","requestBillingInfo","storeName","pending","setPostalCode","masterpassBtn","elementId","SquareScriptLoader","SqPaymentForm","StripeV3PaymentStrategy","_stripeScriptLoader","stripeOptions","stripev3","stripeJs","_stripeV3Client","cardElement","elements","_cardElement","_getStripeJs","handleCardPayment","stripeResponse","paymentIntent","createPaymentMethod","_mapStripePaymentMethodOptions","stripePaymentMethod","stripeCardPaymentOptions","_mapStripeCardPaymentOptions","payment_method","_mapStripeBillingAddress","_mapStripeShippingAddress","_mapStripeBillingDetails","stripeBillingDetails","_mapStripeShippingDetails","stripeShippingDetails","_getCustomer","shippingDetails","receipt_email","save_payment_method","billing_details","StripeV3ScriptLoader","publishableKey","Stripe","betas","WepayRiskClient","_riskClient","WePay","risk","generate_risk_token","get_risk_token","WepayPaymentStrategy","orderActionCreator","paymentActionCreator","payloadWithToken","credit_card_payment_strategy","PaymentMethodDeclinedError","ZipPaymentStrategy","_zipScriptLoader","zip","_zipClient","zipClient","Checkout","_prepareForReferredRegistration","payment_method_declined_error","onCheckout","openModal","externalId","ZipScriptLoader","Zip","createPaymentStrategyRegistry","paymentClient","spamProtection","payment_strategy_registry","paymentRequestTransformer","payment_request_transformer","paymentRequestSender","payment_request_sender","billingAddressActionCreator","billing_address_action_creator","billing_address_request_sender","braintreePaymentProcessor","overlay","overlay_overlay","braintree_payment_processor","createBraintreePaymentProcessor","checkoutRequestSender","checkoutValidator","checkout_validator","spamProtectionActionCreator","spam_protection_action_creator","order_action_creator","order_request_sender","storeCreditActionCreator","store_credit_action_creator","store_credit_request_sender","payment_action_creator","paymentMethodActionCreator","remoteCheckoutActionCreator","remote_checkout_action_creator","remote_checkout_request_sender","configActionCreator","paymentStrategyActionCreator","payment_strategy_action_creator","ADYENV2","adyenv2_payment_strategy","adyenv2_script_loader","AFFIRM","affirm_payment_strategy","affirm_script_loader","AFTERPAY","afterpay_payment_strategy","afterpay_script_loader","AMAZON","amazon_pay_payment_strategy","amazon_pay_script_loader","CYBERSOURCE","cybersource_payment_strategy","cardinal_three_d_secure_flow","cardinal_client","cardinal_script_loader","KLARNA","klarna_payment_strategy","klarna_script_loader","legacy_payment_strategy","offline_payment_strategy","offsite_payment_strategy","PAYPAL","paypal_pro_payment_strategy","PAYPAL_EXPRESS","paypal_express_payment_strategy","PAYPAL_EXPRESS_CREDIT","SAGE_PAY","sage_pay_payment_strategy","SQUARE","square_payment_strategy","square_script_loader","no_payment_data_required_strategy","BRAINTREE","braintree_credit_card_payment_strategy","braintree_paypal_payment_strategy","BRAINTREE_VISA_CHECKOUT","braintree_visacheckout_payment_strategy","visacheckout_script_loader","CHASE_PAY","chasepay_script_loader","wepay_risk_client","BRAINTREE_GOOGLE_PAY","WE_PAY","wepay_payment_strategy","STRIPE_GOOGLE_PAY","ZIP","zip_payment_strategy","zip_script_loader","CONVERGE","converge_payment_strategy","STRIPEV3","stripev3_payment_strategy","stripev3_script_loader","ProjectionActionType","InstrumentActionCreator","_instrumentRequestSender","loadInstruments","session","_getSessionContext","_getCurrentAccessToken","_getValidAccessToken","currentToken","deleteInstrument","_isValidVaultAccessToken","date","newDate","valueOf","now","isFuture","vaultAccessExpiry","setMinutes","getMinutes","getVaultAccessToken","storeId","shopperCurrency","isTransactional","InstrumentResponseTransformer","transformResponse","_transformVaultedInstruments","vaulted_instruments","transformErrorResponse","transformVaultAccessResponse","expires_at","bigpay_token","defaultInstrument","default_instrument","last_4","expiryMonth","expiry_month","expiryYear","expiry_year","trustedShippingAddress","trusted_shipping_address","InstrumentRequestSender","_transformer","instrument_response_transformer","requestContext","_loadInstrumentsWithAddress","_loadInstruments","deleteShopperInstrument","loadInstrumentsWithAddress","ShippingCountryActionCreator","_shippingCountryRequestSender","ShippingCountryRequestSender","ShippingStrategyActionCreator","selectOption","mergedOptions","AmazonPayShippingStrategy","_consignmentActionCreator","_createAddressBook","optionId","onAddressSelect","AddressBook","_synchronizeShippingAddress","DefaultShippingStrategy","cloneDeep","input","cloneDeepSafe","cloneResult","createShallowEqualSelector","external_reselect_","create_shallow_equal_selector","with_memoized_combiner","createCheckoutSelectorsFactory","getShippingOptions","getSelectedShippingOption","getBillingCountries","getSelectedPaymentMethod","getError","getSelectShippingOptionError","isPending","isSelectingShippingOption","isCustomerStepPending","isPaymentStepPending","createCheckoutStoreSelector","availableShippingOptions","createCheckoutStoreErrorSelector","getLoadCheckoutError","getUpdateCheckoutError","getSubmitOrderError","getFinalizeOrderError","getLoadOrderError","getLoadCartError","getLoadBillingCountriesError","getLoadShippingCountriesError","getLoadPaymentMethodsError","getLoadPaymentMethodError","getInitializePaymentError","getInitializeCustomerError","getUpdateBillingAddressError","getUpdateShippingAddressError","getDeleteConsignmentError","getUpdateConsignmentError","getCreateConsignmentsError","getInitializeShippingError","getApplyStoreCreditError","getApplyCouponError","getRemoveCouponError","getApplyGiftCertificateError","getRemoveGiftCertificateError","getLoadInstrumentsError","getDeleteInstrumentError","getLoadConfigError","createCheckoutStoreStatusSelector","some","isLoadingCheckout","isUpdatingCheckout","isSubmittingOrder","isFinalizingOrder","isLoadingOrder","isLoadingCart","isLoadingBillingCountries","isLoadingShippingCountries","isLoadingPaymentMethods","isLoadingPaymentMethod","isInitializingPayment","isInitializingCustomer","isUpdatingBillingAddress","isUpdatingShippingAddress","isUpdatingConsignment","isDeletingConsignment","isCreatingConsignments","isInitializingShipping","isApplyingStoreCredit","isLoadingInstruments","isDeletingInstrument","isLoadingConfig","ErrorMessageTransformer","_messageCustomizer","trim","checkout_service","CheckoutService","_countryActionCreator","_couponActionCreator","_errorActionCreator","_giftCertificateActionCreator","_instrumentActionCreator","_shippingCountryActionCreator","_shippingStrategyActionCreator","isDevelopment","projection","_errorTransformer","error_message_transformer","isCheckoutServiceError","_selectorsFactory","_storeProjection","Synchronize","initial","notifyState","_dispatch","loadCheckoutAction","loadConfigAction","finalizeOrderIfNeeded","deinitializePayment","loadBillingCountries","loadShippingCountries","loadBillingAddressFields","loadShippingAddressFields","initializeCustomer","deinitializeCustomer","continueAsGuest","deinitializeShipping","assignItemsToAddress","unassignItemsToAddress","selectConsignmentShippingOption","updateBillingAddress","initializeSpamProtection","createCheckoutService","bigpay_client_","setHost","bigpayBaseUrl","createPaymentClient","orderRequestSender","google_recaptcha","google_recaptcha_script_loader","consignment_action_creator","consignment_request_sender","country_action_creator","country_request_sender","coupon_action_creator","coupon_request_sender","customer_strategy_action_creator","remoteCheckoutRequestSender","amazon_pay_customer_strategy","braintree_visacheckout_customer_strategy","chasepay_customer_strategy","square_customer_strategy","masterpass_customer_strategy","default_customer_strategy","customer_action_creator","customer_request_sender","createCustomerStrategyRegistry","error_action_creator","gift_certificate_action_creator","gift_certificate_request_sender","instrument_action_creator","instrument_request_sender","shipping_country_action_creator","shipping_country_request_sender","shipping_strategy_action_creator","consignmentRequestSender","consignmentActionCreator","amazon_pay_shipping_strategy","default_shipping_strategy","createShippingStrategyRegistry","handleFrameLoadedEvent","hasAttribute","setAttribute","isCustomError","iframe_embedded_checkout_messenger","IframeEmbeddedCheckoutMessenger","_untargetedMessagePoster","_messageHandlers","postComplete","_postMessage","postError","_transformError","postFrameError","untargeted","postFrameLoaded","postLoaded","postSignedOut","receiveStyles","handler","_notifyMessageHandlers","noop_embedded_checkout_messenger","NoopEmbeddedCheckoutMessenger","createEmbeddedCheckoutMessenger","parentWindow","parentOrigin","language_service","LanguageService","_logger","_transformConfig","locales","translations","_locales","_translations","_formatters","mapKeys","translationKey","KEY_PREFIX","getLocale","_hasTranslations","translate","prefixedKey","messageFormat","external_messageformat_","compile","_transformData","output","defaultTranslations","_flattenObject","parentKey","resultKey","createLanguageService","CurrencyFormatter","currencySettings","symbolLocation","symbol","thousandsSeparator","decimalSeparator","parseInt","_symbolLocation","_symbol","_thousandsSeparator","_decimalSeparator","formattedNumber","_formatNumber","formattedCurrency","_formatCurrency","positiveAmount","abs","_toFixed","decimalAmount","parsedIntegerAmount","precision","currency_service","CurrencyService","_storeConfig","_customerFormatter","currency_formatter","_storeFormatter","toCustomerCurrency","exchangeRate","toStoreCurrency","createCurrencyService","create_checkout_button_initializer","embed_checkout","ButtonType","ButtonColor","GooglePayPaymentProcessor","_googlePayScriptLoader","_googlePayInitializer","_consigmentActionCreator","buttonType","buttonColor","Short","Default","_googlePayClient","loadPaymentData","_getPaymentDataRequest","_updateBillingAddress","_mapGooglePayAddressToShippingAddress","googlePay","paymentDataRequest","_getGooglePayClient","_paymentDataRequest","isReadyToPay","google","api","PaymentsClient","_mapGooglePayAddressToBillingAddress","companyName","address3","administrativeArea","postPaymentData","remoteBillingAddress","googlePayAddressMapped","GooglePayScriptLoader","createGooglePayPaymentProcessor","initializer","googlepay_payment_processor","googlepay_script_loader","mapToInternalCart","promotions","notifications","map_to_internal_line_items","map_to_internal_coupon","promotion","banners","banner","placeholders","messageHtml","certificate","map_to_internal_gift_certificate","isShippingRequired","taxSubtotal","UnableToContinueAsGuestError","billing_address_action_creator_BillingAddressActionCreator","BillingAddressActionCreator","unable_to_continue_as_guest_error","billingAddressRequestBody","existingBillingAddressRequestBody","_createOrUpdateBillingAddress"],"mappings":"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","file":"checkout-sdk.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 150);\n","module.exports = require(\"tslib\");","module.exports = require(\"@bigcommerce/data-store\");","module.exports = require(\"lodash\");","module.exports = require(\"rxjs\");","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nimport { ConsignmentMeta } from './consignment';\n\nexport enum ConsignmentActionType {\n    CreateConsignmentsRequested = 'CREATE_CONSIGNMENTS_REQUESTED',\n    CreateConsignmentsSucceeded = 'CREATE_CONSIGNMENTS_SUCCEEDED',\n    CreateConsignmentsFailed = 'CREATE_CONSIGNMENTS_FAILED',\n\n    UpdateConsignmentRequested = 'UPDATE_CONSIGNMENT_REQUESTED',\n    UpdateConsignmentSucceeded = 'UPDATE_CONSIGNMENT_SUCCEEDED',\n    UpdateConsignmentFailed = 'UPDATE_CONSIGNMENT_FAILED',\n\n    DeleteConsignmentRequested = 'DELETE_CONSIGNMENT_REQUESTED',\n    DeleteConsignmentSucceeded = 'DELETE_CONSIGNMENT_SUCCEEDED',\n    DeleteConsignmentFailed = 'DELETE_CONSIGNMENT_FAILED',\n\n    UpdateShippingOptionRequested = 'UPDATE_SHIPPING_OPTION_REQUESTED',\n    UpdateShippingOptionSucceeded = 'UPDATE_SHIPPING_OPTION_SUCCEEDED',\n    UpdateShippingOptionFailed = 'UPDATE_SHIPPING_OPTION_FAILED',\n\n    LoadShippingOptionsRequested = 'LOAD_SHIPPING_OPTIONS_REQUESTED',\n    LoadShippingOptionsSucceeded = 'LOAD_SHIPPING_OPTIONS_SUCCEEDED',\n    LoadShippingOptionsFailed = 'LOAD_SHIPPING_OPTIONS_FAILED',\n}\n\nexport type ConsignmentAction =\n    CreateConsignmentsAction |\n    UpdateConsignmentAction |\n    DeleteConsignmentAction |\n    UpdateShippingOptionAction |\n    LoadShippingOptionsAction;\n\nexport type CreateConsignmentsAction =\n    CreateConsignmentsRequestedAction |\n    CreateConsignmentsSucceededAction |\n    CreateConsignmentsFailedAction;\n\nexport type UpdateConsignmentAction =\n    UpdateConsignmentRequestedAction |\n    UpdateConsignmentSucceededAction |\n    UpdateConsignmentFailedAction;\n\nexport type DeleteConsignmentAction =\n    DeleteConsignmentRequestedAction |\n    DeleteConsignmentSucceededAction |\n    DeleteConsignmentFailedAction;\n\nexport type UpdateShippingOptionAction =\n    UpdateShippingOptionRequestedAction |\n    UpdateShippingOptionSucceededAction |\n    UpdateShippingOptionFailedAction;\n\nexport type LoadShippingOptionsAction =\n    LoadShippingOptionsRequestedAction |\n    LoadShippingOptionsSucceededAction |\n    LoadShippingOptionsFailedAction;\n\nexport interface CreateConsignmentsRequestedAction extends Action {\n    type: ConsignmentActionType.CreateConsignmentsRequested;\n}\n\nexport interface CreateConsignmentsSucceededAction extends Action<Checkout> {\n    type: ConsignmentActionType.CreateConsignmentsSucceeded;\n}\n\nexport interface CreateConsignmentsFailedAction extends Action<Error> {\n    type: ConsignmentActionType.CreateConsignmentsFailed;\n}\n\nexport interface UpdateConsignmentRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentRequested;\n}\n\nexport interface UpdateConsignmentSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentSucceeded;\n}\n\nexport interface UpdateConsignmentFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentFailed;\n}\n\nexport interface DeleteConsignmentRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentRequested;\n}\n\nexport interface DeleteConsignmentSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentSucceeded;\n}\n\nexport interface DeleteConsignmentFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentFailed;\n}\n\nexport interface UpdateShippingOptionRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionRequested;\n}\n\nexport interface UpdateShippingOptionSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionSucceeded;\n}\n\nexport interface UpdateShippingOptionFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionFailed;\n}\n\nexport interface LoadShippingOptionsRequestedAction extends Action {\n    type: ConsignmentActionType.LoadShippingOptionsRequested;\n}\n\nexport interface LoadShippingOptionsSucceededAction extends Action<Checkout> {\n    type: ConsignmentActionType.LoadShippingOptionsSucceeded;\n}\n\nexport interface LoadShippingOptionsFailedAction extends Action<Error> {\n    type: ConsignmentActionType.LoadShippingOptionsFailed;\n}\n","module.exports = require(\"@bigcommerce/memoize\");","import { Action } from '@bigcommerce/data-store';\n\nexport enum CustomerStrategyActionType {\n    SignInFailed = 'CUSTOMER_STRATEGY_SIGN_IN_FAILED',\n    SignInRequested = 'CUSTOMER_STRATEGY_SIGN_IN_REQUESTED',\n    SignInSucceeded = 'CUSTOMER_STRATEGY_SIGN_IN_SUCCEEDED',\n    SignOutFailed = 'CUSTOMER_STRATEGY_SIGN_OUT_FAILED',\n    SignOutRequested = 'CUSTOMER_STRATEGY_SIGN_OUT_REQUESTED',\n    SignOutSucceeded = 'CUSTOMER_STRATEGY_SIGN_OUT_SUCCEEDED',\n    InitializeFailed = 'CUSTOMER_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'CUSTOMER_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'CUSTOMER_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'CUSTOMER_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'CUSTOMER_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'CUSTOMER_STRATEGY_DEINITIALIZE_SUCCEEDED',\n    WidgetInteractionStarted = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_STARTED',\n    WidgetInteractionFinished = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_FINISHED',\n    WidgetInteractionFailed = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_FAILED',\n}\n\nexport type CustomerStrategyAction =\n    CustomerStrategySignInAction |\n    CustomerStrategySignOutAction |\n    CustomerStrategyInitializeAction |\n    CustomerStrategyDeinitializeAction |\n    CustomerStrategyWidgetAction;\n\nexport type CustomerStrategySignInAction =\n    SignInRequestedAction |\n    SignInSucceededAction |\n    SignInFailedAction;\n\nexport type CustomerStrategySignOutAction =\n    SignOutRequestedAction |\n    SignOutSucceededAction |\n    SignOutFailedAction;\n\nexport type CustomerStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type CustomerStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport type CustomerStrategyWidgetAction =\n    WidgetInteractionStartedAction |\n    WidgetInteractionFinishedAction |\n    WidgetInteractionFailedAction;\n\nexport interface SignInRequestedAction extends Action {\n    type: CustomerStrategyActionType.SignInRequested;\n}\n\nexport interface SignInSucceededAction extends Action {\n    type: CustomerStrategyActionType.SignInSucceeded;\n}\n\nexport interface SignInFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.SignInFailed;\n}\n\nexport interface SignOutRequestedAction extends Action {\n    type: CustomerStrategyActionType.SignOutRequested;\n}\n\nexport interface SignOutSucceededAction extends Action {\n    type: CustomerStrategyActionType.SignOutSucceeded;\n}\n\nexport interface SignOutFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.SignOutFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: CustomerStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: CustomerStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: CustomerStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: CustomerStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.DeinitializeFailed;\n}\n\nexport interface WidgetInteractionStartedAction extends Action {\n    type: CustomerStrategyActionType.WidgetInteractionStarted;\n}\n\nexport interface WidgetInteractionFinishedAction extends Action {\n    type: CustomerStrategyActionType.WidgetInteractionFinished;\n}\n\nexport interface WidgetInteractionFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.WidgetInteractionFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadOrderPaymentsAction } from '../order';\n\nexport enum PaymentStrategyActionType {\n    ExecuteFailed = 'PAYMENT_STRATEGY_EXECUTE_FAILED',\n    ExecuteRequested = 'PAYMENT_STRATEGY_EXECUTE_REQUESTED',\n    ExecuteSucceeded = 'PAYMENT_STRATEGY_EXECUTE_SUCCEEDED',\n    FinalizeFailed = 'PAYMENT_STRATEGY_FINALIZE_FAILED',\n    FinalizeRequested = 'PAYMENT_STRATEGY_FINALIZE_REQUESTED',\n    FinalizeSucceeded = 'PAYMENT_STRATEGY_FINALIZE_SUCCEEDED',\n    InitializeFailed = 'PAYMENT_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'PAYMENT_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'PAYMENT_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'PAYMENT_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'PAYMENT_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'PAYMENT_STRATEGY_DEINITIALIZE_SUCCEEDED',\n    WidgetInteractionStarted = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_STARTED',\n    WidgetInteractionFinished = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_FINISHED',\n    WidgetInteractionFailed = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_FAILED',\n}\n\nexport type PaymentStrategyAction =\n    PaymentStrategyExecuteAction |\n    PaymentStrategyFinalizeAction |\n    PaymentStrategyInitializeAction |\n    PaymentStrategyDeinitializeAction |\n    PaymentStrategyWidgetAction;\n\nexport type PaymentStrategyExecuteAction =\n    ExecuteRequestedAction |\n    ExecuteSucceededAction |\n    ExecuteFailedAction |\n    LoadOrderPaymentsAction;\n\nexport type PaymentStrategyFinalizeAction =\n    FinalizeRequestedAction |\n    FinalizeSucceededAction |\n    FinalizeFailedAction |\n    LoadOrderPaymentsAction;\n\nexport type PaymentStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type PaymentStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport type PaymentStrategyWidgetAction =\n    WidgetInteractionStartedAction |\n    WidgetInteractionFinishedAction |\n    WidgetInteractionFailedAction;\n\nexport interface ExecuteRequestedAction extends Action {\n    type: PaymentStrategyActionType.ExecuteRequested;\n}\n\nexport interface ExecuteSucceededAction extends Action {\n    type: PaymentStrategyActionType.ExecuteSucceeded;\n}\n\nexport interface ExecuteFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.ExecuteFailed;\n}\n\nexport interface FinalizeRequestedAction extends Action {\n    type: PaymentStrategyActionType.FinalizeRequested;\n}\n\nexport interface FinalizeSucceededAction extends Action {\n    type: PaymentStrategyActionType.FinalizeSucceeded;\n}\n\nexport interface FinalizeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.FinalizeFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: PaymentStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: PaymentStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: PaymentStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: PaymentStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.DeinitializeFailed;\n}\n\nexport interface WidgetInteractionStartedAction extends Action {\n    type: PaymentStrategyActionType.WidgetInteractionStarted;\n}\n\nexport interface WidgetInteractionFinishedAction extends Action {\n    type: PaymentStrategyActionType.WidgetInteractionFinished;\n}\n\nexport interface WidgetInteractionFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.WidgetInteractionFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum ShippingStrategyActionType {\n    UpdateAddressFailed = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_FAILED',\n    UpdateAddressRequested = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_REQUESTED',\n    UpdateAddressSucceeded = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_SUCCEEDED',\n    SelectOptionFailed = 'SHIPPING_STRATEGY_SELECT_OPTION_FAILED',\n    SelectOptionRequested = 'SHIPPING_STRATEGY_SELECT_OPTION_REQUESTED',\n    SelectOptionSucceeded = 'SHIPPING_STRATEGY_SELECT_OPTION_SUCCEEDED',\n    InitializeFailed = 'SHIPPING_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'SHIPPING_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'SHIPPING_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'SHIPPING_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'SHIPPING_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'SHIPPING_STRATEGY_DEINITIALIZE_SUCCEEDED',\n}\n\nexport type ShippingStrategyAction =\n    ShippingStrategyUpdateAddressAction |\n    ShippingStrategySelectOptionAction |\n    ShippingStrategyInitializeAction |\n    ShippingStrategyDeinitializeAction;\n\nexport type ShippingStrategyUpdateAddressAction =\n    UpdateAddressRequestedAction |\n    UpdateAddressSucceededAction |\n    UpdateAddressFailedAction;\n\nexport type ShippingStrategySelectOptionAction =\n    SelectOptionRequestedAction |\n    SelectOptionSucceededAction |\n    SelectOptionFailedAction;\n\nexport type ShippingStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type ShippingStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport interface UpdateAddressRequestedAction extends Action {\n    type: ShippingStrategyActionType.UpdateAddressRequested;\n}\n\nexport interface UpdateAddressSucceededAction extends Action {\n    type: ShippingStrategyActionType.UpdateAddressSucceeded;\n}\n\nexport interface UpdateAddressFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.UpdateAddressFailed;\n}\n\nexport interface SelectOptionRequestedAction extends Action {\n    type: ShippingStrategyActionType.SelectOptionRequested;\n}\n\nexport interface SelectOptionSucceededAction extends Action {\n    type: ShippingStrategyActionType.SelectOptionSucceeded;\n}\n\nexport interface SelectOptionFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.SelectOptionFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: ShippingStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: ShippingStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: ShippingStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: ShippingStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.DeinitializeFailed;\n}\n","import StandardError from './standard-error';\n\nexport enum MissingDataErrorType {\n    MissingBillingAddress,\n    MissingCart,\n    MissingCheckout,\n    MissingConsignments,\n    MissingCheckoutConfig,\n    MissingOrder,\n    MissingOrderConfig,\n    MissingOrderId,\n    MissingPayment,\n    MissingPaymentMethod,\n    MissingPaymentToken,\n    MissingShippingAddress,\n    MissingSpamProtectionToken,\n}\n\n/**\n * Throw this error when data that is expected to exist is missing. Usually it\n * is due to the fact that certain data has not been retrieved from or saved to\n * the server yet. And such data is required to perform certain actions.\n */\nexport default class MissingDataError extends StandardError {\n    constructor(\n        public subtype: MissingDataErrorType\n    ) {\n        super(getErrorMessage(subtype));\n\n        this.name = 'MissingDataError';\n        this.type = 'missing_data';\n    }\n}\n\nfunction getErrorMessage(type: MissingDataErrorType): string {\n    switch (type) {\n    case MissingDataErrorType.MissingBillingAddress:\n        return 'Unable to proceed because billing address data is unavailable.';\n\n    case MissingDataErrorType.MissingCart:\n        return 'Unable to proceed because cart data is unavailable.';\n\n    case MissingDataErrorType.MissingConsignments:\n        return 'Unable to proceed because consignments data is unavailable.';\n\n    case MissingDataErrorType.MissingCheckout:\n        return 'Unable to proceed because checkout data is unavailable.';\n\n    case MissingDataErrorType.MissingCheckoutConfig:\n    case MissingDataErrorType.MissingOrderConfig:\n        return 'Unable to proceed because configuration data is unavailable.';\n\n    case MissingDataErrorType.MissingOrder:\n        return 'Unable to proceed because order data is unavailable.';\n\n    case MissingDataErrorType.MissingOrderId:\n        return 'Unable to proceed because order ID is unavailable or not generated yet.';\n\n    case MissingDataErrorType.MissingPayment:\n        return 'Unable to proceed because payment data is unavailable.';\n\n    case MissingDataErrorType.MissingPaymentToken:\n        return 'Unable to proceed because the token required to submit a payment is missing.';\n\n    case MissingDataErrorType.MissingPaymentMethod:\n        return 'Unable to proceed because payment method data is unavailable or not properly configured.';\n\n    case MissingDataErrorType.MissingShippingAddress:\n        return 'Unable to proceed because shipping address data is unavailable.';\n\n    case MissingDataErrorType.MissingSpamProtectionToken:\n        return 'Unable to proceed because spam protection token is not provided.';\n\n    default:\n        return 'Unable to proceed because the required data is unavailable.';\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadConfigAction } from '../config/config-actions';\n\nimport Checkout from './checkout';\n\nexport enum CheckoutActionType {\n    LoadCheckoutRequested = 'LOAD_CHECKOUT_REQUESTED',\n    LoadCheckoutSucceeded = 'LOAD_CHECKOUT_SUCCEEDED',\n    LoadCheckoutFailed = 'LOAD_CHECKOUT_FAILED',\n\n    UpdateCheckoutRequested = 'UPDATE_CHECKOUT_REQUESTED',\n    UpdateCheckoutSucceeded = 'UPDATE_CHECKOUT_SUCCEEDED',\n    UpdateCheckoutFailed = 'UPDATE_CHECKOUT_FAILED',\n}\n\nexport type CheckoutAction = LoadCheckoutAction | UpdateCheckoutAction;\n\nexport type LoadCheckoutAction =\n    LoadCheckoutRequestedAction |\n    LoadCheckoutSucceededAction |\n    LoadCheckoutFailedAction |\n    LoadConfigAction;\n\nexport type UpdateCheckoutAction =\n    UpdateCheckoutRequestedAction |\n    UpdateCheckoutSucceededAction |\n    UpdateCheckoutFailedAction;\n\nexport interface LoadCheckoutRequestedAction extends Action {\n    type: CheckoutActionType.LoadCheckoutRequested;\n}\n\nexport interface LoadCheckoutSucceededAction extends Action<Checkout> {\n    type: CheckoutActionType.LoadCheckoutSucceeded;\n}\n\nexport interface LoadCheckoutFailedAction extends Action<Error> {\n    type: CheckoutActionType.LoadCheckoutFailed;\n}\n\nexport interface UpdateCheckoutRequestedAction extends Action {\n    type: CheckoutActionType.UpdateCheckoutRequested;\n}\n\nexport interface UpdateCheckoutSucceededAction extends Action<Checkout> {\n    type: CheckoutActionType.UpdateCheckoutSucceeded;\n}\n\nexport interface UpdateCheckoutFailedAction extends Action<Error> {\n    type: CheckoutActionType.UpdateCheckoutFailed;\n}\n","module.exports = require(\"rxjs/operators\");","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\nimport { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nexport enum CouponActionType {\n    ApplyCouponRequested = 'APPLY_COUPON_REQUESTED',\n    ApplyCouponSucceeded = 'APPLY_COUPON_SUCCEEDED',\n    ApplyCouponFailed = 'APPLY_COUPON_FAILED',\n\n    RemoveCouponRequested = 'REMOVE_COUPON_REQUESTED',\n    RemoveCouponSucceeded = 'REMOVE_COUPON_SUCCEEDED',\n    RemoveCouponFailed = 'REMOVE_COUPON_FAILED',\n}\n\nexport type CouponAction =\n    ApplyCouponAction |\n    RemoveCouponAction;\n\nexport type ApplyCouponAction =\n    ApplyCouponRequestedAction |\n    ApplyCouponSucceededAction |\n    ApplyCouponFailedAction;\n\nexport type RemoveCouponAction =\n    RemoveCouponRequestedAction |\n    RemoveCouponSucceededAction |\n    RemoveCouponFailedAction;\n\nexport interface ApplyCouponRequestedAction extends Action {\n    type: CouponActionType.ApplyCouponRequested;\n}\n\nexport interface ApplyCouponSucceededAction extends Action<Checkout> {\n    type: CouponActionType.ApplyCouponSucceeded;\n}\n\nexport interface ApplyCouponFailedAction extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: CouponActionType.ApplyCouponFailed;\n}\n\nexport interface RemoveCouponRequestedAction extends Action {\n    type: CouponActionType.RemoveCouponRequested;\n}\n\nexport interface RemoveCouponSucceededAction extends Action<Checkout> {\n    type: CouponActionType.RemoveCouponSucceeded;\n}\n\nexport interface RemoveCouponFailedAction extends Action<RequestError> {\n    type: CouponActionType.RemoveCouponFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nexport enum BillingAddressActionType {\n    UpdateBillingAddressRequested = 'UPDATE_BILLING_ADDRESS_REQUESTED',\n    UpdateBillingAddressSucceeded = 'UPDATE_BILLING_ADDRESS_SUCCEEDED',\n    UpdateBillingAddressFailed = 'UPDATE_BILLING_ADDRESS_FAILED',\n\n    ContinueAsGuestRequested = 'CONTINUE_AS_GUEST_REQUESTED',\n    ContinueAsGuestSucceeded = 'CONTINUE_AS_GUEST_SUCCEEDED',\n    ContinueAsGuestFailed = 'CONTINUE_AS_GUEST_FAILED',\n}\n\nexport type BillingAddressAction =\n    ContinueAsGuestAction |\n    UpdateBillingAddressAction;\n\nexport type UpdateBillingAddressAction =\n    UpdateBillingAddressRequested |\n    UpdateBillingAddressSucceeded |\n    UpdateBillingAddressFailed;\n\nexport type ContinueAsGuestAction =\n    ContinueAsGuestRequested |\n    ContinueAsGuestSucceeded |\n    ContinueAsGuestFailed;\n\nexport interface UpdateBillingAddressRequested extends Action {\n    type: BillingAddressActionType.UpdateBillingAddressRequested;\n}\n\nexport interface UpdateBillingAddressSucceeded extends Action<Checkout> {\n    type: BillingAddressActionType.UpdateBillingAddressSucceeded;\n}\n\nexport interface UpdateBillingAddressFailed extends Action<Error> {\n    type: BillingAddressActionType.UpdateBillingAddressFailed;\n}\n\nexport interface ContinueAsGuestRequested extends Action {\n    type: BillingAddressActionType.ContinueAsGuestRequested;\n}\n\nexport interface ContinueAsGuestSucceeded extends Action<Checkout> {\n    type: BillingAddressActionType.ContinueAsGuestSucceeded;\n}\n\nexport interface ContinueAsGuestFailed extends Action<Error> {\n    type: BillingAddressActionType.ContinueAsGuestFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { InternalOrderResponseData } from './internal-order-responses';\nimport Order from './order';\n\nexport enum OrderActionType {\n    LoadOrderRequested = 'LOAD_ORDER_REQUESTED',\n    LoadOrderSucceeded = 'LOAD_ORDER_SUCCEEDED',\n    LoadOrderFailed = 'LOAD_ORDER_FAILED',\n\n    LoadOrderPaymentsRequested = 'LOAD_ORDER_PAYMENTS_REQUESTED',\n    LoadOrderPaymentsSucceeded = 'LOAD_ORDER_PAYMENTS_SUCCEEDED',\n    LoadOrderPaymentsFailed = 'LOAD_ORDER_PAYMENTS_FAILED',\n\n    SubmitOrderRequested = 'SUBMIT_ORDER_REQUESTED',\n    SubmitOrderSucceeded = 'SUBMIT_ORDER_SUCCEEDED',\n    SubmitOrderFailed = 'SUBMIT_ORDER_FAILED',\n\n    FinalizeOrderRequested = 'FINALIZE_ORDER_REQUESTED',\n    FinalizeOrderSucceeded = 'FINALIZE_ORDER_SUCCEEDED',\n    FinalizeOrderFailed = 'FINALIZE_ORDER_FAILED',\n}\n\nexport type OrderAction = LoadOrderAction |\n    LoadOrderPaymentsAction |\n    SubmitOrderAction |\n    FinalizeOrderAction;\n\nexport type LoadOrderPaymentsAction = LoadOrderPaymentsRequestedAction |\n    LoadOrderPaymentsSucceededAction |\n    LoadOrderPaymentsFailedAction;\n\nexport type LoadOrderAction =\n    LoadOrderRequestedAction |\n    LoadOrderSucceededAction |\n    LoadOrderFailedAction;\n\nexport type SubmitOrderAction =\n    SubmitOrderRequestedAction |\n    SubmitOrderSucceededAction |\n    SubmitOrderFailedAction |\n    LoadOrderAction;\n\nexport type FinalizeOrderAction =\n    FinalizeOrderRequestedAction |\n    FinalizeOrderSucceededAction |\n    FinalizeOrderFailedAction |\n    LoadOrderAction;\n\nexport interface LoadOrderRequestedAction extends Action {\n    type: OrderActionType.LoadOrderRequested;\n}\n\nexport interface LoadOrderSucceededAction extends Action<Order> {\n    type: OrderActionType.LoadOrderSucceeded;\n}\n\nexport interface LoadOrderFailedAction extends Action<Error> {\n    type: OrderActionType.LoadOrderFailed;\n}\n\nexport interface LoadOrderPaymentsRequestedAction extends Action {\n    type: OrderActionType.LoadOrderPaymentsRequested;\n}\n\nexport interface LoadOrderPaymentsSucceededAction extends Action<Order> {\n    type: OrderActionType.LoadOrderPaymentsSucceeded;\n}\n\nexport interface LoadOrderPaymentsFailedAction extends Action<Error> {\n    type: OrderActionType.LoadOrderPaymentsFailed;\n}\n\nexport interface SubmitOrderRequestedAction extends Action {\n    type: OrderActionType.SubmitOrderRequested;\n}\n\nexport interface SubmitOrderSucceededAction extends Action<InternalOrderResponseData> {\n    type: OrderActionType.SubmitOrderSucceeded;\n}\n\nexport interface SubmitOrderFailedAction extends Action<Error> {\n    type: OrderActionType.SubmitOrderFailed;\n}\n\nexport interface FinalizeOrderRequestedAction extends Action {\n    type: OrderActionType.FinalizeOrderRequested;\n}\n\nexport interface FinalizeOrderSucceededAction extends Action<InternalOrderResponseData> {\n    type: OrderActionType.FinalizeOrderSucceeded;\n}\n\nexport interface FinalizeOrderFailedAction extends Action<Error> {\n    type: OrderActionType.FinalizeOrderFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport PaymentMethod from './payment-method';\nimport PaymentMethodMeta from './payment-method-meta';\n\nexport enum PaymentMethodActionType {\n    LoadPaymentMethodRequested = 'LOAD_PAYMENT_METHOD_REQUESTED',\n    LoadPaymentMethodSucceeded = 'LOAD_PAYMENT_METHOD_SUCCEEDED',\n    LoadPaymentMethodFailed = 'LOAD_PAYMENT_METHOD_FAILED',\n\n    LoadPaymentMethodsRequested = 'LOAD_PAYMENT_METHODS_REQUESTED',\n    LoadPaymentMethodsSucceeded = 'LOAD_PAYMENT_METHODS_SUCCEEDED',\n    LoadPaymentMethodsFailed = 'LOAD_PAYMENT_METHODS_FAILED',\n}\n\nexport type PaymentMethodAction = LoadPaymentMethodAction | LoadPaymentMethodsAction;\n\nexport type LoadPaymentMethodAction =\n    LoadPaymentMethodRequestedAction |\n    LoadPaymentMethodSucceededAction |\n    LoadPaymentMethodFailedAction;\n\nexport type LoadPaymentMethodsAction =\n    LoadPaymentMethodsRequestedAction |\n    LoadPaymentMethodsSucceededAction |\n    LoadPaymentMethodsFailedAction;\n\nexport interface LoadPaymentMethodRequestedAction extends Action {\n    type: PaymentMethodActionType.LoadPaymentMethodRequested;\n}\n\nexport interface LoadPaymentMethodSucceededAction extends Action<PaymentMethod> {\n    type: PaymentMethodActionType.LoadPaymentMethodSucceeded;\n}\n\nexport interface LoadPaymentMethodFailedAction extends Action<Error> {\n    type: PaymentMethodActionType.LoadPaymentMethodFailed;\n}\n\nexport interface LoadPaymentMethodsRequestedAction extends Action {\n    type: PaymentMethodActionType.LoadPaymentMethodsRequested;\n}\n\nexport interface LoadPaymentMethodsSucceededAction extends Action<PaymentMethod[], PaymentMethodMeta> {\n    type: PaymentMethodActionType.LoadPaymentMethodsSucceeded;\n}\n\nexport interface LoadPaymentMethodsFailedAction extends Action<Error> {\n    type: PaymentMethodActionType.LoadPaymentMethodsFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadPaymentMethodAction } from '../payment';\n\nimport { CheckoutButtonMethodType } from './strategies';\n\nexport enum CheckoutButtonActionType {\n    InitializeButtonFailed = 'INITIALIZE_BUTTON_FAILED',\n    InitializeButtonRequested = 'INITIALIZE_BUTTON_REQUESTED',\n    InitializeButtonSucceeded = 'INITIALIZE_BUTTON_SUCCEEDED',\n\n    DeinitializeButtonFailed = 'DEINITIALIZE_BUTTON_FAILED',\n    DeinitializeButtonRequested = 'DEINITIALIZE_BUTTON_REQUESTED',\n    DeinitializeButtonSucceeded = 'DEINITIALIZE_BUTTON_SUCCEEDED',\n}\n\nexport type CheckoutButtonAction = InitializeButtonAction | DeinitializeButtonAction;\n\nexport type InitializeButtonAction =\n    InitializeButtonRequestedAction |\n    InitializeButtonSucceededAction |\n    InitializeButtonFailedAction |\n    LoadPaymentMethodAction;\n\nexport type DeinitializeButtonAction =\n    DeinitializeButtonRequestedAction |\n    DeinitializeButtonSucceededAction |\n    DeinitializeButtonFailedAction;\n\nexport interface CheckoutButtonActionMeta {\n    methodId: CheckoutButtonMethodType;\n}\n\nexport interface InitializeButtonActionMeta extends CheckoutButtonActionMeta {\n    containerId: string;\n}\n\nexport interface InitializeButtonRequestedAction extends Action<undefined, InitializeButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonRequested;\n}\n\nexport interface InitializeButtonSucceededAction extends Action<undefined, InitializeButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonSucceeded;\n}\n\nexport interface InitializeButtonFailedAction extends Action<Error, InitializeButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonFailed;\n}\n\nexport interface DeinitializeButtonRequestedAction extends Action<undefined, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonRequested;\n}\n\nexport interface DeinitializeButtonSucceededAction extends Action<undefined, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonSucceeded;\n}\n\nexport interface DeinitializeButtonFailedAction extends Action<Error, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\nimport { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nexport enum GiftCertificateActionType {\n    ApplyGiftCertificateRequested = 'APPLY_GIFT_CERTIFICATE_REQUESTED',\n    ApplyGiftCertificateSucceeded = 'APPLY_GIFT_CERTIFICATE_SUCCEEDED',\n    ApplyGiftCertificateFailed = 'APPLY_GIFT_CERTIFICATE_FAILED',\n\n    RemoveGiftCertificateRequested = 'REMOVE_GIFT_CERTIFICATE_REQUESTED',\n    RemoveGiftCertificateSucceeded = 'REMOVE_GIFT_CERTIFICATE_SUCCEEDED',\n    RemoveGiftCertificateFailed = 'REMOVE_GIFT_CERTIFICATE_FAILED',\n}\n\nexport type GiftCertificateAction =\n    ApplyGiftCertificateAction |\n    RemoveGiftCertificateAction;\n\nexport type ApplyGiftCertificateAction =\n    ApplyGiftCertificateRequestedAction |\n    ApplyGiftCertificateSucceededAction |\n    ApplyGiftCertificateFailedAction;\n\nexport type RemoveGiftCertificateAction =\n    RemoveGiftCertificateRequestedAction |\n    RemoveGiftCertificateSucceededAction |\n    RemoveGiftCertificateFailedAction;\n\nexport interface ApplyGiftCertificateRequestedAction extends Action {\n    type: GiftCertificateActionType.ApplyGiftCertificateRequested;\n}\n\nexport interface ApplyGiftCertificateSucceededAction extends Action<Checkout> {\n    type: GiftCertificateActionType.ApplyGiftCertificateSucceeded;\n}\n\nexport interface ApplyGiftCertificateFailedAction extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: GiftCertificateActionType.ApplyGiftCertificateFailed;\n}\n\nexport interface RemoveGiftCertificateRequestedAction extends Action {\n    type: GiftCertificateActionType.RemoveGiftCertificateRequested;\n}\n\nexport interface RemoveGiftCertificateSucceededAction extends Action<Checkout> {\n    type: GiftCertificateActionType.RemoveGiftCertificateSucceeded;\n}\n\nexport interface RemoveGiftCertificateFailedAction extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: GiftCertificateActionType.RemoveGiftCertificateFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { VaultAccessToken } from './instrument';\nimport { InstrumentsResponseBody } from './instrument-response-body';\n\nexport enum InstrumentActionType {\n    LoadInstrumentsRequested = 'LOAD_INSTRUMENTS_REQUESTED',\n    LoadInstrumentsSucceeded = 'LOAD_INSTRUMENTS_SUCCEEDED',\n    LoadInstrumentsFailed = 'LOAD_INSTRUMENTS_FAILED',\n\n    DeleteInstrumentRequested = 'DELETE_INSTRUMENT_REQUESTED',\n    DeleteInstrumentSucceeded = 'DELETE_INSTRUMENT_SUCCEEDED',\n    DeleteInstrumentFailed = 'DELETE_INSTRUMENT_FAILED',\n}\n\nexport type InstrumentAction =\n    LoadInstrumentsAction |\n    DeleteInstrumentAction;\n\nexport type LoadInstrumentsAction =\n    LoadInstrumentsRequestedAction |\n    LoadInstrumentsSucceededAction |\n    LoadInstrumentsFailedAction;\n\nexport type DeleteInstrumentAction =\n    DeleteInstrumentRequestedAction |\n    DeleteInstrumentSucceededAction |\n    DeleteInstrumentFailedAction;\n\nexport interface LoadInstrumentsRequestedAction extends Action {\n    type: InstrumentActionType.LoadInstrumentsRequested;\n}\n\nexport interface LoadInstrumentsSucceededAction extends Action<InstrumentsResponseBody, VaultAccessToken> {\n    type: InstrumentActionType.LoadInstrumentsSucceeded;\n}\n\nexport interface LoadInstrumentsFailedAction extends Action<Error> {\n    type: InstrumentActionType.LoadInstrumentsFailed;\n}\n\nexport interface DeleteInstrumentRequestedAction extends Action {\n    type: InstrumentActionType.DeleteInstrumentRequested;\n}\n\nexport interface DeleteInstrumentSucceededAction extends Action<InstrumentsResponseBody, VaultAccessToken & { instrumentId: string }> {\n    type: InstrumentActionType.DeleteInstrumentSucceeded;\n}\n\nexport interface DeleteInstrumentFailedAction extends Action<Error> {\n    type: InstrumentActionType.DeleteInstrumentFailed;\n}\n","import EmbeddedCheckoutError from './embedded-checkout-error';\nimport EmbeddedContentOptions from './iframe-content/embedded-content-options';\n\nexport enum EmbeddedCheckoutEventType {\n    CheckoutComplete = 'CHECKOUT_COMPLETE',\n    CheckoutError = 'CHECKOUT_ERROR',\n    CheckoutLoaded = 'CHECKOUT_LOADED',\n    FrameError = 'FRAME_ERROR',\n    FrameLoaded = 'FRAME_LOADED',\n    SignedOut = 'SIGNED_OUT',\n}\n\nexport interface EmbeddedCheckoutEventMap {\n    [EmbeddedCheckoutEventType.CheckoutComplete]: EmbeddedCheckoutCompleteEvent;\n    [EmbeddedCheckoutEventType.CheckoutError]: EmbeddedCheckoutErrorEvent;\n    [EmbeddedCheckoutEventType.CheckoutLoaded]: EmbeddedCheckoutLoadedEvent;\n    [EmbeddedCheckoutEventType.FrameError]: EmbeddedCheckoutFrameErrorEvent;\n    [EmbeddedCheckoutEventType.FrameLoaded]: EmbeddedCheckoutFrameLoadedEvent;\n    [EmbeddedCheckoutEventType.SignedOut]: EmbeddedCheckoutSignedOutEvent;\n}\n\nexport type EmbeddedCheckoutEvent = (\n    EmbeddedCheckoutCompleteEvent |\n    EmbeddedCheckoutErrorEvent |\n    EmbeddedCheckoutFrameErrorEvent |\n    EmbeddedCheckoutFrameLoadedEvent |\n    EmbeddedCheckoutLoadedEvent |\n    EmbeddedCheckoutSignedOutEvent\n);\n\nexport interface EmbeddedCheckoutCompleteEvent {\n    type: EmbeddedCheckoutEventType.CheckoutComplete;\n}\n\nexport interface EmbeddedCheckoutErrorEvent {\n    type: EmbeddedCheckoutEventType.CheckoutError;\n    payload: EmbeddedCheckoutError;\n}\n\nexport interface EmbeddedCheckoutLoadedEvent {\n    type: EmbeddedCheckoutEventType.CheckoutLoaded;\n}\n\nexport interface EmbeddedCheckoutFrameErrorEvent {\n    type: EmbeddedCheckoutEventType.FrameError;\n    payload: EmbeddedCheckoutError;\n}\n\nexport interface EmbeddedCheckoutFrameLoadedEvent {\n    type: EmbeddedCheckoutEventType.FrameLoaded;\n    payload?: EmbeddedContentOptions;\n}\n\nexport interface EmbeddedCheckoutSignedOutEvent {\n    type: EmbeddedCheckoutEventType.SignedOut;\n}\n","import { setPrototypeOf } from '../../utility';\n\nimport CustomError from './custom-error';\n\n/**\n * This error type should not be constructed directly. It is a base class for\n * all custom errors thrown in this library.\n */\nexport default abstract class StandardError extends Error implements CustomError {\n    name = 'StandardError';\n    type = 'standard';\n\n    constructor(message?: string) {\n        super(message || 'An unexpected error has occurred.');\n\n        setPrototypeOf(this, new.target.prototype);\n\n        if (typeof Error.captureStackTrace === 'function') {\n            Error.captureStackTrace(this, new.target);\n        } else {\n            this.stack = (new Error(this.message)).stack;\n        }\n    }\n}\n","export default function setPrototypeOf(object: any, prototype: object) {\n    if (Object.setPrototypeOf) {\n        Object.setPrototypeOf(object, prototype);\n    } else {\n        object.__proto__ = prototype;\n    }\n\n    return object;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { AmazonPayRemoteCheckout } from './methods';\n\nexport enum RemoteCheckoutActionType {\n    InitializeRemoteBillingRequested = 'INITIALIZE_REMOTE_BILLING_REQUESTED',\n    InitializeRemoteBillingSucceeded = 'INITIALIZE_REMOTE_BILLING_SUCCEEDED',\n    InitializeRemoteBillingFailed = 'INITIALIZE_REMOTE_BILLING_FAILED',\n\n    InitializeRemoteShippingRequested = 'INITIALIZE_REMOTE_SHIPPING_REQUESTED',\n    InitializeRemoteShippingSucceeded = 'INITIALIZE_REMOTE_SHIPPING_SUCCEEDED',\n    InitializeRemoteShippingFailed = 'INITIALIZE_REMOTE_SHIPPING_FAILED',\n\n    InitializeRemotePaymentRequested = 'INITIALIZE_REMOTE_PAYMENT_REQUESTED',\n    InitializeRemotePaymentSucceeded = 'INITIALIZE_REMOTE_PAYMENT_SUCCEEDED',\n    InitializeRemotePaymentFailed = 'INITIALIZE_REMOTE_PAYMENT_FAILED',\n\n    LoadRemoteSettingsRequested = 'LOAD_REMOTE_SETTINGS_REQUESTED',\n    LoadRemoteSettingsSucceeded = 'LOAD_REMOTE_SETTINGS_SUCCEEDED',\n    LoadRemoteSettingsFailed = 'LOAD_REMOTE_SETTINGS_FAILED',\n\n    SignOutRemoteCustomerRequested = 'SIGN_OUT_REMOTE_CUSTOMER_REQUESTED',\n    SignOutRemoteCustomerSucceeded = 'SIGN_OUT_REMOTE_CUSTOMER_SUCCEEDED',\n    SignOutRemoteCustomerFailed = 'SIGN_OUT_REMOTE_CUSTOMER_FAILED',\n\n    UpdateRemoteCheckout = 'UPDATE_REMOTE_CHECKOUT',\n}\n\nexport type RemoteCheckoutAction = InitializeRemoteBillingAction |\n    InitializeRemoteShippingAction |\n    InitializeRemotePaymentAction |\n    SignOutRemoteCustomerAction |\n    LoadRemoteSettingsAction |\n    UpdateRemoteCheckoutAction;\n\nexport type InitializeRemoteBillingAction = InitializeRemoteBillingSucceededAction |\n    InitializeRemoteBillingFailedAction |\n    InitializeRemoteBillingRequestedAction;\n\nexport interface InitializeRemoteBillingSucceededAction extends Action<AmazonPayRemoteCheckout> {\n    type: RemoteCheckoutActionType.InitializeRemoteBillingSucceeded;\n}\n\nexport interface InitializeRemoteBillingFailedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteBillingFailed;\n}\n\nexport interface InitializeRemoteBillingRequestedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteBillingRequested;\n}\n\nexport type InitializeRemoteShippingAction = InitializeRemoteShippingSucceededAction |\n    InitializeRemoteShippingFailedAction |\n    InitializeRemoteShippingRequestedAction;\n\nexport interface InitializeRemoteShippingSucceededAction extends Action<AmazonPayRemoteCheckout> {\n    type: RemoteCheckoutActionType.InitializeRemoteShippingSucceeded;\n}\n\nexport interface InitializeRemoteShippingFailedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteShippingFailed;\n}\n\nexport interface InitializeRemoteShippingRequestedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteShippingRequested;\n}\n\nexport type InitializeRemotePaymentAction = InitializeRemotePaymentSucceededAction |\n    InitializeRemotePaymentFailedAction |\n    InitializeRemotePaymentRequestedAction;\n\nexport interface InitializeRemotePaymentSucceededAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemotePaymentSucceeded;\n}\n\nexport interface InitializeRemotePaymentFailedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemotePaymentFailed;\n}\n\nexport interface InitializeRemotePaymentRequestedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemotePaymentRequested;\n}\n\nexport type SignOutRemoteCustomerAction = SignOutRemoteCustomerSucceededAction |\n    SignOutRemoteCustomerFailedAction |\n    SignOutRemoteCustomerRequestedAction;\n\nexport interface SignOutRemoteCustomerSucceededAction extends Action {\n    type: RemoteCheckoutActionType.SignOutRemoteCustomerSucceeded;\n}\n\nexport interface SignOutRemoteCustomerFailedAction extends Action {\n    type: RemoteCheckoutActionType.SignOutRemoteCustomerFailed;\n}\n\nexport interface SignOutRemoteCustomerRequestedAction extends Action {\n    type: RemoteCheckoutActionType.SignOutRemoteCustomerRequested;\n}\n\nexport type LoadRemoteSettingsAction = LoadRemoteSettingsSucceededAction |\n    LoadRemoteSettingsRequestedAction |\n    LoadRemoteSettingsFailedAction;\n\nexport interface LoadRemoteSettingsSucceededAction extends Action {\n    type: RemoteCheckoutActionType.LoadRemoteSettingsSucceeded;\n}\n\nexport interface LoadRemoteSettingsRequestedAction extends Action {\n    type: RemoteCheckoutActionType.LoadRemoteSettingsRequested;\n}\n\nexport interface LoadRemoteSettingsFailedAction extends Action {\n    type: RemoteCheckoutActionType.LoadRemoteSettingsFailed;\n}\n\nexport interface UpdateRemoteCheckoutAction extends Action {\n    type: RemoteCheckoutActionType.UpdateRemoteCheckout;\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport StandardError from './standard-error';\n\nconst DEFAULT_RESPONSE = {\n    body: {},\n    headers: {},\n    status: 0,\n};\n\n/**\n * Throw this error if we are unable to make a request to the server. It wraps\n * any server response into a JS error object.\n */\nexport default class RequestError<TBody = any> extends StandardError {\n    body: TBody | {};\n    headers: { [key: string]: any };\n    errors: Array<{ code: string; message?: string }>;\n    status: number;\n\n    constructor(\n        response?: Response<TBody | {}>,\n        { message, errors }: {\n            message?: string;\n            errors?: Array<{ code: string; message?: string }>;\n        } = {}\n    ) {\n        const { body, headers, status } = response || DEFAULT_RESPONSE;\n\n        super(message || 'An unexpected error has occurred.');\n\n        this.name = 'RequestError';\n        this.type = 'request';\n        this.body = body;\n        this.headers = headers;\n        this.status = status;\n        this.errors = errors || [];\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\nimport { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nexport enum StoreCreditActionType {\n    ApplyStoreCreditRequested = 'APPLY_STORE_CREDIT_REQUESTED',\n    ApplyStoreCreditSucceeded = 'APPLY_STORE_CREDIT_SUCCEEDED',\n    ApplyStoreCreditFailed = 'APPLY_STORE_CREDIT_FAILED',\n}\n\nexport type StoreCreditAction =\n    ApplyStoreCreditAction;\n\nexport type ApplyStoreCreditAction =\n    ApplyStoreCreditRequestedAction |\n    ApplyStoreCreditSucceededAction |\n    ApplyStoreCreditFailedAction;\n\nexport interface ApplyStoreCreditRequestedAction extends Action {\n    type: StoreCreditActionType.ApplyStoreCreditRequested;\n}\n\nexport interface ApplyStoreCreditSucceededAction extends Action<Checkout> {\n    type: StoreCreditActionType.ApplyStoreCreditSucceeded;\n}\n\nexport interface ApplyStoreCreditFailedAction extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: StoreCreditActionType.ApplyStoreCreditFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport Config from './config';\n\nexport enum ConfigActionType {\n    LoadConfigRequested = 'LOAD_CONFIG_REQUESTED',\n    LoadConfigSucceeded = 'LOAD_CONFIG_SUCCEEDED',\n    LoadConfigFailed = 'LOAD_CONFIG_FAILED',\n}\n\nexport type LoadConfigAction =\n    LoadConfigRequestedAction |\n    LoadConfigSucceededAction |\n    LoadConfigFailedAction;\n\nexport interface LoadConfigRequestedAction extends Action {\n    type: ConfigActionType.LoadConfigRequested;\n}\n\nexport interface LoadConfigSucceededAction extends Action<Config> {\n    type: ConfigActionType.LoadConfigSucceeded;\n}\n\nexport interface LoadConfigFailedAction extends Action<Error> {\n    type: ConfigActionType.LoadConfigFailed;\n}\n","import { isPlainObject as lodashIsPlainObject } from 'lodash';\n\n// We need this wrapper because Lodash's version doesn't act as a type guard\nexport default function isPlainObject(value: any): value is object {\n    return lodashIsPlainObject(value);\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport Country from './country';\n\nexport enum CountryActionType {\n    LoadCountriesRequested = 'LOAD_COUNTRIES_REQUESTED',\n    LoadCountriesSucceeded = 'LOAD_COUNTRIES_SUCCEEDED',\n    LoadCountriesFailed = 'LOAD_COUNTRIES_FAILED',\n}\n\nexport type LoadCountriesAction =\n    LoadCountriesRequestedAction |\n    LoadCountriesSucceededAction |\n    LoadCountriesFailedAction;\n\nexport interface LoadCountriesRequestedAction extends Action {\n    type: CountryActionType.LoadCountriesRequested;\n}\n\nexport interface LoadCountriesSucceededAction extends Action<Country[]> {\n    type: CountryActionType.LoadCountriesSucceeded;\n}\n\nexport interface LoadCountriesFailedAction extends Action<Error> {\n    type: CountryActionType.LoadCountriesFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Country } from '../geography';\n\nexport enum ShippingCountryActionType {\n    LoadShippingCountriesRequested = 'LOAD_SHIPPING_COUNTRIES_REQUESTED',\n    LoadShippingCountriesSucceeded = 'LOAD_SHIPPING_COUNTRIES_SUCCEEDED',\n    LoadShippingCountriesFailed = 'LOAD_SHIPPING_COUNTRIES_FAILED',\n}\n\nexport type LoadShippingCountriesAction = LoadShippingCountriesRequestedAction |\n    LoadShippingCountriesSucceededAction |\n    LoadShippingCountriesFailedAction;\n\nexport interface LoadShippingCountriesRequestedAction extends Action {\n    type: ShippingCountryActionType.LoadShippingCountriesRequested;\n}\n\nexport interface LoadShippingCountriesSucceededAction extends Action<Country[]> {\n    type: ShippingCountryActionType.LoadShippingCountriesSucceeded;\n}\n\nexport interface LoadShippingCountriesFailedAction extends Action<Error> {\n    type: ShippingCountryActionType.LoadShippingCountriesFailed;\n}\n","module.exports = require(\"@bigcommerce/request-sender\");","export const ACKNOWLEDGE = 'ACKNOWLEDGE';\nexport const FINALIZE = 'FINALIZE';\nexport const INITIALIZE = 'INITIALIZE';\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * This error should be thrown when the client library of a payment method fails\n * to load, or for some reason, it is inaccessible.\n */\nexport default class PaymentMethodClientUnavailableError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Unable to proceed because the client library of a payment method is not loaded or ready to be used.');\n\n        this.name = 'PaymentMethodClientUnavailableError';\n        this.type = 'payment_method_client_unavailable';\n    }\n}\n","module.exports = require(\"@bigcommerce/script-loader\");","enum ContentType {\n    Json = 'application/json',\n    JsonV1 = 'application/vnd.bc.v1+json',\n}\n\nexport default ContentType;\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadOrderAction } from '../order';\n\nimport PaymentResponseBody from './payment-response-body';\n\nexport enum PaymentActionType {\n    SubmitPaymentRequested = 'SUBMIT_PAYMENT_REQUESTED',\n    SubmitPaymentSucceeded = 'SUBMIT_PAYMENT_SUCCEEDED',\n    SubmitPaymentFailed = 'SUBMIT_PAYMENT_FAILED',\n\n    InitializeOffsitePaymentRequested = 'INITIALIZE_OFFSITE_PAYMENT_REQUESTED',\n    InitializeOffsitePaymentSucceeded = 'INITIALIZE_OFFSITE_PAYMENT_SUCCEEDED',\n    InitializeOffsitePaymentFailed = 'INITIALIZE_OFFSITE_PAYMENT_FAILED',\n}\n\nexport type PaymentAction = SubmitPaymentAction |\n    InitializeOffsitePaymentAction;\n\nexport type SubmitPaymentAction =\n    SubmitPaymentRequestedAction |\n    SubmitPaymentSucceededAction |\n    SubmitPaymentFailedAction |\n    LoadOrderAction;\n\nexport type InitializeOffsitePaymentAction =\n    InitializeOffsitePaymentRequestedAction |\n    InitializeOffsitePaymentSucceededAction |\n    InitializeOffsitePaymentFailedAction;\n\nexport interface SubmitPaymentRequestedAction extends Action {\n    type: PaymentActionType.SubmitPaymentRequested;\n}\n\nexport interface SubmitPaymentSucceededAction extends Action<PaymentResponseBody> {\n    type: PaymentActionType.SubmitPaymentSucceeded;\n}\n\nexport interface SubmitPaymentFailedAction extends Action<Error> {\n    type: PaymentActionType.SubmitPaymentFailed;\n}\n\nexport interface InitializeOffsitePaymentRequestedAction extends Action {\n    type: PaymentActionType.InitializeOffsitePaymentRequested;\n}\n\nexport interface InitializeOffsitePaymentSucceededAction extends Action {\n    type: PaymentActionType.InitializeOffsitePaymentSucceeded;\n}\n\nexport interface InitializeOffsitePaymentFailedAction extends Action<Error> {\n    type: PaymentActionType.InitializeOffsitePaymentFailed;\n}\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when a method is unable to proceed because the\n * caller has not provided all the arguments according to their requirements,\n * i.e.: if an argument is missing or it is not the expected data type.\n */\nexport default class InvalidArgumentError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Invalid arguments have been provided.');\n\n        this.name = 'InvalidArgumentError';\n        this.type = 'invalid_argument';\n    }\n}\n","export const HOSTED = 'PAYMENT_TYPE_HOSTED';\nexport const OFFLINE = 'PAYMENT_TYPE_OFFLINE';\n","import IframeEvent from './iframe-event';\n\nexport default function isIframeEvent<TEvent extends IframeEvent<TType>, TType extends string>(\n    object: any,\n    type: TType\n): object is TEvent {\n    return object.type === type;\n}\n","module.exports = require(\"shallowequal\");","export interface CompareOptions {\n    keyFilter?(key: string): boolean;\n}\n\nexport default function isEqual(objectA: any, objectB: any, options?: CompareOptions): boolean {\n    if (objectA === objectB) {\n        return true;\n    }\n\n    if (objectA && objectB && typeof objectA === 'object' && typeof objectB === 'object') {\n        if (Array.isArray(objectA) && Array.isArray(objectB)) {\n            return isArrayEqual(objectA, objectB, options);\n        }\n\n        if (Array.isArray(objectA) || Array.isArray(objectB)) {\n            return false;\n        }\n\n        if ((objectA instanceof Date) && (objectB instanceof Date)) {\n            return isDateEqual(objectA, objectB);\n        }\n\n        if ((objectA instanceof Date) || (objectB instanceof Date)) {\n            return false;\n        }\n\n        if ((objectA instanceof RegExp) && (objectB instanceof RegExp)) {\n            return isRegExpEqual(objectA, objectB);\n        }\n\n        if ((objectA instanceof RegExp) || (objectB instanceof RegExp)) {\n            return false;\n        }\n\n        return isObjectEqual(objectA, objectB, options);\n    }\n\n    return objectA === objectB;\n}\n\nfunction isRegExpEqual(objectA: RegExp, objectB: RegExp): boolean {\n    return objectA.toString() === objectB.toString();\n}\n\nfunction isDateEqual(objectA: Date, objectB: Date): boolean {\n    return objectA.getTime() === objectB.getTime();\n}\n\nfunction isArrayEqual(objectA: any[], objectB: any[], options?: CompareOptions): boolean {\n    if (objectA.length !== objectB.length) {\n        return false;\n    }\n\n    for (let index = 0, length = objectA.length; index < length; index++) {\n        if (!isEqual(objectA[index], objectB[index], options)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nfunction isObjectEqual(\n    objectA: { [key: string]: any },\n    objectB: { [key: string]: any },\n    options?: CompareOptions\n): boolean {\n    const filter = options && options.keyFilter;\n    const keysA = filter ? Object.keys(objectA).filter(filter) : Object.keys(objectA);\n    const keysB = filter ? Object.keys(objectB).filter(filter) : Object.keys(objectB);\n\n    if (keysA.length !== keysB.length) {\n        return false;\n    }\n\n    for (let index = 0, length = keysA.length; index < length; index++) {\n        const key = keysA[index];\n\n        if (!objectB.hasOwnProperty(key)) {\n            return false;\n        }\n\n        if (!isEqual(objectA[key], objectB[key], options)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n","module.exports = require(\"@bigcommerce/form-poster\");","module.exports = require(\"local-storage-fallback\");","module.exports = require(\"reselect\");","import { parseUrl } from '../common/url';\n\nexport default class IframeEventPoster<TEvent> {\n    private _targetOrigin: string;\n\n    constructor(\n        targetOrigin: string,\n        private _targetWindow?: Window\n    ) {\n        this._targetOrigin = targetOrigin === '*' ? '*' : parseUrl(targetOrigin).origin;\n    }\n\n    post(event: TEvent): void {\n        if (window === this._targetWindow) {\n            return;\n        }\n\n        if (!this._targetWindow) {\n            throw new Error('Unable to post message becauset target window is not set.');\n        }\n\n        this._targetWindow.postMessage(event, this._targetOrigin);\n    }\n\n    setTarget(window: Window) {\n        this._targetWindow = window;\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadCheckoutAction } from '../checkout';\n\nimport { InternalCustomerResponseData } from './internal-customer-responses';\n\nexport enum CustomerActionType {\n    SignInCustomerRequested = 'SIGN_IN_CUSTOMER_REQUESTED',\n    SignInCustomerSucceeded = 'SIGN_IN_CUSTOMER_SUCCEEDED',\n    SignInCustomerFailed = 'SIGN_IN_CUSTOMER_FAILED',\n\n    SignOutCustomerRequested = 'SIGN_OUT_CUSTOMER_REQUESTED',\n    SignOutCustomerSucceeded = 'SIGN_OUT_CUSTOMER_SUCCEEDED',\n    SignOutCustomerFailed = 'SIGN_OUT_CUSTOMER_FAILED',\n}\n\nexport type CustomerAction =\n    SignInCustomerAction |\n    SignOutCustomerAction;\n\nexport type SignInCustomerAction =\n    SignInCustomerRequestedAction |\n    SignInCustomerSucceededAction |\n    SignInCustomerFailedAction |\n    LoadCheckoutAction;\n\nexport type SignOutCustomerAction =\n    SignOutCustomerRequestedAction |\n    SignOutCustomerSucceededAction |\n    SignOutCustomerFailedAction |\n    LoadCheckoutAction;\n\nexport interface SignInCustomerRequestedAction extends Action {\n    type: CustomerActionType.SignInCustomerRequested;\n}\n\nexport interface SignInCustomerSucceededAction extends Action<InternalCustomerResponseData> {\n    type: CustomerActionType.SignInCustomerSucceeded;\n}\n\nexport interface SignInCustomerFailedAction extends Action<Error> {\n    type: CustomerActionType.SignInCustomerFailed;\n}\n\nexport interface SignOutCustomerRequestedAction extends Action {\n    type: CustomerActionType.SignOutCustomerRequested;\n}\n\nexport interface SignOutCustomerSucceededAction extends Action<InternalCustomerResponseData> {\n    type: CustomerActionType.SignOutCustomerSucceeded;\n}\n\nexport interface SignOutCustomerFailedAction extends Action<Error> {\n    type: CustomerActionType.SignOutCustomerFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum SpamProtectionActionType {\n    InitializeFailed = 'SPAM_PROTECTION_INITIALIZE_FAILED',\n    InitializeSucceeded = 'SPAM_PROTECTION_INITIALIZE_SUCCEEDED',\n    InitializeRequested = 'SPAM_PROTECTION_INITIALIZE_REQUESTED',\n    ExecuteRequested = 'SPAM_PROTECTION_EXECUTE_REQUESTED',\n    Completed = 'SPAM_PROTECTION_COMPLETED',\n    SubmitFailed = 'SPAM_PROTECTION_SUBMIT_FAILED',\n}\n\nexport type SpamProtectionAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction |\n    ExecuteRequestedAction |\n    CompletedAction |\n    SubmitFailedAction;\n\nexport interface InitializeRequestedAction extends Action {\n    type: SpamProtectionActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: SpamProtectionActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: SpamProtectionActionType.InitializeFailed;\n}\n\nexport interface ExecuteRequestedAction extends Action {\n    type: SpamProtectionActionType.ExecuteRequested;\n}\n\nexport interface CompletedAction extends Action<string> {\n    type: SpamProtectionActionType.Completed;\n}\n\nexport interface SubmitFailedAction extends Action {\n    type: SpamProtectionActionType.SubmitFailed;\n}\n","import StandardError from './standard-error';\n\nexport enum NotInitializedErrorType {\n    CheckoutButtonNotInitialized,\n    CustomerNotInitialized,\n    PaymentNotInitialized,\n    ShippingNotInitialized,\n    SpamProtectionNotInitialized,\n}\n\n/**\n * Throw this error if a method requires a certain initialization call to be\n * made first. Some objects can be constructed but they cannot be used until a\n * separate initialization call is made.\n */\nexport default class NotInitializedError extends StandardError {\n    constructor(\n        public subtype: NotInitializedErrorType\n    ) {\n        super(getErrorMessage(subtype));\n\n        this.name = 'NotInitializedError';\n        this.type = 'not_initialized';\n    }\n}\n\nfunction getErrorMessage(type: NotInitializedErrorType): string {\n    switch (type) {\n    case NotInitializedErrorType.CustomerNotInitialized:\n        return 'Unable to proceed because the customer step of checkout has not been initialized.';\n\n    case NotInitializedErrorType.PaymentNotInitialized:\n        return 'Unable to proceed because the payment step of checkout has not been initialized.';\n\n    case NotInitializedErrorType.ShippingNotInitialized:\n        return 'Unable to proceed because the shipping step of checkout has not been initialized.';\n\n    case NotInitializedErrorType.SpamProtectionNotInitialized:\n        return 'Unable to proceed because the checkout spam protection has not been initialized.';\n\n    default:\n        return 'Unable to proceed because the required component has not been initialized.';\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { RequestError } from '../../common/error/errors';\n\n/**\n * Throw this error if we are unable to successfully submit a server request\n * using a payment method because the method has invalid configuration or is in\n * an invalid state.\n */\nexport default class PaymentMethodInvalidError extends RequestError {\n    constructor(response?: Response) {\n        super(response, { message: 'There is a problem processing your payment. Please try again later.' });\n\n        this.name = 'PaymentMethodInvalidError';\n        this.type = 'payment_method_invalid';\n    }\n}\n","import { memoize } from '@bigcommerce/memoize';\nimport { createSelector as defaultSelectorCreator } from 'reselect';\n\n/**\n * Decorate selector creators with the ability to memoize the return value of\n * their combiner if it is a function (which effectively works as a partially\n * applied combiner).\n */\nexport default function withMemoizedCombiner<T extends typeof defaultSelectorCreator>(\n    creator: T\n): T {\n    return ((...args: any[]) => {\n        const combiner = args.pop();\n\n        // Reselect's default `createSelector` has many overloads. To avoid having\n        // to redefine all of them, we're using `any` to bypass the typechecker.\n        return (creator as any)(...args, (...combinerArgs: any[]) => {\n            // Although there are many overloads, all of them have the last argument\n            // as the combiner.\n            const result = combiner(...combinerArgs);\n\n            if (typeof result === 'function') {\n                return memoize(result);\n            }\n\n            return result;\n        });\n    }) as T;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum ErrorActionType {\n    ClearError = 'CLEAR_ERROR',\n}\n\nexport type ErrorAction = ClearErrorAction;\n\nexport interface ClearErrorAction extends Action {\n    type: ErrorActionType.ClearError;\n    payload: Error;\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { cachableAction, ActionOptions } from '../common/data-store';\nimport { RequestOptions } from '../common/http-request';\n\nimport { LoadPaymentMethodsAction, LoadPaymentMethodAction, PaymentMethodActionType } from './payment-method-actions';\nimport PaymentMethodRequestSender from './payment-method-request-sender';\n\nexport default class PaymentMethodActionCreator {\n    constructor(\n        private _requestSender: PaymentMethodRequestSender\n    ) {}\n\n    loadPaymentMethods(options?: RequestOptions): Observable<LoadPaymentMethodsAction> {\n        return Observable.create((observer: Observer<LoadPaymentMethodsAction>) => {\n            observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodsRequested));\n\n            this._requestSender.loadPaymentMethods(options)\n                .then(response => {\n                    const meta = {\n                        deviceSessionId: response.headers['x-device-session-id'],\n                        sessionHash: response.headers['x-session-hash'],\n                    };\n\n                    observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodsSucceeded, response.body, meta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(PaymentMethodActionType.LoadPaymentMethodsFailed, response));\n                });\n        });\n    }\n\n    @cachableAction\n    loadPaymentMethod(methodId: string, options?: RequestOptions & ActionOptions): Observable<LoadPaymentMethodAction> {\n        return Observable.create((observer: Observer<LoadPaymentMethodAction>) => {\n            observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodRequested, undefined, { methodId }));\n\n            this._requestSender.loadPaymentMethod(methodId, options)\n                .then(response => {\n                    observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodSucceeded, response.body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(PaymentMethodActionType.LoadPaymentMethodFailed, response, { methodId }));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, INTERNAL_USE_ONLY, RequestOptions } from '../common/http-request';\n\nimport PaymentMethod from './payment-method';\n\nexport default class PaymentMethodRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadPaymentMethods({ timeout }: RequestOptions = {}): Promise<Response<PaymentMethod[]>> {\n        const url = '/api/storefront/payments';\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n        });\n    }\n\n    loadPaymentMethod(methodId: string, { timeout }: RequestOptions = {}): Promise<Response<PaymentMethod>> {\n        const url = `/api/storefront/payments/${methodId}`;\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n        });\n    }\n}\n","import EmbeddedCheckoutStyles from '../embedded-checkout-styles';\n\nexport enum EmbeddedContentEventType {\n    StyleConfigured = 'STYLE_CONFIGURED',\n}\n\nexport interface EmbeddedContentEventMap {\n    [EmbeddedContentEventType.StyleConfigured]: EmbeddedContentStyleConfiguredEvent;\n}\n\nexport type EmbeddedContentEvent = (\n    EmbeddedContentStyleConfiguredEvent\n);\n\nexport interface EmbeddedContentStyleConfiguredEvent {\n    type: EmbeddedContentEventType.StyleConfigured;\n    payload: EmbeddedCheckoutStyles;\n}\n","import { parseUrl } from '../common/url';\nimport { bindDecorator as bind } from '../common/utility';\n\nimport { IframeEventMap } from './iframe-event';\nimport isIframeEvent from './is-iframe-event';\n\nexport default class IframeEventListener<TEventMap extends IframeEventMap<keyof TEventMap>> {\n    private _isListening: boolean;\n    private _listeners: EventListeners<TEventMap>;\n    private _sourceOrigin: string;\n\n    constructor(\n        sourceOrigin: string\n    ) {\n        this._sourceOrigin = parseUrl(sourceOrigin).origin;\n        this._isListening = false;\n        this._listeners = {};\n    }\n\n    listen(): void {\n        if (this._isListening) {\n            return;\n        }\n\n        this._isListening = true;\n\n        window.addEventListener('message', this._handleMessage);\n    }\n\n    stopListen(): void {\n        if (!this._isListening) {\n            return;\n        }\n\n        this._isListening = false;\n\n        window.removeEventListener('message', this._handleMessage);\n    }\n\n    addListener<TType extends keyof TEventMap>(type: TType, listener: (event: TEventMap[TType]) => void): void {\n        let listeners = this._listeners[type];\n\n        if (!listeners) {\n            this._listeners[type] = listeners = [];\n        }\n\n        listeners.push(listener);\n    }\n\n    removeListener<TType extends keyof TEventMap>(type: TType, listener: (event: TEventMap[TType]) => void): void {\n        const listeners = this._listeners[type];\n\n        if (!listeners) {\n            return;\n        }\n\n        const index = listeners.indexOf(listener);\n\n        if (index >= 0) {\n            listeners.splice(index, 1);\n        }\n    }\n\n    trigger<TType extends keyof TEventMap>(event: TEventMap[TType]): void {\n        const listeners = this._listeners[event.type];\n\n        if (!listeners) {\n            return;\n        }\n\n        listeners.forEach(listener => listener(event));\n    }\n\n    @bind\n    private _handleMessage(event: MessageEvent): void {\n        if ((event.origin !== this._sourceOrigin) ||\n            !isIframeEvent(event.data as TEventMap[keyof TEventMap], event.data.type)\n        ) {\n            return;\n        }\n\n        this.trigger(event.data);\n    }\n}\n\ntype EventListeners<TEventMap> = {\n    [key in keyof TEventMap]?: Array<(event: TEventMap[key]) => void>;\n};\n","const CHECKOUT_DEFAULT_INCLUDES = [\n    'cart.lineItems.physicalItems.options',\n    'cart.lineItems.digitalItems.options',\n    'customer',\n    'customer.customerGroup',\n    'payments',\n    'promotions.banners',\n];\n\nexport default CHECKOUT_DEFAULT_INCLUDES;\n","import InternalLineItem from './internal-line-item';\nimport { LineItem } from './line-item';\nimport LineItemMap from './line-item-map';\nimport mapGiftCertificateToInternalLineItem from './map-gift-certificate-to-internal-line-item';\nimport mapToInternalLineItem from './map-to-internal-line-item';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalLineItems(\n    itemMap: LineItemMap,\n    decimalPlaces: number,\n    idKey: keyof LineItem = 'id'\n): InternalLineItem[] {\n    return (Object.keys(itemMap) as Array<keyof LineItemMap>)\n        .reduce((result, key) => [\n            ...result,\n            ...(itemMap[key] as LineItem[]).map((item: any) => {\n                if (key === 'giftCertificates') {\n                    return mapGiftCertificateToInternalLineItem(item, decimalPlaces);\n                }\n\n                return mapToInternalLineItem(\n                    item,\n                    mapToInternalLineItemType(key),\n                    decimalPlaces,\n                    idKey\n                );\n            }),\n        ], [] as InternalLineItem[]);\n}\n\nfunction mapToInternalLineItemType(type: string): string {\n    switch (type) {\n        case 'physicalItems':\n            return 'ItemPhysicalEntity';\n\n        case 'digitalItems':\n            return 'ItemDigitalEntity';\n\n        case 'giftCertificates':\n            return 'ItemGiftCertificateEntity';\n\n        default:\n            return '';\n    }\n}\n","import { AmountTransformer } from '../common/utility';\n\nimport InternalLineItem from './internal-line-item';\nimport { GiftCertificateItem } from './line-item';\n\nexport default function mapGiftCertificateToInternalLineItem(\n    item: GiftCertificateItem,\n    decimalPlaces: number\n): InternalLineItem {\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: item.id,\n        imageUrl: '',\n        name: item.name,\n        amount: item.amount,\n        amountAfterDiscount: item.amount,\n        discount: 0,\n        integerAmount: amountTransformer.toInteger(item.amount),\n        integerAmountAfterDiscount: amountTransformer.toInteger(item.amount),\n        integerDiscount: 0,\n        quantity: 1,\n        sender: item.sender,\n        recipient: item.recipient,\n        type: 'ItemGiftCertificateEntity',\n        attributes: [],\n        variantId: null,\n    };\n}\n","export const INTERNAL_USE_ONLY = 'This API endpoint is for internal use only and may change in the future';\n","export enum CheckoutIncludes {\n    AvailableShippingOptions = 'consignments.availableShippingOptions',\n    PhysicalItemsCategoryNames = 'cart.lineItems.physicalItems.categoryNames',\n    DigitalItemsCategoryNames = 'cart.lineItems.digitalItems.categoryNames',\n}\n\nexport default interface CheckoutParams {\n    include?: CheckoutIncludes[];\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\nimport { GooglePayCreator } from '../googlepay';\n\nimport {\n    BraintreeClientCreator,\n    BraintreeDataCollectorCreator,\n    BraintreeHostWindow,\n    BraintreePaypalCheckoutCreator,\n    BraintreePaypalCreator,\n    BraintreeThreeDSecureCreator,\n    BraintreeVisaCheckoutCreator,\n} from './braintree';\n\nexport default class BraintreeScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: BraintreeHostWindow = window\n    ) {}\n\n    loadClient(): Promise<BraintreeClientCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/client.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.client) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.client;\n            });\n    }\n\n    load3DS(): Promise<BraintreeThreeDSecureCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/three-d-secure.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.threeDSecure) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.threeDSecure;\n            });\n    }\n\n    loadDataCollector(): Promise<BraintreeDataCollectorCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/data-collector.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.dataCollector) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.dataCollector;\n            });\n    }\n\n    loadPaypal(): Promise<BraintreePaypalCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/paypal.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.paypal) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.paypal;\n            });\n    }\n\n    loadPaypalCheckout(): Promise<BraintreePaypalCheckoutCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/paypal-checkout.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.paypalCheckout) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.paypalCheckout;\n            });\n    }\n\n    loadVisaCheckout(): Promise<BraintreeVisaCheckoutCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/visa-checkout.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.visaCheckout) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.visaCheckout;\n            });\n    }\n\n    loadGooglePayment(): Promise<GooglePayCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/google-payment.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.googlePayment) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.googlePayment;\n            });\n    }\n}\n","import { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\n\nimport {\n    BraintreeClient,\n    BraintreeDataCollector,\n    BraintreeModule,\n    BraintreePaypal,\n    BraintreePaypalCheckout,\n    BraintreeThreeDSecure,\n    BraintreeVisaCheckout,\n    GooglePayBraintreeSDK,\n} from './braintree';\nimport BraintreeScriptLoader from './braintree-script-loader';\n\nexport default class BraintreeSDKCreator {\n    private _client?: Promise<BraintreeClient>;\n    private _3ds?: Promise<BraintreeThreeDSecure>;\n    private _paypal?: Promise<BraintreePaypal>;\n    private _paypalCheckout?: Promise<BraintreePaypalCheckout>;\n    private _clientToken?: string;\n    private _visaCheckout?: Promise<BraintreeVisaCheckout>;\n    private _dataCollectors: {\n        default?: Promise<BraintreeDataCollector>;\n        paypal?: Promise<BraintreeDataCollector>;\n    } = {};\n    private _googlePay?: Promise<GooglePayBraintreeSDK>;\n\n    constructor(\n        private _braintreeScriptLoader: BraintreeScriptLoader\n    ) {}\n\n    initialize(clientToken: string) {\n        this._clientToken = clientToken;\n    }\n\n    getClient(): Promise<BraintreeClient> {\n        if (!this._clientToken) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!this._client) {\n            this._client = this._braintreeScriptLoader.loadClient()\n                .then(client => client.create({ authorization: this._clientToken }));\n        }\n\n        return this._client;\n    }\n\n    getPaypal(): Promise<BraintreePaypal> {\n        if (!this._paypal) {\n            this._paypal = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadPaypal(),\n            ])\n            .then(([client, paypal]) => paypal.create({ client }));\n        }\n\n        return this._paypal;\n    }\n\n    getPaypalCheckout(): Promise<BraintreePaypalCheckout> {\n        if (!this._paypalCheckout) {\n            this._paypalCheckout = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadPaypalCheckout(),\n            ])\n                .then(([client, paypalCheckout]) => paypalCheckout.create({ client }));\n        }\n\n        return this._paypalCheckout;\n    }\n\n    get3DS(): Promise<BraintreeThreeDSecure> {\n        if (!this._3ds) {\n            this._3ds = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.load3DS(),\n            ])\n            .then(([client, threeDSecure]) => threeDSecure.create({ client }));\n        }\n\n        return this._3ds;\n    }\n\n    getDataCollector(options?: { paypal: boolean }): Promise<BraintreeDataCollector> {\n        const cacheKey = options && options.paypal ? 'paypal' : 'default';\n        let cached = this._dataCollectors[cacheKey];\n\n        if (!cached) {\n            cached = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadDataCollector(),\n            ])\n            .then(([client, dataCollector]) => dataCollector.create({ client, kount: true, ...options }))\n            .catch(error => {\n                if (error && error.code === 'DATA_COLLECTOR_KOUNT_NOT_ENABLED') {\n                    return { deviceData: undefined, teardown: () => Promise.resolve() };\n                }\n\n                throw error;\n            });\n\n            this._dataCollectors[cacheKey] = cached;\n        }\n\n        return cached;\n    }\n\n    getVisaCheckout(): Promise<BraintreeVisaCheckout> {\n        if (!this._visaCheckout) {\n            this._visaCheckout = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadVisaCheckout(),\n            ])\n            .then(([client, visaCheckout]) => visaCheckout.create({ client }));\n        }\n\n        return this._visaCheckout;\n    }\n\n    getGooglePaymentComponent(): Promise<GooglePayBraintreeSDK> {\n        if (!this._googlePay) {\n            this._googlePay = Promise.all ([\n                this.getClient(),\n                this._braintreeScriptLoader.loadGooglePayment(),\n            ])\n                .then(([client, googlePay]) => googlePay.create({ client }));\n        }\n\n        return this._googlePay;\n    }\n\n    teardown(): Promise<void> {\n        return Promise.all([\n            this._teardown(this._3ds),\n            this._teardown(this._dataCollectors.default),\n            this._teardown(this._dataCollectors.paypal),\n            this._teardown(this._visaCheckout),\n            this._teardown(this._googlePay),\n        ]).then(() => {\n            this._3ds = undefined;\n            this._visaCheckout = undefined;\n            this._dataCollectors = {};\n            this._googlePay = undefined;\n        });\n    }\n\n    private _teardown(module?: Promise<BraintreeModule>) {\n        return module ?\n            module.then(mod => mod.teardown()) :\n            Promise.resolve();\n    }\n}\n","import { AmountTransformer } from '../common/utility';\n\nimport InternalLineItem from './internal-line-item';\nimport { DigitalItem, LineItem } from './line-item';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalLineItem(\n    item: LineItem,\n    type: string,\n    decimalPlaces: number,\n    idKey: keyof LineItem = 'id'\n): InternalLineItem {\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: (item[idKey] as string | number),\n        imageUrl: item.imageUrl,\n        amount: item.extendedListPrice,\n        amountAfterDiscount: item.extendedSalePrice,\n        discount: item.discountAmount,\n        integerAmount: amountTransformer.toInteger(item.extendedListPrice),\n        integerAmountAfterDiscount: amountTransformer.toInteger(item.extendedSalePrice),\n        integerDiscount: amountTransformer.toInteger(item.discountAmount),\n        downloadsPageUrl: (item as DigitalItem).downloadPageUrl,\n        name: item.name,\n        quantity: item.quantity,\n        brand: item.brand,\n        categoryNames: item.categoryNames,\n        variantId: item.variantId,\n        productId: item.productId,\n        attributes: (item.options || []).map(option => ({\n            name: option.name,\n            value: option.value,\n        })),\n        addedByPromotion: item.addedByPromotion,\n        type,\n    };\n}\n","import { createErrorAction, Action } from '@bigcommerce/data-store';\nimport { concat, of, throwError, Observable } from 'rxjs';\n\nexport default function throwErrorAction<TPayload, TMeta, TType extends string>(\n    type: TType,\n    error?: TPayload,\n    meta?: TMeta\n): Observable<Action<TPayload, TMeta, TType>> {\n    if (isErrorAction(error)) {\n        return concat(of(error), throwError(createErrorAction(type, error.payload, meta)));\n    }\n\n    return throwError(createErrorAction(type, error, meta));\n}\n\nfunction isErrorAction(action: any): action is Action {\n    return action && action.type && action.error;\n}\n","export default class AmountTransformer {\n    constructor(private _decimalPlaces: number) {}\n\n    toInteger(amount: number): number {\n        return Math.round(amount * Math.pow(10, this._decimalPlaces));\n    }\n}\n","import { InvalidArgumentError } from '../error/errors';\n\nimport Url from './url';\n\nexport default function parseUrl(url: string): Url {\n    if (!/^(https?:)?\\/\\//.test(url)) {\n        throw new InvalidArgumentError('The provided URL must be absolute.');\n    }\n\n    // new URL() is not supported in IE11, use anchor tag instead\n    const anchor = document.createElement('a');\n\n    anchor.href = url;\n\n    // IE11 returns 80 or 443 for the port number depending on the URL scheme,\n    // even if the port number is not specified in the URL.\n    const port = anchor.port && url.indexOf(`${anchor.hostname}:${anchor.port}`) !== -1 ?\n        anchor.port :\n        '';\n\n    return {\n        hash: anchor.hash,\n        hostname: anchor.hostname,\n        href: anchor.href,\n        origin: `${anchor.protocol}//${anchor.hostname}${port ? ':' + port : ''}`,\n        pathname: anchor.pathname,\n        port,\n        protocol: anchor.protocol,\n        search: anchor.search,\n    };\n}\n","import cacheAction from './cache-action';\nimport isActionOptions from './is-action-options';\n\nexport default function cachableActionDecorator<TMethod extends (...args: any[]) => any>(\n    _: object,\n    key: string,\n    descriptor: TypedPropertyDescriptor<TMethod>\n): TypedPropertyDescriptor<TMethod> {\n    const memoizedMethods = new WeakMap<object, { [key: string]: TMethod }>();\n\n    function decorateMethod(this: object, method: TMethod): TMethod {\n        return ((...args: any[]) => {\n            const lastArg = args[args.length - 1];\n            const { useCache } = isActionOptions(lastArg) ? lastArg : { useCache: false };\n\n            if (!useCache) {\n                return method.call(this, ...args);\n            }\n\n            const instanceMethods = memoizedMethods.get(this) || {};\n\n            if (!memoizedMethods.get(this)) {\n                memoizedMethods.set(this, instanceMethods);\n            }\n\n            if (!instanceMethods[key]) {\n                instanceMethods[key] = cacheAction(method);\n            }\n\n            return instanceMethods[key].call(this, ...args);\n        }) as TMethod;\n    }\n\n    return {\n        get() {\n            if (typeof descriptor.value !== 'function') {\n                throw new Error('Decorator should be used in functions');\n            }\n\n            const value = decorateMethod.call(this, descriptor.value);\n\n            Object.defineProperty(this, key, { ...descriptor, value });\n\n            return value;\n        },\n    };\n}\n","import ActionOptions from './action-options';\n\nexport default function isActionOptions(param: any): param is ActionOptions {\n    return param && typeof param.useCache === 'boolean';\n}\n","import { Action, ThunkAction } from '@bigcommerce/data-store';\nimport { memoize } from '@bigcommerce/memoize';\nimport { from, Observable } from 'rxjs';\nimport { shareReplay } from 'rxjs/operators';\n\nexport default function cacheAction<TFunction extends CreateActionFn>(\n    fn: TFunction\n): TFunction {\n    function decoratedFn(this: any, ...args: any[]) {\n        const action = fn.call(this, ...args);\n\n        if (action instanceof Observable) {\n            return from(action).pipe(shareReplay());\n        }\n\n        if (typeof action === 'function') {\n            return memoize(store => from(action(store)).pipe(shareReplay()));\n        }\n\n        return action;\n    }\n\n    return memoize(decoratedFn as TFunction);\n}\n\ntype CreateActionFn = (...args: any[]) => Observable<Action> | ThunkAction<Action> | Action;\n","/**\n * Decorates a class or a method by binding all its prototype methods or itself\n * to the calling instance respectively.\n */\nexport default function bindDecorator<T extends Method>(target: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T>;\nexport default function bindDecorator<T extends Constructor<object>>(target: T): T;\nexport default function bindDecorator(target: any, key?: any, descriptor?: any): any {\n    if (!key || !descriptor) {\n        return bindClassDecorator(target);\n    }\n\n    return bindMethodDecorator(target, key, descriptor);\n}\n\n/**\n * Decorates a class by binding all its prototype methods to the calling\n * instance.\n */\nexport function bindClassDecorator<T extends Constructor<object>>(target: T): T {\n    const decoratedTarget = class extends target {};\n\n    Object.getOwnPropertyNames(target.prototype)\n        .forEach(key => {\n            const descriptor = Object.getOwnPropertyDescriptor(target.prototype, key);\n\n            if (!descriptor || key === 'constructor') {\n                return;\n            }\n\n            Object.defineProperty(\n                decoratedTarget.prototype,\n                key,\n                bindMethodDecorator(target.prototype, key, descriptor)\n            );\n        });\n\n    return decoratedTarget;\n}\n\n/**\n * Decorates a method by binding it to the calling instance.\n */\nexport function bindMethodDecorator<T extends Method>(_: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T> {\n    if (typeof descriptor.value !== 'function') {\n        return descriptor;\n    }\n\n    let method: T = descriptor.value;\n\n    return {\n        get() {\n            const boundMethod = method.bind(this) as T;\n\n            Object.defineProperty(this, key, {\n                ...descriptor,\n                value: boundMethod,\n            });\n\n            return boundMethod;\n        },\n        set(value) {\n            method = value;\n        },\n    };\n}\n\nexport type Constructor<T> = new (...args: any[]) => T;\nexport type Method = (...args: any[]) => any;\n","module.exports = require(\"iframe-resizer\");","module.exports = require(\"iframe-resizer/js/iframeResizer.contentWindow\");","import { isPlainObject, omitBy, transform } from 'lodash';\n\nexport default function omitDeep(object: any, predicate: (value: any, key: string) => boolean): any {\n    if (Array.isArray(object)) {\n        return object.map(value => omitDeep(value, predicate));\n    }\n\n    if (isPlainObject(object)) {\n        return transform(omitBy(object, predicate), (result, value, key) => {\n            result[key] = omitDeep(value, predicate);\n        }, {});\n    }\n\n    return object;\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, merge, of, Observable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { ConfigActionCreator } from '../config';\n\nimport { CheckoutRequestBody } from './checkout';\nimport { CheckoutActionType, LoadCheckoutAction, UpdateCheckoutAction } from './checkout-actions';\nimport CheckoutRequestSender from './checkout-request-sender';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\nexport default class CheckoutActionCreator {\n    constructor(\n        private _checkoutRequestSender: CheckoutRequestSender,\n        private _configActionCreator: ConfigActionCreator\n    ) {}\n\n    loadCheckout(id: string, options?: RequestOptions): Observable<LoadCheckoutAction> {\n        return concat(\n            of(createAction(CheckoutActionType.LoadCheckoutRequested)),\n            merge(\n                this._configActionCreator.loadConfig({ ...options, useCache: true }),\n                defer(() => this._checkoutRequestSender.loadCheckout(id, options)\n                    .then(({ body }) => createAction(CheckoutActionType.LoadCheckoutSucceeded, body)))\n            )\n        ).pipe(\n            catchError(error => throwErrorAction(CheckoutActionType.LoadCheckoutFailed, error))\n        );\n    }\n\n    loadDefaultCheckout(options?: RequestOptions): ThunkAction<LoadCheckoutAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(CheckoutActionType.LoadCheckoutRequested)),\n            this._configActionCreator.loadConfig(),\n            defer(async () => {\n                const state = store.getState();\n                const context = state.config.getContextConfig();\n\n                if (!context || !context.checkoutId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                const { body } = await this._checkoutRequestSender.loadCheckout(context.checkoutId, options);\n\n                return createAction(CheckoutActionType.LoadCheckoutSucceeded, body);\n            })\n        ).pipe(\n            catchError(error => throwErrorAction(CheckoutActionType.LoadCheckoutFailed, error))\n        );\n    }\n\n    updateCheckout(\n        body: CheckoutRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateCheckoutAction, InternalCheckoutSelectors> {\n        return store => new Observable(observer => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(CheckoutActionType.UpdateCheckoutRequested));\n\n            this._checkoutRequestSender.updateCheckout(checkout.id, body, options)\n                .then(({ body }) => {\n                    observer.next(createAction(CheckoutActionType.UpdateCheckoutSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CheckoutActionType.UpdateCheckoutFailed, response));\n                });\n        });\n    }\n\n    loadCurrentCheckout(options?: RequestOptions): ThunkAction<LoadCheckoutAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            return this.loadCheckout(checkout.id, options);\n        };\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { find } from 'lodash';\nimport { Observable, Observer } from 'rxjs';\n\nimport { AddressRequestBody } from '../address';\nimport { Cart } from '../cart';\nimport { InternalCheckoutSelectors, ReadableCheckoutStore } from '../checkout';\nimport { CheckoutIncludes } from '../checkout/checkout-params';\nimport CheckoutRequestSender from '../checkout/checkout-request-sender';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport Consignment, {\n    ConsignmentsRequestBody,\n    ConsignmentAssignmentRequestBody,\n    ConsignmentCreateRequestBody,\n    ConsignmentLineItem,\n    ConsignmentRequestBody,\n    ConsignmentShippingOptionRequestBody,\n    ConsignmentUpdateRequestBody\n} from './consignment';\nimport {\n    ConsignmentActionType,\n    CreateConsignmentsAction,\n    DeleteConsignmentAction,\n    LoadShippingOptionsAction,\n    UpdateConsignmentAction,\n    UpdateShippingOptionAction,\n} from './consignment-actions';\nimport ConsignmentRequestSender from './consignment-request-sender';\n\nexport default class ConsignmentActionCreator {\n    constructor(\n        private _consignmentRequestSender: ConsignmentRequestSender,\n        private _checkoutRequestSender: CheckoutRequestSender\n    ) {}\n\n    unassignItemsByAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<DeleteConsignmentAction | UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const existingConsignment = state.consignments.getConsignmentByAddress(consignment.shippingAddress);\n\n            if (!existingConsignment) {\n                throw new InvalidArgumentError('No consignment found for the specified address');\n            }\n\n            const lineItems = this._removeLineItems(\n                consignment.lineItems,\n                existingConsignment,\n                state.cart.getCart()\n            );\n\n            if (!lineItems.length) {\n                return this.deleteConsignment(existingConsignment.id, options)(store);\n            }\n\n            return this.updateConsignment({\n                id: existingConsignment.id,\n                shippingAddress: consignment.shippingAddress,\n                lineItems,\n            }, options)(store);\n        };\n    }\n\n    assignItemsByAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateConsignmentAction | CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const existingConsignment = state.consignments.getConsignmentByAddress(consignment.shippingAddress);\n\n            return this._createOrUpdateConsignment({\n                id: existingConsignment && existingConsignment.id,\n                shippingAddress: consignment.shippingAddress,\n                lineItems: this._addLineItems(\n                    consignment.lineItems,\n                    existingConsignment,\n                    state.cart.getCart()\n                ),\n            }, options)(store);\n        };\n    }\n\n    selectShippingOption(\n        id: string,\n        options?: RequestOptions\n    ): ThunkAction<UpdateShippingOptionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateShippingOptionAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n            const consignments = state.consignments.getConsignments();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            if (!consignments || !consignments.length) {\n                throw new MissingDataError(MissingDataErrorType.MissingConsignments);\n            }\n\n            const consignmentUpdateBody = {\n                id: consignments[0].id,\n                shippingOptionId: id,\n            };\n\n            const consignmentMeta = {\n                id: consignments[0].id,\n            };\n\n            observer.next(createAction(ConsignmentActionType.UpdateShippingOptionRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignmentUpdateBody, options)\n                .then(({ body }) => {\n                    observer.next(createAction(\n                        ConsignmentActionType.UpdateShippingOptionSucceeded,\n                        body,\n                        consignmentMeta\n                    ));\n\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(\n                        ConsignmentActionType.UpdateShippingOptionFailed,\n                        response,\n                        consignmentMeta\n                    ));\n                });\n        });\n    }\n\n    loadShippingOptions(options?: RequestOptions): ThunkAction<LoadShippingOptionsAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<LoadShippingOptionsAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.LoadShippingOptionsRequested));\n\n            this._checkoutRequestSender.loadCheckout(checkout.id, {\n                ...options,\n                params: {\n                    include: [CheckoutIncludes.AvailableShippingOptions],\n                },\n            })\n            .then(({ body }) => {\n                observer.next(createAction(ConsignmentActionType.LoadShippingOptionsSucceeded, body));\n                observer.complete();\n            })\n            .catch(response => {\n                observer.error(createErrorAction(ConsignmentActionType.LoadShippingOptionsFailed, response));\n            });\n        });\n    }\n\n    updateAddress(\n        address: AddressRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<CreateConsignmentsAction | UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return store => {\n            const consignment = this._getConsignmentRequestBody(address, store);\n            const consignments = store.getState().consignments.getConsignments();\n\n            if (consignments && consignments.length) {\n                (consignment as ConsignmentUpdateRequestBody).id = consignments[0].id;\n            }\n\n            return this._createOrUpdateConsignment(consignment, options)(store);\n        };\n    }\n\n    createConsignments(\n        consignments: ConsignmentsRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<CreateConsignmentsAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.CreateConsignmentsRequested));\n\n            this._consignmentRequestSender.createConsignments(checkout.id, consignments, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.CreateConsignmentsSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.CreateConsignmentsFailed, response));\n                });\n        });\n    }\n\n    updateConsignment(\n        consignment: ConsignmentUpdateRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateConsignmentAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const consignmentMeta = { id: consignment.id };\n\n            observer.next(createAction(ConsignmentActionType.UpdateConsignmentRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignment, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.UpdateConsignmentSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.UpdateConsignmentFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    deleteConsignment(\n        consignmentId: string,\n        options?: RequestOptions\n    ): ThunkAction<DeleteConsignmentAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<DeleteConsignmentAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n            const consignmentMeta = { id: consignmentId };\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.DeleteConsignmentRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.deleteConsignment(checkout.id, consignmentId, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.DeleteConsignmentSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.DeleteConsignmentFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    updateShippingOption(\n        consignment: ConsignmentShippingOptionRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateShippingOptionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateShippingOptionAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const consignmentMeta = { id: consignment.id };\n\n            observer.next(createAction(ConsignmentActionType.UpdateShippingOptionRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignment, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.UpdateShippingOptionSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.UpdateShippingOptionFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    private _createOrUpdateConsignment(\n        consignment: ConsignmentCreateRequestBody | ConsignmentUpdateRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateConsignmentAction | CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return store => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            if (this._isUpdateConsignmentRequest(consignment)) {\n                return this.updateConsignment(consignment, options)(store);\n            }\n\n            return this.createConsignments([consignment], options)(store);\n        };\n    }\n\n    private _getConsignmentRequestBody(\n        shippingAddress: AddressRequestBody,\n        store: ReadableCheckoutStore\n    ): ConsignmentRequestBody {\n        const state = store.getState();\n        const cart = state.cart.getCart();\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        return {\n            shippingAddress,\n            lineItems: (cart.lineItems && cart.lineItems.physicalItems || [])\n                .map(item => ({\n                    itemId: item.id,\n                    quantity: item.quantity,\n                })\n            ),\n        };\n    }\n\n    private _removeLineItems(\n        lineItems: ConsignmentLineItem[],\n        consignment: Consignment,\n        cart?: Cart\n    ): ConsignmentLineItem[] {\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        return this._hydrateLineItems(consignment.lineItemIds, cart).map(existingItem => {\n            const sharedItem = find(lineItems, lineItem => lineItem.itemId === existingItem.itemId);\n\n            return {\n                ...existingItem,\n                quantity: sharedItem ? (existingItem.quantity - sharedItem.quantity) : existingItem.quantity,\n            };\n        }).filter(lineItem => lineItem.quantity > 0);\n    }\n\n    private _addLineItems(\n        lineItems: ConsignmentLineItem[],\n        consignment?: Consignment,\n        cart?: Cart\n    ): ConsignmentLineItem[] {\n        if (!consignment) {\n            return lineItems;\n        }\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        return lineItems\n            .concat(this._hydrateLineItems(consignment.lineItemIds, cart))\n            .filter(lineItem => lineItem.quantity > 0);\n    }\n\n    private _hydrateLineItems(lineItemIds: string[], cart: Cart): ConsignmentLineItem[] {\n        return lineItemIds.map(itemId => {\n            const item = find(cart.lineItems.physicalItems, lineItem => lineItem.id === itemId);\n\n            return {\n                itemId,\n                quantity: item ? item.quantity : 0,\n            };\n        });\n    }\n\n    private _isUpdateConsignmentRequest(\n        request: ConsignmentRequestBody\n    ): request is ConsignmentUpdateRequestBody {\n        const updateRequest = request as ConsignmentUpdateRequestBody;\n\n        return !!updateRequest.id;\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout } from '../checkout';\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nimport { ConsignmentsRequestBody, ConsignmentUpdateRequestBody } from './consignment';\n\nconst DEFAULT_PARAMS = {\n    include: [\n        'consignments.availableShippingOptions',\n        'cart.lineItems.physicalItems.options',\n        'cart.lineItems.digitalItems.options',\n        'customer',\n        'promotions.banners',\n    ].join(','),\n};\n\nexport default class ConsignmentRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    createConsignments(checkoutId: string, consignments: ConsignmentsRequestBody, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, { body: consignments, params: DEFAULT_PARAMS, headers, timeout });\n    }\n\n    updateConsignment(checkoutId: string, consignment: ConsignmentUpdateRequestBody, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const { id, ...body } = consignment;\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.put(url, { params: DEFAULT_PARAMS, body, headers, timeout });\n    }\n\n    deleteConsignment(checkoutId: string, consignmentId: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments/${consignmentId}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.delete(url, { params: DEFAULT_PARAMS, headers, timeout });\n    }\n}\n","export default function getCallbackUrl(origin: string): string {\n    return `${window.location.origin}/checkout.php?action=set_external_checkout&provider=masterpass&gateway=stripe&origin=${origin}`;\n}\n","import InternalShippingOption from './internal-shipping-option';\nimport ShippingOption from './shipping-option';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalShippingOption(option: ShippingOption, isSelected: boolean): InternalShippingOption {\n    return {\n        description: option.description,\n        module: option.type,\n        price: option.cost,\n        id: option.id,\n        selected: isSelected,\n        isRecommended: option.isRecommended,\n        imageUrl: option.imageUrl,\n        transitTime: option.transitTime,\n    };\n}\n","export default function isPrivate(key: string): boolean {\n    return `${key}`.indexOf('$$') === 0 || `${key}`.indexOf('_') === 0;\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport RequestError from './request-error';\n\n/**\n * Throw this error if there is an unexpected error and it is not possible to\n * recover from unless the shopper creates a new checkout session.\n */\nexport default class UnrecoverableError extends RequestError {\n    constructor(response: Response, message?: string) {\n        super(response, {\n            message: message || 'An unexpected error has occurred. The checkout process cannot continue as a result.',\n        });\n\n        this.name = 'UnrecoverableError';\n        this.type = 'unrecoverable';\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { InternalErrorResponseBody } from '../error-response-body';\n\nimport RequestError from './request-error';\n\nexport default function mapFromInternalErrorResponse(\n    response: Response<InternalErrorResponseBody>,\n    message?: string\n): RequestError {\n    const { body } = response;\n    const { errors = [] } = body;\n\n    return new RequestError(response, {\n        message: joinErrors(errors) || body.detail || body.title || message,\n        errors: errors.length ?\n            errors.map(message => ({ code: body.type, message })) :\n            [{ code: body.type, message: body.detail || body.title }],\n    });\n}\n\nfunction joinErrors(errors: string[]): string | undefined {\n    return errors.reduce((result: string[], error) => {\n        if (error) {\n            return [...result, error];\n        }\n\n        return result;\n    }, []).join(' ');\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { PaymentErrorResponseBody } from '../error-response-body';\n\nimport RequestError from './request-error';\n\nexport default function mapFromPaymentErrorResponse(\n    response: Response<PaymentErrorResponseBody>,\n    message?: string\n): RequestError {\n    const { body } = response;\n    const { errors = [] } = body;\n\n    return new RequestError(response, {\n        message: joinErrors(errors) || message,\n        errors,\n    });\n}\n\nfunction joinErrors(errors: Array<{ code: string; message?: string }>): string | undefined {\n    if (!Array.isArray(errors)) {\n        return;\n    }\n\n    return errors.reduce((result: string[], error) => {\n        if (error && error.message) {\n            return [...result, error.message];\n        }\n\n        return result;\n    }, []).join(' ');\n}\n","import { Response } from '@bigcommerce/request-sender';\nimport { last } from 'lodash';\n\nimport ErrorResponseBody, {\n    InternalErrorResponseBody,\n    StorefrontErrorResponseBody\n} from './error-response-body';\nimport { RequestError, TimeoutError } from './errors';\nimport mapFromInternalErrorResponse from './errors/map-from-internal-error-response';\nimport mapFromPaymentErrorResponse from './errors/map-from-payment-error-response';\nimport mapFromStorefrontErrorResponse from './errors/map-from-storefront-error-response';\n\nexport default class RequestErrorFactory {\n    private _factoryMethods: { [key: string]: ErrorFactoryMethod } = {};\n\n    constructor() {\n        this.register('default', (response, message) => new RequestError(response, { message }));\n        this.register('internal', (response, message) => mapFromInternalErrorResponse(response, message));\n        this.register('storefront', (response, message) => mapFromStorefrontErrorResponse(response, message));\n        this.register('payment', (response, message) => mapFromPaymentErrorResponse(response, message));\n        this.register('timeout', response => new TimeoutError(response));\n    }\n\n    register(type: string, factoryMethod: ErrorFactoryMethod): void {\n        this._factoryMethods[type] = factoryMethod;\n    }\n\n    createError(response: Response, message?: string): RequestError {\n        const factoryMethod = this._factoryMethods[this._getType(response)] || this._factoryMethods.default;\n\n        return factoryMethod(response, message);\n    }\n\n    private _getType(response: Response<ErrorResponseBody>): string {\n        if (response.status === 0) {\n            return 'timeout';\n        }\n\n        if (this._isStorefrontErrorResponseBody(response.body)) {\n            return 'storefront';\n        }\n\n        if (this._isInternalErrorResponseBody(response.body)) {\n            const internalType = last(response.body.type.split('/'));\n\n            return internalType && this._factoryMethods[internalType] ?\n                internalType :\n                'internal';\n        }\n\n        const error = last(response.body && response.body.errors);\n\n        if (error && error.code && this._factoryMethods[error.code]) {\n            return error.code;\n        }\n\n        return 'payment';\n    }\n\n    private _isStorefrontErrorResponseBody(\n        errorResponse: ErrorResponseBody\n    ): errorResponse is StorefrontErrorResponseBody {\n        const storefrontErrorResponse = errorResponse as StorefrontErrorResponseBody;\n\n        return !this._isInternalErrorResponseBody(errorResponse) &&\n            typeof storefrontErrorResponse.title === 'string' &&\n            typeof storefrontErrorResponse.type === 'string' &&\n            typeof storefrontErrorResponse.status === 'number' &&\n            typeof storefrontErrorResponse.detail === 'string';\n    }\n\n    private _isInternalErrorResponseBody(\n        errorResponse: ErrorResponseBody\n    ): errorResponse is InternalErrorResponseBody {\n        const internalErrorResponse = errorResponse as InternalErrorResponseBody;\n\n        return typeof internalErrorResponse.errors === 'object' &&\n            typeof internalErrorResponse.title === 'string' &&\n            typeof internalErrorResponse.type === 'string' &&\n            typeof internalErrorResponse.status === 'number';\n    }\n}\n\nexport type ErrorFactoryMethod = (response: Response, message?: string) => RequestError;\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { StorefrontErrorResponseBody } from '../error-response-body';\n\nimport RequestError from './request-error';\n\nexport default function mapFromStorefrontErrorResponse(\n    response: Response<StorefrontErrorResponseBody>,\n    message?: string\n): RequestError<StorefrontErrorResponseBody> {\n    const { body } = response;\n\n    return new RequestError(response, {\n        message: message || body.detail || body.title,\n        errors: [{\n            code: body.code || body.type,\n            message: body.detail || body.title,\n        }],\n    });\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { omitDeep } from '../utility';\n\nimport { ClearErrorAction, ErrorActionType } from './error-actions';\n\nexport default function clearErrorReducer<TState extends { [key: string]: any }, TAction extends Action>(\n    state: TState,\n    action: TAction\n): TState | undefined {\n    if (isClearErrorAction(action)) {\n        return omitDeep(state, value => value === action.payload);\n    }\n\n    return state;\n}\n\nfunction isClearErrorAction(action: Action): action is ClearErrorAction {\n    return action.type === ErrorActionType.ClearError;\n}\n","import isEqual from './is-equal';\n\n/**\n * Replace the current value with a new value if the former is different to the\n * latter.\n */\nexport default function replace<T>(currentValue: T, newValue?: T): T {\n    if (newValue === undefined || isEqual(currentValue, newValue)) {\n        return currentValue;\n    }\n\n    return newValue;\n}\n","import isEqual from './is-equal';\n\n/**\n * Set a new value to an object under a key if the new value is different to the\n * current value of the key.\n */\nexport default function objectSet<T extends { [key: string]: any }, K extends keyof T>(\n    object: T | undefined,\n    key: K,\n    value: T[K]\n): T {\n    if (object && object.hasOwnProperty(key) && isEqual(object[key], value)) {\n        return object;\n    }\n\n    return {\n        ...object as any,\n        [key]: value,\n    };\n}\n","import BillingAddress from './billing-address';\n\nexport default interface BillingAddressState {\n    data?: BillingAddress;\n    errors: BillingAddressErrorsState;\n    statuses: BillingAddressStatusesState;\n}\n\nexport interface BillingAddressErrorsState {\n    loadError?: Error;\n    updateError?: Error;\n    continueAsGuestError?: Error;\n}\n\nexport interface BillingAddressStatusesState {\n    isLoading?: boolean;\n    isUpdating?: boolean;\n    isContinuingAsGuest?: boolean;\n}\n\nexport const DEFAULT_STATE: BillingAddressState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { objectSet, replace } from '../common/utility';\nimport { OrderAction, OrderActionType } from '../order';\n\nimport BillingAddress from './billing-address';\nimport { BillingAddressAction, BillingAddressActionType } from './billing-address-actions';\nimport BillingAddressState, { BillingAddressErrorsState, BillingAddressStatusesState, DEFAULT_STATE } from './billing-address-state';\n\nexport default function billingAddressReducer(\n    state: BillingAddressState = DEFAULT_STATE,\n    action: Action\n): BillingAddressState {\n    const reducer = combineReducers<BillingAddressState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: BillingAddress | undefined,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddress | undefined {\n    switch (action.type) {\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case OrderActionType.LoadOrderSucceeded:\n        return replace(data, action.payload && action.payload.billingAddress);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: BillingAddressErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddressErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    case BillingAddressActionType.UpdateBillingAddressRequested:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n        return objectSet(errors, 'updateError', undefined);\n\n    case BillingAddressActionType.UpdateBillingAddressFailed:\n        return objectSet(errors, 'updateError', action.payload);\n\n    case BillingAddressActionType.ContinueAsGuestRequested:\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n        return objectSet(errors, 'continueAsGuestError', undefined);\n\n    case BillingAddressActionType.ContinueAsGuestFailed:\n        return objectSet(errors, 'continueAsGuestError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: BillingAddressStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddressStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.LoadCheckoutFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    case BillingAddressActionType.UpdateBillingAddressRequested:\n        return objectSet(statuses, 'isUpdating', true);\n\n    case BillingAddressActionType.UpdateBillingAddressFailed:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n        return objectSet(statuses, 'isUpdating', false);\n\n    case BillingAddressActionType.ContinueAsGuestRequested:\n        return objectSet(statuses, 'isContinuingAsGuest', true);\n\n    case BillingAddressActionType.ContinueAsGuestFailed:\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n        return objectSet(statuses, 'isContinuingAsGuest', false);\n\n    default:\n        return statuses;\n    }\n}\n","import { isArray } from 'lodash';\n\nimport isPlainObject from './is-plain-object';\nimport objectMerge from './object-merge';\nimport replace from './replace';\n\nexport interface ArrayReplaceOptions {\n    matchObject(objectA: any, objectB: any): boolean;\n}\n\nexport default function arrayReplace<T>(currentArray: T[] | undefined, newArray: T[], options?: ArrayReplaceOptions): T[];\nexport default function arrayReplace<T>(currentArray: T[], newArray?: T[], options?: ArrayReplaceOptions): undefined;\nexport default function arrayReplace<T>(currentArray?: T[], newArray?: T[], options?: ArrayReplaceOptions): T[] | undefined;\nexport default function arrayReplace<T>(currentArray?: T[], newArray?: T[], options?: ArrayReplaceOptions): T[] | undefined {\n    const { matchObject = (a: any, b: any) => a.id === b.id } = options || {};\n\n    // Return the new array if the current array does not exist\n    if (!currentArray) {\n        return newArray;\n    }\n\n    // If the new array does not exist, or the current array is strictly equal\n    // to the new array, exit early and return the current array so that the\n    // object reference doesn't change\n    if (!newArray || currentArray === newArray) {\n        return currentArray;\n    }\n\n    // Otherwise, try to replace the items of the current array with the new\n    // array. If the item from the two arrays are the same, keep the current\n    // one. Do it recursively until all arrays are replaced.\n    let sameAsCurrentCount = 0;\n    let sameAsNewCount = 0;\n\n    const countSameAsReplaced = <T>(replacedValue: T, currentValue: T, newValue: T): T => {\n        sameAsCurrentCount += replacedValue === currentValue ? 1 : 0;\n        sameAsNewCount += replacedValue === newValue ? 1 : 0;\n\n        return replacedValue;\n    };\n\n    const result = newArray.map((newItem, index) => {\n        const currentItem = currentArray && currentArray[index];\n\n        if (isPlainObject(currentItem) && isPlainObject(newItem)) {\n            if (matchObject(currentItem, newItem)) {\n                return countSameAsReplaced(\n                    objectMerge(currentItem, newItem),\n                    currentItem,\n                    newItem\n                );\n            }\n\n            return countSameAsReplaced(\n                replace(currentItem, newItem),\n                currentItem,\n                newItem\n            );\n        }\n\n        if (isArray(currentItem) && isArray(newItem)) {\n            return countSameAsReplaced(\n                arrayReplace(currentItem, newItem),\n                currentItem,\n                newItem\n            );\n        }\n\n        return countSameAsReplaced(\n            replace(currentItem, newItem),\n            currentItem,\n            newItem\n        );\n    }) as T[];\n\n    // If all items in the result are identical to the current array, and the\n    // current array and the new array have the same size, simply return the\n    // current array instead of the result.\n    if (sameAsCurrentCount === newArray.length && (currentArray && currentArray.length === newArray.length)) {\n        return currentArray;\n    }\n\n    // If all items in the result are identical to the new array, simply return\n    // the new array.\n    if (sameAsNewCount === newArray.length) {\n        return newArray;\n    }\n\n    return result;\n}\n","import { isArray } from 'lodash';\n\nimport arrayReplace from './array-replace';\nimport isPlainObject from './is-plain-object';\nimport objectSet from './object-set';\n\nexport default function objectMerge<T extends object>(currentObject: T, newObject?: Partial<T>): T;\nexport default function objectMerge<T extends object>(currentObject: T | undefined, newObject: Partial<T>): Partial<T>;\nexport default function objectMerge<T extends object>(currentObject?: T, newObject?: Partial<T>): T | undefined;\nexport default function objectMerge<T extends object>(currentObject?: T, newObject?: Partial<T>): T | Partial<T> | undefined {\n    if (!currentObject) {\n        return newObject;\n    }\n\n    // If the new object does not exist but the current object does, or the new\n    // object is strictly equal to the current object, return the current object\n    if (!newObject || currentObject === newObject) {\n        return currentObject;\n    }\n\n    // If both objects exist, but some values might be different, perform a merge.\n    // Retain values that are equal and only replace them with the new values if\n    // they are different.\n    return (Object.keys(newObject) as Array<keyof T>)\n        .reduce((result, key) => {\n            const currentValue = result[key];\n            const newValue = newObject[key];\n\n            if (isPlainObject(currentValue) && isPlainObject(newValue)) {\n                return objectSet(result, key, objectMerge(currentValue, newValue));\n            }\n\n            if (isArray(currentValue) && isArray(newValue)) {\n                return objectSet(result, key, arrayReplace(currentValue, newValue) as any);\n            }\n\n            return objectSet(result, key, newValue as any);\n        }, currentObject);\n}\n","import Cart from './cart';\n\nexport default interface CartState {\n    data?: Cart;\n    errors: CartErrorsState;\n    statuses: CartStatusesState;\n}\n\nexport interface CartErrorsState {\n    loadError?: Error;\n}\n\nexport interface CartStatusesState {\n    isLoading?: boolean;\n}\n\nexport const DEFAULT_STATE: CartState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { BillingAddressAction, BillingAddressActionType } from '../billing/billing-address-actions';\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\nimport { CouponAction, CouponActionType } from '../coupon/coupon-actions';\nimport { GiftCertificateAction, GiftCertificateActionType } from '../coupon/gift-certificate-actions';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping/consignment-actions';\n\nimport Cart from './cart';\nimport CartState, { CartErrorsState, CartStatusesState, DEFAULT_STATE } from './cart-state';\n\nexport default function cartReducer(\n    state: CartState = DEFAULT_STATE,\n    action: Action\n): CartState {\n    const reducer = combineReducers<CartState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Cart | undefined,\n    action: BillingAddressAction | CheckoutAction | ConsignmentAction | CouponAction | GiftCertificateAction\n): Cart | undefined {\n    switch (action.type) {\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return objectMerge(data, action.payload && action.payload.cart);\n\n    default:\n        return data;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CartStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction\n): CartStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return objectSet(statuses, 'isLoading', false);\n\n    default:\n        return statuses;\n    }\n}\n\nfunction errorsReducer(\n    errors: CartErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction\n): CartErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n","import { CheckoutButtonMethodType } from './strategies';\n\nexport default interface CheckoutButtonState {\n    data: {\n        [key in CheckoutButtonMethodType]?: CheckoutButtonDataState | undefined\n    };\n    errors: {\n        [key in CheckoutButtonMethodType]?: CheckoutButtonErrorsState | undefined\n    };\n    statuses: {\n        [key in CheckoutButtonMethodType]?: CheckoutButtonStatusesState | undefined\n    };\n}\n\nexport interface CheckoutButtonDataState {\n    initializedContainers: {\n        [key: string]: boolean;\n    };\n}\n\nexport interface CheckoutButtonErrorsState {\n    initializeError?: Error;\n    deinitializeError?: Error;\n}\n\nexport interface CheckoutButtonStatusesState {\n    isInitializing?: boolean;\n    isDeinitializing?: boolean;\n}\n\nexport const DEFAULT_STATE: CheckoutButtonState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport { CheckoutButtonAction, CheckoutButtonActionType } from './checkout-button-actions';\nimport CheckoutButtonState, { CheckoutButtonDataState, CheckoutButtonErrorsState, CheckoutButtonStatusesState, DEFAULT_STATE } from './checkout-button-state';\n\nconst DEFAULT_DATA_STATE: CheckoutButtonDataState = { initializedContainers: {} };\nconst DEFAULT_ERROR_STATE: CheckoutButtonErrorsState = {};\nconst DEFAULT_STATUS_STATE: CheckoutButtonStatusesState = {};\n\nexport default function checkoutButtonReducer(\n    state: CheckoutButtonState = DEFAULT_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonState {\n    if (!action.meta || !action.meta.methodId) {\n        return state;\n    }\n\n    const reducer = combineReducers<CheckoutButtonState>({\n        data: combineReducers({\n            [action.meta.methodId]: dataReducer,\n        }),\n        errors: combineReducers({\n            [action.meta.methodId]: errorsReducer,\n        }),\n        statuses: combineReducers({\n            [action.meta.methodId]: statusesReducer,\n        }),\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: CheckoutButtonDataState = DEFAULT_DATA_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonDataState {\n    switch (action.type) {\n    case CheckoutButtonActionType.InitializeButtonSucceeded:\n        if (!action.meta || !action.meta.containerId) {\n            return data;\n        }\n\n        return objectMerge(data, {\n            initializedContainers: {\n                [action.meta.containerId]: true,\n            },\n        });\n\n    case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n        return objectSet(data, 'initializedContainers', {});\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: CheckoutButtonErrorsState = DEFAULT_ERROR_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonErrorsState {\n    switch (action.type) {\n    case CheckoutButtonActionType.InitializeButtonRequested:\n    case CheckoutButtonActionType.InitializeButtonSucceeded:\n        return objectSet(errors, 'initializeError', undefined);\n\n    case CheckoutButtonActionType.InitializeButtonFailed:\n        return objectSet(errors, 'initializeError', action.payload);\n\n    case CheckoutButtonActionType.DeinitializeButtonRequested:\n    case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n        return objectSet(errors, 'deinitializeError', undefined);\n\n    case CheckoutButtonActionType.DeinitializeButtonFailed:\n        return objectSet(errors, 'deinitializeError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CheckoutButtonStatusesState = DEFAULT_STATUS_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonStatusesState {\n    switch (action.type) {\n    case CheckoutButtonActionType.InitializeButtonRequested:\n        return objectSet(statuses, 'isInitializing', true);\n\n    case CheckoutButtonActionType.InitializeButtonFailed:\n    case CheckoutButtonActionType.InitializeButtonSucceeded:\n        return objectSet(statuses, 'isInitializing', false);\n\n    case CheckoutButtonActionType.DeinitializeButtonRequested:\n        return objectSet(statuses, 'isDeinitializing', true);\n\n    case CheckoutButtonActionType.DeinitializeButtonFailed:\n    case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n        return objectSet(statuses, 'isDeinitializing', false);\n\n    default:\n        return statuses;\n    }\n}\n","import Config from './config';\n\nexport default interface ConfigState {\n    data?: Config;\n    meta?: ConfigMetaState;\n    errors: ConfigErrorsState;\n    statuses: ConfigStatusesState;\n}\n\nexport interface ConfigMetaState {\n    externalSource?: string;\n}\n\nexport interface ConfigErrorsState {\n    loadError?: Error;\n}\n\nexport interface ConfigStatusesState {\n    isLoading?: boolean;\n}\n\nexport const DEFAULT_STATE: ConfigState = {\n    meta: {},\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport Config from './config';\nimport { ConfigActionType, LoadConfigAction } from './config-actions';\nimport ConfigState, { ConfigErrorsState, ConfigStatusesState, DEFAULT_STATE } from './config-state';\n\nexport default function configReducer(\n    state: ConfigState = DEFAULT_STATE,\n    action: Action\n): ConfigState {\n    const reducer = combineReducers<ConfigState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Config | undefined,\n    action: LoadConfigAction\n): Config | undefined {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigSucceeded:\n        return objectMerge(data, action.payload);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ConfigErrorsState = DEFAULT_STATE.errors,\n    action: LoadConfigAction\n): ConfigErrorsState {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case ConfigActionType.LoadConfigFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ConfigStatusesState = DEFAULT_STATE.statuses,\n    action: LoadConfigAction\n): ConfigStatusesState {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case ConfigActionType.LoadConfigSucceeded:\n    case ConfigActionType.LoadConfigFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    default:\n        return statuses;\n    }\n}\n","import { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nimport Coupon from './coupon';\n\nexport default interface CouponState {\n    data?: Coupon[];\n    errors: CouponErrorsState;\n    statuses: CouponStatusesState;\n}\n\nexport interface CouponErrorsState {\n    applyCouponError?: RequestError<StorefrontErrorResponseBody>;\n    removeCouponError?: RequestError<StorefrontErrorResponseBody>;\n}\n\nexport interface CouponStatusesState {\n    isApplyingCoupon?: boolean;\n    isRemovingCoupon?: boolean;\n}\n\nexport const DEFAULT_STATE: CouponState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectSet } from '../common/utility';\nimport { OrderAction, OrderActionType } from '../order';\n\nimport Coupon from './coupon';\nimport { CouponAction, CouponActionType } from './coupon-actions';\nimport CouponState, { CouponErrorsState, CouponStatusesState, DEFAULT_STATE } from './coupon-state';\n\nexport default function couponReducer(\n    state: CouponState = DEFAULT_STATE,\n    action: Action\n): CouponState {\n    const reducer = combineReducers<CouponState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Coupon[] | undefined,\n    action: CouponAction | CheckoutAction | OrderAction\n): Coupon[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case OrderActionType.LoadOrderSucceeded:\n        return arrayReplace(data, action.payload && action.payload.coupons);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CouponErrorsState = {},\n    action: CouponAction\n): CouponErrorsState {\n    switch (action.type) {\n    case CouponActionType.ApplyCouponRequested:\n    case CouponActionType.ApplyCouponSucceeded:\n        return objectSet(errors, 'applyCouponError', undefined);\n\n    case CouponActionType.ApplyCouponFailed:\n        return objectSet(errors, 'applyCouponError', action.payload);\n\n    case CouponActionType.RemoveCouponRequested:\n    case CouponActionType.RemoveCouponSucceeded:\n        return objectSet(errors, 'removeCouponError', undefined);\n\n    case CouponActionType.RemoveCouponFailed:\n        return objectSet(errors, 'removeCouponError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CouponStatusesState = {},\n    action: CouponAction\n): CouponStatusesState {\n    switch (action.type) {\n    case CouponActionType.ApplyCouponRequested:\n        return objectSet(statuses, 'isApplyingCoupon', true);\n\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.ApplyCouponFailed:\n        return objectSet(statuses, 'isApplyingCoupon', false);\n\n    case CouponActionType.RemoveCouponRequested:\n        return objectSet(statuses, 'isRemovingCoupon', true);\n\n    case CouponActionType.RemoveCouponSucceeded:\n    case CouponActionType.RemoveCouponFailed:\n        return objectSet(statuses, 'isRemovingCoupon', false);\n\n    default:\n        return statuses;\n    }\n}\n","import { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nimport GiftCertificate from './gift-certificate';\n\nexport default interface GiftCertificateState {\n    data?: GiftCertificate[];\n    errors: GiftCertificateErrorsState;\n    statuses: GiftCertificateStatusesState;\n}\n\nexport interface GiftCertificateErrorsState {\n    applyGiftCertificateError?: RequestError<StorefrontErrorResponseBody>;\n    removeGiftCertificateError?: RequestError<StorefrontErrorResponseBody>;\n}\n\nexport interface GiftCertificateStatusesState {\n    isApplyingGiftCertificate?: boolean;\n    isRemovingGiftCertificate?: boolean;\n}\n\nexport const DEFAULT_STATE: GiftCertificateState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectSet } from '../common/utility';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping/consignment-actions';\n\nimport { CouponAction, CouponActionType } from './coupon-actions';\nimport GiftCertificate from './gift-certificate';\nimport { GiftCertificateAction, GiftCertificateActionType } from './gift-certificate-actions';\nimport GiftCertificateState, { DEFAULT_STATE, GiftCertificateErrorsState, GiftCertificateStatusesState } from './gift-certificate-state';\n\nexport default function giftCertificateReducer(\n    state: GiftCertificateState = DEFAULT_STATE,\n    action: Action\n): GiftCertificateState {\n    const reducer = combineReducers<GiftCertificateState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: GiftCertificate[] | undefined,\n    action: CheckoutAction | GiftCertificateAction | ConsignmentAction | CouponAction\n): GiftCertificate[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return arrayReplace(data, action.payload && action.payload.giftCertificates);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: GiftCertificateErrorsState = DEFAULT_STATE.errors,\n    action: GiftCertificateAction\n): GiftCertificateErrorsState {\n    switch (action.type) {\n    case GiftCertificateActionType.ApplyGiftCertificateRequested:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n        return objectSet(errors, 'applyGiftCertificateError', undefined);\n\n    case GiftCertificateActionType.ApplyGiftCertificateFailed:\n        return objectSet(errors, 'applyGiftCertificateError', action.payload);\n\n    case GiftCertificateActionType.RemoveGiftCertificateRequested:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return objectSet(errors, 'removeGiftCertificateError', undefined);\n\n    case GiftCertificateActionType.RemoveGiftCertificateFailed:\n        return objectSet(errors, 'removeGiftCertificateError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: GiftCertificateStatusesState = DEFAULT_STATE.statuses,\n    action: GiftCertificateAction\n): GiftCertificateStatusesState {\n    switch (action.type) {\n    case GiftCertificateActionType.ApplyGiftCertificateRequested:\n        return objectSet(statuses, 'isApplyingGiftCertificate', true);\n\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateFailed:\n        return objectSet(statuses, 'isApplyingGiftCertificate', false);\n\n    case GiftCertificateActionType.RemoveGiftCertificateRequested:\n        return objectSet(statuses, 'isRemovingGiftCertificate', true);\n\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateFailed:\n        return objectSet(statuses, 'isRemovingGiftCertificate', false);\n\n    default:\n        return statuses;\n    }\n}\n","import Customer from './customer';\n\nexport default interface CustomerState {\n    data?: Customer;\n}\n\nexport const DEFAULT_STATE: CustomerState = {};\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { objectMerge } from '../common/utility';\n\nimport Customer from './customer';\nimport CustomerState, { DEFAULT_STATE } from './customer-state';\n\nexport default function customerReducer(\n    state: CustomerState = DEFAULT_STATE,\n    action: CheckoutAction\n): CustomerState {\n    const reducer = combineReducers<CustomerState, CheckoutAction>({\n        data: dataReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Customer | undefined,\n    action: CheckoutAction\n): Customer | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return objectMerge(data, action.payload && action.payload.customer);\n\n    default:\n        return data;\n    }\n}\n","export default interface CustomerStrategyState {\n    data: CustomerStrategyDataState;\n    errors: CustomerStrategyErrorsState;\n    statuses: CustomerStrategyStatusesState;\n}\n\nexport interface CustomerStrategyDataState {\n    [key: string]: {\n        isInitialized: boolean;\n    };\n}\n\nexport interface CustomerStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    signInError?: Error;\n    signInMethodId?: string;\n    signOutError?: Error;\n    signOutMethodId?: string;\n    widgetInteractionError?: Error;\n    widgetInteractionMethodId?: string;\n}\n\nexport interface CustomerStrategyStatusesState {\n    deinitializeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isInitializing?: boolean;\n    isSigningIn?: boolean;\n    isSigningOut?: boolean;\n    signInMethodId?: string;\n    signOutMethodId?: string;\n    isWidgetInteracting?: boolean;\n    widgetInteractionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: CustomerStrategyState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge } from '../common/utility';\n\nimport { CustomerStrategyAction, CustomerStrategyActionType } from './customer-strategy-actions';\nimport CustomerStrategyState, { CustomerStrategyDataState, CustomerStrategyErrorsState, CustomerStrategyStatusesState, DEFAULT_STATE } from './customer-strategy-state';\n\nexport default function customerStrategyReducer(\n    state: CustomerStrategyState = DEFAULT_STATE,\n    action: Action\n): CustomerStrategyState {\n    const reducer = combineReducers<CustomerStrategyState, CustomerStrategyAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: CustomerStrategyDataState = DEFAULT_STATE.data,\n    action: CustomerStrategyAction\n): CustomerStrategyDataState {\n    switch (action.type) {\n    case CustomerStrategyActionType.InitializeSucceeded:\n        return objectMerge(data, {\n            [action.meta && action.meta.methodId]: {\n                isInitialized: true,\n            },\n        });\n\n    case CustomerStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(data, {\n            [action.meta && action.meta.methodId]: {\n                isInitialized: false,\n            },\n        });\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: CustomerStrategyErrorsState = DEFAULT_STATE.errors,\n    action: CustomerStrategyAction\n): CustomerStrategyErrorsState {\n    switch (action.type) {\n    case CustomerStrategyActionType.InitializeRequested:\n    case CustomerStrategyActionType.InitializeSucceeded:\n        return objectMerge(errors, {\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.InitializeFailed:\n        return objectMerge(errors, {\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.DeinitializeRequested:\n    case CustomerStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(errors, {\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.DeinitializeFailed:\n        return objectMerge(errors, {\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.SignInRequested:\n    case CustomerStrategyActionType.SignInSucceeded:\n        return objectMerge(errors, {\n            signInError: undefined,\n            signInMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.SignInFailed:\n        return objectMerge(errors, {\n            signInError: action.payload,\n            signInMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.SignOutRequested:\n    case CustomerStrategyActionType.SignOutSucceeded:\n        return objectMerge(errors, {\n            signOutError: undefined,\n            signOutMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.SignOutFailed:\n        return objectMerge(errors, {\n            signOutError: action.payload,\n            signOutMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.WidgetInteractionStarted:\n    case CustomerStrategyActionType.WidgetInteractionFinished:\n        return objectMerge(errors, {\n            widgetInteractionError: undefined,\n            widgetInteractionMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.WidgetInteractionFailed:\n        return objectMerge(errors, {\n            widgetInteractionError: action.payload,\n            widgetInteractionMethodId: action.meta.methodId,\n        });\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CustomerStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: CustomerStrategyAction\n): CustomerStrategyStatusesState {\n    switch (action.type) {\n    case CustomerStrategyActionType.InitializeRequested:\n        return objectMerge(statuses, {\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.InitializeFailed:\n    case CustomerStrategyActionType.InitializeSucceeded:\n        return objectMerge(statuses, {\n            isInitializing: false,\n            initializeMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.DeinitializeRequested:\n        return objectMerge(statuses, {\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.DeinitializeFailed:\n    case CustomerStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(statuses, {\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.SignInRequested:\n        return objectMerge(statuses, {\n            isSigningIn: true,\n            signInMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.SignInFailed:\n    case CustomerStrategyActionType.SignInSucceeded:\n        return objectMerge(statuses, {\n            isSigningIn: false,\n            signInMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.SignOutRequested:\n        return objectMerge(statuses, {\n            isSigningOut: true,\n            signOutMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.SignOutFailed:\n    case CustomerStrategyActionType.SignOutSucceeded:\n        return objectMerge(statuses, {\n            isSigningOut: false,\n            signOutMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.WidgetInteractionStarted:\n        return objectMerge(statuses, {\n            isWidgetInteracting: true,\n            widgetInteractionMethodId: action.meta.methodId,\n         });\n\n    case CustomerStrategyActionType.WidgetInteractionFinished:\n    case CustomerStrategyActionType.WidgetInteractionFailed:\n        return objectMerge(statuses, {\n            isWidgetInteracting: false,\n            widgetInteractionMethodId: undefined,\n         });\n\n    default:\n        return statuses;\n    }\n}\n","import Country from './country';\n\nexport default interface CountryState {\n    data?: Country[];\n    errors: CountryErrorsState;\n    statuses: CountryStatusesState;\n}\n\nexport interface CountryErrorsState {\n    loadError?: Error;\n}\n\nexport interface CountryStatusesState {\n    isLoading?: boolean;\n}\n\nexport const DEFAULT_STATE: CountryState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectSet } from '../common/utility';\n\nimport Country from './country';\nimport { CountryActionType, LoadCountriesAction } from './country-actions';\nimport CountryState, { CountryErrorsState, CountryStatusesState, DEFAULT_STATE } from './country-state';\n\nexport default function countryReducer(\n    state: CountryState = DEFAULT_STATE,\n    action: Action\n): CountryState {\n    const reducer = combineReducers<CountryState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Country[] | undefined,\n    action: LoadCountriesAction\n): Country[] | undefined {\n    switch (action.type) {\n    case CountryActionType.LoadCountriesSucceeded:\n        return arrayReplace(data, action.payload);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CountryErrorsState = DEFAULT_STATE.errors,\n    action: LoadCountriesAction\n): CountryErrorsState {\n    switch (action.type) {\n    case CountryActionType.LoadCountriesRequested:\n    case CountryActionType.LoadCountriesSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case CountryActionType.LoadCountriesFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CountryStatusesState = DEFAULT_STATE.statuses,\n    action: LoadCountriesAction\n): CountryStatusesState {\n    switch (action.type) {\n    case CountryActionType.LoadCountriesRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case CountryActionType.LoadCountriesSucceeded:\n    case CountryActionType.LoadCountriesFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    default:\n        return statuses;\n    }\n}\n","import { Omit } from '../common/types';\n\nimport { InternalOrderMeta, InternalOrderPayment } from './internal-order';\nimport Order from './order';\n\nexport default interface OrderState {\n    data?: OrderDataState;\n    meta?: OrderMetaState;\n    errors: OrderErrorsState;\n    statuses: OrderStatusesState;\n}\n\nexport type OrderDataState = Omit<Order, 'billingAddress' | 'coupons'>;\n\nexport interface OrderMetaState extends InternalOrderMeta {\n    token?: string;\n    orderToken?: string;\n    callbackUrl?: string;\n    payment?: InternalOrderPayment;\n    spamProtectionToken?: string;\n}\n\nexport interface OrderErrorsState {\n    loadError?: Error;\n    submitError?: Error;\n    finalizeError?: Error;\n}\n\nexport interface OrderStatusesState {\n    isLoading?: boolean;\n    isSubmitting?: boolean;\n    isFinalizing?: boolean;\n}\n\nexport const DEFAULT_STATE: OrderState = {\n    errors: {},\n    meta: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\nimport { omit } from 'lodash';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport { OrderAction, OrderActionType } from './order-actions';\nimport OrderState, { DEFAULT_STATE, OrderDataState, OrderErrorsState, OrderMetaState, OrderStatusesState } from './order-state';\nimport { SpamProtectionAction, SpamProtectionActionType } from './spam-protection';\n\nexport default function orderReducer(\n    state: OrderState = DEFAULT_STATE,\n    action: Action\n): OrderState {\n    const reducer = combineReducers<OrderState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: OrderDataState | undefined,\n    action: OrderAction\n): OrderDataState | undefined {\n    switch (action.type) {\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n        return objectMerge(data, omit(action.payload, ['billingAddress', 'coupons'])) as OrderDataState;\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(\n    meta: OrderMetaState | undefined,\n    action: OrderAction | SpamProtectionAction\n): OrderMetaState | undefined {\n    switch (action.type) {\n    case OrderActionType.FinalizeOrderSucceeded:\n    case OrderActionType.SubmitOrderSucceeded:\n        return objectMerge(meta, {\n            ...action.meta,\n            callbackUrl: action.payload && action.payload.order.callbackUrl,\n            orderToken: action.payload && action.payload.order.token,\n            payment: action.payload && action.payload.order && action.payload.order.payment,\n        });\n\n    case SpamProtectionActionType.Completed:\n        return objectSet(meta, 'spamProtectionToken', action.payload);\n\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: OrderErrorsState = DEFAULT_STATE.errors,\n    action: OrderAction\n): OrderErrorsState {\n    switch (action.type) {\n    case OrderActionType.LoadOrderRequested:\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n    case OrderActionType.LoadOrderPaymentsRequested:\n        return objectSet(errors, 'loadError', undefined);\n\n    case OrderActionType.LoadOrderFailed:\n    case OrderActionType.LoadOrderPaymentsFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: OrderStatusesState = DEFAULT_STATE.statuses,\n    action: OrderAction\n): OrderStatusesState {\n    switch (action.type) {\n    case OrderActionType.LoadOrderRequested:\n    case OrderActionType.LoadOrderPaymentsRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderFailed:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n    case OrderActionType.LoadOrderPaymentsFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { PaymentAction, PaymentActionType } from './payment-actions';\nimport PaymentResponseBody from './payment-response-body';\nimport PaymentState from './payment-state';\n\nexport default function paymentReducer(state: PaymentState = {}, action: PaymentAction): PaymentState {\n    const reducer = combineReducers<PaymentState, PaymentAction>({\n        data: dataReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(data: PaymentResponseBody | undefined, action: PaymentAction): PaymentResponseBody | undefined {\n    switch (action.type) {\n    case PaymentActionType.SubmitPaymentSucceeded:\n        return action.payload;\n\n    default:\n        return data;\n    }\n}\n","import PaymentMethod from './payment-method';\nimport PaymentMethodMeta from './payment-method-meta';\n\nexport default interface PaymentMethodState {\n    data?: PaymentMethod[];\n    meta?: PaymentMethodMeta;\n    errors: PaymentMethodErrorsState;\n    statuses: PaymentMethodStatusesState;\n}\n\nexport interface PaymentMethodErrorsState {\n    loadMethodId?: string;\n    loadError?: Error;\n    loadMethodError?: Error;\n}\n\nexport interface PaymentMethodStatusesState {\n    loadMethodId?: string;\n    isLoading?: boolean;\n    isLoadingMethod?: boolean;\n}\n\nexport const DEFAULT_STATE: PaymentMethodState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, mergeOrPush, objectMerge, objectSet } from '../common/utility';\n\nimport PaymentMethod from './payment-method';\nimport { PaymentMethodAction, PaymentMethodActionType } from './payment-method-actions';\nimport PaymentMethodMeta from './payment-method-meta';\nimport PaymentMethodState, { DEFAULT_STATE, PaymentMethodErrorsState, PaymentMethodStatusesState } from './payment-method-state';\n\nexport default function paymentMethodReducer(\n    state: PaymentMethodState = DEFAULT_STATE,\n    action: Action\n): PaymentMethodState {\n    const reducer = combineReducers<PaymentMethodState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: PaymentMethod[] | undefined,\n    action: PaymentMethodAction\n): PaymentMethod[] | undefined {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n        return mergeOrPush(data || [], action.payload, action.payload && {\n            id: action.payload.id,\n            gateway: action.payload.gateway,\n        });\n\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        return arrayReplace(data, action.payload, {\n            matchObject: (methodA, methodB) => (\n                methodA.id === methodB.id && methodA.gateway === methodB.gateway\n            ),\n        });\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(\n    meta: PaymentMethodMeta | undefined,\n    action: PaymentMethodAction\n): PaymentMethodMeta | undefined {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        return objectMerge(meta, action.meta);\n\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: PaymentMethodErrorsState = DEFAULT_STATE.errors,\n    action: PaymentMethodAction\n): PaymentMethodErrorsState {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodsRequested:\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case PaymentMethodActionType.LoadPaymentMethodsFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    case PaymentMethodActionType.LoadPaymentMethodRequested:\n    case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n        return objectMerge(errors, {\n            loadMethodId: undefined,\n            loadMethodError: undefined,\n        });\n\n    case PaymentMethodActionType.LoadPaymentMethodFailed:\n        return objectMerge(errors, {\n            loadMethodId: action.meta.methodId,\n            loadMethodError: action.payload,\n        });\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: PaymentMethodStatusesState = DEFAULT_STATE.statuses,\n    action: PaymentMethodAction\n): PaymentMethodStatusesState {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodsRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n    case PaymentMethodActionType.LoadPaymentMethodsFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    case PaymentMethodActionType.LoadPaymentMethodRequested:\n        return objectMerge(statuses, {\n            isLoadingMethod: true,\n            loadMethodId: action.meta.methodId,\n        });\n\n    case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n    case PaymentMethodActionType.LoadPaymentMethodFailed:\n        return objectMerge(statuses, {\n            isLoadingMethod: false,\n            loadMethodId: undefined,\n        });\n\n    default:\n        return statuses;\n    }\n}\n","import { findIndex, pick, pickBy } from 'lodash';\n\nimport { PartialDeep } from '../types';\n\nimport isPlainObject from './is-plain-object';\nimport objectMerge from './object-merge';\n\n/**\n * Push an item to an array if it doesn't exist in the array. Otherwise, merge\n * with the existing item in the array. This function always returns a new array.\n */\nexport default function mergeOrPush<T>(\n    array: T[],\n    item?: T,\n    predicate?: ((item: T) => boolean) | PartialDeep<T>\n): T[] {\n    if (!item) {\n        return array;\n    }\n\n    const defaultPredicate = pick(item, 'id');\n    const index = findIndex(array, typeof predicate === 'object' ? pickBy(predicate) : (predicate || defaultPredicate));\n    const newArray = [...array];\n\n    if (index === -1) {\n        newArray.push(item);\n    } else {\n        const existingItem = array[index];\n\n        newArray[index] = isPlainObject(existingItem) && isPlainObject(item) ?\n            objectMerge(existingItem, item) :\n            item;\n    }\n\n    return newArray;\n}\n","export default interface PaymentStrategyState {\n    data: PaymentStrategyDataState;\n    errors: PaymentStrategyErrorsState;\n    statuses: PaymentStrategyStatusesState;\n}\n\nexport interface PaymentStrategyDataState {\n    [key: string]: {\n        isInitialized: boolean;\n    };\n}\n\nexport interface PaymentStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    executeError?: Error;\n    executeMethodId?: string;\n    finalizeError?: Error;\n    finalizeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    widgetInteractionError?: Error;\n    widgetInteractionMethodId?: string;\n}\n\nexport interface PaymentStrategyStatusesState {\n    deinitializeMethodId?: string;\n    executeMethodId?: string;\n    finalizeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isExecuting?: boolean;\n    isFinalizing?: boolean;\n    isInitializing?: boolean;\n    isWidgetInteracting?: boolean;\n    widgetInteractionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: PaymentStrategyState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge } from '../common/utility';\n\nimport { PaymentStrategyAction, PaymentStrategyActionType } from './payment-strategy-actions';\nimport PaymentStrategyState, { DEFAULT_STATE, PaymentStrategyDataState, PaymentStrategyErrorsState, PaymentStrategyStatusesState } from './payment-strategy-state';\n\nexport default function paymentStrategyReducer(\n    state: PaymentStrategyState = DEFAULT_STATE,\n    action: Action\n): PaymentStrategyState {\n    const reducer = combineReducers<PaymentStrategyState, PaymentStrategyAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: PaymentStrategyDataState = DEFAULT_STATE.data,\n    action: PaymentStrategyAction\n): PaymentStrategyDataState {\n    switch (action.type) {\n    case PaymentStrategyActionType.InitializeSucceeded:\n        return objectMerge(data, {\n            [action.meta && action.meta.methodId]: {\n                isInitialized: true,\n            },\n        });\n\n    case PaymentStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(data, {\n            [action.meta && action.meta.methodId]: {\n                isInitialized: false,\n            },\n        });\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: PaymentStrategyErrorsState = DEFAULT_STATE.errors,\n    action: PaymentStrategyAction\n): PaymentStrategyErrorsState {\n    switch (action.type) {\n    case PaymentStrategyActionType.InitializeRequested:\n    case PaymentStrategyActionType.InitializeSucceeded:\n        return objectMerge(errors, {\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.InitializeFailed:\n        return objectMerge(errors, {\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.DeinitializeRequested:\n    case PaymentStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(errors, {\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.DeinitializeFailed:\n        return objectMerge(errors, {\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.ExecuteRequested:\n    case PaymentStrategyActionType.ExecuteSucceeded:\n        return objectMerge(errors, {\n            executeError: undefined,\n            executeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.ExecuteFailed:\n        return objectMerge(errors, {\n            executeError: action.payload,\n            executeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.FinalizeRequested:\n    case PaymentStrategyActionType.FinalizeSucceeded:\n        return objectMerge(errors, {\n            finalizeError: undefined,\n            finalizeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.FinalizeFailed:\n        return objectMerge(errors, {\n            finalizeError: action.payload,\n            finalizeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.WidgetInteractionStarted:\n    case PaymentStrategyActionType.WidgetInteractionFinished:\n        return objectMerge(errors, {\n            widgetInteractionError: undefined,\n            widgetInteractionMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.WidgetInteractionFailed:\n        return objectMerge(errors, {\n            widgetInteractionError: action.payload,\n            widgetInteractionMethodId: action.meta.methodId,\n        });\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: PaymentStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: PaymentStrategyAction\n): PaymentStrategyStatusesState {\n    switch (action.type) {\n    case PaymentStrategyActionType.InitializeRequested:\n        return objectMerge(statuses, {\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.InitializeFailed:\n    case PaymentStrategyActionType.InitializeSucceeded:\n        return objectMerge(statuses, {\n            isInitializing: false,\n            initializeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.DeinitializeRequested:\n        return objectMerge(statuses, {\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.DeinitializeFailed:\n    case PaymentStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(statuses, {\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.ExecuteRequested:\n        return objectMerge(statuses, {\n            isExecuting: true,\n            executeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.ExecuteFailed:\n    case PaymentStrategyActionType.ExecuteSucceeded:\n        return objectMerge(statuses, {\n            isExecuting: false,\n            executeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.FinalizeRequested:\n        return objectMerge(statuses, {\n            isFinalizing: true,\n            finalizeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.FinalizeFailed:\n    case PaymentStrategyActionType.FinalizeSucceeded:\n        return objectMerge(statuses, {\n            isFinalizing: false,\n            finalizeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.WidgetInteractionStarted:\n        return objectMerge(statuses, {\n            isWidgetInteracting: true,\n            widgetInteractionMethodId: action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.WidgetInteractionFinished:\n    case PaymentStrategyActionType.WidgetInteractionFailed:\n        return objectMerge(statuses, {\n            isWidgetInteracting: false,\n            widgetInteractionMethodId: undefined,\n        });\n\n    default:\n        return statuses;\n    }\n}\n","import Instrument, { VaultAccessToken } from './instrument';\n\nexport default interface InstrumentState {\n    data?: Instrument[];\n    meta?: InstrumentMeta;\n    errors: InstrumentErrorState;\n    statuses: InstrumentStatusState;\n}\n\nexport interface InstrumentErrorState {\n    deleteError?: Error;\n    failedInstrument?: string;\n    loadError?: Error;\n    vaultError?: Error;\n}\n\nexport interface InstrumentStatusState {\n    isDeleting?: boolean;\n    isLoading?: boolean;\n    isVaulting?: boolean;\n    deletingInstrument?: string;\n}\n\nexport type InstrumentMeta = VaultAccessToken;\n\nexport const DEFAULT_STATE = {\n    data: [],\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../../common/error';\nimport { arrayReplace, objectMerge, objectSet } from '../../common/utility';\n\nimport Instrument from './instrument';\nimport { InstrumentAction, InstrumentActionType } from './instrument-actions';\nimport InstrumentState, { DEFAULT_STATE, InstrumentErrorState, InstrumentMeta, InstrumentStatusState } from './instrument-state';\n\nexport default function instrumentReducer(\n    state: InstrumentState = DEFAULT_STATE,\n    action: Action\n): InstrumentState {\n    const reducer = combineReducers<InstrumentState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Instrument[] = DEFAULT_STATE.data,\n    action: InstrumentAction\n): Instrument[] {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n        return arrayReplace(data, action.payload && action.payload.vaultedInstruments || []);\n\n    case InstrumentActionType.DeleteInstrumentSucceeded:\n        return arrayReplace(data, data.filter(instrument =>\n            instrument.bigpayToken !== (action.meta && action.meta.instrumentId)\n        ));\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(\n    meta: InstrumentMeta | undefined,\n    action: InstrumentAction\n): InstrumentMeta | undefined {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n    case InstrumentActionType.DeleteInstrumentSucceeded:\n        return objectMerge(meta, action.meta);\n\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: InstrumentErrorState = DEFAULT_STATE.errors,\n    action: InstrumentAction\n): InstrumentErrorState {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsRequested:\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case InstrumentActionType.DeleteInstrumentRequested:\n    case InstrumentActionType.DeleteInstrumentSucceeded:\n        return objectMerge(errors, {\n            deleteError: undefined,\n            failedInstrument: undefined,\n        });\n\n    case InstrumentActionType.LoadInstrumentsFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    case InstrumentActionType.DeleteInstrumentFailed:\n        return objectMerge(errors, {\n            deleteError: action.payload,\n            failedInstrument: action.meta.instrumentId,\n        });\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: InstrumentStatusState = DEFAULT_STATE.statuses,\n    action: InstrumentAction\n): InstrumentStatusState {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case InstrumentActionType.DeleteInstrumentRequested:\n        return objectMerge(statuses, {\n            isDeleting: true,\n            deletingInstrument: action.meta.instrumentId,\n        });\n\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n    case InstrumentActionType.LoadInstrumentsFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    case InstrumentActionType.DeleteInstrumentSucceeded:\n    case InstrumentActionType.DeleteInstrumentFailed:\n        return objectMerge(statuses, {\n            isDeleting: false,\n            deletingInstrument: undefined,\n        });\n\n    default:\n        return statuses;\n    }\n}\n","import { AmazonPayRemoteCheckout } from './methods';\n\nexport default interface RemoteCheckoutState {\n    data: RemoteCheckoutStateData;\n}\n\nexport interface RemoteCheckoutStateData {\n    amazon?: AmazonPayRemoteCheckout;\n}\n\nexport const DEFAULT_STATE: RemoteCheckoutState = {\n    data: {},\n};\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport RemoteCheckout from './remote-checkout';\nimport { RemoteCheckoutAction, RemoteCheckoutActionType } from './remote-checkout-actions';\nimport RemoteCheckoutState, { DEFAULT_STATE, RemoteCheckoutStateData } from './remote-checkout-state';\n\nexport default function remoteCheckoutReducer(\n    state: RemoteCheckoutState = DEFAULT_STATE,\n    action: RemoteCheckoutAction\n): RemoteCheckoutState {\n    if (!action.meta || !action.meta.methodId) {\n        return state;\n    }\n\n    const reducer = combineReducers<RemoteCheckoutState>({\n        data: combineReducers<RemoteCheckoutStateData>({\n            [action.meta.methodId]: dataReducer,\n        }),\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: RemoteCheckout,\n    action: RemoteCheckoutAction\n): RemoteCheckout {\n    switch (action.type) {\n    case RemoteCheckoutActionType.InitializeRemoteBillingSucceeded:\n        return objectSet(data, 'billing' as any, action.payload && action.payload.billing);\n\n    case RemoteCheckoutActionType.InitializeRemoteShippingSucceeded:\n        return objectSet(data, 'shipping' as any, action.payload && action.payload.shipping);\n\n    case RemoteCheckoutActionType.LoadRemoteSettingsSucceeded:\n        return objectSet(data, 'settings', action.payload);\n\n    case RemoteCheckoutActionType.UpdateRemoteCheckout:\n        return objectMerge(data, action.payload);\n\n    default:\n        return data;\n    }\n}\n","import Consignment from './consignment';\n\nexport default interface ConsignmentState {\n    data?: Consignment[];\n    errors: ConsignmentErrorsState;\n    statuses: ConsignmentStatusesState;\n}\n\nexport interface ConsignmentErrorsState {\n    loadError?: Error;\n    loadShippingOptionsError?: Error;\n    createError?: Error;\n    updateError: { [key: string]: Error | undefined };\n    deleteError: { [key: string]: Error | undefined };\n    updateShippingOptionError: { [key: string]: Error | undefined };\n}\n\nexport interface ConsignmentStatusesState {\n    isLoading?: boolean;\n    isLoadingShippingOptions?: boolean;\n    isCreating?: boolean;\n    isUpdating: { [key: string]: boolean };\n    isDeleting: { [key: string]: boolean };\n    isUpdatingShippingOption: { [key: string]: boolean };\n}\n\nexport const DEFAULT_STATE: ConsignmentState = {\n    errors: {\n        updateShippingOptionError: {},\n        updateError: {},\n        deleteError: {},\n    },\n    statuses: {\n        isUpdating: {},\n        isUpdatingShippingOption: {},\n        isDeleting: {},\n    },\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectMerge, objectSet } from '../common/utility';\nimport { CouponAction, CouponActionType } from '../coupon';\nimport { CustomerAction, CustomerActionType } from '../customer';\n\nimport Consignment from './consignment';\nimport { ConsignmentAction, ConsignmentActionType } from './consignment-actions';\nimport ConsignmentState, { ConsignmentErrorsState, ConsignmentStatusesState, DEFAULT_STATE } from './consignment-state';\n\nexport default function consignmentReducer(\n    state: ConsignmentState = DEFAULT_STATE,\n    action: Action\n): ConsignmentState {\n    const reducer = combineReducers<ConsignmentState, ConsignmentAction | CheckoutAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Consignment[] | undefined,\n    action: ConsignmentAction | CheckoutAction | CouponAction | CustomerAction\n): Consignment[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n        return arrayReplace(data, action.payload && action.payload.consignments);\n\n    case CustomerActionType.SignOutCustomerSucceeded:\n        return arrayReplace(data, []);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ConsignmentErrorsState = DEFAULT_STATE.errors,\n    action: ConsignmentAction | CheckoutAction\n): ConsignmentErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsRequested:\n        return objectSet(errors, 'loadError', undefined);\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case ConsignmentActionType.LoadShippingOptionsFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    case ConsignmentActionType.CreateConsignmentsRequested:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n        return objectSet(errors, 'createError', undefined);\n\n    case ConsignmentActionType.CreateConsignmentsFailed:\n        return objectSet(errors, 'createError', action.payload);\n\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentRequested:\n        if (action.meta) {\n            return objectMerge(errors, {\n                updateError: {\n                    [action.meta.id]: undefined,\n                },\n            });\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateConsignmentFailed:\n        if (action.meta) {\n            return objectMerge(errors, {\n                updateError: {\n                    [action.meta.id]: action.payload,\n                },\n            });\n        }\n\n        return errors;\n\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentRequested:\n        if (action.meta) {\n            return objectMerge(errors, {\n                deleteError: {\n                    [action.meta.id]: undefined,\n                },\n            });\n        }\n\n        return errors;\n\n    case ConsignmentActionType.DeleteConsignmentFailed:\n        if (action.meta) {\n            return objectMerge(errors, {\n                deleteError: {\n                    [action.meta.id]: action.payload,\n                },\n            });\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateShippingOptionRequested:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n        if (action.meta) {\n            return objectMerge(errors, {\n                updateShippingOptionError: {\n                    [action.meta.id]: undefined,\n                },\n            });\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateShippingOptionFailed:\n        if (action.meta) {\n            return objectMerge(errors, {\n                updateShippingOptionError: {\n                    [action.meta.id]: action.payload,\n                },\n            });\n        }\n\n        return errors;\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ConsignmentStatusesState = DEFAULT_STATE.statuses,\n    action: ConsignmentAction | CheckoutAction\n): ConsignmentStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case ConsignmentActionType.LoadShippingOptionsRequested:\n        return objectSet(statuses, 'isLoadingShippingOptions', true);\n\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.LoadCheckoutFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsFailed:\n        return objectSet(statuses, 'isLoadingShippingOptions', false);\n\n    case ConsignmentActionType.CreateConsignmentsRequested:\n        return objectSet(statuses, 'isCreating', true);\n\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.CreateConsignmentsFailed:\n        return objectSet(statuses, 'isCreating', false);\n\n    case ConsignmentActionType.UpdateConsignmentRequested:\n        if (action.meta) {\n            return objectMerge(statuses, {\n                isUpdating: {\n                    [action.meta.id]: true,\n                },\n            });\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentFailed:\n        if (action.meta) {\n            return objectMerge(statuses, {\n                isUpdating: {\n                    [action.meta.id]: false,\n                },\n            });\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.DeleteConsignmentRequested:\n        if (action.meta) {\n            return objectMerge(statuses, {\n                isDeleting: {\n                    [action.meta.id]: true,\n                },\n            });\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentFailed:\n        if (action.meta) {\n            return objectMerge(statuses, {\n                isDeleting: {\n                    [action.meta.id]: false,\n                },\n            });\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateShippingOptionRequested:\n        if (action.meta) {\n            return objectMerge(statuses, {\n                isUpdatingShippingOption: {\n                    [action.meta.id]: true,\n                },\n            });\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionFailed:\n        if (action.meta) {\n            return objectMerge(statuses, {\n                isUpdatingShippingOption: {\n                    [action.meta.id]: false,\n                },\n            });\n        }\n\n        return statuses;\n\n    default:\n        return statuses;\n    }\n}\n","import { Country } from '../geography';\n\nexport default interface ShippingCountryState {\n    data?: Country[];\n    errors: ShippingCountryErrorsState;\n    statuses: ShippingCountryStatusesState;\n}\n\nexport interface ShippingCountryErrorsState {\n    loadError?: Error;\n}\n\nexport interface ShippingCountryStatusesState {\n    isLoading?: boolean;\n}\n\nexport const DEFAULT_STATE: ShippingCountryState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectSet } from '../common/utility';\nimport { Country } from '../geography';\n\nimport { LoadShippingCountriesAction, ShippingCountryActionType } from './shipping-country-actions';\nimport ShippingCountryState, { DEFAULT_STATE, ShippingCountryErrorsState, ShippingCountryStatusesState } from './shipping-country-state';\n\nexport default function shippingCountryReducer(\n    state: ShippingCountryState = DEFAULT_STATE,\n    action: Action\n): ShippingCountryState {\n    const reducer = combineReducers<ShippingCountryState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Country[] | undefined,\n    action: LoadShippingCountriesAction\n): Country[] | undefined {\n    switch (action.type) {\n    case ShippingCountryActionType.LoadShippingCountriesSucceeded:\n        return arrayReplace(data, action.payload);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ShippingCountryErrorsState = DEFAULT_STATE.errors,\n    action: LoadShippingCountriesAction\n): ShippingCountryErrorsState {\n    switch (action.type) {\n    case ShippingCountryActionType.LoadShippingCountriesRequested:\n    case ShippingCountryActionType.LoadShippingCountriesSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case ShippingCountryActionType.LoadShippingCountriesFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ShippingCountryStatusesState = DEFAULT_STATE.statuses,\n    action: LoadShippingCountriesAction\n): ShippingCountryStatusesState {\n    switch (action.type) {\n    case ShippingCountryActionType.LoadShippingCountriesRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case ShippingCountryActionType.LoadShippingCountriesSucceeded:\n    case ShippingCountryActionType.LoadShippingCountriesFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    default:\n        return statuses;\n    }\n}\n","export default interface ShippingStrategyState {\n    data: ShippingStrategyDataState;\n    errors: ShippingStrategyErrorsState;\n    statuses: ShippingStrategyStatusesState;\n}\n\nexport interface ShippingStrategyDataState {\n    [key: string]: {\n        isInitialized: boolean;\n    };\n}\n\nexport interface ShippingStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    updateAddressError?: Error;\n    updateAddressMethodId?: string;\n    selectOptionError?: Error;\n    selectOptionMethodId?: string;\n}\n\nexport interface ShippingStrategyStatusesState {\n    deinitializeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isInitializing?: boolean;\n    isUpdatingAddress?: boolean;\n    isSelectingOption?: boolean;\n    updateAddressMethodId?: string;\n    selectOptionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: ShippingStrategyState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge } from '../common/utility';\n\nimport { ShippingStrategyAction, ShippingStrategyActionType } from './shipping-strategy-actions';\nimport ShippingStrategyState, { DEFAULT_STATE, ShippingStrategyDataState, ShippingStrategyErrorsState, ShippingStrategyStatusesState } from './shipping-strategy-state';\n\nexport default function shippingStrategyReducer(\n    state: ShippingStrategyState = DEFAULT_STATE,\n    action: Action\n): ShippingStrategyState {\n    const reducer = combineReducers<ShippingStrategyState, ShippingStrategyAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: ShippingStrategyDataState = DEFAULT_STATE.data,\n    action: ShippingStrategyAction\n): ShippingStrategyDataState {\n    switch (action.type) {\n    case ShippingStrategyActionType.InitializeSucceeded:\n        return objectMerge(data, {\n            [action.meta && action.meta.methodId]: {\n                isInitialized: true,\n            },\n        });\n\n    case ShippingStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(data, {\n            [action.meta && action.meta.methodId]: {\n                isInitialized: false,\n            },\n        });\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: ShippingStrategyErrorsState = DEFAULT_STATE.errors,\n    action: ShippingStrategyAction\n): ShippingStrategyErrorsState {\n    switch (action.type) {\n    case ShippingStrategyActionType.InitializeRequested:\n    case ShippingStrategyActionType.InitializeSucceeded:\n        return objectMerge(errors, {\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.InitializeFailed:\n        return objectMerge(errors, {\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.DeinitializeRequested:\n    case ShippingStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(errors, {\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.DeinitializeFailed:\n        return objectMerge(errors, {\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.UpdateAddressRequested:\n    case ShippingStrategyActionType.UpdateAddressSucceeded:\n        return objectMerge(errors, {\n            updateAddressError: undefined,\n            updateAddressMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.UpdateAddressFailed:\n        return objectMerge(errors, {\n            updateAddressError: action.payload,\n            updateAddressMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.SelectOptionRequested:\n    case ShippingStrategyActionType.SelectOptionSucceeded:\n        return objectMerge(errors, {\n            selectOptionError: undefined,\n            selectOptionMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.SelectOptionFailed:\n        return objectMerge(errors, {\n            selectOptionError: action.payload,\n            selectOptionMethodId: action.meta && action.meta.methodId,\n        });\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ShippingStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: ShippingStrategyAction\n): ShippingStrategyStatusesState {\n    switch (action.type) {\n    case ShippingStrategyActionType.InitializeRequested:\n        return objectMerge(statuses, {\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.InitializeFailed:\n    case ShippingStrategyActionType.InitializeSucceeded:\n        return objectMerge(statuses, {\n            isInitializing: false,\n            initializeMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.DeinitializeRequested:\n        return objectMerge(statuses, {\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.DeinitializeFailed:\n    case ShippingStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(statuses, {\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.UpdateAddressRequested:\n        return objectMerge(statuses, {\n            isUpdatingAddress: true,\n            updateAddressMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.UpdateAddressFailed:\n    case ShippingStrategyActionType.UpdateAddressSucceeded:\n        return objectMerge(statuses, {\n            isUpdatingAddress: false,\n            updateAddressMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.SelectOptionRequested:\n        return objectMerge(statuses, {\n            isSelectingOption: true,\n            selectOptionMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.SelectOptionFailed:\n    case ShippingStrategyActionType.SelectOptionSucceeded:\n        return objectMerge(statuses, {\n            isSelectingOption: false,\n            selectOptionMethodId: undefined,\n        });\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectSet } from '../common/utility';\n\nimport { StoreCreditAction, StoreCreditActionType } from './store-credit-actions';\nimport StoreCreditState, { StoreCreditErrorsState, StoreCreditStatusesState } from './store-credit-state';\n\nconst DEFAULT_STATE: StoreCreditState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function storeCreditReducer(\n    state: StoreCreditState = DEFAULT_STATE,\n    action: Action\n): StoreCreditState {\n    const reducer = combineReducers<StoreCreditState>({\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction errorsReducer(\n    errors: StoreCreditErrorsState = DEFAULT_STATE.errors,\n    action: StoreCreditAction\n): StoreCreditErrorsState {\n    switch (action.type) {\n    case StoreCreditActionType.ApplyStoreCreditRequested:\n    case StoreCreditActionType.ApplyStoreCreditSucceeded:\n        return objectSet(errors, 'applyError', undefined);\n\n    case StoreCreditActionType.ApplyStoreCreditFailed:\n        return objectSet(errors, 'applyError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: StoreCreditStatusesState = DEFAULT_STATE.statuses,\n    action: StoreCreditAction\n): StoreCreditStatusesState {\n    switch (action.type) {\n    case StoreCreditActionType.ApplyStoreCreditRequested:\n        return objectSet(statuses, 'isApplying', true);\n\n    case StoreCreditActionType.ApplyStoreCreditSucceeded:\n    case StoreCreditActionType.ApplyStoreCreditFailed:\n        return objectSet(statuses, 'isApplying', false);\n\n    default:\n        return statuses;\n    }\n}\n","import { Omit } from '../common/types';\n\nimport Checkout from './checkout';\n\nexport default interface CheckoutState {\n    data?: CheckoutDataState;\n    errors: CheckoutErrorsState;\n    statuses: CheckoutStatusesState;\n}\n\nexport type CheckoutDataState = Omit<Checkout, 'billingAddress' | 'cart' | 'consignments' | 'coupons' | 'giftCertificates'>;\n\nexport interface CheckoutErrorsState {\n    loadError?: Error;\n    updateError?: Error;\n}\n\nexport interface CheckoutStatusesState {\n    isLoading?: boolean;\n    isUpdating?: boolean;\n}\n\nexport const DEFAULT_STATE: CheckoutState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\nimport { omit } from 'lodash';\n\nimport { BillingAddressAction, BillingAddressActionType } from '../billing';\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\nimport { CouponAction, CouponActionType, GiftCertificateAction, GiftCertificateActionType } from '../coupon';\nimport { OrderAction, OrderActionType } from '../order';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping';\nimport { StoreCreditAction, StoreCreditActionType } from '../store-credit/store-credit-actions';\n\nimport { CheckoutAction, CheckoutActionType } from './checkout-actions';\nimport CheckoutState, { CheckoutDataState, CheckoutErrorsState, CheckoutStatusesState, DEFAULT_STATE } from './checkout-state';\n\nexport default function checkoutReducer(\n    state: CheckoutState = DEFAULT_STATE,\n    action: Action\n): CheckoutState {\n    const reducer = combineReducers<CheckoutState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: CheckoutDataState | undefined,\n    action: CheckoutAction | BillingAddressAction | ConsignmentAction | CouponAction |\n        GiftCertificateAction | OrderAction | StoreCreditAction\n): CheckoutDataState | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n    case StoreCreditActionType.ApplyStoreCreditSucceeded:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return objectMerge(data, omit(action.payload, [\n            'billingAddress',\n            'cart',\n            'consignments',\n            'customer',\n            'coupons',\n            'giftCertificates',\n        ])) as CheckoutDataState;\n\n    case OrderActionType.SubmitOrderSucceeded:\n        return objectSet(data, 'orderId', action.payload && action.payload.order.orderId) ;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CheckoutErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction | OrderAction\n): CheckoutErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    case CheckoutActionType.UpdateCheckoutRequested:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n        return objectSet(errors, 'updateError', undefined);\n\n    case CheckoutActionType.UpdateCheckoutFailed:\n        return objectSet(errors, 'updateError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CheckoutStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction | OrderAction\n): CheckoutStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return objectSet(statuses, 'isLoading', false);\n\n    case CheckoutActionType.UpdateCheckoutRequested:\n        return objectSet(statuses, 'isUpdating', true);\n\n    case CheckoutActionType.UpdateCheckoutFailed:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n        return objectSet(statuses, 'isUpdating', false);\n\n    default:\n        return statuses;\n    }\n}\n","import { deepFreeze } from '@bigcommerce/data-store';\n\n// tslint:disable-next-line:ban-types\ntype FunctionProperties<T> = { [K in keyof T]: T[K] extends Function ? T[K] : never };\n\nexport default function createFreezeProxy<T extends object>(target: T): T {\n    return createProxy(target, (target, name) =>\n        (...args: any[]) => deepFreeze(target[name].call(target, ...args))\n    );\n}\n\nexport function createFreezeProxies<T extends object, TMap extends { [key: string]: T }>(map: TMap): TMap {\n    return Object.keys(map)\n        .reduce((result, key) => {\n            result[key] = createFreezeProxy(map[key]);\n\n            return result;\n        }, {} as { [key: string]: T }) as TMap;\n}\n\nfunction createProxy<T extends object>(target: T, trap: (target: FunctionProperties<T>, name: keyof FunctionProperties<T>, proxy: T) => any): T {\n    const proxy = Object.create(target);\n\n    traversePrototypeOf(target, prototype => {\n        Object.getOwnPropertyNames(prototype)\n            .forEach(name => {\n                if (name === 'constructor' || typeof proxy[name] !== 'function' || name.charAt(0) === '_') {\n                    return;\n                }\n\n                proxy[name] = trap(target as FunctionProperties<T>, name as keyof T, proxy);\n            });\n    });\n\n    return proxy;\n}\n\nfunction traversePrototypeOf(target: object, iteratee: (prototype: object) => void): void {\n    let prototype = Object.getPrototypeOf(target);\n\n    while (prototype) {\n        iteratee(prototype);\n\n        prototype = Object.getPrototypeOf(prototype);\n    }\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { find } from 'lodash';\n\nimport { createSelector } from '../common/selector';\nimport { ConfigState } from '../config';\nimport { DEFAULT_STATE } from '../config/config-state';\nimport { Country } from '../geography';\n\nimport FormField from './form-field';\n\nexport default interface FormSelector {\n    getShippingAddressFields(countries: Country[] | undefined, countryCode: string): FormField[];\n    getBillingAddressFields(countries: Country[] | undefined, countryCode: string): FormField[];\n}\n\nexport type FormSelectorFactory = (state: ConfigState) => FormSelector;\n\nexport function createFormSelectorFactory(): FormSelectorFactory {\n    const getShippingAddressFields = createSelector(\n        (state: ConfigState) => state.data,\n        config => (countries: Country[] = [], countryCode: string) => {\n            const selectedCountry = find(countries, { code: countryCode });\n            const fields = config ? config.storeConfig.formFields.shippingAddressFields : [];\n\n            return fields.map((field: any) => processField(field, countries, selectedCountry));\n        }\n    );\n\n    const getBillingAddressFields = createSelector(\n        (state: ConfigState) => state.data,\n        config => (countries: Country[] = [], countryCode: string) => {\n            const selectedCountry = find(countries, { code: countryCode });\n            const fields = config ? config.storeConfig.formFields.billingAddressFields : [];\n\n            return fields.map((field: any) => processField(field, countries, selectedCountry));\n        }\n    );\n\n    function processField(field: FormField, countries: Country[], selectedCountry?: Country): FormField {\n        if (field.name === 'countryCode') {\n            return processCountry(field, countries, selectedCountry);\n        }\n\n        if (field.name === 'stateOrProvince') {\n            return processProvince(field, selectedCountry);\n        }\n\n        if (field.name === 'postalCode') {\n            return processsPostCode(field, selectedCountry);\n        }\n\n        return field;\n    }\n\n    function processCountry(field: FormField, countries: Country[] = [], country?: Country): FormField {\n        if (!countries.length) {\n            return field;\n        }\n\n        const { code = '' } = country || {};\n        const items = countries.map(({ code, name }: any) => ({\n            value: code,\n            label: name,\n        }));\n\n        return {\n            ...field,\n            options: { items },\n            default: code,\n            type: 'array',\n            fieldType: 'dropdown',\n            itemtype: 'string',\n        };\n    }\n\n    function processProvince(field: FormField, country?: Country): FormField {\n        const { subdivisions = [] } = country || {};\n\n        if (!subdivisions.length) {\n            return {\n                ...field,\n                required: false,\n            };\n        }\n\n        const items = subdivisions.map(({ code, name }: any) => ({\n            value: code,\n            label: name,\n        }));\n\n        return {\n            ...field,\n            name: 'stateOrProvinceCode',\n            options: { items },\n            required: true,\n            type: 'array',\n            fieldType: 'dropdown',\n            itemtype: 'string',\n        };\n    }\n\n    function processsPostCode(field: FormField, country?: Country): FormField {\n        const { hasPostalCodes = [] } = country || {};\n\n        if (hasPostalCodes === undefined) {\n            return field;\n        }\n\n        return { ...field, required: Boolean(hasPostalCodes) };\n    }\n\n    return memoizeOne((\n        state: ConfigState = DEFAULT_STATE\n    ): FormSelector => {\n        return {\n            getShippingAddressFields: getShippingAddressFields(state),\n            getBillingAddressFields: getBillingAddressFields(state),\n        };\n    });\n}\n","import { identity, isEqual, pickBy } from 'lodash';\n\nimport Address from './address';\n\nexport default function isAddressEqual(addressA: Partial<Address>, addressB: Partial<Address>): boolean {\n    return isEqual(normalize(addressA), normalize(addressB));\n}\n\nfunction normalize(address: Partial<Address>): Partial<Address> {\n    return pickBy({\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        address1: address.address1,\n        address2: address.address2,\n        city: address.city,\n        stateOrProvince: address.stateOrProvince,\n        countryCode: address.countryCode,\n        postalCode: address.postalCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    }, identity);\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { find } from 'lodash';\n\nimport { isAddressEqual, AddressRequestBody } from '../address';\nimport { CartSelector, PhysicalItem } from '../cart';\nimport { createSelector } from '../common/selector';\n\nimport Consignment from './consignment';\nimport ConsignmentState, { DEFAULT_STATE } from './consignment-state';\nimport ShippingOption from './shipping-option';\n\nexport default interface ConsignmentSelector {\n    getConsignments(): Consignment[] | undefined;\n    getConsignmentById(id: string): Consignment | undefined;\n    getConsignmentByAddress(address: AddressRequestBody): Consignment | undefined;\n    getShippingOption(): ShippingOption | undefined;\n    getLoadError(): Error | undefined;\n    getCreateError(): Error | undefined;\n    getLoadShippingOptionsError(): Error | undefined;\n    getUnassignedItems(): PhysicalItem[];\n    getUpdateError(consignmentId?: string): Error | undefined;\n    getDeleteError(consignmentId?: string): Error | undefined;\n    getItemAssignmentError(address: AddressRequestBody): Error | undefined;\n    getUpdateShippingOptionError(consignmentId?: string): Error | undefined;\n    isLoading(): boolean;\n    isLoadingShippingOptions(): boolean;\n    isCreating(): boolean;\n    isUpdating(consignmentId?: string): boolean;\n    isDeleting(consignmentId?: string): boolean;\n    isAssigningItems(address: AddressRequestBody): boolean;\n    isUpdatingShippingOption(consignmentId?: string): boolean;\n}\n\nexport type ConsignmentSelectorFactory = (\n    state: ConsignmentState,\n    cart: CartSelector\n) => ConsignmentSelector;\n\ninterface ConsignmentSelectorDependencies {\n    cart: CartSelector;\n}\n\nexport function createConsignmentSelectorFactory(): ConsignmentSelectorFactory {\n    const getConsignments = createSelector(\n        (state: ConsignmentState) => state.data,\n        consignments => () => consignments\n    );\n\n    const getConsignmentById = createSelector(\n        (state: ConsignmentState) => state.data,\n        consignments => (id: string) => {\n            if (!consignments || !consignments.length) {\n                return;\n            }\n\n            return find(consignments, { id });\n        }\n    );\n\n    const getConsignmentByAddress = createSelector(\n        (state: ConsignmentState) => state.data,\n        consignments => (address: AddressRequestBody) => {\n            if (!consignments || !consignments.length) {\n                return;\n            }\n\n            return find(consignments, consignment =>\n                isAddressEqual(consignment.shippingAddress, address)\n            );\n        }\n    );\n\n    const getShippingOption = createSelector(\n        (state: ConsignmentState) => state.data,\n        consignments => () => {\n            if (consignments && consignments.length) {\n                return consignments[0].selectedShippingOption;\n            }\n        }\n    );\n\n    const getLoadError = createSelector(\n        (state: ConsignmentState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const getCreateError = createSelector(\n        (state: ConsignmentState) => state.errors.createError,\n        error => () => error\n    );\n\n    const getLoadShippingOptionsError = createSelector(\n        (state: ConsignmentState) => state.errors.loadShippingOptionsError,\n        error => () => error\n    );\n\n    const getUnassignedItems = createSelector(\n        getConsignments,\n        (_: ConsignmentState, { cart }: ConsignmentSelectorDependencies) => cart.getCart,\n        (getConsignments, getCart) => () => {\n            const cart = getCart();\n\n            if (!cart) {\n                return [];\n            }\n\n            const assignedLineItemIds = (getConsignments() || []).reduce(\n                (itemIds, consignment) => itemIds.concat(consignment.lineItemIds),\n                [] as string[]\n            );\n\n            return (cart.lineItems.physicalItems || []).filter(\n                item => assignedLineItemIds.indexOf(item.id as string) < 0\n            );\n        }\n    );\n\n    const getUpdateError = createSelector(\n        (state: ConsignmentState) => state.errors.updateError,\n        updateError => (consignmentId?: string) => {\n            if (consignmentId) {\n                return updateError[consignmentId];\n            }\n\n            return find(updateError);\n        }\n    );\n\n    const getDeleteError = createSelector(\n        (state: ConsignmentState) => state.errors.deleteError,\n        deleteError => (consignmentId?: string) => {\n            if (consignmentId) {\n                return deleteError[consignmentId];\n            }\n\n            return find(deleteError);\n        }\n    );\n\n    const getItemAssignmentError = createSelector(\n        getConsignmentByAddress,\n        getUpdateError,\n        getCreateError,\n        (getConsignmentByAddress, getUpdateError, getCreateError) => (address: AddressRequestBody) => {\n            const consignment = getConsignmentByAddress(address);\n\n            return consignment ? getUpdateError(consignment.id) : getCreateError();\n        }\n    );\n\n    const getUpdateShippingOptionError = createSelector(\n        (state: ConsignmentState) => state.errors.updateShippingOptionError,\n        updateShippingOptionError => (consignmentId?: string) => {\n            if (consignmentId) {\n                return updateShippingOptionError[consignmentId];\n            }\n\n            return find(updateShippingOptionError);\n        }\n    );\n\n    const isLoading = createSelector(\n        (state: ConsignmentState) => state.statuses.isLoading,\n        isLoading => () => isLoading === true\n    );\n\n    const isLoadingShippingOptions = createSelector(\n        (state: ConsignmentState) => state.statuses.isLoadingShippingOptions,\n        isLoadingShippingOptions => () => isLoadingShippingOptions === true\n    );\n\n    const isCreating = createSelector(\n        (state: ConsignmentState) => state.statuses.isCreating,\n        isCreating => () => isCreating === true\n    );\n\n    const isUpdating = createSelector(\n        (state: ConsignmentState) => state.statuses.isUpdating,\n        isUpdating => (consignmentId?: string) => {\n            if (consignmentId) {\n                return isUpdating[consignmentId] === true;\n            }\n\n            return find(isUpdating) === true;\n        }\n    );\n\n    const isDeleting = createSelector(\n        (state: ConsignmentState) => state.statuses.isDeleting,\n        isDeleting => (consignmentId?: string) => {\n            if (consignmentId) {\n                return isDeleting[consignmentId] === true;\n            }\n\n            return find(isDeleting) === true;\n        }\n    );\n\n    const isAssigningItems = createSelector(\n        getConsignmentByAddress,\n        isUpdating,\n        isCreating,\n        (getConsignmentByAddress, isUpdating, isCreating) => (address: AddressRequestBody) => {\n            const consignment = getConsignmentByAddress(address);\n\n            return consignment ? isUpdating(consignment.id) : isCreating();\n        }\n    );\n\n    const isUpdatingShippingOption = createSelector(\n        (state: ConsignmentState) => state.statuses.isUpdatingShippingOption,\n        isUpdatingShippingOption => (consignmentId?: string) => {\n            if (consignmentId) {\n                return isUpdatingShippingOption[consignmentId] === true;\n            }\n\n            return find(isUpdatingShippingOption) === true;\n        }\n    );\n\n    return memoizeOne((\n        state: ConsignmentState = DEFAULT_STATE,\n        cart: CartSelector\n    ): ConsignmentSelector => {\n        return {\n            getConsignments: getConsignments(state),\n            getConsignmentById: getConsignmentById(state),\n            getConsignmentByAddress: getConsignmentByAddress(state),\n            getShippingOption: getShippingOption(state),\n            getLoadError: getLoadError(state),\n            getCreateError: getCreateError(state),\n            getLoadShippingOptionsError: getLoadShippingOptionsError(state),\n            getUnassignedItems: getUnassignedItems(state, { cart }),\n            getUpdateError: getUpdateError(state),\n            getDeleteError: getDeleteError(state),\n            getItemAssignmentError: getItemAssignmentError(state),\n            getUpdateShippingOptionError: getUpdateShippingOptionError(state),\n            isLoading: isLoading(state),\n            isLoadingShippingOptions: isLoadingShippingOptions(state),\n            isCreating: isCreating(state),\n            isUpdating: isUpdating(state),\n            isDeleting: isDeleting(state),\n            isAssigningItems: isAssigningItems(state),\n            isUpdatingShippingOption: isUpdatingShippingOption(state),\n        };\n    });\n}\n","import { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nexport default interface StoreCreditState {\n    errors: StoreCreditErrorsState;\n    statuses: StoreCreditStatusesState;\n}\n\nexport interface StoreCreditErrorsState {\n    applyError?: RequestError<StorefrontErrorResponseBody>;\n}\n\nexport interface StoreCreditStatusesState {\n    isApplying?: boolean;\n}\n\nexport const DEFAULT_STATE: StoreCreditState = {\n    errors: {},\n    statuses: {},\n};\n","import { createBillingAddressSelectorFactory } from '../billing';\nimport { createCartSelectorFactory } from '../cart/cart-selector';\nimport { createCheckoutButtonSelectorFactory } from '../checkout-buttons';\nimport { createFreezeProxies } from '../common/utility';\nimport { createConfigSelectorFactory } from '../config';\nimport { createCouponSelectorFactory, createGiftCertificateSelectorFactory } from '../coupon';\nimport { createCustomerSelectorFactory, createCustomerStrategySelectorFactory } from '../customer';\nimport { createFormSelectorFactory } from '../form';\nimport { createCountrySelectorFactory } from '../geography';\nimport { createOrderSelectorFactory } from '../order';\nimport { createPaymentMethodSelectorFactory, createPaymentSelectorFactory, createPaymentStrategySelectorFactory } from '../payment';\nimport { createInstrumentSelectorFactory } from '../payment/instrument';\nimport { createRemoteCheckoutSelectorFactory } from '../remote-checkout';\nimport { createConsignmentSelectorFactory, createShippingAddressSelectorFactory, createShippingCountrySelectorFactory, createShippingStrategySelectorFactory } from '../shipping';\nimport { createStoreCreditSelectorFactory } from '../store-credit/store-credit-selector';\n\nimport { createCheckoutSelectorFactory } from './checkout-selector';\nimport { CheckoutStoreOptions } from './checkout-store';\nimport CheckoutStoreState from './checkout-store-state';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\nexport type InternalCheckoutSelectorsFactory = (\n    state: CheckoutStoreState,\n    options?: CheckoutStoreOptions\n) => InternalCheckoutSelectors;\n\nexport function createInternalCheckoutSelectorsFactory(): InternalCheckoutSelectorsFactory {\n    const createBillingAddressSelector = createBillingAddressSelectorFactory();\n    const createCartSelector = createCartSelectorFactory();\n    const createCheckoutButtonSelector = createCheckoutButtonSelectorFactory();\n    const createConfigSelector = createConfigSelectorFactory();\n    const createCountrySelector = createCountrySelectorFactory();\n    const createCouponSelector = createCouponSelectorFactory();\n    const createCustomerSelector = createCustomerSelectorFactory();\n    const createCustomerStrategySelector = createCustomerStrategySelectorFactory();\n    const createGiftCertificateSelector = createGiftCertificateSelectorFactory();\n    const createInstrumentSelector = createInstrumentSelectorFactory();\n    const createFormSelector = createFormSelectorFactory();\n    const createPaymentMethodSelector = createPaymentMethodSelectorFactory();\n    const createPaymentStrategySelector = createPaymentStrategySelectorFactory();\n    const createRemoteCheckoutSelector = createRemoteCheckoutSelectorFactory();\n    const createShippingAddressSelector = createShippingAddressSelectorFactory();\n    const createShippingCountrySelector = createShippingCountrySelectorFactory();\n    const createShippingStrategySelector = createShippingStrategySelectorFactory();\n    const createConsignmentSelector = createConsignmentSelectorFactory();\n    const createCheckoutSelector = createCheckoutSelectorFactory();\n    const createOrderSelector = createOrderSelectorFactory();\n    const createPaymentSelector = createPaymentSelectorFactory();\n    const createStoreCreditSelector = createStoreCreditSelectorFactory();\n\n    return (state, options = {}) => {\n        const billingAddress = createBillingAddressSelector(state.billingAddress);\n        const cart = createCartSelector(state.cart);\n        const checkoutButton = createCheckoutButtonSelector(state.checkoutButton);\n        const config = createConfigSelector(state.config);\n        const countries = createCountrySelector(state.countries);\n        const coupons = createCouponSelector(state.coupons);\n        const customer = createCustomerSelector(state.customer);\n        const customerStrategies = createCustomerStrategySelector(state.customerStrategies);\n        const form = createFormSelector(state.config);\n        const giftCertificates = createGiftCertificateSelector(state.giftCertificates);\n        const instruments = createInstrumentSelector(state.instruments);\n        const paymentMethods = createPaymentMethodSelector(state.paymentMethods);\n        const paymentStrategies = createPaymentStrategySelector(state.paymentStrategies);\n        const remoteCheckout = createRemoteCheckoutSelector(state.remoteCheckout);\n        const shippingAddress = createShippingAddressSelector(state.consignments);\n        const shippingCountries = createShippingCountrySelector(state.shippingCountries);\n        const shippingStrategies = createShippingStrategySelector(state.shippingStrategies);\n        const storeCredit = createStoreCreditSelector(state.storeCredit);\n\n        // Compose selectors\n        const consignments = createConsignmentSelector(state.consignments, cart);\n        const checkout = createCheckoutSelector(state.checkout, billingAddress, cart, consignments, coupons, customer, giftCertificates);\n        const order = createOrderSelector(state.order, billingAddress, coupons);\n        const payment = createPaymentSelector(checkout, order);\n\n        const selectors = {\n            billingAddress,\n            cart,\n            checkout,\n            checkoutButton,\n            config,\n            consignments,\n            countries,\n            coupons,\n            customer,\n            customerStrategies,\n            form,\n            giftCertificates,\n            instruments,\n            order,\n            payment,\n            paymentMethods,\n            paymentStrategies,\n            remoteCheckout,\n            shippingAddress,\n            shippingCountries,\n            shippingStrategies,\n            storeCredit,\n        };\n\n        return options.shouldWarnMutation ? createFreezeProxies(selectors) : selectors;\n    };\n}\n\nexport default function createInternalCheckoutSelectors(\n    state: CheckoutStoreState,\n    options?: CheckoutStoreOptions\n): InternalCheckoutSelectors {\n    return createInternalCheckoutSelectorsFactory()(state, options);\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport BillingAddress from './billing-address';\nimport BillingAddressState, { DEFAULT_STATE } from './billing-address-state';\n\nexport default interface BillingAddressSelector {\n    getBillingAddress(): BillingAddress | undefined;\n    getUpdateError(): Error | undefined;\n    getContinueAsGuestError(): Error | undefined;\n    getLoadError(): Error | undefined;\n    isUpdating(): boolean;\n    isContinuingAsGuest(): boolean;\n    isLoading(): boolean;\n}\n\nexport type BillingAddressSelectorFactory = (state: BillingAddressState) => BillingAddressSelector;\n\nexport function createBillingAddressSelectorFactory(): BillingAddressSelectorFactory {\n    const getBillingAddress = createSelector(\n        (state: BillingAddressState) => state.data,\n        data => () => data\n    );\n\n    const getUpdateError = createSelector(\n        (state: BillingAddressState) => state.errors.updateError,\n        error => () => error\n    );\n\n    const getContinueAsGuestError = createSelector(\n        (state: BillingAddressState) => state.errors.continueAsGuestError,\n        error => () => error\n    );\n\n    const getLoadError = createSelector(\n        (state: BillingAddressState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const isUpdating = createSelector(\n        (state: BillingAddressState) => !!state.statuses.isUpdating,\n        status => () => status\n    );\n\n    const isContinuingAsGuest = createSelector(\n        (state: BillingAddressState) => !!state.statuses.isContinuingAsGuest,\n        status => () => status\n    );\n\n    const isLoading = createSelector(\n        (state: BillingAddressState) => !!state.statuses.isLoading,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: BillingAddressState = DEFAULT_STATE\n    ): BillingAddressSelector => {\n        return {\n            getBillingAddress: getBillingAddress(state),\n            getUpdateError: getUpdateError(state),\n            getContinueAsGuestError: getContinueAsGuestError(state),\n            getLoadError: getLoadError(state),\n            isUpdating: isUpdating(state),\n            isContinuingAsGuest: isContinuingAsGuest(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoize, memoizeOne } from '@bigcommerce/memoize';\nimport { find, some, values } from 'lodash';\n\nimport { createSelector } from '../common/selector';\n\nimport CheckoutButtonState, { DEFAULT_STATE } from './checkout-button-state';\nimport { CheckoutButtonMethodType } from './strategies';\n\nexport default interface CheckoutButtonSelector {\n    getState(): CheckoutButtonState;\n    isInitializing(methodId?: CheckoutButtonMethodType): boolean;\n    isInitialized(methodId: CheckoutButtonMethodType, containerId?: string): boolean;\n    isDeinitializing(methodId?: CheckoutButtonMethodType): boolean;\n    getInitializeError(methodId?: CheckoutButtonMethodType): Error | undefined;\n    getDeinitializeError(methodId?: CheckoutButtonMethodType): Error | undefined;\n}\n\nexport type CheckoutButtonSelectorFactory = (state: CheckoutButtonState) => CheckoutButtonSelector;\n\nexport function createCheckoutButtonSelectorFactory(): CheckoutButtonSelectorFactory {\n    const getState = createSelector(\n        (state: CheckoutButtonState) => state,\n        state => () => state\n    );\n\n    const isInitializing = createSelector(\n        (state: CheckoutButtonState) => state.statuses,\n        statuses => memoize((methodId?: CheckoutButtonMethodType) => {\n            if (methodId) {\n                const method = statuses[methodId];\n\n                return (method && method.isInitializing) === true;\n            }\n\n            return some(statuses, { isInitializing: true });\n        })\n    );\n\n    const isInitialized = createSelector(\n        (state: CheckoutButtonState) => state.data,\n        data => memoize((methodId: CheckoutButtonMethodType, containerId?: string) => {\n            const method = data[methodId];\n\n            if (!method) {\n                return false;\n            }\n\n            if (!containerId) {\n                return some(method.initializedContainers, isInitialized => isInitialized === true);\n            }\n\n            return method.initializedContainers[containerId] === true;\n        })\n    );\n\n    const isDeinitializing = createSelector(\n        (state: CheckoutButtonState) => state.statuses,\n        statuses => memoize((methodId?: CheckoutButtonMethodType) => {\n            if (methodId) {\n                const method = statuses[methodId];\n\n                return (method && method.isDeinitializing) === true;\n            }\n\n            return some(statuses, { isDeinitializing: true });\n        })\n    );\n\n    const getInitializeError = createSelector(\n        (state: CheckoutButtonState) => state.errors,\n        errors => memoize((methodId?: CheckoutButtonMethodType) => {\n            const method = methodId ?\n                errors[methodId] :\n                find(values(errors), method => !!(method && method.initializeError));\n\n            return method && method.initializeError;\n        })\n    );\n\n    const getDeinitializeError = createSelector(\n        (state: CheckoutButtonState) => state.errors,\n        errors => memoize((methodId?: CheckoutButtonMethodType) => {\n            const method = methodId ?\n                errors[methodId] :\n                find(values(errors), method => !!(method && method.deinitializeError));\n\n            return method && method.deinitializeError;\n        })\n    );\n\n    return memoizeOne((\n        state: CheckoutButtonState = DEFAULT_STATE\n    ): CheckoutButtonSelector => {\n        return {\n            getState: getState(state),\n            isInitializing: isInitializing(state),\n            isInitialized: isInitialized(state),\n            isDeinitializing: isDeinitializing(state),\n            getInitializeError: getInitializeError(state),\n            getDeinitializeError: getDeinitializeError(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { RequestError } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\n\nimport Coupon from './coupon';\nimport CouponState, { DEFAULT_STATE } from './coupon-state';\n\nexport default interface CouponSelector {\n    getCoupons(): Coupon[] | undefined;\n    getRemoveError(): RequestError | undefined;\n    getApplyError(): RequestError | undefined;\n    isApplying(): boolean;\n    isRemoving(): boolean;\n}\n\nexport type CouponSelectorFactory = (state: CouponState) => CouponSelector;\n\nexport function createCouponSelectorFactory(): CouponSelectorFactory {\n    const getCoupons = createSelector(\n        (state: CouponState) => state.data,\n        data => () => data\n    );\n\n    const getRemoveError = createSelector(\n        (state: CouponState) => state.errors.removeCouponError,\n        error => () => error\n    );\n\n    const getApplyError = createSelector(\n        (state: CouponState) => state.errors.applyCouponError,\n        error => () => error\n    );\n\n    const isApplying = createSelector(\n        (state: CouponState) => !!state.statuses.isApplyingCoupon,\n        status => () => status\n    );\n\n    const isRemoving = createSelector(\n        (state: CouponState) => !!state.statuses.isRemovingCoupon,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: CouponState = DEFAULT_STATE\n    ): CouponSelector => {\n        return {\n            getCoupons: getCoupons(state),\n            getRemoveError: getRemoveError(state),\n            getApplyError: getApplyError(state),\n            isApplying: isApplying(state),\n            isRemoving: isRemoving(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport Customer from './customer';\nimport CustomerState, { DEFAULT_STATE } from './customer-state';\n\nexport default interface CustomerSelector {\n    getCustomer(): Customer | undefined;\n}\n\nexport type CustomerSelectorFactory = (state: CustomerState) => CustomerSelector;\n\nexport function createCustomerSelectorFactory(): CustomerSelectorFactory {\n    const getCustomer = createSelector(\n        (state: CustomerState) => state.data,\n        customer => () => customer\n    );\n\n    return memoizeOne((\n        state: CustomerState = DEFAULT_STATE\n    ): CustomerSelector => {\n        return {\n            getCustomer: getCustomer(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport RemoteCheckoutState, { DEFAULT_STATE, RemoteCheckoutStateData } from './remote-checkout-state';\n\nexport default interface RemoteCheckoutSelector {\n    getCheckout<TMethodId extends keyof RemoteCheckoutStateData>(\n        methodId: TMethodId\n    ): RemoteCheckoutStateData[TMethodId] | undefined;\n}\n\nexport type RemoteCheckoutSelectorFactory = (state: RemoteCheckoutState) => RemoteCheckoutSelector;\n\nexport function createRemoteCheckoutSelectorFactory(): RemoteCheckoutSelectorFactory {\n    const getCheckout = createSelector(\n        (state: RemoteCheckoutState) => state.data,\n        data => <TMethodId extends keyof RemoteCheckoutStateData>(methodId: TMethodId) => {\n            return data[methodId];\n        }\n    );\n\n    return memoizeOne((\n        state: RemoteCheckoutState = DEFAULT_STATE\n    ): RemoteCheckoutSelector => {\n        return {\n            getCheckout: getCheckout(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { Address } from '../address';\nimport { createSelector } from '../common/selector';\n\nimport ConsignmentState, { DEFAULT_STATE } from './consignment-state';\n\nexport default interface ShippingAddressSelector {\n    getShippingAddress(): Address | undefined;\n}\n\nexport type ShippingAddressSelectorFactory = (state: ConsignmentState) => ShippingAddressSelector;\n\nexport function createShippingAddressSelectorFactory(): ShippingAddressSelectorFactory {\n    const getShippingAddress = createSelector(\n        (state: ConsignmentState) => state.data,\n        consignments => () => {\n            if (!consignments || !consignments[0]) {\n                return;\n            }\n\n            return consignments[0].shippingAddress;\n        }\n    );\n\n    return memoizeOne((\n        state: ConsignmentState = DEFAULT_STATE\n    ): ShippingAddressSelector => {\n        return {\n            getShippingAddress: getShippingAddress(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { find } from 'lodash';\n\nimport { CheckoutSelector } from '../checkout';\nimport { createSelector } from '../common/selector';\nimport { GatewayOrderPayment, OrderSelector } from '../order';\n\nimport PaymentMethod from './payment-method';\nimport { HOSTED } from './payment-method-types';\nimport { ACKNOWLEDGE, FINALIZE } from './payment-status-types';\n\nexport default interface PaymentSelector {\n    getPaymentId(): { providerId: string; gatewayId?: string } | undefined;\n    getPaymentStatus(): string | undefined;\n    getPaymentToken(): string | undefined;\n    getPaymentRedirectUrl(): string | undefined;\n    isPaymentDataRequired(useStoreCredit?: boolean): boolean;\n    isPaymentDataSubmitted(paymentMethod?: PaymentMethod): boolean;\n}\n\nexport type PaymentSelectorFactory = (\n    checkout: CheckoutSelector,\n    order: OrderSelector\n) => PaymentSelector;\n\ninterface PaymentSelectorDependencies {\n    checkout: CheckoutSelector;\n    order: OrderSelector;\n}\n\nexport function createPaymentSelectorFactory(): PaymentSelectorFactory {\n    const getInternalPayment = createSelector(\n        ({ order }: PaymentSelectorDependencies) => order.getOrderMeta,\n        getOrderMeta => () => {\n            const meta = getOrderMeta();\n\n            return meta && meta.payment;\n        }\n    );\n\n    const getGatewayPayment = createSelector(\n        ({ order }: PaymentSelectorDependencies) => order.getOrder,\n        getOrder => () => {\n            const order = getOrder();\n\n            return find(order && order.payments, ({ providerId }) =>\n                providerId !== 'giftcertificate' && providerId !== 'storecredit'\n            ) as GatewayOrderPayment;\n        }\n    );\n\n    const getHostedPayment = createSelector(\n        ({ checkout }: PaymentSelectorDependencies) => checkout.getCheckout,\n        getCheckout => () => {\n            const checkout = getCheckout();\n\n            return find(checkout && checkout.payments, ({ providerType }) =>\n                providerType === HOSTED\n            );\n        }\n    );\n\n    const getPaymentId = createSelector(\n        getInternalPayment,\n        getHostedPayment,\n        getGatewayPayment,\n        (getInternalPayment, getHostedPayment, getGatewayPayment) => () => {\n            const internalPayment = getInternalPayment();\n\n            if (internalPayment && internalPayment.id) {\n                return {\n                    providerId: internalPayment.id,\n                    gatewayId: internalPayment.gateway,\n                };\n            }\n\n            const payment = getHostedPayment() || getGatewayPayment();\n\n            if (payment && payment.providerId) {\n                return {\n                    providerId: payment.providerId,\n                    gatewayId: payment.gatewayId,\n                };\n            }\n        }\n    );\n\n    const getPaymentStatus = createSelector(\n        getInternalPayment,\n        getHostedPayment,\n        getGatewayPayment,\n        (getInternalPayment, getHostedPayment, getGatewayPayment) => () => {\n            const internalPayment = getInternalPayment();\n\n            if (internalPayment && internalPayment.status) {\n                return internalPayment.status.replace('PAYMENT_STATUS_', '');\n            }\n\n            const payment = getHostedPayment() || getGatewayPayment();\n\n            if (payment) {\n                return payment.detail.step;\n            }\n        }\n    );\n\n    const getPaymentToken = createSelector(\n        ({ order }: PaymentSelectorDependencies) => order.getOrderMeta,\n        getOrderMeta => () => {\n            const meta = getOrderMeta();\n\n            return meta && meta.token;\n        }\n    );\n\n    const getPaymentRedirectUrl = createSelector(\n        getInternalPayment,\n        getInternalPayment => () => {\n            const payment = getInternalPayment();\n\n            return payment && payment.redirectUrl;\n        }\n    );\n\n    const isPaymentDataRequired = createSelector(\n        ({ checkout }: PaymentSelectorDependencies) => checkout.getOutstandingBalance,\n        getOutstandingBalance => (useStoreCredit: boolean = false) => {\n            const grandTotal = getOutstandingBalance(useStoreCredit);\n\n            return grandTotal ? grandTotal > 0 : false;\n        }\n    );\n\n    const isPaymentDataSubmitted = createSelector(\n        getPaymentStatus,\n        getPaymentStatus => (paymentMethod?: PaymentMethod) => {\n            if (paymentMethod && paymentMethod.nonce) {\n                return true;\n            }\n\n            return getPaymentStatus() === ACKNOWLEDGE || getPaymentStatus() === FINALIZE;\n        }\n    );\n\n    return memoizeOne((\n        checkout: CheckoutSelector,\n        order: OrderSelector\n    ): PaymentSelector => {\n        return {\n            getPaymentId: getPaymentId({ checkout, order }),\n            getPaymentStatus: getPaymentStatus({ checkout, order }),\n            getPaymentToken: getPaymentToken({ checkout, order }),\n            getPaymentRedirectUrl: getPaymentRedirectUrl({ checkout, order }),\n            isPaymentDataRequired: isPaymentDataRequired({ checkout, order }),\n            isPaymentDataSubmitted: isPaymentDataSubmitted({ checkout, order }),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport Cart from './cart';\nimport CartState, { DEFAULT_STATE } from './cart-state';\n\nexport default interface CartSelector {\n    getCart(): Cart | undefined;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type CartSelectorFactory = (state: CartState) => CartSelector;\n\nexport function createCartSelectorFactory() {\n    const getCart = createSelector(\n        (state: CartState) => state.data,\n        cart => () => cart\n    );\n\n    const getLoadError = createSelector(\n        (state: CartState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const isLoading = createSelector(\n        (state: CartState) => !!state.statuses.isLoading,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: CartState = DEFAULT_STATE\n    ): CartSelector => {\n        return {\n            getCart: getCart(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport Config, { ContextConfig, StoreConfig } from './config';\nimport ConfigState, { DEFAULT_STATE } from './config-state';\n\nexport default interface ConfigSelector {\n    getConfig(): Config | undefined;\n    getStoreConfig(): StoreConfig | undefined;\n    getContextConfig(): ContextConfig | undefined;\n    getExternalSource(): string | undefined;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type ConfigSelectorFactory = (state: ConfigState) => ConfigSelector;\n\nexport function createConfigSelectorFactory(): ConfigSelectorFactory {\n\n    const getConfig = createSelector(\n        (state: ConfigState) => state.data,\n        data => () => data\n    );\n\n    const getStoreConfig = createSelector(\n        (state: ConfigState) => state.data && state.data.storeConfig,\n        data => () => data\n    );\n\n    const getContextConfig = createSelector(\n        (state: ConfigState) => state.data && state.data.context,\n        data => () => data\n    );\n\n    const getExternalSource = createSelector(\n        (state: ConfigState) => state.meta && state.meta.externalSource,\n        data => () => data\n    );\n\n    const getLoadError = createSelector(\n        (state: ConfigState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const isLoading = createSelector(\n        (state: ConfigState) => !!state.statuses.isLoading,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: ConfigState = DEFAULT_STATE\n    ): ConfigSelector => {\n        return {\n            getConfig: getConfig(state),\n            getStoreConfig: getStoreConfig(state),\n            getContextConfig: getContextConfig(state),\n            getExternalSource: getExternalSource(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport Country from './country';\nimport CountryState, { DEFAULT_STATE } from './country-state';\n\nexport default interface CountrySelector {\n    getCountries(): Country[] | undefined;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type CountrySelectorFactory = (state: CountryState) => CountrySelector;\n\nexport function createCountrySelectorFactory(): CountrySelectorFactory {\n    const getCountries = createSelector(\n        (state: CountryState) => state.data,\n        countries => () => countries\n    );\n\n    const getLoadError = createSelector(\n        (state: CountryState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const isLoading = createSelector(\n        (state: CountryState) => !!state.statuses.isLoading,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: CountryState = DEFAULT_STATE\n    ): CountrySelector => {\n        return {\n            getCountries: getCountries(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport CustomerStrategyState, { DEFAULT_STATE } from './customer-strategy-state';\n\nexport default interface CustomerStrategySelector {\n    getSignInError(methodId?: string): Error | undefined;\n    getSignOutError(methodId?: string): Error | undefined;\n    getInitializeError(methodId?: string): Error | undefined;\n    getWidgetInteractionError(methodId?: string): Error | undefined;\n    isSigningIn(methodId?: string): boolean;\n    isSigningOut(methodId?: string): boolean;\n    isInitializing(methodId?: string): boolean;\n    isInitialized(methodId: string): boolean;\n    isWidgetInteracting(methodId?: string): boolean;\n}\n\nexport type CustomerStrategySelectorFactory = (state: CustomerStrategyState) => CustomerStrategySelector;\n\nexport function createCustomerStrategySelectorFactory(): CustomerStrategySelectorFactory {\n    const getSignInError = createSelector(\n        (state: CustomerStrategyState) => state.errors.signInMethodId,\n        (state: CustomerStrategyState) => state.errors.signInError,\n        (signInMethodId, signInError) => (methodId?: string) => {\n            if (methodId && signInMethodId !== methodId) {\n                return;\n            }\n\n            return signInError;\n        }\n    );\n\n    const getSignOutError = createSelector(\n        (state: CustomerStrategyState) => state.errors.signOutMethodId,\n        (state: CustomerStrategyState) => state.errors.signOutError,\n        (signOutMethodId, signOutError) => (methodId?: string) => {\n            if (methodId && signOutMethodId !== methodId) {\n                return;\n            }\n\n            return signOutError;\n        }\n    );\n\n    const getInitializeError = createSelector(\n        (state: CustomerStrategyState) => state.errors.initializeMethodId,\n        (state: CustomerStrategyState) => state.errors.initializeError,\n        (initializeMethodId, initializeError) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return;\n            }\n\n            return initializeError;\n        }\n    );\n\n    const getWidgetInteractionError = createSelector(\n        (state: CustomerStrategyState) => state.errors.widgetInteractionMethodId,\n        (state: CustomerStrategyState) => state.errors.widgetInteractionError,\n        (widgetInteractionMethodId, widgetInteractionError) => (methodId?: string) => {\n            if (methodId && widgetInteractionMethodId !== methodId) {\n                return;\n            }\n\n            return widgetInteractionError;\n        }\n    );\n\n    const isSigningIn = createSelector(\n        (state: CustomerStrategyState) => state.statuses.signInMethodId,\n        (state: CustomerStrategyState) => state.statuses.isSigningIn,\n        (signInMethodId, isSigningIn) => (methodId?: string) => {\n            if (methodId && signInMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isSigningIn;\n        }\n    );\n\n    const isSigningOut = createSelector(\n        (state: CustomerStrategyState) => state.statuses.signOutMethodId,\n        (state: CustomerStrategyState) => state.statuses.isSigningOut,\n        (signOutMethodId, isSigningOut) => (methodId?: string) => {\n            if (methodId && signOutMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isSigningOut;\n        }\n    );\n\n    const isInitializing = createSelector(\n        (state: CustomerStrategyState) => state.statuses.initializeMethodId,\n        (state: CustomerStrategyState) => state.statuses.isInitializing,\n        (initializeMethodId, isInitializing) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isInitializing;\n        }\n    );\n\n    const isInitialized = createSelector(\n        (state: CustomerStrategyState) => state.data,\n        data => (methodId: string) => {\n            return !!(\n                data[methodId] &&\n                data[methodId].isInitialized\n            );\n        }\n    );\n\n    const isWidgetInteracting = createSelector(\n        (state: CustomerStrategyState) => state.statuses.widgetInteractionMethodId,\n        (state: CustomerStrategyState) => state.statuses.isWidgetInteracting,\n        (widgetInteractionMethodId, isWidgetInteracting) => (methodId?: string) => {\n            if (methodId && widgetInteractionMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isWidgetInteracting;\n        }\n    );\n\n    return memoizeOne((\n        state: CustomerStrategyState = DEFAULT_STATE\n    ): CustomerStrategySelector => {\n        return {\n            getSignInError: getSignInError(state),\n            getSignOutError: getSignOutError(state),\n            getInitializeError: getInitializeError(state),\n            getWidgetInteractionError: getWidgetInteractionError(state),\n            isSigningIn: isSigningIn(state),\n            isSigningOut: isSigningOut(state),\n            isInitializing: isInitializing(state),\n            isInitialized: isInitialized(state),\n            isWidgetInteracting: isWidgetInteracting(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\n\nimport GiftCertificate from './gift-certificate';\nimport GiftCertificateState, { DEFAULT_STATE } from './gift-certificate-state';\n\nexport default interface GiftCertificateSelector {\n    getGiftCertificates(): GiftCertificate[] | undefined;\n    getRemoveError(): RequestError<StorefrontErrorResponseBody> | undefined;\n    getApplyError(): RequestError<StorefrontErrorResponseBody> | undefined;\n    isApplying(): boolean;\n    isRemoving(): boolean;\n}\n\nexport type GiftCertificateSelectorFactory = (state: GiftCertificateState) => GiftCertificateSelector;\n\nexport function createGiftCertificateSelectorFactory(): GiftCertificateSelectorFactory {\n    const getGiftCertificates = createSelector(\n        (state: GiftCertificateState) => state.data,\n        data => () => data\n    );\n\n    const getRemoveError = createSelector(\n        (state: GiftCertificateState) => state.errors.removeGiftCertificateError,\n        error => () => error\n    );\n\n    const getApplyError = createSelector(\n        (state: GiftCertificateState) => state.errors.applyGiftCertificateError,\n        error => () => error\n    );\n\n    const isApplying = createSelector(\n        (state: GiftCertificateState) => !!state.statuses.isApplyingGiftCertificate,\n        status => () => status\n    );\n\n    const isRemoving = createSelector(\n        (state: GiftCertificateState) => !!state.statuses.isRemovingGiftCertificate,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: GiftCertificateState = DEFAULT_STATE\n    ): GiftCertificateSelector => {\n        return {\n            getGiftCertificates: getGiftCertificates(state),\n            getRemoveError: getRemoveError(state),\n            getApplyError: getApplyError(state),\n            isApplying: isApplying(state),\n            isRemoving: isRemoving(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../../common/selector';\n\nimport Instrument from './instrument';\nimport InstrumentState, { DEFAULT_STATE, InstrumentMeta } from './instrument-state';\n\nexport default interface InstrumentSelector {\n    getInstruments(): Instrument[] | undefined;\n    getInstrumentsMeta(): InstrumentMeta | undefined;\n    getLoadError(): Error | undefined;\n    getDeleteError(instrumentId?: string): Error | undefined;\n    isLoading(): boolean ;\n    isDeleting(instrumentId?: string): boolean;\n}\n\nexport type InstrumentSelectorFactory = (state: InstrumentState) => InstrumentSelector;\n\nexport function createInstrumentSelectorFactory(): InstrumentSelectorFactory {\n    const getInstruments = createSelector(\n        (state: InstrumentState) => state.data,\n        instruments => () => instruments\n    );\n\n    const getInstrumentsMeta = createSelector(\n        (state: InstrumentState) => state.meta,\n        meta => () => meta\n    );\n\n    const getLoadError = createSelector(\n        (state: InstrumentState) => state.errors.loadError,\n        loadError => () => loadError\n    );\n\n    const getDeleteError = createSelector(\n        (state: InstrumentState) => state.errors.failedInstrument,\n        (state: InstrumentState) => state.errors.deleteError,\n        (failedInstrument, deleteError) => (instrumentId?: string) => {\n            if (instrumentId && failedInstrument !== instrumentId) {\n                return;\n            }\n\n            return deleteError;\n        }\n    );\n\n    const isLoading = createSelector(\n        (state: InstrumentState) => state.statuses.isLoading,\n        isLoading => () => !!isLoading\n    );\n\n    const isDeleting = createSelector(\n        (state: InstrumentState) => state.statuses.deletingInstrument,\n        (state: InstrumentState) => state.statuses.isDeleting,\n        (deletingInstrument, isDeleting) => (instrumentId?: string) => {\n            if (instrumentId && deletingInstrument !== instrumentId) {\n                return false;\n            }\n\n            return !!isDeleting;\n        }\n    );\n\n    return memoizeOne((\n        state: InstrumentState = DEFAULT_STATE\n    ): InstrumentSelector => {\n        return {\n            getInstruments: getInstruments(state),\n            getInstrumentsMeta: getInstrumentsMeta(state),\n            getLoadError: getLoadError(state),\n            getDeleteError: getDeleteError(state),\n            isLoading: isLoading(state),\n            isDeleting: isDeleting(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { find } from 'lodash';\n\nimport { createSelector } from '../common/selector';\n\nimport PaymentMethod from './payment-method';\nimport PaymentMethodMeta from './payment-method-meta';\nimport PaymentMethodState, { DEFAULT_STATE } from './payment-method-state';\n\nexport default interface PaymentMethodSelector {\n    getPaymentMethods(): PaymentMethod[] | undefined;\n    getPaymentMethodsMeta(): PaymentMethodMeta | undefined;\n    getPaymentMethod(methodId: string, gatewayId?: string): PaymentMethod | undefined;\n    getLoadError(): Error | undefined;\n    getLoadMethodError(methodId?: string): Error | undefined;\n    isLoading(): boolean;\n    isLoadingMethod(methodId?: string): boolean;\n}\n\nexport type PaymentMethodSelectorFactory = (state: PaymentMethodState) => PaymentMethodSelector;\n\nexport function createPaymentMethodSelectorFactory(): PaymentMethodSelectorFactory {\n    const getPaymentMethods = createSelector(\n        (state: PaymentMethodState) => state.data,\n        paymentMethods => () => paymentMethods\n    );\n\n    const getPaymentMethodsMeta = createSelector(\n        (state: PaymentMethodState) => state.meta,\n        meta => () => meta\n    );\n\n    const getPaymentMethod = createSelector(\n        (state: PaymentMethodState) => state.data,\n        paymentMethods => (methodId: string, gatewayId?: string) => {\n            return gatewayId ?\n                find(paymentMethods, { id: methodId, gateway: gatewayId }) :\n                find(paymentMethods, { id: methodId });\n        }\n    );\n\n    const getLoadError = createSelector(\n        (state: PaymentMethodState) => state.errors.loadError,\n        loadError => () => loadError\n    );\n\n    const getLoadMethodError = createSelector(\n        (state: PaymentMethodState) => state.errors.loadMethodId,\n        (state: PaymentMethodState) => state.errors.loadMethodError,\n        (loadMethodId, loadMethodError) => (methodId?: string) => {\n            if (methodId && loadMethodId !== methodId) {\n                return;\n            }\n\n            return loadMethodError;\n        }\n    );\n\n    const isLoading = createSelector(\n        (state: PaymentMethodState) => state.statuses.isLoading,\n        isLoading => () => !!isLoading\n    );\n\n    const isLoadingMethod = createSelector(\n        (state: PaymentMethodState) => state.statuses.loadMethodId,\n        (state: PaymentMethodState) => state.statuses.isLoadingMethod,\n        (loadMethodId, isLoadingMethod) => (methodId?: string) => {\n            if (methodId && loadMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isLoadingMethod;\n        }\n    );\n\n    return memoizeOne((\n        state: PaymentMethodState = DEFAULT_STATE\n    ): PaymentMethodSelector => {\n        return {\n            getPaymentMethods: getPaymentMethods(state),\n            getPaymentMethodsMeta: getPaymentMethodsMeta(state),\n            getPaymentMethod: getPaymentMethod(state),\n            getLoadError: getLoadError(state),\n            getLoadMethodError: getLoadMethodError(state),\n            isLoading: isLoading(state),\n            isLoadingMethod: isLoadingMethod(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport PaymentStrategyState, { DEFAULT_STATE } from './payment-strategy-state';\n\nexport default interface PaymentStrategySelector {\n    getInitializeError(methodId?: string): Error | undefined;\n    getExecuteError(methodId?: string): Error | undefined;\n    getFinalizeError(methodId?: string): Error | undefined;\n    getWidgetInteractingError(methodId?: string): Error | undefined;\n    isInitializing(methodId?: string): boolean;\n    isInitialized(methodId: string): boolean;\n    isExecuting(methodId?: string): boolean;\n    isFinalizing(methodId?: string): boolean;\n    isWidgetInteracting(methodId?: string): boolean;\n}\n\nexport type PaymentStrategySelectorFactory = (state: PaymentStrategyState) => PaymentStrategySelector;\n\nexport function createPaymentStrategySelectorFactory(): PaymentStrategySelectorFactory {\n    const getInitializeError = createSelector(\n        (state: PaymentStrategyState) => state.errors.initializeMethodId,\n        (state: PaymentStrategyState) => state.errors.initializeError,\n        (initializeMethodId, initializeError) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return;\n            }\n\n            return initializeError;\n        }\n    );\n\n    const getExecuteError = createSelector(\n        (state: PaymentStrategyState) => state.errors.executeMethodId,\n        (state: PaymentStrategyState) => state.errors.executeError,\n        (executeMethodId, executeError) => (methodId?: string) => {\n            if (methodId && executeMethodId !== methodId) {\n                return;\n            }\n\n            return executeError;\n        }\n    );\n\n    const getFinalizeError = createSelector(\n        (state: PaymentStrategyState) => state.errors.finalizeMethodId,\n        (state: PaymentStrategyState) => state.errors.finalizeError,\n        (finalizeMethodId, finalizeError) => (methodId?: string) => {\n            if (methodId && finalizeMethodId !== methodId) {\n                return;\n            }\n\n            return finalizeError;\n        }\n    );\n\n    const getWidgetInteractingError = createSelector(\n        (state: PaymentStrategyState) => state.errors.widgetInteractionMethodId,\n        (state: PaymentStrategyState) => state.errors.widgetInteractionError,\n        (widgetInteractionMethodId, widgetInteractionError) => (methodId?: string) => {\n            if (methodId && widgetInteractionMethodId !== methodId) {\n                return;\n            }\n\n            return widgetInteractionError;\n        }\n    );\n\n    const isInitializing = createSelector(\n        (state: PaymentStrategyState) => state.statuses.initializeMethodId,\n        (state: PaymentStrategyState) => state.statuses.isInitializing,\n        (initializeMethodId, isInitializing) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isInitializing;\n        }\n    );\n\n    const isInitialized = createSelector(\n        (state: PaymentStrategyState) => state.data,\n        data => (methodId: string) => {\n            return !!(\n                data[methodId] &&\n                data[methodId].isInitialized\n            );\n        }\n    );\n\n    const isExecuting = createSelector(\n        (state: PaymentStrategyState) => state.statuses.executeMethodId,\n        (state: PaymentStrategyState) => state.statuses.isExecuting,\n        (executeMethodId, isExecuting) => (methodId?: string) => {\n            if (methodId && executeMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isExecuting;\n        }\n    );\n\n    const isFinalizing = createSelector(\n        (state: PaymentStrategyState) => state.statuses.finalizeMethodId,\n        (state: PaymentStrategyState) => state.statuses.isFinalizing,\n        (finalizeMethodId, isFinalizing) => (methodId?: string) => {\n            if (methodId && finalizeMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isFinalizing;\n        }\n    );\n\n    const isWidgetInteracting = createSelector(\n        (state: PaymentStrategyState) => state.statuses.widgetInteractionMethodId,\n        (state: PaymentStrategyState) => state.statuses.isWidgetInteracting,\n        (widgetInteractionMethodId, isWidgetInteracting) => (methodId?: string) => {\n            if (methodId && widgetInteractionMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isWidgetInteracting;\n        }\n    );\n\n    return memoizeOne((\n        state: PaymentStrategyState = DEFAULT_STATE\n    ): PaymentStrategySelector => {\n        return {\n            getInitializeError: getInitializeError(state),\n            getExecuteError: getExecuteError(state),\n            getFinalizeError: getFinalizeError(state),\n            getWidgetInteractingError: getWidgetInteractingError(state),\n            isInitializing: isInitializing(state),\n            isInitialized: isInitialized(state),\n            isExecuting: isExecuting(state),\n            isFinalizing: isFinalizing(state),\n            isWidgetInteracting: isWidgetInteracting(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\nimport { Country } from '../geography';\n\nimport ShippingCountryState, { DEFAULT_STATE } from './shipping-country-state';\n\nexport default interface ShippingCountrySelector {\n    getShippingCountries(): Country[] | undefined;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type ShippingCountrySelectorFactory = (state: ShippingCountryState) => ShippingCountrySelector;\n\nexport function createShippingCountrySelectorFactory(): ShippingCountrySelectorFactory {\n    const getShippingCountries = createSelector(\n        (state: ShippingCountryState) => state.data,\n        data => () => data\n    );\n\n    const getLoadError = createSelector(\n        (state: ShippingCountryState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const isLoading = createSelector(\n        (state: ShippingCountryState) => state.statuses.isLoading,\n        status => () => !!status\n    );\n\n    return memoizeOne((\n        state: ShippingCountryState = DEFAULT_STATE\n    ): ShippingCountrySelector => {\n        return {\n            getShippingCountries: getShippingCountries(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport ShippingStrategyState, { DEFAULT_STATE } from './shipping-strategy-state';\n\nexport default interface ShippingStrategySelector {\n    getUpdateAddressError(methodId?: string): Error | undefined;\n    getSelectOptionError(methodId?: string): Error | undefined;\n    getInitializeError(methodId?: string): Error | undefined;\n    isUpdatingAddress(methodId?: string): boolean;\n    isSelectingOption(methodId?: string): boolean;\n    isInitializing(methodId?: string): boolean;\n    isInitialized(methodId: string): boolean;\n}\n\nexport type ShippingStrategySelectorFactory = (state: ShippingStrategyState) => ShippingStrategySelector;\n\nexport function createShippingStrategySelectorFactory(): ShippingStrategySelectorFactory {\n    const getUpdateAddressError = createSelector(\n        (state: ShippingStrategyState) => state.errors.updateAddressMethodId,\n        (state: ShippingStrategyState) => state.errors.updateAddressError,\n        (updateAddressMethodId, updateAddressError) => (methodId?: string) => {\n            if (methodId && updateAddressMethodId !== methodId) {\n                return;\n            }\n\n            return updateAddressError;\n        }\n    );\n\n    const getSelectOptionError = createSelector(\n        (state: ShippingStrategyState) => state.errors.selectOptionMethodId,\n        (state: ShippingStrategyState) => state.errors.selectOptionError,\n        (selectOptionMethodId, selectOptionError) => (methodId?: string) => {\n            if (methodId && selectOptionMethodId !== methodId) {\n                return;\n            }\n\n            return selectOptionError;\n        }\n    );\n\n    const getInitializeError = createSelector(\n        (state: ShippingStrategyState) => state.errors.initializeMethodId,\n        (state: ShippingStrategyState) => state.errors.initializeError,\n        (initializeMethodId, initializeError) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return;\n            }\n\n            return initializeError;\n        }\n    );\n\n    const isUpdatingAddress = createSelector(\n        (state: ShippingStrategyState) => state.statuses.updateAddressMethodId,\n        (state: ShippingStrategyState) => state.statuses.isUpdatingAddress,\n        (updateAddressMethodId, isUpdatingAddress) => (methodId?: string) => {\n            if (methodId && updateAddressMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isUpdatingAddress;\n        }\n    );\n\n    const isSelectingOption = createSelector(\n        (state: ShippingStrategyState) => state.statuses.selectOptionMethodId,\n        (state: ShippingStrategyState) => state.statuses.isSelectingOption,\n        (selectOptionMethodId, isSelectingOption) => (methodId?: string) => {\n            if (methodId && selectOptionMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isSelectingOption;\n        }\n    );\n\n    const isInitializing = createSelector(\n        (state: ShippingStrategyState) => state.statuses.initializeMethodId,\n        (state: ShippingStrategyState) => state.statuses.isInitializing,\n        (initializeMethodId, isInitializing) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isInitializing;\n        }\n    );\n\n    const isInitialized = createSelector(\n        (state: ShippingStrategyState) => state.data,\n        data => (methodId: string) => {\n            return !!(\n                data[methodId] &&\n                data[methodId].isInitialized\n            );\n        }\n    );\n\n    return memoizeOne((\n        state: ShippingStrategyState = DEFAULT_STATE\n    ): ShippingStrategySelector => {\n        return {\n            getUpdateAddressError: getUpdateAddressError(state),\n            getSelectOptionError: getSelectOptionError(state),\n            getInitializeError: getInitializeError(state),\n            isUpdatingAddress: isUpdatingAddress(state),\n            isSelectingOption: isSelectingOption(state),\n            isInitializing: isInitializing(state),\n            isInitialized: isInitialized(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { BillingAddressSelector } from '../billing';\nimport { CartSelector } from '../cart';\nimport { createSelector } from '../common/selector';\nimport { CouponSelector, GiftCertificateSelector } from '../coupon';\nimport { CustomerSelector } from '../customer';\nimport { ConsignmentSelector } from '../shipping';\n\nimport Checkout from './checkout';\nimport CheckoutState, { DEFAULT_STATE } from './checkout-state';\n\nexport default interface CheckoutSelector {\n    getCheckout(): Checkout | undefined;\n    getOutstandingBalance(useStoreCredit?: boolean): number | undefined;\n    getLoadError(): Error | undefined;\n    getUpdateError(): Error | undefined;\n    isLoading(): boolean;\n    isUpdating(): boolean;\n}\n\nexport type CheckoutSelectorFactory = (\n    state: CheckoutState,\n    billingAddress: BillingAddressSelector,\n    cart: CartSelector,\n    consignments: ConsignmentSelector,\n    coupons: CouponSelector,\n    customer: CustomerSelector,\n    giftCertificates: GiftCertificateSelector\n) => CheckoutSelector;\n\ninterface CheckoutSelectorDependencies {\n    billingAddress: BillingAddressSelector;\n    cart: CartSelector;\n    consignments: ConsignmentSelector;\n    coupons: CouponSelector;\n    customer: CustomerSelector;\n    giftCertificates: GiftCertificateSelector;\n}\n\nexport function createCheckoutSelectorFactory(): CheckoutSelectorFactory {\n    const getCheckout = createSelector(\n        (state: CheckoutState) => state.data,\n        (_: CheckoutState, { billingAddress }: CheckoutSelectorDependencies) => billingAddress.getBillingAddress,\n        (_: CheckoutState, { cart }: CheckoutSelectorDependencies) => cart.getCart,\n        (_: CheckoutState, { customer }: CheckoutSelectorDependencies) => customer.getCustomer,\n        (_: CheckoutState, { consignments }: CheckoutSelectorDependencies) => consignments.getConsignments,\n        (_: CheckoutState, { coupons }: CheckoutSelectorDependencies) => coupons.getCoupons,\n        (_: CheckoutState, { giftCertificates }: CheckoutSelectorDependencies) => giftCertificates.getGiftCertificates,\n        (data, getBillingAddress, getCart, getCustomer, getConsignments, getCoupons, getGiftCertificates) => () => {\n            const billingAddress = getBillingAddress();\n            const cart = getCart();\n            const customer = getCustomer();\n            const consignments = getConsignments() || [];\n            const coupons = getCoupons() || [];\n            const giftCertificates = getGiftCertificates() || [];\n\n            if (!data || !cart || !customer) {\n                return;\n            }\n\n            return {\n                ...data,\n                billingAddress,\n                cart,\n                customer,\n                consignments,\n                coupons,\n                giftCertificates,\n            };\n        }\n    );\n\n    const getOutstandingBalance = createSelector(\n        getCheckout,\n        getCheckout => (useStoreCredit?: boolean) => {\n            const checkout = getCheckout();\n\n            if (!checkout) {\n                return;\n            }\n\n            const grandTotal = checkout.grandTotal || 0;\n            const storeCredit = checkout.customer.storeCredit || 0;\n\n            return useStoreCredit ? Math.max(grandTotal - storeCredit, 0) : checkout.outstandingBalance;\n        }\n    );\n\n    const getLoadError = createSelector(\n        (state: CheckoutState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const getUpdateError = createSelector(\n        (state: CheckoutState) => state.errors.updateError,\n        error => () => error\n    );\n\n    const isLoading = createSelector(\n        (state: CheckoutState) => state.statuses.isLoading,\n        isLoading => () => isLoading === true\n    );\n\n    const isUpdating = createSelector(\n        (state: CheckoutState) => state.statuses.isUpdating,\n        isUpdating => () => isUpdating === true\n    );\n\n    return memoizeOne((\n        state: CheckoutState = DEFAULT_STATE,\n        billingAddress: BillingAddressSelector,\n        cart: CartSelector,\n        consignments: ConsignmentSelector,\n        coupons: CouponSelector,\n        customer: CustomerSelector,\n        giftCertificates: GiftCertificateSelector\n    ): CheckoutSelector => {\n        return {\n            getCheckout: getCheckout(state, {\n                billingAddress,\n                cart,\n                consignments,\n                coupons,\n                customer,\n                giftCertificates,\n            }),\n            getOutstandingBalance: getOutstandingBalance(state, {\n                billingAddress,\n                cart,\n                consignments,\n                coupons,\n                customer,\n                giftCertificates,\n            }),\n            getLoadError: getLoadError(state),\n            getUpdateError: getUpdateError(state),\n            isLoading: isLoading(state),\n            isUpdating: isUpdating(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { BillingAddressSelector } from '../billing';\nimport { createSelector } from '../common/selector';\nimport { CouponSelector } from '../coupon';\n\nimport Order from './order';\nimport OrderState, { DEFAULT_STATE, OrderMetaState } from './order-state';\n\nexport default interface OrderSelector {\n    getOrder(): Order | undefined;\n    getOrderMeta(): OrderMetaState | undefined;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type OrderSelectorFactory = (\n    state: OrderState,\n    billingAddress: BillingAddressSelector,\n    coupons: CouponSelector\n) => OrderSelector;\n\ninterface OrderSelectorDependencies {\n    billingAddress: BillingAddressSelector;\n    coupons: CouponSelector;\n}\n\nexport function createOrderSelectorFactory(): OrderSelectorFactory {\n    const getOrder = createSelector(\n        (state: OrderState) => state.data,\n        (_: OrderState, { billingAddress }: OrderSelectorDependencies) => billingAddress.getBillingAddress(),\n        (_: OrderState, { coupons }: OrderSelectorDependencies) => coupons.getCoupons(),\n        (data, billingAddress, coupons = []) => () => {\n            if (!data || !billingAddress) {\n                return;\n            }\n\n            return {\n                ...data,\n                billingAddress,\n                coupons,\n            };\n        }\n    );\n\n    const getOrderMeta = createSelector(\n        (state: OrderState) => state.meta,\n        meta => () => meta\n    );\n\n    const getLoadError = createSelector(\n        (state: OrderState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const isLoading = createSelector(\n        (state: OrderState) => !!state.statuses.isLoading,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: OrderState = DEFAULT_STATE,\n        billingAddress: BillingAddressSelector,\n        coupons: CouponSelector\n    ): OrderSelector => {\n        return {\n            getOrder: getOrder(state, { billingAddress, coupons }),\n            getOrderMeta: getOrderMeta(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { RequestError } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\n\nimport StoreCreditState, { DEFAULT_STATE } from './store-credit-state';\n\nexport default interface StoreCreditSelector {\n    getApplyError(): RequestError | undefined;\n    isApplying(): boolean;\n}\n\nexport type StoreCreditSelectorFactory = (state: StoreCreditState) => StoreCreditSelector;\n\nexport function createStoreCreditSelectorFactory(): StoreCreditSelectorFactory {\n    const getApplyError = createSelector(\n        (state: StoreCreditState) => state.errors.applyError,\n        error => () => error\n    );\n\n    const isApplying = createSelector(\n        (state: StoreCreditState) => !!state.statuses.isApplying,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: StoreCreditState = DEFAULT_STATE\n    ): StoreCreditSelector => {\n        return {\n            getApplyError: getApplyError(state),\n            isApplying: isApplying(state),\n        };\n    });\n}\n","import { createDataStore } from '@bigcommerce/data-store';\n\nimport { createRequestErrorFactory } from '../common/error';\n\nimport CheckoutStore, { CheckoutStoreOptions } from './checkout-store';\nimport CheckoutStoreState from './checkout-store-state';\nimport createActionTransformer from './create-action-transformer';\nimport createCheckoutStoreReducer from './create-checkout-store-reducer';\nimport { createInternalCheckoutSelectorsFactory } from './create-internal-checkout-selectors';\n\nexport default function createCheckoutStore(\n    initialState: Partial<CheckoutStoreState> = {},\n    options?: CheckoutStoreOptions\n): CheckoutStore {\n    const actionTransformer = createActionTransformer(createRequestErrorFactory());\n    const createInternalCheckoutSelectors = createInternalCheckoutSelectorsFactory();\n    const stateTransformer = (state: CheckoutStoreState) => createInternalCheckoutSelectors(state);\n\n    return createDataStore(\n        createCheckoutStoreReducer(),\n        initialState,\n        { actionTransformer, stateTransformer, ...options }\n    );\n}\n","import { Action } from '@bigcommerce/data-store';\nimport { from, Observable, Subscribable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { RequestErrorFactory } from '../common/error';\n\nexport default function createActionTransformer(\n    requestErrorFactory: RequestErrorFactory\n): (action: Subscribable<Action>) => Observable<Action> {\n    return action$ => from(action$).pipe(catchError<Action, never>(action => {\n        if (action instanceof Error || action.payload instanceof Error) {\n            throw action;\n        }\n\n        if (isResponse(action.payload)) {\n            const message = action.payload.body && action.payload.body.detail;\n\n            throw { ...action, payload: requestErrorFactory.createError(action.payload, message) };\n        }\n\n        throw action;\n    }));\n}\n\nfunction isResponse(object: any) {\n    if (!object || typeof object !== 'object') {\n        return false;\n    }\n\n    return ['body', 'headers', 'status', 'statusText'].every(key =>\n        object.hasOwnProperty(key)\n    );\n}\n","import { PaymentMethodInvalidError } from '../../payment/errors';\n\nimport { UnrecoverableError } from './errors';\nimport RequestErrorFactory from './request-error-factory';\n\nexport default function createRequestErrorFactory(): RequestErrorFactory {\n    const factory = new RequestErrorFactory();\n\n    const unrecoverableErrorTypes = [\n        'catalog_only',\n        'empty_cart',\n        'invalid_order_id',\n        'invalid_order_token',\n        'missing_order_token',\n        'missing_provider_token',\n        'missing_shipping_method',\n        'order_completion_error',\n        'order_could_not_be_finalized_error',\n        'order_create_failed',\n        'provider_fatal_error',\n        'provider_setup_error',\n        'stock_too_low',\n    ];\n\n    unrecoverableErrorTypes.forEach(type => {\n        factory.register(type, (response, message) => new UnrecoverableError(response, message));\n    });\n\n    factory.register('invalid_payment_provider', response => new PaymentMethodInvalidError(response));\n    factory.register('payment_config_not_found', response => new PaymentMethodInvalidError(response));\n\n    return factory;\n}\n","import { combineReducers, Action, Reducer } from '@bigcommerce/data-store';\n\nimport { billingAddressReducer } from '../billing';\nimport { cartReducer } from '../cart';\nimport { checkoutButtonReducer } from '../checkout-buttons';\nimport { configReducer } from '../config';\nimport { couponReducer, giftCertificateReducer } from '../coupon';\nimport { customerReducer, customerStrategyReducer } from '../customer';\nimport { countryReducer } from '../geography';\nimport { orderReducer } from '../order';\nimport { paymentMethodReducer, paymentReducer, paymentStrategyReducer } from '../payment';\nimport { instrumentReducer } from '../payment/instrument';\nimport { remoteCheckoutReducer } from '../remote-checkout';\nimport { consignmentReducer, shippingCountryReducer, shippingStrategyReducer } from '../shipping';\nimport { storeCreditReducer } from '../store-credit';\n\nimport checkoutReducer from './checkout-reducer';\nimport CheckoutStoreState from './checkout-store-state';\n\nexport default function createCheckoutStoreReducer(): Reducer<CheckoutStoreState, Action> {\n    return combineReducers({\n        billingAddress: billingAddressReducer,\n        cart: cartReducer,\n        checkout: checkoutReducer,\n        checkoutButton: checkoutButtonReducer,\n        config: configReducer,\n        consignments: consignmentReducer,\n        countries: countryReducer,\n        coupons: couponReducer,\n        customer: customerReducer,\n        customerStrategies: customerStrategyReducer,\n        giftCertificates: giftCertificateReducer,\n        instruments: instrumentReducer,\n        order: orderReducer,\n        payment: paymentReducer,\n        paymentMethods: paymentMethodReducer,\n        paymentStrategies: paymentStrategyReducer,\n        remoteCheckout: remoteCheckoutReducer,\n        shippingCountries: shippingCountryReducer,\n        shippingStrategies: shippingStrategyReducer,\n        storeCredit: storeCreditReducer,\n    });\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { InternalErrorResponseBody } from '../../common/error';\nimport { RequestError } from '../../common/error/errors';\n\n/**\n * Throw this error when we are unable to retrieve a checkout object from the\n * server using the provided ID. It could be because the shopper does not have\n * permission to view the object, or the ID itself is invalid.\n */\nexport default class CheckoutNotAvailableError extends RequestError {\n    constructor(response: Response<InternalErrorResponseBody>) {\n        super(response, { message: response.body.title });\n\n        this.name = 'CheckoutNotAvailableError';\n        this.type = 'checkout_not_available';\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { joinIncludes, ContentType, RequestOptions } from '../common/http-request';\n\nimport Checkout, { CheckoutRequestBody } from './checkout';\nimport CHECKOUT_DEFAULT_INCLUDES from './checkout-default-includes';\nimport CheckoutParams from './checkout-params';\nimport { CheckoutNotAvailableError } from './errors';\n\nexport default class CheckoutRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadCheckout(id: string, { params, timeout }: RequestOptions<CheckoutParams> = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkout/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.get(url, {\n            params: {\n                include: joinIncludes([\n                    ...CHECKOUT_DEFAULT_INCLUDES,\n                    ...(params && params.include || []),\n                ]),\n            },\n            headers,\n            timeout,\n        }).catch(error => {\n            if (error.status >= 400 && error.status < 500) {\n                throw new CheckoutNotAvailableError(error);\n            }\n\n            throw error;\n        });\n    }\n\n    updateCheckout(id: string, body: CheckoutRequestBody, { params, timeout }: RequestOptions<CheckoutParams> = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkout/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.put(url, {\n            params: {\n                include: joinIncludes([\n                    ...CHECKOUT_DEFAULT_INCLUDES,\n                    ...(params && params.include || []),\n                ]),\n            },\n            body,\n            headers,\n            timeout,\n        });\n    }\n}\n","import Coupon from './coupon';\nimport InternalCoupon from './internal-coupon';\n\nconst couponTypes = [\n    'per_item_discount',\n    'percentage_discount',\n    'per_total_discount',\n    'shipping_discount',\n    'free_shipping',\n];\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalCoupon(coupon: Coupon): InternalCoupon {\n    return {\n        code: coupon.code,\n        discount: coupon.displayName,\n        discountType: couponTypes.indexOf(coupon.couponType),\n    };\n}\n","import { isBillingAddressLike } from '../billing';\nimport BillingAddress from '../billing/billing-address';\nimport { Consignment } from '../shipping';\n\nimport Address from './address';\nimport InternalAddress from './internal-address';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalAddress(\n    address: Address | BillingAddress,\n    consignments?: Consignment[]\n): InternalAddress<any> {\n    let addressId;\n\n    if (isBillingAddressLike(address)) {\n        addressId = address.id;\n    } else if (consignments && consignments.length) {\n        addressId = consignments[0].id;\n    }\n\n    return {\n        id: addressId,\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        addressLine1: address.address1,\n        addressLine2: address.address2,\n        city: address.city,\n        province: address.stateOrProvince,\n        provinceCode: address.stateOrProvinceCode,\n        postCode: address.postalCode,\n        country: address.country,\n        countryCode: address.countryCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    };\n}\n","import Address from '../address/address';\n\nimport BillingAddress from './billing-address';\n\nexport default function isBillingAddressLike(address: Address): address is BillingAddress {\n    const billingAddress = address as BillingAddress;\n\n    return typeof billingAddress.id !== 'undefined';\n}\n","import { memoize } from '@bigcommerce/memoize';\n\nimport { bindDecorator, isEqual, isPrivate, CacheKeyResolver } from '../utility';\n\n/**\n * Decorates a class by patching all of its methods to cache their return values\n * and return them if they are called again with the same set of parameters. The\n * decorator also binds all the methods to the calling instance so it can be\n * destructed.\n */\nexport default function selectorDecorator<T extends Constructor<object>>(target: T): T {\n    const decoratedTarget = class extends target {};\n\n    Object.getOwnPropertyNames(target.prototype)\n        .forEach(key => {\n            const descriptor = Object.getOwnPropertyDescriptor(target.prototype, key);\n\n            if (!descriptor || key === 'constructor') {\n                return;\n            }\n\n            Object.defineProperty(\n                decoratedTarget.prototype,\n                key,\n                selectorMethodDecorator(target.prototype, key, descriptor)\n            );\n        });\n\n    return decoratedTarget;\n}\n\nfunction selectorMethodDecorator<T extends Method>(target: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T> {\n    if (typeof descriptor.value !== 'function') {\n        return descriptor;\n    }\n\n    let resolver = new CacheKeyResolver();\n    let method = descriptor.value;\n    let memoizedMethod = memoize(method);\n\n    return bindDecorator(target, key, {\n        get() {\n            const value = ((...args: any[]) => {\n                const cachedValue = memoizedMethod.call(this, ...args);\n\n                if (resolver.getUsedCount(...args) === 1) {\n                    return cachedValue;\n                }\n\n                const newValue = method.call(this, ...args);\n\n                if (isEqual(newValue, cachedValue, { keyFilter: key => !isPrivate(key) })) {\n                    return cachedValue;\n                }\n\n                memoizedMethod.cache.set(resolver.getKey(...args), newValue);\n\n                return newValue;\n            }) as T;\n\n            Object.defineProperty(this, key, { ...descriptor, value });\n\n            return value;\n        },\n        set(value) {\n            resolver = new CacheKeyResolver();\n            method = value;\n            memoizedMethod = memoize(method);\n        },\n    });\n}\n\nexport type Constructor<T> = new (...args: any[]) => T;\ntype Method = (...args: any[]) => any;\n","import { InternalCheckoutSelectors } from '../checkout';\nimport { selector } from '../common/selector';\n\nimport CheckoutButtonSelector from './checkout-button-selector';\nimport { CheckoutButtonMethodType } from './strategies';\n\n@selector\nexport default class CheckoutButtonErrorSelector {\n    private _checkoutButton: CheckoutButtonSelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._checkoutButton = selectors.checkoutButton;\n    }\n\n    getInitializeButtonError(methodId?: CheckoutButtonMethodType): Error | undefined {\n        return this._checkoutButton.getInitializeError(methodId);\n    }\n\n    getDeinitializeButtonError(methodId?: CheckoutButtonMethodType): Error | undefined {\n        return this._checkoutButton.getDeinitializeError(methodId);\n    }\n}\n","import { InternalCheckoutSelectors } from '../checkout';\nimport { selector } from '../common/selector';\n\nimport CheckoutButtonSelector from './checkout-button-selector';\nimport { CheckoutButtonMethodType } from './strategies';\n\n@selector\nexport default class CheckoutButtonStatusSelector {\n    private _checkoutButton: CheckoutButtonSelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._checkoutButton = selectors.checkoutButton;\n    }\n\n    isInitializingButton(methodId?: CheckoutButtonMethodType): boolean {\n        return this._checkoutButton.isInitializing(methodId);\n    }\n\n    isDeinitializingButton(methodId?: CheckoutButtonMethodType): boolean {\n        return this._checkoutButton.isDeinitializing(methodId);\n    }\n}\n","import { InternalCheckoutSelectors } from '../checkout';\n\nimport CheckoutButtonErrorSelector from './checkout-button-error-selector';\nimport CheckoutButtonSelectors from './checkout-button-selectors';\nimport CheckoutButtonStatusSelector from './checkout-button-status-selector';\n\nexport default function createCheckoutButtonSelectors(selectors: InternalCheckoutSelectors): CheckoutButtonSelectors {\n    const errors = new CheckoutButtonErrorSelector(selectors);\n    const statuses = new CheckoutButtonStatusSelector(selectors);\n\n    return {\n        errors,\n        statuses,\n    };\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../checkout';\nimport { isElementId, setUniqueElementId } from '../common/dom';\nimport { bindDecorator as bind } from '../common/utility';\n\nimport { CheckoutButtonInitializeOptions, CheckoutButtonOptions } from './checkout-button-options';\nimport CheckoutButtonSelectors from './checkout-button-selectors';\nimport CheckoutButtonStrategyActionCreator from './checkout-button-strategy-action-creator';\nimport createCheckoutButtonSelectors from './create-checkout-button-selectors';\n\n@bind\nexport default class CheckoutButtonInitializer {\n    private _state: CheckoutButtonSelectors;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _store: CheckoutStore,\n        private _buttonStrategyActionCreator: CheckoutButtonStrategyActionCreator\n    ) {\n        this._state = createCheckoutButtonSelectors(this._store.getState());\n\n        this._store.subscribe(state => {\n            this._state = createCheckoutButtonSelectors(state);\n        });\n    }\n\n    /**\n     * Returns a snapshot of the current state.\n     *\n     * The method returns a new instance every time there is a change in the\n     * state. You can query the state by calling any of its getter methods.\n     *\n     * ```js\n     * const state = service.getState();\n     *\n     * console.log(state.errors.getInitializeButtonError());\n     * console.log(state.statuses.isInitializingButton());\n     * ```\n     *\n     * @returns The current customer's checkout state\n     */\n    getState(): CheckoutButtonSelectors {\n        return this._state;\n    }\n\n    /**\n     * Subscribes to any changes to the current state.\n     *\n     * The method registers a callback function and executes it every time there\n     * is a change in the current state.\n     *\n     * ```js\n     * service.subscribe(state => {\n     *     console.log(state.statuses.isInitializingButton());\n     * });\n     * ```\n     *\n     * The method can be configured to notify subscribers only regarding\n     * relevant changes, by providing a filter function.\n     *\n     * ```js\n     * const filter = state => state.errors.getInitializeButtonError();\n     *\n     * // Only trigger the subscriber when the cart changes.\n     * service.subscribe(state => {\n     *     console.log(state.errors.getInitializeButtonError())\n     * }, filter);\n     * ```\n     *\n     * @param subscriber - The function to subscribe to state changes.\n     * @param filters - One or more functions to filter out irrelevant state\n     * changes. If more than one function is provided, the subscriber will only\n     * be triggered if all conditions are met.\n     * @returns A function, if called, will unsubscribe the subscriber.\n     */\n    subscribe(\n        subscriber: (state: CheckoutButtonSelectors) => void,\n        ...filters: Array<(state: CheckoutButtonSelectors) => any>\n    ): () => void {\n        return this._store.subscribe(\n            () => subscriber(this.getState()),\n            state => state.checkoutButton.getState(),\n            ...filters.map(filter => (state: InternalCheckoutSelectors) => filter(createCheckoutButtonSelectors(state)))\n        );\n    }\n\n    /**\n     * Initializes the checkout button of a payment method.\n     *\n     * When the checkout button is initialized, it will be inserted into the DOM,\n     * ready to be interacted with by the customer.\n     *\n     * ```js\n     * initializer.initializeButton({\n     *     methodId: 'braintreepaypal',\n     *     containerId: 'checkoutButton',\n     *     braintreepaypal: {\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the checkout button.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeButton(options: CheckoutButtonInitializeOptions): Promise<CheckoutButtonSelectors> {\n        const containerIds = isElementId(options.containerId) ?\n            [options.containerId] :\n            setUniqueElementId(options.containerId, `${options.methodId}-container`);\n\n        return Promise.all(\n            containerIds.map(containerId => {\n                const action = this._buttonStrategyActionCreator.initialize({ ...options, containerId });\n                const queueId = `checkoutButtonStrategy:${options.methodId}:${containerId}`;\n\n                return this._store.dispatch(action, { queueId });\n            })\n        )\n            .then(() => this.getState());\n    }\n\n    /**\n     * De-initializes the checkout button by performing any necessary clean-ups.\n     *\n     * ```js\n     * await service.deinitializeButton({\n     *     methodId: 'braintreepaypal',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the checkout button.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeButton(options: CheckoutButtonOptions): Promise<CheckoutButtonSelectors> {\n        const action = this._buttonStrategyActionCreator.deinitialize(options);\n        const queueId = `checkoutButtonStrategy:${options.methodId}`;\n\n        return this._store.dispatch(action, { queueId })\n            .then(() => this.getState());\n    }\n}\n","enum CheckoutButtonMethodType {\n    BRAINTREE_PAYPAL = 'braintreepaypal',\n    BRAINTREE_PAYPAL_CREDIT = 'braintreepaypalcredit',\n    GOOGLEPAY_BRAINTREE = 'googlepaybraintree',\n    GOOGLEPAY_STRIPE = 'googlepaystripe',\n    MASTERPASS = 'masterpass',\n    PAYPALEXPRESS = 'paypalexpress',\n}\n\nexport default CheckoutButtonMethodType;\n","export default function isElementId(id: string): boolean {\n    return /^\\w[\\w\\-\\:\\.]*$/.test(id);\n}\n","import { uniqueId } from 'lodash';\n\nimport { InvalidArgumentError } from '../error/errors';\n\nexport default function setUniqueElementId(selector: string, idPrefix: string): string[] {\n    const containers = document.querySelectorAll(selector);\n\n    if (!containers.length) {\n        throw new InvalidArgumentError(`Unable to find any element with the specified selector: ${selector}`);\n    }\n\n    return Array.prototype.slice.call(containers)\n        .map((container: HTMLElement) => {\n            if (!container.id) {\n                container.id = uniqueId(idPrefix);\n            }\n\n            return container.id;\n        });\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, empty, of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { Registry } from '../common/registry';\nimport { PaymentMethodActionCreator } from '../payment';\n\nimport { CheckoutButtonActionType, DeinitializeButtonAction, InitializeButtonAction } from './checkout-button-actions';\nimport { CheckoutButtonInitializeOptions, CheckoutButtonOptions } from './checkout-button-options';\nimport { CheckoutButtonStrategy } from './strategies';\n\nexport default class CheckoutButtonStrategyActionCreator {\n    constructor(\n        private _registry: Registry<CheckoutButtonStrategy>,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): ThunkAction<InitializeButtonAction, InternalCheckoutSelectors> {\n        return store => {\n            const meta = { methodId: options.methodId, containerId: options.containerId };\n\n            if (store.getState().checkoutButton.isInitialized(options.methodId, options.containerId)) {\n                return empty();\n            }\n\n            return concat(\n                of(createAction(CheckoutButtonActionType.InitializeButtonRequested, undefined, meta)),\n                this._paymentMethodActionCreator.loadPaymentMethod(options.methodId, { timeout: options.timeout, useCache: true }),\n                defer(() => this._registry.get(options.methodId).initialize(options)\n                    .then(() => createAction(CheckoutButtonActionType.InitializeButtonSucceeded, undefined, meta)))\n            ).pipe(\n                catchError(error => throwErrorAction(CheckoutButtonActionType.InitializeButtonFailed, error, meta))\n            );\n        };\n    }\n\n    deinitialize(options: CheckoutButtonOptions): ThunkAction<DeinitializeButtonAction, InternalCheckoutSelectors> {\n        return store => {\n            const meta = { methodId: options.methodId };\n\n            if (!store.getState().checkoutButton.isInitialized(options.methodId)) {\n                return empty();\n            }\n\n            return concat(\n                of(createAction(CheckoutButtonActionType.DeinitializeButtonRequested, undefined, meta)),\n                defer(() => this._registry.get(options.methodId).deinitialize()\n                    .then(() => createAction(CheckoutButtonActionType.DeinitializeButtonSucceeded, undefined, meta)))\n            ).pipe(\n                catchError(error => throwErrorAction(CheckoutButtonActionType.DeinitializeButtonFailed, error, meta))\n            );\n        };\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { pick } from 'lodash';\n\nimport { Address, LegacyAddress } from '../../../address';\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, StandardError } from '../../../common/error/errors';\nimport { PaymentMethod } from '../../../payment';\nimport { BraintreeAddress, BraintreeError, BraintreePaypalCheckout, BraintreeSDKCreator, BraintreeTokenizePayload } from '../../../payment/strategies/braintree';\nimport { PaypalAuthorizeData, PaypalScriptLoader } from '../../../payment/strategies/paypal';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class BraintreePaypalButtonStrategy implements CheckoutButtonStrategy {\n    private _paypalCheckout?: BraintreePaypalCheckout;\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _braintreeSDKCreator: BraintreeSDKCreator,\n        private _paypalScriptLoader: PaypalScriptLoader,\n        private _formPoster: FormPoster,\n        private _offerCredit: boolean = false\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const paypalOptions = (this._offerCredit ? options.braintreepaypalcredit : options.braintreepaypal) || {};\n        const state = this._store.getState();\n        const paymentMethod = this._paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n        if (!paymentMethod || !paymentMethod.clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._braintreeSDKCreator.initialize(paymentMethod.clientToken);\n\n        return Promise.all([\n            this._braintreeSDKCreator.getPaypalCheckout(),\n            this._paypalScriptLoader.loadPaypal(),\n        ])\n            .then(([paypalCheckout, paypal]) => {\n                this._paypalCheckout = paypalCheckout;\n\n                const allowedSources = [];\n                const disallowedSources = [];\n\n                if (paypalOptions.allowCredit) {\n                    allowedSources.push(paypal.FUNDING.CREDIT);\n                } else {\n                    disallowedSources.push(paypal.FUNDING.CREDIT);\n                }\n\n                return paypal.Button.render({\n                    env: paymentMethod.config.testMode ? 'sandbox' : 'production',\n                    commit: paypalOptions.shouldProcessPayment ? true : false,\n                    funding: {\n                        allowed: allowedSources,\n                        disallowed: disallowedSources,\n                    },\n                    style: {\n                        shape: 'rect',\n                        label: this._offerCredit ? 'credit' : undefined,\n                        ...pick(paypalOptions.style, 'layout', 'size', 'color', 'label', 'shape', 'tagline', 'fundingicons'),\n                    },\n                    payment: () => this._setupPayment(paypalOptions.onPaymentError),\n                    onAuthorize: data => this._tokenizePayment(data, paypalOptions.shouldProcessPayment, paypalOptions.onAuthorizeError),\n                }, options.containerId);\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        this._paypalCheckout = undefined;\n        this._paymentMethod = undefined;\n\n        this._braintreeSDKCreator.teardown();\n\n        return Promise.resolve();\n    }\n\n    private _setupPayment(onError?: (error: BraintreeError | StandardError) => void): Promise<string> {\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(state => {\n                const checkout = state.checkout.getCheckout();\n                const config = state.config.getStoreConfig();\n                const customer = state.customer.getCustomer();\n                const address = customer && customer.addresses && customer.addresses[0];\n\n                if (!this._paypalCheckout) {\n                    throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n                }\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!config) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                return this._paypalCheckout.createPayment({\n                    flow: 'checkout',\n                    enableShippingAddress: true,\n                    shippingAddressEditable: false,\n                    shippingAddressOverride: address ? this._mapToBraintreeAddress(address) : undefined,\n                    amount: checkout.outstandingBalance,\n                    currency: config.currency.code,\n                    offerCredit: this._offerCredit,\n                });\n            })\n            .catch(error => {\n                if (onError) {\n                    onError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    private _tokenizePayment(\n        data: PaypalAuthorizeData,\n        shouldProcessPayment?: boolean,\n        onError?: (error: BraintreeError | StandardError) => void\n    ): Promise<BraintreeTokenizePayload> {\n        if (!this._paypalCheckout || !this._paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        const methodId = this._paymentMethod.id;\n\n        return Promise.all([\n            this._paypalCheckout.tokenizePayment(data),\n            this._braintreeSDKCreator.getDataCollector({ paypal: true }),\n        ])\n            .then(([payload, { deviceData }]) => {\n                this._formPoster.postForm('/checkout.php', {\n                    payment_type: 'paypal',\n                    provider: methodId,\n                    action: shouldProcessPayment ? 'process_payment' : 'set_external_checkout',\n                    nonce: payload.nonce,\n                    device_data: deviceData,\n                    shipping_address: JSON.stringify(this._mapToLegacyShippingAddress(payload)),\n                    billing_address: JSON.stringify(this._mapToLegacyBillingAddress(payload)),\n                });\n\n                return payload;\n            })\n            .catch(error => {\n                if (onError) {\n                    onError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    private _mapToLegacyShippingAddress(payload: BraintreeTokenizePayload): Partial<LegacyAddress> {\n        const shippingAddress = payload.details.shippingAddress;\n        const recipientName = shippingAddress && shippingAddress.recipientName || '';\n        const [firstName, lastName] = recipientName.split(' ');\n\n        return {\n            email: payload.details.email,\n            first_name: firstName,\n            last_name: lastName,\n            phone_number: shippingAddress && shippingAddress.phone || payload.details.phone,\n            address_line_1: shippingAddress && shippingAddress.line1,\n            address_line_2: shippingAddress && shippingAddress.line2,\n            city: shippingAddress && shippingAddress.city,\n            state: shippingAddress && shippingAddress.state,\n            country_code: shippingAddress && shippingAddress.countryCode,\n            postal_code: shippingAddress && shippingAddress.postalCode,\n        };\n    }\n\n    private _mapToLegacyBillingAddress(payload: BraintreeTokenizePayload): Partial<LegacyAddress> {\n        const billingAddress = payload.details.billingAddress;\n        const shippingAddress = payload.details.shippingAddress;\n\n        if (billingAddress) {\n            return {\n                email: payload.details.email,\n                first_name: billingAddress.firstName || payload.details.firstName,\n                last_name: billingAddress.lastName || payload.details.lastName,\n                phone_number: billingAddress.phone || payload.details.phone,\n                address_line_1: billingAddress.line1,\n                address_line_2: billingAddress.line2,\n                city: billingAddress.city,\n                state: billingAddress.state,\n                country_code: billingAddress.countryCode,\n                postal_code: billingAddress.postalCode,\n            };\n        }\n\n        return {\n            email: payload.details.email,\n            first_name: payload.details.firstName,\n            last_name: payload.details.lastName,\n            phone_number: payload.details.phone,\n            address_line_1: shippingAddress && shippingAddress.line1,\n            address_line_2: shippingAddress && shippingAddress.line2,\n            city: shippingAddress && shippingAddress.city,\n            state: shippingAddress && shippingAddress.state,\n            country_code: shippingAddress && shippingAddress.countryCode,\n            postal_code: shippingAddress && shippingAddress.postalCode,\n        };\n    }\n\n    private _mapToBraintreeAddress(address: Address): BraintreeAddress {\n        return {\n            line1: address.address1,\n            line2: address.address2,\n            city: address.city,\n            state: address.stateOrProvinceCode,\n            postalCode: address.postalCode,\n            countryCode: address.countryCode,\n            phone: address.phone,\n            recipientName: `${address.firstName} ${address.lastName}`,\n        };\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { InvalidArgumentError, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { GooglePayPaymentProcessor } from '../../../payment/strategies/googlepay';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class GooglePayButtonStrategy implements CheckoutButtonStrategy {\n    private _methodId?: string;\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _formPoster: FormPoster,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _googlePayPaymentProcessor: GooglePayPaymentProcessor\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { containerId, methodId } = options;\n\n        if (!containerId || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"containerId\" argument is not provided.');\n        }\n\n        this._methodId = methodId;\n\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(() => this._googlePayPaymentProcessor.initialize(this._getMethodId()))\n            .then(() => {\n                this._walletButton = this._createSignInButton(containerId);\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        if (this._walletButton && this._walletButton.parentNode) {\n            this._walletButton.parentNode.removeChild(this._walletButton);\n            this._walletButton = undefined;\n        }\n\n        return this._googlePayPaymentProcessor.deinitialize();\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const container = document.getElementById(containerId);\n\n        if (!container) {\n            throw new InvalidArgumentError('Unable to create sign-in button without valid container ID.');\n        }\n\n        const googlePayButton = this._googlePayPaymentProcessor.createButton(this._handleWalletButtonClick);\n\n        container.appendChild(googlePayButton);\n\n        return googlePayButton;\n    }\n\n    private _getMethodId(): string {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._methodId;\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): Promise<void> {\n        event.preventDefault();\n\n        return this._googlePayPaymentProcessor.displayWallet()\n            .then(paymentData => this._googlePayPaymentProcessor.handleSuccess(paymentData)\n            .then(() => {\n                if (paymentData.shippingAddress) {\n                    this._googlePayPaymentProcessor.updateShippingAddress(paymentData.shippingAddress);\n                }\n            }))\n            .then(() => this._onPaymentSelectComplete())\n            .catch(error => this._onError(error));\n    }\n\n    private _onPaymentSelectComplete(): void {\n        this._formPoster.postForm('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n        });\n    }\n\n    private _onError(error?: Error): void {\n        if (error && error.message !== 'CANCELED') {\n            throw error;\n        }\n    }\n}\n","import { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType\n} from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { getCallbackUrl, Masterpass, MasterpassCheckoutOptions, MasterpassScriptLoader } from '../../../payment/strategies/masterpass';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class MasterpassButtonStrategy implements CheckoutButtonStrategy {\n    private _masterpassClient?: Masterpass;\n    private _methodId?: string;\n    private _signInButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _masterpassScriptLoader: MasterpassScriptLoader\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { containerId, methodId } = options;\n\n        if (!containerId || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"containerId\" argument is not provided.');\n        }\n\n        this._methodId = methodId;\n\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!paymentMethod || !paymentMethod.initializationData.checkoutId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                return this._masterpassScriptLoader.load(paymentMethod.config.testMode);\n            })\n            .then(masterpass => {\n                this._masterpassClient = masterpass;\n                this._signInButton = this._createSignInButton(containerId);\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        if (this._signInButton && this._signInButton.parentNode) {\n            this._signInButton.removeEventListener('click', this._handleWalletButtonClick);\n            this._signInButton.parentNode.removeChild(this._signInButton);\n            this._signInButton = undefined;\n        }\n\n        return Promise.resolve();\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const buttonContainer = document.getElementById(containerId);\n\n        if (!buttonContainer) {\n            throw new Error('Need a container to place the button');\n        }\n\n        const button = document.createElement('input');\n\n        button.type = 'image';\n        button.src = 'https://static.masterpass.com/dyn/img/btn/global/mp_chk_btn_160x037px.svg';\n        buttonContainer.appendChild(button);\n\n        button.addEventListener('click', this._handleWalletButtonClick);\n\n        return button;\n    }\n\n    private _createMasterpassPayload(): MasterpassCheckoutOptions {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const paymentMethod = this._methodId ? state.paymentMethods.getPaymentMethod(this._methodId) : null;\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return {\n            checkoutId: paymentMethod.initializationData.checkoutId,\n            allowedCardTypes: paymentMethod.initializationData.allowedCardTypes,\n            amount: checkout.cart.cartAmount.toString(),\n            currency: checkout.cart.currency.code,\n            cartId: checkout.cart.id,\n            suppressShippingAddress: false,\n            callbackUrl: getCallbackUrl('cart'),\n        };\n    }\n\n    @bind\n    private _handleWalletButtonClick(): void {\n        if (!this._masterpassClient) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        this._masterpassClient.checkout(this._createMasterpassPayload());\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { pick } from 'lodash';\n\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, StandardError } from '../../../common/error/errors';\nimport { INTERNAL_USE_ONLY } from '../../../common/http-request';\nimport { PaymentMethod } from '../../../payment';\nimport { PaypalActions, PaypalAuthorizeData, PaypalClientToken, PaypalScriptLoader } from '../../../payment/strategies/paypal';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class PaypalButtonStrategy implements CheckoutButtonStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paypalScriptLoader: PaypalScriptLoader,\n        private _formPoster: FormPoster,\n        private _host: string = ''\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const paypalOptions = options.paypal;\n        const state = this._store.getState();\n        const paymentMethod = this._paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n        if (!paypalOptions) {\n            throw new InvalidArgumentError();\n        }\n\n        return this._paypalScriptLoader.loadPaypal()\n            .then(paypal => {\n                if (!paymentMethod || !paymentMethod.config.merchantId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const merchantId = paymentMethod.config.merchantId;\n                const env = paymentMethod.config.testMode ? 'sandbox' : 'production';\n                const clientToken: PaypalClientToken = { [env]: paypalOptions.clientId };\n\n                const allowedSources = [];\n                const disallowedSources = [];\n\n                if (paypalOptions.allowCredit) {\n                    allowedSources.push(paypal.FUNDING.CREDIT);\n                } else {\n                    disallowedSources.push(paypal.FUNDING.CREDIT);\n                }\n\n                return paypal.Button.render({\n                    env,\n                    client: clientToken,\n                    commit: paypalOptions.shouldProcessPayment,\n                    funding: {\n                        allowed: allowedSources,\n                        disallowed: disallowedSources,\n                    },\n                    style: {\n                        shape: 'rect',\n                        ...pick(paypalOptions.style, 'layout', 'size', 'color', 'label', 'shape', 'tagline', 'fundingicons'),\n                    },\n                    payment: (_, actions) => this._setupPayment(merchantId, actions, paypalOptions.onPaymentError),\n                    onAuthorize: (data, actions) => this._tokenizePayment(data, actions, paypalOptions.shouldProcessPayment, paypalOptions.onAuthorizeError),\n                }, options.containerId);\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        this._paymentMethod = undefined;\n\n        return Promise.resolve();\n    }\n\n    private _setupPayment(merchantId: string, actions?: PaypalActions, onError?: (error: StandardError) => void): Promise<string> {\n        if (!actions) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(state => {\n                const cart = state.cart.getCart();\n                const cartId = cart ? cart.id : '';\n\n                return actions.request.post(`${this._host}/api/storefront/payment/paypalexpress`, { merchantId, cartId }, {\n                    headers: {\n                        'X-API-INTERNAL': INTERNAL_USE_ONLY,\n                    },\n                });\n            })\n            .then(res => res.id)\n            .catch(error => {\n                if (onError) {\n                    onError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    private _tokenizePayment(\n        data: PaypalAuthorizeData,\n        actions?: PaypalActions,\n        shouldProcessPayment?: boolean,\n        _onError?: (error: StandardError) => void // FIXME: This parameter seems to be unused\n    ): Promise<void> {\n        if (!this._paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        if (!actions) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        if (!data.paymentID || !data.payerID) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        const methodId = this._paymentMethod.id;\n\n        return actions.payment.get(data.paymentID).then(payload => {\n            this._formPoster.postForm('/checkout.php', {\n                payment_type: 'paypal',\n                provider: methodId,\n                action: shouldProcessPayment ? 'process_payment' : 'set_external_checkout',\n                paymentId: data.paymentID,\n                payerId: data.payerID,\n                payerInfo: JSON.stringify(payload.payer.payer_info),\n            });\n        });\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport { createCheckoutStore } from '../checkout';\nimport { PaymentMethodActionCreator, PaymentMethodRequestSender } from '../payment';\n\nimport CheckoutButtonInitializer from './checkout-button-initializer';\nimport CheckoutButtonInitializerOptions from './checkout-button-initializer-options';\nimport CheckoutButtonStrategyActionCreator from './checkout-button-strategy-action-creator';\nimport createCheckoutButtonRegistry from './create-checkout-button-registry';\n\n/**\n * Creates an instance of `CheckoutButtonInitializer`.\n *\n * @remarks\n * ```js\n * const initializer = createCheckoutButtonInitializer();\n *\n * initializer.initializeButton({\n *     methodId: 'braintreepaypal',\n *     braintreepaypal: {\n *         container: '#checkoutButton',\n *     },\n * });\n * ```\n *\n * @alpha\n * Please note that `CheckoutButtonInitializer` is currently in an early stage\n * of development. Therefore the API is unstable and not ready for public\n * consumption.\n *\n * @param options - A set of construction options.\n * @returns an instance of `CheckoutButtonInitializer`.\n */\nexport default function createCheckoutButtonInitializer(\n    options?: CheckoutButtonInitializerOptions\n): CheckoutButtonInitializer {\n    const host = options && options.host;\n    const store = createCheckoutStore();\n    const requestSender = createRequestSender({ host });\n    const formPoster = createFormPoster({ host });\n\n    return new CheckoutButtonInitializer(\n        store,\n        new CheckoutButtonStrategyActionCreator(\n            createCheckoutButtonRegistry(store, requestSender, formPoster, host),\n            new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender))\n        )\n    );\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { CheckoutActionCreator, CheckoutRequestSender, CheckoutStore } from '../checkout';\nimport { Registry } from '../common/registry';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { BraintreeScriptLoader, BraintreeSDKCreator } from '../payment/strategies/braintree';\nimport { createGooglePayPaymentProcessor, GooglePayBraintreeInitializer, GooglePayStripeInitializer } from '../payment/strategies/googlepay';\nimport { MasterpassScriptLoader } from '../payment/strategies/masterpass';\nimport { PaypalScriptLoader } from '../payment/strategies/paypal';\n\nimport { CheckoutButtonMethodType, CheckoutButtonStrategy } from './strategies';\nimport { BraintreePaypalButtonStrategy } from './strategies/braintree';\nimport { GooglePayButtonStrategy } from './strategies/googlepay';\nimport { MasterpassButtonStrategy } from './strategies/masterpass';\nimport { PaypalButtonStrategy } from './strategies/paypal';\n\nexport default function createCheckoutButtonRegistry(\n    store: CheckoutStore,\n    requestSender: RequestSender,\n    formPoster: FormPoster,\n    host?: string\n): Registry<CheckoutButtonStrategy, CheckoutButtonMethodType> {\n    const registry = new Registry<CheckoutButtonStrategy, CheckoutButtonMethodType>();\n    const scriptLoader = getScriptLoader();\n    const checkoutActionCreator = new CheckoutActionCreator(\n        new CheckoutRequestSender(requestSender),\n        new ConfigActionCreator(new ConfigRequestSender(requestSender))\n    );\n\n    registry.register(CheckoutButtonMethodType.BRAINTREE_PAYPAL, () =>\n        new BraintreePaypalButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new BraintreeSDKCreator(new BraintreeScriptLoader(scriptLoader)),\n            new PaypalScriptLoader(scriptLoader),\n            formPoster\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.BRAINTREE_PAYPAL_CREDIT, () =>\n        new BraintreePaypalButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new BraintreeSDKCreator(new BraintreeScriptLoader(scriptLoader)),\n            new PaypalScriptLoader(scriptLoader),\n            formPoster,\n            true\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.MASTERPASS, () =>\n        new MasterpassButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new MasterpassScriptLoader(scriptLoader)\n        ));\n\n    registry.register(CheckoutButtonMethodType.GOOGLEPAY_BRAINTREE, () =>\n        new GooglePayButtonStrategy(\n            store,\n            formPoster,\n            checkoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayBraintreeInitializer(\n                    new BraintreeSDKCreator(\n                        new BraintreeScriptLoader(scriptLoader)\n                    )\n                )\n            )\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.GOOGLEPAY_STRIPE, () =>\n        new GooglePayButtonStrategy(\n            store,\n            formPoster,\n            checkoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayStripeInitializer()\n            )\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.PAYPALEXPRESS, () =>\n        new PaypalButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new PaypalScriptLoader(scriptLoader),\n            formPoster,\n            host\n        )\n    );\n\n    return registry;\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport enum NotEmbeddableErrorType {\n    MissingContainer = 'missing_container',\n    MissingContent = 'missing_content',\n    UnknownError = 'unknown_error',\n}\n\n/**\n * Throw this error if we are not able to embed the checkout form as an iframe.\n * This can be due to the fact that the provided container ID is invalid, or the\n * checkout form fails to load inside the iframe. It can also be due to an\n * unknown reason.\n */\nexport default class NotEmbeddableError extends StandardError {\n    constructor(\n        message?: string,\n        public subtype: NotEmbeddableErrorType = NotEmbeddableErrorType.UnknownError\n    ) {\n        super(message || 'Unable to embed the checkout form.');\n\n        this.name = 'NotEmbeddableError';\n        this.type = 'not_embeddable';\n    }\n}\n","import { default as storage } from 'local-storage-fallback';\n\nexport default class BrowserStorage {\n    constructor(\n        private _namespace: string\n    ) {}\n\n    getItem<TValue = any>(key: string): TValue | null {\n        const rawValue = storage.getItem(this.withNamespace(key));\n\n        if (rawValue === null) {\n            return null;\n        }\n\n        try {\n            return JSON.parse(rawValue);\n        } catch (error) {\n            // Clean up invalid values\n            this.removeItem(this.withNamespace(key));\n\n            return null;\n        }\n    }\n\n    getItemOnce<TValue = any>(key: string): TValue | null {\n        const value = this.getItem(key);\n\n        this.removeItem(key);\n\n        return value;\n    }\n\n    setItem<TValue = any>(key: string, value: TValue): void {\n        return storage.setItem(this.withNamespace(key), JSON.stringify(value));\n    }\n\n    removeItem(key: string): void {\n        return storage.removeItem(this.withNamespace(key));\n    }\n\n    private withNamespace(key: string): string {\n        return `${this._namespace}.${key}`;\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { InternalErrorResponseBody } from '../../common/error';\nimport { RequestError } from '../../common/error/errors';\n\n/**\n * Throw this error we are not able to sign in a shopper because the provided\n * login token is invalid.\n */\nexport default class InvalidLoginTokenError extends RequestError {\n    constructor(response: Response<InternalErrorResponseBody>) {\n        super(response, { message: response.body.title });\n\n        this.name = 'InvalidLoginTokenError';\n        this.type = 'invalid_login_token';\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\n\nimport { IFrameComponent } from '../common/iframe';\nimport { BrowserStorage } from '../common/storage';\nimport { parseUrl } from '../common/url';\nimport { bindDecorator as bind } from '../common/utility';\n\nimport EmbeddedCheckoutError from './embedded-checkout-error';\nimport { EmbeddedCheckoutEventMap, EmbeddedCheckoutEventType } from './embedded-checkout-events';\nimport EmbeddedCheckoutOptions from './embedded-checkout-options';\nimport { InvalidLoginTokenError, NotEmbeddableError, NotEmbeddableErrorType } from './errors';\nimport { EmbeddedContentEvent, EmbeddedContentEventType } from './iframe-content/embedded-content-events';\nimport IframeEventListener from './iframe-event-listener';\nimport IframeEventPoster from './iframe-event-poster';\nimport LoadingIndicator from './loading-indicator';\nimport ResizableIframeCreator from './resizable-iframe-creator';\n\nconst CAN_RETRY_ALLOW_COOKIE = 'canRetryAllowCookie';\nconst IS_COOKIE_ALLOWED_KEY = 'isCookieAllowed';\n\n@bind\nexport default class EmbeddedCheckout {\n    private _iframe?: IFrameComponent;\n    private _isAttached: boolean;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _iframeCreator: ResizableIframeCreator,\n        private _messageListener: IframeEventListener<EmbeddedCheckoutEventMap>,\n        private _messagePoster: IframeEventPoster<EmbeddedContentEvent>,\n        private _loadingIndicator: LoadingIndicator,\n        private _requestSender: RequestSender,\n        private _storage: BrowserStorage,\n        private _location: Location,\n        private _options: EmbeddedCheckoutOptions\n    ) {\n        this._isAttached = false;\n\n        if (this._options.onComplete) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.CheckoutComplete, this._options.onComplete);\n        }\n\n        if (this._options.onError) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.CheckoutError, this._options.onError);\n        }\n\n        if (this._options.onLoad) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.CheckoutLoaded, this._options.onLoad);\n        }\n\n        if (this._options.onFrameLoad) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.FrameLoaded, this._options.onFrameLoad);\n        }\n\n        if (this._options.onSignOut) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.SignedOut, this._options.onSignOut);\n        }\n\n        this._messageListener.addListener(EmbeddedCheckoutEventType.FrameLoaded, () => this._configureStyles());\n    }\n\n    attach(): Promise<this> {\n        if (this._isAttached) {\n            return Promise.resolve(this);\n        }\n\n        this._isAttached = true;\n        this._messageListener.listen();\n        this._loadingIndicator.show(this._options.containerId);\n\n        return this._allowCookie()\n            .then(() => this._attemptLogin())\n            .then(url => this._iframeCreator.createFrame(url, this._options.containerId))\n            .then(iframe => {\n                this._iframe = iframe;\n\n                this._configureStyles();\n                this._loadingIndicator.hide();\n            })\n            .catch(error => {\n                this._isAttached = false;\n\n                return this._retryAllowCookie(error)\n                    .catch(() => {\n                        this._messageListener.trigger({\n                            type: EmbeddedCheckoutEventType.FrameError,\n                            payload: error,\n                        });\n\n                        this._loadingIndicator.hide();\n\n                        throw error;\n                    });\n            })\n            .then(() => this);\n    }\n\n    detach(): void {\n        if (!this._isAttached) {\n            return;\n        }\n\n        this._isAttached = false;\n        this._messageListener.stopListen();\n\n        if (this._iframe && this._iframe.parentNode) {\n            this._iframe.parentNode.removeChild(this._iframe);\n            this._iframe.iFrameResizer.close();\n        }\n    }\n\n    private _configureStyles(): void {\n        if (!this._iframe || !this._iframe.contentWindow || !this._options.styles) {\n            return;\n        }\n\n        this._messagePoster.setTarget(this._iframe.contentWindow);\n\n        this._messagePoster.post({\n            type: EmbeddedContentEventType.StyleConfigured,\n            payload: this._options.styles,\n        });\n    }\n\n    private _attemptLogin(): Promise<string> {\n        if (!/^\\/login\\/token/.test(parseUrl(this._options.url).pathname)) {\n            return Promise.resolve(this._options.url);\n        }\n\n        return this._requestSender.post(this._options.url)\n            .then(({ body: { redirectUrl } }) => redirectUrl)\n            .catch(response => Promise.reject(new InvalidLoginTokenError(response)));\n    }\n\n    /**\n     * This workaround is required for certain browsers (namely Safari) that\n     * prevent session cookies to be set for a third party website unless the\n     * user has recently visited such website. Therefore, before we attempt to\n     * login or set an active cart in the session, we need to first redirect the\n     * user to the domain of Embedded Checkout.\n     */\n    private _allowCookie(): Promise<void> {\n        if (this._storage.getItem(IS_COOKIE_ALLOWED_KEY)) {\n            // It could be possible that the flag is set to true but the browser\n            // has already removed the permission to store cookie. In that case,\n            // we should try to redirect the user again.\n            this._storage.setItem(CAN_RETRY_ALLOW_COOKIE, true);\n\n            return Promise.resolve();\n        }\n\n        this._storage.removeItem(CAN_RETRY_ALLOW_COOKIE);\n        this._storage.setItem(IS_COOKIE_ALLOWED_KEY, true);\n\n        const { origin } = parseUrl(this._options.url);\n        const redirectUrl = `${origin}/embedded-checkout/allow-cookie?returnUrl=${encodeURIComponent(this._location.href)}`;\n\n        document.body.style.visibility = 'hidden';\n        this._location.replace(redirectUrl);\n\n        return new Promise<never>(() => {});\n    }\n\n    private _retryAllowCookie(error: EmbeddedCheckoutError): Promise<void> {\n        const canRetry = (\n            this._storage.getItem(CAN_RETRY_ALLOW_COOKIE) &&\n            error instanceof NotEmbeddableError &&\n            error.subtype === NotEmbeddableErrorType.MissingContent\n        );\n\n        if (!canRetry) {\n            return Promise.reject();\n        }\n\n        this._storage.removeItem(CAN_RETRY_ALLOW_COOKIE);\n        this._storage.removeItem(IS_COOKIE_ALLOWED_KEY);\n\n        return this._allowCookie();\n    }\n}\n","import { LoadingIndicatorStyles } from './embedded-checkout-styles';\n\nconst DEFAULT_STYLES: LoadingIndicatorStyles = {\n    size: 70,\n    color: '#d9d9d9',\n    backgroundColor: '#ffffff',\n};\n\nconst ROTATION_ANIMATION = 'embedded-checkout-loading-indicator-rotation';\n\nexport default class LoadingIndicator {\n    private _container: HTMLElement;\n    private _indicator: HTMLElement;\n    private _styles: LoadingIndicatorStyles;\n\n    constructor(\n        options?: { styles?: LoadingIndicatorStyles }\n    ) {\n        this._styles = { ...DEFAULT_STYLES, ...options && options.styles };\n\n        this._defineAnimation();\n\n        this._container = this._buildContainer();\n        this._indicator = this._buildIndicator();\n\n        this._container.appendChild(this._indicator);\n    }\n\n    show(parentId?: string): void {\n        if (parentId) {\n            const parent = document.getElementById(parentId);\n\n            if (!parent) {\n                throw new Error('Unable to attach the loading indicator because the parent ID is not valid.');\n            }\n\n            parent.appendChild(this._container);\n        }\n\n        this._container.style.visibility = 'visible';\n        this._container.style.opacity = '1';\n    }\n\n    hide(): void {\n        const handleTransitionEnd = () => {\n            this._container.style.visibility = 'hidden';\n\n            this._container.removeEventListener('transitionend', handleTransitionEnd);\n        };\n\n        this._container.addEventListener('transitionend', handleTransitionEnd);\n\n        this._container.style.opacity = '0';\n    }\n\n    private _buildContainer(): HTMLElement {\n        const container = document.createElement('div');\n\n        container.style.display = 'block';\n        container.style.bottom = '0';\n        container.style.left = '0';\n        container.style.height = '100%';\n        container.style.width = '100%';\n        container.style.position = 'absolute';\n        container.style.right = '0';\n        container.style.top = '0';\n        container.style.transition = 'all 250ms ease-out';\n        container.style.opacity = '0';\n\n        return container;\n    }\n\n    private _buildIndicator(): HTMLElement {\n        const indicator = document.createElement('div');\n\n        indicator.style.display = 'block';\n        indicator.style.width = `${this._styles.size}px`;\n        indicator.style.height = `${this._styles.size}px`;\n        indicator.style.borderRadius = `${this._styles.size}px`;\n        indicator.style.border = 'solid 1px';\n        indicator.style.borderColor = `${this._styles.backgroundColor} ${this._styles.backgroundColor} ${this._styles.color} ${this._styles.color}`;\n        indicator.style.margin = '0 auto';\n        indicator.style.position = 'absolute';\n        indicator.style.left = '0';\n        indicator.style.right = '0';\n        indicator.style.top = '50%';\n        indicator.style.transform = 'translateY(-50%) rotate(0deg)';\n        indicator.style.transformStyle = 'preserve-3d';\n        indicator.style.animation = `${ROTATION_ANIMATION} 500ms infinite cubic-bezier(0.69, 0.31, 0.56, 0.83)`;\n\n        return indicator;\n    }\n\n    private _defineAnimation(): void {\n        // In order to define CSS animation, we need to insert a stylesheet into the host frame.\n        // We only have to do it once.\n        if (document.getElementById(ROTATION_ANIMATION)) {\n            return;\n        }\n\n        const style = document.createElement('style');\n\n        style.id = ROTATION_ANIMATION;\n\n        document.head.appendChild(style);\n\n        if (style.sheet instanceof CSSStyleSheet) {\n            // We need to provide the 2nd parameter for IE11, even though it is\n            // 0 by default for all other browsers.\n            style.sheet.insertRule(`\n                @keyframes ${ROTATION_ANIMATION} {\n                    0% { transform: translateY(-50%) rotate(0deg); }\n                    100% { transform: translateY(-50%) rotate(360deg); }\n                }\n            `, 0);\n        }\n    }\n}\n","import { iframeResizer, IFrameComponent } from '../common/iframe';\nimport { parseUrl } from '../common/url';\n\nimport { EmbeddedCheckoutEventType } from './embedded-checkout-events';\nimport { NotEmbeddableError, NotEmbeddableErrorType } from './errors';\nimport isIframeEvent from './is-iframe-event';\n\nexport default class ResizableIframeCreator {\n    constructor(\n        private _options?: { timeout: number }\n    ) {}\n\n    createFrame(src: string, containerId: string): Promise<IFrameComponent> {\n        const container = document.getElementById(containerId);\n        const { timeout = 60000 } = this._options || {};\n\n        if (!container) {\n            throw new NotEmbeddableError(\n                'Unable to embed the iframe because the container element could not be found.',\n                NotEmbeddableErrorType.MissingContainer\n            );\n        }\n\n        const iframe = document.createElement('iframe');\n\n        iframe.src = src;\n        iframe.style.border = 'none';\n        iframe.style.display = 'none';\n        iframe.style.width = '100%';\n        iframe.allowPaymentRequest = true;\n\n        container.appendChild(iframe);\n\n        return this._toResizableFrame(iframe, timeout)\n            .catch(error => {\n                container.removeChild(iframe);\n\n                throw error;\n            });\n    }\n\n    private _toResizableFrame(iframe: HTMLIFrameElement, timeoutInterval: number): Promise<IFrameComponent> {\n        // Can't simply listen to `load` event because it always gets triggered even if there's an error.\n        // Instead, listen to the `load` inside the iframe and let the parent frame know when it happens.\n        return new Promise((resolve, reject) => {\n            const timeout = window.setTimeout(() => {\n                reject(new NotEmbeddableError('Unable to embed the iframe because the content could not be loaded.'));\n            }, timeoutInterval);\n\n            const handleMessage = (event: MessageEvent) => {\n                if (event.origin !== parseUrl(iframe.src).origin) {\n                    return;\n                }\n\n                if (isIframeEvent(event.data, EmbeddedCheckoutEventType.FrameError)) {\n                    teardown();\n                    reject(new NotEmbeddableError(event.data.payload.message, NotEmbeddableErrorType.MissingContent));\n                }\n\n                if (isIframeEvent(event.data, EmbeddedCheckoutEventType.FrameLoaded)) {\n                    iframe.style.display = '';\n\n                    const contentId = event.data.payload && event.data.payload.contentId;\n                    const iframes = iframeResizer({\n                        scrolling: false,\n                        sizeWidth: false,\n                        heightCalculationMethod: contentId ? 'taggedElement' : 'lowestElement',\n                    }, iframe);\n\n                    teardown();\n                    resolve(iframes[iframes.length - 1]);\n                }\n            };\n\n            const teardown = () => {\n                window.removeEventListener('message', handleMessage);\n                window.clearTimeout(timeout);\n            };\n\n            window.addEventListener('message', handleMessage);\n        });\n    }\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\n\nimport { BrowserStorage } from '../common/storage';\nimport { parseUrl } from '../common/url';\n\nimport EmbeddedCheckout from './embedded-checkout';\nimport { EmbeddedCheckoutEventMap } from './embedded-checkout-events';\nimport EmbeddedCheckoutOptions from './embedded-checkout-options';\nimport { EmbeddedContentEvent } from './iframe-content/embedded-content-events';\nimport IframeEventListener from './iframe-event-listener';\nimport IframeEventPoster from './iframe-event-poster';\nimport LoadingIndicator from './loading-indicator';\nimport ResizableIframeCreator from './resizable-iframe-creator';\n\nconst STORAGE_PREFIX = 'BigCommerce.EmbeddedCheckout';\n\n/**\n * Embed the checkout form in an iframe.\n *\n * @remarks\n * Once the iframe is embedded, it will automatically resize according to the\n * size of the checkout form. It will also notify the parent window when certain\n * events have occurred. i.e.: when the form is loaded and ready to be used.\n *\n * ```js\n * embedCheckout({\n *     url: 'https://checkout/url',\n *     containerId: 'container-id',\n * });\n * ```\n *\n * @param options - Options for embedding the checkout form.\n * @returns A promise that resolves to an instance of `EmbeddedCheckout`.\n */\nexport default function embedCheckout(options: EmbeddedCheckoutOptions): Promise<EmbeddedCheckout> {\n    const origin = parseUrl(options.url).origin;\n    const embeddedCheckout = new EmbeddedCheckout(\n        new ResizableIframeCreator(),\n        new IframeEventListener<EmbeddedCheckoutEventMap>(origin),\n        new IframeEventPoster<EmbeddedContentEvent>(origin),\n        new LoadingIndicator({ styles: options.styles && options.styles.loadingIndicator }),\n        createRequestSender(),\n        new BrowserStorage(STORAGE_PREFIX),\n        window.location,\n        options\n    );\n\n    return embeddedCheckout.attach();\n}\n","export interface RootCacheKeyMap {\n    maps: ChildCacheKeyMap[];\n}\n\nexport interface IntermediateCacheKeyMap {\n    maps: ChildCacheKeyMap[];\n    parentMap: RootCacheKeyMap | IntermediateCacheKeyMap;\n    usedCount: number;\n    value: any;\n}\n\nexport interface TerminalCacheKeyMap extends IntermediateCacheKeyMap {\n    cacheKey: string;\n}\n\nexport type ChildCacheKeyMap = IntermediateCacheKeyMap | TerminalCacheKeyMap;\n\nexport function isTerminalCacheKeyMap(map: ChildCacheKeyMap): map is TerminalCacheKeyMap {\n    return map.hasOwnProperty('cacheKey');\n}\n\nexport function isRootCacheKeyMap(map: RootCacheKeyMap | ChildCacheKeyMap): map is RootCacheKeyMap {\n    return map.hasOwnProperty('parentMap');\n}\n","import { noop } from 'lodash';\nimport * as shallowEqual from 'shallowequal';\n\nimport { isRootCacheKeyMap, isTerminalCacheKeyMap, ChildCacheKeyMap, IntermediateCacheKeyMap, RootCacheKeyMap, TerminalCacheKeyMap } from './cache-key-maps';\n\nexport interface CacheKeyResolverOptions {\n    maxSize?: number;\n    onExpire?(key: string): void;\n    isEqual?(valueA: any, valueB: any): boolean;\n}\n\ninterface ResolveResult {\n    index: number;\n    parentMap: RootCacheKeyMap | IntermediateCacheKeyMap;\n    map?: TerminalCacheKeyMap;\n}\n\nexport default class CacheKeyResolver {\n    private _lastId = 0;\n    private _map: RootCacheKeyMap = { maps: [] };\n    private _usedMaps: TerminalCacheKeyMap[] = [];\n    private _options: Required<CacheKeyResolverOptions>;\n\n    constructor(options?: CacheKeyResolverOptions) {\n        this._options = {\n            maxSize: 0,\n            isEqual: shallowEqual,\n            onExpire: noop,\n            ...options,\n        };\n    }\n\n    getKey(...args: any[]): string {\n        const result = this._resolveMap(...args);\n        const { index, parentMap } = result;\n        let { map } = result;\n\n        if (map && map.cacheKey) {\n            map.usedCount++;\n        } else {\n            map = this._generateMap(parentMap, args.slice(index));\n        }\n\n        // Keep track of the least used map so we can remove it if the size of\n        // the stack exceeds the maximum size.\n        this._removeLeastUsedMap(map);\n\n        return map.cacheKey;\n    }\n\n    getUsedCount(...args: any[]): number {\n        const { map } = this._resolveMap(...args);\n\n        return map ? map.usedCount : 0;\n    }\n\n    private _resolveMap(...args: any[]): ResolveResult {\n        let index = 0;\n        let parentMap = this._map;\n\n        // Traverse the tree to find the linked list of maps that match the\n        // arguments of the call. Each intermediate or terminal map contains a\n        // value that could be used to match with the arguments. The last map in\n        // the list (the terminal) should contain a cache key. If it can does\n        // not exist, we will return a falsy value so that the caller could\n        // handle and generate a new cache key.\n        while (parentMap.maps.length) {\n            let isMatched = false;\n\n            for (let mapIndex = 0; mapIndex < parentMap.maps.length; mapIndex++) {\n                const map = parentMap.maps[mapIndex];\n\n                if (!this._options.isEqual(map.value, args[index])) {\n                    continue;\n                }\n\n                // Move the most recently used map to the top of the stack for\n                // quicker access\n                parentMap.maps.unshift(...parentMap.maps.splice(mapIndex, 1));\n\n                if ((args.length === 0 || index === args.length - 1) && isTerminalCacheKeyMap(map)) {\n                    return { index, map, parentMap };\n                }\n\n                isMatched = true;\n                parentMap = map;\n                index++;\n\n                break;\n            }\n\n            if (!isMatched) {\n                break;\n            }\n        }\n\n        return { index, parentMap };\n    }\n\n    private _generateMap(parent: RootCacheKeyMap | IntermediateCacheKeyMap, args: any[]): TerminalCacheKeyMap {\n        let index = 0;\n        let parentMap = parent;\n        let map: IntermediateCacheKeyMap;\n\n        do {\n            map = {\n                maps: [],\n                parentMap,\n                usedCount: 1,\n                value: args[index],\n            };\n\n            // Continue to build the tree of maps so that it could be resolved\n            // next time when the function is called with the same set of\n            // arguments.\n            parentMap.maps.unshift(map);\n\n            parentMap = map;\n            index++;\n        } while (index < args.length);\n\n        const terminalMap = map as TerminalCacheKeyMap;\n\n        terminalMap.cacheKey = `${++this._lastId}`;\n\n        return terminalMap;\n    }\n\n    private _removeLeastUsedMap(recentlyUsedMap: TerminalCacheKeyMap): void {\n        if (!this._options.maxSize) {\n            return;\n        }\n\n        const index = this._usedMaps.indexOf(recentlyUsedMap);\n\n        this._usedMaps.splice(\n            index === -1 ? 0 : index,\n            index === -1 ? 0 : 1,\n            recentlyUsedMap\n        );\n\n        if (this._usedMaps.length <= this._options.maxSize) {\n            return;\n        }\n\n        const map = this._usedMaps.pop();\n\n        if (!map) {\n            return;\n        }\n\n        this._removeMap(map);\n        this._options.onExpire(map.cacheKey);\n    }\n\n    private _removeMap(map: ChildCacheKeyMap): void {\n        if (!map.parentMap) {\n            return;\n        }\n\n        map.parentMap.maps.splice(map.parentMap.maps.indexOf(map), 1);\n\n        if (isRootCacheKeyMap(map.parentMap)) {\n            return;\n        }\n\n        this._removeMap(map.parentMap);\n    }\n}\n","module.exports = require(\"@bigcommerce/bigpay-client\");","module.exports = require(\"messageformat\");","import { Response } from '@bigcommerce/request-sender';\n\nimport RequestError from './request-error';\n\n/**\n * Throw this error if a request fails to complete within its required timeframe\n * because of a network issue.\n */\nexport default class TimeoutError extends RequestError<{}> {\n    constructor(response?: Response) {\n        super(response, {\n            message: 'The request has timed out or aborted.',\n        });\n\n        this.name = 'TimeoutError';\n        this.type = 'timeout';\n    }\n}\n","import { createSelector as defaultSelectorCreator } from 'reselect';\n\nimport withMemoizedCombiner from './with-memoized-combiner';\n\n/**\n * This is a decorated version of Reselect's default `createSelector` function.\n * If the return value of the combiner function is a function, it will create a\n * memorized version of that function and return it instead.\n */\nexport default withMemoizedCombiner(defaultSelectorCreator);\n","import { uniq } from 'lodash';\n\nexport default function joinIncludes(includes: string[]): string {\n    return uniq(includes).join(',');\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { cachableAction, ActionOptions } from '../common/data-store';\nimport { RequestOptions } from '../common/http-request';\n\nimport { ConfigRequestSender } from '.';\nimport { ConfigActionType, LoadConfigAction } from './config-actions';\n\nexport default class ConfigActionCreator {\n    constructor(\n        private _configRequestSender: ConfigRequestSender\n    ) {}\n\n    @cachableAction\n    loadConfig(options?: RequestOptions & ActionOptions): Observable<LoadConfigAction> {\n        return Observable.create((observer: Observer<LoadConfigAction>) => {\n            observer.next(createAction(ConfigActionType.LoadConfigRequested));\n\n            this._configRequestSender.loadConfig(options)\n                .then(response => {\n                    observer.next(createAction(ConfigActionType.LoadConfigSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConfigActionType.LoadConfigFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, INTERNAL_USE_ONLY, RequestOptions } from '../common/http-request';\n\nimport Config from './config';\n\nexport default class ConfigRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadConfig({ timeout }: RequestOptions = {}): Promise<Response<Config>> {\n        const url = '/api/storefront/checkout-settings';\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { AddressRequestBody } from '../address';\nimport { Checkout } from '../checkout';\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nimport { BillingAddressUpdateRequestBody } from './billing-address';\n\nconst DEFAULT_PARAMS = {\n    include: [\n        'cart.lineItems.physicalItems.options',\n        'cart.lineItems.digitalItems.options',\n        'customer',\n        'promotions.banners',\n    ].join(','),\n};\n\nexport default class BillingAddressRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    createAddress(checkoutId: string, address: Partial<AddressRequestBody>, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/billing-address`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, { body: address, params: DEFAULT_PARAMS, headers, timeout });\n    }\n\n    updateAddress(checkoutId: string, address: Partial<BillingAddressUpdateRequestBody>, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const { id, ...body } = address;\n        const url = `/api/storefront/checkouts/${checkoutId}/billing-address/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.put(url, { params: DEFAULT_PARAMS, body, headers, timeout });\n    }\n}\n","import { InvalidArgumentError } from '../error/errors';\n\nexport default class Registry<T, K extends string = string> {\n    private _factories: { [key: string]: Factory<T> };\n    private _instances: { [key: string]: T };\n    private _options: RegistryOptions;\n\n    constructor(options?: RegistryOptions) {\n        this._factories = {};\n        this._instances = {};\n        this._options = { defaultToken: 'default', ...options };\n    }\n\n    get(token?: K, cacheToken?: string): T {\n        try {\n            return this._getInstance(\n                token || this._options.defaultToken,\n                cacheToken || token || this._options.defaultToken\n            );\n        } catch (error) {\n            return this._getInstance(\n                this._options.defaultToken,\n                cacheToken || this._options.defaultToken\n            );\n        }\n    }\n\n    register(token: K, factory: Factory<T>): void {\n        if (this._hasFactory(token)) {\n            throw new InvalidArgumentError(`'${token}' is already registered.`);\n        }\n\n        this._factories[token] = factory;\n    }\n\n    protected _hasFactory(token: string): boolean {\n        return !!this._factories[token];\n    }\n\n    private _hasInstance(token: string): boolean {\n        return !!this._instances[token];\n    }\n\n    private _getInstance(token: string, cacheToken: string): T {\n        if (!this._hasInstance(cacheToken)) {\n            const factory = this._factories[token];\n\n            if (!factory) {\n                throw new InvalidArgumentError(`'${token}' is not registered.`);\n            }\n\n            this._instances[cacheToken] = factory();\n        }\n\n        return this._instances[cacheToken];\n    }\n}\n\nexport type Factory<T> = () => T;\n\nexport interface RegistryOptions {\n    defaultToken: string;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { Masterpass, MasterpassHostWindow } from './masterpass';\n\nexport default class MasterpassScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        public _window: MasterpassHostWindow = window\n    ) {}\n\n    load(testMode?: boolean): Promise<Masterpass> {\n        return this._scriptLoader\n            .loadScript(`//${testMode ? 'sandbox.' : ''}masterpass.com/integration/merchant.js`)\n            .then(() => {\n                if (!this._window.masterpass) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.masterpass;\n            });\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * Throw this error if we are unable to synchronize the checkout details of a\n * shopper with a hosted / remote checkout provider (i.e.: Amazon).\n */\nexport default class RemoteCheckoutSynchronizationError extends StandardError {\n    constructor(\n        public error?: Error\n    ) {\n        super('Unable to synchronize your checkout details with a third party provider. Please try again later.');\n\n        this.name = 'RemoteCheckoutSynchronizationError';\n        this.type = 'remote_checkout_synchronization';\n    }\n}\n","import { round } from 'lodash';\n\nimport { Checkout } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport PaymentMethod from '../../payment-method';\nimport { BraintreeSDKCreator, GooglePayBraintreeSDK } from '../braintree';\n\nimport {\n    GooglePaymentData,\n    GooglePayInitializer,\n    GooglePayPaymentDataRequestV2,\n    TokenizePayload\n} from './googlepay';\nimport { GooglePayBraintreeDataRequest, GooglePayBraintreePaymentDataRequestV1 } from './googlepay-braintree';\n\nexport default class GooglePayBraintreeInitializer implements GooglePayInitializer {\n    private _googlePaymentInstance!: GooglePayBraintreeSDK;\n\n    constructor(\n        private _braintreeSDKCreator: BraintreeSDKCreator\n    ) {}\n\n    initialize(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        if (!paymentMethod.clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._braintreeSDKCreator.initialize(paymentMethod.clientToken);\n\n        return this._braintreeSDKCreator.getGooglePaymentComponent()\n            .then(googleBraintreePaymentInstance => {\n                this._googlePaymentInstance = googleBraintreePaymentInstance;\n\n                return this._createGooglePayPayload(\n                    checkout,\n                    paymentMethod.initializationData,\n                    hasShippingAddress\n                );\n            });\n    }\n\n    teardown(): Promise<void> {\n        return this._braintreeSDKCreator.teardown();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): TokenizePayload {\n        const payload = JSON.parse(paymentData.paymentMethodData.tokenizationData.token).androidPayCards[0];\n\n        return {\n            nonce: payload.nonce,\n            type: payload.type,\n            description: payload.description,\n            details: {\n                cardType: payload.details.cardType,\n                lastFour: payload.details.lastFour,\n                lastTwo: payload.details.lastTwo,\n            },\n            binData: payload.binData,\n        };\n    }\n\n    private _createGooglePayPayload(\n        checkout: Checkout,\n        initializationData: any,\n        hasShippingAddress: boolean\n    ): GooglePayPaymentDataRequestV2 {\n        if (!initializationData.platformToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const googlePayBraintreePaymentDataRequest: GooglePayBraintreeDataRequest = {\n            merchantInfo: {\n                authJwt: initializationData.platformToken,\n                merchantName: initializationData.googleMerchantName,\n                merchantId: initializationData.googleMerchantId,\n            },\n            transactionInfo: {\n                currencyCode: checkout.cart.currency.code,\n                totalPriceStatus: 'FINAL',\n                totalPrice: round(checkout.outstandingBalance, 2).toFixed(2),\n            },\n            cardRequirements: {\n                billingAddressRequired: true,\n                billingAddressFormat: 'FULL',\n            },\n            shippingAddressRequired: !hasShippingAddress,\n            emailRequired: true,\n            phoneNumberRequired: true,\n        };\n\n        return this._mapGooglePayBraintreeDataRequestToGooglePayDataRequestV2(\n            this._googlePaymentInstance.createPaymentDataRequest(googlePayBraintreePaymentDataRequest)\n        );\n    }\n\n    private _mapGooglePayBraintreeDataRequestToGooglePayDataRequestV2(googlePayBraintreeDataRequestV1: GooglePayBraintreePaymentDataRequestV1): GooglePayPaymentDataRequestV2 {\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt: googlePayBraintreeDataRequestV1.merchantInfo.authJwt,\n                merchantId: googlePayBraintreeDataRequestV1.merchantInfo.merchantId,\n                merchantName: googlePayBraintreeDataRequestV1.merchantInfo.merchantName,\n            },\n            allowedPaymentMethods: [{\n                type: 'CARD',\n                parameters: {\n                    allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                    allowedCardNetworks: googlePayBraintreeDataRequestV1.cardRequirements.allowedCardNetworks,\n                    billingAddressRequired: true,\n                    billingAddressParameters: {\n                        format: 'FULL',\n                        phoneNumberRequired: true,\n                    },\n                },\n                tokenizationSpecification: {\n                    type: 'PAYMENT_GATEWAY',\n                    parameters: {\n                        gateway: 'braintree',\n                        'braintree:apiVersion': 'v1',\n                        'braintree:authorizationFingerprint': googlePayBraintreeDataRequestV1.paymentMethodTokenizationParameters.parameters['braintree:authorizationFingerprint'],\n                        'braintree:merchantId': googlePayBraintreeDataRequestV1.paymentMethodTokenizationParameters.parameters['braintree:merchantId'],\n                        'braintree:sdkVersion': googlePayBraintreeDataRequestV1.paymentMethodTokenizationParameters.parameters['braintree:sdkVersion'],\n                    },\n                },\n            }],\n            transactionInfo: googlePayBraintreeDataRequestV1.transactionInfo,\n            emailRequired: true,\n            shippingAddressRequired: googlePayBraintreeDataRequestV1.shippingAddressRequired,\n            shippingAddressParameters: {\n                phoneNumberRequired: googlePayBraintreeDataRequestV1.phoneNumberRequired,\n            },\n        };\n    }\n}\n","import { round } from 'lodash';\n\nimport { Checkout } from '../../../checkout';\nimport { InvalidArgumentError } from '../../../common/error/errors';\nimport PaymentMethod from '../../payment-method';\n\nimport {\n    GooglePaymentData,\n    GooglePayInitializer,\n    GooglePayPaymentDataRequestV2,\n    TokenizePayload\n} from './googlepay';\n\nexport default class GooglePayStripeInitializer implements GooglePayInitializer {\n    initialize(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        return Promise.resolve(this._mapGooglePayStripeDataRequestToGooglePayDataRequestV2(\n            checkout,\n            paymentMethod.initializationData,\n            hasShippingAddress\n        ));\n    }\n\n    teardown(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): TokenizePayload {\n        try {\n            const payload = JSON.parse(paymentData.paymentMethodData.tokenizationData.token);\n\n            return {\n                nonce: payload.id,\n                type: payload.type,\n                details: {\n                    cardType: payload.card.brand,\n                    lastFour: payload.card.last4,\n                },\n            };\n        } catch (err) {\n            throw new InvalidArgumentError('Unable to parse response from Google Pay.');\n        }\n    }\n\n    private _mapGooglePayStripeDataRequestToGooglePayDataRequestV2(\n        checkout: Checkout,\n        initializationData: any,\n        hasShippingAddress: boolean\n    ): GooglePayPaymentDataRequestV2 {\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt: initializationData.platformToken,\n                merchantId: initializationData.googleMerchantId,\n                merchantName: initializationData.googleMerchantName,\n            },\n            allowedPaymentMethods: [{\n                type: 'CARD',\n                parameters: {\n                    allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                    allowedCardNetworks: ['AMEX', 'DISCOVER', 'JCB', 'MASTERCARD', 'VISA'],\n                    billingAddressRequired: true,\n                    billingAddressParameters: {\n                        format: 'FULL',\n                        phoneNumberRequired: true,\n                    },\n                },\n                tokenizationSpecification: {\n                    type: 'PAYMENT_GATEWAY',\n                    parameters: {\n                        gateway: 'stripe',\n                        'stripe:version': initializationData.stripeVersion,\n                        'stripe:publishableKey': initializationData.stripePublishableKey,\n                    },\n                },\n            }],\n            transactionInfo: {\n                currencyCode: checkout.cart.currency.code,\n                totalPriceStatus: 'FINAL',\n                totalPrice: round(checkout.outstandingBalance, 2).toFixed(2),\n            },\n            emailRequired: true,\n            shippingAddressRequired: !hasShippingAddress,\n            shippingAddressParameters: {\n                phoneNumberRequired: true,\n            },\n        };\n    }\n}\n","import { mapToInternalAddress } from '../address';\nimport { BillingAddress } from '../billing';\n\nimport { Customer } from '.';\nimport InternalCustomer from './internal-customer';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalCustomer(customer: Customer, billingAddress: BillingAddress): InternalCustomer {\n    const firstName = customer.firstName || billingAddress.firstName || '';\n    const lastName = customer.lastName || billingAddress.lastName || '';\n\n    return {\n        addresses: (customer.addresses || []).map(address => mapToInternalAddress(address)),\n        customerId: customer.id,\n        isGuest: customer.isGuest,\n        storeCredit: customer.storeCredit,\n        email: customer.email || billingAddress.email || '',\n        firstName,\n        lastName,\n        name: customer.fullName || [firstName, lastName].join(' '),\n        customerGroupName: customer.customerGroup && customer.customerGroup.name,\n    };\n}\n","import GiftCertificate from './gift-certificate';\nimport InternalGiftCertificate from './internal-gift-certificate';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalGiftCertificate(giftCertificate: GiftCertificate): InternalGiftCertificate {\n    return {\n        code: giftCertificate.code,\n        discountedAmount: giftCertificate.used,\n        remainingBalance: giftCertificate.remaining,\n        giftCertificate: {\n            balance: giftCertificate.balance,\n            code: giftCertificate.code,\n            purchaseDate: giftCertificate.purchaseDate,\n        },\n    };\n}\n","import { filter, find, keyBy, reduce } from 'lodash';\n\nimport { mapToInternalLineItems, LineItem } from '../cart';\nimport { Checkout } from '../checkout';\nimport { AmountTransformer } from '../common/utility';\nimport { mapToInternalCoupon } from '../coupon';\nimport { HOSTED } from '../payment';\n\nimport InternalOrder, { InternalGiftCertificateList, InternalIncompleteOrder, InternalOrderPayment, InternalSocialDataList } from './internal-order';\nimport Order, { GatewayOrderPayment, GiftCertificateOrderPayment, OrderPayment, OrderPayments } from './order';\nimport { OrderMetaState } from './order-state';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalOrder(order: Order, orderMeta: OrderMetaState = {}): InternalOrder {\n    const decimalPlaces = order.currency.decimalPlaces;\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: order.orderId,\n        items: mapToInternalLineItems(order.lineItems, order.currency.decimalPlaces, 'productId'),\n        orderId: order.orderId,\n        currency: order.currency.code,\n        customerCanBeCreated: order.customerCanBeCreated,\n        payment: mapToInternalOrderPayment(order.payments, orderMeta.payment),\n        subtotal: {\n            amount: order.baseAmount,\n            integerAmount: amountTransformer.toInteger(order.baseAmount),\n        },\n        coupon: {\n            discountedAmount: reduce(order.coupons, (sum, coupon) => {\n                return sum + coupon.discountedAmount;\n            }, 0),\n            coupons: order.coupons.map(mapToInternalCoupon),\n        },\n        discount: {\n            amount: order.discountAmount,\n            integerAmount: amountTransformer.toInteger(order.discountAmount),\n        },\n        token: orderMeta.orderToken,\n        callbackUrl: orderMeta.callbackUrl,\n        discountNotifications: [],\n        giftCertificate: mapToGiftCertificates(order.payments),\n        socialData: mapToInternalSocialDataList(order),\n        status: order.status,\n        hasDigitalItems: order.hasDigitalItems,\n        isDownloadable: order.isDownloadable,\n        isComplete: order.isComplete,\n        shipping: {\n            amount: order.shippingCostTotal,\n            integerAmount: amountTransformer.toInteger(order.shippingCostTotal),\n            amountBeforeDiscount: order.shippingCostBeforeDiscount,\n            integerAmountBeforeDiscount: amountTransformer.toInteger(order.shippingCostBeforeDiscount),\n        },\n        storeCredit: {\n            amount: mapToStoreCredit(order.payments),\n        },\n        taxes: order.taxes,\n        taxTotal: {\n            amount: order.taxTotal,\n            integerAmount: amountTransformer.toInteger(order.taxTotal),\n        },\n        handling: {\n            amount: order.handlingCostTotal,\n            integerAmount: amountTransformer.toInteger(order.handlingCostTotal),\n        },\n        grandTotal: {\n            amount: order.orderAmount,\n            integerAmount: order.orderAmountAsInteger,\n        },\n    };\n}\n\nexport function mapToInternalIncompleteOrder(checkout: Checkout): InternalIncompleteOrder {\n    const payment = find(checkout.payments, { providerType: HOSTED });\n\n    return {\n        orderId: null,\n        isComplete: false,\n        payment: !payment ? {} : {\n            id: payment.providerId,\n            gateway: payment.gatewayId,\n            status: mapToInternalPaymentStatus(payment.detail.step),\n        },\n    };\n}\n\nfunction mapToInternalPaymentStatus(status: string): string {\n    return `PAYMENT_STATUS_${status}`;\n}\n\nfunction mapToStoreCredit(payments?: OrderPayments): number {\n    const item = find(payments, { providerId: 'storecredit' });\n\n    return item ? item.amount : 0;\n}\n\nfunction mapToGiftCertificates(payments?: OrderPayments): InternalGiftCertificateList {\n    const items = filter(payments, { providerId: 'giftcertificate' }) as GiftCertificateOrderPayment[];\n\n    return {\n        totalDiscountedAmount: reduce(items, (sum, item) => item.amount + sum, 0),\n        appliedGiftCertificates: keyBy(items.map(item => ({\n            code: item.detail.code,\n            discountedAmount: item.amount,\n            remainingBalance: item.detail.remaining,\n            giftCertificate: {\n                balance: item.amount + item.detail.remaining,\n                code: item.detail.code,\n                purchaseDate: '',\n            },\n        })), 'code'),\n    };\n}\n\nfunction mapToInternalOrderPayment(payments?: OrderPayments, payment: InternalOrderPayment = {}): InternalOrderPayment {\n    const item = find(payments, isDefaultOrderPayment) as GatewayOrderPayment;\n\n    if (!item) {\n        return {};\n    }\n\n    return {\n        id: item.providerId,\n        status: mapToInternalPaymentStatus(item.detail.step),\n        helpText: item.detail.instructions,\n        returnUrl: payment.returnUrl,\n    };\n}\n\nfunction isDefaultOrderPayment(payment: OrderPayment): payment is GatewayOrderPayment {\n    return payment.providerId !== 'giftcertificate' && payment.providerId !== 'storecredit';\n}\n\nfunction mapToInternalSocialDataList(order: Order): { [itemId: string]: InternalSocialDataList } | undefined {\n    const socialDataObject: { [itemId: string]: InternalSocialDataList } = {};\n    const items = [\n        ...order.lineItems.physicalItems,\n        ...order.lineItems.digitalItems,\n    ];\n\n    items.forEach(item => {\n        socialDataObject[item.id] = mapToInternalSocialData(item);\n    });\n\n    return socialDataObject;\n}\n\nfunction mapToInternalSocialData(lineItem: LineItem): InternalSocialDataList {\n    const codes = ['fb', 'tw', 'gp'];\n\n    return codes.reduce((socialData, code) => {\n        const item = lineItem.socialMedia && find(lineItem.socialMedia, item => item.code === code);\n\n        if (!item) {\n            return socialData;\n        }\n\n        socialData[code] = {\n            name: lineItem.name,\n            description: lineItem.name,\n            image: lineItem.imageUrl,\n            url: item.link,\n            shareText: item.text,\n            sharingLink: item.link,\n            channelName: item.channel,\n            channelCode: item.code,\n        };\n\n        return socialData;\n    }, {} as InternalSocialDataList);\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { PaypalHostWindow, PaypalSDK } from './paypal-sdk';\n\nexport default class PaypalScriptLoader {\n    private _window: PaypalHostWindow;\n\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    loadPaypal(): Promise<PaypalSDK> {\n        return this._scriptLoader\n            .loadScript('//www.paypalobjects.com/api/checkout.min.js')\n            .then(() => {\n                if (!this._window.paypal) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.paypal;\n            });\n    }\n}\n","import { IFrameComponent, IFrameOptions } from 'iframe-resizer';\n\nexport {\n    HeightCalculationMethod,\n    IFrameComponent,\n    IFrameMessageData,\n    IFrameObject,\n    IFrameOptions,\n    IFramePage,\n    IFramePageOptions,\n    IFrameResizedData,\n    IFrameScrollData,\n    PageInfo,\n    WidthCalculationMethod,\n} from 'iframe-resizer';\n\n// The reason why we are wrapping the original `iframeResizer` function imported\n// from the package is because the package sets up event listeners (window\n// resize etc...) as soon as the package is imported. Therefore, to defer the\n// side effect from happening until the function is actually being used, we are\n// importing the package inside this function. To minimise the chance of\n// importing the original package inadvertently, we are also re-exporting all of\n// its public interfaces. The re-exports do not cause any side effect because\n// they are plain TypeScript interfaces; meaning they are only used for type\n// checks rather than for code output.\nexport function iframeResizer(options: IFrameOptions, target: string | HTMLElement): IFrameComponent[] {\n    const { iframeResizer: originalIframeResizer } = require('iframe-resizer');\n\n    return originalIframeResizer(options, target);\n}\n\n// We also need to wrap the original `iframeResizer.contentWindow` because\n// similarly the package sets up event listeners as soon as the package gets\n// imported. Another reason is that if it is imported at the top level using a\n// regular import statement, it will be stripped out by Webpack as it is\n// considered as \"unused\", unless we explicitly mark it as a package that\n// produces side effects.\nexport function setupContentWindowForIframeResizer(): void {\n    require('iframe-resizer/js/iframeResizer.contentWindow');\n}\n","import { ClearErrorAction, ErrorActionType } from './error-actions';\n\nexport default class ErrorActionCreator {\n    clearError(error: Error): ClearErrorAction {\n        return {\n            type: ErrorActionType.ClearError,\n            payload: error,\n        };\n    }\n}\n","export default function getEnvironment(): string {\n    try {\n        return process.env.NODE_ENV || 'development';\n    } catch (e) {\n        return 'development';\n    }\n}\n","import Logger from './logger';\n\nexport default class ConsoleLogger implements Logger {\n    constructor(\n        private _console?: Console\n    ) {}\n\n    log(...messages: any[]): void {\n        this._logToConsole('log', ...messages);\n    }\n\n    info(...messages: any[]): void {\n        this._logToConsole('info', ...messages);\n    }\n\n    warn(...messages: any[]): void {\n        this._logToConsole('warn', ...messages);\n    }\n\n    error(...messages: any[]): void {\n        this._logToConsole('error', ...messages);\n    }\n\n    debug(...messages: any[]): void {\n        this._logToConsole('debug', ...messages);\n    }\n\n    private _logToConsole(type: keyof Console, ...messages: any[]): void {\n        if (!this._console || !this._console[type]) {\n            return;\n        }\n\n        this._console[type].call(this._console, ...messages);\n    }\n}\n","import Logger from './logger';\n\nexport default class NoopLogger implements Logger {\n    log(): void {}\n\n    info(): void {}\n\n    warn(): void {}\n\n    error(): void {}\n\n    debug(): void {}\n}\n","import { getEnvironment } from '../utility';\n\nimport createLogger from './create-logger';\nimport Logger from './logger';\n\nconst logger = createLogger(getEnvironment() !== 'test');\n\nexport default function getDefaultLogger(): Logger {\n    return logger;\n}\n","import ConsoleLogger from './console-logger';\nimport Logger from './logger';\nimport NoopLogger from './noop-logger';\n\nexport default function createLogger(isEnabled = true): Logger {\n    if (!isEnabled) {\n        return new NoopLogger();\n    }\n\n    return new ConsoleLogger(console);\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport { ApplyCouponAction, CouponAction, CouponActionType, RemoveCouponAction } from './coupon-actions';\nimport CouponRequestSender from './coupon-request-sender';\n\nexport default class CouponActionCreator {\n    constructor(\n        private _couponRequestSender: CouponRequestSender\n    ) {}\n\n    applyCoupon(code: string, options?: RequestOptions): ThunkAction<CouponAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ApplyCouponAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(CouponActionType.ApplyCouponRequested));\n\n            this._couponRequestSender.applyCoupon(checkout.id, code, options)\n                .then(({ body }) => {\n                    observer.next(createAction(CouponActionType.ApplyCouponSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CouponActionType.ApplyCouponFailed, response));\n                });\n        });\n    }\n\n    removeCoupon(code: string, options?: RequestOptions): ThunkAction<CouponAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<RemoveCouponAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(CouponActionType.RemoveCouponRequested));\n\n            this._couponRequestSender.removeCoupon(checkout.id, code, options)\n                .then(({ body }) => {\n                    observer.next(createAction(CouponActionType.RemoveCouponSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CouponActionType.RemoveCouponFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout, CheckoutIncludes, CHECKOUT_DEFAULT_INCLUDES } from '../checkout';\nimport { joinIncludes, ContentType, RequestOptions } from '../common/http-request';\n\nexport default class CouponRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    applyCoupon(checkoutId: string, couponCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/coupons`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes([\n                    ...CHECKOUT_DEFAULT_INCLUDES,\n                    CheckoutIncludes.AvailableShippingOptions,\n                ]),\n            },\n            body: { couponCode },\n        });\n    }\n\n    removeCoupon(checkoutId: string, couponCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/coupons/${couponCode}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.delete(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes([\n                    ...CHECKOUT_DEFAULT_INCLUDES,\n                    CheckoutIncludes.AvailableShippingOptions,\n                ]),\n            },\n        });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable ,  Observer } from 'rxjs';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport { GiftCertificateRequestSender } from '.';\nimport { ApplyGiftCertificateAction, GiftCertificateActionType, RemoveGiftCertificateAction } from './gift-certificate-actions';\n\nexport default class GiftCertificateActionCreator {\n    constructor(\n        private _giftCertificateRequestSender: GiftCertificateRequestSender\n    ) {}\n\n    applyGiftCertificate(giftCertificate: string, options?: RequestOptions): ThunkAction<ApplyGiftCertificateAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ApplyGiftCertificateAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(GiftCertificateActionType.ApplyGiftCertificateRequested));\n\n            this._giftCertificateRequestSender.applyGiftCertificate(checkout.id, giftCertificate, options)\n                .then(({ body }) => {\n                    observer.next(createAction(GiftCertificateActionType.ApplyGiftCertificateSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(GiftCertificateActionType.ApplyGiftCertificateFailed, response));\n                });\n        });\n    }\n\n    removeGiftCertificate(giftCertificate: string, options?: RequestOptions): ThunkAction<RemoveGiftCertificateAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<RemoveGiftCertificateAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(GiftCertificateActionType.RemoveGiftCertificateRequested));\n\n            this._giftCertificateRequestSender.removeGiftCertificate(checkout.id, giftCertificate, options)\n                .then(({ body }) => {\n                    observer.next(createAction(GiftCertificateActionType.RemoveGiftCertificateSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(GiftCertificateActionType.RemoveGiftCertificateFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout, CHECKOUT_DEFAULT_INCLUDES } from '../checkout';\nimport { joinIncludes, ContentType, RequestOptions } from '../common/http-request';\n\nexport default class GiftCertificateRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    applyGiftCertificate(checkoutId: string, giftCertificateCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/gift-certificates`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes(CHECKOUT_DEFAULT_INCLUDES),\n            },\n            body: { giftCertificateCode },\n        });\n    }\n\n    removeGiftCertificate(checkoutId: string, giftCertificateCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/gift-certificates/${giftCertificateCode}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.delete(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes(CHECKOUT_DEFAULT_INCLUDES),\n            },\n        });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { Registry } from '../common/registry';\n\nimport CustomerCredentials from './customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from './customer-request-options';\nimport {\n    CustomerStrategyActionType,\n    CustomerStrategyDeinitializeAction,\n    CustomerStrategyInitializeAction,\n    CustomerStrategySignInAction,\n    CustomerStrategySignOutAction,\n    CustomerStrategyWidgetAction,\n} from './customer-strategy-actions';\nimport { CustomerStrategy } from './strategies';\n\nexport default class CustomerStrategyActionCreator {\n    constructor(\n        private _strategyRegistry: Registry<CustomerStrategy>\n    ) {}\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Observable<CustomerStrategySignInAction> {\n        return Observable.create((observer: Observer<CustomerStrategySignInAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.SignInRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .signIn(credentials, options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.SignInSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.SignInFailed, error, meta));\n                });\n        });\n    }\n\n    signOut(options?: CustomerRequestOptions): Observable<CustomerStrategySignOutAction> {\n        return Observable.create((observer: Observer<CustomerStrategySignOutAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.SignOutRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .signOut(options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.SignOutSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.SignOutFailed, error, meta));\n                });\n        });\n    }\n\n    initialize(options?: CustomerInitializeOptions): ThunkAction<CustomerStrategyInitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<CustomerStrategyInitializeAction>) => {\n            const state = store.getState();\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            if (methodId && state.customerStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(CustomerStrategyActionType.InitializeRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .initialize(options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.InitializeSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.InitializeFailed, error, meta));\n                });\n        });\n    }\n\n    deinitialize(options?: CustomerRequestOptions): ThunkAction<CustomerStrategyDeinitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<CustomerStrategyDeinitializeAction>) => {\n            const state = store.getState();\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            if (methodId && !state.customerStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(CustomerStrategyActionType.DeinitializeRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .deinitialize(options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.DeinitializeSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.DeinitializeFailed, error, meta));\n                });\n        });\n    }\n\n    widgetInteraction(method: () => Promise<any>, options?: CustomerRequestOptions): Observable<CustomerStrategyWidgetAction> {\n        return Observable.create((observer: Observer<CustomerStrategyWidgetAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.WidgetInteractionStarted, undefined, meta));\n\n            method().then(() => {\n                observer.next(createAction(CustomerStrategyActionType.WidgetInteractionFinished, undefined, meta));\n                observer.complete();\n            })\n            .catch(error => {\n                observer.error(createErrorAction(CustomerStrategyActionType.WidgetInteractionFailed, error, meta));\n            });\n        });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport PaymentMethod from '../../payment-method';\n\nimport AmazonPayWindow from './amazon-pay-window';\n\nexport default class AmazonPayScriptLoader {\n    private _window: AmazonPayWindow;\n\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    loadWidget(method: PaymentMethod, onPaymentReady?: () => void): Promise<Event> {\n        const {\n            config: { merchantId, testMode },\n            initializationData: { region = 'us' } = {},\n        } = method;\n\n        const url = 'https://' +\n            (region.toLowerCase() !== 'us' ? 'static-eu.' : 'static-na.') +\n            'payments-amazon.com/OffAmazonPayments/' +\n            `${region.toLowerCase()}/` +\n            (testMode ? 'sandbox/' : '') +\n            (region.toLowerCase() !== 'us' ? 'lpa/' : '') +\n            `js/Widgets.js?sellerId=${merchantId}`;\n\n        this._configureWidget(method, onPaymentReady);\n\n        return this._scriptLoader.loadScript(url);\n    }\n\n    private _configureWidget(method: PaymentMethod, onPaymentReady?: () => void): void {\n        const onLoginReady = () => {\n            if (!this._window.amazon) {\n                return;\n            }\n\n            this._window.amazon.Login.setClientId(method.initializationData.clientId);\n            this._window.amazon.Login.setUseCookie(true);\n        };\n\n        if (this._window.amazon && this._window.amazon.Login) {\n            onLoginReady();\n        } else {\n            this._window.onAmazonLoginReady = onLoginReady;\n        }\n\n        if (this._window.OffAmazonPayments && onPaymentReady) {\n            onPaymentReady();\n        } else {\n            this._window.onAmazonPaymentsReady = onPaymentReady;\n        }\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\n\nimport { Address, LegacyAddress } from '../../../address';\n\nimport { BraintreeDataCollector } from './braintree';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\nimport {\n    VisaCheckoutAddress,\n    VisaCheckoutInitOptions,\n    VisaCheckoutPaymentSuccessPayload,\n    VisaCheckoutTokenizedPayload,\n} from './visacheckout';\n\nexport default class BraintreeVisaCheckoutPaymentProcessor {\n    constructor(\n        private _braintreeSDKCreator: BraintreeSDKCreator,\n        private _requestSender: RequestSender\n    ) {}\n\n    initialize(clientToken: string, options: VisaCheckoutInitializeOptions): Promise<VisaCheckoutInitOptions> {\n        this._braintreeSDKCreator.initialize(clientToken);\n\n        return this._braintreeSDKCreator.getVisaCheckout()\n            .then(visaCheckout => visaCheckout.createInitOptions({\n                settings: {\n                    locale: options.locale,\n                    shipping: {\n                        collectShipping: options.collectShipping,\n                    },\n                },\n                paymentRequest: {\n                    currencyCode: options.currencyCode,\n                    subtotal: String(options.subtotal),\n                },\n            }));\n    }\n\n    deinitialize(): Promise<void> {\n        return this._braintreeSDKCreator.teardown();\n    }\n\n    handleSuccess(payment: VisaCheckoutPaymentSuccessPayload, shipping?: Address, billing?: Address): Promise<any> {\n        return this._braintreeSDKCreator.getVisaCheckout()\n            .then(braintreeVisaCheckout => Promise.all([\n                braintreeVisaCheckout.tokenize(payment),\n                this._braintreeSDKCreator.getDataCollector(),\n            ])\n            .then(([tokenizedPayload, dataCollector]) => {\n                const {\n                    shippingAddress = this._toVisaCheckoutAddress(shipping),\n                    billingAddress = this._toVisaCheckoutAddress(billing),\n                } = tokenizedPayload;\n\n                return this._postForm({\n                    ...tokenizedPayload,\n                    shippingAddress,\n                    billingAddress,\n                }, dataCollector);\n            }));\n    }\n\n    private _postForm(paymentData: VisaCheckoutTokenizedPayload, dataCollector: BraintreeDataCollector) {\n        const {\n            userData,\n            billingAddress,\n            shippingAddress,\n            details: cardInformation,\n        } = paymentData;\n        const { userEmail } = userData;\n        const { deviceData } = dataCollector;\n\n        return this._requestSender.post('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: {\n                payment_type: paymentData.type,\n                nonce: paymentData.nonce,\n                provider: 'braintreevisacheckout',\n                action: 'set_external_checkout',\n                device_data: deviceData,\n                card_information: this._getCardInformation(cardInformation),\n                billing_address: this._getAddress(userEmail, billingAddress),\n                shipping_address: this._getAddress(userEmail, shippingAddress),\n            },\n        });\n    }\n\n    private _toVisaCheckoutAddress(address?: Address): VisaCheckoutAddress {\n        if (!address) {\n            return {};\n        }\n\n        return {\n            firstName: address.firstName,\n            lastName: address.lastName,\n            phoneNumber: address.phone,\n            streetAddress: address.address1,\n            extendedAddress: address.address2,\n            locality: address.city,\n            region: address.stateOrProvinceCode,\n            countryCode: address.countryCode,\n            postalCode: address.postalCode,\n        };\n    }\n\n    private _getAddress(email: string, address: VisaCheckoutAddress = {}): Partial<LegacyAddress> {\n        return {\n            email,\n            first_name: address.firstName,\n            last_name: address.lastName,\n            phone_number: address.phoneNumber,\n            address_line_1: address.streetAddress,\n            address_line_2: address.extendedAddress,\n            city: address.locality,\n            state: address.region,\n            country_code: address.countryCode,\n            postal_code: address.postalCode,\n        };\n    }\n\n    private _getCardInformation(cardInformation: { cardType: string; lastTwo: string }) {\n        return {\n            type: cardInformation.cardType,\n            number: cardInformation.lastTwo,\n        };\n    }\n}\n\nexport interface VisaCheckoutInitializeOptions {\n    locale?: string;\n    collectShipping?: boolean;\n    subtotal?: number;\n    currencyCode?: string;\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport BraintreeScriptLoader from './braintree-script-loader';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\nimport BraintreeVisaCheckoutPaymentProcessor from './braintree-visacheckout-payment-processor';\n\nexport default function createBraintreeVisaCheckoutPaymentProcessor(\n    scriptLoader: ScriptLoader,\n    requestSender: RequestSender\n) {\n    const braintreeScriptLoader = new BraintreeScriptLoader(scriptLoader);\n    const braintreeSDKCreator = new BraintreeSDKCreator(braintreeScriptLoader);\n\n    return new BraintreeVisaCheckoutPaymentProcessor(braintreeSDKCreator, requestSender);\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { VisaCheckoutHostWindow, VisaCheckoutSDK } from './visacheckout';\n\nexport default class VisaCheckoutScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: VisaCheckoutHostWindow = window\n    ) {}\n\n    load(testMode?: boolean): Promise<VisaCheckoutSDK> {\n        return this._scriptLoader\n            .loadScript(`//${testMode ? 'sandbox-' : ''}assets.secure.checkout.visa.com/checkout-widget/resources/js/integration/v1/sdk.js`)\n            .then(() => {\n                if (!this._window.V) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.V;\n            });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\nimport { ChasePayHostWindow, JPMC } from '../chasepay/chasepay';\n\nexport default class ChasePayScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        public _window: ChasePayHostWindow = window\n    ) {}\n\n    load(testMode?: boolean): Promise<JPMC> {\n        return this._scriptLoader\n            .loadScript(`//pwc${testMode ? 'psb' : ''}.chase.com/pwc/checkout/js/v20170521/list.action?type=raw&applId=PWC&channelId=CWC&version=1`)\n            .then(() => {\n                if (!this._window.JPMC) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.JPMC;\n            });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\n\n/**\n * @todo Convert this file into TypeScript properly\n */\nexport default class RemoteCheckoutRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    initializeBilling(methodName: string, params?: { referenceId: string }, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/billing`;\n\n        return this._requestSender.get(url, { params, timeout });\n    }\n\n    initializeShipping(methodName: string, params?: { referenceId: string }, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/shipping`;\n\n        return this._requestSender.get(url, { params, timeout });\n    }\n\n    initializePayment(methodName: string, params?: InitializePaymentOptions, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/payment`;\n\n        return this._requestSender.get(url, { params, timeout });\n    }\n\n    loadSettings(methodName: string, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/settings`;\n\n        return this._requestSender.get(url, { timeout });\n    }\n\n    signOut(methodName: string, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/signout`;\n\n        return this._requestSender.get(url, { timeout });\n    }\n\n    generateToken({ timeout }: RequestOptions = {}): Promise<Response> {\n        const url = '/remote-checkout-token';\n\n        return this._requestSender.get(url, { timeout });\n    }\n\n    trackAuthorizationEvent({ timeout }: RequestOptions = {}): Promise<Response> {\n        const url = '/remote-checkout/events/shopper-checkout-service-provider-authorization-requested';\n\n        return this._requestSender.post(url, { timeout });\n    }\n}\n\nexport interface InitializePaymentOptions {\n    authorizationToken?: string;\n    customerMessage?: string;\n    referenceId?: string;\n    useStoreCredit?: boolean;\n}\n","import { createAction, createErrorAction, Action } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport { RemoteCheckoutActionType } from './remote-checkout-actions';\nimport RemoteCheckoutRequestSender, { InitializePaymentOptions } from './remote-checkout-request-sender';\nimport { RemoteCheckoutStateData } from './remote-checkout-state';\n\n/**\n * @todo Convert this file into TypeScript properly\n * i.e.: Action<T>\n */\nexport default class RemoteCheckoutActionCreator {\n    constructor(\n        private _remoteCheckoutRequestSender: RemoteCheckoutRequestSender\n    ) {}\n\n    initializeBilling(methodId: string, params?: { referenceId: string }, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.InitializeRemoteBillingRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.initializeBilling(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(createAction(RemoteCheckoutActionType.InitializeRemoteBillingSucceeded, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.InitializeRemoteBillingFailed, response, { methodId }));\n                });\n        });\n    }\n\n    initializeShipping(methodId: string, params?: { referenceId: string }, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.InitializeRemoteShippingRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.initializeShipping(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(createAction(RemoteCheckoutActionType.InitializeRemoteShippingSucceeded, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.InitializeRemoteShippingFailed, response, { methodId }));\n                });\n        });\n    }\n\n    initializePayment(methodId: string, params?: InitializePaymentOptions, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.InitializeRemotePaymentRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.initializePayment(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(createAction(RemoteCheckoutActionType.InitializeRemotePaymentSucceeded, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.InitializeRemotePaymentFailed, response, { methodId }));\n                });\n        });\n    }\n\n    loadSettings(methodId: string, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.LoadRemoteSettingsRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.loadSettings(methodId, options)\n                .then(({ body }) => {\n                    observer.next(createAction(RemoteCheckoutActionType.LoadRemoteSettingsSucceeded, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.LoadRemoteSettingsFailed, response, { methodId }));\n                });\n        });\n    }\n\n    signOut(methodId: string, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.SignOutRemoteCustomerRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.signOut(methodId, options)\n                .then(() => {\n                    observer.next(createAction(RemoteCheckoutActionType.SignOutRemoteCustomerSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.SignOutRemoteCustomerFailed, response, { methodId }));\n                });\n        });\n    }\n\n    updateCheckout<K extends keyof RemoteCheckoutStateData>(methodId: K, data: Partial<RemoteCheckoutStateData[K]>): Action {\n        return createAction(RemoteCheckoutActionType.UpdateRemoteCheckout, data, { methodId });\n    }\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, from, of } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\n\nimport { CheckoutActionCreator, InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { RequestOptions } from '../common/http-request';\n\nimport { CustomerActionType, SignInCustomerAction, SignOutCustomerAction } from './customer-actions';\nimport CustomerCredentials from './customer-credentials';\nimport CustomerRequestSender from './customer-request-sender';\n\nexport default class CustomerActionCreator {\n    constructor(\n        private _customerRequestSender: CustomerRequestSender,\n        private _checkoutActionCreator: CheckoutActionCreator\n    ) {}\n\n    signInCustomer(\n        credentials: CustomerCredentials,\n        options?: RequestOptions\n    ): ThunkAction<SignInCustomerAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(CustomerActionType.SignInCustomerRequested)),\n            from(this._customerRequestSender.signInCustomer(credentials, options))\n                .pipe(\n                    switchMap(({ body }) => concat(\n                        this._checkoutActionCreator.loadCurrentCheckout(options)(store),\n                        of(createAction(CustomerActionType.SignInCustomerSucceeded, body.data))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(CustomerActionType.SignInCustomerFailed, error))\n        );\n    }\n\n    signOutCustomer(\n        options?: RequestOptions\n    ): ThunkAction<SignOutCustomerAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(CustomerActionType.SignOutCustomerRequested)),\n            from(this._customerRequestSender.signOutCustomer(options))\n                .pipe(\n                    switchMap(({ body }) => concat(\n                        this._checkoutActionCreator.loadCurrentCheckout(options)(store),\n                        of(createAction(CustomerActionType.SignOutCustomerSucceeded, body.data))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(CustomerActionType.SignOutCustomerFailed, error))\n        );\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport CustomerCredentials from './customer-credentials';\nimport { InternalCustomerResponseBody } from './internal-customer-responses';\n\nexport default class CustomerRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    signInCustomer(credentials: CustomerCredentials, { timeout }: RequestOptions = {}): Promise<Response<InternalCustomerResponseBody>> {\n        const url = '/internalapi/v1/checkout/customer';\n\n        return this._requestSender.post(url, { timeout, body: credentials });\n    }\n\n    signOutCustomer({ timeout }: RequestOptions = {}): Promise<Response<InternalCustomerResponseBody>> {\n        const url = '/internalapi/v1/checkout/customer';\n\n        return this._requestSender.delete(url, { timeout });\n    }\n}\n","import StandardError from './standard-error';\n\n/**\n * Throw this error if we try to call a method that is only a stub and has not\n * been fully implemented.\n */\nexport default class NotImplementedError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Not implemented.');\n\n        this.name = 'NotImplementedError';\n        this.type = 'not_implemented';\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { AmazonPayLoginButton, AmazonPayScriptLoader, AmazonPayWindow } from '../../../payment/strategies/amazon-pay';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../../../remote-checkout';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nimport AmazonPayCustomerInitializeOptions from './amazon-pay-customer-initialize-options';\n\nexport default class AmazonPayCustomerStrategy implements CustomerStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _window: AmazonPayWindow;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _remoteCheckoutRequestSender: RemoteCheckoutRequestSender,\n        private _scriptLoader: AmazonPayScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { amazon: amazonOptions, methodId } = options;\n\n        if (!amazonOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.amazon\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => new Promise((resolve, reject) => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const { onError = () => {} } = amazonOptions;\n                const onReady = () => {\n                    this._createSignInButton({\n                        ...amazonOptions,\n                        onError: error => {\n                            reject(error);\n                            onError(error);\n                        },\n                    });\n\n                    resolve();\n                };\n\n                this._scriptLoader.loadWidget(this._paymentMethod, onReady)\n                    .catch(reject);\n            }))\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    signIn(): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via AmazonPay, the shopper must click on \"Login with Amazon\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _createSignInButton(options: AmazonPayCustomerInitializeOptions): AmazonPayLoginButton {\n        if (!this._paymentMethod || !this._window.OffAmazonPayments) {\n            throw new NotInitializedError(NotInitializedErrorType.CustomerNotInitialized);\n        }\n\n        if (!this._paymentMethod.config.merchantId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { initializationData } = this._paymentMethod;\n\n        return new this._window.OffAmazonPayments.Button(options.container, this._paymentMethod.config.merchantId, {\n            color: options.color || 'Gold',\n            size: options.size || 'small',\n            type: 'PwA',\n            useAmazonAddressBook: true,\n            onError: options.onError,\n            authorization: () => {\n                this._handleAuthorization(initializationData);\n            },\n        });\n    }\n\n    private _handleAuthorization(options: AuthorizationOptions): void {\n        this._remoteCheckoutRequestSender.generateToken()\n            .then(({ body }) => {\n                if (!this._window.amazon) {\n                    throw new NotInitializedError(NotInitializedErrorType.ShippingNotInitialized);\n                }\n\n                this._window.amazon.Login.authorize({\n                    popup: false,\n                    scope: 'payments:shipping_address payments:billing_address payments:widget profile',\n                    state: `${options.tokenPrefix}${body.token}`,\n                }, options.redirectUrl);\n\n                this._remoteCheckoutRequestSender.trackAuthorizationEvent();\n            });\n    }\n}\n\ninterface AuthorizationOptions {\n    redirectUrl: string;\n    tokenPrefix: string;\n}\n","import { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError } from '../../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { BraintreeVisaCheckoutPaymentProcessor, VisaCheckoutScriptLoader } from '../../../payment/strategies/braintree';\nimport { VisaCheckoutPaymentSuccessPayload } from '../../../payment/strategies/braintree/visacheckout';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategyActionCreator from '../../customer-strategy-action-creator';\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class BraintreeVisaCheckoutCustomerStrategy implements CustomerStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _buttonClassName: string = 'visa-checkout-wrapper';\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _customerStrategyActionCreator: CustomerStrategyActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _braintreeVisaCheckoutPaymentProcessor: BraintreeVisaCheckoutPaymentProcessor,\n        private _visaCheckoutScriptLoader: VisaCheckoutScriptLoader\n    ) {}\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { braintreevisacheckout: visaCheckoutOptions, methodId } = options;\n\n        if (!visaCheckoutOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.braintreevisacheckout\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                const checkout = state.checkout.getCheckout();\n                const storeConfig = state.config.getStoreConfig();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const {\n                    container,\n                    onError = () => {},\n                } = visaCheckoutOptions;\n\n                const initOptions = {\n                    locale: storeConfig.storeProfile.storeLanguage,\n                    collectShipping: true,\n                    subtotal: checkout.subtotal,\n                    currencyCode: storeConfig.currency.code,\n                };\n\n                return Promise.all([\n                    this._visaCheckoutScriptLoader.load(this._paymentMethod.config.testMode),\n                    this._braintreeVisaCheckoutPaymentProcessor.initialize(this._paymentMethod.clientToken, initOptions),\n                ])\n                .then(([visaCheckout, initOptions]) => {\n                    const signInButton = this._createSignInButton(container, this._buttonClassName);\n\n                    visaCheckout.init(initOptions);\n                    visaCheckout.on('payment.success', (paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) =>\n                        this._paymentInstrumentSelected(paymentSuccessPayload)\n                            .catch(error => onError(error))\n                    );\n                    visaCheckout.on('payment.error', (_, error) => onError(error));\n\n                    return signInButton;\n                })\n                .then(signInButton => { signInButton.style.visibility = 'visible'; });\n            })\n            .then(() => this._store.getState());\n    }\n\n    signIn(): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via VisaCheckout, the shopper must click on \"Visa Checkout\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut('braintreevisacheckout', options)\n        );\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        return this._braintreeVisaCheckoutPaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    private _paymentInstrumentSelected(paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) {\n        const state = this._store.getState();\n\n        if (!this._paymentMethod) {\n            throw new Error('Payment method not initialized');\n        }\n\n        const { id: methodId } = this._paymentMethod;\n\n        return this._store.dispatch(\n            this._customerStrategyActionCreator.widgetInteraction(() => {\n                return this._braintreeVisaCheckoutPaymentProcessor.handleSuccess(\n                    paymentSuccessPayload,\n                    state.shippingAddress.getShippingAddress(),\n                    state.billingAddress.getBillingAddress()\n                )\n                .then(() => this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()));\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _createSignInButton(containerId: string, buttonClass: string): HTMLElement {\n        const container = document.querySelector(`#${containerId}`);\n\n        if (!container) {\n            throw new Error('Need a container to place the button');\n        }\n\n        return (container.querySelector('.' + buttonClass) as HTMLElement) ||\n            this._insertVisaCheckoutButton(container, buttonClass);\n    }\n\n    private _insertVisaCheckoutButton(container: Element, buttonClass: string): HTMLElement {\n        const buttonSource = 'https://secure.checkout.visa.com/wallet-services-web/xo/button.png?acceptCanadianVisaDebit=false&cobrand=true&size=154';\n        const buttonTemplate = `\n            <img\n                alt=\"Visa Checkout\"\n                class=\"v-button\"\n                role=\"button\"\n                src=\"${buttonSource}\"\n                />\n            <a class=\"v-learn v-learn-default\" style=\"text-align: right; display: block; font-size: 10px; color: #003366;\" href=\"#\" data-locale=\"en_US\">Tell Me More</a>`;\n\n        const visaCheckoutButton = document.createElement('div');\n        visaCheckoutButton.style.visibility = 'hidden';\n        visaCheckoutButton.className = buttonClass;\n        visaCheckoutButton.innerHTML = buttonTemplate;\n\n        container.appendChild(visaCheckoutButton);\n\n        return visaCheckoutButton;\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { ChasePayScriptLoader, ChasePaySuccessPayload } from '../../../payment/strategies/chasepay';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class ChasePayCustomerStrategy implements CustomerStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _chasePayScriptLoader: ChasePayScriptLoader,\n        private _requestSender: RequestSender,\n        private _formPoster: FormPoster\n    ) {}\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { chasepay: chasePayOptions, methodId } = options;\n\n        if (!chasePayOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.chasepay\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                const cart = state.cart.getCart();\n                const storeConfig = state.config.getStoreConfig();\n\n                if (!cart) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCart);\n                }\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!this._paymentMethod || !this._paymentMethod.initializationData.digitalSessionId) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n\n                const { container } = chasePayOptions;\n\n                return this._chasePayScriptLoader.load(this._paymentMethod.config.testMode)\n                    .then(JPMC => {\n                        const ChasePay = JPMC.ChasePay;\n\n                        ChasePay.configure({\n                            language: storeConfig.storeProfile.storeLanguage,\n                        });\n\n                        if (ChasePay.isChasePayUp) {\n                            ChasePay.insertButtons({\n                                containers: [container],\n                            });\n                        }\n\n                        ChasePay.on(ChasePay.EventType.START_CHECKOUT, () => {\n                            this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n                                .then(() => {\n                                    const state = this._store.getState();\n                                    const method = state.paymentMethods.getPaymentMethod(methodId);\n                                    const sessionId = method && method.initializationData && method.initializationData.digitalSessionId;\n\n                                    if (sessionId) {\n                                        ChasePay.startCheckout(sessionId);\n                                    }\n                                });\n                        });\n\n                        ChasePay.on(ChasePay.EventType.COMPLETE_CHECKOUT, (payload: ChasePaySuccessPayload) => {\n                            const state = this._store.getState();\n                            const method = state.paymentMethods.getPaymentMethod(methodId);\n                            const requestId = method && method.initializationData && method.initializationData.merchantRequestId;\n\n                            if (requestId) {\n                                this._setExternalCheckoutData(payload, requestId)\n                                    .then(() => {\n                                        this._reloadPage();\n                                });\n                            }\n                        });\n                    });\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    signIn(): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Chase Pay®, the shopper must click on \"Chase Pay®\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _setExternalCheckoutData(payload: ChasePaySuccessPayload, requestId: string): Promise<Response> {\n        const url = `checkout.php?provider=chasepay&action=set_external_checkout`;\n        const options = {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\n            },\n            body: {\n                sessionToken: payload.sessionToken,\n                merchantRequestId: requestId,\n            },\n            method: 'post',\n        };\n\n        return this._requestSender.sendRequest(url, options);\n    }\n\n    private _reloadPage() {\n        this._formPoster.postForm('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            params: {\n                fromChasePay: true,\n            },\n        });\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport CustomerActionCreator from '../../customer-action-creator';\nimport CustomerCredentials from '../../customer-credentials';\nimport { CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class DefaultCustomerStrategy implements CustomerStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _customerActionCreator: CustomerActionCreator\n    ) {}\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._customerActionCreator.signInCustomer(credentials, options)\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._customerActionCreator.signOutCustomer(options)\n        );\n    }\n\n    initialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError } from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { GooglePayPaymentProcessor } from '../../../payment/strategies/googlepay';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nimport GooglePayCustomerInitializeOptions from './googlepay-customer-initialize-options';\n\nexport default class GooglePayCustomerStrategy implements CustomerStrategy {\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _googlePayPaymentProcessor: GooglePayPaymentProcessor,\n        private _formPoster: FormPoster\n    ) {}\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId }  = options;\n\n        const googlePayOptions = this._getGooglePayOptions(options);\n\n        if (!methodId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._googlePayPaymentProcessor.initialize(methodId)\n            .then(() => {\n                this._walletButton = this._createSignInButton(googlePayOptions.container);\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._walletButton && this._walletButton.parentNode) {\n            this._walletButton.parentNode.removeChild(this._walletButton);\n            this._walletButton = undefined;\n        }\n\n        return this._googlePayPaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    signIn(): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Google Pay, the shopper must click on \"Google Pay\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const container = document.querySelector(`#${containerId}`);\n\n        if (!container) {\n            throw new InvalidArgumentError('Unable to create sign-in button without valid container ID.');\n        }\n\n        const button = this._googlePayPaymentProcessor.createButton(this._handleWalletButtonClick);\n\n        container.appendChild(button);\n\n        return button;\n    }\n\n    private _getGooglePayOptions(options: CustomerInitializeOptions): GooglePayCustomerInitializeOptions {\n        if (options.methodId === 'googlepaybraintree' && options.googlepaybraintree) {\n            return options.googlepaybraintree;\n        }\n\n        if (options.methodId === 'googlepaystripe' && options.googlepaystripe) {\n            return options.googlepaystripe;\n        }\n\n        throw new InvalidArgumentError();\n    }\n\n    private _onPaymentSelectComplete(): void {\n        this._formPoster.postForm('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n        });\n    }\n\n    private _onError(error?: Error): void {\n        if (error && error.message !== 'CANCELED') {\n            throw error;\n        }\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): Promise<void> {\n        event.preventDefault();\n\n        return this._googlePayPaymentProcessor.displayWallet()\n            .then(paymentData => this._googlePayPaymentProcessor.handleSuccess(paymentData)\n            .then(() => {\n                if (paymentData.shippingAddress) {\n                    this._googlePayPaymentProcessor.updateShippingAddress(paymentData.shippingAddress);\n                }\n            }))\n            .then(() => this._onPaymentSelectComplete())\n            .catch(error => this._onError(error));\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotImplementedError\n} from '../../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { getCallbackUrl, MasterpassScriptLoader } from '../../../payment/strategies/masterpass';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class MasterpassCustomerStrategy implements CustomerStrategy {\n    private _signInButton?: HTMLElement;\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _masterpassScriptLoader: MasterpassScriptLoader\n    ) {}\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { masterpass: masterpassOptions, methodId } = options;\n\n        if (!masterpassOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.masterpass\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n                if (!this._paymentMethod || !this._paymentMethod.initializationData.checkoutId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const cart = state.cart.getCart();\n                if (!cart) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCart);\n                }\n\n                const { container } = masterpassOptions;\n\n                const payload = {\n                    checkoutId: this._paymentMethod.initializationData.checkoutId,\n                    allowedCardTypes: this._paymentMethod.initializationData.allowedCardTypes,\n                    amount: cart.cartAmount.toString(),\n                    currency: cart.currency.code,\n                    cartId: cart.id,\n                    suppressShippingAddress: false,\n                    callbackUrl: getCallbackUrl('checkout'),\n                };\n\n                return this._masterpassScriptLoader.load(this._paymentMethod.config.testMode)\n                    .then(Masterpass => {\n                        this._signInButton = this._createSignInButton(container);\n\n                        this._signInButton.addEventListener('click', () => {\n                            Masterpass.checkout(payload);\n                        });\n                    });\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        if (this._signInButton && this._signInButton.parentNode) {\n            this._signInButton.parentNode.removeChild(this._signInButton);\n            this._signInButton = undefined;\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    signIn(): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Masterpass, the shopper must click on \"Masterpass\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const container = document.querySelector(`#${containerId}`);\n\n        if (!container) {\n            throw new InvalidArgumentError('Unable to create sign-in button without valid container ID.');\n        }\n\n        const button = document.createElement('input');\n\n        button.type = 'image';\n        button.src = 'https://static.masterpass.com/dyn/img/btn/global/mp_chk_btn_160x037px.svg';\n        container.appendChild(button);\n\n        return button;\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { NotImplementedError } from '../../../common/error/errors';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class SquareCustomerStrategy implements CustomerStrategy {\n\n    constructor(\n        private _store: CheckoutStore,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator\n    ) {}\n\n    signIn(): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Masterpass, the shopper must click on \"Masterpass\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    initialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { createAction, createErrorAction, Action } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport Country from './country';\nimport { CountryActionType } from './country-actions';\nimport CountryRequestSender from './country-request-sender';\n\nexport default class CountryActionCreator {\n    constructor(\n        private _countryRequestSender: CountryRequestSender\n    ) {}\n\n    loadCountries(options?: RequestOptions): Observable<Action<Country[]>> {\n        return Observable.create((observer: Observer<Action<Country[]>>) => {\n            observer.next(createAction(CountryActionType.LoadCountriesRequested));\n\n            this._countryRequestSender.loadCountries(options)\n                .then(response => {\n                    observer.next(createAction(CountryActionType.LoadCountriesSucceeded, response.body.data));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CountryActionType.LoadCountriesFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport { CountryResponseBody } from './country-responses';\n\nexport default class CountryRequestSender {\n    constructor(\n        private _requestSender: RequestSender,\n        private _config: { locale?: string }\n    ) {}\n\n    loadCountries({ timeout }: RequestOptions = {}): Promise<Response<CountryResponseBody>> {\n        const url = '/internalapi/v1/store/countries';\n        const headers = {\n            'Accept-Language': this._config.locale,\n        };\n\n        return this._requestSender.get(url, { headers, timeout });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { joinIncludes, ContentType, RequestOptions } from '../common/http-request';\n\nimport InternalOrderRequestBody from './internal-order-request-body';\nimport { InternalOrderResponseBody } from './internal-order-responses';\nimport Order from './order';\nimport OrderParams from './order-params';\n\nexport default class OrderRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadOrder(orderId: number, { timeout, params }: RequestOptions<OrderParams> = {}): Promise<Response<Order>> {\n        const url = `/api/storefront/orders/${orderId}`;\n        const headers = { Accept: ContentType.JsonV1 };\n        const include = [\n            'payments',\n            'lineItems.physicalItems.socialMedia',\n            'lineItems.physicalItems.options',\n            'lineItems.digitalItems.socialMedia',\n            'lineItems.digitalItems.options',\n        ];\n\n        return this._requestSender.get(url, {\n            params: {\n                include: joinIncludes([\n                    ...include,\n                    ...(params && params.include || []),\n                ]),\n            },\n            headers,\n            timeout,\n        });\n    }\n\n    submitOrder(body: InternalOrderRequestBody, { timeout }: RequestOptions = {}): Promise<Response<InternalOrderResponseBody>> {\n        const url = '/internalapi/v1/checkout/order';\n\n        return this._requestSender.post(url, { body, timeout });\n    }\n\n    finalizeOrder(orderId: number, { timeout }: RequestOptions = {}): Promise<Response<InternalOrderResponseBody>> {\n        const url = `/internalapi/v1/checkout/order/${orderId}`;\n\n        return this._requestSender.post(url, { timeout });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, empty, from, of, Observable, Observer } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\n\nimport { CheckoutValidator, InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport InternalOrderRequestBody from './internal-order-request-body';\nimport { FinalizeOrderAction, LoadOrderAction, LoadOrderPaymentsAction, OrderActionType, SubmitOrderAction } from './order-actions';\nimport OrderRequestBody from './order-request-body';\nimport OrderRequestSender from './order-request-sender';\nimport { SpamProtectionAction, SpamProtectionActionCreator } from './spam-protection';\n\nexport default class OrderActionCreator {\n    constructor(\n        private _orderRequestSender: OrderRequestSender,\n        private _checkoutValidator: CheckoutValidator,\n        private _spamProtectionActionCreator: SpamProtectionActionCreator\n    ) {}\n\n    loadOrder(orderId: number, options?: RequestOptions): Observable<LoadOrderAction> {\n        return new Observable((observer: Observer<LoadOrderAction>) => {\n            observer.next(createAction(OrderActionType.LoadOrderRequested));\n\n            this._orderRequestSender.loadOrder(orderId, options)\n                .then(response => {\n                    observer.next(createAction(OrderActionType.LoadOrderSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(OrderActionType.LoadOrderFailed, response));\n                });\n        });\n    }\n\n    // TODO: Remove when checkout does not contain unrelated order data.\n    loadOrderPayments(orderId: number, options?: RequestOptions): Observable<LoadOrderPaymentsAction> {\n        return new Observable((observer: Observer<LoadOrderPaymentsAction>) => {\n            observer.next(createAction(OrderActionType.LoadOrderPaymentsRequested));\n\n            this._orderRequestSender.loadOrder(orderId, options)\n                .then(response => {\n                    observer.next(createAction(OrderActionType.LoadOrderPaymentsSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(OrderActionType.LoadOrderPaymentsFailed, response));\n                });\n        });\n    }\n\n    loadCurrentOrder(options?: RequestOptions): ThunkAction<LoadOrderAction, InternalCheckoutSelectors> {\n        return store => defer(() => {\n            const orderId = this._getCurrentOrderId(store.getState());\n\n            if (!orderId) {\n                throw new MissingDataError(MissingDataErrorType.MissingOrderId);\n            }\n\n            return this.loadOrder(orderId, options);\n        });\n    }\n\n    submitOrder(payload: OrderRequestBody, options?: RequestOptions): ThunkAction<SubmitOrderAction | SpamProtectionAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(OrderActionType.SubmitOrderRequested)),\n            defer(() => {\n                const state = store.getState();\n                const externalSource = state.config.getExternalSource();\n                const checkout = state.checkout.getCheckout();\n                const orderMeta = state.order.getOrderMeta();\n                const storeConfig = state.config.getStoreConfig();\n                const spamProtectionToken = orderMeta && orderMeta.spamProtectionToken;\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                const { isSpamProtectionEnabled } = storeConfig.checkoutSettings;\n\n                if (isSpamProtectionEnabled && !spamProtectionToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingSpamProtectionToken);\n                }\n\n                return from(\n                    this._checkoutValidator.validate(checkout, options)\n                        .then(() => this._orderRequestSender.submitOrder(this._mapToOrderRequestBody(\n                            payload,\n                            checkout.customerMessage,\n                            externalSource,\n                            spamProtectionToken\n                        ), options))\n                ).pipe(\n                    switchMap(response => concat(\n                        // TODO: Remove once we can submit orders using storefront API\n                        this.loadOrder(response.body.data.order.orderId, options),\n                        of(createAction(OrderActionType.SubmitOrderSucceeded, response.body.data, { ...response.body.meta, token: response.headers.token }))\n                    ))\n                );\n            }).pipe(\n                catchError(error => throwErrorAction(OrderActionType.SubmitOrderFailed, error))\n            )\n        );\n    }\n\n    finalizeOrder(orderId: number, options?: RequestOptions): Observable<FinalizeOrderAction | LoadOrderAction> {\n        return concat(\n            of(createAction(OrderActionType.FinalizeOrderRequested)),\n            from(this._orderRequestSender.finalizeOrder(orderId, options))\n                .pipe(\n                    switchMap(response => concat(\n                        this.loadOrder(orderId, options),\n                        of(createAction(OrderActionType.FinalizeOrderSucceeded, response.body.data))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(OrderActionType.FinalizeOrderFailed, error))\n        );\n    }\n\n    executeSpamProtection(): ThunkAction<SpamProtectionAction> {\n        return store => {\n            const storeConfig = store.getState().config.getStoreConfig();\n\n            if (!storeConfig) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n            }\n\n            const { isSpamProtectionEnabled } = storeConfig.checkoutSettings;\n\n            if (!isSpamProtectionEnabled) {\n                return empty();\n            }\n\n            return this._spamProtectionActionCreator.execute();\n        };\n    }\n\n    private _getCurrentOrderId(state: InternalCheckoutSelectors): number | undefined {\n        const order = state.order.getOrder();\n        const checkout = state.checkout.getCheckout();\n\n        return (order && order.orderId) || (checkout && checkout.orderId);\n    }\n\n    private _mapToOrderRequestBody(\n        payload: OrderRequestBody,\n        customerMessage: string,\n        externalSource?: string,\n        spamProtectionToken?: string\n    ): InternalOrderRequestBody {\n        const { payment, ...order } = payload;\n\n        if (!payment) {\n            return {\n                ...order,\n                customerMessage,\n                externalSource,\n                spamProtectionToken,\n            };\n        }\n\n        return {\n            ...order,\n            customerMessage,\n            externalSource,\n            spamProtectionToken,\n            payment: {\n                paymentData: payment.paymentData,\n                name: payment.methodId,\n                gateway: payment.gatewayId,\n            },\n        };\n    }\n}\n","export interface MutationObeserverCreator {\n    prototype: MutationObserver;\n    new(callback: MutationCallback): MutationObserver;\n}\n\nexport interface MutationObserverWindow extends Window {\n    MutationObserver: MutationObeserverCreator;\n}\n\nexport class MutationObserverFactory {\n    constructor(\n        private _window: MutationObserverWindow = window as MutationObserverWindow\n    ) {}\n\n    create(callback: MutationCallback): MutationObserver {\n        return new this._window.MutationObserver(callback);\n    }\n}\n","import { StandardError } from '../../../common/error/errors';\n\n/**\n * Throw this error if we fail to complete the required spam protection\n * verification due to an unknown reason.\n */\nexport default class SpamProtectionFailedError extends StandardError {\n    constructor() {\n        super('We were not able to complete our spam protection verification. Please try again.');\n\n        this.name = 'SpamProtectionFailedError';\n        this.type = 'spam_protection_failed';\n    }\n}\n","import { StandardError } from '../../../common/error/errors';\n\n/**\n * Throw this error if the shopper chooses not to complete the spam protection\n * challenge (i.e.: they close the reCaptcha window).\n */\nexport default class SpamProtectionNotCompletedError extends StandardError {\n    constructor() {\n        super('You haven\\'t complete our spam protection verification. Please try again.');\n\n        this.name = 'SpamProtectionNotCompletedError';\n        this.type = 'spam_protection_not_completed';\n    }\n}\n","import { Observable, Subject } from 'rxjs';\n\nimport { MutationObserverFactory } from '../../common/dom/mutation-observer';\nimport { NotInitializedError, NotInitializedErrorType } from '../../common/error/errors';\n\nimport { SpamProtectionFailedError, SpamProtectionNotCompletedError } from './errors';\nimport GoogleRecaptchaScriptLoader from './google-recaptcha-script-loader';\n\nexport interface RecaptchaResult {\n    error?: Error;\n    token?: string;\n}\n\nexport default class GoogleRecaptcha {\n    private _event$?: Subject<RecaptchaResult>;\n    private _recaptcha?: ReCaptchaV2.ReCaptcha;\n\n    constructor(\n        private googleRecaptchaScriptLoader: GoogleRecaptchaScriptLoader,\n        private mutationObserverFactory: MutationObserverFactory\n    ) {}\n\n    load(containerId: string, sitekey: string): Promise<void> {\n        const event$ = new Subject<RecaptchaResult>();\n        this._event$ = event$;\n\n        return this.googleRecaptchaScriptLoader.load()\n            .then(recaptcha => {\n                recaptcha.render(containerId, {\n                    sitekey,\n                    size: 'invisible',\n                    callback: () => {\n                        event$.next({\n                            token: recaptcha.getResponse(),\n                        });\n                        recaptcha.reset();\n                    },\n                    'error-callback': () => {\n                        event$.next({\n                            error: new SpamProtectionFailedError(),\n                        });\n                    },\n                });\n\n                this._recaptcha = recaptcha;\n            });\n    }\n\n    execute(): Observable<RecaptchaResult> {\n        if (!this._event$ || !this._recaptcha) {\n            throw new NotInitializedError(NotInitializedErrorType.SpamProtectionNotInitialized);\n        }\n\n        this._watchRecaptchaChallengeWindow(this._event$);\n\n        this._recaptcha.execute();\n\n        return this._event$;\n    }\n\n    private _watchRecaptchaChallengeWindow(event: Subject<RecaptchaResult>) {\n        const iframeElement = document.querySelector('iframe[title=\"recaptcha challenge\"]');\n\n        if (!iframeElement) {\n            throw new Error('Recaptcha challenge iframe not found.');\n        }\n\n        const iframeContainer = iframeElement.parentElement;\n\n        if (!iframeContainer) {\n            throw new Error('Recaptcha challenge iframe container not found.');\n        }\n\n        const container = iframeContainer.parentElement;\n\n        if (!container) {\n            throw new Error('Recaptcha challenge container not found.');\n        }\n\n        this.mutationObserverFactory.create(() => {\n            // When customer closes the Google ReCaptcha challenge window, throw SpamProtectionNotCompletedError\n            if (container.style.visibility === 'hidden') {\n                event.next({\n                    error: new SpamProtectionNotCompletedError(),\n                });\n            }\n        }).observe(container, { attributes: true, attributeFilter: ['style'] });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nexport default class GoogleRecaptchaScriptLoader {\n    private _loadPromise?: Promise<ReCaptchaV2.ReCaptcha>;\n\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: GoogleRecaptchaWindow = window\n    ) {}\n\n    load(): Promise<ReCaptchaV2.ReCaptcha> {\n        if (!this._loadPromise) {\n            this._loadPromise = this._loadScript();\n        }\n\n        return this._loadPromise;\n    }\n\n    private _loadScript(): Promise<ReCaptchaV2.ReCaptcha> {\n        const callbackName = 'initRecaptcha';\n        const params = [\n            `onload=${callbackName}`,\n            'render=explicit',\n        ].join('&');\n\n        return new Promise((resolve, reject) => {\n            this._window[callbackName] = () => resolve(this._window.grecaptcha);\n\n            this._scriptLoader.loadScript(`//www.google.com/recaptcha/api.js?${params}`)\n                .catch(error => {\n                    this._loadPromise = undefined;\n                    reject(error);\n                });\n        });\n    }\n}\n\nexport interface GoogleRecaptchaWindow extends Window {\n    grecaptcha?: ReCaptchaV2.ReCaptcha;\n    initRecaptcha?(): void;\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, of, throwError, Observable, Observer } from 'rxjs';\nimport { switchMap, take } from 'rxjs/operators';\n\nimport { InternalCheckoutSelectors } from '../../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../../common/error/errors';\n\nimport GoogleRecaptcha from './google-recaptcha';\nimport { SpamProtectionAction, SpamProtectionActionType } from './spam-protection-actions';\nimport { SpamProtectionOptions } from './spam-protection-options';\n\nexport default class SpamProtectionActionCreator {\n    constructor(\n        private _googleRecaptcha: GoogleRecaptcha\n    ) {}\n\n    initialize(options: SpamProtectionOptions): ThunkAction<SpamProtectionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<SpamProtectionAction>) => {\n            const state = store.getState();\n            const config = state.config.getConfig();\n            const { containerId } = options;\n\n            if (!config) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n            }\n\n            observer.next(createAction(SpamProtectionActionType.InitializeRequested, undefined));\n\n            const recaptchaSitekey = config.storeConfig.checkoutSettings.googleRecaptchaSitekey;\n\n            return this._googleRecaptcha.load(containerId, recaptchaSitekey)\n                .then(() => {\n                    observer.next(createAction(SpamProtectionActionType.InitializeSucceeded));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(SpamProtectionActionType.InitializeFailed, error, containerId));\n                });\n        });\n    }\n\n    execute(): Observable<SpamProtectionAction> {\n        return concat(\n            of(createAction(SpamProtectionActionType.ExecuteRequested, undefined)),\n            this._googleRecaptcha.execute()\n                .pipe(take(1))\n                .pipe(switchMap(({ error, token }) => {\n                    return error ?\n                        throwError(createErrorAction(SpamProtectionActionType.SubmitFailed, error)) :\n                        of(createAction(SpamProtectionActionType.Completed, token));\n                }))\n        );\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * Throw this error if we are trying to make an order finalization request for a\n * payment method that does not require such procedure.\n */\nexport default class OrderFinalizationNotRequiredError extends StandardError {\n    constructor() {\n        super('The current order does not need to be finalized at this stage.');\n\n        this.name = 'OrderFinalizationNotRequiredError';\n        this.type = 'order_finalization_not_required';\n    }\n}\n","enum PaymentStrategyType {\n    ADYENV2 = 'adyenv2',\n    AFFIRM = 'affirm',\n    AFTERPAY = 'afterpay',\n    AMAZON = 'amazon',\n    CREDIT_CARD = 'creditcard',\n    CYBERSOURCE = 'cybersource',\n    KLARNA = 'klarna',\n    LEGACY = 'legacy',\n    OFFLINE = 'offline',\n    OFFSITE = 'offsite',\n    PAYPAL = 'paypal',\n    PAYPAL_EXPRESS = 'paypalexpress',\n    PAYPAL_EXPRESS_CREDIT = 'paypalexpresscredit',\n    SAGE_PAY = 'sagepay',\n    SQUARE = 'squarev2',\n    STRIPEV3 = 'stripev3',\n    NO_PAYMENT_DATA_REQUIRED = 'nopaymentdatarequired',\n    BRAINTREE = 'braintree',\n    BRAINTREE_PAYPAL = 'braintreepaypal',\n    BRAINTREE_PAYPAL_CREDIT = 'braintreepaypalcredit',\n    BRAINTREE_VISA_CHECKOUT = 'braintreevisacheckout',\n    BRAINTREE_GOOGLE_PAY = 'googlepaybraintree',\n    CHASE_PAY = 'chasepay',\n    WE_PAY = 'wepay',\n    MASTERPASS = 'masterpass',\n    STRIPE_GOOGLE_PAY = 'googlepaystripe',\n    ZIP = 'zip',\n    CONVERGE = 'converge',\n}\n\nexport default PaymentStrategyType;\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, empty, of, Observable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { InternalCheckoutSelectors, ReadableCheckoutStore } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { LoadOrderPaymentsAction, OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../order';\nimport { OrderFinalizationNotRequiredError } from '../order/errors';\nimport { SpamProtectionAction } from '../order/spam-protection';\n\nimport { PaymentInitializeOptions, PaymentRequestOptions } from './payment-request-options';\nimport {\n    PaymentStrategyActionType,\n    PaymentStrategyDeinitializeAction,\n    PaymentStrategyExecuteAction,\n    PaymentStrategyFinalizeAction,\n    PaymentStrategyInitializeAction,\n    PaymentStrategyWidgetAction,\n} from './payment-strategy-actions';\nimport PaymentStrategyRegistry from './payment-strategy-registry';\nimport PaymentStrategyType from './payment-strategy-type';\nimport { PaymentStrategy } from './strategies';\n\nexport default class PaymentStrategyActionCreator {\n    constructor(\n        private _strategyRegistry: PaymentStrategyRegistry,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: RequestOptions): ThunkAction<PaymentStrategyExecuteAction | SpamProtectionAction, InternalCheckoutSelectors> {\n        const { payment = {} as OrderPaymentRequestBody, useStoreCredit } = payload;\n        const meta = { methodId: payment.methodId };\n\n        return store => concat(\n            this._orderActionCreator.executeSpamProtection()(store),\n            of(createAction(PaymentStrategyActionType.ExecuteRequested, undefined, meta)),\n            defer(() => {\n                const state = store.getState();\n\n                let strategy: PaymentStrategy;\n\n                if (state.payment.isPaymentDataRequired(useStoreCredit)) {\n                    const method = state.paymentMethods.getPaymentMethod(payment.methodId, payment.gatewayId);\n\n                    if (!method) {\n                        throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                    }\n\n                    strategy = this._strategyRegistry.getByMethod(method);\n                } else {\n                    strategy = this._strategyRegistry.get(PaymentStrategyType.NO_PAYMENT_DATA_REQUIRED);\n                }\n\n                return strategy\n                    .execute(payload, { ...options, methodId: payment.methodId, gatewayId: payment.gatewayId })\n                    .then(() => createAction(PaymentStrategyActionType.ExecuteSucceeded, undefined, meta));\n            })\n        ).pipe(\n            catchError(error => throwErrorAction(PaymentStrategyActionType.ExecuteFailed, error, meta))\n        );\n    }\n\n    finalize(options?: RequestOptions): ThunkAction<PaymentStrategyFinalizeAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(PaymentStrategyActionType.FinalizeRequested)),\n            this._loadOrderPaymentsIfNeeded(store, options),\n            defer(() => {\n                const state = store.getState();\n                const { providerId = '', gatewayId = '' } = state.payment.getPaymentId() || {};\n                const method = state.paymentMethods.getPaymentMethod(providerId, gatewayId);\n\n                if (!method) {\n                    throw new OrderFinalizationNotRequiredError();\n                }\n\n                return this._strategyRegistry.getByMethod(method)\n                    .finalize({ ...options, methodId: method.id, gatewayId: method.gateway })\n                    .then(() => createAction(PaymentStrategyActionType.FinalizeSucceeded, undefined, { methodId: method.id }));\n            })\n        ).pipe(\n            catchError(error => {\n                const state = store.getState();\n                const payment = state.payment.getPaymentId();\n\n                return throwErrorAction(PaymentStrategyActionType.FinalizeFailed, error, { methodId: payment && payment.providerId });\n            })\n        );\n    }\n\n    initialize(options: PaymentInitializeOptions): ThunkAction<PaymentStrategyInitializeAction, InternalCheckoutSelectors> {\n        const { methodId, gatewayId } = options;\n\n        return store => defer(() => {\n            const state = store.getState();\n            const method = state.paymentMethods.getPaymentMethod(methodId, gatewayId);\n\n            if (!method) {\n                throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n            }\n\n            if (methodId && state.paymentStrategies.isInitialized(methodId)) {\n                return empty();\n            }\n\n            return concat(\n                of(createAction(PaymentStrategyActionType.InitializeRequested, undefined, { methodId })),\n                this._strategyRegistry.getByMethod(method)\n                    .initialize({ ...options, methodId, gatewayId })\n                    .then(() => createAction(PaymentStrategyActionType.InitializeSucceeded, undefined, { methodId }))\n            );\n        }).pipe(\n            catchError(error => throwErrorAction(PaymentStrategyActionType.InitializeFailed, error, { methodId }))\n        );\n    }\n\n    deinitialize(options: PaymentRequestOptions): ThunkAction<PaymentStrategyDeinitializeAction, InternalCheckoutSelectors> {\n        const { methodId, gatewayId } = options;\n\n        return store => defer(() => {\n            const state = store.getState();\n            const method = state.paymentMethods.getPaymentMethod(methodId, gatewayId);\n\n            if (!method) {\n                throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n            }\n\n            if (methodId && !state.paymentStrategies.isInitialized(methodId)) {\n                return empty();\n            }\n\n            return concat(\n                of(createAction(PaymentStrategyActionType.DeinitializeRequested, undefined, { methodId })),\n                this._strategyRegistry.getByMethod(method)\n                    .deinitialize({ ...options, methodId, gatewayId })\n                    .then(() => createAction(PaymentStrategyActionType.DeinitializeSucceeded, undefined, { methodId }))\n            );\n        }).pipe(\n            catchError(error => throwErrorAction(PaymentStrategyActionType.DeinitializeFailed, error, { methodId }))\n        );\n    }\n\n    widgetInteraction(method: () => Promise<any>, options?: PaymentRequestOptions): Observable<PaymentStrategyWidgetAction> {\n        const methodId = options && options.methodId;\n        const meta = { methodId };\n\n        return concat(\n            of(createAction(PaymentStrategyActionType.WidgetInteractionStarted, undefined, meta)),\n            defer(() =>\n                method().then(() => createAction(PaymentStrategyActionType.WidgetInteractionFinished, undefined, meta))\n            )\n        ).pipe(\n            catchError(error => throwErrorAction(PaymentStrategyActionType.WidgetInteractionFailed, error, meta))\n        );\n    }\n\n    private _loadOrderPaymentsIfNeeded(store: ReadableCheckoutStore, options?: RequestOptions): Observable<LoadOrderPaymentsAction> {\n        const state = store.getState();\n        const checkout = state.checkout.getCheckout();\n\n        if (checkout && checkout.orderId) {\n            return this._orderActionCreator.loadOrderPayments(checkout.orderId, options);\n        }\n\n        return empty();\n    }\n}\n","import { isEqual } from 'lodash';\n\nimport { PartialDeep } from '../common/types';\n\nimport Cart from './cart';\n\nexport default class CartComparator {\n    isEqual(cartA: Cart, cartB: Cart): boolean {\n        return isEqual(\n            this._normalize(cartA),\n            this._normalize(cartB)\n        );\n    }\n\n    private _normalize(cart: Cart): PartialDeep<Cart> {\n        return {\n            cartAmount: cart.cartAmount,\n            currency: cart.currency,\n            id: cart.id,\n            lineItems: {\n                digitalItems: cart.lineItems.digitalItems\n                    .slice()\n                    .sort((itemA, itemB) =>\n                        `${itemA.productId}${itemA.variantId}`.localeCompare(`${itemB.productId}${itemB.variantId}`)\n                    )\n                    .map(item => ({\n                        extendedSalePrice: item.extendedSalePrice,\n                        productId: item.productId,\n                        quantity: item.quantity,\n                        variantId: item.variantId,\n                    })),\n                giftCertificates: cart.lineItems.giftCertificates\n                    .slice()\n                    .sort((itemA, itemB) => `${itemA.id}`.localeCompare(`${itemB.id}`))\n                    .map(item => ({\n                        amount: item.amount,\n                        recipient: item.recipient,\n                    })),\n                physicalItems: cart.lineItems.physicalItems\n                    .slice()\n                    .sort((itemA, itemB) =>\n                        `${itemA.productId}${itemA.variantId}`.localeCompare(`${itemB.productId}${itemB.variantId}`)\n                    )\n                    .map(item => ({\n                        extendedSalePrice: item.extendedSalePrice,\n                        productId: item.productId,\n                        quantity: item.quantity,\n                        variantId: item.variantId,\n                        giftWrapping: item.giftWrapping,\n                    })),\n            },\n        };\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class CartChangedError extends StandardError {\n    constructor() {\n        super('An update to your shopping cart has been detected and your available shipping costs have been updated.');\n\n        this.name = 'CartChangedError';\n        this.type = 'cart_changed';\n    }\n}\n","import { isEqual, map } from 'lodash';\n\nimport { CartComparator } from '../cart';\nimport { CartChangedError } from '../cart/errors';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { Coupon, GiftCertificate } from '../coupon';\n\nimport Checkout from './checkout';\nimport CheckoutRequestSender from './checkout-request-sender';\n\nexport default class CheckoutValidator {\n    constructor(\n        private _checkoutRequestSender: CheckoutRequestSender\n    ) {}\n\n    validate(checkout?: Checkout, options?: RequestOptions): Promise<void> {\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        return this._checkoutRequestSender.loadCheckout(checkout.id, options)\n            .then(response => {\n                const comparator = new CartComparator();\n\n                if (checkout.outstandingBalance === response.body.outstandingBalance\n                    && this._compareCoupons(checkout.coupons, response.body.coupons)\n                    && this._compareGiftCertificates(checkout.giftCertificates, response.body.giftCertificates)\n                    && comparator.isEqual(checkout.cart, response.body.cart)\n                ) {\n                    return;\n                }\n\n                throw new CartChangedError();\n            });\n    }\n\n    private _compareCoupons(couponsA: Coupon[], couponsB: Coupon[]): boolean {\n        return isEqual(map(couponsA, 'code'), map(couponsB, 'code'));\n    }\n\n    private _compareGiftCertificates(giftCertificatesA: GiftCertificate[], giftCertificatesB: GiftCertificate[]): boolean {\n        return isEqual(map(giftCertificatesA, 'code'), map(giftCertificatesB, 'code'));\n    }\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport { StoreCreditAction, StoreCreditActionType } from './store-credit-actions';\nimport StoreCreditRequestSender from './store-credit-request-sender';\n\nexport default class StoreCreditActionCreator {\n    constructor(\n        private _storeCreditRequestSender: StoreCreditRequestSender\n    ) {}\n\n    applyStoreCredit(useStoreCredit: boolean, options?: RequestOptions): ThunkAction<StoreCreditAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(StoreCreditActionType.ApplyStoreCreditRequested)),\n            defer(async () => {\n                const state = store.getState();\n                const checkout = state.checkout.getCheckout();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                const { body } = await (useStoreCredit ?\n                    this._storeCreditRequestSender.applyStoreCredit(checkout.id, options) :\n                    this._storeCreditRequestSender.removeStoreCredit(checkout.id, options));\n\n                return createAction(StoreCreditActionType.ApplyStoreCreditSucceeded, body);\n            })\n        ).pipe(\n            catchError(error => throwErrorAction(StoreCreditActionType.ApplyStoreCreditFailed, error))\n        );\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout, CHECKOUT_DEFAULT_INCLUDES } from '../checkout';\nimport { joinIncludes, ContentType, RequestOptions } from '../common/http-request';\n\nexport default class StoreCreditRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    applyStoreCredit(checkoutId: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/store-credit`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes(CHECKOUT_DEFAULT_INCLUDES),\n            },\n        });\n    }\n\n    removeStoreCredit(checkoutId: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/store-credit`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.delete(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes(CHECKOUT_DEFAULT_INCLUDES),\n            },\n        });\n    }\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, from, of } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { OrderActionCreator } from '../order';\n\nimport Payment from './payment';\nimport { InitializeOffsitePaymentAction, PaymentActionType, SubmitPaymentAction } from './payment-actions';\nimport PaymentRequestSender from './payment-request-sender';\nimport PaymentRequestTransformer from './payment-request-transformer';\n\nexport default class PaymentActionCreator {\n    constructor(\n        private _paymentRequestSender: PaymentRequestSender,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentRequestTransformer: PaymentRequestTransformer\n    ) {}\n\n    submitPayment(payment: Payment): ThunkAction<SubmitPaymentAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(PaymentActionType.SubmitPaymentRequested)),\n            from(this._paymentRequestSender.submitPayment(\n                this._paymentRequestTransformer.transform(payment, store.getState())\n            ))\n                .pipe(\n                    switchMap(({ body }) => concat(\n                        this._orderActionCreator.loadCurrentOrder()(store),\n                        of(createAction(PaymentActionType.SubmitPaymentSucceeded, body))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(PaymentActionType.SubmitPaymentFailed, error))\n        );\n    }\n\n    initializeOffsitePayment(\n        methodId: string,\n        gatewayId?: string\n    ): ThunkAction<InitializeOffsitePaymentAction, InternalCheckoutSelectors> {\n        return store => {\n            const payload = this._paymentRequestTransformer.transform({ gatewayId, methodId }, store.getState());\n\n            return concat(\n                of(createAction(PaymentActionType.InitializeOffsitePaymentRequested)),\n                this._paymentRequestSender.initializeOffsitePayment(payload)\n                    .then(() => createAction(PaymentActionType.InitializeOffsitePaymentSucceeded))\n            ).pipe(\n                catchError(error => throwErrorAction(PaymentActionType.InitializeOffsitePaymentFailed, error))\n            );\n        };\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport PaymentRequestBody from './payment-request-body';\n\n/**\n * @todo Convert this file into TypeScript properly\n */\nexport default class PaymentRequestSender {\n    /**\n     * @constructor\n     * @param {BigpayClient} client\n     */\n    constructor(\n        private _client: any\n    ) {}\n\n    submitPayment(payload: PaymentRequestBody): Promise<Response> {\n        return new Promise((resolve, reject) => {\n            this._client.submitPayment(payload, (error: any, response: any) => {\n                if (error) {\n                    reject(this._transformResponse(error));\n                } else {\n                    resolve(this._transformResponse(response));\n                }\n            });\n        });\n    }\n\n    initializeOffsitePayment(payload: PaymentRequestBody): Promise<void> {\n        return new Promise(() => {\n            this._client.initializeOffsitePayment(payload);\n        });\n    }\n\n    private _transformResponse(response: any): Response {\n        return {\n            headers: response.headers,\n            body: response.data,\n            status: response.status,\n            statusText: response.statusText,\n        };\n    }\n}\n","import { PaymentInstrument, VaultedInstrument } from './payment';\n\nexport default function isVaultedInstrument(instrument: PaymentInstrument): instrument is VaultedInstrument {\n    return Boolean((instrument as VaultedInstrument).instrumentId);\n}\n","import { pick } from 'lodash';\n\nimport { mapToInternalAddress } from '../address';\nimport { mapToInternalCart } from '../cart';\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { mapToInternalCustomer } from '../customer';\nimport { mapToInternalOrder } from '../order';\nimport { mapToInternalShippingOption } from '../shipping';\n\nimport isVaultedInstrument from './is-vaulted-instrument';\nimport Payment from './payment';\nimport PaymentMethod from './payment-method';\nimport PaymentMethodSelector from './payment-method-selector';\nimport PaymentRequestBody from './payment-request-body';\n\nexport default class PaymentRequestTransformer {\n    transform(payment: Payment, checkoutState: InternalCheckoutSelectors): PaymentRequestBody {\n        const billingAddress = checkoutState.billingAddress.getBillingAddress();\n        const checkout = checkoutState.checkout.getCheckout();\n        const customer = checkoutState.customer.getCustomer();\n        const order = checkoutState.order.getOrder();\n        const paymentMethod = this._getPaymentMethod(checkoutState.paymentMethods, payment.methodId, payment.gatewayId);\n        const shippingAddress = checkoutState.shippingAddress.getShippingAddress();\n        const consignments = checkoutState.consignments.getConsignments();\n        const shippingOption = checkoutState.consignments.getShippingOption();\n        const storeConfig = checkoutState.config.getStoreConfig();\n        const contextConfig = checkoutState.config.getContextConfig();\n        const instrumentMeta = checkoutState.instruments.getInstrumentsMeta();\n        const paymentMeta = checkoutState.paymentMethods.getPaymentMethodsMeta();\n        const orderMeta = checkoutState.order.getOrderMeta();\n        const internalCustomer = customer && billingAddress && mapToInternalCustomer(customer, billingAddress);\n\n        const authToken = instrumentMeta && payment.paymentData && isVaultedInstrument(payment.paymentData) ?\n            `${checkoutState.payment.getPaymentToken()}, ${instrumentMeta.vaultAccessToken}` :\n            checkoutState.payment.getPaymentToken();\n\n        if (!authToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentToken);\n        }\n\n        return {\n            authToken,\n            paymentMethod,\n            customer: internalCustomer,\n            billingAddress: billingAddress && mapToInternalAddress(billingAddress),\n            shippingAddress: shippingAddress && mapToInternalAddress(shippingAddress, consignments),\n            shippingOption: shippingOption && mapToInternalShippingOption(shippingOption, true),\n            cart: checkout && mapToInternalCart(checkout),\n            order: order && mapToInternalOrder(order, orderMeta),\n            orderMeta,\n            payment: payment.paymentData,\n            quoteMeta: {\n                request: {\n                    ...paymentMeta,\n                    geoCountryCode: contextConfig && contextConfig.geoCountryCode,\n                },\n            },\n            source: 'bigcommerce-checkout-js-sdk',\n            store: pick(storeConfig && storeConfig.storeProfile, [\n                'storeHash',\n                'storeId',\n                'storeLanguage',\n                'storeName',\n            ]),\n        };\n    }\n\n    private _getPaymentMethod(\n        paymentMethodSelector: PaymentMethodSelector,\n        methodId: string,\n        gatewayId?: string\n    ): PaymentMethod | undefined {\n        const paymentMethod = paymentMethodSelector.getPaymentMethod(methodId, gatewayId);\n\n        if (!paymentMethod) {\n            return;\n        }\n\n        if (paymentMethod.method === 'multi-option' && !paymentMethod.gateway) {\n            return { ...paymentMethod, gateway: paymentMethod.id };\n        }\n\n        if (paymentMethod.initializationData && paymentMethod.initializationData.gateway) {\n            return { ...paymentMethod, id: paymentMethod.initializationData.gateway };\n        }\n\n        return paymentMethod;\n    }\n}\n","export interface AdyenComponentCallbacks {\n    onChange?(state: AdyenCardState): void;\n}\n\nexport interface AdyenHostWindow extends Window {\n    AdyenCheckout?: new(configuration: AdyenConfiguration) => AdyenCheckout;\n}\n\nexport interface AdyenConfiguration {\n    /*\n     * Use test, and then change this to live when you're ready to accept live payments.\n     */\n    environment?: string;\n\n    /*\n     * The shopper's locale. This is used to set the language rendered in the Components.\n     */\n    locale?: string;\n\n    /*\n     * The Origin Key of your website.\n     */\n    originKey: string;\n\n    /*\n     * Supported from Components version 3.0.0 and later. The full paymentMethods response,\n     * returned in step 1. We recommend that you pass this on the AdyenCheckout instance.\n     * Otherwise, you need to pass the specific payment method details separately for each\n     * Component.\n     */\n    paymentMethodsResponse?: PaymentMethodsResponse;\n\n    /*\n     * Specify the function that you created, for example, handleOnChange. If you wish\n     * to override this function, you can also define an onChange event on the Component\n     * level.\n     */\n    onChange?(state: AdyenCardState, component: AdyenComponent): void;\n}\n\nexport interface PaymentMethodsResponse {\n    /**\n     * Groups of payment methods.\n     */\n    groups?: AdyenPaymentMethodGroup[];\n\n    /**\n     * Detailed list of one-click payment methods.\n     */\n    oneClickPaymentMethods?: RecurringDetail;\n\n    /**\n     * Detailed list of payment methods required to generate payment forms.\n     */\n    paymentMethods?: AdyenPaymentMethod[];\n\n    /**\n     * List of all stored payment methods.\n     */\n    storedPaymentMethods?: AdyenStoredPaymentMethod[];\n}\n\nexport interface AdyenPaymentMethod {\n    /**\n     * List of possible brands. For example: visa, mc.\n     */\n    brands?: string[];\n\n    /**\n     * The configuration of the payment method.\n     */\n    configuration?: object;\n\n    /**\n     * All input details to be provided to complete the payment with this payment\n     * method.\n     */\n    details?: InputDetail[];\n\n    /**\n     * The group where this payment method belongs to.\n     */\n    group?: Group;\n\n    /**\n     * The displayable name of this payment method.\n     */\n    name?: string;\n\n    /**\n     * Echo data required to send in next calls.\n     */\n    paymentMethodData?: string;\n\n    /**\n     * Indicates whether this payment method supports tokenization or not.\n     */\n    supportsRecurring?: boolean;\n\n    /**\n     * The unique payment method code.\n     */\n    type?: string;\n}\n\nexport interface AdyenPaymentMethodGroup {\n    /**\n     * The type to submit for any payment method in this group.\n     */\n    groupType?: string;\n\n    /**\n     * The human-readable name of this group.\n     */\n    name?: string;\n\n    /**\n     * The types of payment methods that belong in this group.\n     */\n    types?: string[];\n}\n\nexport interface InputDetail {\n    /**\n     * Configuration parameters for the required input.\n     */\n    configuration?: object;\n\n    /**\n     * Input details can also be provided recursively.\n     */\n    details?: SubInputDetail[];\n\n    /**\n     * In case of a select, the URL from which to query the items.\n     */\n    itemSearchUrl?: string;\n\n    /**\n     * In case of a select, the items to choose from.\n     */\n    items?: Item[];\n\n    /**\n     * The value to provide in the result.\n     */\n    key?: string;\n\n    /**\n     * True if this input value is optional.\n     */\n    optional?: boolean;\n\n    /**\n     * The type of the required input.\n     */\n    type?: string;\n\n    /**\n     * The value can be pre-filled, if available.\n     */\n    value?: string;\n}\n\nexport enum ThreeDS2ComponentType {\n    ThreeDS2DeviceFingerprint = 'threeDS2DeviceFingerprint',\n    ThreeDS2Challenge = 'threeDS2Challenge',\n}\n\nexport interface ThreeDS2Result {\n    payment_data: string;\n    result_code: string;\n    token: string;\n}\n\nexport interface ThreeDS1Result {\n    acs_url: string;\n    payer_auth_request: string;\n    callback_url: string;\n    merchant_data: string;\n}\n\nexport interface SubInputDetail {\n    /**\n     * Configuration parameters for the required input.\n     */\n    configuration?: object;\n\n    /**\n     * In case of a select, the items to choose from.\n     */\n    items?: Item[];\n\n    /**\n     * The value to provide in the result.\n     */\n    key?: string;\n\n    /**\n     * True if this input is optional to provide.\n     */\n    optional?: boolean;\n\n    /**\n     * The type of the required input.\n     */\n    type?: string;\n\n    /**\n     * The value can be pre-filled, if available.\n     */\n    value?: string;\n}\n\nexport interface Item {\n    /**\n     * The value to provide in the result.\n     */\n    id?: string;\n\n    /**\n     * The display name.\n     */\n    name?: string;\n}\n\nexport interface Group {\n    /**\n     * The name of the group.\n     */\n    name?: string;\n\n    /**\n     * Echo data to be used if the payment method is displayed as part of this group.\n     */\n    paymentMethodData?: string;\n\n    /**\n     * The unique code of the group.\n     */\n    type?: string;\n}\n\nexport interface AdyenStoredPaymentMethod {\n    /**\n     * The brand of the card.\n     */\n    brand?: string;\n\n    /**\n     * The month the card expires.\n     */\n    expiryMonth?: string;\n\n    /**\n     * The year the card expires.\n     */\n    expiryYear?: string;\n\n    /**\n     * The unique payment method code.\n     */\n    holderName?: string;\n\n    /**\n     * A unique identifier of this stored payment method.\n     */\n    id?: string;\n\n    /**\n     * The last four digits of the PAN.\n     */\n    lastFour?: string;\n\n    /**\n     * The display name of the stored payment method.\n     */\n    name: string;\n\n    /**\n     * The shopper’s email address.\n     */\n    shopperEmail?: string;\n\n    /**\n     * The supported shopper interactions for this stored payment method.\n     */\n    supportedShopperInteractions?: string[];\n\n    /**\n     * The type of payment method.\n     */\n    type?: string;\n}\n\nexport interface RecurringDetail extends AdyenPaymentMethod {\n    /**\n     * The reference that uniquely identifies the recurring detail.\n     */\n    recurringDetailReference?: string;\n\n    /**\n     * Contains information on previously stored payment details.\n     */\n    storedDetails?: StoredDetails;\n}\n\nexport interface StoredDetails {\n    /**\n     * The stored bank account.\n     */\n    bank?: Bank;\n\n    /**\n     * The stored card information.\n     */\n    card?: Card;\n\n    /**\n     * The email associated with stored payment details.\n     */\n    emailAddress?: string;\n}\n\nexport interface Bank {\n    /**\n     * The bank account number (without separators).\n     */\n    bankAccountNumber?: string;\n\n    /**\n     * The bank city.\n     */\n    bankCity?: string;\n\n    /**\n     * The location id of the bank. The field value is nil in most cases.\n     */\n    bankLocationId?: string;\n\n    /**\n     * The name of the bank.\n     */\n    bankName?: string;\n\n    /**\n     * The Business Identifier Code (BIC) is the SWIFT address assigned to\n     * a bank. The field value is nil in most cases.\n     */\n    bic?: string;\n\n    /**\n     * Country code where the bank is located.\n     * A valid value is an ISO two-character country code (e.g. 'NL').\n     */\n    countryCode?: string;\n\n    /**\n     * The International Bank Account Number (IBAN).\n     */\n    iban?: string;\n\n    /**\n     * The name of the bank account holder. If you submit a name with non-Latin\n     * characters, we automatically replace some of them with corresponding Latin\n     * characters to meet the FATF recommendations. For example:\n     * χ12 is converted to ch12.\n     * üA is converted to euA.\n     * Peter Møller is converted to Peter Mller, because banks don't accept 'ø'.\n     * After replacement, the ownerName must have at least three alphanumeric characters\n     * (A-Z, a-z, 0-9), and at least one of them must be a valid Latin character\n     * (A-Z, a-z). For example:\n     * John17 - allowed.\n     * J17 - allowed.\n     * 171 - not allowed.\n     * John-7 - allowed.\n     */\n    ownerName?: string;\n\n    /**\n     * The bank account holder's tax ID.\n     */\n    taxId?: string;\n}\n\nexport interface Card {\n    /**\n     * The card verification code (1-20 characters). Depending on the card brand, it\n     * is known also as:\n     * CVV2/CVC2 – length: 3 digits\n     * CID – length: 4 digits\n     */\n    cvc?: string;\n\n    /**\n     * The card expiry month. Format: 2 digits, zero-padded for single digits. For example:\n     * 03 = March\n     * 11 = November\n     * Required\n     */\n    expiryMonth: string;\n\n    /**\n     * The card expiry year. Format: 4 digits. For example: 2020\n     * Required\n     */\n    expiryYear: string;\n\n    /**\n     * The name of the cardholder, as printed on the card.\n     * Required\n     */\n    holderName: string;\n\n    /**\n     * The issue number of the card (for some UK debit cards only).\n     */\n    issueNumber?: string;\n\n    /**\n     * The card number (4-19 characters). Do not use any separators. When this value is\n     * returned in a response, only the last 4 digits of the card number are returned.\n     * Required\n     */\n    number: string;\n\n    /**\n     * The month component of the start date (for some UK debit cards only).\n     */\n    startNumnber?: string;\n\n    /**\n     * The year component of the start date (for some UK debit cards only).\n     */\n    startYear?: string;\n}\n\nexport interface CreditCardPlaceHolder {\n    encryptedCardNumber?: string;\n    encryptedExpiryDate?: string;\n    encryptedSecurityCode: string;\n}\n\nexport interface SepaPlaceHolder {\n    ownerName?: string;\n    ibanNumber?: string;\n}\n\nexport interface AdyenComponent {\n    mount(containerId: string): HTMLElement;\n    unmount(): void;\n}\n\nexport interface AdyenCheckout {\n    create(type: string, componentOptions?: CreditCardComponentOptions |\n        ThreeDS2DeviceFingerprintComponentOptions | ThreeDS2ChallengeComponentOptions): AdyenComponent;\n}\n\nexport interface ThreeDS2ComponentOptions {\n    threeDS2ChallengeWidgetSize?: string;\n}\n\nexport interface CreditCardComponentOptions {\n    /**\n     * Set an object containing the details array for type: scheme from\n     * the /paymentMethods response.\n     */\n    details?: InputDetail[];\n\n    /**\n     * Set to true to show the checkbox to save card details for the next payment.\n     */\n    enableStoreDetails?: boolean;\n\n    /**\n     * Set to true to request the name of the card holder.\n     */\n    hasHolderName?: boolean;\n\n    /**\n     * Set to true to require the card holder name.\n     */\n    holderNameRequired?: boolean;\n\n    /**\n     * Prefill the card holder name field. Supported from Card component\n     */\n    holderName?: string;\n\n    /**\n     * Defaults to ['mc','visa','amex']. Configure supported card types to\n     * facilitate brand recognition used in the Secured Fields onBrand callback.\n     * See list of available card types. If a shopper enters a card type not\n     * specified in the GroupTypes configuration, the onBrand callback will not be invoked.\n     */\n    groupTypes?: string[];\n    /**\n     * Set a style object to customize the input fields. See Styling Secured Fields\n     * for a list of supported properties.\n     */\n    styles?: AdyenStyleOptions;\n\n    /**\n     * Specify the sample values you want to appear for card detail input fields.\n     */\n    placeholders?: CreditCardPlaceHolder | SepaPlaceHolder;\n\n    /**\n     * Called when the shopper enters data in the card input fields.\n     * Here you have the option to override your main Adyen Checkout configuration.\n     */\n    onChange?(state: AdyenCardState, component: AdyenComponent): void;\n}\n\nexport interface AdyenCardState {\n    data: AdyenCardDataPaymentMethodState;\n    isValid?: boolean;\n}\n\nexport interface AdyenCardDataPaymentMethodState {\n    paymentMethod: AdyenCardPaymentMethodState;\n}\nexport interface AdyenCardPaymentMethodState {\n    encryptedCardNumber: string;\n    encryptedExpiryMonth: string;\n    encryptedExpiryYear: string;\n    encryptedSecurityCode: string;\n    holderName?: string;\n    type: string;\n}\nexport interface ThreeDS2DeviceFingerprintComponentOptions {\n    fingerprintToken: string;\n    onComplete(fingerprintData: any): void;\n    onError(error: AdyenError): void;\n}\n\nexport enum ResultCode {\n    AuthenticationFinished = 'AuthenticationFinished',\n    Authorised = 'Authorised',\n    Cancelled = 'Cancelled',\n    ChallengeShopper = 'ChallengeShopper',\n    Error = 'Error',\n    IdentifyShopper = 'IdentifyShopper',\n    Pending = 'Pending',\n    Received = 'Received',\n    RedirectShopper = 'RedirectShopper',\n    Refused = 'Refused',\n}\n\nexport interface ThreeDS2ChallengeComponentOptions {\n    challengeToken: string;\n    size?: string;\n    onComplete(fingerprintData: any): void;\n    onError(error: AdyenError): void;\n}\n\nexport interface AdyenStyleOptions {\n    /**\n     * Base styling applied to the iframe. All styling extends from this style.\n     */\n    base?: CssProperties;\n\n    /**\n     * Styling applied when a field fails validation.\n     */\n    error?: CssProperties;\n\n    /**\n     * Styling applied to the field's placeholder values.\n     */\n    placeholder?: CssProperties;\n\n    /**\n     * Styling applied once a field passes validation.\n     */\n    validated?: CssProperties;\n}\n\nexport interface AdyenError {\n    errorCode: string;\n    message: string;\n}\n\nexport interface CssProperties {\n    background?: string;\n    color?: string;\n    display?: string;\n    font?: string;\n    fontFamily?: string;\n    fontSize?: string;\n    fontSizeAdjust?: string;\n    fontSmoothing?: string;\n    fontStretch?: string;\n    fontStyle?: string;\n    fontVariant?: string;\n    fontVariantAlternates?: string;\n    fontVariantCaps?: string;\n    fontVariantEastAsian?: string;\n    fontVariantLigatures?: string;\n    fontVariantNumeric?: string;\n    fontWeight?: string;\n    letterSpacing?: string;\n    lineHeight?: string;\n    mozOsxFontSmoothing?: string;\n    mozTransition?: string;\n    outline?: string;\n    opacity?: string | number;\n    padding?: string;\n    textAlign?: string;\n    textShadow?: string;\n    transition?: string;\n    webkitFontSmoothing?: string;\n    webkitTransition?: string;\n}\n\nexport interface ThreeDS2OnComplete {\n    data: {\n        details: {\n            'threeds2.challengeResult'?: string;\n            'threeds2.fingerprint'?: string;\n            paymentData: string;\n        };\n    };\n}\n\nexport interface ThreeDSRequiredErrorResponse {\n    errors: [\n        { code: string }\n    ];\n    three_ds_result: {\n        result_code: ResultCode;\n        token?: string;\n        payment_data?: string;\n        acs_url?: string;\n        callback_url?: string;\n        payer_auth_request?: string;\n        merchant_data?: string;\n    };\n    status: string;\n}\n","import { ReadableDataStore } from '@bigcommerce/data-store';\nimport { some } from 'lodash';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { Registry } from '../common/registry';\nimport { RegistryOptions } from '../common/registry/registry';\n\nimport PaymentMethod from './payment-method';\nimport * as paymentMethodTypes from './payment-method-types';\nimport PaymentStrategyType from './payment-strategy-type';\nimport PaymentStrategy from './strategies/payment-strategy';\n\nexport default class PaymentStrategyRegistry extends Registry<PaymentStrategy, PaymentStrategyType> {\n    constructor(\n        private _store: ReadableDataStore<InternalCheckoutSelectors>,\n        options?: PaymentStrategyRegistryOptions\n    ) {\n        super(options);\n    }\n\n    getByMethod(paymentMethod?: PaymentMethod): PaymentStrategy {\n        if (!paymentMethod) {\n            return this.get();\n        }\n\n        const token = this._getToken(paymentMethod);\n\n        const cacheToken = [paymentMethod.gateway, paymentMethod.id]\n            .filter(value => value !== undefined && value !== null)\n            .join('-');\n\n        return this.get(token, cacheToken);\n    }\n\n    private _getToken(paymentMethod: PaymentMethod): PaymentStrategyType {\n        const methodId = paymentMethod.gateway || paymentMethod.id;\n\n        if (this._hasFactoryForMethod(methodId)) {\n            return methodId;\n        }\n\n        if (paymentMethod.type === paymentMethodTypes.OFFLINE) {\n            return PaymentStrategyType.OFFLINE;\n        }\n\n        if (this._isLegacyMethod(paymentMethod)) {\n            return PaymentStrategyType.LEGACY;\n        }\n\n        if (paymentMethod.type === paymentMethodTypes.HOSTED) {\n            return PaymentStrategyType.OFFSITE;\n        }\n\n        return PaymentStrategyType.CREDIT_CARD;\n    }\n\n    private _hasFactoryForMethod(\n        methodId: string\n    ): methodId is PaymentStrategyType {\n        return this._hasFactory(methodId);\n    }\n\n    private _isLegacyMethod(paymentMethod: PaymentMethod): boolean {\n        const config = this._store.getState().config.getStoreConfig();\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        const { clientSidePaymentProviders } = config.paymentSettings;\n\n        if (!clientSidePaymentProviders || paymentMethod.gateway === 'adyen') {\n            return false;\n        }\n\n        return !some(clientSidePaymentProviders, id =>\n            paymentMethod.id === id || paymentMethod.gateway === id\n        );\n    }\n}\n\nexport interface PaymentStrategyRegistryOptions extends RegistryOptions {\n    clientSidePaymentProviders?: string[];\n}\n","import { InvalidArgumentError } from '../../common/error/errors';\n\n/**\n * This error should be thrown when we are unable to submit a payment because\n * the caller has not provided all the required fields, i.e.: if an argument is\n * missing or it is not the expected data type.\n */\nexport default class PaymentArgumentInvalidError extends InvalidArgumentError {\n    constructor(invalidFields?: string[]) {\n        let message = 'Unable to submit payment for the order because the payload is invalid.';\n\n        if (invalidFields) {\n            message = `${message} Make sure the following fields are provided correctly: ${invalidFields.join(', ')}.`;\n        }\n\n        super(message);\n\n        this.name = 'PaymentArgumentInvalidError';\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { some } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType, NotInitializedErrorType,\n    RequestError\n} from '../../../common/error/errors';\nimport NotInitializedError from '../../../common/error/errors/not-initialized-error';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport isVaultedInstrument from '../../is-vaulted-instrument';\nimport Payment, { HostedInstrument } from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport {\n    AdyenCardState,\n    AdyenCheckout,\n    AdyenComponent,\n    AdyenConfiguration,\n    AdyenError,\n    ResultCode,\n    ThreeDS2ComponentType,\n    ThreeDS2OnComplete,\n    ThreeDS2Result,\n} from './adyenv2';\nimport AdyenV2PaymentInitializeOptions from './adyenv2-initialize-options';\nimport AdyenV2ScriptLoader from './adyenv2-script-loader';\n\nexport default class AdyenV2PaymentStrategy implements PaymentStrategy {\n    private _adyenCheckout?: AdyenCheckout;\n    private _stateContainer?: string;\n    private _adyenv2?: AdyenV2PaymentInitializeOptions;\n    private _adyenComponent?: AdyenComponent;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _adyenV2ScriptLoader: AdyenV2ScriptLoader,\n        private _formPoster: FormPoster,\n        private _locale: string\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { adyenv2 } = options;\n\n        if (!adyenv2) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.adyenv2\" argument is not provided.');\n        }\n\n        const paymentMethod = this._store.getState().paymentMethods.getPaymentMethod(options.methodId);\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._adyenv2 = adyenv2;\n\n        const configuration: AdyenConfiguration = {\n            environment:  paymentMethod.initializationData.environment,\n            locale: this._locale,\n            originKey: paymentMethod.initializationData.originKey,\n            paymentMethodsResponse: paymentMethod.initializationData.paymentMethodsResponse,\n        };\n\n        return this._adyenV2ScriptLoader.load(configuration)\n            .then(adyenCheckout => {\n                this._adyenCheckout = adyenCheckout;\n\n                const adyenComponent = this._adyenCheckout.create(\n                    paymentMethod.method,\n                    {\n                        ...adyenv2.options,\n                        onChange: (state: AdyenCardState) => {\n                            this._updateStateContainer(state);\n                        },\n                    }\n                );\n\n                adyenComponent.mount(`#${adyenv2.containerId}`);\n\n                this._adyenComponent = adyenComponent;\n\n                return Promise.resolve(this._store.getState());\n            });\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n        const shouldSaveInstrument = paymentData && (paymentData as HostedInstrument).shouldSaveInstrument;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() => {\n                if (paymentData && isVaultedInstrument(paymentData)) {\n                    return this._store.dispatch(this._paymentActionCreator.submitPayment({...payment, paymentData}));\n                }\n\n                const paymentPayload = {\n                    methodId: payment.methodId,\n                    paymentData: {\n                        nonce: this._getStateContainer(),\n                        shouldSaveInstrument,\n                    },\n                };\n\n                return this._store.dispatch(this._paymentActionCreator.submitPayment(paymentPayload));\n            })\n            .catch(error => {\n                if (!(error instanceof RequestError) || !some(error.body.errors, { code: 'three_d_secure_required' })) {\n                    return Promise.reject(error);\n                }\n\n                if (error.body.three_ds_result.result_code === ResultCode.IdentifyShopper) {\n                    return this._handle3DS2Fingerprint(error.body.three_ds_result, payment.methodId)\n                        .then((payment: Payment) =>\n                            this._store.dispatch(this._paymentActionCreator.submitPayment(payment))\n                        )\n                        .catch(error => {\n                            if (!(error instanceof RequestError) || !some(error.body.errors, { code: 'three_d_secure_required' })) {\n                                return Promise.reject(error);\n                            }\n\n                            if (error.body.three_ds_result.result_code === ResultCode.ChallengeShopper) {\n                                return this._handle3DS2Challenge(error.body.three_ds_result, payment.methodId)\n                                    .then((payment: Payment) =>\n                                        this._store.dispatch(this._paymentActionCreator.submitPayment(payment))\n                                    );\n                            }\n\n                            return Promise.reject(error);\n                        });\n                }\n\n                if (error.body.three_ds_result.result_code === ResultCode.ChallengeShopper) {\n                    return this._handle3DS2Challenge(error.body.three_ds_result, payment.methodId)\n                        .then((payment: Payment) =>\n                            this._store.dispatch(this._paymentActionCreator.submitPayment(payment))\n                        );\n                }\n\n                return new Promise(() => {\n                    this._formPoster.postForm(error.body.three_ds_result.acs_url, {\n                        PaReq: error.body.three_ds_result.payer_auth_request,\n                        TermUrl: error.body.three_ds_result.callback_url,\n                        MD: error.body.three_ds_result.merchant_data,\n                    });\n                });\n            });\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._adyenComponent) {\n            this._adyenComponent.unmount();\n            this._adyenComponent = undefined;\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _getAdyenV2PaymentInitializeOptions(): AdyenV2PaymentInitializeOptions {\n        if (!this._adyenv2) {\n            throw new InvalidArgumentError(' \"options.adyenv2\" argument was not provided during initialization.');\n        }\n\n        return this._adyenv2;\n    }\n\n    private _getStateContainer(): string {\n        if (!this._stateContainer) {\n            return '{}';\n        }\n\n        return this._stateContainer;\n    }\n\n    private _getThreeDS2ChallengeWidgetSize(): string {\n        const { threeDS2Options } = this._getAdyenV2PaymentInitializeOptions();\n\n        if (!threeDS2Options) {\n            throw new InvalidArgumentError('\"options.adyenv2.threeds2options\" argument was not provided during initialization.');\n        }\n\n        const { threeDS2ChallengeWidgetSize } = threeDS2Options;\n\n        if (!threeDS2ChallengeWidgetSize) {\n            return '01';\n        }\n\n        return threeDS2ChallengeWidgetSize;\n    }\n\n    private _handle3DS2Challenge(resultObject: ThreeDS2Result, paymentMethodId: string): Promise<Payment> {\n        return new Promise((resolve, reject) => {\n            if (!this._adyenCheckout) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            const threeDS2Component = this._adyenCheckout\n                .create(ThreeDS2ComponentType.ThreeDS2Challenge, {\n                    challengeToken: resultObject.token,\n                    onComplete: (challengeData: ThreeDS2OnComplete) => {\n                        const challengePaymentPayload = {\n                            ...challengeData.data,\n                            paymentData: resultObject.payment_data,\n                        };\n\n                        const paymentPayload = {\n                            methodId: paymentMethodId,\n                            paymentData: {\n                                nonce: JSON.stringify(challengePaymentPayload),\n                            },\n                        };\n\n                        resolve(paymentPayload);\n                    },\n                    onError: (error: AdyenError) => reject(error),\n                    size: this._getThreeDS2ChallengeWidgetSize(),\n                });\n\n            const threeDS2Container = this._getAdyenV2PaymentInitializeOptions().threeDS2ContainerId;\n\n            threeDS2Component.mount(`#${threeDS2Container}`);\n        });\n    }\n\n    private _handle3DS2Fingerprint(resultObject: ThreeDS2Result, paymentMethodId: string): Promise<Payment> {\n        return new Promise((resolve, reject) => {\n            if (!this._adyenCheckout) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            const threeDS2Component = this._adyenCheckout\n                .create(ThreeDS2ComponentType.ThreeDS2DeviceFingerprint, {\n                    fingerprintToken: resultObject.token,\n                    onComplete: (fingerprintData: ThreeDS2OnComplete) => {\n                        const fingerprintPaymentPayload = {\n                            ...fingerprintData.data,\n                            paymentData: resultObject.payment_data,\n                        };\n\n                        const paymentPayload = {\n                            methodId: paymentMethodId,\n                            paymentData: {\n                                nonce: JSON.stringify(fingerprintPaymentPayload),\n                            },\n                        };\n\n                        resolve(paymentPayload);\n                    },\n                    onError: (error: AdyenError) => reject(error),\n                });\n\n            const threeDS2Container = this._getAdyenV2PaymentInitializeOptions().threeDS2ContainerId;\n\n            threeDS2Component.mount(`#${threeDS2Container}`);\n        });\n    }\n\n    private _updateStateContainer(newState: AdyenCardState) {\n        if (newState.isValid) {\n            const state = {\n                ...newState.data.paymentMethod,\n                origin: window.location.origin,\n            };\n\n            this._stateContainer = JSON.stringify(state);\n        }\n    }\n}\n","export enum OrderIncludes {\n    DigitalItemsCategories = 'lineItems.digitalItems.categories',\n    PhysicalItemsCategories = 'lineItems.physicalItems.categories',\n}\n\nexport default interface OrderParams {\n    include?: OrderIncludes[];\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport {\n    AdyenCheckout,\n    AdyenConfiguration,\n    AdyenHostWindow\n} from './adyenv2';\n\nexport default class AdyenV2ScriptLoader {\n    private _stylesheets: { [key: string]: Promise<Event> } = {};\n\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: AdyenHostWindow = window\n    ) {}\n\n    load(configuration: AdyenConfiguration): Promise<AdyenCheckout> {\n        return Promise.all([\n            this._loadStylesheet(`https://checkoutshopper-${configuration.environment}.adyen.com/checkoutshopper/sdk/3.0.0/adyen.css`),\n            this._scriptLoader.loadScript(`https://checkoutshopper-${configuration.environment}.adyen.com/checkoutshopper/sdk/3.0.0/adyen.js`),\n        ])\n        .then(() => {\n            if (!this._window.AdyenCheckout) {\n                throw new PaymentMethodClientUnavailableError();\n            }\n\n            return new this._window.AdyenCheckout(configuration);\n        })\n        .catch(() => {\n            throw new PaymentMethodClientUnavailableError();\n        });\n\n    }\n\n    private _loadStylesheet(src: string): Promise<Event> {\n        if (!this._stylesheets[src]) {\n            this._stylesheets[src] = new Promise((resolve, reject) => {\n                const stylesheet = document.createElement('link');\n\n                stylesheet.onload = event => {\n                    resolve(event);\n                };\n                stylesheet.onerror = event => {\n                    delete this._stylesheets[src];\n                    reject(event);\n                };\n                stylesheet.type = 'text/css';\n                stylesheet.rel = 'stylesheet';\n                stylesheet.href = src;\n\n                document.head.appendChild(stylesheet);\n            });\n        }\n\n        return this._stylesheets[src];\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * This error should be thrown when the payment flow is cancelled. It could be\n * due to a deliberate user interaction, i.e.: the user clicks on a cancel\n * button which dismisses the payment modal.\n */\nexport default class PaymentMethodCancelledError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Payment process was cancelled.');\n\n        this.name = 'PaymentMethodCancelledError';\n        this.type = 'payment_cancelled';\n    }\n}\n","import { LineItemCategory } from '../../../cart/line-item';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { AmountTransformer } from '../../../common/utility';\nimport { Order, OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { OrderIncludes } from '../../../order/order-params';\nimport { Consignment } from '../../../shipping';\nimport { PaymentArgumentInvalidError, PaymentMethodCancelledError, PaymentMethodInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { Affirm, AffirmAddress, AffirmDiscount, AffirmFailResponse, AffirmItem, AffirmRequestData, AffirmSuccessResponse } from './affirm';\nimport AffirmScriptLoader from './affirm-script-loader';\n\nexport default class AffirmPaymentStrategy implements PaymentStrategy {\n    private _affirm?: Affirm;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _affirmScriptLoader: AffirmScriptLoader\n    ) { }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(options.methodId))\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n                if (!paymentMethod || !paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const { config: { testMode }, clientToken: publicKey } = paymentMethod;\n\n                return this._affirmScriptLoader.load(publicKey, testMode);\n            })\n            .then(affirm => {\n                this._affirm = affirm;\n\n                return this._store.getState();\n            });\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const methodId = payload.payment && payload.payment.methodId;\n        const { useStoreCredit } = payload;\n        const { _affirm } = this;\n\n        if (!_affirm) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!methodId) {\n            throw new PaymentArgumentInvalidError(['payment.methodId']);\n        }\n\n        const requestOptions = {\n            ...options,\n            params: {\n                include: [\n                    OrderIncludes.PhysicalItemsCategories,\n                    OrderIncludes.DigitalItemsCategories,\n                ],\n            },\n        };\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder({ useStoreCredit }, requestOptions))\n            .then<AffirmSuccessResponse>(() => {\n                _affirm.checkout(this._getCheckoutInformation());\n\n                return new Promise((resolve, reject) => {\n                    _affirm.checkout.open({\n                        onFail: (failObject: AffirmFailResponse) => {\n                            failObject.reason === 'canceled' ? reject(new PaymentMethodCancelledError()) : reject(new PaymentMethodInvalidError());\n                        },\n                        onSuccess: successObject => { resolve(successObject); },\n                    });\n                    _affirm.ui.error.on('close', () => {\n                        reject(new PaymentMethodCancelledError());\n                    });\n                });\n            })\n            .then(result => {\n                const paymentPayload = {\n                    methodId,\n                    paymentData: { nonce: result.checkout_token },\n                };\n\n                return this._store.dispatch(this._paymentActionCreator.submitPayment(paymentPayload));\n            });\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._affirm) {\n            this._affirm = undefined;\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _getCheckoutInformation(): AffirmRequestData {\n        const state = this._store.getState();\n        const config = state.config.getStoreConfig();\n        const consignments = state.consignments.getConsignments();\n        const order = state.order.getOrder();\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!order) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        const amountTransformer = new AmountTransformer(order.currency.decimalPlaces);\n        const billingAddress = this._getBillingAddress();\n\n        return {\n            merchant: {\n                user_confirmation_url: config.links.checkoutLink,\n                user_cancel_url: config.links.checkoutLink,\n                user_confirmation_url_action: 'POST',\n            },\n            shipping: this._getShippingAddress() || billingAddress,\n            billing: billingAddress,\n            items: this._getItems(amountTransformer, order),\n            metadata: {\n                shipping_type: this._getShippingType(consignments),\n                mode: 'modal',\n                platform_type: 'BigCommerce',\n                platform_version: '',\n                platform_affirm: '',\n            },\n            discounts: this._getDiscounts(amountTransformer, order),\n            order_id: order.orderId ? order.orderId.toString() : '',\n            shipping_amount: amountTransformer.toInteger(order.shippingCostTotal),\n            tax_amount: amountTransformer.toInteger(order.taxTotal),\n            total: amountTransformer.toInteger(order.orderAmount),\n        };\n    }\n\n    private _getShippingType(consignments?: Consignment[]): string {\n        if (!consignments) {\n            return '';\n        }\n\n        const consignment = consignments[0];\n\n        return consignment && consignment.selectedShippingOption ?\n            consignment.selectedShippingOption.type : '';\n    }\n\n    private _getBillingAddress(): AffirmAddress {\n        const state = this._store.getState();\n        const billingAddress = state.billingAddress.getBillingAddress();\n\n        if (!billingAddress) {\n            throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n        }\n\n        const billingInformation = {\n            name: {\n                first: billingAddress.firstName,\n                last: billingAddress.lastName,\n                full: `${billingAddress.firstName} ${billingAddress.lastName}`,\n            },\n            address: {\n                line1: billingAddress.address1,\n                line2: billingAddress.address2,\n                city: billingAddress.city,\n                state: billingAddress.stateOrProvinceCode,\n                zipcode: billingAddress.postalCode,\n                country: billingAddress.countryCode,\n            },\n            phone_number: billingAddress.phone,\n            email: billingAddress.email,\n        };\n\n        return billingInformation;\n    }\n\n    private _getShippingAddress(): AffirmAddress | undefined {\n        const state = this._store.getState();\n        const shippingAddress = state.shippingAddress.getShippingAddress();\n\n        if (!shippingAddress) {\n            return;\n        }\n\n        const shippingInformation = {\n            name: {\n                first: shippingAddress.firstName,\n                last: shippingAddress.lastName,\n                full: `${shippingAddress.firstName} ${shippingAddress.lastName}`,\n            },\n            address: {\n                line1: shippingAddress.address1,\n                line2: shippingAddress.address2,\n                city: shippingAddress.city,\n                state: shippingAddress.stateOrProvinceCode,\n                zipcode: shippingAddress.postalCode,\n                country: shippingAddress.countryCode,\n            },\n            phone_number: shippingAddress.phone,\n        };\n\n        return shippingInformation;\n    }\n\n    private _getItems(amountTransformer: AmountTransformer, order: Order): AffirmItem[] {\n        const items: AffirmItem[] = [];\n\n        for (const item of order.lineItems.physicalItems) {\n            items.push({\n                display_name: item.name,\n                sku: item.sku,\n                unit_price: amountTransformer.toInteger(item.salePrice),\n                qty: item.quantity,\n                item_image_url: item.imageUrl,\n                item_url: item.url,\n                categories: this._getCategories(item.categories),\n            });\n        }\n\n        for (const item of order.lineItems.digitalItems) {\n            items.push({\n                display_name: item.name,\n                sku: item.sku,\n                unit_price: amountTransformer.toInteger(item.salePrice),\n                qty: item.quantity,\n                item_image_url: item.imageUrl,\n                item_url: item.url,\n                categories: this._getCategories(item.categories),\n            });\n        }\n\n        for (const item of order.lineItems.giftCertificates) {\n            items.push({\n                display_name: item.name,\n                sku: '',\n                unit_price: amountTransformer.toInteger(item.amount),\n                qty: 1,\n                item_image_url: '',\n                item_url: '',\n            });\n        }\n\n        if (order.lineItems.customItems) {\n            for (const item of order.lineItems.customItems) {\n                items.push({\n                    display_name: item.name,\n                    sku: item.sku,\n                    unit_price: amountTransformer.toInteger(item.listPrice),\n                    qty: item.quantity,\n                    item_image_url: '',\n                    item_url: '',\n                });\n            }\n        }\n\n        return items;\n    }\n\n    private _getDiscounts(amountTransformer: AmountTransformer, order: Order): AffirmDiscount {\n        const discounts: AffirmDiscount = {};\n\n        for (const line of order.coupons) {\n            if (line.discountedAmount > 0) {\n                discounts[line.code] = {\n                    discount_amount: amountTransformer.toInteger(line.discountedAmount),\n                    discount_display_name: line.displayName,\n                };\n            }\n        }\n\n        if (order.discountAmount > 0) {\n            discounts.DISCOUNTED_AMOUNT = {\n                discount_amount: amountTransformer.toInteger(order.discountAmount),\n                discount_display_name: 'discount',\n            };\n        }\n\n        return discounts;\n    }\n\n    private _getCategories(categories?: LineItemCategory[][]): string[][] {\n        if (!categories) {\n            return[[]];\n        }\n\n        return categories.map(categoryTree => categoryTree.map(category => category.name));\n    }\n}\n","/**\n * Used this approach as Affirm uses snipped for initializing. Please refer to Affirm documentation in: https://docs.affirm.com/Integrate_Affirm/Direct_API#1._Add_Affirm.js\n */\nexport default Function(`\n'use strict';\nreturn function loadAffirmJS(apiKey, scriptURL) {\n    var _affirm_config = {\n        public_api_key:  apiKey,\n        script:          scriptURL\n    };\n    (function(l,g,m,e,a,f,b){var d,c=l[m]||{},h=document.createElement(f),n=document.getElementsByTagName(f)[0],k=function(a,b,c){return function(){a[b]._.push([c,arguments])}};c[e]=k(c,e,\"set\");d=c[e];c[a]={};c[a]._=[];d._=[];c[a][b]=k(c,a,b);a=0;for(b=\"set add save post open empty reset on off trigger ready setProduct\".split(\" \");a<b.length;a++)d[b[a]]=k(c,e,b[a]);a=0;for(b=[\"get\",\"token\",\"url\",\"items\"];a<b.length;a++)d[b[a]]=function(){};h.async=!0;h.src=g[f];n.parentNode.insertBefore(h,n);delete g[f];d(g);l[m]=c})(window,_affirm_config,\"affirm\",\"checkout\",\"ui\",\"script\",\"ready\");\n}`)();\n","import { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { Affirm, AffirmHostWindow, AffirmScripts } from './affirm';\nimport loadAffirmJS from './affirmJs';\n\nexport default class AffirmScriptLoader {\n    constructor(\n        public _window: AffirmHostWindow = window\n    ) { }\n\n    load(apikey?: string, testMode?: boolean): Promise<Affirm> {\n        const scriptURI = this._getScriptURI(testMode);\n\n        loadAffirmJS(apikey, scriptURI);\n\n        if (!this._window.affirm) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return Promise.resolve(this._window.affirm);\n    }\n\n    private _getScriptURI(testMode: boolean = false): string {\n        const SCRIPTS_DEFAULT: AffirmScripts = {\n            PROD: '//cdn1.affirm.com/js/v2/affirm.js',\n            SANDBOX: '//cdn1-sandbox.affirm.com/js/v2/affirm.js',\n        };\n\n        return testMode ? SCRIPTS_DEFAULT.SANDBOX : SCRIPTS_DEFAULT.PROD;\n    }\n}\n","import { CheckoutStore, CheckoutValidator, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { StoreCreditActionCreator } from '../../../store-credit';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport AfterpayScriptLoader from './afterpay-script-loader';\nimport AfterpaySdk from './afterpay-sdk';\n\nexport default class AfterpayPaymentStrategy implements PaymentStrategy {\n    private _afterpaySdk?: AfterpaySdk;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutValidator: CheckoutValidator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _storeCreditActionCreator: StoreCreditActionCreator,\n        private _afterpayScriptLoader: AfterpayScriptLoader\n    ) {}\n\n    async initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId, options.gatewayId);\n        const config = state.config.getStoreConfig();\n        const storeCountryName = config ? config.storeProfile.storeCountry : '';\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._afterpaySdk = await this._afterpayScriptLoader.load(paymentMethod, this._mapCountryToISO2(storeCountryName));\n\n        return this._store.getState();\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._afterpaySdk) {\n            this._afterpaySdk = undefined;\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const paymentId = payload.payment && payload.payment.gatewayId;\n\n        if (!paymentId) {\n            throw new PaymentArgumentInvalidError(['payment.gatewayId']);\n        }\n\n        let state = this._store.getState();\n        const config = state.config.getStoreConfig();\n        const storeCountryName = config ? config.storeProfile.storeCountry : '';\n        const { useStoreCredit } = payload;\n\n        if (useStoreCredit !== undefined) {\n            state = await this._store.dispatch(\n                this._storeCreditActionCreator.applyStoreCredit(useStoreCredit)\n            );\n        }\n\n        await this._checkoutValidator.validate(state.checkout.getCheckout(), options);\n\n        state = await this._store.dispatch(\n            this._paymentMethodActionCreator.loadPaymentMethod(paymentId, options)\n        );\n\n        await this._redirectToAfterpay(storeCountryName, state.paymentMethods.getPaymentMethod(paymentId));\n\n        // Afterpay will handle the rest of the flow so return a promise that doesn't really resolve\n        return new Promise<never>(() => {});\n    }\n\n    async finalize(options: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n        const config = state.config.getContextConfig();\n\n        if (!payment) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!config || !config.payment.token) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        const paymentPayload = {\n            methodId: payment.providerId,\n            paymentData: { nonce: config.payment.token },\n        };\n\n        await this._store.dispatch(this._orderActionCreator.submitOrder({}, options));\n\n        return this._store.dispatch(this._paymentActionCreator.submitPayment(paymentPayload));\n    }\n\n    private _redirectToAfterpay(countryName: string, paymentMethod?: PaymentMethod): void {\n        if (!this._afterpaySdk || !paymentMethod || !paymentMethod.clientToken) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        this._afterpaySdk.initialize({ countryCode: this._mapCountryToISO2(countryName)});\n        this._afterpaySdk.redirect({ token: paymentMethod.clientToken });\n    }\n\n    private _mapCountryToISO2(countryName: string): string {\n        switch (countryName) {\n        case 'Australia':\n            return 'AU';\n\n        case 'New Zealand':\n            return 'NZ';\n\n        case 'United States':\n            return 'US';\n\n        default:\n            return 'AU';\n        }\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport PaymentMethod from '../../payment-method';\n\nimport AfterpaySdk from './afterpay-sdk';\nimport AfterpayWindow from './afterpay-window';\n\ninterface AfterpayScripts {\n    PROD: string;\n    SANDBOX: string;\n}\n\nconst SCRIPTS_DEFAULT: AfterpayScripts = {\n    PROD: '//portal.afterpay.com/afterpay-async.js',\n    SANDBOX: '//portal-sandbox.afterpay.com/afterpay-async.js',\n};\n\nconst SCRIPTS_US: AfterpayScripts = {\n    PROD: '//portal.afterpay.com/afterpay-async.js',\n    SANDBOX: '//portal.us-sandbox.afterpay.com/afterpay-async.js',\n};\n\n/** Class responsible for loading the Afterpay SDK */\nexport default class AfterpayScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    /**\n     * Loads the appropriate Afterpay SDK depending on the payment method data.\n     * @param method the payment method data\n     */\n    load(method: PaymentMethod, countryCode: string): Promise<AfterpaySdk> {\n        const testMode = method.config.testMode || false;\n        const scriptURI = this._getScriptURI(countryCode, testMode);\n\n        return this._scriptLoader.loadScript(scriptURI)\n            .then(() => (window as unknown as AfterpayWindow).AfterPay);\n    }\n\n    private _getScriptURI(countryCode: string, testMode: boolean): string {\n        if (countryCode === 'US') {\n            return testMode ? SCRIPTS_US.SANDBOX : SCRIPTS_US.PROD;\n        }\n\n        return testMode ? SCRIPTS_DEFAULT.SANDBOX : SCRIPTS_DEFAULT.PROD;\n    }\n\n}\n","import { isEqual } from 'lodash';\n\nimport { omitPrivate } from '../common/utility';\n\nimport InternalAddress from './internal-address';\n\nexport default function isInternalAddressEqual(addressA: Partial<InternalAddress>, addressB: Partial<InternalAddress>): boolean {\n    return isEqual(normalize(addressA), normalize(addressB));\n}\n\nfunction normalize(address: Partial<InternalAddress>): Partial<InternalAddress> {\n    const ignoredKeys = ['id', 'provinceCode'];\n\n    return (Object.keys(omitPrivate(address) || {}) as Array<keyof InternalAddress>)\n        .reduce(\n            (result, key) => ignoredKeys.indexOf(key) === -1 && address[key] ?\n                { ...result, [key]: address[key] } :\n                result,\n            {}\n        );\n}\n","import isPrivate from './is-private';\nimport omitDeep from './omit-deep';\n\nexport default function omitPrivate(object: any): any {\n    return omitDeep(object, (_: any, key: string) => isPrivate(key));\n}\n","import { BillingAddress } from '../billing';\n\nimport Address from './address';\nimport InternalAddress from './internal-address';\n\nexport default function mapFromInternalAddress(address: InternalAddress): Address | BillingAddress {\n    return {\n        id: address.id,\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        address1: address.addressLine1,\n        address2: address.addressLine2,\n        city: address.city,\n        stateOrProvince: address.province,\n        stateOrProvinceCode: address.provinceCode,\n        postalCode: address.postCode,\n        country: address.country,\n        countryCode: address.countryCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    };\n}\n","import { noop } from 'lodash';\n\nimport {\n    isInternalAddressEqual,\n    mapFromInternalAddress,\n    mapToInternalAddress\n} from '../../../address';\nimport { BillingAddressActionCreator } from '../../../billing';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    RequestError\n} from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { RemoteCheckoutSynchronizationError } from '../../../remote-checkout/errors';\nimport PaymentMethod from '../../payment-method';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport AmazonPayConfirmationFlow from './amazon-pay-confirmation-flow';\nimport AmazonPayOrderReference from './amazon-pay-order-reference';\nimport AmazonPayPaymentInitializeOptions from './amazon-pay-payment-initialize-options';\nimport AmazonPayScriptLoader from './amazon-pay-script-loader';\nimport AmazonPayWallet, { AmazonPayWalletOptions } from './amazon-pay-wallet';\nimport AmazonPayWindow from './amazon-pay-window';\n\nexport default class AmazonPayPaymentStrategy implements PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _walletOptions?: AmazonPayPaymentInitializeOptions;\n    private _window: AmazonPayWindow;\n    private _isPaymentMethodSelected: boolean;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _scriptLoader: AmazonPayScriptLoader\n    ) {\n        this._window = window;\n        this._isPaymentMethodSelected = false;\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { amazon: amazonOptions, methodId } = options;\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n        if (!amazonOptions) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.amazon\" argument is not provided.');\n        }\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._walletOptions = amazonOptions;\n        this._paymentMethod = paymentMethod;\n\n        return new Promise((resolve, reject) => {\n            const onReady = () => {\n                this._createWallet(amazonOptions)\n                    .then(resolve)\n                    .catch(reject);\n            };\n\n            this._scriptLoader.loadWidget(paymentMethod, onReady)\n                .catch(reject);\n        })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        this._walletOptions = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const referenceId = this._getOrderReferenceId();\n        const sellerId = this._getMerchantId();\n\n        if (!referenceId || !sellerId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!payload.payment) {\n            throw new InvalidArgumentError('Unable to proceed because \"payload.payment.methodId\" argument is not provided.');\n        }\n\n        if (!this._isPaymentMethodSelected) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { payment: { paymentData, ...paymentPayload }, useStoreCredit = false } = payload;\n\n        if (options && this._paymentMethod && this._paymentMethod.config.is3dsEnabled) {\n            return this._processPaymentWith3ds(\n                sellerId,\n                referenceId,\n                paymentPayload.methodId,\n                useStoreCredit,\n                options\n            );\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.initializePayment(paymentPayload.methodId, { referenceId, useStoreCredit })\n        )\n            .then(() => this._store.dispatch(\n                this._orderActionCreator.submitOrder({\n                    ...payload,\n                    payment: paymentPayload,\n                }, options)\n            ))\n            .catch(error => {\n                if (error instanceof RequestError && error.body.type === 'provider_widget_error' && this._walletOptions) {\n                    return this._createWallet(this._walletOptions)\n                        .then(() => Promise.reject(error));\n                }\n\n                return Promise.reject(error);\n            });\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _getMerchantId(): string | undefined {\n        return this._paymentMethod && this._paymentMethod.config.merchantId;\n    }\n\n    private _getOrderReferenceId(): string | undefined {\n        const state = this._store.getState();\n        const amazon = state.remoteCheckout.getCheckout('amazon');\n\n        return amazon ? amazon.referenceId : undefined;\n    }\n\n    private _getOrderReferenceIdFromInitializationData(): string | undefined {\n        return this._paymentMethod ? this._paymentMethod.initializationData.orderReferenceId : undefined;\n    }\n\n    private _createWallet(options: AmazonPayPaymentInitializeOptions): Promise<AmazonPayWallet> {\n        return new Promise((resolve, reject) => {\n            const { container, onError = noop, onPaymentSelect = noop, onReady = noop } = options;\n            const referenceId = this._getOrderReferenceId() || this._getOrderReferenceIdFromInitializationData();\n            const merchantId = this._getMerchantId();\n\n            if (!document.getElementById(container)) {\n                return reject(new InvalidArgumentError('Unable to create AmazonPay Wallet widget without valid container ID.'));\n            }\n\n            if (!this._window.OffAmazonPayments) {\n                return reject(new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized));\n            }\n\n            if (!merchantId) {\n                return reject(new MissingDataError(MissingDataErrorType.MissingPaymentMethod));\n            }\n\n            const walletOptions: AmazonPayWalletOptions = {\n                amazonOrderReferenceId: referenceId,\n                design: { designMode: 'responsive' },\n                scope: 'payments:billing_address payments:shipping_address payments:widget profile',\n                sellerId: merchantId,\n                onError: error => {\n                    reject(error);\n                    onError(error);\n                },\n                onPaymentSelect: orderReference => {\n                    this._synchronizeBillingAddress()\n                        .then(() => {\n                            this._isPaymentMethodSelected = true;\n                            onPaymentSelect(orderReference);\n                        })\n                        .catch(onError);\n                },\n                onReady: orderReference => {\n                    resolve();\n                    onReady(orderReference);\n                },\n            };\n\n            if (!this._getOrderReferenceId()) {\n                walletOptions.onReady = orderReference => {\n                    this._updateOrderReference(orderReference)\n                        .then(() => {\n                            resolve();\n                            onReady(orderReference);\n                        })\n                        .catch(onError);\n                };\n            }\n\n            const widget = new this._window.OffAmazonPayments.Widgets.Wallet(walletOptions);\n\n            widget.bind(container);\n\n            return widget;\n        });\n    }\n\n    private _synchronizeBillingAddress(): Promise<InternalCheckoutSelectors> {\n        const referenceId = this._getOrderReferenceId();\n        const methodId = this._paymentMethod && this._paymentMethod.id;\n\n        if (!methodId || !referenceId) {\n            throw new RemoteCheckoutSynchronizationError();\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.initializeBilling(methodId, { referenceId })\n        )\n            .then(state => {\n                const amazon = state.remoteCheckout.getCheckout('amazon');\n                const remoteAddress = amazon && amazon.billing && amazon.billing.address;\n                const billingAddress = state.billingAddress.getBillingAddress();\n                const internalBillingAddress = billingAddress && mapToInternalAddress(billingAddress);\n\n                if (remoteAddress === false) {\n                    throw new RemoteCheckoutSynchronizationError();\n                }\n\n                if (!remoteAddress || isInternalAddressEqual(remoteAddress, internalBillingAddress || {})) {\n                    return this._store.getState();\n                }\n\n                return this._store.dispatch(\n                    this._billingAddressActionCreator.updateAddress(mapFromInternalAddress(remoteAddress))\n                );\n            });\n    }\n\n    private _updateOrderReference(orderReference: AmazonPayOrderReference): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.updateCheckout('amazon', {\n                referenceId: orderReference.getAmazonOrderReferenceId(),\n            })\n        );\n    }\n\n    private _processPaymentWith3ds(sellerId: string, referenceId: string, methodId: string, useStoreCredit: boolean, options: PaymentRequestOptions): Promise<never> {\n        return new Promise((_, reject) => {\n            if (!this._window.OffAmazonPayments) {\n                return reject(new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized));\n            }\n\n            return this._window.OffAmazonPayments.initConfirmationFlow(\n                sellerId,\n                referenceId,\n                (confirmationFlow: AmazonPayConfirmationFlow) => {\n                    return this._store.dispatch(\n                        this._orderActionCreator.submitOrder({useStoreCredit}, options)\n                    )\n                        .then(() => this._store.dispatch(\n                            this._remoteCheckoutActionCreator.initializePayment(methodId, {\n                                referenceId,\n                                useStoreCredit,\n                            }))\n                        )\n                        .then(() => {\n                            confirmationFlow.success();\n\n                            return new Promise<never>(() => {});\n                        })\n                        .catch(error => {\n                            confirmationFlow.error();\n\n                            return reject(error);\n                        });\n                }\n            );\n        });\n    }\n}\n","export interface OverlayOptions {\n    background?: string;\n    id?: string;\n    transitionDuration?: number;\n}\n\nexport interface OverlayShowOptions {\n    onClick?(event: MouseEvent): void;\n}\n\nexport default class Overlay {\n    private _element: HTMLElement;\n    private _unregisterClick?: () => void;\n\n    constructor(options?: OverlayOptions) {\n        this._element = this._createElement(options);\n    }\n\n    show(options?: OverlayShowOptions): void {\n        if (this._element.parentElement) {\n            return;\n        }\n\n        this._registerClick(options);\n\n        document.body.appendChild(this._element);\n\n        // Fade In\n        setTimeout(() => this._element.style.opacity = '1');\n    }\n\n    remove(): void {\n        if (!this._element.parentElement) {\n            return;\n        }\n\n        if (this._unregisterClick) {\n            this._unregisterClick();\n        }\n\n        this._removeAfterTransition();\n\n        setTimeout(() => this._element.style.opacity = '0');\n    }\n\n    private _createElement(options?: OverlayOptions): HTMLElement {\n        const element = document.createElement('div');\n        const {\n            background = 'rgba(0, 0, 0, 0.8)',\n            id = null,\n            transitionDuration = 400,\n        } = options || {};\n\n        element.style.background = background;\n        element.style.display = 'block';\n        element.style.height = '100%';\n        element.style.left = '0px';\n        element.style.opacity = '0';\n        element.style.position = 'fixed';\n        element.style.top = '0px';\n        element.style.transition = `opacity ${transitionDuration}ms ease-out`;\n        element.style.width = '100%';\n        element.style.zIndex = '2147483647';\n\n        if (id) {\n            element.id = id;\n        }\n\n        return element;\n    }\n\n    private _registerClick(options?: OverlayShowOptions): void {\n        if (this._unregisterClick) {\n            this._unregisterClick();\n        }\n\n        if (options && options.onClick) {\n            const { onClick } = options;\n\n            this._element.addEventListener('click', onClick);\n\n            this._unregisterClick = () => {\n                this._element.removeEventListener('click', onClick);\n                this._unregisterClick = undefined;\n            };\n        }\n    }\n\n    private _removeAfterTransition(): void {\n        const handeTransition: (event: Event) => void = event => {\n            // NOTE: `event` is not correctly typed in this version of TS\n            if ((event as TransitionEvent).propertyName !== 'opacity') {\n                return;\n            }\n\n            if (this._element.parentElement) {\n                this._element.parentElement.removeChild(this._element);\n            }\n\n            this._element.removeEventListener('transitionend', handeTransition);\n        };\n\n        this._element.addEventListener('transitionend', handeTransition);\n    }\n}\n","export default class CancellablePromise<T> {\n    promise: Promise<T>;\n    cancel!: (reason?: any) => void;\n\n    constructor(promise: Promise<T>) {\n        const cancellable = new Promise<T>((_, reject) => {\n            this.cancel = reject;\n        });\n\n        this.promise = Promise.race([promise, cancellable]);\n    }\n}\n","import { Address } from '../../../address';\nimport { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { Overlay } from '../../../common/overlay';\nimport { CancellablePromise } from '../../../common/utility';\nimport { OrderPaymentRequestBody } from '../../../order';\nimport { PaymentMethodCancelledError } from '../../errors';\nimport { CreditCardInstrument, NonceInstrument } from '../../payment';\n\nimport { BraintreePaypal, BraintreeRequestData } from './braintree';\nimport { BraintreePaymentInitializeOptions, BraintreeThreeDSecureOptions } from './braintree-payment-options';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\n\nexport default class BraintreePaymentProcessor {\n    private _threeDSecureOptions?: BraintreeThreeDSecureOptions;\n\n    constructor(\n        private _braintreeSDKCreator: BraintreeSDKCreator,\n        private _overlay: Overlay\n    ) {}\n\n    initialize(clientToken: string, options?: BraintreePaymentInitializeOptions): void {\n        this._braintreeSDKCreator.initialize(clientToken);\n        this._threeDSecureOptions = options && options.threeDSecure;\n    }\n\n    preloadPaypal(): Promise<BraintreePaypal> {\n        return this._braintreeSDKCreator.getPaypal();\n    }\n\n    tokenizeCard(payment: OrderPaymentRequestBody, billingAddress: Address): Promise<NonceInstrument> {\n        const { paymentData } = payment;\n        const requestData = this._mapToCreditCard(paymentData as CreditCardInstrument, billingAddress);\n\n        return this._braintreeSDKCreator.getClient()\n            .then(client => client.request(requestData))\n            .then(({ creditCards }) => ({\n                nonce: creditCards[0].nonce,\n            }));\n    }\n\n    paypal(amount: number, storeLanguage: string, currency: string, offerCredit: boolean): Promise<NonceInstrument> {\n        return this._braintreeSDKCreator.getPaypal()\n            .then(paypal => {\n                this._overlay.show({\n                    onClick: () => paypal.focusWindow(),\n                });\n\n                return paypal.tokenize({\n                    amount,\n                    currency,\n                    enableShippingAddress: true,\n                    flow: 'checkout',\n                    locale: storeLanguage,\n                    offerCredit,\n                    useraction: 'commit',\n                });\n            })\n            .then(response => {\n                this._overlay.remove();\n\n                return response;\n            })\n            .catch(error => {\n                this._overlay.remove();\n\n                throw error;\n            });\n    }\n\n    verifyCard(payment: OrderPaymentRequestBody, billingAddress: Address, amount: number): Promise<NonceInstrument> {\n        if (!this._threeDSecureOptions) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const { addFrame, removeFrame } = this._threeDSecureOptions;\n\n        return Promise.all([\n            this.tokenizeCard(payment, billingAddress),\n            this._braintreeSDKCreator.get3DS(),\n        ]).then(([paymentData, threeDSecure]) => {\n            const { nonce } = paymentData;\n            const cancelVerifyCard = () => threeDSecure.cancelVerifyCard()\n                .then(response => {\n                    verification.cancel(new PaymentMethodCancelledError());\n\n                    return response;\n                });\n\n            const verification = new CancellablePromise(\n                threeDSecure.verifyCard({\n                    addFrame: (error, iframe) => {\n                        addFrame(error, iframe, cancelVerifyCard);\n                    },\n                    amount,\n                    nonce,\n                    removeFrame,\n                })\n            );\n\n            return verification.promise;\n        });\n    }\n\n    appendSessionId(processedPayment: Promise<NonceInstrument>): Promise<NonceInstrument> {\n        return processedPayment\n            .then(paymentData => Promise.all([paymentData, this._braintreeSDKCreator.getDataCollector()]))\n            .then(([paymentData, { deviceData }]) => ({ ...paymentData, deviceSessionId: deviceData }));\n    }\n\n    deinitialize(): Promise<void> {\n        return this._braintreeSDKCreator.teardown();\n    }\n\n    private _mapToCreditCard(creditCard: CreditCardInstrument, billingAddress: Address): BraintreeRequestData {\n        let streetAddress = billingAddress.address1;\n\n        if (billingAddress.address2) {\n            streetAddress = ` ${billingAddress.address2}`;\n        }\n\n        return {\n            data: {\n                creditCard: {\n                    cardholderName: creditCard.ccName,\n                    number: creditCard.ccNumber,\n                    cvv: creditCard.ccCvv,\n                    expirationDate: `${creditCard.ccExpiry.month}/${creditCard.ccExpiry.year}`,\n                    options: {\n                        validate: false,\n                    },\n                    billingAddress: {\n                        countryName: billingAddress.country,\n                        postalCode: billingAddress.postalCode,\n                        streetAddress,\n                    },\n                },\n            },\n            endpoint: 'payment_methods/credit_cards',\n            method: 'post',\n        };\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * This error should be thrown when a payment method experiences some kind of\n * failure (i.e.: its client library returns a rejected promise). And there is\n * no other error type that is more specific than this one.\n */\nexport default class PaymentMethodFailedError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Unable to proceed because the client library of a payment method has thrown an unexpected error.');\n\n        this.name = 'PaymentMethodFailedError';\n        this.type = 'payment_method_client_invalid';\n    }\n}\n","import isVaultedInstrument from './is-vaulted-instrument';\nimport { CreditCardInstrument, PaymentInstrument } from './payment';\n\nexport default function isCreditCardLike(instrument: PaymentInstrument): instrument is CreditCardInstrument {\n    const card = instrument as CreditCardInstrument;\n\n    return !isVaultedInstrument(card) &&\n        typeof card.ccName === 'string' &&\n        typeof card.ccNumber === 'string' &&\n        typeof card.ccExpiry === 'object' &&\n        typeof card.ccExpiry.month === 'string' &&\n        typeof card.ccExpiry.year === 'string';\n    }\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError, PaymentMethodFailedError } from '../../errors';\nimport isCreditCardLike from '../../is-credit-card-like';\nimport isVaultedInstrument from '../../is-vaulted-instrument';\nimport Payment, { PaymentInstrument } from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport BraintreePaymentProcessor from './braintree-payment-processor';\n\nexport default class BraintreeCreditCardPaymentStrategy implements PaymentStrategy {\n    private _is3dsEnabled?: boolean;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _braintreePaymentProcessor: BraintreePaymentProcessor\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(options.methodId))\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n                if (!paymentMethod || !paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                this._braintreePaymentProcessor.initialize(paymentMethod.clientToken, options.braintree);\n                this._is3dsEnabled = paymentMethod.config.is3dsEnabled;\n\n                return this._store.getState();\n            })\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        return this._store.dispatch(\n            this._orderActionCreator.submitOrder(order, options)\n        )\n            .then(state =>\n                state.payment.isPaymentDataRequired(order.useStoreCredit) && payment ?\n                    this._preparePaymentData(payment) :\n                    Promise.resolve(payment as Payment)\n            )\n            .then(payment =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment(payment))\n            )\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return this._braintreePaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    private _handleError(error: Error): never {\n        if (error.name === 'BraintreeError') {\n            throw new PaymentMethodFailedError(error.message);\n        }\n\n        throw error;\n    }\n\n    private _isUsingVaulting(paymentData: PaymentInstrument): boolean {\n        if (isCreditCardLike(paymentData)) {\n            return Boolean(paymentData.shouldSaveInstrument);\n        }\n\n        return isVaultedInstrument(paymentData);\n    }\n\n    private _preparePaymentData(payment: OrderPaymentRequestBody): Promise<Payment> {\n        const { paymentData } = payment;\n        const state = this._store.getState();\n\n        if (paymentData && this._isUsingVaulting(paymentData)) {\n            return Promise.resolve(payment as Payment);\n        }\n\n        const order = state.order.getOrder();\n        const billingAddress = state.billingAddress.getBillingAddress();\n\n        if (!order) {\n            throw new MissingDataError(MissingDataErrorType.MissingOrder);\n        }\n\n        if (!billingAddress) {\n            throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n        }\n\n        const tokenizedCard = this._is3dsEnabled ?\n            this._braintreePaymentProcessor.verifyCard(payment, billingAddress, order.orderAmount) :\n            this._braintreePaymentProcessor.tokenizeCard(payment, billingAddress);\n\n        return this._braintreePaymentProcessor.appendSessionId(tokenizedCard)\n            .then(paymentData => ({ ...payment, paymentData }));\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError, PaymentMethodCancelledError, PaymentMethodFailedError } from '../../errors';\nimport Payment from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { BraintreeError } from './braintree';\nimport BraintreePaymentProcessor from './braintree-payment-processor';\nimport isBraintreeError from './is-braintree-error';\n\nexport default class BraintreePaypalPaymentStrategy implements PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _braintreePaymentProcessor: BraintreePaymentProcessor,\n        private _credit: boolean = false\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { braintree: braintreeOptions, methodId } = options;\n\n        this._paymentMethod = this._store.getState().paymentMethods.getPaymentMethod(methodId);\n\n        if (this._paymentMethod && this._paymentMethod.nonce) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                this._braintreePaymentProcessor.initialize(this._paymentMethod.clientToken, braintreeOptions);\n\n                return this._braintreePaymentProcessor.preloadPaypal();\n            })\n            .then(() => this._store.getState())\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        return (payment ? this._preparePaymentData(payment, order.useStoreCredit) : Promise.resolve(payment))\n            .then(payment => Promise.all([payment, this._store.dispatch(this._orderActionCreator.submitOrder(order, options))]))\n            .then(([payment]) => this._store.dispatch(this._paymentActionCreator.submitPayment(payment)))\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return this._braintreePaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    private _handleError(error: BraintreeError | Error): never {\n        if (!isBraintreeError(error)) {\n            throw error;\n        }\n\n        if (error.code === 'PAYPAL_POPUP_CLOSED') {\n            throw new PaymentMethodCancelledError(error.message);\n        }\n\n        throw new PaymentMethodFailedError(error.message);\n    }\n\n    private _preparePaymentData(payment: OrderPaymentRequestBody, useStoreCredit?: boolean): Promise<Payment> {\n        const state = this._store.getState();\n        const grandTotal = state.checkout.getOutstandingBalance(useStoreCredit);\n        const config = state.config.getStoreConfig();\n\n        if (!grandTotal) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!this._paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const { currency, storeProfile: { storeLanguage } } = config;\n        const { method, nonce } = this._paymentMethod;\n\n        if (nonce) {\n            return Promise.resolve({ ...payment, paymentData: { nonce, method } });\n        }\n\n        const tokenizedCard = this._braintreePaymentProcessor\n            .paypal(grandTotal, storeLanguage, currency.code, this._credit);\n\n        return this._braintreePaymentProcessor.appendSessionId(tokenizedCard)\n            .then(paymentData => ({ ...payment, paymentData: { ...paymentData, method } }));\n    }\n}\n","export const CardinalSignatureValidationErrors = [100004, 1010, 1011, 1020];\n\nexport interface CardinalSDK {\n    configure(params: CardinalConfiguration): void;\n    on(params: CardinalEventType, callback: CardinalEventMap[CardinalEventType]): void;\n    off(params: CardinalEventType): void;\n    setup<K extends keyof CardinalInitializationDataMap>(initializationType: K, initializationData: CardinalInitializationDataMap[K]): void;\n    trigger(event: CardinalTriggerEvents, data?: string): Promise<CardinalBinProcessResponse | void>;\n    continue(paymentBrand: CardinalPaymentBrand, continueObject: CardinalContinue, order: CardinalPartialOrder): void;\n    start(paymentBrand: CardinalPaymentBrand, order: CardinalPartialOrder, jwt?: string): void;\n}\n\nexport interface CardinalWindow extends Window {\n    Cardinal?: CardinalSDK;\n}\n\nexport interface CardinalEventMap {\n    [CardinalEventType.SetupCompleted](setupCompleteData: CardinalSetupCompletedData): void;\n    [CardinalEventType.Validated](data: CardinalValidatedData, jwt?: string): void;\n}\n\nexport type CardinalConfiguration = Partial<{\n    logging: {\n        level: string;\n    };\n    payment: {\n        view: string;\n        framework: string;\n        displayLoading: boolean;\n    };\n}>;\n\nexport interface CardinalSetupCompletedData {\n    sessionId: string;\n    modules: CardinalModuleState[];\n}\n\nexport interface CardinalModuleState {\n    loaded: boolean;\n    module: string;\n}\n\nexport enum CardinalInitializationType {\n    Init = 'init',\n    Complete = 'complete',\n    Confirm = 'confirm',\n}\n\nexport interface CardinalInitializationDataMap {\n    [CardinalInitializationType.Init]: CardinalInitTypeData;\n    [CardinalInitializationType.Complete]: CardinalCompleteTypeData;\n    [CardinalInitializationType.Confirm]: CardinalConfirmTypeData;\n}\n\nexport interface CardinalInitTypeData {\n    jwt: string;\n}\n\nexport interface CardinalCompleteTypeData {\n    Status: string;\n}\n\nexport interface CardinalConfirmTypeData {\n    jwt: string;\n    cardinalResponseJwt: string;\n}\n\nexport interface CardinalValidatedData {\n    ActionCode?: CardinalValidatedAction;\n    ErrorDescription: string;\n    ErrorNumber: number;\n    Validated: boolean;\n    Payment?: CardinalPayment;\n}\n\nexport interface CardinalPayment {\n    ExtendedData?: CardinalCCAExtendedData;\n    ProcessorTransactionId: string;\n    Type: CardinalPaymentType;\n}\n\nexport interface CardinalBinProcessResponse {\n    Status: boolean;\n}\n\nexport interface CardinalContinue {\n    AcsUrl: string;\n    Payload: string;\n}\n\nexport interface CardinalPartialOrder {\n    OrderDetails: CardinalOrderDetails;\n    Consumer?: CardinalConsumer;\n}\n\nexport interface CardinalConsumer {\n    Email1?: string;\n    Email2?: string;\n    ShippingAddress?: CardinalAddress;\n    BillingAddress?: CardinalAddress;\n    Account?: CardinalAccount;\n}\n\nexport interface CardinalAccount {\n    AccountNumber: number;\n    ExpirationMonth: number;\n    ExpirationYear: number;\n    NameOnAccount: string;\n    CardCode: number;\n}\n\nexport interface CardinalAddress {\n    FullName?: string;\n    FirstName: string;\n    MiddleName?: string;\n    LastName: string;\n    Address1: string;\n    Address2?: string;\n    Address3?: string;\n    City: string;\n    State: string;\n    PostalCode: string;\n    CountryCode: string;\n    Phone1?: string;\n    Phone2?: string;\n}\n\nexport interface CardinalOrderDetails {\n    OrderNumber: string;\n    Amount: number;\n    CurrencyCode: string;\n    OrderDescription?: string;\n    OrderChannel: string;\n    TransactionId?: string;\n}\n\nexport type CardinalCCAExtendedData = Partial<{\n    CAVV: string;\n    ECIFlag: string;\n    PAResStatus: string;\n    SignatureVerification: string;\n    XID: string;\n    UCAFIndicator: string;\n}>;\n\nexport enum CardinalEventType {\n    SetupCompleted = 'payments.setupComplete',\n    Validated = 'payments.validated',\n}\n\nexport enum CardinalValidatedAction {\n    Success = 'SUCCESS',\n    NoAction = 'NOACTION',\n    Failure = 'FAILURE',\n    Error = 'ERROR',\n}\n\nexport enum CardinalPaymentType {\n    CCA = 'CCA',\n    Paypal = 'Paypal',\n    Wallet = 'Wallet',\n    VisaCheckout = 'VisaCheckout',\n    ApplePay = 'ApplePay',\n    DiscoverWallet = 'DiscoverWallet',\n}\n\nexport enum CardinalTriggerEvents {\n    BinProcess = 'bin.process',\n}\n\nexport enum CardinalPaymentBrand {\n    CCA = 'cca',\n}\n\nexport enum CardinalSignatureVerification {\n    Yes = 'Y',\n    No = 'N',\n}\n","import { BraintreeError } from './braintree';\n\nexport default function isBraintreeError(error: BraintreeError | Error): error is BraintreeError {\n    return error.name === 'BraintreeError';\n}\n","import { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentMethodFailedError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategyActionCreator from '../../payment-strategy-action-creator';\nimport PaymentStrategy from '../payment-strategy';\n\nimport BraintreeVisaCheckoutPaymentProcessor from './braintree-visacheckout-payment-processor';\nimport { VisaCheckoutPaymentSuccessPayload } from './visacheckout';\nimport VisaCheckoutScriptLoader from './visacheckout-script-loader';\n\nexport default class BraintreeVisaCheckoutPaymentStrategy implements PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _braintreeVisaCheckoutPaymentProcessor: BraintreeVisaCheckoutPaymentProcessor,\n        private _visaCheckoutScriptLoader: VisaCheckoutScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { braintreevisacheckout: visaCheckoutOptions, methodId } = options;\n\n        if (!visaCheckoutOptions) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.braintreevisacheckout\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                const checkout = state.checkout.getCheckout();\n                const storeConfig = state.config.getStoreConfig();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const {\n                    onError = () => {},\n                    onPaymentSelect = () => {},\n                } = visaCheckoutOptions;\n\n                const initOptions = {\n                    locale: storeConfig.storeProfile.storeLanguage,\n                    collectShipping: false,\n                    subtotal: checkout.subtotal,\n                    currencyCode: storeConfig.currency.code,\n                };\n\n                return Promise.all([\n                    this._visaCheckoutScriptLoader.load(this._paymentMethod.config.testMode),\n                    this._braintreeVisaCheckoutPaymentProcessor.initialize(this._paymentMethod.clientToken, initOptions),\n                ])\n                .then(([visaCheckout, visaInitOptions]) => {\n                    visaCheckout.init(visaInitOptions);\n                    visaCheckout.on('payment.success', (paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) =>\n                        this._paymentInstrumentSelected(paymentSuccessPayload)\n                            .then(() => onPaymentSelect())\n                            .catch(error => onError(error))\n                    );\n                    visaCheckout.on('payment.error', (_, error) => onError(error));\n                });\n            })\n            .then(() => this._store.getState());\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new InvalidArgumentError('Unable to submit payment because \"payload.payment\" argument is not provided.');\n        }\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData || !this._paymentMethod.initializationData.nonce) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { nonce } = this._paymentMethod.initializationData;\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData: { nonce } }))\n            )\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return this._braintreeVisaCheckoutPaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    private _paymentInstrumentSelected(paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) {\n        const state = this._store.getState();\n\n        if (!this._paymentMethod) {\n            throw new Error('Payment method not initialized');\n        }\n\n        const { id: methodId } = this._paymentMethod;\n\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            return this._braintreeVisaCheckoutPaymentProcessor.handleSuccess(\n                paymentSuccessPayload,\n                state.shippingAddress.getShippingAddress(),\n                state.billingAddress.getBillingAddress()\n            )\n            .then(() => Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId)),\n            ]));\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _handleError(error: Error): never {\n        if (error.name === 'BraintreeError') {\n            throw new PaymentMethodFailedError(error.message);\n        }\n\n        throw error;\n    }\n}\n","import { find, some } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    RequestError\n} from '../../../common/error/errors';\nimport isCreditCardLike from '../../is-credit-card-like';\nimport isVaultedInstrument from '../../is-vaulted-instrument';\nimport Payment from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\n\nimport {\n    CardinalClient,\n    CardinalOrderData,\n    CardinalSupportedPaymentInstrument\n} from './index';\n\nexport default class CardinalThreeDSecureFlow {\n    private _paymentMethod?: PaymentMethod;\n    private _clientToken?: string;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _cardinalClient: CardinalClient\n    ) {}\n\n    prepare(methodId: string): Promise<void> {\n        if (this._clientToken) {\n            return Promise.resolve();\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod || !this._paymentMethod.config) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                return this._cardinalClient.initialize(methodId, this._paymentMethod.config.testMode);\n            })\n            .then(() => {\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                this._clientToken = this._paymentMethod.clientToken;\n\n                return this._cardinalClient.configure(this._clientToken);\n            });\n    }\n\n    start(payment: Payment): Promise<InternalCheckoutSelectors> {\n        if (!payment.paymentData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        if (!isCreditCardLike(payment.paymentData) && !isVaultedInstrument(payment.paymentData)) {\n            throw new InvalidArgumentError();\n        }\n\n        const paymentData = payment.paymentData;\n\n        return this._cardinalClient.runBinProcess(this._getBinNumber(paymentData))\n            .then(() => {\n                if (!this._clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                payment = {\n                    ...payment,\n                    paymentData: {\n                        ...paymentData,\n                        threeDSecure: { token: this._clientToken },\n                    },\n                };\n\n                return this._store.dispatch(this._paymentActionCreator.submitPayment(payment));\n            })\n            .catch(error => {\n                if (!(error instanceof RequestError) || !some(error.body.errors, {code: 'three_d_secure_required'})) {\n                    return Promise.reject(error);\n                }\n\n                return this._cardinalClient.getThreeDSecureData(\n                    error.body.three_ds_result,\n                    this._getOrderData(paymentData)\n                )\n                .then(threeDSecure =>\n                    this._store.dispatch(this._paymentActionCreator.submitPayment({\n                        ...payment,\n                        paymentData: {\n                            ...paymentData,\n                            threeDSecure,\n                        },\n                    }))\n                );\n            });\n    }\n\n    private _getBinNumber(payment: CardinalSupportedPaymentInstrument): string {\n        if (isVaultedInstrument(payment)) {\n            const instruments = this._store.getState().instruments.getInstruments();\n\n            const { instrumentId } = payment;\n\n            const entry = find(instruments, { bigpayToken: instrumentId });\n\n            return entry && entry.iin || '';\n        }\n\n        return payment.ccNumber;\n    }\n\n    private _getOrderData(paymentData: CardinalSupportedPaymentInstrument): CardinalOrderData {\n        const state = this._store.getState();\n        const billingAddress = state.billingAddress.getBillingAddress();\n        const shippingAddress = state.shippingAddress.getShippingAddress();\n        const checkout = state.checkout.getCheckout();\n        const order = state.order.getOrder();\n\n        if (!billingAddress || !billingAddress.email) {\n            throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n        }\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!order) {\n            throw new MissingDataError(MissingDataErrorType.MissingOrder);\n        }\n\n        const payment: CardinalOrderData = {\n            billingAddress,\n            shippingAddress,\n            currencyCode: checkout.cart.currency.code,\n            id: order.orderId.toString(),\n            amount: checkout.cart.cartAmount,\n        };\n\n        if (isCreditCardLike(paymentData)) {\n            payment.paymentData = paymentData;\n        }\n\n        return payment;\n    }\n}\n","import { includes } from 'lodash';\n\nimport { Address } from '../../../address';\nimport { BillingAddress } from '../../../billing';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { PaymentMethodFailedError } from '../../errors';\nimport { CreditCardInstrument, ThreeDSecureToken, VaultedInstrument } from '../../payment';\nimport { ThreeDsResult } from '../../payment-response-body';\n\nimport {\n    CardinalAccount,\n    CardinalAddress,\n    CardinalConsumer,\n    CardinalEventType,\n    CardinalInitializationType,\n    CardinalPartialOrder,\n    CardinalPaymentBrand,\n    CardinalScriptLoader,\n    CardinalSignatureValidationErrors,\n    CardinalSignatureVerification,\n    CardinalSDK,\n    CardinalTriggerEvents,\n    CardinalValidatedAction,\n    CardinalValidatedData\n} from './index';\n\nexport type CardinalSupportedPaymentInstrument = CreditCardInstrument | VaultedInstrument;\n\nexport interface CardinalOrderData {\n    billingAddress: BillingAddress;\n    shippingAddress?: Address;\n    currencyCode: string;\n    id: string;\n    amount: number;\n    paymentData?: CreditCardInstrument;\n}\n\nexport default class CardinalClient {\n    private _sdk?: Promise<CardinalSDK>;\n\n    constructor(\n        private _scriptLoader: CardinalScriptLoader\n    ) {}\n\n    initialize(provider: string, testMode?: boolean): Promise<void> {\n        if (!this._sdk) {\n            this._sdk = this._scriptLoader.load(provider, testMode);\n        }\n\n        return this._sdk.then(() => {});\n    }\n\n    configure(clientToken: string): Promise<void> {\n        return this._getClientSDK()\n            .then(client => new Promise<void>((resolve, reject) => {\n                client.on(CardinalEventType.SetupCompleted, () => {\n                    client.off(CardinalEventType.SetupCompleted);\n                    client.off(CardinalEventType.Validated);\n\n                    resolve();\n                });\n\n                client.on(CardinalEventType.Validated, (data: CardinalValidatedData) => {\n                    client.off(CardinalEventType.SetupCompleted);\n                    client.off(CardinalEventType.Validated);\n\n                    switch (data.ActionCode) {\n                        case CardinalValidatedAction.Error:\n                            if (includes(CardinalSignatureValidationErrors, data.ErrorNumber)) {\n                                reject(new MissingDataError(MissingDataErrorType.MissingPaymentMethod));\n                            }\n                            reject(new PaymentMethodFailedError(data.ErrorDescription));\n                            break;\n                    }\n                });\n\n                client.setup(CardinalInitializationType.Init, {\n                    jwt: clientToken,\n                });\n            }));\n    }\n\n    runBinProcess(binNumber: string): Promise<void> {\n        return this._getClientSDK()\n            .then(client => client.trigger(CardinalTriggerEvents.BinProcess, binNumber).catch(() => {}))\n            .then(result => {\n                if (!result || !result.Status) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n            });\n    }\n\n    getThreeDSecureData(threeDSecureData: ThreeDsResult, orderData: CardinalOrderData): Promise<ThreeDSecureToken> {\n        return this._getClientSDK()\n            .then(client => {\n                return new Promise<ThreeDSecureToken>((resolve, reject) => {\n                    client.on(CardinalEventType.Validated, (data: CardinalValidatedData, jwt?: string) => {\n                        client.off(CardinalEventType.Validated);\n                        if (!jwt) {\n                            return reject(new PaymentMethodFailedError(data.ErrorDescription ? data.ErrorDescription : 'An error was encountered while processing the transaction.'));\n                        }\n\n                        if (!data.ActionCode) {\n                            return resolve({ token: jwt });\n                        }\n\n                        switch (data.ActionCode) {\n                            case CardinalValidatedAction.Success:\n                                return resolve({ token: jwt });\n                            case CardinalValidatedAction.NoAction:\n                                if (data.ErrorNumber > 0) {\n                                    return reject(new PaymentMethodFailedError(data.ErrorDescription));\n                                } else if (!data.Payment || !data.Payment.ExtendedData || data.Payment.ExtendedData.SignatureVerification !== CardinalSignatureVerification.Yes) {\n                                    return reject(new PaymentMethodFailedError('Transaction signature could not be validated.'));\n                                }\n\n                                return resolve({ token: jwt });\n                            case CardinalValidatedAction.Failure:\n                                return reject(new PaymentMethodFailedError('User failed authentication or an error was encountered while processing the transaction.'));\n                            case CardinalValidatedAction.Error:\n                                return reject(new PaymentMethodFailedError(data.ErrorDescription));\n                        }\n                    });\n\n                    const continueObject = {\n                        AcsUrl: threeDSecureData.acs_url,\n                        Payload: threeDSecureData.merchant_data,\n                    };\n\n                    const partialOrder = this._mapToPartialOrder(orderData, threeDSecureData.payer_auth_request);\n\n                    client.continue(CardinalPaymentBrand.CCA, continueObject, partialOrder);\n                });\n            });\n    }\n\n    private _mapToPartialOrder(orderData: CardinalOrderData, transactionId: string): CardinalPartialOrder {\n        const consumer: CardinalConsumer = {\n            BillingAddress: this._mapToCardinalAddress(orderData.billingAddress),\n        };\n\n        if (orderData.paymentData) {\n            consumer.Account = this._mapToCardinalAccount(orderData.paymentData);\n        }\n\n        if (orderData.billingAddress.email) {\n            consumer.Email1 = orderData.billingAddress.email;\n        }\n\n        if (orderData.shippingAddress) {\n            consumer.ShippingAddress = this._mapToCardinalAddress(orderData.shippingAddress);\n        }\n\n        return  {\n            Consumer: consumer,\n            OrderDetails: {\n                OrderNumber: orderData.id,\n                Amount: orderData.amount,\n                CurrencyCode: orderData.currencyCode,\n                OrderChannel: 'S',\n                TransactionId: transactionId,\n            },\n        };\n    }\n\n    private _mapToCardinalAccount(paymentData: CreditCardInstrument): CardinalAccount {\n        return {\n            AccountNumber: Number(paymentData.ccNumber),\n            ExpirationMonth: Number(paymentData.ccExpiry.month),\n            ExpirationYear: Number(paymentData.ccExpiry.year),\n            NameOnAccount: paymentData.ccName,\n            CardCode: Number(paymentData.ccCvv),\n        };\n    }\n\n    private _mapToCardinalAddress(address: Address): CardinalAddress {\n        const cardinalAddress: CardinalAddress = {\n            FirstName: address.firstName,\n            LastName: address.lastName,\n            Address1: address.address1,\n            City: address.city,\n            State: address.stateOrProvince,\n            PostalCode: address.postalCode,\n            CountryCode: address.countryCode,\n        };\n\n        if (address.address2) {\n            cardinalAddress.Address2 = address.address2;\n        }\n\n        if (address.phone) {\n            cardinalAddress.Phone1 = address.phone;\n        }\n\n        return cardinalAddress;\n    }\n\n    private _getClientSDK(): Promise<CardinalSDK> {\n        if (!this._sdk) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._sdk;\n    }\n}\n","export enum ChasePayEventType {\n    StartCheckout = 'startCheckout',\n    CompleteCheckout = 'completeCheckout',\n    CancelCheckout = 'cancelCheckout',\n}\n\nexport interface ChasePayEventMap {\n    [ChasePayEventType.StartCheckout](digitalSessionId: string): void;\n    [ChasePayEventType.CompleteCheckout](payload: ChasePaySuccessPayload): void;\n    [ChasePayEventType.CancelCheckout](): void;\n}\n\nexport interface ChasePayHostWindow extends Window {\n    JPMC?: JPMC;\n}\n\nexport interface JPMC {\n    ChasePay: ChasePay;\n}\n\nexport interface ChasePaySuccessPayload {\n    sessionToken: string;\n}\n\nexport interface ChasePayInsertOptions {\n    color?: string;\n    containers?: string[];\n    height?: number;\n    width?: number;\n}\n\nexport interface ChasePayConfigureOptions {\n    language?: string;\n    zindex?: number;\n    sessionWarningTime?: number;\n    sessionTimeoutTime?: number;\n}\n\nexport interface ChasePay {\n    EventType: {\n        START_CHECKOUT: ChasePayEventType.StartCheckout;\n        COMPLETE_CHECKOUT: ChasePayEventType.CompleteCheckout;\n        CANCEL_CHECKOUT: ChasePayEventType.CancelCheckout;\n    };\n    isChasePayUp(): boolean;\n    insertButtons(options: ChasePayInsertOptions): void;\n    insertBrandings(options: ChasePayInsertOptions): void;\n    startCheckout(digitalSessionId?: string): void;\n    showLoadingAnimation(): void;\n    configure(options: ChasePayConfigureOptions): void;\n    on<ChasePayEventType extends keyof ChasePayEventMap>(eventType: ChasePayEventType, callback: ChasePayEventMap[ChasePayEventType]): {};\n}\n\nexport interface ChasePayInitializeOptions {\n    /**\n     * This container is used to host the chasepay branding logo.\n     * It should be an HTML element.\n     */\n    logoContainer: string;\n\n    /**\n     * This walletButton is used to set an event listener, provide an element ID if you want\n     * users to be able to launch the ChasePay wallet modal by clicking on a button.\n     * It should be an HTML element.\n     */\n    walletButton?: string;\n\n    /**\n     * A callback that gets called when the customer selects a payment option.\n     */\n    onPaymentSelect?(): void;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { CardinalSDK, CardinalWindow } from './cardinal';\n\nconst SDK_TEST_URL = 'https://songbirdstag.cardinalcommerce.com/edge/v1/songbird.js';\nconst SDK_PROD_URL = 'https://songbird.cardinalcommerce.com/edge/v1/songbird.js';\n\nexport default class CardinalScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: CardinalWindow = window\n    ) {}\n\n    load(provider: string, testMode?: boolean): Promise<CardinalSDK> {\n        const url = testMode ? SDK_TEST_URL : SDK_PROD_URL;\n\n        return this._scriptLoader\n            .loadScript(url + '?v=' + provider)\n            .then(() => {\n                if (!this._window.Cardinal) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.Cardinal;\n            });\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { Subject } from 'rxjs';\nimport { take } from 'rxjs/operators';\n\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentMethodCancelledError } from '../../errors';\nimport Payment from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategyActionCreator from '../../payment-strategy-action-creator';\nimport PaymentStrategy from '../payment-strategy';\nimport { WepayRiskClient } from '../wepay';\n\nimport { ChasePay, ChasePayEventType, ChasePaySuccessPayload } from './chasepay';\nimport ChasePayInitializeOptions from './chasepay-initialize-options';\nimport ChasePayScriptLoader from './chasepay-script-loader';\n\nexport default class ChasePayPaymentStrategy implements PaymentStrategy {\n    private _chasePayClient?: ChasePay;\n    private _methodId!: string;\n    private _walletButton?: HTMLElement;\n    private _walletEvent$: Subject<{ type: ChasePayEventType }>;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _requestSender: RequestSender,\n        private _chasePayScriptLoader: ChasePayScriptLoader,\n        private _wepayRiskClient: WepayRiskClient\n    ) {\n        this._walletEvent$ = new Subject();\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._methodId = options.methodId;\n\n        if (!options.chasepay) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.chasepay\" argument is not provided.');\n        }\n\n        const walletButton = options.chasepay.walletButton && document.getElementById(options.chasepay.walletButton);\n\n        if (walletButton) {\n            this._walletButton = walletButton;\n            this._walletButton.addEventListener('click', this._handleWalletButtonClick);\n        }\n\n        return this._configureWallet(options.chasepay)\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._walletButton) {\n            this._walletButton.removeEventListener('click', this._handleWalletButtonClick);\n        }\n\n        this._walletButton = undefined;\n        this._chasePayClient = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._getPayment()\n            .catch(error => {\n                if (error.subtype === MissingDataErrorType.MissingPayment) {\n                    return this._displayWallet()\n                        .then(() => this._getPayment());\n                }\n\n                throw error;\n            })\n            .then(payment =>\n                this._createOrder(payment, payload.useStoreCredit, options)\n            );\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _configureWallet(options: ChasePayInitializeOptions): Promise<void> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n        const storeConfig = state.config.getStoreConfig();\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (!storeConfig) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        return this._chasePayScriptLoader.load(paymentMethod.config.testMode)\n            .then(({ ChasePay }) => {\n                this._chasePayClient = ChasePay;\n\n                if (options.logoContainer && document.getElementById(options.logoContainer)) {\n                    this._chasePayClient.insertBrandings({\n                        color: 'white',\n                        containers: [options.logoContainer],\n                    });\n                }\n\n                this._chasePayClient.configure({\n                    language: storeConfig.storeProfile.storeLanguage,\n                });\n\n                this._chasePayClient.on(ChasePayEventType.CancelCheckout, () => {\n                    this._walletEvent$.next({ type: ChasePayEventType.CancelCheckout });\n\n                    if (options.onCancel) {\n                        options.onCancel();\n                    }\n                });\n\n                this._chasePayClient.on(ChasePayEventType.CompleteCheckout, (payload: ChasePaySuccessPayload) => {\n                    this._setSessionToken(payload.sessionToken)\n                        .then(() => {\n                            this._walletEvent$.next({ type: ChasePayEventType.CompleteCheckout });\n\n                            if (options.onPaymentSelect) {\n                                options.onPaymentSelect();\n                            }\n                        });\n                });\n            });\n    }\n\n    private _displayWallet(): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(this._methodId))\n                .then(state => {\n                    const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n\n                    if (!this._chasePayClient) {\n                        throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                    }\n\n                    if (!paymentMethod) {\n                        throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                    }\n\n                    this._chasePayClient.showLoadingAnimation();\n                    this._chasePayClient.startCheckout(paymentMethod.initializationData.digitalSessionId);\n                });\n\n            // Wait for payment selection\n            return new Promise((resolve, reject) => {\n                this._walletEvent$\n                    .pipe(take(1))\n                    .subscribe((event: { type: ChasePayEventType }) => {\n                        if (event.type === ChasePayEventType.CancelCheckout) {\n                            reject(new PaymentMethodCancelledError());\n                        } else if (event.type === ChasePayEventType.CompleteCheckout) {\n                            resolve();\n                        }\n                    });\n            });\n        }, { methodId: this._methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _setSessionToken(sessionToken: string): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n        const merchantRequestId = paymentMethod && paymentMethod.initializationData.merchantRequestId;\n\n        return this._requestSender.post('checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\n            },\n            body: {\n                action: 'set_external_checkout',\n                provider: this._methodId,\n                sessionToken,\n                merchantRequestId,\n            },\n        })\n            // Re-hydrate checkout data\n            .then(() => Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(this._methodId)),\n            ]))\n            .then(() => this._store.getState());\n    }\n\n    private _getPayment(): Promise<Payment> {\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(this._methodId))\n            .then(() => {\n                if (this._methodId === 'wepay') {\n                    return this._wepayRiskClient.initialize()\n                        .then(client => client.getRiskToken());\n                }\n\n                return '';\n            })\n            .then(riskToken => {\n                const state = this._store.getState();\n                const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n\n                if (!paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                if (!paymentMethod.initializationData.paymentCryptogram) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPayment);\n                }\n\n                const paymentData = {\n                    method: this._methodId,\n                    cryptogramId: paymentMethod.initializationData.paymentCryptogram,\n                    eci: paymentMethod.initializationData.eci,\n                    transactionId: btoa(paymentMethod.initializationData.reqTokenId),\n                    ccExpiry: {\n                        month: paymentMethod.initializationData.expDate.toString().substr(0, 2),\n                        year: paymentMethod.initializationData.expDate.toString().substr(2, 2),\n                    },\n                    ccNumber: paymentMethod.initializationData.accountNum,\n                    accountMask: paymentMethod.initializationData.accountMask,\n                    extraData: riskToken ? { riskToken } : undefined,\n                };\n\n                return {\n                    methodId: this._methodId,\n                    paymentData,\n                };\n            });\n    }\n\n    private _createOrder(payment: Payment, useStoreCredit?: boolean, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._orderActionCreator.submitOrder({ useStoreCredit }, options))\n            .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment(payment)));\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): void {\n        event.preventDefault();\n\n        this._displayWallet();\n    }\n}\n","export default interface SquarePaymentForm {\n    build(): void;\n    requestCardNonce(): void;\n    setPostalCode(postalCode: string): void;\n}\n\nexport type SquarePaymentFormConstructor = new(options: SquareFormOptions) => SquarePaymentForm;\n\nexport interface SquareFormOptions {\n    applicationId: string;\n    env: string;\n    locationId: string;\n    inputClass?: string;\n    inputStyles?: string[];\n    callbacks?: SquareFormCallbacks;\n    cardNumber: SquareFormElement;\n    cvv: SquareFormElement;\n    expirationDate: SquareFormElement;\n    postalCode: SquareFormElement;\n    masterpass: SquareFormElement;\n}\nexport interface LineItem {\n    label: string;\n    amount: string;\n    pending: boolean;\n}\n\nexport interface SquarePaymentRequest {\n    requestShippingAddress: boolean;\n    requestBillingInfo: boolean;\n    shippingContact?: Contact;\n    countryCode: string;\n    currencyCode: string;\n    lineItems?: LineItem[];\n    total: LineItem;\n}\n\nexport interface NonceGenerationError {\n    type: string;\n    message: string;\n    field: string;\n}\n\nexport interface CardData {\n    card_brand: CardBrand;\n    last_4: number;\n    exp_month: number;\n    exp_year: number;\n    billing_postal_code: string;\n    digital_wallet_type: DigitalWalletType;\n}\n\nexport interface Contact {\n    familyName: string;\n    givenName: string;\n    email: string;\n    country: string;\n    countryName: string;\n    region: string;\n    city: string;\n    addressLines: string[];\n    postalCode: string;\n    phone: string;\n}\n\nexport enum CardBrand {\n    americanExpress = 'AMERICAN_EXPRESS',\n    discover = 'DISCOVER',\n    discoverDiners = 'DISCOVER_DINERS',\n    JCB = 'JCB',\n    masterCard = 'MASTERCARD',\n    unionPay = 'CHINA_UNIONPAY',\n    unknown = 'OTHER_BRAND',\n    visa = 'VISA',\n    squareGift = 'SQUARE_GIFT_CARD',\n}\n\nexport enum DigitalWalletType {\n    applePay = 'APPLEPAY',\n    masterpass = 'MASTERPASS',\n    none = 'NONE',\n}\n\n/**\n * Configures any form element provided by Square payment.\n */\nexport interface SquareFormElement {\n    /**\n     * The ID of the container which the form element should insert into.\n     */\n    elementId: string;\n\n    /**\n     * The placeholder text to use for the form element, if provided.\n     */\n    placeholder?: string;\n}\n\nexport interface SquareFormCallbacks {\n    paymentFormLoaded?(form: SquarePaymentForm): void;\n    unsupportedBrowserDetected?(): void;\n    cardNonceResponseReceived?(\n        errors?: NonceGenerationError[],\n        nonce?: string,\n        cardData?: CardData,\n        billingContact?: Contact,\n        shippingContact?: Contact): void;\n    methodsSupported?(methods: { [key: string]: boolean }): void;\n    createPaymentRequest?(): void;\n}\n\nexport type SquareFormFactory = (options: SquareFormOptions) => SquarePaymentForm;\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { some } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { RequestError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class ConvergePaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _formPoster: FormPoster\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n            )\n            .catch(error => {\n                if (!(error instanceof RequestError) || !some(error.body.errors, { code: 'three_d_secure_required' })) {\n                    return Promise.reject(error);\n                }\n\n                return new Promise(() => {\n                    this._formPoster.postForm(error.body.three_ds_result.acs_url, {\n                        PaReq: error.body.three_ds_result.payer_auth_request,\n                        TermUrl: error.body.three_ds_result.callback_url,\n                        MD: error.body.three_ds_result.merchant_data,\n                    });\n                });\n            });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n\n        if (order && state.payment.getPaymentStatus() === paymentStatusTypes.FINALIZE) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class CreditCardPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n            );\n    }\n\n    finalize(_options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(_options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(_options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport { CardinalThreeDSecureFlow } from '../cardinal';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class CyberSourcePaymentStrategy implements PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _threeDSecureFlow: CardinalThreeDSecureFlow\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId } = options;\n        this._paymentMethod = this._store.getState().paymentMethods.getPaymentMethod(methodId);\n\n        if (!this._paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (!this._paymentMethod.config.is3dsEnabled) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._threeDSecureFlow.prepare(methodId)\n            .then(() => this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n\n        if (!payment) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() => {\n                if (!this._paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                return this._paymentMethod.config.is3dsEnabled ?\n                    this._threeDSecureFlow.start(payment) :\n                    this._store.dispatch(this._paymentActionCreator.submitPayment(payment));\n            });\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n} from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategyActionCreator from '../../payment-strategy-action-creator';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { GooglePaymentData, PaymentMethodData } from './googlepay';\nimport GooglePayPaymentInitializeOptions from './googlepay-initialize-options';\nimport GooglePayPaymentProcessor from './googlepay-payment-processor';\n\nexport default class GooglePayPaymentStrategy implements PaymentStrategy {\n    private _googlePayOptions?: GooglePayPaymentInitializeOptions;\n    private _methodId?: string;\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _googlePayPaymentProcessor: GooglePayPaymentProcessor\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._methodId = options.methodId;\n\n        return this._googlePayPaymentProcessor.initialize(this._methodId)\n            .then(() => {\n                this._googlePayOptions = this._getGooglePayOptions(options);\n\n                if (!this._googlePayOptions) {\n                    throw new InvalidArgumentError('Unable to initialize payment because \"options.googlepay\" argument is not provided.');\n                }\n\n                const walletButton = this._googlePayOptions.walletButton && document.getElementById(this._googlePayOptions.walletButton);\n\n                if (walletButton) {\n                    this._walletButton = walletButton;\n                    this._walletButton.addEventListener('click', this._handleWalletButtonClick);\n                }\n\n                return this._store.getState();\n            });\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._walletButton) {\n            this._walletButton.removeEventListener('click', this._handleWalletButtonClick);\n        }\n\n        this._walletButton = undefined;\n\n        return this._googlePayPaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!this._googlePayOptions) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.googlepay\" argument is not provided.');\n        }\n\n        const {\n            onError = () => {},\n            onPaymentSelect = () => {},\n        } = this._googlePayOptions;\n\n        return Promise.resolve(this._getPayment())\n            .then(payment => {\n                if (!payment.paymentData.nonce || !payment.paymentData.cardInformation) {\n                    // TODO: Find a way to share the code with _handleWalletButtonClick method\n                    return this._googlePayPaymentProcessor.displayWallet()\n                        .then(paymentData => this._paymentInstrumentSelected(paymentData))\n                        .then(() => onPaymentSelect())\n                        .then(() => this._getPayment())\n                        .catch(error => {\n                            if (error.statusCode !== 'CANCELED') {\n                                onError(error);\n                            }\n                        });\n                }\n\n                return payment;\n            })\n            .then(() =>\n                this._store.dispatch(this._orderActionCreator.submitOrder({ useStoreCredit: payload.useStoreCredit }, options))\n                    .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment(this._getPayment())))\n            );\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _paymentInstrumentSelected(paymentData: GooglePaymentData) {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const methodId = this._methodId;\n\n        // TODO: Revisit how we deal with GooglePaymentData after receiving it from Google\n        return this._googlePayPaymentProcessor.handleSuccess(paymentData)\n            .then(() => Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId)),\n            ]));\n    }\n\n    private _getGooglePayOptions(options: PaymentInitializeOptions): GooglePayPaymentInitializeOptions {\n        if (options.methodId === 'googlepaybraintree' && options.googlepaybraintree) {\n            return options.googlepaybraintree;\n        }\n\n        if (options.methodId === 'googlepaystripe' && options.googlepaystripe) {\n            return options.googlepaystripe;\n        }\n\n        throw new InvalidArgumentError();\n    }\n\n    private _getPayment(): PaymentMethodData {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (!paymentMethod.initializationData.nonce) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        const paymentData = {\n            method: this._methodId,\n            nonce: paymentMethod.initializationData.nonce,\n            cardInformation: paymentMethod.initializationData.card_information,\n        };\n\n        return {\n            methodId: this._methodId,\n            paymentData,\n        };\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): Promise<InternalCheckoutSelectors> {\n        event.preventDefault();\n\n        if (!this._methodId || !this._googlePayOptions) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const methodId = this._methodId;\n\n        const {\n            onError = () => {},\n            onPaymentSelect = () => {},\n        } = this._googlePayOptions;\n\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            return this._googlePayPaymentProcessor.displayWallet()\n                .then(paymentData => this._paymentInstrumentSelected(paymentData))\n                .then(() => onPaymentSelect())\n                .catch(error => {\n                    if (error.statusCode !== 'CANCELED') {\n                        onError(error);\n                    }\n                });\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n}\n","import { includes } from 'lodash';\n\nimport { Address } from '../../../address';\nimport BillingAddress from '../../../billing/billing-address';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType\n} from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { PaymentMethodCancelledError } from '../../errors';\nimport PaymentMethodInvalidError from '../../errors/payment-method-invalid-error';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport KlarnaCredit, { KlarnaAddress, KlarnaLoadResponse, KlarnaUpdateSessionParams } from './klarna-credit';\nimport KlarnaScriptLoader from './klarna-script-loader';\n\nexport default class KlarnaPaymentStrategy implements PaymentStrategy {\n    private _klarnaCredit?: KlarnaCredit;\n    private _unsubscribe?: (() => void);\n    private _supportedEUCountries = ['AT', 'DE', 'DK', 'FI', 'GB', 'NL', 'NO', 'SE', 'CH'];\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _klarnaScriptLoader: KlarnaScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return this._klarnaScriptLoader.load()\n            .then(klarnaCredit => { this._klarnaCredit = klarnaCredit; })\n            .then(() => {\n                this._unsubscribe = this._store.subscribe(\n                    state => {\n                        if (state.paymentStrategies.isInitialized(options.methodId)) {\n                            this._loadWidget(options);\n                        }\n                    },\n                    state => {\n                        const checkout = state.checkout.getCheckout();\n\n                        return checkout && checkout.outstandingBalance;\n                    }\n                );\n\n                return this._loadWidget(options);\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._unsubscribe) {\n            this._unsubscribe();\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!payload.payment) {\n            throw new InvalidArgumentError('Unable to proceed because \"payload.payment\" argument is not provided.');\n        }\n\n        const { payment: { paymentData, ...paymentPayload } } = payload;\n\n        return this._authorize()\n            .then(({ authorization_token: authorizationToken }) => this._store.dispatch(\n                this._remoteCheckoutActionCreator.initializePayment(paymentPayload.methodId, { authorizationToken })\n            ))\n            .then(() => this._store.dispatch(\n                this._orderActionCreator.submitOrder({\n                    ...payload,\n                    payment: paymentPayload,\n                    // Note: API currently doesn't support using Store Credit with Klarna.\n                    // To prevent deducting customer's store credit, set it as false.\n                    useStoreCredit: false,\n                }, options)\n            ));\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _loadWidget(options: PaymentInitializeOptions): Promise<KlarnaLoadResponse> {\n        if (!options.klarna) {\n            throw new InvalidArgumentError('Unable to load widget because \"options.klarna\" argument is not provided.');\n        }\n\n        const { methodId, klarna: { container, onLoad } } = options;\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => new Promise<KlarnaLoadResponse>(resolve => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                if (!this._klarnaCredit || !paymentMethod.clientToken) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n\n                this._klarnaCredit.init({ client_token: paymentMethod.clientToken });\n\n                this._klarnaCredit.load({ container }, response => {\n                    if (onLoad) {\n                        onLoad(response);\n                    }\n                    resolve(response);\n                });\n            }));\n    }\n\n    private _getUpdateSessionData(billingAddress: BillingAddress, shippingAddress?: Address): KlarnaUpdateSessionParams {\n        if (!includes(this._supportedEUCountries, billingAddress.countryCode)) {\n            return {};\n        }\n\n        const data: KlarnaUpdateSessionParams = {\n            billing_address: this._mapToKlarnaAddress(billingAddress, billingAddress.email),\n        };\n\n        if (shippingAddress) {\n            data.shipping_address = this._mapToKlarnaAddress(shippingAddress, billingAddress.email);\n        }\n\n        return data;\n    }\n\n    private _mapToKlarnaAddress(address: Address, email?: string): KlarnaAddress {\n        const klarnaAddress: KlarnaAddress = {\n            street_address: address.address1,\n            city: address.city,\n            country: address.countryCode,\n            given_name: address.firstName,\n            family_name: address.lastName,\n            postal_code: address.postalCode,\n            region: address.stateOrProvince,\n            email,\n        };\n\n        if (address.address2) {\n            klarnaAddress.street_address2 = address.address2;\n        }\n\n        if (address.phone) {\n            klarnaAddress.phone = address.phone;\n        }\n\n        return klarnaAddress;\n    }\n\n    private _authorize(): Promise<any> {\n        return new Promise((resolve, reject) => {\n            const billingAddress = this._store.getState().billingAddress.getBillingAddress();\n            const shippingAddress = this._store.getState().shippingAddress.getShippingAddress();\n\n            if (!billingAddress) {\n                throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n            }\n\n            if (!this._klarnaCredit) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            const updateSessionData = this._getUpdateSessionData(billingAddress, shippingAddress);\n\n            this._klarnaCredit.authorize(updateSessionData, res => {\n                if (res.approved) {\n                    return resolve(res);\n                }\n\n                if (res.show_form) {\n                    return reject(new PaymentMethodCancelledError());\n                }\n\n                reject(new PaymentMethodInvalidError());\n            });\n        });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport KlarnaCredit from './klarna-credit';\nimport KlarnaWindow from './klarna-window';\n\nconst SDK_URL = '//credit.klarnacdn.net/lib/v1/api.js';\n\nexport default class KlarnaScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    load(): Promise<KlarnaCredit> {\n        return this._scriptLoader.loadScript(SDK_URL)\n            .then(() => (window as unknown as KlarnaWindow).Klarna.Credit);\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class LegacyPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options));\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport getCallbackUrl from './get-callback-url';\nimport { Masterpass, MasterpassCheckoutOptions } from './masterpass';\nimport MasterpassScriptLoader from './masterpass-script-loader';\n\nexport default class MasterpassPaymentStrategy implements PaymentStrategy {\n    private _masterpassClient?: Masterpass;\n    private _paymentMethod?: PaymentMethod;\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _masterpassScriptLoader: MasterpassScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId } = options;\n\n        this._paymentMethod = this._store.getState().paymentMethods.getPaymentMethod(methodId);\n\n        if (!this._paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._masterpassScriptLoader.load(this._paymentMethod.config.testMode)\n            .then(masterpass => {\n                this._masterpassClient = masterpass;\n\n                if (!options.masterpass) {\n                    throw new InvalidArgumentError('Unable to initialize payment because \"options.masterpass\" argument is not provided.');\n                }\n\n                const walletButton  = options.masterpass.walletButton && document.getElementById(options.masterpass.walletButton);\n\n                if (walletButton) {\n                    this._walletButton = walletButton;\n                    this._walletButton.addEventListener('click', this._handleWalletButtonClick);\n                }\n\n                return this._store.getState();\n            });\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        if (this._walletButton) {\n            this._walletButton.removeEventListener('click', this._handleWalletButtonClick);\n        }\n\n        this._walletButton = undefined;\n        this._masterpassClient = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment } = payload;\n        const order = { useStoreCredit: payload.useStoreCredit };\n\n        if (!payment) {\n            throw new InvalidArgumentError('Unable to submit payment because \"payload.payment\" argument is not provided.');\n        }\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData || !this._paymentMethod.initializationData.gateway) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        // TODO: Refactor the API endpoint to return nonce in the right place.\n        const paymentData = this._paymentMethod.initializationData.paymentData;\n\n        // TODO: Redirect to Masterpass if nonce has not been generated yet. And then finalise the order when the shopper is redirected back to the checkout page.\n        if (!paymentData) {\n            throw new InvalidArgumentError('Unable to proceed because \"paymentMethod.initializationData.paymentData\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData })));\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _createMasterpassPayload(): MasterpassCheckoutOptions {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const storeConfig = state.config.getStoreConfig();\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!storeConfig) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return {\n            checkoutId: this._paymentMethod.initializationData.checkoutId,\n            allowedCardTypes: this._paymentMethod.initializationData.allowedCardTypes,\n            amount: checkout.subtotal.toFixed(2),\n            currency: storeConfig.currency.code,\n            cartId: checkout.cart.id,\n            suppressShippingAddress: false,\n            callbackUrl: getCallbackUrl('checkout'),\n        };\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event) {\n        event.preventDefault();\n\n        if (!this._masterpassClient) {\n            return;\n        }\n\n        const payload = this._createMasterpassPayload();\n        this._masterpassClient.checkout(payload);\n    }\n}\n","import { omit } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class NoPaymentDataRequiredPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._orderActionCreator.submitOrder(omit(orderRequest, 'payment'), options)\n        );\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class OfflinePaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const action = this._orderActionCreator.submitOrder({\n            ...payload,\n            payment: payload.payment ? { methodId: payload.payment.methodId } : undefined,\n        }, options);\n\n        return this._store.dispatch(action);\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class OffsitePaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const orderPayload = this._shouldSubmitFullPayload(payment) ? payload : order;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(orderPayload, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.initializeOffsitePayment(payment.methodId, payment.gatewayId))\n            );\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n        const status = state.payment.getPaymentStatus();\n\n        if (order && (status === paymentStatusTypes.ACKNOWLEDGE || status === paymentStatusTypes.FINALIZE)) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _shouldSubmitFullPayload(payment?: OrderPaymentRequestBody): boolean {\n        // FIXME: A temporary workaround to support offsite payment methods\n        // where their return URL needs to be provided by the core app.\n        if (!payment) {\n            return false;\n        }\n\n        return payment.gatewayId === 'adyen' || payment.methodId === 'ccavenuemars';\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\nimport { CardinalThreeDSecureFlow } from '../cardinal';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class PaypalProPaymentStrategy implements PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _threeDSecureFlow: CardinalThreeDSecureFlow\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId } = options;\n        this._paymentMethod = this._store.getState().paymentMethods.getPaymentMethod(methodId);\n\n        if (!this._paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (!this._paymentMethod.config.is3dsEnabled) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._threeDSecureFlow.prepare(methodId)\n            .then(() => this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._isPaymentAcknowledged()) {\n            return this._store.dispatch(\n                this._orderActionCreator.submitOrder({\n                    ...payload,\n                    payment: payload.payment ? { methodId: payload.payment.methodId } : undefined,\n                }, options)\n            );\n        }\n\n        const { payment, ...order } = payload;\n\n        if (!payment) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() => {\n                if (!this._paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                return this._paymentMethod.config.is3dsEnabled ?\n                    this._threeDSecureFlow.start(payment) :\n                    this._store.dispatch(this._paymentActionCreator.submitPayment(payment));\n            });\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _isPaymentAcknowledged(): boolean {\n        const state = this._store.getState();\n\n        return state.payment.getPaymentStatus() === paymentStatusTypes.ACKNOWLEDGE;\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentMethod from '../../payment-method';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\nimport PaymentStrategy from '../payment-strategy';\n\nimport PaypalScriptLoader from './paypal-script-loader';\nimport { PaypalHostWindow, PaypalSDK } from './paypal-sdk';\n\nexport default class PaypalExpressPaymentStrategy implements PaymentStrategy {\n    private _paypalSdk?: PaypalSDK;\n    private _paymentMethod?: PaymentMethod;\n    private _useRedirectFlow: boolean = false;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _scriptLoader: PaypalScriptLoader,\n        private _window: PaypalHostWindow = window\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n\n        this._paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n        this._useRedirectFlow = (options.paypalexpress && options.paypalexpress.useRedirectFlow) === true;\n\n        if (!this._isInContextEnabled()) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._scriptLoader.loadPaypal()\n            .then(paypal => {\n                this._paypalSdk = paypal;\n\n                if (!this._paymentMethod || !this._paymentMethod.config.merchantId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                this._paypalSdk.checkout.setup(this._paymentMethod.config.merchantId, {\n                    button: 'paypal-button',\n                    environment: this._paymentMethod.config.testMode ? 'sandbox' : 'production',\n                });\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._isInContextEnabled() && this._paypalSdk) {\n            this._paypalSdk.checkout.closeFlow();\n            this._paypalSdk = undefined;\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const paypal = this._paypalSdk;\n\n        if (this._isAcknowledgedOrFinalized()) {\n            return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options));\n        }\n\n        if (!this._isInContextEnabled() || this._useRedirectFlow) {\n            return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options))\n                .then(state => {\n                    const redirectUrl = state.payment.getPaymentRedirectUrl();\n\n                    if (redirectUrl) {\n                        this._window.top.location.href = redirectUrl;\n                    }\n\n                    // We need to hold execution so the consumer does not redirect us somewhere else\n                    return new Promise<never>(() => {});\n                });\n        }\n\n        if (!paypal) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        paypal.checkout.initXO();\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options))\n            .then(state => {\n                const redirectUrl = state.payment.getPaymentRedirectUrl();\n\n                if (redirectUrl) {\n                    paypal.checkout.startFlow(redirectUrl);\n                }\n\n                // We need to hold execution so the consumer does not redirect us somewhere else\n                return new Promise<never>(() => {});\n            })\n            .catch(error => {\n                paypal.checkout.closeFlow();\n\n                return Promise.reject(error);\n            });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n\n        if (order && this._isAcknowledgedOrFinalized()) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _isAcknowledgedOrFinalized(): boolean {\n        const state = this._store.getState();\n\n        return state.payment.getPaymentStatus() === paymentStatusTypes.ACKNOWLEDGE\n            || state.payment.getPaymentStatus() === paymentStatusTypes.FINALIZE;\n    }\n\n    private _isInContextEnabled(): boolean {\n        return !!(this._paymentMethod && this._paymentMethod.config.merchantId);\n    }\n}\n","import { some } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { RequestError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class SagePayPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _formPoster: any\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n            )\n            .catch(error => {\n                if (!(error instanceof RequestError) || !some(error.body.errors, { code: 'three_d_secure_required' })) {\n                    return Promise.reject(error);\n                }\n\n                return new Promise(() => {\n                    this._formPoster.postForm(error.body.three_ds_result.acs_url, {\n                        PaReq: error.body.three_ds_result.payer_auth_request,\n                        TermUrl: error.body.three_ds_result.callback_url,\n                        MD: error.body.three_ds_result.merchant_data,\n                    });\n                });\n            });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n\n        if (order && state.payment.getPaymentStatus() === paymentStatusTypes.FINALIZE) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import StandardError from './standard-error';\n\n/**\n * Throw this error if the shopper is using a browser version that is not\n * supported by us or any third party provider we use.\n */\nexport default class UnsupportedBrowserError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Unsupported browser error');\n\n        this.name = 'UnsupportedBrowserError';\n        this.type = 'unsupported_browser';\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\nimport { omit } from 'lodash';\nimport { noop } from 'rxjs';\n\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    TimeoutError,\n    UnsupportedBrowserError,\n} from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { NonceInstrument } from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategyActionCreator from '../../payment-strategy-action-creator';\nimport PaymentStrategy from '../payment-strategy';\n\nimport SquarePaymentForm, {\n    CardData,\n    Contact,\n    DigitalWalletType,\n    NonceGenerationError,\n    SquareFormElement,\n    SquareFormOptions,\n    SquarePaymentRequest\n} from './square-form';\nimport SquarePaymentInitializeOptions from './square-payment-initialize-options';\nimport SquareScriptLoader from './square-script-loader';\n\nexport default class SquarePaymentStrategy implements PaymentStrategy {\n    private _deferredRequestNonce?: DeferredPromise;\n    private _paymentForm?: SquarePaymentForm;\n    private _paymentMethod?: PaymentMethod;\n    private _squareOptions?: SquarePaymentInitializeOptions;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _requestSender: RequestSender,\n        private _scriptLoader: SquareScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId } = options;\n\n        this._syncPaymentMethod(methodId);\n\n        return this._scriptLoader.load()\n            .then(createSquareForm =>\n                new Promise((resolve, reject) => {\n                    this._paymentForm = createSquareForm(\n                        this._getFormOptions(options, { resolve, reject })\n                    );\n                    this._paymentForm.build();\n                }))\n            .then(() => this._store.getState());\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment } = orderRequest;\n\n        if (!payment || !payment.methodId) {\n            throw new InvalidArgumentError('Unable to submit payment because \"payload.payment.methodId\" argument is not provided.');\n        }\n\n        this._syncPaymentMethod(payment.methodId);\n\n        return this._getNonceInstrument(payment.methodId)\n            .then(paymentData =>\n                this._store.dispatch(this._orderActionCreator.submitOrder(omit(orderRequest, 'payment'), options))\n                .then(() =>\n                    this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n                ));\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _syncPaymentMethod(methodId: string): void {\n        const state = this._store.getState();\n        this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n    }\n\n    private _getCountryCode(countryName: string) {\n        switch (countryName.toUpperCase()) {\n            case 'NEW ZELAND':\n                return 'NZ';\n            case 'AUSTRALIA':\n                return 'AU';\n            default:\n                return 'US';\n        }\n    }\n\n    private _getNonceInstrument(methodId: string): Promise<NonceInstrument> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n        if (paymentMethod) {\n            const { initializationData } = paymentMethod;\n            if (initializationData && initializationData.paymentData.nonce) {\n                return Promise.resolve({ nonce: paymentMethod.initializationData.paymentData.nonce });\n            }\n        }\n\n        return new Promise<NonceInstrument>((resolve, reject) => {\n            if (!this._paymentForm) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            if (this._deferredRequestNonce) {\n                this._deferredRequestNonce.reject(new TimeoutError());\n            }\n\n            this._deferredRequestNonce = { resolve, reject };\n            this._paymentForm.requestCardNonce();\n        });\n    }\n\n    private _getFormOptions(options: PaymentInitializeOptions, deferred: DeferredPromise): SquareFormOptions {\n        const { square: squareOptions } = options;\n\n        if (!squareOptions || !this._paymentMethod) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.square\" argument is not provided.');\n        }\n\n        this._squareOptions = squareOptions;\n\n        return {\n            ...this._squareOptions,\n            ...this._paymentMethod.initializationData,\n            callbacks: {\n                cardNonceResponseReceived: (errors, nonce, cardData, billingContact, shippingContact) => {\n                    if (cardData && cardData.digital_wallet_type !== DigitalWalletType.none) {\n                        this._handleWalletNonceResponse(errors, nonce, cardData, billingContact, shippingContact);\n                    } else {\n                        this._handleCardNonceResponse(errors, nonce);\n                    }\n                },\n                createPaymentRequest: () => this._paymentRequestPayload(),\n                methodsSupported: methods => {\n                    const { masterpass } = squareOptions;\n\n                    if (masterpass) {\n                        this._showPaymentMethods(methods, masterpass);\n                    }\n                },\n                paymentFormLoaded: () => {\n                    deferred.resolve();\n                    this._setPostalCode();\n                },\n                unsupportedBrowserDetected: () => deferred.reject(new UnsupportedBrowserError()),\n            },\n        };\n    }\n\n    private _handleWalletNonceResponse(\n        errors?: NonceGenerationError[],\n        nonce?: string,\n        cardData?: CardData,\n        billingContact?: Contact,\n        shippingContact?: Contact\n    ): void {\n        const onError = this._squareOptions && this._squareOptions.onError || noop;\n        const onPaymentSelect = this._squareOptions && this._squareOptions.onPaymentSelect || noop;\n\n        if (errors) {\n            onError(errors);\n        } else if (nonce && this._paymentMethod) {\n            this._paymentInstrumentSelected(\n                this._paymentMethod.id,\n                nonce,\n                cardData,\n                billingContact,\n                shippingContact\n            )\n                .then(onPaymentSelect)\n                .catch(onError);\n        }\n    }\n\n    private _handleCardNonceResponse(errors?: NonceGenerationError[], nonce?: string): void {\n        if (!this._deferredRequestNonce) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (nonce && !errors) {\n            this._deferredRequestNonce.resolve({ nonce });\n\n            return;\n        }\n\n        const onError = this._squareOptions && this._squareOptions.onError || noop;\n\n        onError(errors);\n\n        this._deferredRequestNonce.reject(errors);\n    }\n\n    private _paymentInstrumentSelected(\n        methodId: string,\n        nonce?: string,\n        cardData?: CardData,\n        billingContact?: Contact,\n        shippingContact?: Contact): Promise<InternalCheckoutSelectors> {\n\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            return this._setExternalCheckoutData(nonce, cardData, billingContact, shippingContact)\n            .then(() =>\n                Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId)),\n            ]));\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _paymentRequestPayload(): SquarePaymentRequest {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const storeConfig = state.config.getStoreConfig();\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!storeConfig) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        return {\n            requestShippingAddress: true,\n            requestBillingInfo: true,\n            currencyCode: storeConfig.currency.code,\n            countryCode: this._getCountryCode(storeConfig.storeProfile.storeCountry),\n            total: {\n                label: storeConfig.storeProfile.storeName,\n                amount: String(checkout.subtotal),\n                pending: false,\n            },\n        };\n    }\n\n    private _setExternalCheckoutData(nonce?: string, cardData?: CardData, billingContact?: Contact, shippingContact?: Contact): Promise<Response<any>> {\n        return this._requestSender.post('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: {\n                nonce,\n                provider: 'squarev2',\n                action: 'set_external_checkout',\n                cardData: JSON.stringify(cardData),\n                billingContact: JSON.stringify(billingContact),\n                shippingContact: JSON.stringify(shippingContact),\n            },\n        });\n    }\n\n    private _setPostalCode(): void {\n        const state = this._store.getState();\n        const billingAddress = state.billingAddress.getBillingAddress();\n\n        if (!this._paymentForm) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (billingAddress && billingAddress.postalCode) {\n            this._paymentForm.setPostalCode(billingAddress.postalCode);\n        }\n    }\n\n    private _showPaymentMethods(methods: { [key: string]: boolean }, element: SquareFormElement): void {\n        const masterpassBtn = document.getElementById(element.elementId);\n\n        if (masterpassBtn && methods.masterpass) {\n            masterpassBtn.style.display = 'inline-block';\n        }\n    }\n}\n\nexport interface DeferredPromise {\n    resolve(resolution?: NonceInstrument): void;\n    reject(reason?: any): void;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { SquareFormFactory, SquareFormOptions } from './square-form';\nimport SquareWindow from './square-window';\n\nexport default class SquareScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    load(): Promise<SquareFormFactory> {\n        const scriptURI = '//js.squareup.com/v2/paymentform';\n\n        return this._scriptLoader.loadScript(scriptURI)\n            .then(() => (options: SquareFormOptions) =>\n                new (window as unknown as SquareWindow).SqPaymentForm(options)\n            );\n    }\n}\n","import { some } from 'lodash';\n\nimport { Address } from '../../../address';\nimport { BillingAddress } from '../../../billing';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    RequestError\n} from '../../../common/error/errors';\nimport { Customer } from '../../../customer';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError, PaymentMethodFailedError } from '../../errors';\nimport isVaultedInstrument from '../../is-vaulted-instrument';\nimport { HostedInstrument } from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport {\n    StripeAddress,\n    StripeBillingDetails,\n    StripeCardElement,\n    StripeHandleCardPaymentOptions,\n    StripePaymentMethodData,\n    StripeShippingDetails,\n    StripeV3Client\n} from './stripev3';\nimport StripeV3ScriptLoader from './stripev3-script-loader';\n\nexport default class StripeV3PaymentStrategy implements PaymentStrategy {\n    private _stripeV3Client?: StripeV3Client;\n    private _cardElement?: StripeCardElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _stripeScriptLoader: StripeV3ScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const stripeOptions = options.stripev3;\n\n        if (!stripeOptions) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.stripev3\" argument is not provided.');\n        }\n\n        const paymentMethod = this._store.getState().paymentMethods.getPaymentMethod(options.methodId);\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._stripeScriptLoader.load(paymentMethod.initializationData.stripePublishableKey)\n            .then(stripeJs => {\n                this._stripeV3Client = stripeJs;\n                const elements = this._stripeV3Client.elements();\n                const cardElement = elements.create('card', {\n                    style: stripeOptions.style,\n                });\n\n                cardElement.mount(`#${stripeOptions.containerId}`);\n\n                this._cardElement = cardElement;\n\n                return Promise.resolve(this._store.getState());\n            });\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n        const shouldSaveInstrument = Boolean(paymentData && (paymentData as HostedInstrument).shouldSaveInstrument);\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() => {\n                if (paymentData && isVaultedInstrument(paymentData)) {\n                    return this._store.dispatch(this._paymentActionCreator.submitPayment({...payment, paymentData}))\n                        .catch(error => {\n                            if (!(error instanceof RequestError) || !some(error.body.errors, { code: 'three_d_secure_required' })) {\n                                return Promise.reject(error);\n                            }\n\n                            return this._getStripeJs().handleCardPayment(error.body.three_ds_result.token)\n                                .then(stripeResponse => {\n                                    if (stripeResponse.error || !stripeResponse.paymentIntent.id) {\n                                        throw new PaymentMethodFailedError(stripeResponse.error && stripeResponse.error.message);\n                                    }\n\n                                    const paymentPayload = {\n                                        methodId: payment.methodId,\n                                        paymentData: {\n                                            nonce: stripeResponse.paymentIntent.id,\n                                        },\n                                    };\n\n                                    return this._store.dispatch(this._paymentActionCreator.submitPayment(paymentPayload));\n                                });\n                        });\n                }\n\n                return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(payment.methodId))\n                    .then(state => {\n                        const paymentMethod = state.paymentMethods.getPaymentMethod(payment.methodId);\n                        const paymentIntent = paymentMethod && paymentMethod.clientToken;\n\n                        if (!this._cardElement) {\n                            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                        }\n\n                        return this._getStripeJs().createPaymentMethod('card', this._cardElement, this._mapStripePaymentMethodOptions())\n                            .then(stripePaymentMethod => {\n                                if (stripePaymentMethod.error || !stripePaymentMethod.paymentMethod.id) {\n                                    throw new PaymentMethodFailedError(stripePaymentMethod.error && stripePaymentMethod.error.message);\n                                }\n\n                                if (!paymentIntent) {\n                                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                                }\n\n                                const stripeCardPaymentOptions = {\n                                    ...this._mapStripeCardPaymentOptions(shouldSaveInstrument),\n                                    payment_method: stripePaymentMethod.paymentMethod.id,\n                                };\n\n                                return this._getStripeJs().handleCardPayment(paymentIntent, stripeCardPaymentOptions);\n                            })\n                            .then(stripeResponse => {\n                                if (stripeResponse.error || !stripeResponse.paymentIntent.id) {\n                                    throw new PaymentMethodFailedError(stripeResponse.error && stripeResponse.error.message);\n                                }\n\n                                const paymentPayload = {\n                                    methodId: payment.methodId,\n                                    paymentData: {\n                                        nonce: stripeResponse.paymentIntent.id,\n                                        shouldSaveInstrument,\n                                    },\n                                };\n\n                                return this._store.dispatch(this._paymentActionCreator.submitPayment(paymentPayload));\n                            });\n                    });\n            });\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._cardElement) {\n            this._cardElement.unmount();\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _getStripeJs(): StripeV3Client {\n        if (!this._stripeV3Client) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._stripeV3Client;\n    }\n\n    private _mapStripeBillingAddress(billingAddress: BillingAddress | undefined): StripeAddress | undefined {\n        if (!billingAddress) {\n            return undefined;\n        }\n\n        return {\n            city: billingAddress.city,\n            country: billingAddress.countryCode,\n            line1: billingAddress.address1,\n            line2: billingAddress.address2,\n            postal_code: billingAddress.postalCode,\n            state: billingAddress.stateOrProvinceCode,\n        };\n    }\n\n    private _mapStripeShippingAddress(shippingAddress: Address | undefined): StripeAddress {\n        if (!shippingAddress) {\n            return { };\n        }\n\n        return {\n            city: shippingAddress.city,\n            country: shippingAddress.countryCode,\n            line1: shippingAddress.address1,\n            line2: shippingAddress.address2,\n            postal_code: shippingAddress.postalCode,\n            state: shippingAddress.stateOrProvinceCode,\n        };\n    }\n\n    private _mapStripeBillingDetails({ billingAddress, customer }: { billingAddress?: BillingAddress; customer?: Customer } = {}): StripeBillingDetails {\n        const stripeBillingDetails = {\n            address: this._mapStripeBillingAddress(billingAddress),\n        };\n\n        if (customer) {\n            return {\n                ...stripeBillingDetails,\n                email: customer.email,\n                name: `${customer.firstName} ${customer.lastName}`,\n            };\n        }\n\n        if (billingAddress) {\n            return {\n                ...stripeBillingDetails,\n                email: billingAddress.email,\n                name: `${billingAddress.firstName} ${billingAddress.lastName}`,\n            };\n        }\n\n        return {\n            name: 'Guest',\n        };\n    }\n\n    private _mapStripeShippingDetails({ shippingAddress, customer }: { shippingAddress?: Address ; customer?: Customer } = {}): StripeShippingDetails {\n        const stripeShippingDetails = {\n            address: this._mapStripeShippingAddress(shippingAddress),\n        };\n\n        if (customer) {\n            return {\n                ...stripeShippingDetails,\n                name: `${customer.firstName} ${customer.lastName}`,\n            };\n        }\n\n        if (shippingAddress) {\n            return {\n                ...stripeShippingDetails,\n                name: `${shippingAddress.firstName} ${shippingAddress.lastName}`,\n            };\n        }\n\n        return {\n            ...stripeShippingDetails,\n            name: 'Guest',\n        };\n    }\n\n    private _getCustomer(): Customer | undefined {\n        const customer = this._store.getState().customer.getCustomer();\n\n        if (customer) {\n            if (customer.firstName === '' || customer.lastName === '' || customer.email === '') {\n                return undefined;\n            }\n        }\n\n        return customer;\n    }\n\n    private _mapStripeCardPaymentOptions(shouldSaveInstrument: boolean): StripeHandleCardPaymentOptions {\n        const customer = this._getCustomer();\n        const shippingAddress = this._store.getState().shippingAddress.getShippingAddress();\n\n        const shippingDetails = {\n            shipping: this._mapStripeShippingDetails({ shippingAddress, customer }),\n        };\n\n        if (customer) {\n            return {\n                ...shippingDetails,\n                receipt_email: customer.email,\n                save_payment_method: shouldSaveInstrument,\n            };\n        } else {\n            return {\n                ...shippingDetails,\n            };\n        }\n    }\n\n    private _mapStripePaymentMethodOptions(): StripePaymentMethodData {\n        const customer = this._getCustomer();\n        const billingAddress = this._store.getState().billingAddress.getBillingAddress();\n\n        return {\n            billing_details: this._mapStripeBillingDetails({ billingAddress, customer }),\n        };\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { StripeHostWindow, StripeV3Client } from './stripev3';\n\nexport default class StripeV3ScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: StripeHostWindow = window\n    ) {}\n\n    load(publishableKey: string): Promise<StripeV3Client> {\n        return this._scriptLoader\n            .loadScript('https://js.stripe.com/v3/')\n            .then(() => {\n                if (!this._window.Stripe) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.Stripe(publishableKey, {\n                    betas: ['payment_intent_beta_3'],\n                });\n            });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\n\nimport WepayRisk from './wepay-risk';\nimport WepayWindow from './wepay-window';\n\nconst SCRIPT_SRC = '//static.wepay.com/min/js/risk.1.latest.js';\n\nexport default class WepayRiskClient {\n    private _riskClient?: WepayRisk;\n\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    initialize(): Promise<WepayRiskClient> {\n        return this._scriptLoader\n            .loadScript(SCRIPT_SRC)\n            .then(() => this._riskClient = (window as unknown as WepayWindow).WePay.risk)\n            .then(() => this);\n    }\n\n    getRiskToken(): string {\n        if (!this._riskClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        this._riskClient.generate_risk_token();\n\n        return this._riskClient.get_risk_token();\n    }\n}\n","import { merge } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport CreditCardPaymentStrategy from '../credit-card/credit-card-payment-strategy';\n\nimport WepayRiskClient from './wepay-risk-client';\n\nexport default class WepayPaymentStrategy extends CreditCardPaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        orderActionCreator: OrderActionCreator,\n        paymentActionCreator: PaymentActionCreator,\n        private _wepayRiskClient: WepayRiskClient\n    ) {\n        super(store, orderActionCreator, paymentActionCreator);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._wepayRiskClient.initialize();\n\n        return super.initialize(options);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const token = this._wepayRiskClient.getRiskToken();\n        const payloadWithToken = merge({}, payload, {\n            payment: {\n                paymentData: {\n                    deviceSessionId: token,\n                },\n            },\n        });\n\n        return super.execute(payloadWithToken, options);\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * Throw this error if a payment method explicitly returns a declined error and\n * the shopper has to choose a different payment method if they wish to continue\n * their checkout process.\n */\nexport default class PaymentMethodDeclinedError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'The selected payment method was declined. Please select another payment method.');\n\n        this.name = 'PaymentMethodDeclinedError';\n        this.type = 'payment_declined';\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n} from '../../../common/error/errors';\nimport { ContentType, INTERNAL_USE_ONLY } from '../../../common/http-request';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { StoreCreditActionCreator } from '../../../store-credit';\nimport { PaymentMethodCancelledError, PaymentMethodDeclinedError, PaymentMethodInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { Zip, ZipModalEvent } from './zip';\nimport ZipScriptLoader from './zip-script-loader';\n\nexport default class ZipPaymentStrategy implements PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _zipClient?: Zip;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _storeCreditActionCreator: StoreCreditActionCreator,\n        private _zipScriptLoader: ZipScriptLoader,\n        private _requestSender: RequestSender\n    ) { }\n\n    async initialize(): Promise<InternalCheckoutSelectors> {\n        const zip = await this._zipScriptLoader.load();\n        this._zipClient = zip;\n\n        return this._store.getState();\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n        this._zipClient = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const { _zipClient: zipClient } = this;\n\n        if (!payment) {\n            throw new InvalidArgumentError('Unable to submit payment because \"payload.payment\" argument is not provided.');\n        }\n\n        if (!zipClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        await this._store.dispatch(this._orderActionCreator.submitOrder(order, options));\n\n        const { useStoreCredit } = payload;\n\n        if (useStoreCredit !== undefined) {\n            await this._store.dispatch(this._storeCreditActionCreator.applyStoreCredit(useStoreCredit));\n        }\n\n        const state = await this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(payment.methodId, options));\n\n        this._paymentMethod = state.paymentMethods.getPaymentMethod(payment.methodId);\n\n        if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const nonce = await new Promise<string | undefined>((resolve, reject) => {\n            zipClient.Checkout.init({\n                onComplete: async ({ checkoutId, state }) => {\n                    if (state === ZipModalEvent.CancelCheckout) {\n                        return reject(new PaymentMethodCancelledError());\n                    }\n\n                    if (state === ZipModalEvent.CheckoutReferred && checkoutId) {\n                        await this._prepareForReferredRegistration(payment.methodId, checkoutId);\n\n                        return resolve();\n                    }\n\n                    if (state === ZipModalEvent.CheckoutApproved && checkoutId) {\n                        return resolve(checkoutId);\n                    }\n\n                    if (state === ZipModalEvent.CheckoutDeclined) {\n                        return reject(new PaymentMethodDeclinedError('Unfortunately your application was declined. Please select another payment method.'));\n                    }\n\n                    reject(new PaymentMethodInvalidError());\n                },\n                onCheckout: openModal => {\n                    if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                        throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                    }\n\n                    openModal(JSON.parse(this._paymentMethod.clientToken));\n                },\n            });\n        });\n\n        if (nonce !== undefined) {\n            return this._store.dispatch(this._paymentActionCreator.submitPayment({\n                methodId: payment.methodId,\n                paymentData: { nonce },\n            }));\n        }\n\n        return this._store.getState();\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _prepareForReferredRegistration(provider: string, externalId: string): Promise<Response> {\n        const url = `/api/storefront/payment/${provider}/save-external-id`;\n        const options = {\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n            body: {\n                externalId,\n                provider,\n            },\n        };\n\n        return this._requestSender.post(url, options);\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\nimport { Zip, ZipHostWindow } from '../zip/zip';\n\nexport default class ZipScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        public _window: ZipHostWindow = window\n    ) {}\n\n    load(): Promise<Zip> {\n        return this._scriptLoader\n            .loadScript(`//static.zipmoney.com.au/checkout/checkout-v1.min.js`)\n            .then(() => {\n                if (!this._window.Zip) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.Zip;\n            });\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../billing';\nimport { CheckoutActionCreator, CheckoutRequestSender, CheckoutStore, CheckoutValidator } from '../checkout';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { OrderActionCreator, OrderRequestSender } from '../order';\nimport { SpamProtectionActionCreator } from '../order/spam-protection';\nimport GoogleRecaptcha from '../order/spam-protection/google-recaptcha';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../remote-checkout';\nimport { StoreCreditActionCreator, StoreCreditRequestSender } from '../store-credit';\n\nimport PaymentActionCreator from './payment-action-creator';\nimport PaymentMethodActionCreator from './payment-method-action-creator';\nimport PaymentMethodRequestSender from './payment-method-request-sender';\nimport PaymentRequestSender from './payment-request-sender';\nimport PaymentRequestTransformer from './payment-request-transformer';\nimport PaymentStrategyActionCreator from './payment-strategy-action-creator';\nimport PaymentStrategyRegistry from './payment-strategy-registry';\nimport PaymentStrategyType from './payment-strategy-type';\nimport { AdyenV2PaymentStrategy, AdyenV2ScriptLoader } from './strategies/adyenv2';\nimport { AffirmPaymentStrategy, AffirmScriptLoader } from './strategies/affirm';\nimport { AfterpayPaymentStrategy, AfterpayScriptLoader } from './strategies/afterpay';\nimport { AmazonPayPaymentStrategy, AmazonPayScriptLoader } from './strategies/amazon-pay';\nimport {\n    createBraintreePaymentProcessor,\n    createBraintreeVisaCheckoutPaymentProcessor,\n    BraintreeCreditCardPaymentStrategy,\n    BraintreePaypalPaymentStrategy,\n    BraintreeScriptLoader,\n    BraintreeSDKCreator,\n    BraintreeVisaCheckoutPaymentStrategy,\n    VisaCheckoutScriptLoader\n} from './strategies/braintree';\nimport {\n    CardinalClient,\n    CardinalScriptLoader,\n    CardinalThreeDSecureFlow,\n} from './strategies/cardinal';\nimport { ChasePayPaymentStrategy, ChasePayScriptLoader } from './strategies/chasepay';\nimport { ConvergePaymentStrategy } from './strategies/converge';\nimport { CreditCardPaymentStrategy } from './strategies/credit-card';\nimport { CyberSourcePaymentStrategy } from './strategies/cybersource/index';\nimport {\n    createGooglePayPaymentProcessor,\n    GooglePayBraintreeInitializer,\n    GooglePayPaymentStrategy,\n    GooglePayStripeInitializer\n} from './strategies/googlepay';\nimport { KlarnaPaymentStrategy, KlarnaScriptLoader } from './strategies/klarna';\nimport { LegacyPaymentStrategy } from './strategies/legacy';\nimport { MasterpassPaymentStrategy, MasterpassScriptLoader } from './strategies/masterpass';\nimport { NoPaymentDataRequiredPaymentStrategy } from './strategies/no-payment';\nimport { OfflinePaymentStrategy } from './strategies/offline';\nimport { OffsitePaymentStrategy } from './strategies/offsite';\nimport { PaypalExpressPaymentStrategy, PaypalProPaymentStrategy, PaypalScriptLoader } from './strategies/paypal';\nimport { SagePayPaymentStrategy } from './strategies/sage-pay';\nimport { SquarePaymentStrategy, SquareScriptLoader } from './strategies/square';\nimport { StripeScriptLoader, StripeV3PaymentStrategy } from './strategies/stripev3';\nimport { WepayPaymentStrategy, WepayRiskClient } from './strategies/wepay';\nimport { ZipPaymentStrategy, ZipScriptLoader } from './strategies/zip';\n\nexport default function createPaymentStrategyRegistry(\n    store: CheckoutStore,\n    paymentClient: any,\n    requestSender: RequestSender,\n    spamProtection: GoogleRecaptcha,\n    locale: string\n) {\n    const registry = new PaymentStrategyRegistry(store, { defaultToken: PaymentStrategyType.CREDIT_CARD });\n    const scriptLoader = getScriptLoader();\n    const paymentRequestTransformer = new PaymentRequestTransformer();\n    const paymentRequestSender = new PaymentRequestSender(paymentClient);\n    const billingAddressActionCreator = new BillingAddressActionCreator(new BillingAddressRequestSender(requestSender));\n    const braintreePaymentProcessor = createBraintreePaymentProcessor(scriptLoader);\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const checkoutValidator = new CheckoutValidator(checkoutRequestSender);\n    const spamProtectionActionCreator = new SpamProtectionActionCreator(spamProtection);\n    const orderActionCreator = new OrderActionCreator(new OrderRequestSender(requestSender), checkoutValidator, spamProtectionActionCreator);\n    const storeCreditActionCreator = new StoreCreditActionCreator(new StoreCreditRequestSender(requestSender));\n    const paymentActionCreator = new PaymentActionCreator(paymentRequestSender, orderActionCreator, paymentRequestTransformer);\n    const paymentMethodActionCreator = new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender));\n    const remoteCheckoutActionCreator = new RemoteCheckoutActionCreator(new RemoteCheckoutRequestSender(requestSender));\n    const configActionCreator = new ConfigActionCreator(new ConfigRequestSender(requestSender));\n    const checkoutActionCreator = new CheckoutActionCreator(checkoutRequestSender, configActionCreator);\n    const paymentStrategyActionCreator = new PaymentStrategyActionCreator(registry, orderActionCreator);\n    const formPoster = createFormPoster();\n\n    registry.register(PaymentStrategyType.ADYENV2, () =>\n        new AdyenV2PaymentStrategy(\n            store,\n            paymentActionCreator,\n            orderActionCreator,\n            new AdyenV2ScriptLoader(scriptLoader),\n            formPoster,\n            locale\n        )\n    );\n\n    registry.register(PaymentStrategyType.AFFIRM, () =>\n        new AffirmPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            new AffirmScriptLoader()\n        )\n    );\n\n    registry.register(PaymentStrategyType.AFTERPAY, () =>\n        new AfterpayPaymentStrategy(\n            store,\n            checkoutValidator,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            storeCreditActionCreator,\n            new AfterpayScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.AMAZON, () =>\n        new AmazonPayPaymentStrategy(\n            store,\n            orderActionCreator,\n            billingAddressActionCreator,\n            remoteCheckoutActionCreator,\n            new AmazonPayScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.CREDIT_CARD, () =>\n        new CreditCardPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.CYBERSOURCE, () =>\n        new CyberSourcePaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            new CardinalThreeDSecureFlow(\n                store,\n                paymentActionCreator,\n                paymentMethodActionCreator,\n                new CardinalClient(new CardinalScriptLoader(scriptLoader))\n            )\n        )\n    );\n\n    registry.register(PaymentStrategyType.KLARNA, () =>\n        new KlarnaPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new KlarnaScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.LEGACY, () =>\n        new LegacyPaymentStrategy(\n            store,\n            orderActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.OFFLINE, () =>\n        new OfflinePaymentStrategy(\n            store,\n            orderActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.OFFSITE, () =>\n        new OffsitePaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.PAYPAL, () =>\n        new PaypalProPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            new CardinalThreeDSecureFlow(\n                store,\n                paymentActionCreator,\n                paymentMethodActionCreator,\n                new CardinalClient(new CardinalScriptLoader(scriptLoader))\n            )\n        )\n    );\n\n    registry.register(PaymentStrategyType.PAYPAL_EXPRESS, () =>\n        new PaypalExpressPaymentStrategy(\n            store,\n            orderActionCreator,\n            new PaypalScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.PAYPAL_EXPRESS_CREDIT, () =>\n        new PaypalExpressPaymentStrategy(\n            store,\n            orderActionCreator,\n            new PaypalScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.SAGE_PAY, () =>\n        new SagePayPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            formPoster\n        )\n    );\n\n    registry.register(PaymentStrategyType.SQUARE, () =>\n        new SquarePaymentStrategy(\n            store,\n            checkoutActionCreator,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            requestSender,\n            new SquareScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.NO_PAYMENT_DATA_REQUIRED, () =>\n        new NoPaymentDataRequiredPaymentStrategy(\n            store,\n            orderActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.BRAINTREE, () =>\n        new BraintreeCreditCardPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            braintreePaymentProcessor\n        )\n    );\n\n    registry.register(PaymentStrategyType.BRAINTREE_PAYPAL, () =>\n        new BraintreePaypalPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            braintreePaymentProcessor\n        )\n    );\n\n    registry.register(PaymentStrategyType.BRAINTREE_PAYPAL_CREDIT, () =>\n        new BraintreePaypalPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            braintreePaymentProcessor,\n            true\n        )\n    );\n\n    registry.register(PaymentStrategyType.BRAINTREE_VISA_CHECKOUT, () =>\n        new BraintreeVisaCheckoutPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            paymentActionCreator,\n            orderActionCreator,\n            createBraintreeVisaCheckoutPaymentProcessor(scriptLoader, requestSender),\n            new VisaCheckoutScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.CHASE_PAY, () =>\n        new ChasePayPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            requestSender,\n            new ChasePayScriptLoader(scriptLoader),\n            new WepayRiskClient(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.BRAINTREE_GOOGLE_PAY, () =>\n        new GooglePayPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            paymentActionCreator,\n            orderActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayBraintreeInitializer(\n                    new BraintreeSDKCreator(\n                        new BraintreeScriptLoader(scriptLoader)\n                    )\n                )\n            )\n        )\n    );\n\n    registry.register(PaymentStrategyType.WE_PAY, () =>\n        new WepayPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            new WepayRiskClient(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.MASTERPASS, () =>\n        new MasterpassPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            new MasterpassScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.STRIPE_GOOGLE_PAY, () =>\n        new GooglePayPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            paymentActionCreator,\n            orderActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayStripeInitializer()\n            )\n        )\n    );\n\n    registry.register(PaymentStrategyType.ZIP, () =>\n        new ZipPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            storeCreditActionCreator,\n            new ZipScriptLoader(scriptLoader),\n            requestSender\n        )\n    );\n\n    registry.register(PaymentStrategyType.CONVERGE, () =>\n        new ConvergePaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            formPoster\n            )\n    );\n\n    registry.register(PaymentStrategyType.STRIPEV3, () =>\n        new StripeV3PaymentStrategy(\n            store,\n            paymentMethodActionCreator,\n            paymentActionCreator,\n            orderActionCreator,\n            new StripeScriptLoader(scriptLoader)\n        )\n    );\n\n    return registry;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { Overlay } from '../../../common/overlay';\n\nimport BraintreePaymentProcessor from './braintree-payment-processor';\nimport BraintreeScriptLoader from './braintree-script-loader';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\n\nexport default function createBraintreePaymentProcessor(scriptLoader: ScriptLoader) {\n    const braintreeScriptLoader = new BraintreeScriptLoader(scriptLoader);\n    const braintreeSDKCreator = new BraintreeSDKCreator(braintreeScriptLoader);\n    const overlay = new Overlay();\n\n    return new BraintreePaymentProcessor(braintreeSDKCreator, overlay);\n}\n","import { createAction, createDataStore, Action, DataStore, ReadableDataStore } from '@bigcommerce/data-store';\n\nenum ProjectionActionType {\n    Synchronize = 'SYNCHRONIZE',\n}\n\ninterface SynchronizeAction<TState> extends Action<TState> {\n    type: ProjectionActionType.Synchronize;\n    payload: TState;\n}\n\nexport interface DataStoreProjection<TTransformedState> extends ReadableDataStore<TTransformedState> {\n    notifyState(): void;\n}\n\nexport default function createDataStoreProjection<TState, TTransformedState = TState>(\n    store: DataStore<any, Action, TState>,\n    stateTransformer: (state: TState) => TTransformedState\n): DataStoreProjection<TTransformedState> {\n    const projection = createDataStore<TState | undefined, SynchronizeAction<TState>, TTransformedState>(\n        (state, action) => action.type === ProjectionActionType.Synchronize ?\n            action.payload :\n            state,\n        store.getState(),\n        { stateTransformer }\n    );\n\n    store.subscribe(state => {\n        projection.dispatch(createAction(ProjectionActionType.Synchronize, state) as SynchronizeAction<TState>);\n    }, { initial: false });\n\n    return projection;\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { Address } from '../../address';\nimport { InternalCheckoutSelectors, ReadableCheckoutStore } from '../../checkout';\nimport { addMinutes, isFuture } from '../../common/date-time';\nimport { MissingDataError, MissingDataErrorType } from '../../common/error/errors';\n\nimport { SessionContext, VaultAccessToken } from './instrument';\nimport { DeleteInstrumentAction, InstrumentActionType, LoadInstrumentsAction } from './instrument-actions';\nimport InstrumentRequestSender from './instrument-request-sender';\n\nexport default class InstrumentActionCreator {\n    constructor(\n        private _instrumentRequestSender: InstrumentRequestSender\n    ) {}\n\n    loadInstruments(): ThunkAction<LoadInstrumentsAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<LoadInstrumentsAction>) => {\n            observer.next(createAction(InstrumentActionType.LoadInstrumentsRequested));\n\n            const session = this._getSessionContext(store);\n            const token = this._getCurrentAccessToken(store);\n            const shippingAddress = this._getShippingAddress(store);\n\n            return this._getValidAccessToken(token)\n                .then(currentToken =>\n                    this._instrumentRequestSender.loadInstruments({\n                            ...session,\n                            authToken: currentToken.vaultAccessToken,\n                        },\n                        shippingAddress\n                    )\n                        .then(({ body }) => {\n                            observer.next(createAction(\n                                InstrumentActionType.LoadInstrumentsSucceeded,\n                                body,\n                                currentToken\n                            ));\n                            observer.complete();\n                        })\n                )\n                .catch(response => {\n                    observer.error(createErrorAction(InstrumentActionType.LoadInstrumentsFailed, response));\n                });\n        });\n    }\n\n    deleteInstrument(instrumentId: string): ThunkAction<DeleteInstrumentAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<DeleteInstrumentAction>) => {\n            observer.next(createAction(InstrumentActionType.DeleteInstrumentRequested, undefined, { instrumentId }));\n\n            const session = this._getSessionContext(store);\n            const token = this._getCurrentAccessToken(store);\n\n            return this._getValidAccessToken(token)\n                .then(currentToken =>\n                    this._instrumentRequestSender.deleteInstrument({\n                        ...session,\n                        authToken: currentToken.vaultAccessToken,\n                    }, instrumentId)\n                        .then(({ body }) => {\n                            observer.next(createAction(InstrumentActionType.DeleteInstrumentSucceeded, body, {\n                                instrumentId,\n                                ...currentToken,\n                            }));\n                            observer.complete();\n                        })\n                )\n                .catch(response => {\n                    observer.error(createErrorAction(InstrumentActionType.DeleteInstrumentFailed, response, { instrumentId }));\n                });\n        });\n    }\n\n    private _isValidVaultAccessToken(token: VaultAccessToken): boolean {\n        if (!token || !token.vaultAccessToken) {\n            return false;\n        }\n\n        const expiryBuffer = 2;\n        const expiry = addMinutes(new Date(token.vaultAccessExpiry), expiryBuffer);\n\n        return isFuture(expiry);\n    }\n\n    private _getCurrentAccessToken(store: ReadableCheckoutStore): VaultAccessToken | undefined {\n        const { instruments } = store.getState();\n        const meta = instruments.getInstrumentsMeta();\n\n        if (!meta) {\n            return;\n        }\n\n        return {\n            vaultAccessToken: meta.vaultAccessToken,\n            vaultAccessExpiry: meta.vaultAccessExpiry,\n        };\n    }\n\n    private _getValidAccessToken(token?: VaultAccessToken): Promise<VaultAccessToken> {\n        return token && this._isValidVaultAccessToken(token) ?\n            Promise.resolve(token) :\n            this._instrumentRequestSender.getVaultAccessToken().then(({ body }) => body);\n    }\n\n    private _getShippingAddress(store: ReadableCheckoutStore): Address | undefined {\n        const state = store.getState();\n\n        return state.shippingAddress.getShippingAddress();\n    }\n\n    private _getSessionContext(store: ReadableCheckoutStore): SessionContext {\n        const state = store.getState();\n        const config = state.config.getStoreConfig();\n        const cart = state.cart.getCart();\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        const { customerId } = cart;\n        const { storeId } = config.storeProfile;\n        const { code } = config.shopperCurrency.isTransactional ? config.shopperCurrency : config.currency;\n\n        return {\n            customerId,\n            storeId,\n            currencyCode: code,\n        };\n    }\n}\n","export default function addMinutes(date: Date, amount: number): Date {\n    const newDate = new Date(date.getTime());\n\n    newDate.setMinutes(date.getMinutes() + amount);\n\n    return newDate;\n}\n","export default function isFuture(date: Date): boolean {\n    return date.valueOf() > Date.now();\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport PaymentResponse from '../payment-response';\n\nimport Instrument, { VaultAccessToken } from './instrument';\nimport {\n    InstrumentsResponseBody,\n    InstrumentErrorResponseBody,\n    InternalInstrument,\n    InternalInstrumentsResponseBody,\n    InternalInstrumentErrorResponseBody,\n    InternalVaultAccessTokenResponseBody,\n} from './instrument-response-body';\n\nexport default class InstrumentResponseTransformer {\n    transformResponse(\n        response: PaymentResponse<InternalInstrumentsResponseBody>\n    ): Response<InstrumentsResponseBody> {\n        const { body, ...payload } = this._transformResponse(response);\n\n        return {\n            ...payload,\n            body: {\n                vaultedInstruments: this._transformVaultedInstruments(body.vaulted_instruments),\n            },\n        };\n    }\n\n    transformErrorResponse(\n        response: PaymentResponse<InternalInstrumentErrorResponseBody>\n    ): Response<InstrumentErrorResponseBody> {\n        return this._transformResponse(response);\n    }\n\n    transformVaultAccessResponse(\n        response: Response<InternalVaultAccessTokenResponseBody>\n    ): Response<VaultAccessToken> {\n        return {\n            ...response,\n            body: {\n                vaultAccessToken: response.body.data.token,\n                vaultAccessExpiry: response.body.data.expires_at,\n            },\n        };\n    }\n\n    private _transformVaultedInstruments(vaultedInstruments: InternalInstrument[] = []): Instrument[] {\n        return vaultedInstruments.map(instrument => ({\n            bigpayToken: instrument.bigpay_token,\n            defaultInstrument: instrument.default_instrument,\n            provider: instrument.provider,\n            iin: instrument.iin,\n            last4: instrument.last_4,\n            expiryMonth: instrument.expiry_month,\n            expiryYear: instrument.expiry_year,\n            brand: instrument.brand,\n            trustedShippingAddress: instrument.trusted_shipping_address,\n        }));\n    }\n\n    private _transformResponse<T>(response: PaymentResponse<T>): Response<T> {\n        const { data: body, ...payload } = response;\n\n        return {\n            ...payload,\n            body,\n        };\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { mapToInternalAddress, Address } from '../../address';\nimport { RequestOptions } from '../../common/http-request';\nimport PaymentResponse from '../payment-response';\n\nimport { InstrumentRequestContext, VaultAccessToken } from './instrument';\nimport {\n    InstrumentsResponseBody,\n    InternalInstrumentsResponseBody,\n    InternalInstrumentErrorResponseBody,\n} from './instrument-response-body';\nimport InstrumentResponseTransformer from './instrument-response-transformer';\n\nexport default class InstrumentRequestSender {\n    private _transformer: InstrumentResponseTransformer;\n\n    constructor(\n        private _client: any,\n        private _requestSender: RequestSender\n    ) {\n        this._transformer = new InstrumentResponseTransformer();\n    }\n\n    getVaultAccessToken(\n        { timeout }: RequestOptions = {}\n    ): Promise<Response<VaultAccessToken>> {\n        const url = '/internalapi/v1/checkout/payments/vault-access-token';\n\n        return this._requestSender.get(url, { timeout }).then(response => ({\n            ...response,\n            body: {\n                vaultAccessToken: response.body.data.token,\n                vaultAccessExpiry: response.body.data.expires_at,\n            },\n        }));\n    }\n\n    loadInstruments(\n        requestContext: InstrumentRequestContext,\n        shippingAddress?: Address\n    ): Promise<Response<InstrumentsResponseBody>> {\n        return (shippingAddress) ?\n            this._loadInstrumentsWithAddress(requestContext, shippingAddress) :\n            this._loadInstruments(requestContext);\n    }\n\n    deleteInstrument(\n        requestContext: InstrumentRequestContext,\n        instrumentId: string\n    ): Promise<Response<InstrumentsResponseBody>> {\n        const payload = {\n            ...requestContext,\n            instrumentId,\n        };\n\n        return new Promise((resolve, reject) => {\n            this._client.deleteShopperInstrument(\n                payload, (\n                    errorResponse: PaymentResponse<InternalInstrumentErrorResponseBody>,\n                    response: PaymentResponse<InternalInstrumentsResponseBody>\n                ) =>  errorResponse ?\n                    reject(this._transformer.transformErrorResponse(errorResponse)) :\n                    resolve(this._transformer.transformResponse(response))\n            );\n        });\n    }\n\n    private _loadInstruments(\n        requestContext: InstrumentRequestContext\n    ): Promise<Response<InstrumentsResponseBody>> {\n        return new Promise((resolve, reject) => {\n            this._client.loadInstruments(\n                requestContext, (\n                    errorResponse: PaymentResponse<InternalInstrumentErrorResponseBody>,\n                    response: PaymentResponse<InternalInstrumentsResponseBody>\n                ) => errorResponse ?\n                    reject(this._transformer.transformErrorResponse(errorResponse)) :\n                    resolve(this._transformer.transformResponse(response))\n            );\n        });\n    }\n\n    private _loadInstrumentsWithAddress(\n        requestContext: InstrumentRequestContext,\n        shippingAddress: Address\n    ): Promise<Response<InstrumentsResponseBody>> {\n        const payload = {\n            ...requestContext,\n            shippingAddress: mapToInternalAddress(shippingAddress),\n        };\n\n        return new Promise((resolve, reject) => {\n            this._client.loadInstrumentsWithAddress(\n                payload, (\n                    errorResponse: PaymentResponse<InternalInstrumentErrorResponseBody>,\n                    response: PaymentResponse<InternalInstrumentsResponseBody>\n                ) => errorResponse ?\n                    reject(this._transformer.transformErrorResponse(errorResponse)) :\n                    resolve(this._transformer.transformResponse(response))\n            );\n        });\n    }\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport { LoadShippingCountriesAction, ShippingCountryActionType } from './shipping-country-actions';\nimport ShippingCountryRequestSender from './shipping-country-request-sender';\n\nexport default class ShippingCountryActionCreator {\n    constructor(\n        private _shippingCountryRequestSender: ShippingCountryRequestSender\n    ) {}\n\n    loadCountries(options?: RequestOptions): Observable<LoadShippingCountriesAction> {\n        return Observable.create((observer: Observer<LoadShippingCountriesAction>) => {\n            observer.next(createAction(ShippingCountryActionType.LoadShippingCountriesRequested));\n\n            this._shippingCountryRequestSender.loadCountries(options)\n                .then(response => {\n                    observer.next(createAction(ShippingCountryActionType.LoadShippingCountriesSucceeded, response.body.data));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ShippingCountryActionType.LoadShippingCountriesFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\nimport { CountryResponseBody } from '../geography';\n\nexport default class ShippingCountryRequestSender {\n    constructor(\n        private _requestSender: RequestSender,\n        private _config: { locale?: string }\n    ) {}\n\n    loadCountries({ timeout }: RequestOptions = {}): Promise<Response<CountryResponseBody>> {\n        const url = '/internalapi/v1/shipping/countries';\n        const headers = {\n            'Accept-Language': this._config.locale,\n        };\n\n        return this._requestSender.get(url, { headers, timeout });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { AddressRequestBody } from '../address';\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { Registry } from '../common/registry';\n\nimport { ShippingInitializeOptions, ShippingRequestOptions } from './shipping-request-options';\nimport {\n    ShippingStrategyActionType,\n    ShippingStrategyDeinitializeAction,\n    ShippingStrategyInitializeAction,\n    ShippingStrategySelectOptionAction,\n    ShippingStrategyUpdateAddressAction,\n} from './shipping-strategy-actions';\nimport { ShippingStrategy } from './strategies';\n\nexport default class ShippingStrategyActionCreator {\n    constructor(\n        private _strategyRegistry: Registry<ShippingStrategy>\n    ) {}\n\n    updateAddress(address: Partial<AddressRequestBody>, options?: ShippingRequestOptions): ThunkAction<ShippingStrategyUpdateAddressAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategyUpdateAddressAction>) => {\n            const payment = store.getState().payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n\n            observer.next(createAction(ShippingStrategyActionType.UpdateAddressRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .updateAddress(address, { ...options, methodId })\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.UpdateAddressSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.UpdateAddressFailed, error, { methodId }));\n                });\n        });\n    }\n\n    selectOption(shippingOptionId: string, options?: ShippingRequestOptions): ThunkAction<ShippingStrategySelectOptionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategySelectOptionAction>) => {\n            const payment = store.getState().payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n\n            observer.next(createAction(ShippingStrategyActionType.SelectOptionRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .selectOption(shippingOptionId, { ...options, methodId })\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.SelectOptionSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.SelectOptionFailed, error, { methodId }));\n                });\n        });\n    }\n\n    initialize(options?: ShippingInitializeOptions): ThunkAction<ShippingStrategyInitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategyInitializeAction>) => {\n            const state = store.getState();\n            const payment = state.payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n            const mergedOptions = { ...options, methodId };\n\n            if (methodId && state.shippingStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(ShippingStrategyActionType.InitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .initialize(mergedOptions)\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.InitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.InitializeFailed, error, { methodId }));\n                });\n        });\n    }\n\n    deinitialize(options?: ShippingRequestOptions): ThunkAction<ShippingStrategyDeinitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategyDeinitializeAction>) => {\n            const state = store.getState();\n            const payment = state.payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n\n            if (methodId && !state.shippingStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(ShippingStrategyActionType.DeinitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .deinitialize({ ...options, methodId })\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.DeinitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.DeinitializeFailed, error, { methodId }));\n                });\n        });\n    }\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\n\nimport { isInternalAddressEqual, mapFromInternalAddress } from '../../../address';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { AmazonPayAddressBook, AmazonPayOrderReference, AmazonPayScriptLoader, AmazonPayWindow } from '../../../payment/strategies/amazon-pay';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { RemoteCheckoutSynchronizationError } from '../../../remote-checkout/errors';\nimport ConsignmentActionCreator from '../../consignment-action-creator';\nimport { ShippingInitializeOptions, ShippingRequestOptions } from '../../shipping-request-options';\nimport { ShippingStrategyActionType } from '../../shipping-strategy-actions';\nimport ShippingStrategy from '../shipping-strategy';\n\nimport AmazonPayShippingInitializeOptions from './amazon-pay-shipping-initialize-options';\n\nexport default class AmazonPayShippingStrategy implements ShippingStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _window: AmazonPayWindow;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _consignmentActionCreator: ConsignmentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _scriptLoader: AmazonPayScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    initialize(options: ShippingInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { amazon: amazonOptions, methodId } = options;\n\n        if (!amazonOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.amazon\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => new Promise((resolve, reject) => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const onReady = () => {\n                    this._createAddressBook(amazonOptions)\n                        .then(resolve)\n                        .catch(reject);\n                };\n\n                this._scriptLoader.loadWidget(this._paymentMethod, onReady)\n                    .catch(reject);\n            }))\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    updateAddress(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    selectOption(optionId: string, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.selectShippingOption(optionId, options)\n        );\n    }\n\n    private _createAddressBook(options: AmazonPayShippingInitializeOptions): Promise<AmazonPayAddressBook> {\n        return new Promise((resolve, reject) => {\n            const { container, onAddressSelect = () => {}, onError = () => {}, onReady = () => {} } = options;\n            const merchantId = this._paymentMethod && this._paymentMethod.config.merchantId;\n\n            if (!document.getElementById(container)) {\n                return reject(new InvalidArgumentError('Unable to create AmazonPay AddressBook widget without valid container ID.'));\n            }\n\n            if (!this._window.OffAmazonPayments) {\n                return reject(new NotInitializedError(NotInitializedErrorType.ShippingNotInitialized));\n            }\n\n            if (!merchantId) {\n                return reject(new MissingDataError(MissingDataErrorType.MissingPaymentMethod));\n            }\n\n            const widget = new this._window.OffAmazonPayments.Widgets.AddressBook({\n                design: {\n                    designMode: 'responsive',\n                },\n                scope: 'payments:billing_address payments:shipping_address payments:widget profile',\n                sellerId: merchantId,\n                onAddressSelect: orderReference => {\n                    this._synchronizeShippingAddress()\n                        .then(() => onAddressSelect(orderReference))\n                        .catch(onError);\n                },\n                onError: error => {\n                    reject(error);\n                    onError(error);\n                },\n                onReady: orderReference => {\n                    this._updateOrderReference(orderReference)\n                        .then(() => {\n                            resolve();\n                            onReady(orderReference);\n                        })\n                        .catch(onError);\n                },\n            });\n\n            widget.bind(container);\n\n            return widget;\n        });\n    }\n\n    private _synchronizeShippingAddress(): Promise<InternalCheckoutSelectors> {\n        const methodId = this._paymentMethod && this._paymentMethod.id;\n        const amazon = this._store.getState().remoteCheckout.getCheckout('amazon');\n        const referenceId = amazon ? amazon.referenceId : undefined;\n\n        if (!methodId || !referenceId) {\n            throw new RemoteCheckoutSynchronizationError();\n        }\n\n        return this._store.dispatch(\n            createAction(ShippingStrategyActionType.UpdateAddressRequested, undefined, { methodId })\n        )\n            .then(() => this._store.dispatch(\n                this._remoteCheckoutActionCreator.initializeShipping(methodId, { referenceId })\n            ))\n            .then(state => {\n                const amazon = state.remoteCheckout.getCheckout('amazon');\n                const remoteAddress = amazon && amazon.shipping && amazon.shipping.address;\n                const address = state.shippingAddress.getShippingAddress();\n\n                if (remoteAddress === false) {\n                    throw new RemoteCheckoutSynchronizationError();\n                }\n\n                if (!remoteAddress || isInternalAddressEqual(remoteAddress, address || {})) {\n                    return this._store.getState();\n                }\n\n                return this._store.dispatch(\n                    this._consignmentActionCreator.updateAddress(mapFromInternalAddress(remoteAddress))\n                );\n            })\n            .then(() => this._store.dispatch(\n                createAction(ShippingStrategyActionType.UpdateAddressSucceeded, undefined, { methodId })\n            ))\n            .catch(error => this._store.dispatch(\n                createErrorAction(ShippingStrategyActionType.UpdateAddressFailed, error, { methodId })\n            ));\n    }\n\n    private _updateOrderReference(orderReference: AmazonPayOrderReference): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.updateCheckout('amazon', {\n                referenceId: orderReference.getAmazonOrderReferenceId(),\n            })\n        );\n    }\n}\n","import { AddressRequestBody } from '../../../address';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport ConsignmentActionCreator from '../../consignment-action-creator';\nimport { ShippingRequestOptions } from '../../shipping-request-options';\nimport ShippingStrategy from '../shipping-strategy';\n\nexport default class DefaultShippingStrategy implements ShippingStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _consignmentActionCreator: ConsignmentActionCreator\n    ) {}\n\n    updateAddress(address: AddressRequestBody, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.updateAddress(address, options)\n        );\n    }\n\n    selectOption(optionId: string, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.selectShippingOption(optionId, options)\n        );\n    }\n\n    initialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { memoize } from 'lodash';\n\nimport isPlainObject from './is-plain-object';\n\nconst cloneDeep = memoize(<T>(input: T): T => {\n    if (Array.isArray(input)) {\n        return input.map((value: T[keyof T]) => (\n            cloneDeepSafe(value)\n        )) as any;\n    }\n\n    if (isPlainObject(input)) {\n        return (Object.keys(input) as Array<keyof T>)\n            .reduce((result, key) => ({\n                ...result,\n                [key]: cloneDeepSafe(input[key]),\n            }), {}) as T;\n    }\n\n    return input;\n});\n\n// Use WeakMap as the MapCache, this allows for better garbage collection\n// There's a deprecated `clear` method in the lodash implementation\n// of MapCache, hence the `any`\ncloneDeep.cache = new WeakMap() as any;\n\n/**\n * This is a wrapper function for `cloneDeep`. We need it because `cloneDeep` is\n * a memoized function using an instance of `WeakMap` as its cache. Without this\n * wrapper, the memoized function will throw an error if it is called with a\n * non-object argument.\n */\nconst cloneDeepSafe = <T>(input: T): T => {\n    return typeof input === 'object' && input !== null ?\n        cloneDeep(input) :\n        input;\n};\n\n/**\n * Clone the return value of a function. If the result is the same as previous\n * calls, return the previous clone instead of cloning it again.\n */\nexport default function cloneResult<T extends Func>(fn: T): T {\n    return ((...args: any[]) => cloneDeepSafe(fn(...args))) as T;\n}\n\nexport type Func = (...args: any[]) => any;\n","import { createSelectorCreator, defaultMemoize } from 'reselect';\nimport * as shallowEqual from 'shallowequal';\n\nimport withMemoizedCombiner from './with-memoized-combiner';\n\nconst createShallowEqualSelector = createSelectorCreator(\n    defaultMemoize,\n    (a: any, b: any) => shallowEqual(a, b)\n);\n\nexport default withMemoizedCombiner(createShallowEqualSelector);\n","import {\n    createCheckoutStoreErrorSelectorFactory,\n    createCheckoutStoreSelectorFactory,\n    createCheckoutStoreStatusSelectorFactory,\n    CheckoutSelectors,\n    InternalCheckoutSelectors,\n} from '../checkout';\n\nexport type CheckoutSelectorsFactory = (selectors: InternalCheckoutSelectors) => CheckoutSelectors;\n\nexport function createCheckoutSelectorsFactory(): CheckoutSelectorsFactory {\n    const createCheckoutStoreSelector = createCheckoutStoreSelectorFactory();\n    const createCheckoutStoreErrorSelector = createCheckoutStoreErrorSelectorFactory();\n    const createCheckoutStoreStatusSelector = createCheckoutStoreStatusSelectorFactory();\n\n    return (selectors: InternalCheckoutSelectors) => {\n        const data = createCheckoutStoreSelector(selectors);\n        const errors = createCheckoutStoreErrorSelector(selectors);\n        const statuses = createCheckoutStoreStatusSelector(selectors);\n\n        return {\n            data,\n            errors,\n            statuses,\n        };\n    };\n}\n\nexport default function createCheckoutSelectors(selectors: InternalCheckoutSelectors): CheckoutSelectors {\n    return createCheckoutSelectorsFactory()(selectors);\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { Address } from '../address';\nimport { BillingAddress } from '../billing';\nimport { Cart } from '../cart';\nimport { createSelector } from '../common/selector';\nimport { cloneResult as clone } from '../common/utility';\nimport { StoreConfig } from '../config/config';\nimport { Coupon, GiftCertificate } from '../coupon';\nimport { Customer } from '../customer';\nimport { FormField } from '../form';\nimport { Country } from '../geography';\nimport { Order } from '../order';\nimport { PaymentMethod } from '../payment';\nimport { Instrument } from '../payment/instrument';\nimport { Consignment, ShippingOption } from '../shipping';\n\nimport Checkout from './checkout';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for getting the state of the current checkout.\n *\n * This object has a set of methods that allow you to get a specific piece of\n * checkout information, such as shipping and billing details.\n */\nexport default interface CheckoutStoreSelector {\n    /**\n     * Gets the current checkout.\n     *\n     * @returns The current checkout if it is loaded, otherwise undefined.\n     */\n    getCheckout(): Checkout | undefined;\n\n    /**\n     * Gets the current order.\n     *\n     * @returns The current order if it is loaded, otherwise undefined.\n     */\n    getOrder(): Order | undefined;\n\n    /**\n     * Gets the checkout configuration of a store.\n     *\n     * @returns The configuration object if it is loaded, otherwise undefined.\n     */\n    getConfig(): StoreConfig | undefined;\n\n    /**\n     * Gets the shipping address of the current checkout.\n     *\n     * If the address is partially complete, it may not have shipping options\n     * associated with it.\n     *\n     * @returns The shipping address object if it is loaded, otherwise\n     * undefined.\n     */\n    getShippingAddress(): Address | undefined;\n\n    /**\n     * Gets a list of shipping options available for the shipping address.\n     *\n     * If there is no shipping address assigned to the current checkout, the\n     * list of shipping options will be empty.\n     *\n     * @returns The list of shipping options if any, otherwise undefined.\n     */\n    getShippingOptions(): ShippingOption[] | undefined;\n\n    /**\n     * Gets a list of consignments.\n     *\n     * If there are no consignments created for to the current checkout, the\n     * list will be empty.\n     *\n     * @returns The list of consignments if any, otherwise undefined.\n     */\n    getConsignments(): Consignment[] | undefined;\n\n    /**\n     * Gets the selected shipping option for the current checkout.\n     *\n     * @returns The shipping option object if there is a selected option,\n     * otherwise undefined.\n     */\n    getSelectedShippingOption(): ShippingOption | undefined;\n\n    /**\n     * Gets a list of countries available for shipping.\n     *\n     * @returns The list of countries if it is loaded, otherwise undefined.\n     */\n    getShippingCountries(): Country[] | undefined;\n\n    /**\n     * Gets the billing address of an order.\n     *\n     * @returns The billing address object if it is loaded, otherwise undefined.\n     */\n    getBillingAddress(): BillingAddress | undefined;\n\n    /**\n     * Gets a list of countries available for billing.\n     *\n     * @returns The list of countries if it is loaded, otherwise undefined.\n     */\n    getBillingCountries(): Country[] | undefined;\n\n    /**\n     * Gets a list of payment methods available for checkout.\n     *\n     * @returns The list of payment methods if it is loaded, otherwise undefined.\n     */\n    getPaymentMethods(): PaymentMethod[] | undefined;\n\n    /**\n     * Gets a payment method by an id.\n     *\n     * The method returns undefined if unable to find a payment method with the\n     * specified id, either because it is not available for the customer, or it\n     * is not loaded.\n     *\n     * @param methodId - The identifier of the payment method.\n     * @param gatewayId - The identifier of a payment provider providing the\n     * payment method.\n     * @returns The payment method object if loaded and available, otherwise,\n     * undefined.\n     */\n    getPaymentMethod(methodId: string, gatewayId?: string): PaymentMethod | undefined;\n\n    /**\n     * Gets the payment method that is selected for checkout.\n     *\n     * @returns The payment method object if there is a selected method;\n     * undefined if otherwise.\n     */\n    getSelectedPaymentMethod(): PaymentMethod | undefined;\n\n    /**\n     * Gets the current cart.\n     *\n     * @returns The current cart object if it is loaded, otherwise undefined.\n     */\n    getCart(): Cart | undefined;\n\n    /**\n     * Gets a list of coupons that are applied to the current checkout.\n     *\n     * @returns The list of applied coupons if there is any, otherwise undefined.\n     */\n    getCoupons(): Coupon[] | undefined;\n\n    /**\n     * Gets a list of gift certificates that are applied to the current checkout.\n     *\n     * @returns The list of applied gift certificates if there is any, otherwise undefined.\n     */\n    getGiftCertificates(): GiftCertificate[] | undefined;\n\n    /**\n     * Gets the current customer.\n     *\n     * @returns The current customer object if it is loaded, otherwise\n     * undefined.\n     */\n    getCustomer(): Customer | undefined;\n\n    /**\n     * Checks if payment data is required or not.\n     *\n     * If payment data is required, customers should be prompted to enter their\n     * payment details.\n     *\n     * ```js\n     * if (state.checkout.isPaymentDataRequired()) {\n     *     // Render payment form\n     * } else {\n     *     // Render \"Payment is not required for this order\" message\n     * }\n     * ```\n     *\n     * @param useStoreCredit - If true, check whether payment data is required\n     * with store credit applied; otherwise, check without store credit.\n     * @returns True if payment data is required, otherwise false.\n     */\n    isPaymentDataRequired(useStoreCredit?: boolean): boolean;\n\n    /**\n     * Checks if payment data is submitted or not.\n     *\n     * If payment data is already submitted using a payment method, customers\n     * should not be prompted to enter their payment details again.\n     *\n     * @param methodId - The identifier of the payment method.\n     * @param gatewayId - The identifier of a payment provider providing the\n     * payment method.\n     * @returns True if payment data is submitted, otherwise false.\n     */\n    isPaymentDataSubmitted(methodId: string, gatewayId?: string): boolean;\n\n    /**\n     * Gets a list of payment instruments associated with the current customer.\n     *\n     * @returns The list of payment instruments if it is loaded, otherwise undefined.\n     */\n    getInstruments(): Instrument[] | undefined;\n\n    /**\n     * Gets a set of form fields that should be presented to customers in order\n     * to capture their billing address for a specific country.\n     *\n     * @param countryCode - A 2-letter country code (ISO 3166-1 alpha-2).\n     * @returns The set of billing address form fields if it is loaded,\n     * otherwise undefined.\n     */\n    getBillingAddressFields(countryCode: string): FormField[];\n\n    /**\n     * Gets a set of form fields that should be presented to customers in order\n     * to capture their shipping address for a specific country.\n     *\n     * @param countryCode - A 2-letter country code (ISO 3166-1 alpha-2).\n     * @returns The set of shipping address form fields if it is loaded,\n     * otherwise undefined.\n     */\n    getShippingAddressFields(countryCode: string): FormField[];\n}\n\nexport type CheckoutStoreSelectorFactory = (state: InternalCheckoutSelectors) => CheckoutStoreSelector;\n\nexport function createCheckoutStoreSelectorFactory(): CheckoutStoreSelectorFactory {\n    const getCheckout = createSelector(\n        ({ checkout }: InternalCheckoutSelectors) => checkout.getCheckout,\n        getCheckout => clone(getCheckout)\n    );\n\n    const getOrder = createSelector(\n        ({ order }: InternalCheckoutSelectors) => order.getOrder,\n        getOrder => clone(getOrder)\n    );\n\n    const getConfig = createSelector(\n        ({ config }: InternalCheckoutSelectors) => config.getStoreConfig,\n        getStoreConfig => clone(getStoreConfig)\n    );\n\n    const getShippingAddress = createSelector(\n        ({ shippingAddress }: InternalCheckoutSelectors) => shippingAddress.getShippingAddress,\n        ({ config }: InternalCheckoutSelectors) => config.getContextConfig,\n        (getShippingAddress, getContextConfig) => clone(() => {\n            const shippingAddress = getShippingAddress();\n            const context = getContextConfig();\n\n            if (!shippingAddress) {\n                if (!context || !context.geoCountryCode) {\n                    return;\n                }\n\n                return {\n                    firstName: '',\n                    lastName: '',\n                    company: '',\n                    address1: '',\n                    address2: '',\n                    city: '',\n                    stateOrProvince: '',\n                    stateOrProvinceCode: '',\n                    postalCode: '',\n                    country: '',\n                    phone: '',\n                    customFields: [],\n                    countryCode: context.geoCountryCode,\n                };\n            }\n\n            return shippingAddress;\n        })\n    );\n\n    const getShippingOptions = createSelector(\n        ({ consignments }: InternalCheckoutSelectors) => consignments.getConsignments,\n        getConsignments => clone(() => {\n            const consignments = getConsignments();\n\n            if (consignments && consignments.length) {\n                return consignments[0].availableShippingOptions;\n            }\n        })\n    );\n\n    const getConsignments = createSelector(\n        ({ consignments }: InternalCheckoutSelectors) => consignments.getConsignments,\n        getConsignments => clone(getConsignments)\n    );\n\n    const getSelectedShippingOption = createSelector(\n        ({ consignments }: InternalCheckoutSelectors) => consignments.getConsignments,\n        getConsignments => clone(() => {\n            const consignments = getConsignments();\n\n            if (!consignments || !consignments.length) {\n                return;\n            }\n\n            return consignments[0].selectedShippingOption;\n        })\n    );\n\n    const getShippingCountries = createSelector(\n        ({ shippingCountries }: InternalCheckoutSelectors) => shippingCountries.getShippingCountries,\n        getShippingCountries => clone(getShippingCountries)\n    );\n\n    const getBillingAddress = createSelector(\n        ({ billingAddress }: InternalCheckoutSelectors) => billingAddress.getBillingAddress,\n        getBillingAddress => clone(getBillingAddress)\n    );\n\n    const getBillingCountries = createSelector(\n        ({ countries }: InternalCheckoutSelectors) => countries.getCountries,\n        getCountries => clone(getCountries)\n    );\n\n    const getPaymentMethods = createSelector(\n        ({ paymentMethods }: InternalCheckoutSelectors) => paymentMethods.getPaymentMethods,\n        getPaymentMethods => clone(getPaymentMethods)\n    );\n\n    const getPaymentMethod = createSelector(\n        ({ paymentMethods }: InternalCheckoutSelectors) => paymentMethods.getPaymentMethod,\n        getPaymentMethod => clone(getPaymentMethod)\n    );\n\n    const getSelectedPaymentMethod = createSelector(\n        ({ payment }: InternalCheckoutSelectors) => payment.getPaymentId,\n        ({ paymentMethods }: InternalCheckoutSelectors) => paymentMethods.getPaymentMethod,\n        (getPaymentId, getPaymentMethod) => clone(() => {\n            const payment = getPaymentId();\n\n            return payment && getPaymentMethod(payment.providerId, payment.gatewayId);\n        })\n    );\n\n    const getCart = createSelector(\n        ({ cart }: InternalCheckoutSelectors) => cart.getCart,\n        getCart => clone(getCart)\n    );\n\n    const getCoupons = createSelector(\n        ({ coupons }: InternalCheckoutSelectors) => coupons.getCoupons,\n        getCoupons => clone(getCoupons)\n    );\n\n    const getGiftCertificates = createSelector(\n        ({ giftCertificates }: InternalCheckoutSelectors) => giftCertificates.getGiftCertificates,\n        getGiftCertificates => clone(getGiftCertificates)\n    );\n\n    const getCustomer = createSelector(\n        ({ customer }: InternalCheckoutSelectors) => customer.getCustomer,\n        getCustomer => clone(getCustomer)\n    );\n\n    const isPaymentDataRequired = createSelector(\n        ({ payment }: InternalCheckoutSelectors) => payment.isPaymentDataRequired,\n        isPaymentDataRequired => clone(isPaymentDataRequired)\n    );\n\n    const isPaymentDataSubmitted = createSelector(\n        ({ payment }: InternalCheckoutSelectors) => payment.isPaymentDataSubmitted,\n        ({ paymentMethods }: InternalCheckoutSelectors) => paymentMethods.getPaymentMethod,\n        (isPaymentDataSubmitted, getPaymentMethod) => clone((methodId: string, gatewayId?: string) => {\n            return isPaymentDataSubmitted(getPaymentMethod(methodId, gatewayId));\n        })\n    );\n\n    const getInstruments = createSelector(\n        ({ instruments }: InternalCheckoutSelectors) => instruments.getInstruments,\n        getInstruments => clone(getInstruments)\n    );\n\n    const getBillingAddressFields = createSelector(\n        ({ form }: InternalCheckoutSelectors) => form.getBillingAddressFields,\n        ({ countries }: InternalCheckoutSelectors) => countries.getCountries,\n        (getBillingAddressFields, getCountries) => clone((countryCode: string) => {\n            return getBillingAddressFields(getCountries(), countryCode);\n        })\n    );\n\n    const getShippingAddressFields = createSelector(\n        ({ form }: InternalCheckoutSelectors) => form.getShippingAddressFields,\n        ({ shippingCountries }: InternalCheckoutSelectors) => shippingCountries.getShippingCountries,\n        (getShippingAddressFields, getShippingCountries) => clone((countryCode: string) => {\n            return getShippingAddressFields(getShippingCountries(), countryCode);\n        })\n    );\n\n    return memoizeOne((\n        state: InternalCheckoutSelectors\n    ): CheckoutStoreSelector => {\n        return {\n            getCheckout: getCheckout(state),\n            getOrder: getOrder(state),\n            getConfig: getConfig(state),\n            getShippingAddress: getShippingAddress(state),\n            getShippingOptions: getShippingOptions(state),\n            getConsignments: getConsignments(state),\n            getSelectedShippingOption: getSelectedShippingOption(state),\n            getShippingCountries: getShippingCountries(state),\n            getBillingAddress: getBillingAddress(state),\n            getBillingCountries: getBillingCountries(state),\n            getPaymentMethods: getPaymentMethods(state),\n            getPaymentMethod: getPaymentMethod(state),\n            getSelectedPaymentMethod: getSelectedPaymentMethod(state),\n            getCart: getCart(state),\n            getCoupons: getCoupons(state),\n            getGiftCertificates: getGiftCertificates(state),\n            getCustomer: getCustomer(state),\n            isPaymentDataRequired: isPaymentDataRequired(state),\n            isPaymentDataSubmitted: isPaymentDataSubmitted(state),\n            getInstruments: getInstruments(state),\n            getBillingAddressFields: getBillingAddressFields(state),\n            getShippingAddressFields: getShippingAddressFields(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { RequestError } from '../common/error/errors';\nimport { createSelector, createShallowEqualSelector } from '../common/selector';\nimport { Omit } from '../common/types';\n\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for getting the error of any asynchronous checkout action, if\n * there is any.\n *\n * This object has a set of getters that would return an error if an action is\n * not executed successfully. For example, if you are unable to submit an order,\n * you can use this object to retrieve the reason for the failure.\n */\nexport default interface CheckoutStoreErrorSelector {\n    getError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to load the current checkout.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadCheckoutError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to update the current checkout.\n     *\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateCheckoutError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to submit the current order.\n     *\n     * @returns The error object if unable to submit, otherwise undefined.\n     */\n    getSubmitOrderError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to finalize the current order.\n     *\n     * @returns The error object if unable to finalize, otherwise undefined.\n     */\n    getFinalizeOrderError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to load the current order.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadOrderError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to load the current cart.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadCartError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to load billing countries.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadBillingCountriesError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to load shipping countries.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadShippingCountriesError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to load payment methods.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadPaymentMethodsError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to load a specific payment method.\n     *\n     * @param methodId - The identifier of the payment method to load.\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadPaymentMethodError(methodId?: string): Error | undefined;\n\n    /**\n     * Returns an error if unable to initialize a specific payment method.\n     *\n     * @param methodId - The identifier of the payment method to initialize.\n     * @returns The error object if unable to initialize, otherwise undefined.\n     */\n    getInitializePaymentError(methodId?: string): Error | undefined;\n\n    /**\n     * Returns an error if unable to sign in.\n     *\n     * @returns The error object if unable to sign in, otherwise undefined.\n     */\n    getSignInError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to sign out.\n     *\n     * @returns The error object if unable to sign out, otherwise undefined.\n     */\n    getSignOutError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to initialize the customer step of a checkout\n     * process.\n     *\n     * @param methodId - The identifer of the initialization method to execute.\n     * @returns The error object if unable to initialize, otherwise undefined.\n     */\n    getInitializeCustomerError(methodId?: string): Error | undefined;\n\n    /**\n     * Returns an error if unable to load shipping options.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadShippingOptionsError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to select a shipping option.\n     *\n     * A consignment ID should be provided when checking for an error for a\n     * specific consignment, otherwise it will check for all available consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns The error object if unable to select, otherwise undefined.\n     */\n    getSelectShippingOptionError(consignmentId?: string): Error | undefined;\n\n    /**\n     * Returns an error if unable to continue as guest.\n     *\n     * @returns The error object if unable to continue, otherwise undefined.\n     */\n    getContinueAsGuestError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to update billing address.\n     *\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateBillingAddressError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to update shipping address.\n     *\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateShippingAddressError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to delete a consignment.\n     *\n     * A consignment ID should be provided when checking for an error for a\n     * specific consignment, otherwise it will check for all available consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns The error object if unable to delete, otherwise undefined.\n     */\n    getDeleteConsignmentError(consignmentId?: string): Error | undefined;\n\n    /**\n     * Returns an error if unable to update a consignment.\n     *\n     * A consignment ID should be provided when checking for an error for a\n     * specific consignment, otherwise it will check for all available consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateConsignmentError(consignmentId?: string): Error | undefined;\n\n    /**\n     * Returns an error if unable to create consignments.\n     *\n     * @returns The error object if unable to create, otherwise undefined.\n     */\n    getCreateConsignmentsError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to initialize the shipping step of a checkout\n     * process.\n     *\n     * @param methodId - The identifer of the initialization method to execute.\n     * @returns The error object if unable to initialize, otherwise undefined.\n     */\n    getInitializeShippingError(methodId?: string): Error | undefined;\n\n    /**\n     * Returns an error if unable to apply store credit.\n     *\n     * @returns The error object if unable to apply, otherwise undefined.\n     */\n    getApplyStoreCreditError(): RequestError | undefined;\n\n    /**\n     * Returns an error if unable to apply a coupon code.\n     *\n     * @returns The error object if unable to apply, otherwise undefined.\n     */\n    getApplyCouponError(): RequestError | undefined;\n\n    /**\n     * Returns an error if unable to remove a coupon code.\n     *\n     * @returns The error object if unable to remove, otherwise undefined.\n     */\n    getRemoveCouponError(): RequestError | undefined;\n\n    /**\n     * Returns an error if unable to apply a gift certificate.\n     *\n     * @returns The error object if unable to apply, otherwise undefined.\n     */\n    getApplyGiftCertificateError(): RequestError | undefined;\n\n    /**\n     * Returns an error if unable to remove a gift certificate.\n     *\n     * @returns The error object if unable to remove, otherwise undefined.\n     */\n    getRemoveGiftCertificateError(): RequestError | undefined;\n\n    /**\n     * Returns an error if unable to load payment instruments.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadInstrumentsError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to delete a payment instrument.\n     *\n     * @param instrumentId - The identifier of the payment instrument to delete.\n     * @returns The error object if unable to delete, otherwise undefined.\n     */\n    getDeleteInstrumentError(instrumentId?: string): Error | undefined;\n\n    /**\n     * Returns an error if unable to load the checkout configuration of a store.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadConfigError(): Error | undefined;\n}\n\nexport type CheckoutStoreErrorSelectorFactory = (state: InternalCheckoutSelectors) => CheckoutStoreErrorSelector;\n\nexport function createCheckoutStoreErrorSelectorFactory(): CheckoutStoreErrorSelectorFactory {\n    const getError = createShallowEqualSelector(\n        (selector: Omit<CheckoutStoreErrorSelector, 'getError'>) => selector,\n        selector => () => {\n            for (const key of Object.keys(selector) as Array<keyof Omit<CheckoutStoreErrorSelector, 'getError'>>) {\n                const error = selector[key]();\n\n                if (error) {\n                    return error;\n                }\n            }\n        }\n    );\n\n    const getSelectShippingOptionError = createSelector(\n        ({ shippingStrategies }: InternalCheckoutSelectors) => shippingStrategies.getSelectOptionError,\n        ({ consignments }: InternalCheckoutSelectors) => consignments.getUpdateShippingOptionError,\n        (getSelectOptionError, getUpdateShippingOptionError) => (consignmentId?: string) => {\n            return (\n                getSelectOptionError() ||\n                getUpdateShippingOptionError(consignmentId)\n            );\n        }\n    );\n\n    return memoizeOne((\n        state: InternalCheckoutSelectors\n    ): CheckoutStoreErrorSelector => {\n        const selector = {\n            getLoadCheckoutError: state.checkout.getLoadError,\n            getUpdateCheckoutError: state.checkout.getUpdateError,\n            getSubmitOrderError: state.paymentStrategies.getExecuteError,\n            getFinalizeOrderError: state.paymentStrategies.getFinalizeError,\n            getLoadOrderError: state.order.getLoadError,\n            getLoadCartError: state.cart.getLoadError,\n            getLoadBillingCountriesError: state.countries.getLoadError,\n            getLoadShippingCountriesError: state.shippingCountries.getLoadError,\n            getLoadPaymentMethodsError: state.paymentMethods.getLoadError,\n            getLoadPaymentMethodError: state.paymentMethods.getLoadMethodError,\n            getInitializePaymentError: state.paymentStrategies.getInitializeError,\n            getSignInError: state.customerStrategies.getSignInError,\n            getSignOutError: state.customerStrategies.getSignOutError,\n            getInitializeCustomerError: state.customerStrategies.getInitializeError,\n            getLoadShippingOptionsError: state.consignments.getLoadShippingOptionsError,\n            getSelectShippingOptionError: getSelectShippingOptionError(state),\n            getContinueAsGuestError: state.billingAddress.getContinueAsGuestError,\n            getUpdateBillingAddressError: state.billingAddress.getUpdateError,\n            getUpdateShippingAddressError: state.shippingStrategies.getUpdateAddressError,\n            getDeleteConsignmentError: state.consignments.getDeleteError,\n            getUpdateConsignmentError: state.consignments.getUpdateError,\n            getCreateConsignmentsError: state.consignments.getCreateError,\n            getInitializeShippingError: state.shippingStrategies.getInitializeError,\n            getApplyStoreCreditError: state.storeCredit.getApplyError,\n            getApplyCouponError: state.coupons.getApplyError,\n            getRemoveCouponError: state.coupons.getRemoveError,\n            getApplyGiftCertificateError: state.giftCertificates.getApplyError,\n            getRemoveGiftCertificateError: state.giftCertificates.getRemoveError,\n            getLoadInstrumentsError: state.instruments.getLoadError,\n            getDeleteInstrumentError: state.instruments.getDeleteError,\n            getLoadConfigError: state.config.getLoadError,\n        };\n\n        return {\n            getError: getError(selector),\n            ...selector,\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector, createShallowEqualSelector } from '../common/selector';\nimport { Omit } from '../common/types';\n\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for checking the statuses of various asynchronous actions related\n * to checkout.\n *\n * This object has a set of getters that return true if an action is in\n * progress. For example, you can check whether a customer is submitting an\n * order and waiting for the request to complete.\n */\nexport default interface CheckoutStoreStatusSelector {\n    /**\n     * Checks whether any checkout action is pending.\n     *\n     * @returns True if there is a pending action, otherwise false.\n     */\n    isPending(): boolean;\n\n    /**\n     * Checks whether the current checkout is loading.\n     *\n     * @returns True if the current checkout is loading, otherwise false.\n     */\n    isLoadingCheckout(): boolean;\n\n    /**\n     * Checks whether the current checkout is being updated.\n     *\n     * @returns True if the current checkout is being updated, otherwise false.\n     */\n    isUpdatingCheckout(): boolean;\n\n    /**\n     * Checks whether the current order is submitting.\n     *\n     * @returns True if the current order is submitting, otherwise false.\n     */\n    isSubmittingOrder(): boolean;\n\n    /**\n     * Checks whether the current order is finalizing.\n     *\n     * @returns True if the current order is finalizing, otherwise false.\n     */\n    isFinalizingOrder(): boolean;\n\n    /**\n     * Checks whether the current order is loading.\n     *\n     * @returns True if the current order is loading, otherwise false.\n     */\n    isLoadingOrder(): boolean;\n\n    /**\n     * Checks whether the current cart is loading.\n     *\n     * @returns True if the current cart is loading, otherwise false.\n     */\n    isLoadingCart(): boolean;\n\n    /**\n     * Checks whether billing countries are loading.\n     *\n     * @returns True if billing countries are loading, otherwise false.\n     */\n    isLoadingBillingCountries(): boolean;\n\n    /**\n     * Checks whether shipping countries are loading.\n     *\n     * @returns True if shipping countries are loading, otherwise false.\n     */\n    isLoadingShippingCountries(): boolean;\n\n    /**\n     * Checks whether payment methods are loading.\n     *\n     * @returns True if payment methods are loading, otherwise false.\n     */\n    isLoadingPaymentMethods(): boolean;\n\n    /**\n     * Checks whether a specific or any payment method is loading.\n     *\n     * The method returns true if no ID is provided and at least one payment\n     * method is loading.\n     *\n     * @param methodId - The identifier of the payment method to check.\n     * @returns True if the payment method is loading, otherwise false.\n     */\n    isLoadingPaymentMethod(methodId?: string): boolean;\n\n    /**\n     * Checks whether a specific or any payment method is initializing.\n     *\n     * The method returns true if no ID is provided and at least one payment\n     * method is initializing.\n     *\n     * @param methodId - The identifier of the payment method to check.\n     * @returns True if the payment method is initializing, otherwise false.\n     */\n    isInitializingPayment(methodId?: string): boolean;\n\n    /**\n     * Checks whether the current customer is signing in.\n     *\n     * If an ID is provided, the method also checks whether the customer is\n     * signing in using a specific customer method with the same ID.\n     *\n     * @param methodId - The identifier of the method used for signing in the\n     * current customer.\n     * @returns True if the customer is signing in, otherwise false.\n     */\n    isSigningIn(methodId?: string): boolean;\n\n    /**\n     * Checks whether the current customer is signing out.\n     *\n     * If an ID is provided, the method also checks whether the customer is\n     * signing out using a specific customer method with the same ID.\n     *\n     * @param methodId - The identifier of the method used for signing out the\n     * current customer.\n     * @returns True if the customer is signing out, otherwise false.\n     */\n    isSigningOut(methodId?: string): boolean;\n\n    /**\n     * Checks whether the customer step is initializing.\n     *\n     * If an ID is provided, the method also checks whether the customer step is\n     * initializing using a specific customer method with the same ID.\n     *\n     * @param methodId - The identifier of the method used for initializing the\n     * customer step of checkout.\n     * @returns True if the customer step is initializing, otherwise false.\n     */\n    isInitializingCustomer(methodId?: string): boolean;\n\n    /**\n     * Checks whether shipping options are loading.\n     *\n     * @returns True if shipping options are loading, otherwise false.\n     */\n    isLoadingShippingOptions(): boolean;\n\n    /**\n     * Checks whether a shipping option is being selected.\n     *\n     * A consignment ID should be provided when checking if a shipping option\n     * is being selected for a specific consignment, otherwise it will check\n     * for all consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns True if selecting a shipping option, otherwise false.\n     */\n    isSelectingShippingOption(consignmentId?: string): boolean;\n\n    /**\n     * Checks whether the billing address is being updated.\n     *\n     * @returns True if updating their billing address, otherwise false.\n     */\n    isUpdatingBillingAddress(): boolean;\n\n    /**\n     * Checks whether the shopper is continuing out as a guest.\n     *\n     * @returns True if continuing as guest, otherwise false.\n     */\n    isContinuingAsGuest(): boolean;\n\n    /**\n     * Checks the shipping address is being updated.\n     *\n     * @returns True if updating their shipping address, otherwise false.\n     */\n    isUpdatingShippingAddress(): boolean;\n\n    /**\n     * Checks whether a given/any consignment is being updated.\n     *\n     * A consignment ID should be provided when checking for a specific consignment,\n     * otherwise it will check for any consignment.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns True if updating consignment(s), otherwise false.\n     */\n    isUpdatingConsignment(consignmentId?: string): boolean;\n\n    /**\n     * Checks whether a given/any consignment is being deleted.\n     *\n     * A consignment ID should be provided when checking for a specific consignment,\n     * otherwise it will check for any consignment.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns True if deleting consignment(s), otherwise false.\n     */\n    isDeletingConsignment(consignmentId?: string): boolean;\n\n    /**\n     * Checks whether a given/any consignment is being updated.\n     *\n     * A consignment ID should be provided when checking for a specific consignment,\n     * otherwise it will check for any consignment.\n     *\n     * @returns True if creating consignments, otherwise false.\n     */\n    isCreatingConsignments(): boolean;\n\n    /**\n     * Checks whether the shipping step of a checkout process is initializing.\n     *\n     * If an identifier is provided, the method also checks whether the shipping\n     * step is initializing using a specific shipping method with the same\n     * identifier.\n     *\n     * @param methodId - The identifer of the initialization method to check.\n     * @returns True if the shipping step is initializing, otherwise false.\n     */\n    isInitializingShipping(methodId?: string): boolean;\n\n    /**\n     * Checks whether the current customer is applying a coupon code.\n     *\n     * @returns True if applying a coupon code, otherwise false.\n     */\n    isApplyingCoupon(): boolean;\n\n    /**\n     * Checks whether the current customer is applying store credit.\n     *\n     * @returns True if applying store credit, otherwise false.\n     */\n    isApplyingStoreCredit(): boolean;\n\n    /**\n     * Checks whether the current customer is removing a coupon code.\n     *\n     * @returns True if removing a coupon code, otherwise false.\n     */\n    isRemovingCoupon(): boolean;\n\n    /**\n     * Checks whether the current customer is applying a gift certificate.\n     *\n     * @returns True if applying a gift certificate, otherwise false.\n     */\n    isApplyingGiftCertificate(): boolean;\n\n    /**\n     * Checks whether the current customer is removing a gift certificate.\n     *\n     * @returns True if removing a gift certificate, otherwise false.\n     */\n    isRemovingGiftCertificate(): boolean;\n\n    /**\n     * Checks whether the current customer's payment instruments are loading.\n     *\n     * @returns True if payment instruments are loading, otherwise false.\n     */\n    isLoadingInstruments(): boolean;\n\n    /**\n     * Checks whether the current customer is deleting a payment instrument.\n     *\n     * @returns True if deleting a payment instrument, otherwise false.\n     */\n    isDeletingInstrument(instrumentId?: string): boolean;\n\n    /**\n     * Checks whether the checkout configuration of a store is loading.\n     *\n     * @returns True if the configuration is loading, otherwise false.\n     */\n    isLoadingConfig(): boolean;\n\n    /**\n     * Checks whether the customer step of a checkout is in a pending state.\n     *\n     * The customer step is considered to be pending if it is in the process of\n     * initializing, signing in, signing out, and/or interacting with a customer\n     * widget.\n     *\n     * @returns True if the customer step is pending, otherwise false.\n     */\n    isCustomerStepPending(): boolean;\n\n    /**\n     * Checks whether the payment step of a checkout is in a pending state.\n     *\n     * The payment step is considered to be pending if it is in the process of\n     * initializing, submitting an order, finalizing an order, and/or\n     * interacting with a payment widget.\n     *\n     * @returns True if the payment step is pending, otherwise false.\n     */\n    isPaymentStepPending(): boolean;\n}\n\nexport type CheckoutStoreStatusSelectorFactory = (state: InternalCheckoutSelectors) => CheckoutStoreStatusSelector;\n\nexport function createCheckoutStoreStatusSelectorFactory(): CheckoutStoreStatusSelectorFactory {\n    const isPending = createShallowEqualSelector(\n        (selector: Omit<CheckoutStoreStatusSelector, 'isPending'>) => selector,\n        selector => () => {\n            return (Object.keys(selector) as Array<keyof Omit<CheckoutStoreStatusSelector, 'isPending'>>)\n                .some(key => selector[key]());\n        }\n    );\n\n    const isSelectingShippingOption = createSelector(\n        ({ shippingStrategies }: InternalCheckoutSelectors) => shippingStrategies.isSelectingOption,\n        ({ consignments }: InternalCheckoutSelectors) => consignments.isUpdatingShippingOption,\n        (isSelectingOption, isUpdatingShippingOption) => (consignmentId?: string) => {\n            return (\n                isSelectingOption() ||\n                isUpdatingShippingOption(consignmentId)\n            );\n        }\n    );\n\n    const isCustomerStepPending = createSelector(\n        ({ customerStrategies }: InternalCheckoutSelectors) => customerStrategies.isInitializing,\n        ({ customerStrategies }: InternalCheckoutSelectors) => customerStrategies.isSigningIn,\n        ({ customerStrategies }: InternalCheckoutSelectors) => customerStrategies.isSigningOut,\n        ({ customerStrategies }: InternalCheckoutSelectors) => customerStrategies.isWidgetInteracting,\n        (isInitializing, isSigningIn, isSigningOut, isWidgetInteracting) => (methodId?: string) => {\n            return (\n                isInitializing(methodId) ||\n                isSigningIn(methodId) ||\n                isSigningOut(methodId) ||\n                isWidgetInteracting(methodId)\n            );\n        }\n    );\n\n    const isPaymentStepPending = createSelector(\n        ({ paymentStrategies }: InternalCheckoutSelectors) => paymentStrategies.isInitializing,\n        ({ paymentStrategies }: InternalCheckoutSelectors) => paymentStrategies.isExecuting,\n        ({ paymentStrategies }: InternalCheckoutSelectors) => paymentStrategies.isFinalizing,\n        ({ paymentStrategies }: InternalCheckoutSelectors) => paymentStrategies.isWidgetInteracting,\n        (isInitializing, isExecuting, isFinalizing, isWidgetInteracting) => (methodId?: string) => {\n            return (\n                isInitializing(methodId) ||\n                isExecuting(methodId) ||\n                isFinalizing(methodId) ||\n                isWidgetInteracting(methodId)\n            );\n        }\n    );\n\n    return memoizeOne((\n        state: InternalCheckoutSelectors\n    ): CheckoutStoreStatusSelector => {\n        const selector = {\n            isLoadingCheckout: state.checkout.isLoading,\n            isUpdatingCheckout: state.checkout.isUpdating,\n            isSubmittingOrder: state.paymentStrategies.isExecuting,\n            isFinalizingOrder: state.paymentStrategies.isFinalizing,\n            isLoadingOrder: state.order.isLoading,\n            isLoadingCart: state.cart.isLoading,\n            isLoadingBillingCountries: state.countries.isLoading,\n            isLoadingShippingCountries: state.shippingCountries.isLoading,\n            isLoadingPaymentMethods: state.paymentMethods.isLoading,\n            isLoadingPaymentMethod: state.paymentMethods.isLoadingMethod,\n            isInitializingPayment: state.paymentStrategies.isInitializing,\n            isSigningIn: state.customerStrategies.isSigningIn,\n            isSigningOut: state.customerStrategies.isSigningOut,\n            isInitializingCustomer: state.customerStrategies.isInitializing,\n            isLoadingShippingOptions: state.consignments.isLoadingShippingOptions,\n            isSelectingShippingOption: isSelectingShippingOption(state),\n            isUpdatingBillingAddress: state.billingAddress.isUpdating,\n            isContinuingAsGuest: state.billingAddress.isContinuingAsGuest,\n            isUpdatingShippingAddress: state.shippingStrategies.isUpdatingAddress,\n            isUpdatingConsignment: state.consignments.isUpdating,\n            isDeletingConsignment: state.consignments.isDeleting,\n            isCreatingConsignments: state.consignments.isCreating,\n            isInitializingShipping: state.shippingStrategies.isInitializing,\n            isApplyingStoreCredit: state.storeCredit.isApplying,\n            isApplyingCoupon: state.coupons.isApplying,\n            isRemovingCoupon: state.coupons.isRemoving,\n            isApplyingGiftCertificate: state.giftCertificates.isApplying,\n            isRemovingGiftCertificate: state.giftCertificates.isRemoving,\n            isLoadingInstruments: state.instruments.isLoading,\n            isDeletingInstrument: state.instruments.isDeleting,\n            isLoadingConfig: state.config.isLoading,\n            isCustomerStepPending: isCustomerStepPending(state),\n            isPaymentStepPending: isPaymentStepPending(state),\n        };\n\n        return {\n            isPending: isPending(selector),\n            ...selector,\n        };\n    });\n}\n","import { toSingleLine } from '../utility';\n\nexport default class ErrorMessageTransformer<TError extends Error = Error> {\n    constructor(\n        private _messageCustomizer: (type: TError) => string\n    ) {}\n\n    transform(error: TError): TError {\n        error.message = toSingleLine(this._messageCustomizer(error));\n\n        return error;\n    }\n}\n","export default function toSingleLine(input?: string) {\n    if (!input) {\n        return '';\n    }\n\n    return input.split(/(?:\\r\\n|\\n|\\r)/)\n        .map(line => line.replace(/^\\s+/gm, ''))\n        .join(' ')\n        .trim();\n}\n","import { Action, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs';\n\nimport { AddressRequestBody } from '../address';\nimport { BillingAddressActionCreator, BillingAddressRequestBody } from '../billing';\nimport { createDataStoreProjection, DataStoreProjection } from '../common/data-store';\nimport { ErrorActionCreator, ErrorMessageTransformer } from '../common/error';\nimport { RequestOptions } from '../common/http-request';\nimport { bindDecorator as bind } from '../common/utility';\nimport { ConfigActionCreator } from '../config';\nimport { CouponActionCreator, GiftCertificateActionCreator } from '../coupon';\nimport { CustomerCredentials, CustomerInitializeOptions, CustomerRequestOptions, CustomerStrategyActionCreator, GuestCredentials } from '../customer';\nimport { CountryActionCreator } from '../geography';\nimport { OrderActionCreator, OrderRequestBody } from '../order';\nimport { SpamProtectionActionCreator, SpamProtectionOptions } from '../order/spam-protection';\nimport { PaymentInitializeOptions, PaymentMethodActionCreator, PaymentRequestOptions, PaymentStrategyActionCreator } from '../payment';\nimport { InstrumentActionCreator } from '../payment/instrument';\nimport { ConsignmentsRequestBody, ConsignmentActionCreator, ShippingCountryActionCreator, ShippingInitializeOptions, ShippingRequestOptions, ShippingStrategyActionCreator } from '../shipping';\nimport { ConsignmentAssignmentRequestBody, ConsignmentUpdateRequestBody } from '../shipping/consignment';\nimport StoreCreditActionCreator from '../store-credit/store-credit-action-creator';\n\nimport { CheckoutRequestBody } from './checkout';\nimport CheckoutActionCreator from './checkout-action-creator';\nimport CheckoutParams from './checkout-params';\nimport CheckoutSelectors from './checkout-selectors';\nimport CheckoutStore from './checkout-store';\nimport { createCheckoutSelectorsFactory, CheckoutSelectorsFactory } from './create-checkout-selectors';\nimport createCheckoutServiceErrorTransformer from './create-checkout-service-error-transformer';\n\n/**\n * Responsible for completing the checkout process for the current customer.\n *\n * This object can be used to collect all information that is required for\n * checkout, such as shipping and billing information. It can also be used to\n * retrieve the current checkout state and subscribe to its changes.\n */\n@bind\nexport default class CheckoutService {\n    private _storeProjection: DataStoreProjection<CheckoutSelectors>;\n    private _errorTransformer: ErrorMessageTransformer;\n    private _selectorsFactory: CheckoutSelectorsFactory;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _store: CheckoutStore,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _configActionCreator: ConfigActionCreator,\n        private _consignmentActionCreator: ConsignmentActionCreator,\n        private _countryActionCreator: CountryActionCreator,\n        private _couponActionCreator: CouponActionCreator,\n        private _customerStrategyActionCreator: CustomerStrategyActionCreator,\n        private _errorActionCreator: ErrorActionCreator,\n        private _giftCertificateActionCreator: GiftCertificateActionCreator,\n        private _instrumentActionCreator: InstrumentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _shippingCountryActionCreator: ShippingCountryActionCreator,\n        private _shippingStrategyActionCreator: ShippingStrategyActionCreator,\n        private _spamProtectionActionCreator: SpamProtectionActionCreator,\n        private _storeCreditActionCreator: StoreCreditActionCreator\n    ) {\n        this._errorTransformer = createCheckoutServiceErrorTransformer();\n        this._selectorsFactory = createCheckoutSelectorsFactory();\n        this._storeProjection = createDataStoreProjection(this._store, this._selectorsFactory);\n    }\n\n    /**\n     * Returns a snapshot of the current checkout state.\n     *\n     * The method returns a new instance every time there is a change in the\n     * checkout state. You can query the state by calling any of its getter\n     * methods.\n     *\n     * ```js\n     * const state = service.getState();\n     *\n     * console.log(state.data.getOrder());\n     * console.log(state.errors.getSubmitOrderError());\n     * console.log(state.statuses.isSubmittingOrder());\n     * ```\n     *\n     * @returns The current customer's checkout state\n     */\n    getState(): CheckoutSelectors {\n        return this._storeProjection.getState();\n    }\n\n    /**\n     * Notifies all subscribers with the current state.\n     *\n     * When this method gets called, the subscribers get called regardless if\n     * they have any filters applied.\n     */\n    notifyState(): void {\n        this._storeProjection.notifyState();\n    }\n\n    /**\n     * Subscribes to any changes to the current state.\n     *\n     * The method registers a callback function and executes it every time there\n     * is a change in the checkout state.\n     *\n     * ```js\n     * service.subscribe(state => {\n     *     console.log(state.data.getCart());\n     * });\n     * ```\n     *\n     * The method can be configured to notify subscribers only regarding\n     * relevant changes, by providing a filter function.\n     *\n     * ```js\n     * const filter = state => state.data.getCart();\n     *\n     * // Only trigger the subscriber when the cart changes.\n     * service.subscribe(state => {\n     *     console.log(state.data.getCart())\n     * }, filter);\n     * ```\n     *\n     * @param subscriber - The function to subscribe to state changes.\n     * @param filters - One or more functions to filter out irrelevant state\n     * changes. If more than one function is provided, the subscriber will only\n     * be triggered if all conditions are met.\n     * @returns A function, if called, will unsubscribe the subscriber.\n     */\n    subscribe(\n        subscriber: (state: CheckoutSelectors) => void,\n        ...filters: Array<(state: CheckoutSelectors) => any>\n    ): () => void {\n        return this._storeProjection.subscribe(subscriber, ...filters);\n    }\n\n    /**\n     * Loads the current checkout.\n     *\n     * This method can only be called if there is an active checkout. Also, it\n     * can only retrieve data that belongs to the current customer. When it is\n     * successfully executed, you can retrieve the data by calling\n     * `CheckoutStoreSelector#getCheckout`.\n     *\n     * ```js\n     * const state = await service.loadCheckout('0cfd6c06-57c3-4e29-8d7a-de55cc8a9052');\n     *\n     * console.log(state.data.getCheckout());\n     * ```\n     *\n     * @param id - The identifier of the checkout to load, or the default checkout if not provided.\n     * @param options - Options for loading the current checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    loadCheckout(id?: string, options?: RequestOptions<CheckoutParams>): Promise<CheckoutSelectors> {\n        return this._dispatch(id ?\n            this._checkoutActionCreator.loadCheckout(id, options) :\n            this._checkoutActionCreator.loadDefaultCheckout(options)\n        );\n    }\n\n    /**\n     * Updates specific properties of the current checkout.\n     *\n     * ```js\n     * const state = await service.updateCheckout(checkout);\n     *\n     * console.log(state.data.getCheckout());\n     * ```\n     *\n     * @param payload - The checkout properties to be updated.\n     * @param options - Options for loading the current checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    updateCheckout(payload: CheckoutRequestBody, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._checkoutActionCreator.updateCheckout(payload, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Loads an order by an id.\n     *\n     * The method can only retrieve an order if the order belongs to the current\n     * customer. If it is successfully executed, the data can be retrieved by\n     * calling `CheckoutStoreSelector#getOrder`.\n     *\n     * ```js\n     * const state = await service.loadOrder(123);\n     *\n     * console.log(state.data.getOrder());\n     * ```\n     *\n     * @param orderId - The identifier of the order to load.\n     * @param options - Options for loading the order.\n     * @returns A promise that resolves to the current state.\n     */\n    loadOrder(orderId: number, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const loadCheckoutAction = this._orderActionCreator.loadOrder(orderId, options);\n        const loadConfigAction = this._configActionCreator.loadConfig(options);\n\n        return Promise.all([\n            this._dispatch(loadCheckoutAction),\n            this._dispatch(loadConfigAction, { queueId: 'config' }),\n        ])\n            .then(() => this.getState());\n    }\n\n    /**\n     * Submits an order, thereby completing a checkout process.\n     *\n     * Before you can submit an order, you must initialize the payment method\n     * chosen by the customer by calling `CheckoutService#initializePayment`.\n     *\n     * ```js\n     * await service.initializePayment({ methodId: 'braintree' });\n     * await service.submitOrder({\n     *     payment: {\n     *         methodId: 'braintree',\n     *         paymentData: {\n     *             ccExpiry: { month: 10, year: 20 },\n     *             ccName: 'BigCommerce',\n     *             ccNumber: '4111111111111111',\n     *             ccCvv: 123,\n     *         },\n     *     },\n     * });\n     * ```\n     *\n     * You are not required to include `paymentData` if the order does not\n     * require additional payment details. For example, the customer has already\n     * entered their payment details on the cart page using one of the hosted\n     * payment methods, such as PayPal. Or the customer has applied a gift\n     * certificate that exceeds the grand total amount.\n     *\n     * If the order is submitted successfully, you can retrieve the newly\n     * created order by calling `CheckoutStoreSelector#getOrder`.\n     *\n     * ```js\n     * const state = await service.submitOrder(payload);\n     *\n     * console.log(state.data.getOrder());\n     * ```\n     *\n     * @param payload - The request payload to submit for the current order.\n     * @param options - Options for submitting the current order.\n     * @returns A promise that resolves to the current state.\n     */\n    submitOrder(payload: OrderRequestBody, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.execute(payload, options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * Finalizes the submission process for an order.\n     *\n     * This method is only required for certain hosted payment methods that\n     * require a customer to enter their credit card details on their website.\n     * You need to call this method once the customer has redirected back to\n     * checkout in order to complete the checkout process.\n     *\n     * If the method is called before order finalization is required or for a\n     * payment method that does not require order finalization, an error will be\n     * thrown. Conversely, if the method is called successfully, you should\n     * immediately redirect the customer to the order confirmation page.\n     *\n     * ```js\n     * try {\n     *     await service.finalizeOrderIfNeeded();\n     *\n     *     window.location.assign('/order-confirmation');\n     * } catch (error) {\n     *     if (error.type !== 'order_finalization_not_required') {\n     *         throw error;\n     *     }\n     * }\n     * ```\n     *\n     * @param options - Options for finalizing the current order.\n     * @returns A promise that resolves to the current state.\n     * @throws `OrderFinalizationNotRequiredError` error if order finalization\n     * is not required for the current order at the time of execution.\n     */\n    finalizeOrderIfNeeded(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.finalize(options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * Loads a list of payment methods available for checkout.\n     *\n     * If a customer enters their payment details before navigating to the\n     * checkout page (i.e.: using PayPal checkout button on the cart page), only\n     * one payment method will be available for the customer - the selected\n     * payment method. Otherwise, by default, all payment methods configured by\n     * the merchant will be available for the customer.\n     *\n     * Once the method is executed successfully, you can call\n     * `CheckoutStoreSelector#getPaymentMethods` to retrieve the list of payment\n     * methods.\n     *\n     * ```js\n     * const state = service.loadPaymentMethods();\n     *\n     * console.log(state.data.getPaymentMethods());\n     * ```\n     *\n     * @param options - Options for loading the payment methods that are\n     * available to the current customer.\n     * @returns A promise that resolves to the current state.\n     */\n    loadPaymentMethods(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentMethodActionCreator.loadPaymentMethods(options);\n\n        return this._dispatch(action, { queueId: 'paymentMethods' });\n    }\n\n    /**\n     * Loads a payment method by an id.\n     *\n     * This method does not work with multi-option payment providers. Due to its\n     * limitation, it is deprecated and will be removed in the future.\n     *\n     * @deprecated\n     * @internal\n     * @param methodId - The identifier for the payment method to load.\n     * @param options - Options for loading the payment method.\n     * @returns A promise that resolves to the current state.\n     */\n    loadPaymentMethod(methodId: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentMethodActionCreator.loadPaymentMethod(methodId, options);\n\n        return this._dispatch(action, { queueId: 'paymentMethods' });\n    }\n\n    /**\n     * Initializes the payment step of a checkout process.\n     *\n     * Before a payment method can accept payment details, it must first be\n     * initialized. Some payment methods require you to provide additional\n     * initialization options. For example, Amazon requires a container ID in\n     * order to initialize their payment widget.\n     *\n     * ```js\n     * await service.initializePayment({\n     *     methodId: 'amazon',\n     *     amazon: {\n     *         container: 'walletWidget',\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the payment step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    initializePayment(options: PaymentInitializeOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * De-initializes the payment step of a checkout process.\n     *\n     * The method should be called once you no longer require a payment method\n     * to be initialized. It can perform any necessary clean-up behind the\n     * scene, i.e.: remove DOM nodes or event handlers that are attached as a\n     * result of payment initialization.\n     *\n     * ```js\n     * await service.deinitializePayment({\n     *     methodId: 'amazon',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the payment step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializePayment(options: PaymentRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.deinitialize(options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * Loads a list of countries available for billing.\n     *\n     * Once you make a successful request, you will be able to retrieve the list\n     * of countries by calling `CheckoutStoreSelector#getBillingCountries`.\n     *\n     * ```js\n     * const state = await service.loadBillingCountries();\n     *\n     * console.log(state.data.getBillingCountries());\n     * ```\n     *\n     * @param options - Options for loading the available billing countries.\n     * @returns A promise that resolves to the current state.\n     */\n    loadBillingCountries(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._countryActionCreator.loadCountries(options);\n\n        return this._dispatch(action, { queueId: 'billingCountries' });\n    }\n\n    /**\n     * Loads a list of countries available for shipping.\n     *\n     * The list is determined based on the shipping zones configured by a\n     * merchant. Once you make a successful call, you will be able to retrieve\n     * the list of available shipping countries by calling\n     * `CheckoutStoreSelector#getShippingCountries`.\n     *\n     * ```js\n     * const state = await service.loadShippingCountries();\n     *\n     * console.log(state.data.getShippingCountries());\n     * ```\n     *\n     * @param options - Options for loading the available shipping countries.\n     * @returns A promise that resolves to the current state.\n     */\n    loadShippingCountries(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingCountryActionCreator.loadCountries(options);\n\n        return this._dispatch(action, { queueId: 'shippingCountries' });\n    }\n\n    /**\n     * Loads a set of form fields that should be presented to customers in order\n     * to capture their billing address.\n     *\n     * Once the method has been executed successfully, you can call\n     * `CheckoutStoreSelector#getBillingAddressFields` to retrieve the set of\n     * form fields.\n     *\n     * ```js\n     * const state = service.loadBillingAddressFields();\n     *\n     * console.log(state.data.getBillingAddressFields('US'));\n     * ```\n     *\n     * @param options - Options for loading the billing address form fields.\n     * @returns A promise that resolves to the current state.\n     */\n    loadBillingAddressFields(options?: RequestOptions): Promise<CheckoutSelectors> {\n        return this.loadBillingCountries(options);\n    }\n\n    /**\n     * Loads a set of form fields that should be presented to customers in order\n     * to capture their shipping address.\n     *\n     * Once the method has been executed successfully, you can call\n     * `CheckoutStoreSelector#getShippingAddressFields` to retrieve the set of\n     * form fields.\n     *\n     * ```js\n     * const state = service.loadShippingAddressFields();\n     *\n     * console.log(state.data.getShippingAddressFields('US'));\n     * ```\n     *\n     * @param options - Options for loading the shipping address form fields.\n     * @returns A promise that resolves to the current state.\n     */\n    loadShippingAddressFields(options?: RequestOptions): Promise<CheckoutSelectors> {\n        return this.loadShippingCountries(options);\n    }\n\n    /**\n     * Initializes the sign-in step of a checkout process.\n     *\n     * Some payment methods, such as Amazon, have their own sign-in flow. In\n     * order to support them, this method must be called.\n     *\n     * ```js\n     * await service.initializeCustomer({\n     *     methodId: 'amazon',\n     *     amazon: {\n     *         container: 'signInButton',\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the customer step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeCustomer(options?: CustomerInitializeOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * De-initializes the sign-in step of a checkout process.\n     *\n     * It should be called once you no longer want to prompt customers to sign\n     * in. It can perform any necessary clean-up behind the scene, i.e.: remove\n     * DOM nodes or event handlers that are attached as a result of customer\n     * initialization.\n     *\n     * ```js\n     * await service.deinitializeCustomer({\n     *     methodId: 'amazon',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the customer step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeCustomer(options?: CustomerRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.deinitialize(options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * Continues to check out as a guest.\n     *\n     * The customer is required to provide their email address in order to\n     * continue. Once they provide their email address, it will be stored as a\n     * part of their billing address.\n     *\n     * @param credentials - The guest credentials to use.\n     * @param options - Options for continuing as a guest.\n     * @returns A promise that resolves to the current state.\n     */\n    continueAsGuest(credentials: GuestCredentials, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._billingAddressActionCreator.continueAsGuest(credentials, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Signs into a customer's registered account.\n     *\n     * Once the customer is signed in successfully, the checkout state will be\n     * populated with information associated with the customer, such as their\n     * saved addresses. You can call `CheckoutStoreSelector#getCustomer` to\n     * retrieve the data.\n     *\n     * ```js\n     * const state = await service.signInCustomer({\n     *     email: 'foo@bar.com',\n     *     password: 'password123',\n     * });\n     *\n     * console.log(state.data.getCustomer());\n     * ```\n     *\n     * @param credentials - The credentials to be used for signing in the customer.\n     * @param options - Options for signing in the customer.\n     * @returns A promise that resolves to the current state.\n     */\n    signInCustomer(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.signIn(credentials, options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * Signs out the current customer if they are previously signed in.\n     *\n     * Once the customer is successfully signed out, the checkout state will be\n     * reset automatically.\n     *\n     * ```js\n     * const state = await service.signOutCustomer();\n     *\n     * // The returned object should not contain information about the previously signed-in customer.\n     * console.log(state.data.getCustomer());\n     * ```\n     *\n     * @param options - Options for signing out the customer.\n     * @returns A promise that resolves to the current state.\n     */\n    signOutCustomer(options?: CustomerRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.signOut(options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * Loads a list of shipping options available for checkout.\n     *\n     * Available shipping options can only be determined once a customer\n     * provides their shipping address. If the method is executed successfully,\n     * `CheckoutStoreSelector#getShippingOptions` can be called to retrieve the\n     * list of shipping options.\n     *\n     * ```js\n     * const state = await service.loadShippingOptions();\n     *\n     * console.log(state.data.getShippingOptions());\n     * ```\n     *\n     * @param options - Options for loading the available shipping options.\n     * @returns A promise that resolves to the current state.\n     */\n    loadShippingOptions(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.loadShippingOptions(options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Initializes the shipping step of a checkout process.\n     *\n     * Some payment methods, such as Amazon, can provide shipping information to\n     * be used for checkout. In order to support them, this method must be\n     * called.\n     *\n     * ```js\n     * await service.initializeShipping({\n     *     methodId: 'amazon',\n     *     amazon: {\n     *         container: 'addressBook',\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the shipping step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeShipping(options?: ShippingInitializeOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * De-initializes the shipping step of a checkout process.\n     *\n     * It should be called once you no longer need to collect shipping details.\n     * It can perform any necessary clean-up behind the scene, i.e.: remove DOM\n     * nodes or event handlers that are attached as a result of shipping\n     * initialization.\n     *\n     * ```js\n     * await service.deinitializeShipping({\n     *     methodId: 'amazon',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the shipping step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeShipping(options?: ShippingRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.deinitialize(options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Selects a shipping option for the current address.\n     *\n     * If a shipping option has an additional cost, the quote for the current\n     * order will be adjusted once the option is selected.\n     *\n     * ```js\n     * const state = await service.selectShippingOption('address-id', 'shipping-option-id');\n     *\n     * console.log(state.data.getSelectedShippingOption());\n     * ```\n     *\n     * @param shippingOptionId - The identifier of the shipping option to\n     * select.\n     * @param options - Options for selecting the shipping option.\n     * @returns A promise that resolves to the current state.\n     */\n    selectShippingOption(shippingOptionId: string, options?: ShippingRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.selectOption(shippingOptionId, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Updates the shipping address for the current checkout.\n     *\n     * When a customer updates their shipping address for an order, they will\n     * see an updated list of shipping options and the cost for each option,\n     * unless no options are available. If the update is successful, you can\n     * call `CheckoutStoreSelector#getShippingAddress` to retrieve the address.\n     *\n     * If the shipping address changes and the selected shipping option becomes\n     * unavailable for the updated address, the shipping option will be\n     * deselected.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.updateShippingAddress(address);\n     *\n     * console.log(state.data.getShippingAddress());\n     * ```\n     *\n     * @param address - The address to be used for shipping.\n     * @param options - Options for updating the shipping address.\n     * @returns A promise that resolves to the current state.\n     */\n    updateShippingAddress(address: Partial<AddressRequestBody>, options?: ShippingRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.updateAddress(address, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Creates consignments given a list.\n     *\n     * Note: this is used when items need to be shipped to multiple addresses,\n     * for single shipping address, use `CheckoutService#updateShippingAddress`.\n     *\n     * When consignments are created, an updated list of shipping options will\n     * become available for each consignment, unless no options are available.\n     * If the update is successful, you can call\n     * `CheckoutStoreSelector#getConsignments` to retrieve the updated list of\n     * consignments.'\n     *\n     * Beware that if a consignment includes all line items from another\n     * consignment, that consignment will be deleted as a valid consignment must\n     * include at least one valid line item.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.createConsignments(consignments);\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignments - The list of consignments to be created.\n     * @param options - Options for updating the shipping address.\n     * @returns A promise that resolves to the current state.\n     */\n    createConsignments(\n        consignments: ConsignmentsRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.createConsignments(consignments, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Deletes a consignment\n     *\n     * ```js\n     * const state = await service.deleteConsignment('55c96cda6f04c');\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignmentId - The ID of the consignment to be deleted\n     * @param options - Options for the consignment delete request\n     * @returns A promise that resolves to the current state.\n     */\n    deleteConsignment(\n        consignmentId: string,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.deleteConsignment(consignmentId, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Updates a specific consignment.\n     *\n     * Note: this is used when items need to be shipped to multiple addresses,\n     * for single shipping address, use `CheckoutService#selectShippingOption`.\n     *\n     * When a shipping address for a consignment is updated, an updated list of\n     * shipping options will become available for the consignment, unless no\n     * options are available. If the update is successful, you can call\n     * `CheckoutStoreSelector#getConsignments` to retrieve updated list of\n     * consignments.\n     *\n     * Beware that if the updated consignment includes all line items from another\n     * consignment, that consignment will be deleted as a valid consignment must\n     * include at least one valid line item.\n     *\n     * If the shipping address changes and the selected shipping option becomes\n     * unavailable for the updated address, the shipping option will be\n     * deselected.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.updateConsignment(consignment);\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignment - The consignment data that will be used.\n     * @param options - Options for updating the shipping address.\n     * @returns A promise that resolves to the current state.\n     */\n    updateConsignment(\n        consignment: ConsignmentUpdateRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.updateConsignment(consignment, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Convenience method that assigns items to be shipped to a specific address.\n     *\n     * Note: this method finds an existing consignment that matches the provided address\n     * and assigns the provided items. If no consignment matches the address, a new one\n     * will be created.\n     *\n     * @param consignment - The consignment data that will be used.\n     * @param options - Options for the request\n     * @returns A promise that resolves to the current state.\n     */\n    assignItemsToAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.assignItemsByAddress(consignment, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Convenience method that unassigns items from a specific shipping address.\n     *\n     * Note: this method finds an existing consignment that matches the provided address\n     * and unassigns the specified items. If the consignment ends up with no line items\n     * after the unassignment, it will be deleted.\n     *\n     * @param consignment - The consignment data that will be used.\n     * @param options - Options for the request\n     * @returns A promise that resolves to the current state.\n     */\n    unassignItemsToAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.unassignItemsByAddress(consignment, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Selects a shipping option for a given consignment.\n     *\n     * Note: this is used when items need to be shipped to multiple addresses,\n     * for single shipping address, use `CheckoutService#updateShippingAddres`.\n     *\n     * If a shipping option has an additional cost, the quote for the current\n     * order will be adjusted once the option is selected.\n     *\n     * ```js\n     * const state = await service.selectConsignmentShippingOption(consignmentId, optionId);\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignmentId - The identified of the consignment to be updated.\n     * @param shippingOptionId - The identifier of the shipping option to\n     * select.\n     * @param options - Options for selecting the shipping option.\n     * @returns A promise that resolves to the current state.\n     */\n    selectConsignmentShippingOption(\n        consignmentId: string,\n        shippingOptionId: string,\n        options?: ShippingRequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.updateShippingOption({\n            id: consignmentId,\n            shippingOptionId,\n        }, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Updates the billing address for the current checkout.\n     *\n     * A customer must provide their billing address before they can proceed to\n     * pay for their order.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.updateBillingAddress(address);\n     *\n     * console.log(state.data.getBillingAddress());\n     * ```\n     *\n     * @param address - The address to be used for billing.\n     * @param options - Options for updating the billing address.\n     * @returns A promise that resolves to the current state.\n     */\n    updateBillingAddress(address: Partial<BillingAddressRequestBody>, options: RequestOptions = {}): Promise<CheckoutSelectors> {\n        const action = this._billingAddressActionCreator.updateAddress(address, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Applies or removes customer's store credit code to the current checkout.\n     *\n     * Once the store credit gets applied, the outstanding balance will be adjusted accordingly.\n     *\n     * ```js\n     * const state = await service.applyStoreCredit(true);\n     *\n     * console.log(state.data.getCheckout().outstandingBalance);\n     * ```\n     *\n     * @param options - Options for applying store credit.\n     * @returns A promise that resolves to the current state.\n     */\n    applyStoreCredit(useStoreCredit: boolean, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._storeCreditActionCreator.applyStoreCredit(useStoreCredit, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Applies a coupon code to the current checkout.\n     *\n     * Once the coupon code gets applied, the quote for the current checkout will\n     * be adjusted accordingly. The same coupon code cannot be applied more than\n     * once.\n     *\n     * ```js\n     * await service.applyCoupon('COUPON');\n     * ```\n     *\n     * @param code - The coupon code to apply to the current checkout.\n     * @param options - Options for applying the coupon code.\n     * @returns A promise that resolves to the current state.\n     */\n    applyCoupon(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._couponActionCreator.applyCoupon(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Removes a coupon code from the current checkout.\n     *\n     * Once the coupon code gets removed, the quote for the current checkout will\n     * be adjusted accordingly.\n     *\n     * ```js\n     * await service.removeCoupon('COUPON');\n     * ```\n     *\n     * @param code - The coupon code to remove from the current checkout.\n     * @param options - Options for removing the coupon code.\n     * @returns A promise that resolves to the current state.\n     */\n    removeCoupon(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._couponActionCreator.removeCoupon(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Applies a gift certificate to the current checkout.\n     *\n     * Once the gift certificate gets applied, the quote for the current\n     * checkout will be adjusted accordingly.\n     *\n     * ```js\n     * await service.applyGiftCertificate('GIFT_CERTIFICATE');\n     * ```\n     *\n     * @param code - The gift certificate to apply to the current checkout.\n     * @param options - Options for applying the gift certificate.\n     * @returns A promise that resolves to the current state.\n     */\n    applyGiftCertificate(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._giftCertificateActionCreator.applyGiftCertificate(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Removes a gift certificate from an order.\n     *\n     * Once the gift certificate gets removed, the quote for the current\n     * checkout will be adjusted accordingly.\n     *\n     * ```js\n     * await service.removeGiftCertificate('GIFT_CERTIFICATE');\n     * ```\n     *\n     * @param code - The gift certificate to remove from the current checkout.\n     * @param options - Options for removing the gift certificate.\n     * @returns A promise that resolves to the current state.\n     */\n    removeGiftCertificate(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._giftCertificateActionCreator.removeGiftCertificate(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Loads a list of payment instruments associated with a customer.\n     *\n     * Once the method has been called successfully, you can retrieve the list\n     * of payment instruments by calling `CheckoutStoreSelector#getInstruments`.\n     * If the customer does not have any payment instruments on record, i.e.:\n     * credit card, you will get an empty list instead.\n     *\n     * ```js\n     * const state = service.loadInstruments();\n     *\n     * console.log(state.data.getInstruments());\n     * ```\n     *\n     * @returns A promise that resolves to the current state.\n     */\n    loadInstruments(): Promise<CheckoutSelectors> {\n        const action = this._instrumentActionCreator.loadInstruments();\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Deletes a payment instrument by an id.\n     *\n     * Once an instrument gets removed, it can no longer be retrieved using\n     * `CheckoutStoreSelector#getInstruments`.\n     *\n     * ```js\n     * const state = service.deleteInstrument('123');\n     *\n     * console.log(state.data.getInstruments());\n     * ```\n     *\n     * @param instrumentId - The identifier of the payment instrument to delete.\n     * @returns A promise that resolves to the current state.\n     */\n    deleteInstrument(instrumentId: string): Promise<CheckoutSelectors> {\n        const action = this._instrumentActionCreator.deleteInstrument(instrumentId);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Clear errors that have been collected from previous calls.\n     *\n     * ```js\n     * const state = await service.clearError(error);\n     *\n     * console.log(state.errors.getError());\n     * ```\n     *\n     * @param error - Specific error object to clear\n     * @returns A promise that resolves to the current state.\n     */\n    clearError(error: Error): Promise<CheckoutSelectors> {\n        const action = this._errorActionCreator.clearError(error);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Initializes the spam protection for order creation.\n     *\n     * With spam protection enabled, the customer has to be verified as\n     * a human. The order creation will fail if spam protection\n     * is enabled but verification fails.\n     *\n     * ```js\n     * await service.initializeSpamProtection({\n     *     containerId: 'spamProtectionContainer',\n     * });\n     * ```\n     *\n     * @param options - Options for initializing spam protection.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeSpamProtection(options: SpamProtectionOptions): Promise<CheckoutSelectors> {\n        const action = this._spamProtectionActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'spamProtection' });\n    }\n\n    /**\n     * Dispatches an action through the data store and returns the current state\n     * once the action is dispatched.\n     *\n     * @param action - The action to dispatch.\n     * @returns A promise that resolves to the current state.\n     */\n    private _dispatch(action: Action | Observable<Action> | ThunkAction<Action>, options?: { queueId?: string }): Promise<CheckoutSelectors> {\n        return this._store.dispatch(action, options)\n            .then(() => this.getState())\n            .catch(error => {\n                throw this._errorTransformer.transform(error);\n            });\n    }\n}\n","import { ErrorMessageTransformer } from '../common/error';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../common/error/errors';\nimport { getEnvironment } from '../common/utility';\n\nexport type CheckoutServiceErrorType = MissingDataError | NotInitializedError;\nexport type CheckoutServiceErrorTransformer = ErrorMessageTransformer<CheckoutServiceErrorType | Error>;\n\nexport default function createCheckoutServiceErrorTransformer(\n    isDevelopment: boolean = getEnvironment() === 'development'\n): CheckoutServiceErrorTransformer {\n    return new ErrorMessageTransformer(error => {\n        if (!isDevelopment || !isCheckoutServiceError(error)) {\n            return error.message;\n        }\n\n        switch (error.subtype || error.type) {\n        case MissingDataErrorType.MissingConsignments:\n            return `\n                ${error.message}\n                The data could be unavailable because no shipping address has been provided.\n                To fix this, create a consignment or update the shipping address before performing\n                the same action again.\n            `;\n\n        case MissingDataErrorType.MissingCart:\n        case MissingDataErrorType.MissingCheckout:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server yet.\n                To fix this issue, you can try calling \\`CheckoutService#loadCheckout\\`\n                before performing the same action again.\n            `;\n\n        case MissingDataErrorType.MissingCheckoutConfig:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server yet.\n                To fix this issue, you need to make sure \\`CheckoutService\\` is initialized\n                properly by calling \\`CheckoutService#loadCheckout\\` before performing any\n                other actions.\n            `;\n\n        case MissingDataErrorType.MissingOrder:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server yet.\n                To fix this issue, you can try calling \\`CheckoutService#loadOrder\\`\n                before performing the same action again.\n            `;\n\n        case MissingDataErrorType.MissingOrderId:\n            return `\n                ${error.message}\n                The data could be unavailable because no order has been created yet. You have\n                to first create the order before you can perform the action.\n            `;\n\n        case MissingDataErrorType.MissingPaymentMethod:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server, or\n                configured by the merchant yet. To fix the former issue, you can try calling\n                \\`CheckoutService#loadPaymentMethods\\` before performing the same action again.\n            `;\n\n        case NotInitializedErrorType.CustomerNotInitialized:\n            return `\n                In order to initialize the customer step of checkout, you need to call\n                \\`CheckoutService#initializeCustomer\\`. Afterwards, you should be able to\n                submit customer details.\n            `;\n\n        case NotInitializedErrorType.PaymentNotInitialized:\n            return `\n                ${error.message}\n                In order to initialize the payment step of checkout, you need to call\n                \\`CheckoutService#initializePayment\\`. Afterwards, you should be able to\n                submit payment details.\n            `;\n\n        case NotInitializedErrorType.ShippingNotInitialized:\n            return `\n                ${error.message}\n                In order to initialize the shipping step of checkout, you need to call\n                \\`CheckoutService#initializeShipping\\`. Afterwards, you should be able to\n                submit shipping details.\n            `;\n\n        default:\n            return error.message;\n        }\n    });\n}\n\nfunction isCheckoutServiceError(error: any): error is CheckoutServiceErrorType {\n    return !!(error.subtype || error.type);\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\nimport { createScriptLoader } from '@bigcommerce/script-loader';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../billing';\nimport { ErrorActionCreator } from '../common/error';\nimport { getDefaultLogger } from '../common/log';\nimport { getEnvironment } from '../common/utility';\nimport { ConfigActionCreator, ConfigRequestSender, ConfigState } from '../config';\nimport { CouponActionCreator, CouponRequestSender, GiftCertificateActionCreator, GiftCertificateRequestSender } from '../coupon';\nimport { createCustomerStrategyRegistry, CustomerStrategyActionCreator } from '../customer';\nimport { CountryActionCreator, CountryRequestSender } from '../geography';\nimport { OrderActionCreator, OrderRequestSender } from '../order';\nimport { createSpamProtection, SpamProtectionActionCreator } from '../order/spam-protection';\nimport { createPaymentClient, createPaymentStrategyRegistry, PaymentMethodActionCreator, PaymentMethodRequestSender, PaymentStrategyActionCreator } from '../payment';\nimport { InstrumentActionCreator, InstrumentRequestSender } from '../payment/instrument';\nimport { createShippingStrategyRegistry, ConsignmentActionCreator, ConsignmentRequestSender, ShippingCountryActionCreator, ShippingCountryRequestSender, ShippingStrategyActionCreator } from '../shipping';\nimport { StoreCreditActionCreator, StoreCreditRequestSender } from '../store-credit';\n\nimport CheckoutActionCreator from './checkout-action-creator';\nimport CheckoutRequestSender from './checkout-request-sender';\nimport CheckoutService from './checkout-service';\nimport CheckoutValidator from './checkout-validator';\nimport createCheckoutStore from './create-checkout-store';\n\n/**\n * Creates an instance of `CheckoutService`.\n *\n * @remarks\n * ```js\n * const service = createCheckoutService();\n *\n * service.subscribe(state => {\n *     console.log(state);\n * });\n *\n * service.loadCheckout();\n * ```\n *\n * @param options - A set of construction options.\n * @returns an instance of `CheckoutService`.\n */\nexport default function createCheckoutService(options?: CheckoutServiceOptions): CheckoutService {\n    if (document.location.protocol !== 'https:') {\n        getDefaultLogger().warn('The BigCommerce Checkout SDK should not be used on a non-HTTPS page');\n    }\n\n    if (getEnvironment() !== 'production') {\n        getDefaultLogger().warn('Note that the development build is not optimized. To create a production build, set process.env.NODE_ENV to `production`.');\n    }\n\n    const config: ConfigState = {\n        meta: {\n            externalSource: options && options.externalSource,\n        },\n        errors: {},\n        statuses: {},\n    };\n    const { locale = '', shouldWarnMutation = true } = options || {};\n    const requestSender = createRequestSender({ host: options && options.host });\n    const store = createCheckoutStore({ config }, { shouldWarnMutation });\n    const paymentClient = createPaymentClient(store);\n    const orderRequestSender = new OrderRequestSender(requestSender);\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const configActionCreator = new ConfigActionCreator(new ConfigRequestSender(requestSender));\n    const spamProtection = createSpamProtection(createScriptLoader());\n    const spamProtectionActionCreator = new SpamProtectionActionCreator(spamProtection);\n    const orderActionCreator = new OrderActionCreator(\n        orderRequestSender,\n        new CheckoutValidator(checkoutRequestSender),\n        spamProtectionActionCreator\n    );\n\n    return new CheckoutService(\n        store,\n        new BillingAddressActionCreator(new BillingAddressRequestSender(requestSender)),\n        new CheckoutActionCreator(checkoutRequestSender, configActionCreator),\n        configActionCreator,\n        new ConsignmentActionCreator(new ConsignmentRequestSender(requestSender), checkoutRequestSender),\n        new CountryActionCreator(new CountryRequestSender(requestSender, { locale })),\n        new CouponActionCreator(new CouponRequestSender(requestSender)),\n        new CustomerStrategyActionCreator(createCustomerStrategyRegistry(store, requestSender)),\n        new ErrorActionCreator(),\n        new GiftCertificateActionCreator(new GiftCertificateRequestSender(requestSender)),\n        new InstrumentActionCreator(new InstrumentRequestSender(paymentClient, requestSender)),\n        orderActionCreator,\n        new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender)),\n        new PaymentStrategyActionCreator(\n            createPaymentStrategyRegistry(store, paymentClient, requestSender, spamProtection, locale),\n            orderActionCreator\n        ),\n        new ShippingCountryActionCreator(new ShippingCountryRequestSender(requestSender, { locale })),\n        new ShippingStrategyActionCreator(createShippingStrategyRegistry(store, requestSender)),\n        spamProtectionActionCreator,\n        new StoreCreditActionCreator(new StoreCreditRequestSender(requestSender))\n    );\n}\n\nexport interface CheckoutServiceOptions {\n    locale?: string;\n    host?: string;\n    shouldWarnMutation?: boolean;\n    externalSource?: string;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { MutationObserverFactory } from '../../common/dom/mutation-observer';\n\nimport GoogleRecaptcha from './google-recaptcha';\nimport GoogleRecaptchaScriptLoader from './google-recaptcha-script-loader';\n\nexport default function createSpamProtection(scriptLoader: ScriptLoader) {\n    return new GoogleRecaptcha(\n        new GoogleRecaptchaScriptLoader(scriptLoader),\n        new MutationObserverFactory()\n    );\n}\n","// tslint:disable-next-line:no-reference\n/// <reference path=\"../payment/bigpay-client.d.ts\" />\nimport { createClient as createBigpayClient } from '@bigcommerce/bigpay-client';\n\nimport { CheckoutStore } from '../checkout';\n\nexport default function createPaymentClient(store: CheckoutStore) {\n    const paymentClient = createBigpayClient();\n\n    store.subscribe(\n        state => {\n            const config = state.config.getStoreConfig();\n\n            if (config) {\n                paymentClient.setHost(config.paymentSettings.bigpayBaseUrl);\n            }\n        },\n        state => state.config.getStoreConfig()\n    );\n\n    return paymentClient;\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { CheckoutActionCreator, CheckoutRequestSender, CheckoutStore } from '../checkout';\nimport { Registry } from '../common/registry';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { PaymentMethodActionCreator, PaymentMethodRequestSender } from '../payment';\nimport { AmazonPayScriptLoader } from '../payment/strategies/amazon-pay';\nimport {\n    createBraintreeVisaCheckoutPaymentProcessor,\n    BraintreeScriptLoader,\n    BraintreeSDKCreator,\n    VisaCheckoutScriptLoader\n} from '../payment/strategies/braintree';\nimport { ChasePayScriptLoader } from '../payment/strategies/chasepay';\nimport { createGooglePayPaymentProcessor, GooglePayBraintreeInitializer, GooglePayStripeInitializer } from '../payment/strategies/googlepay';\nimport { MasterpassScriptLoader } from '../payment/strategies/masterpass';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../remote-checkout';\n\nimport CustomerActionCreator from './customer-action-creator';\nimport CustomerRequestSender from './customer-request-sender';\nimport CustomerStrategyActionCreator from './customer-strategy-action-creator';\nimport { CustomerStrategy } from './strategies';\nimport { AmazonPayCustomerStrategy } from './strategies/amazon';\nimport { BraintreeVisaCheckoutCustomerStrategy } from './strategies/braintree';\nimport { ChasePayCustomerStrategy } from './strategies/chasepay';\nimport { DefaultCustomerStrategy } from './strategies/default';\nimport { GooglePayCustomerStrategy } from './strategies/googlepay';\nimport { MasterpassCustomerStrategy } from './strategies/masterpass';\nimport { SquareCustomerStrategy } from './strategies/square';\n\nexport default function createCustomerStrategyRegistry(\n    store: CheckoutStore,\n    requestSender: RequestSender\n): Registry<CustomerStrategy> {\n    const registry = new Registry<CustomerStrategy>();\n    const scriptLoader = getScriptLoader();\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const checkoutActionCreator = new CheckoutActionCreator(\n        checkoutRequestSender,\n        new ConfigActionCreator(new ConfigRequestSender(requestSender))\n    );\n    const formPoster = createFormPoster();\n    const paymentMethodActionCreator = new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender));\n    const remoteCheckoutRequestSender = new RemoteCheckoutRequestSender(requestSender);\n    const remoteCheckoutActionCreator = new RemoteCheckoutActionCreator(remoteCheckoutRequestSender);\n\n    registry.register('amazon', () =>\n        new AmazonPayCustomerStrategy(\n            store,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            remoteCheckoutRequestSender,\n            new AmazonPayScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('braintreevisacheckout', () =>\n        new BraintreeVisaCheckoutCustomerStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            new CustomerStrategyActionCreator(registry),\n            remoteCheckoutActionCreator,\n            createBraintreeVisaCheckoutPaymentProcessor(scriptLoader, requestSender),\n            new VisaCheckoutScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('chasepay', () =>\n        new ChasePayCustomerStrategy(\n            store,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new ChasePayScriptLoader(scriptLoader),\n            requestSender,\n            formPoster\n        )\n    );\n\n    registry.register('squarev2', () =>\n        new SquareCustomerStrategy(\n            store,\n            new RemoteCheckoutActionCreator(remoteCheckoutRequestSender)\n        )\n    );\n\n    registry.register('masterpass', () =>\n        new MasterpassCustomerStrategy(\n            store,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new MasterpassScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('googlepaybraintree', () =>\n        new GooglePayCustomerStrategy(\n            store,\n            remoteCheckoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayBraintreeInitializer(\n                    new BraintreeSDKCreator(\n                        new BraintreeScriptLoader(scriptLoader)\n                    )\n                )\n            ),\n            formPoster\n        )\n    );\n\n    registry.register('googlepaystripe', () =>\n        new GooglePayCustomerStrategy(\n            store,\n            remoteCheckoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayStripeInitializer()\n            ),\n            formPoster\n    )\n);\n\n    registry.register('default', () =>\n        new DefaultCustomerStrategy(\n            store,\n            new CustomerActionCreator(\n                new CustomerRequestSender(requestSender),\n                checkoutActionCreator\n            )\n        )\n    );\n\n    return registry;\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { CheckoutRequestSender, CheckoutStore } from '../checkout';\nimport { Registry } from '../common/registry';\nimport { PaymentMethodActionCreator, PaymentMethodRequestSender } from '../payment';\nimport { AmazonPayScriptLoader } from '../payment/strategies/amazon-pay';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../remote-checkout';\n\nimport ConsignmentActionCreator from './consignment-action-creator';\nimport ConsignmentRequestSender from './consignment-request-sender';\nimport { ShippingStrategy } from './strategies';\nimport { AmazonPayShippingStrategy } from './strategies/amazon';\nimport { DefaultShippingStrategy } from './strategies/default';\n\nexport default function createShippingStrategyRegistry(\n    store: CheckoutStore,\n    requestSender: RequestSender\n): Registry<ShippingStrategy> {\n    const registry = new Registry<ShippingStrategy>();\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const consignmentRequestSender = new ConsignmentRequestSender(requestSender);\n    const consignmentActionCreator = new ConsignmentActionCreator(consignmentRequestSender, checkoutRequestSender);\n\n    registry.register('amazon', () =>\n        new AmazonPayShippingStrategy(\n            store,\n            consignmentActionCreator,\n            new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender)),\n            new RemoteCheckoutActionCreator(new RemoteCheckoutRequestSender(requestSender)),\n            new AmazonPayScriptLoader(getScriptLoader())\n        )\n    );\n\n    registry.register('default', () =>\n        new DefaultShippingStrategy(\n            store,\n            consignmentActionCreator\n        )\n    );\n\n    return registry;\n}\n","import { EmbeddedCheckoutFrameLoadedEvent } from '../embedded-checkout-events';\n\nexport default function handleFrameLoadedEvent(message: EmbeddedCheckoutFrameLoadedEvent): void {\n    if (!message.payload || !message.payload.contentId) {\n        return;\n    }\n\n    const body = document.getElementById(message.payload.contentId);\n\n    if (!body || body.hasAttribute('data-iframe-height')) {\n        return;\n    }\n\n    body.setAttribute('data-iframe-height', '');\n}\n","export default interface CustomError extends Error {\n    message: string;\n    type: string;\n    subtype?: string;\n}\n\nexport function isCustomError(error: any): error is CustomError {\n    return (\n        typeof error.message === 'string' &&\n        typeof error.type === 'string' &&\n        (typeof error.subtype === 'string' || !error.subtype) &&\n        error instanceof Error\n    );\n}\n","import { isCustomError, CustomError } from '../../common/error/errors';\nimport { bindDecorator as bind } from '../../common/utility';\nimport EmbeddedCheckoutError from '../embedded-checkout-error';\nimport {\n    EmbeddedCheckoutCompleteEvent,\n    EmbeddedCheckoutErrorEvent,\n    EmbeddedCheckoutEvent,\n    EmbeddedCheckoutEventMap,\n    EmbeddedCheckoutEventType,\n    EmbeddedCheckoutFrameErrorEvent,\n    EmbeddedCheckoutFrameLoadedEvent,\n    EmbeddedCheckoutLoadedEvent,\n    EmbeddedCheckoutSignedOutEvent,\n} from '../embedded-checkout-events';\nimport EmbeddedCheckoutStyles from '../embedded-checkout-styles';\nimport IframeEventListener from '../iframe-event-listener';\nimport IframeEventPoster from '../iframe-event-poster';\n\nimport EmbeddedCheckoutMessenger from './embedded-checkout-messenger';\nimport { EmbeddedContentEventMap, EmbeddedContentEventType } from './embedded-content-events';\nimport EmbeddedContentOptions from './embedded-content-options';\n\n@bind\nexport default class IframeEmbeddedCheckoutMessenger implements EmbeddedCheckoutMessenger {\n    /**\n     * @internal\n     */\n    constructor(\n        private _messageListener: IframeEventListener<EmbeddedContentEventMap>,\n        private _messagePoster: IframeEventPoster<EmbeddedCheckoutEvent>,\n        private _untargetedMessagePoster: IframeEventPoster<EmbeddedCheckoutEvent>,\n        private _messageHandlers: EventCallbacks<EmbeddedCheckoutEventMap> = {}\n    ) {\n        this._messageListener.listen();\n    }\n\n    postComplete(): void {\n        const message: EmbeddedCheckoutCompleteEvent = {\n            type: EmbeddedCheckoutEventType.CheckoutComplete,\n        };\n\n        this._postMessage(message);\n    }\n\n    postError(payload: Error | CustomError): void {\n        const message: EmbeddedCheckoutErrorEvent = {\n            type: EmbeddedCheckoutEventType.CheckoutError,\n            payload: this._transformError(payload),\n        };\n\n        this._postMessage(message);\n    }\n\n    postFrameError(payload: Error | CustomError): void {\n        const message: EmbeddedCheckoutFrameErrorEvent = {\n            type: EmbeddedCheckoutEventType.FrameError,\n            payload: this._transformError(payload),\n        };\n\n        // Ideally, all messages should be targeted at a specific origin.\n        // However, for `FrameError` message, we have to post it in an\n        // untargeted fashion. This is because the error could be caused by a\n        // missing cart. That makes it not possible to determine of site origin\n        // of the parent window. Nevertheless, we still want to notify the\n        // parent window about the error.\n        this._postMessage(message, { untargeted: true });\n    }\n\n    postFrameLoaded(payload?: EmbeddedContentOptions): void {\n        const message: EmbeddedCheckoutFrameLoadedEvent = {\n            type: EmbeddedCheckoutEventType.FrameLoaded,\n            payload,\n        };\n\n        this._postMessage(message);\n    }\n\n    postLoaded(): void {\n        const message: EmbeddedCheckoutLoadedEvent = {\n            type: EmbeddedCheckoutEventType.CheckoutLoaded,\n        };\n\n        this._postMessage(message);\n    }\n\n    postSignedOut(): void {\n        const message: EmbeddedCheckoutSignedOutEvent = {\n            type: EmbeddedCheckoutEventType.SignedOut,\n        };\n\n        this._postMessage(message);\n    }\n\n    receiveStyles(handler: (styles: EmbeddedCheckoutStyles) => void): void {\n        this._messageListener.addListener(EmbeddedContentEventType.StyleConfigured, ({ payload }) => {\n            handler(payload);\n        });\n    }\n\n    private _postMessage(message: EmbeddedCheckoutEvent, options?: { untargeted?: boolean }): void {\n        this._notifyMessageHandlers(message);\n\n        if (options && options.untargeted) {\n            return this._untargetedMessagePoster.post(message);\n        }\n\n        this._messagePoster.post(message);\n    }\n\n    private _notifyMessageHandlers(message: EmbeddedCheckoutEvent): void {\n        Object.keys(this._messageHandlers)\n            .forEach(key => {\n                const handler = this._messageHandlers[key as keyof EmbeddedCheckoutEventMap];\n\n                if (handler) {\n                    (handler as (event: EmbeddedCheckoutEvent) => void).call(null, message);\n                }\n            });\n    }\n\n    private _transformError(error: Error | CustomError): EmbeddedCheckoutError {\n        return {\n            message: error.message,\n            type: isCustomError(error) ? error.type : undefined,\n            subtype: isCustomError(error) ? error.subtype : undefined,\n        };\n    }\n}\n\nexport type EventCallbacks<TEventMap> = {\n    [key in keyof TEventMap]?: (event: TEventMap[key]) => void;\n};\n","import { bindDecorator as bind } from '../../common/utility';\n\nimport EmbeddedCheckoutMessenger from './embedded-checkout-messenger';\n\n@bind\nexport default class NoopEmbeddedCheckoutMessenger implements EmbeddedCheckoutMessenger {\n    postComplete(): void {}\n\n    postError(): void {}\n\n    postFrameError(): void {}\n\n    postFrameLoaded(): void {}\n\n    postLoaded(): void {}\n\n    postSignedOut(): void {}\n\n    receiveStyles(): void {}\n}\n","import { setupContentWindowForIframeResizer } from '../../common/iframe';\nimport { EmbeddedCheckoutEvent, EmbeddedCheckoutEventType } from '../embedded-checkout-events';\nimport IframeEventListener from '../iframe-event-listener';\nimport IframeEventPoster from '../iframe-event-poster';\n\nimport EmbeddedCheckoutMessenger from './embedded-checkout-messenger';\nimport EmbeddedCheckoutMessengerOptions from './embedded-checkout-messenger-options';\nimport { EmbeddedContentEventMap } from './embedded-content-events';\nimport handleFrameLoadedEvent from './handle-frame-loaded-event';\nimport IframeEmbeddedCheckoutMessenger from './iframe-embedded-checkout-messenger';\nimport NoopEmbeddedCheckoutMessenger from './noop-embedded-checkout-messenger';\n\n/**\n * Create an instance of `EmbeddedCheckoutMessenger`.\n *\n * @remarks\n * The object is responsible for posting messages to the parent window from the\n * iframe when certain events have occurred. For example, when the checkout\n * form is first loaded, you should notify the parent window about it.\n *\n * The iframe can only be embedded in domains that are allowed by the store.\n *\n * ```ts\n * const messenger = createEmbeddedCheckoutMessenger({\n *     parentOrigin: 'https://some/website',\n * });\n *\n * messenger.postFrameLoaded();\n * ```\n *\n * @alpha\n * Please note that this feature is currently in an early stage of development.\n * Therefore the API is unstable and not ready for public consumption.\n *\n * @param options - Options for creating `EmbeddedCheckoutMessenger`\n * @returns - An instance of `EmbeddedCheckoutMessenger`\n */\nexport default function createEmbeddedCheckoutMessenger(options: EmbeddedCheckoutMessengerOptions): EmbeddedCheckoutMessenger {\n    setupContentWindowForIframeResizer();\n\n    const parentWindow = options.parentWindow || window.parent;\n\n    // Return a No-op messenger if it is not called inside an iframe\n    if (window === parentWindow) {\n        return new NoopEmbeddedCheckoutMessenger();\n    }\n\n    return new IframeEmbeddedCheckoutMessenger(\n        new IframeEventListener<EmbeddedContentEventMap>(options.parentOrigin),\n        new IframeEventPoster<EmbeddedCheckoutEvent>(options.parentOrigin, parentWindow),\n        new IframeEventPoster<EmbeddedCheckoutEvent>('*', parentWindow),\n        { [EmbeddedCheckoutEventType.FrameLoaded]: handleFrameLoadedEvent }\n    );\n}\n","import { isObject, union } from 'lodash';\nimport * as MessageFormat from 'messageformat';\n\nimport Logger from '../common/log/logger';\nimport { bindDecorator as bind } from '../common/utility';\n\nimport LanguageConfig, { Locales, Translations } from './language-config';\n\nconst DEFAULT_LOCALE = 'en';\nconst KEY_PREFIX = 'optimized_checkout';\n\n/**\n * Responsible for getting language strings.\n *\n * This object can be used to retrieve language strings that are most\n * appropriate for a given locale.\n *\n * The language strings provided to the object should follow [ICU\n * MessageFormat](http://userguide.icu-project.org/formatparse/messages) syntax.\n */\n@bind\nexport default class LanguageService {\n    private _locale: string;\n    private _locales: Locales;\n    private _translations: Translations;\n    private _formatters: { [key: string]: any };\n\n    /**\n     * @internal\n     */\n    constructor(\n        config: Partial<LanguageConfig>,\n        private _logger: Logger\n    ) {\n        const { locale, locales, translations } = this._transformConfig(config);\n\n        this._locale = locale;\n        this._locales = locales;\n        this._translations = translations;\n        this._formatters = {};\n    }\n\n    /**\n     * Remaps a set of language strings with a different set of keys.\n     *\n     * ```js\n     * service.mapKeys({\n     *     'new_key': 'existing_key',\n     * });\n     *\n     * console.log(service.translate('new_key'));\n     * ```\n     *\n     * @param maps - The set of language strings.\n     */\n    mapKeys(maps: { [key: string]: string }): void {\n        Object.keys(maps).forEach(key => {\n            const translationKey = `${KEY_PREFIX}.${maps[key]}`;\n\n            this._translations[`${KEY_PREFIX}.${key}`] = this._translations[translationKey];\n        });\n    }\n\n    /**\n     * Gets the preferred locale of the current customer.\n     *\n     * @returns The preferred locale code.\n     */\n    getLocale(): string {\n        return this._hasTranslations() ? this._locale : DEFAULT_LOCALE;\n    }\n\n    /**\n     * Gets a language string by a key.\n     *\n     * ```js\n     * service.translate('language_key');\n     * ```\n     *\n     * If the language string contains a placeholder, you can replace it by\n     * providing a second argument.\n     *\n     * ```js\n     * service.translate('language_key', { placeholder: 'Hello' });\n     * ```\n     *\n     * @param key - The language key.\n     * @param data - Data for replacing placeholders in the language string.\n     * @returns The translated language string.\n     */\n    translate(key: string, data: TranslationData = {}): string {\n        const prefixedKey = `${KEY_PREFIX}.${key}`;\n\n        if (typeof this._translations[prefixedKey] !== 'string') {\n            this._logger.warn(`Translation key \"${prefixedKey}\" is missing`);\n\n            return prefixedKey;\n        }\n\n        if (!this._formatters[prefixedKey]) {\n            const messageFormat = new MessageFormat(this._locales[prefixedKey]);\n\n            this._formatters[prefixedKey] = messageFormat.compile(this._translations[prefixedKey] || '');\n        }\n\n        return this._formatters[prefixedKey](this._transformData(data));\n    }\n\n    private _transformConfig(config: Partial<LanguageConfig> = {}): LanguageConfig {\n        const output: LanguageConfig = {\n            defaultTranslations: {},\n            translations: {},\n            locales: {},\n            locale: config.locale || DEFAULT_LOCALE,\n        };\n\n        const locales = config.locales || {};\n        const translations = this._flattenObject(config.translations || {});\n        const defaultTranslations = this._flattenObject(config.defaultTranslations || {});\n        const translationKeys = union(Object.keys(defaultTranslations), Object.keys(translations));\n\n        translationKeys.forEach(key => {\n            if (translations && translations[key]) {\n                output.translations[key] = translations[key];\n                output.locales[key] = locales[key] || output.locale;\n            } else {\n                output.translations[key] = defaultTranslations[key];\n                output.locales[key] = DEFAULT_LOCALE;\n            }\n        });\n\n        return output;\n    }\n\n    private _flattenObject(object: Translations, result: Translations = {}, parentKey: string = ''): Translations {\n        try {\n            Object.keys(object).forEach(key => {\n                const value = object[key];\n                const resultKey = parentKey ? `${parentKey}.${key}` : key;\n\n                if (isObject(value)) {\n                    return this._flattenObject(value as Translations, result, resultKey);\n                }\n\n                result[resultKey] = value;\n            });\n        } catch (err) {\n            this._logger.warn(`Unable to parse object: ${err}`);\n        }\n\n        return result;\n    }\n\n    private _transformData(data: TranslationData): TranslationData {\n        return Object.keys(data).reduce((result, key) => {\n            const value = data[key];\n\n            result[key] = value === null || value === undefined ? '' : value;\n\n            return result;\n        }, {} as TranslationData);\n    }\n\n    private _hasTranslations(): boolean {\n        return Object.keys(this._locales).map(key => this._locales[key])\n            .filter(code => code.split('-')[0] === this._locale.split('-')[0])\n            .length > 0;\n    }\n}\n\nexport interface TranslationData {\n    [key: string]: string | number;\n}\n","import { getDefaultLogger } from '../common/log';\n\nimport LanguageConfig from './language-config';\nimport LanguageService from './language-service';\n\n/**\n * Creates an instance of `LanguageService`.\n *\n * @remarks\n * ```js\n * const language = {{{langJson 'optimized_checkout'}}}; // `langJson` is a Handlebars helper provided by BigCommerce's Stencil template engine.\n * const service = createLanguageService(language);\n *\n * console.log(service.translate('address.city_label'));\n * ```\n *\n * @param config - A configuration object.\n * @returns An instance of `LanguageService`.\n */\nexport default function createLanguageService(config: Partial<LanguageConfig> = {}): LanguageService {\n    return new LanguageService(\n        config,\n        getDefaultLogger()\n    );\n}\n","import { InvalidArgumentError } from '../common/error/errors';\n\nimport { CurrencyConfig } from './currency';\n\nexport default class CurrencyFormatter {\n    private _decimalPlaces: number;\n    private _symbolLocation: string;\n    private _symbol: string;\n    private _thousandsSeparator: string;\n    private _decimalSeparator: string;\n\n    constructor(\n        currencySettings: CurrencyConfig\n    ) {\n        if (!currencySettings) {\n            throw new Error('Currency settings missing');\n        }\n\n        const {\n            decimalPlaces,\n            symbolLocation,\n            symbol,\n            thousandsSeparator,\n            decimalSeparator,\n        } = currencySettings;\n\n        if (\n            typeof symbolLocation !== 'string' ||\n            typeof symbol !== 'string' ||\n            typeof thousandsSeparator !== 'string' ||\n            typeof decimalSeparator !== 'string' ||\n            typeof decimalPlaces !== 'string'\n        ) {\n            throw new InvalidArgumentError('Invalid currency settings provided');\n        }\n\n        this._decimalPlaces = parseInt(decimalPlaces, 10);\n        this._symbolLocation = symbolLocation;\n        this._symbol = symbol;\n        this._thousandsSeparator = thousandsSeparator;\n        this._decimalSeparator = decimalSeparator;\n    }\n\n    format(amount?: number): string {\n        if (typeof amount !== 'number') {\n            throw new InvalidArgumentError('Invalid amount provided');\n        }\n\n        const formattedNumber = this._formatNumber(amount);\n\n        const formattedCurrency = this._formatCurrency(formattedNumber);\n\n        return amount < 0 ?\n            `-${formattedCurrency}` :\n            formattedCurrency;\n    }\n\n    private _formatNumber(amount: number): string {\n        const positiveAmount = Math.abs(amount);\n        const [ integerAmount, decimalAmount = '' ] = (this._toFixed(positiveAmount, this._decimalPlaces)).split('.');\n        const parsedIntegerAmount = integerAmount.replace(/\\B(?=(\\d{3})+(?!\\d))/g, this._thousandsSeparator);\n\n        if (this._decimalPlaces < 1) {\n            return parsedIntegerAmount;\n        }\n\n        return [\n            parsedIntegerAmount,\n            decimalAmount,\n        ].join(this._decimalSeparator);\n    }\n\n    private _formatCurrency(formattedNumber: string): string {\n        return (this._symbolLocation.toLowerCase() === 'left') ?\n            `${this._symbol}${formattedNumber}` :\n            `${formattedNumber}${this._symbol}`;\n    }\n\n    private _toFixed(value: number, precision: number): string {\n        return (+(Math.round(+(value + 'e' + precision)) + 'e' + -precision)).toFixed(precision);\n    }\n}\n","import { bindDecorator as bind } from '../common/utility';\nimport { StoreConfig } from '../config';\n\nimport CurrencyFormatter from './currency-formatter';\n\n/**\n * Responsible for formatting and converting currencies.\n */\n@bind\nexport default class CurrencyService {\n    private _customerFormatter: CurrencyFormatter;\n    private _storeFormatter: CurrencyFormatter;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _storeConfig: StoreConfig\n    ) {\n        this._customerFormatter = new CurrencyFormatter(this._storeConfig.shopperCurrency);\n        this._storeFormatter = new CurrencyFormatter(this._storeConfig.currency);\n    }\n\n    toCustomerCurrency(amount: number): string {\n        const exchangeRate = this._storeConfig.shopperCurrency.exchangeRate;\n\n        return this._customerFormatter.format(amount * exchangeRate);\n    }\n\n    toStoreCurrency(amount: number): string {\n        return this._storeFormatter.format(amount);\n    }\n}\n","import { StoreConfig } from '../config';\n\nimport CurrencyService from './currency-service';\n\n/**\n * Creates an instance of `CurrencyService`.\n *\n * @remarks\n * ```js\n * const { data } = checkoutService.getState();\n * const config = data.getConfig();\n * const checkout = data.getCheckout();\n * const currencyService = createCurrencyService(config);\n *\n * currencyService.toStoreCurrency(checkout.grandTotal);\n * currencyService.toCustomerCurrency(checkout.grandTotal);\n * ```\n *\n * @alpha\n * Please note that `CurrencyService` is currently in an early stage\n * of development. Therefore the API is unstable and not ready for public\n * consumption.\n *\n * @param config - The config object containing the currency configuration\n * @returns an instance of `CurrencyService`.\n */\nexport default function createCurrencyService(\n    config: StoreConfig\n): CurrencyService {\n    return new CurrencyService(config);\n}\n","export { createTimeout } from '@bigcommerce/request-sender';\n\nexport { createCheckoutService } from './checkout';\nexport { createCheckoutButtonInitializer } from './checkout-buttons';\nexport { embedCheckout } from './embedded-checkout';\nexport { createEmbeddedCheckoutMessenger } from './embedded-checkout/iframe-content';\nexport { createLanguageService } from './locale';\nexport { createCurrencyService } from './currency';\n","import { Checkout } from '../../../checkout';\nimport PaymentMethod from '../../payment-method';\nimport { BraintreeModuleCreator, GooglePayBraintreeSDK } from '../braintree';\n\nexport type EnvironmentType = 'PRODUCTION' | 'TEST';\ntype TokenizeType = 'AndroidPayCard' | 'CreditCard';\n\nexport interface GooglePayInitializer {\n    initialize(checkout: Checkout, paymentMethod: PaymentMethod, hasShippingAddress: boolean, publishableKey?: string): Promise<GooglePayPaymentDataRequestV2>;\n    teardown(): Promise<void>;\n    parseResponse(paymentData: GooglePaymentData): TokenizePayload;\n}\n\nexport interface GooglePayCreator extends BraintreeModuleCreator<GooglePayBraintreeSDK> {}\n\nexport interface GooglePayPaymentOptions {\n    environment: EnvironmentType;\n}\n\nexport interface GooglePayIsReadyToPayResponse {\n    result: boolean;\n    paymentMethodPresend?: boolean;\n}\n\nexport interface GooglePaySDK {\n    payments: {\n        api: {\n            PaymentsClient: new(options: GooglePayPaymentOptions) => GooglePayClient;\n        };\n    };\n}\n\nexport interface GooglePayClient {\n    isReadyToPay(options: object): Promise<GooglePayIsReadyToPayResponse>;\n    loadPaymentData(paymentDataRequest: GooglePayPaymentDataRequestV2): Promise<GooglePaymentData>;\n    createButton(options: { [key: string]: string | object }): HTMLElement;\n}\n\nexport interface GooglePayHostWindow extends Window {\n    google?: GooglePaySDK;\n}\n\nexport interface TokenizePayload {\n    nonce: string;\n    details: {\n        cardType: string;\n        lastFour: string;\n        lastTwo?: string;\n    };\n    description?: string;\n    type: TokenizeType;\n    binData?: {\n        commercial: string;\n        countryOfIssuance: string;\n        debit: string;\n        durbinRegulated: string;\n        healthcare: string;\n        issuingBank: string;\n        payroll: string;\n        prepaid: string;\n        productId: string;\n    };\n}\n\nexport interface GooglePaymentData {\n    apiVersion: number;\n    apiVersionMinor: number;\n    paymentMethodData: {\n        description: string;\n        info: {\n            cardDetails: string;\n            cardNetwork: string;\n            billingAddress: GooglePayAddress;\n        };\n        tokenizationData: {\n            token: string;\n            type: string;\n        };\n        type: string;\n    };\n    shippingAddress: GooglePayAddress;\n    email: string;\n}\n\nexport interface GooglePayAddress {\n    address1: string;\n    address2: string;\n    address3: string;\n    administrativeArea: string;\n    companyName: string;\n    countryCode: string;\n    locality: string;\n    name: string;\n    postalCode: string;\n    sortingCode: string;\n    phoneNumber: string;\n}\n\nexport interface GooglePaymentsError {\n    statusCode: string;\n    statusMessage?: string;\n}\n\nexport interface PaymentMethodData {\n    methodId: string;\n    paymentData: {\n        method: string;\n        nonce: string;\n        cardInformation: {\n            type: string;\n            number: string;\n        };\n    };\n}\n\nexport enum ButtonType {\n    Long = 'long',\n    Short = 'short',\n}\nexport enum ButtonColor {\n    Default = 'default',\n    Black = 'black',\n    White = 'white',\n}\n\nexport interface GooglePayPaymentDataRequestV2 {\n    apiVersion: number;\n    apiVersionMinor: number;\n    merchantInfo: {\n        authJwt?: string;\n        merchantId?: string;\n        merchantName?: string;\n    };\n    allowedPaymentMethods: [{\n        type: string;\n        parameters: {\n            allowedAuthMethods: string[];\n            allowedCardNetworks: string[];\n            allowPrepaidCards?: boolean;\n            billingAddressRequired?: boolean;\n            billingAddressParameters?: {\n                format?: string;\n                phoneNumberRequired?: boolean;\n            };\n        };\n        tokenizationSpecification?: {\n            type: string;\n            parameters: {\n                gateway: string;\n                gatewayMerchantId?: string;\n                'braintree:apiVersion'?: string;\n                'braintree:clientKey'?: string;\n                'braintree:merchantId'?: string;\n                'braintree:sdkVersion'?: string;\n                'braintree:authorizationFingerprint'?: string;\n                'stripe:version'?: string;\n                'stripe:publishableKey'?: string;\n            };\n        };\n    }];\n    transactionInfo: {\n        currencyCode: string;\n        totalPriceStatus: string;\n        totalPrice?: string;\n        checkoutOption?: string;\n    };\n    emailRequired?: boolean;\n    shippingAddressRequired?: boolean;\n    shippingAddressParameters?: {\n        allowedCountryCodes?: string[];\n        phoneNumberRequired?: boolean;\n    };\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { AddressRequestBody } from '../../../address';\nimport { BillingAddressActionCreator, BillingAddressUpdateRequestBody } from '../../../billing';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n} from '../../../common/error/errors';\nimport { RemoteCheckoutSynchronizationError } from '../../../remote-checkout/errors';\nimport { ConsignmentActionCreator } from '../../../shipping';\nimport PaymentMethodInvalidError from '../../errors/payment-method-invalid-error';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\n\nimport {\n    ButtonColor,\n    ButtonType,\n    EnvironmentType,\n    GooglePaymentData,\n    GooglePayAddress,\n    GooglePayClient,\n    GooglePayInitializer,\n    GooglePayPaymentDataRequestV2,\n    GooglePaySDK,\n    TokenizePayload\n} from './googlepay';\nimport GooglePayScriptLoader from './googlepay-script-loader';\n\nexport default class GooglePayPaymentProcessor {\n    private _googlePayClient?: GooglePayClient;\n    private _methodId?: string;\n    private _paymentDataRequest?: GooglePayPaymentDataRequestV2;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _googlePayScriptLoader: GooglePayScriptLoader,\n        private _googlePayInitializer: GooglePayInitializer,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _consigmentActionCreator: ConsignmentActionCreator,\n        private _requestSender: RequestSender\n    ) {}\n\n    initialize(methodId: string): Promise<void> {\n        this._methodId = methodId;\n\n        return this._configureWallet();\n    }\n\n    deinitialize(): Promise<void> {\n        return this._googlePayInitializer.teardown();\n    }\n\n    createButton(\n        onClick: (event: Event) => Promise<void>,\n        buttonType: ButtonType = ButtonType.Short,\n        buttonColor: ButtonColor = ButtonColor.Default\n    ): HTMLElement {\n        if (!this._googlePayClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._googlePayClient.createButton({\n            buttonColor,\n            buttonType,\n            onClick,\n        });\n    }\n\n    displayWallet(): Promise<GooglePaymentData> {\n        if (!this._googlePayClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._googlePayClient.loadPaymentData(this._getPaymentDataRequest());\n    }\n\n    handleSuccess(paymentData: GooglePaymentData): Promise<InternalCheckoutSelectors> {\n        return this._postForm(this._googlePayInitializer.parseResponse(paymentData))\n            .then(() => this._updateBillingAddress(paymentData));\n    }\n\n    updateShippingAddress(shippingAddress: GooglePayAddress): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consigmentActionCreator.updateAddress(this._mapGooglePayAddressToShippingAddress(shippingAddress))\n        );\n    }\n\n    private _configureWallet(): Promise<void> {\n        const methodId = this._getMethodId();\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n                const checkout = state.checkout.getCheckout();\n                const hasShippingAddress = !!state.shippingAddress.getShippingAddress();\n\n                if (!paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                const { testMode } = paymentMethod.config;\n\n                return Promise.all([\n                    this._googlePayScriptLoader.load(),\n                    this._googlePayInitializer.initialize(checkout, paymentMethod, hasShippingAddress),\n                ]).then(([googlePay, paymentDataRequest]) => {\n                    this._googlePayClient = this._getGooglePayClient(googlePay, testMode);\n                    this._paymentDataRequest = paymentDataRequest;\n\n                    return this._googlePayClient.isReadyToPay({\n                        allowedPaymentMethods: [\n                            {\n                                type: paymentDataRequest.allowedPaymentMethods[0].type,\n                                parameters: {\n                                    allowedAuthMethods: paymentDataRequest.allowedPaymentMethods[0].parameters.allowedAuthMethods,\n                                    allowedCardNetworks: paymentDataRequest.allowedPaymentMethods[0].parameters.allowedCardNetworks,\n                                },\n                            },\n                        ],\n                        apiVersion: paymentDataRequest.apiVersion,\n                        apiVersionMinor: paymentDataRequest.apiVersionMinor,\n                    }).then(response => {\n                        if (response.result) {\n                            return;\n                        }\n\n                        throw new PaymentMethodInvalidError();\n                    });\n                });\n            });\n    }\n\n    private _getCardInformation(cardInformation: { cardType: string; lastFour: string }) {\n        return {\n            type: cardInformation.cardType,\n            number: cardInformation.lastFour,\n        };\n    }\n\n    private _getPaymentDataRequest(): GooglePayPaymentDataRequestV2 {\n        if (!this._paymentDataRequest) {\n            throw new RemoteCheckoutSynchronizationError();\n        }\n\n        return this._paymentDataRequest;\n    }\n\n    private _getGooglePayClient(google: GooglePaySDK, testMode?: boolean): GooglePayClient {\n        if (testMode === undefined) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const environment: EnvironmentType = testMode ? 'TEST' : 'PRODUCTION';\n\n        return new google.payments.api.PaymentsClient({ environment });\n    }\n\n    private _getMethodId(): string {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._methodId;\n    }\n\n    private _mapGooglePayAddressToBillingAddress(paymentData: GooglePaymentData, id: string): BillingAddressUpdateRequestBody {\n        return {\n            id,\n            firstName: paymentData.paymentMethodData.info.billingAddress.name.split(' ').slice(0, -1).join(' '),\n            lastName: paymentData.paymentMethodData.info.billingAddress.name.split(' ').slice(-1).join(' '),\n            company: paymentData.paymentMethodData.info.billingAddress.companyName,\n            address1: paymentData.paymentMethodData.info.billingAddress.address1,\n            address2: paymentData.paymentMethodData.info.billingAddress.address2 + paymentData.paymentMethodData.info.billingAddress.address3,\n            city: paymentData.paymentMethodData.info.billingAddress.locality,\n            stateOrProvince: paymentData.paymentMethodData.info.billingAddress.administrativeArea,\n            stateOrProvinceCode: paymentData.paymentMethodData.info.billingAddress.administrativeArea,\n            postalCode: paymentData.paymentMethodData.info.billingAddress.postalCode,\n            countryCode: paymentData.paymentMethodData.info.billingAddress.countryCode,\n            phone: paymentData.paymentMethodData.info.billingAddress.phoneNumber,\n            customFields: [],\n            email: paymentData.email,\n        };\n    }\n\n    private _mapGooglePayAddressToShippingAddress(address: GooglePayAddress): AddressRequestBody {\n        return {\n            firstName: address.name.split(' ').slice(0, -1).join(' '),\n            lastName: address.name.split(' ').slice(-1).join(' '),\n            company: address.companyName,\n            address1: address.address1,\n            address2: address.address2 + address.address3,\n            city: address.locality,\n            stateOrProvince: address.administrativeArea,\n            stateOrProvinceCode: address.administrativeArea,\n            postalCode: address.postalCode,\n            countryCode: address.countryCode,\n            phone: address.phoneNumber,\n            customFields: [],\n        };\n    }\n\n    private _postForm(postPaymentData: TokenizePayload): Promise<Response<void>> {\n        const cardInformation = postPaymentData.details;\n\n        return this._requestSender.post('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: {\n                payment_type: postPaymentData.type,\n                nonce: postPaymentData.nonce,\n                provider: this._getMethodId(),\n                action: 'set_external_checkout',\n                card_information: this._getCardInformation(cardInformation),\n            },\n        });\n    }\n\n    private _updateBillingAddress(paymentData: GooglePaymentData): Promise<InternalCheckoutSelectors> {\n        const remoteBillingAddress = this._store.getState().billingAddress.getBillingAddress();\n\n        if (!remoteBillingAddress) {\n            throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n        }\n\n        const googlePayAddressMapped = this._mapGooglePayAddressToBillingAddress(paymentData, remoteBillingAddress.id);\n\n        return this._store.dispatch(\n            this._billingAddressActionCreator.updateAddress(googlePayAddressMapped)\n        );\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { GooglePayHostWindow, GooglePaySDK } from './googlepay';\n\nexport default class GooglePayScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: GooglePayHostWindow = window\n    ) {}\n\n    load(): Promise<GooglePaySDK> {\n        return this._scriptLoader\n            .loadScript('https://pay.google.com/gp/p/js/pay.js')\n            .then(() => {\n                if (!this._window.google) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.google;\n            });\n    }\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../../../billing';\nimport { CheckoutRequestSender, CheckoutStore } from '../../../checkout';\nimport { ConsignmentActionCreator, ConsignmentRequestSender } from '../../../shipping';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport PaymentMethodRequestSender from '../../payment-method-request-sender';\n\nimport { GooglePayInitializer } from './googlepay';\nimport GooglePayPaymentProcessor from './googlepay-payment-processor';\nimport GooglePayScriptLoader from './googlepay-script-loader';\n\nexport default function createGooglePayPaymentProcessor(store: CheckoutStore, initializer: GooglePayInitializer): GooglePayPaymentProcessor {\n    const requestSender = createRequestSender();\n    const scriptLoader = getScriptLoader();\n\n    return new GooglePayPaymentProcessor(\n        store,\n        new PaymentMethodActionCreator(\n            new PaymentMethodRequestSender(requestSender)\n        ),\n        new GooglePayScriptLoader(scriptLoader),\n        initializer,\n        new BillingAddressActionCreator(\n            new BillingAddressRequestSender(requestSender)\n        ),\n        new ConsignmentActionCreator(\n            new ConsignmentRequestSender(requestSender),\n            new CheckoutRequestSender(requestSender)\n        ),\n        requestSender\n    );\n}\n","import { keyBy, reduce, some } from 'lodash';\n\nimport { Checkout } from '../checkout';\nimport { AmountTransformer } from '../common/utility';\nimport { mapToInternalCoupon, mapToInternalGiftCertificate } from '../coupon';\nimport { mapToDiscountNotifications } from '../promotion';\n\nimport InternalCart from './internal-cart';\nimport mapToInternalLineItems from './map-to-internal-line-items';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalCart(checkout: Checkout): InternalCart {\n    const decimalPlaces = checkout.cart.currency.decimalPlaces;\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: checkout.cart.id,\n        items: mapToInternalLineItems(checkout.cart.lineItems, decimalPlaces),\n        currency: checkout.cart.currency.code,\n        coupon: {\n            discountedAmount: reduce(checkout.cart.coupons, (sum, coupon) => {\n                return sum + coupon.discountedAmount;\n            }, 0),\n            coupons: checkout.cart.coupons.map(mapToInternalCoupon),\n        },\n        discount: {\n            amount: checkout.cart.discountAmount,\n            integerAmount: amountTransformer.toInteger(checkout.cart.discountAmount),\n        },\n        discountNotifications: mapToDiscountNotifications(checkout.promotions),\n        giftCertificate: {\n            totalDiscountedAmount: reduce(checkout.giftCertificates, (sum, certificate) => {\n                return sum + certificate.used;\n            }, 0),\n            appliedGiftCertificates: keyBy(checkout.giftCertificates.map(mapToInternalGiftCertificate), 'code'),\n        },\n        shipping: {\n            amount: checkout.shippingCostTotal,\n            integerAmount: amountTransformer.toInteger(checkout.shippingCostTotal),\n            amountBeforeDiscount: checkout.shippingCostBeforeDiscount,\n            integerAmountBeforeDiscount: amountTransformer.toInteger(checkout.shippingCostBeforeDiscount),\n            required: some(checkout.cart.lineItems.physicalItems, lineItem => lineItem.isShippingRequired),\n        },\n        subtotal: {\n            amount: checkout.subtotal,\n            integerAmount: amountTransformer.toInteger(checkout.subtotal),\n        },\n        storeCredit: {\n            amount: checkout.customer ? checkout.customer.storeCredit : 0,\n        },\n        taxSubtotal: {\n            amount: checkout.taxTotal,\n            integerAmount: amountTransformer.toInteger(checkout.taxTotal),\n        },\n        taxes: checkout.taxes,\n        taxTotal: {\n            amount: checkout.taxTotal,\n            integerAmount: amountTransformer.toInteger(checkout.taxTotal),\n        },\n        handling: {\n            amount: checkout.handlingCostTotal,\n            integerAmount: amountTransformer.toInteger(checkout.handlingCostTotal),\n        },\n        grandTotal: {\n            amount: checkout.grandTotal,\n            integerAmount: amountTransformer.toInteger(checkout.grandTotal),\n        },\n    };\n}\n","import { DiscountNotification } from '../discount';\n\nimport { Promotion } from '.';\n\nexport default function mapToDiscountNotifications(promotions?: Promotion[]): DiscountNotification[] {\n    const notifications: DiscountNotification[] = [];\n\n    (promotions || []).forEach(promotion => {\n        (promotion.banners || []).forEach(banner => {\n            notifications.push({\n                placeholders: [],\n                discountType: null,\n                message: '',\n                messageHtml: banner.text,\n            });\n        });\n    });\n\n    return notifications;\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * This error should be thrown when a shopper tries to sign in as a guest but\n * they are already signed in as a registered customer.\n */\nexport default class UnableToContinueAsGuestError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Unable to continue as a guest because the customer is already signed in.');\n\n        this.name = 'UnableToContinueAsGuestError';\n        this.type = 'unable_to_continue_as_guest';\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Response } from '@bigcommerce/request-sender';\nimport { Observable, Observer } from 'rxjs';\n\nimport { Checkout, InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { GuestCredentials } from '../customer';\n\nimport { BillingAddressRequestSender } from '.';\nimport { BillingAddressUpdateRequestBody } from './billing-address';\nimport { BillingAddressActionType, ContinueAsGuestAction, UpdateBillingAddressAction } from './billing-address-actions';\nimport { UnableToContinueAsGuestError } from './errors';\n\nexport default class BillingAddressActionCreator {\n    constructor(\n        private _requestSender: BillingAddressRequestSender\n    ) {}\n\n    continueAsGuest(\n        credentials: GuestCredentials,\n        options?: RequestOptions\n    ): ThunkAction<ContinueAsGuestAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ContinueAsGuestAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const customer = state.customer.getCustomer();\n\n            if (customer && !customer.isGuest) {\n                throw new UnableToContinueAsGuestError();\n            }\n\n            const billingAddress = state.billingAddress.getBillingAddress();\n\n            let billingAddressRequestBody;\n\n            if (!billingAddress) {\n                billingAddressRequestBody = credentials;\n            } else {\n                const { country, ...existingBillingAddressRequestBody } = billingAddress;\n\n                billingAddressRequestBody = {\n                    ...existingBillingAddressRequestBody,\n                    ...credentials,\n                };\n            }\n\n            observer.next(createAction(BillingAddressActionType.ContinueAsGuestRequested));\n\n            this._createOrUpdateBillingAddress(checkout.id, billingAddressRequestBody, options)\n                .then(({ body }) => {\n                    observer.next(createAction(BillingAddressActionType.ContinueAsGuestSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(BillingAddressActionType.ContinueAsGuestFailed, response));\n                });\n        });\n    }\n\n    updateAddress(\n        address: Partial<BillingAddressUpdateRequestBody>,\n        options?: RequestOptions\n    ): ThunkAction<UpdateBillingAddressAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateBillingAddressAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(BillingAddressActionType.UpdateBillingAddressRequested));\n\n            const billingAddress = state.billingAddress.getBillingAddress();\n\n            // If email is not present in the address provided by the client, then\n            // fall back to the stored email as it could have been set separately\n            // using a convenience method. We can't rely on billingAddress having\n            // an ID to consider that there's a preexisting email, as billingAddress\n            // object from Order doesn't have an ID.\n            const billingAddressRequestBody = {\n                ...address,\n                email: typeof address.email === 'undefined' && billingAddress ? billingAddress.email : address.email,\n            };\n\n            if (billingAddress && billingAddress.id) {\n                billingAddressRequestBody.id = billingAddress.id;\n            }\n\n            this._createOrUpdateBillingAddress(checkout.id, billingAddressRequestBody, options)\n                .then(({ body }) => {\n                    observer.next(createAction(BillingAddressActionType.UpdateBillingAddressSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(BillingAddressActionType.UpdateBillingAddressFailed, response));\n                });\n        });\n    }\n\n    private _createOrUpdateBillingAddress(\n        checkoutId: string,\n        address: Partial<BillingAddressUpdateRequestBody>,\n        options?: RequestOptions\n    ): Promise<Response<Checkout>> {\n        if (!address.id) {\n            return this._requestSender.createAddress(checkoutId, address, options);\n        }\n\n        return this._requestSender.updateAddress(checkoutId, address, options);\n    }\n}\n"],"sourceRoot":""}