{"version":3,"sources":["webpack://checkoutKit/webpack/bootstrap","webpack://checkoutKit/external \"tslib\"","webpack://checkoutKit/external \"@bigcommerce/data-store\"","webpack://checkoutKit/external \"lodash\"","webpack://checkoutKit/external \"rxjs\"","webpack://checkoutKit/./src/shipping/consignment-actions.ts","webpack://checkoutKit/./src/customer/customer-strategy-actions.ts","webpack://checkoutKit/./src/payment/payment-strategy-actions.ts","webpack://checkoutKit/./src/common/error/errors/missing-data-error.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-actions.ts","webpack://checkoutKit/./src/checkout/checkout-actions.ts","webpack://checkoutKit/./src/common/error/errors/standard-error.ts","webpack://checkoutKit/./src/common/utility/set-prototype-of.ts","webpack://checkoutKit/./src/coupon/coupon-actions.ts","webpack://checkoutKit/./src/billing/billing-address-actions.ts","webpack://checkoutKit/./src/order/order-actions.ts","webpack://checkoutKit/./src/payment/payment-method-actions.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-actions.ts","webpack://checkoutKit/external \"rxjs/operators\"","webpack://checkoutKit/./src/coupon/gift-certificate-actions.ts","webpack://checkoutKit/./src/payment/instrument/instrument-actions.ts","webpack://checkoutKit/./src/embedded-checkout/embedded-checkout-events.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-actions.ts","webpack://checkoutKit/./src/common/error/errors/request-error.ts","webpack://checkoutKit/./src/config/config-actions.ts","webpack://checkoutKit/./src/geography/country-actions.ts","webpack://checkoutKit/./src/shipping/shipping-country-actions.ts","webpack://checkoutKit/external \"@bigcommerce/request-sender\"","webpack://checkoutKit/./src/payment/payment-status-types.ts","webpack://checkoutKit/external \"@bigcommerce/script-loader\"","webpack://checkoutKit/./src/common/http-request/content-type.ts","webpack://checkoutKit/./src/order/spam-protection/spam-protection-actions.ts","webpack://checkoutKit/./src/payment/payment-actions.ts","webpack://checkoutKit/./src/common/error/errors/invalid-argument-error.ts","webpack://checkoutKit/./src/payment/payment-method-types.ts","webpack://checkoutKit/./src/embedded-checkout/is-iframe-event.ts","webpack://checkoutKit/./src/common/utility/is-equal.ts","webpack://checkoutKit/external \"@bigcommerce/form-poster\"","webpack://checkoutKit/external \"local-storage-fallback\"","webpack://checkoutKit/./src/embedded-checkout/iframe-event-poster.ts","webpack://checkoutKit/./src/customer/customer-actions.ts","webpack://checkoutKit/./src/payment/errors/payment-method-invalid-error.ts","webpack://checkoutKit/./src/common/error/error-actions.ts","webpack://checkoutKit/./src/payment/payment-method-action-creator.ts","webpack://checkoutKit/./src/payment/payment-method-request-sender.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-content/embedded-content-events.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-event-listener.ts","webpack://checkoutKit/./src/checkout/checkout-default-includes.ts","webpack://checkoutKit/./src/cart/map-to-internal-line-items.ts","webpack://checkoutKit/./src/cart/map-gift-certificate-to-internal-line-item.ts","webpack://checkoutKit/./src/common/http-request/internal-api-headers.ts","webpack://checkoutKit/./src/common/utility/cache-key-resolver.ts","webpack://checkoutKit/./src/common/utility/bind-decorator.ts","webpack://checkoutKit/./src/checkout/checkout-params.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-sdk-creator.ts","webpack://checkoutKit/./src/cart/map-to-internal-line-item.ts","webpack://checkoutKit/external \"iframe-resizer\"","webpack://checkoutKit/./src/common/utility/is-private.ts","webpack://checkoutKit/./src/common/error/errors/not-initialized-error.ts","webpack://checkoutKit/./src/common/error/throw-error-action.ts","webpack://checkoutKit/./src/common/utility/amount-transformer.ts","webpack://checkoutKit/./src/common/url/parse-url.ts","webpack://checkoutKit/./src/common/action/cachable-action-decorator.ts","webpack://checkoutKit/./src/common/action/is-action-options.ts","webpack://checkoutKit/./src/common/action/cache-action.ts","webpack://checkoutKit/./src/common/utility/omit-deep.ts","webpack://checkoutKit/./src/checkout/checkout-action-creator.ts","webpack://checkoutKit/./src/shipping/consignment-action-creator.ts","webpack://checkoutKit/./src/shipping/consignment-request-sender.ts","webpack://checkoutKit/./src/payment/strategies/masterpass/get-callback-url.ts","webpack://checkoutKit/./src/shipping/map-to-internal-shipping-option.ts","webpack://checkoutKit/./src/common/error/errors/unrecoverable-error.ts","webpack://checkoutKit/./src/common/error/errors/map-from-internal-error-response.ts","webpack://checkoutKit/./src/common/error/errors/map-from-payment-error-response.ts","webpack://checkoutKit/./src/common/error/request-error-factory.ts","webpack://checkoutKit/./src/common/error/errors/map-from-storefront-error-response.ts","webpack://checkoutKit/./src/common/error/clear-error-reducer.ts","webpack://checkoutKit/./src/billing/billing-address-reducer.ts","webpack://checkoutKit/./src/cart/cart-reducer.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-reducer.ts","webpack://checkoutKit/./src/config/config-reducer.ts","webpack://checkoutKit/./src/coupon/coupon-reducer.ts","webpack://checkoutKit/./src/coupon/gift-certificate-reducer.ts","webpack://checkoutKit/./src/customer/customer-reducer.ts","webpack://checkoutKit/./src/customer/customer-strategy-state.ts","webpack://checkoutKit/./src/customer/customer-strategy-reducer.ts","webpack://checkoutKit/./src/geography/country-reducer.ts","webpack://checkoutKit/./src/order/order-reducer.ts","webpack://checkoutKit/./src/payment/payment-reducer.ts","webpack://checkoutKit/./src/payment/payment-method-reducer.ts","webpack://checkoutKit/./src/common/utility/merge-or-push.ts","webpack://checkoutKit/./src/payment/payment-strategy-state.ts","webpack://checkoutKit/./src/payment/payment-strategy-reducer.ts","webpack://checkoutKit/./src/payment/instrument/instrument-reducer.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-reducer.ts","webpack://checkoutKit/./src/shipping/consignment-reducer.ts","webpack://checkoutKit/./src/shipping/shipping-country-reducer.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-state.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-reducer.ts","webpack://checkoutKit/./src/checkout/checkout-reducer.ts","webpack://checkoutKit/./src/billing/billing-address-selector.ts","webpack://checkoutKit/./src/cart/cart-selector.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-selector.ts","webpack://checkoutKit/./src/common/utility/create-freeze-proxy.ts","webpack://checkoutKit/./src/config/config-selector.ts","webpack://checkoutKit/./src/form/form-field.ts","webpack://checkoutKit/./src/coupon/coupon-selector.ts","webpack://checkoutKit/./src/coupon/gift-certificate-selector.ts","webpack://checkoutKit/./src/customer/customer-selector.ts","webpack://checkoutKit/./src/customer/customer-strategy-selector.ts","webpack://checkoutKit/./src/form/form-selector.ts","webpack://checkoutKit/./src/geography/country-selector.ts","webpack://checkoutKit/./src/order/order-selector.ts","webpack://checkoutKit/./src/payment/payment-method-selector.ts","webpack://checkoutKit/./src/payment/payment-strategy-selector.ts","webpack://checkoutKit/./src/payment/payment-selector.ts","webpack://checkoutKit/./src/payment/instrument/instrument-selector.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-selector.ts","webpack://checkoutKit/./src/shipping/shipping-address-selector.ts","webpack://checkoutKit/./src/shipping/shipping-country-selector.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-selector.ts","webpack://checkoutKit/./src/address/is-address-equal.ts","webpack://checkoutKit/./src/shipping/consignment-selector.ts","webpack://checkoutKit/./src/checkout/checkout-selector.ts","webpack://checkoutKit/./src/checkout/create-internal-checkout-selectors.ts","webpack://checkoutKit/./src/checkout/create-checkout-store.ts","webpack://checkoutKit/./src/checkout/create-action-transformer.ts","webpack://checkoutKit/./src/common/error/create-request-error-factory.ts","webpack://checkoutKit/./src/checkout/create-checkout-store-reducer.ts","webpack://checkoutKit/./src/checkout/errors/checkout-not-available-error.ts","webpack://checkoutKit/./src/checkout/checkout-request-sender.ts","webpack://checkoutKit/./src/coupon/map-to-internal-coupon.ts","webpack://checkoutKit/./src/address/map-to-internal-address.ts","webpack://checkoutKit/./src/billing/is-billing-address-like.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-error-selector.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-status-selector.ts","webpack://checkoutKit/./src/checkout-buttons/create-checkout-button-selectors.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-initializer.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/checkout-button-method-type.ts","webpack://checkoutKit/./src/common/dom/is-element-id.ts","webpack://checkoutKit/./src/common/dom/set-unique-element-id.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-strategy-action-creator.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/braintree/braintree-paypal-button-strategy.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/googlepay/googlepay-button-strategy.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/masterpass/masterpass-button-strategy.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/paypal/paypal-button-strategy.ts","webpack://checkoutKit/./src/checkout-buttons/create-checkout-button-initializer.ts","webpack://checkoutKit/./src/checkout-buttons/create-checkout-button-registry.ts","webpack://checkoutKit/./src/embedded-checkout/errors/not-embeddable-error.ts","webpack://checkoutKit/./src/common/storage/browser-storage.ts","webpack://checkoutKit/./src/embedded-checkout/errors/invalid-login-token-error.ts","webpack://checkoutKit/./src/embedded-checkout/embedded-checkout.ts","webpack://checkoutKit/./src/embedded-checkout/loading-indicator.ts","webpack://checkoutKit/./src/embedded-checkout/resizable-iframe-creator.ts","webpack://checkoutKit/./src/embedded-checkout/embed-checkout.ts","webpack://checkoutKit/external \"@bigcommerce/bigpay-client\"","webpack://checkoutKit/external \"messageformat\"","webpack://checkoutKit/./src/common/error/errors/timeout-error.ts","webpack://checkoutKit/./src/common/selector/selector-decorator.ts","webpack://checkoutKit/./src/common/http-request/join-includes.ts","webpack://checkoutKit/./src/config/config-action-creator.ts","webpack://checkoutKit/./src/config/config-request-sender.ts","webpack://checkoutKit/./src/billing/billing-address-action-creator.ts","webpack://checkoutKit/./src/billing/billing-address-request-sender.ts","webpack://checkoutKit/./src/common/registry/registry.ts","webpack://checkoutKit/./src/payment/strategies/masterpass/masterpass-script-loader.ts","webpack://checkoutKit/./src/remote-checkout/errors/remote-checkout-synchronization-error.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-braintree-initializer.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-stripe-initializer.ts","webpack://checkoutKit/./src/customer/map-to-internal-customer.ts","webpack://checkoutKit/./src/coupon/map-to-internal-gift-certificate.ts","webpack://checkoutKit/./src/order/map-to-internal-order.ts","webpack://checkoutKit/./src/payment/strategies/paypal/paypal-script-loader.ts","webpack://checkoutKit/./src/common/error/error-action-creator.ts","webpack://checkoutKit/./src/common/utility/get-environment.ts","webpack://checkoutKit/./src/common/log/console-logger.ts","webpack://checkoutKit/./src/common/log/noop-logger.ts","webpack://checkoutKit/./src/common/log/get-default-logger.ts","webpack://checkoutKit/./src/common/log/create-logger.ts","webpack://checkoutKit/./src/coupon/coupon-action-creator.ts","webpack://checkoutKit/./src/coupon/coupon-request-sender.ts","webpack://checkoutKit/./src/coupon/gift-certificate-action-creator.ts","webpack://checkoutKit/./src/coupon/gift-certificate-request-sender.ts","webpack://checkoutKit/./src/customer/customer-strategy-action-creator.ts","webpack://checkoutKit/./src/payment/strategies/amazon-pay/amazon-pay-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-visacheckout-payment-processor.ts","webpack://checkoutKit/./src/payment/strategies/braintree/create-braintree-visacheckout-payment-processor.ts","webpack://checkoutKit/./src/payment/strategies/braintree/visacheckout-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/chasepay/chasepay-script-loader.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-request-sender.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-action-creator.ts","webpack://checkoutKit/./src/customer/customer-action-creator.ts","webpack://checkoutKit/./src/customer/customer-request-sender.ts","webpack://checkoutKit/./src/common/error/errors/not-implemented-error.ts","webpack://checkoutKit/./src/customer/strategies/amazon/amazon-pay-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/braintree/braintree-visacheckout-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/chasepay/chasepay-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/default/default-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/googlepay/googlepay-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/masterpass/masterpass-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/square/square-customer-strategy.ts","webpack://checkoutKit/./src/geography/country-action-creator.ts","webpack://checkoutKit/./src/geography/country-request-sender.ts","webpack://checkoutKit/./src/order/order-request-sender.ts","webpack://checkoutKit/./src/order/order-action-creator.ts","webpack://checkoutKit/./src/common/dom/mutation-observer.ts","webpack://checkoutKit/./src/order/spam-protection/errors/spam-protection-failed-error.ts","webpack://checkoutKit/./src/order/spam-protection/errors/spam-protection-not-completed-error.ts","webpack://checkoutKit/./src/order/spam-protection/google-recaptcha.ts","webpack://checkoutKit/./src/order/spam-protection/google-recaptcha-script-loader.ts","webpack://checkoutKit/./src/order/spam-protection/spam-protection-action-creator.ts","webpack://checkoutKit/./src/order/errors/order-finalization-not-required-error.ts","webpack://checkoutKit/./src/payment/payment-strategy-type.ts","webpack://checkoutKit/./src/payment/payment-strategy-action-creator.ts","webpack://checkoutKit/./src/cart/cart-comparator.ts","webpack://checkoutKit/./src/cart/errors/cart-changed-error.ts","webpack://checkoutKit/./src/checkout/checkout-validator.ts","webpack://checkoutKit/./src/payment/is-vaulted-instrument.ts","webpack://checkoutKit/./src/order/order-params.ts","webpack://checkoutKit/./src/payment/payment-action-creator.ts","webpack://checkoutKit/./src/payment/payment-request-sender.ts","webpack://checkoutKit/./src/payment/payment-strategy-registry.ts","webpack://checkoutKit/./src/payment/errors/payment-argument-invalid-error.ts","webpack://checkoutKit/./src/payment/errors/payment-method-cancelled-error.ts","webpack://checkoutKit/./src/payment/strategies/affirm/affirm-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/affirm/affirmJs.ts","webpack://checkoutKit/./src/payment/strategies/affirm/affirm-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/afterpay/afterpay-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/afterpay/afterpay-script-loader.ts","webpack://checkoutKit/./src/address/is-internal-address-equal.ts","webpack://checkoutKit/./src/common/utility/omit-private.ts","webpack://checkoutKit/./src/address/map-from-internal-address.ts","webpack://checkoutKit/./src/payment/strategies/amazon-pay/amazon-pay-payment-strategy.ts","webpack://checkoutKit/./src/common/overlay/overlay.ts","webpack://checkoutKit/./src/common/utility/cancellable-promise.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-payment-processor.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-credit-card-payment-strategy.ts","webpack://checkoutKit/./src/payment/is-credit-card-like.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-paypal-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/chasepay/chasepay.ts","webpack://checkoutKit/./src/payment/strategies/braintree/is-braintree-error.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-visacheckout-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/chasepay/chasepay-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/cybersource/cardinal.ts","webpack://checkoutKit/./src/payment/strategies/converge/converge-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/credit-card/credit-card-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/cybersource/cybersource-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/cybersource/cardinal-client.ts","webpack://checkoutKit/./src/payment/strategies/square/square-form.ts","webpack://checkoutKit/./src/payment/strategies/cybersource/cardinal-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/klarna/klarna-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/klarna/klarna-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/legacy/legacy-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/masterpass/masterpass-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/no-payment/no-payment-data-required-strategy.ts","webpack://checkoutKit/./src/payment/strategies/offline/offline-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/offsite/offsite-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/paypal/paypal-pro-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/paypal/paypal-express-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/sage-pay/sage-pay-payment-strategy.ts","webpack://checkoutKit/./src/common/error/errors/unsupported-browser-error.ts","webpack://checkoutKit/./src/payment/strategies/square/square-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/square/square-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/stripev3/stripev3-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/stripev3/stripev3-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/wepay/wepay-risk-client.ts","webpack://checkoutKit/./src/payment/strategies/wepay/wepay-payment-strategy.ts","webpack://checkoutKit/./src/payment/errors/payment-method-declined-error.ts","webpack://checkoutKit/./src/payment/strategies/zip/zip-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/zip/zip-script-loader.ts","webpack://checkoutKit/./src/payment/create-payment-strategy-registry.ts","webpack://checkoutKit/./src/payment/strategies/braintree/create-braintree-payment-processor.ts","webpack://checkoutKit/./src/payment/instrument/instrument-action-creator.ts","webpack://checkoutKit/./src/common/date-time/add-minutes.ts","webpack://checkoutKit/./src/common/date-time/is-future.ts","webpack://checkoutKit/./src/payment/instrument/instrument-response-transformer.ts","webpack://checkoutKit/./src/payment/instrument/instrument-request-sender.ts","webpack://checkoutKit/./src/shipping/shipping-country-action-creator.ts","webpack://checkoutKit/./src/shipping/shipping-country-request-sender.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-action-creator.ts","webpack://checkoutKit/./src/shipping/strategies/amazon/amazon-pay-shipping-strategy.ts","webpack://checkoutKit/./src/shipping/strategies/default/default-shipping-strategy.ts","webpack://checkoutKit/./src/common/utility/clone-decorator.ts","webpack://checkoutKit/./src/checkout/checkout-store-selector.ts","webpack://checkoutKit/./src/checkout/checkout-store-error-selector.ts","webpack://checkoutKit/./src/checkout/checkout-store-status-selector.ts","webpack://checkoutKit/./src/checkout/create-checkout-selectors.ts","webpack://checkoutKit/./src/common/error/error-message-transformer.ts","webpack://checkoutKit/./src/common/utility/to-single-line.ts","webpack://checkoutKit/./src/checkout/checkout-service.ts","webpack://checkoutKit/./src/checkout/create-checkout-service-error-transformer.ts","webpack://checkoutKit/./src/checkout/create-checkout-service.ts","webpack://checkoutKit/./src/order/spam-protection/create-spam-protection.ts","webpack://checkoutKit/./src/payment/create-payment-client.ts","webpack://checkoutKit/./src/customer/create-customer-strategy-registry.ts","webpack://checkoutKit/./src/shipping/create-shipping-strategy-registry.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-content/handle-frame-loaded-event.ts","webpack://checkoutKit/./src/common/error/errors/custom-error.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-content/iframe-embedded-checkout-messenger.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-content/noop-embedded-checkout-messenger.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-content/create-embedded-checkout-messenger.ts","webpack://checkoutKit/./src/locale/language-service.ts","webpack://checkoutKit/./src/locale/create-language-service.ts","webpack://checkoutKit/./src/currency/currency-formatter.ts","webpack://checkoutKit/./src/currency/currency-service.ts","webpack://checkoutKit/./src/currency/create-currency-service.ts","webpack://checkoutKit/./src/index.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-payment-processor.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/create-googlepay-payment-processor.ts","webpack://checkoutKit/./src/cart/map-to-internal-cart.ts","webpack://checkoutKit/./src/promotion/map-to-discount-notifications.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","ConsignmentActionType","__webpack_exports__","CustomerStrategyActionType","PaymentStrategyActionType","MissingDataErrorType","MissingDataError","_super","subtype","_this","this","type","MissingBillingAddress","MissingCart","MissingConsignments","MissingCheckout","MissingCheckoutConfig","MissingOrderConfig","MissingOrder","MissingOrderId","MissingPayment","MissingPaymentMethod","MissingShippingAddress","MissingSpamProtectionToken","getErrorMessage","tslib__WEBPACK_IMPORTED_MODULE_0__","_standard_error__WEBPACK_IMPORTED_MODULE_1__","ShippingStrategyActionType","CheckoutActionType","standard_error_StandardError","StandardError","message","_newTarget","setPrototypeOf","__proto__","Error","captureStackTrace","stack","external_tslib_","CouponActionType","BillingAddressActionType","OrderActionType","PaymentMethodActionType","CheckoutButtonActionType","GiftCertificateActionType","InstrumentActionType","EmbeddedCheckoutEventType","RemoteCheckoutActionType","DEFAULT_RESPONSE","body","headers","status","RequestError","response","_a","_b","errors","_c","ConfigActionType","CountryActionType","ShippingCountryActionType","ACKNOWLEDGE","FINALIZE","ContentType","SpamProtectionActionType","PaymentActionType","InvalidArgumentError","HOSTED","OFFLINE","isIframeEvent","isEqual","objectA","objectB","options","Array","isArray","length","index","length_1","isArrayEqual","Date","getTime","isDateEqual","RegExp","toString","isRegExpEqual","filter","keyFilter","keysA","keys","keysB","length_2","isObjectEqual","_common_url__WEBPACK_IMPORTED_MODULE_0__","IframeEventPoster","targetOrigin","_targetWindow","_targetOrigin","origin","post","event","window","postMessage","setTarget","CustomerActionType","PaymentMethodInvalidError","ErrorActionType","PaymentMethodActionCreator","_requestSender","loadPaymentMethods","rxjs__WEBPACK_IMPORTED_MODULE_2__","observer","next","_bigcommerce_data_store__WEBPACK_IMPORTED_MODULE_1__","_payment_method_actions__WEBPACK_IMPORTED_MODULE_4__","LoadPaymentMethodsRequested","then","meta","deviceSessionId","sessionHash","LoadPaymentMethodsSucceeded","complete","catch","error","LoadPaymentMethodsFailed","loadPaymentMethod","methodId","LoadPaymentMethodRequested","undefined","LoadPaymentMethodSucceeded","LoadPaymentMethodFailed","_common_action__WEBPACK_IMPORTED_MODULE_3__","_common_http_request__WEBPACK_IMPORTED_MODULE_0__","_common_http_request__WEBPACK_IMPORTED_MODULE_1__","PaymentMethodRequestSender","timeout","Accept","JsonV1","X-API-INTERNAL","url","EmbeddedContentEventType","IframeEventListener","sourceOrigin","_sourceOrigin","_common_url__WEBPACK_IMPORTED_MODULE_1__","_isListening","_listeners","listen","addEventListener","_handleMessage","stopListen","removeEventListener","addListener","listener","listeners","push","removeListener","indexOf","splice","trigger","forEach","_is_iframe_event__WEBPACK_IMPORTED_MODULE_3__","data","_common_utility__WEBPACK_IMPORTED_MODULE_2__","mapToInternalLineItems","itemMap","decimalPlaces","idKey","reduce","result","concat","map","item","amountTransformer","amount_transformer","id","imageUrl","amount","amountAfterDiscount","discount","integerAmount","toInteger","integerAmountAfterDiscount","integerDiscount","quantity","sender","recipient","attributes","variantId","mapGiftCertificateToInternalLineItem","map_to_internal_line_item","mapToInternalLineItemType","INTERNAL_USE_ONLY","_is_equal__WEBPACK_IMPORTED_MODULE_0__","CacheKeyResolver","_lastId","_maps","getKey","args","_i","arguments","_resolveMap","apply","parentMaps","cacheKey","usedCount","_generateKey","slice","getUsedCount","isMatched","parentMaps_1","maps","bindDecorator","target","descriptor","bindMethodDecorator","decoratedTarget","class_1","getOwnPropertyNames","getOwnPropertyDescriptor","bindClassDecorator","method","boundMethod","set","CheckoutIncludes","_common_error_errors__WEBPACK_IMPORTED_MODULE_0__","BraintreeScriptLoader","_scriptLoader","_window","loadClient","loadScript","braintree","client","load3DS","threeDSecure","loadDataCollector","dataCollector","loadPaypal","paypal","loadPaypalCheckout","paypalCheckout","loadVisaCheckout","visaCheckout","loadGooglePayment","googlePayment","BraintreeSDKCreator","_braintreeScriptLoader","_dataCollectors","initialize","clientToken","_clientToken","getClient","_common_error_errors__WEBPACK_IMPORTED_MODULE_1__","PaymentNotInitialized","_client","authorization","getPaypal","_paypal","Promise","all","getPaypalCheckout","_paypalCheckout","get3DS","_3ds","getDataCollector","cached","kount","code","deviceData","teardown","resolve","getVisaCheckout","_visaCheckout","getGooglePaymentComponent","_googlePay","_teardown","default","mod","mapToInternalLineItem","_common_utility__WEBPACK_IMPORTED_MODULE_0__","extendedListPrice","extendedSalePrice","discountAmount","downloadsPageUrl","downloadPageUrl","brand","categoryNames","productId","option","addedByPromotion","isPrivate","NotInitializedErrorType","NotInitializedError","CustomerNotInitialized","ShippingNotInitialized","SpamProtectionNotInitialized","throwErrorAction","_bigcommerce_data_store__WEBPACK_IMPORTED_MODULE_0__","rxjs__WEBPACK_IMPORTED_MODULE_1__","action","payload","AmountTransformer","_decimalPlaces","Math","round","pow","parseUrl","_error_errors__WEBPACK_IMPORTED_MODULE_0__","test","anchor","document","createElement","href","hash","hostname","pathname","port","protocol","search","cachableActionDecorator","memoizedMethods","WeakMap","decorateMethod","param","lastArg","useCache","fn","resolver","instanceMethods","cache_key_resolver","external_lodash_","external_rxjs_","pipe","operators_","store","omitDeep","lodash__WEBPACK_IMPORTED_MODULE_0__","predicate","CheckoutActionCreator","_checkoutRequestSender","_configActionCreator","loadCheckout","_checkout_actions__WEBPACK_IMPORTED_MODULE_7__","LoadCheckoutRequested","loadConfig","LoadCheckoutSucceeded","rxjs_operators__WEBPACK_IMPORTED_MODULE_3__","_common_error__WEBPACK_IMPORTED_MODULE_4__","LoadCheckoutFailed","loadDefaultCheckout","context","getState","config","getContextConfig","checkoutId","_common_error_errors__WEBPACK_IMPORTED_MODULE_5__","updateCheckout","checkout","getCheckout","_common_error_errors__WEBPACK_IMPORTED_MODULE_6__","UpdateCheckoutRequested","UpdateCheckoutSucceeded","UpdateCheckoutFailed","loadCurrentCheckout","ConsignmentActionCreator","_consignmentRequestSender","unassignItemsByAddress","consignment","state","_common_error_errors__WEBPACK_IMPORTED_MODULE_4__","existingConsignment","consignments","getConsignmentByAddress","shippingAddress","lineItems","_removeLineItems","cart","getCart","updateConsignment","deleteConsignment","assignItemsByAddress","_createOrUpdateConsignment","_addLineItems","selectShippingOption","getConsignments","consignmentUpdateBody","shippingOptionId","consignmentMeta","_consignment_actions__WEBPACK_IMPORTED_MODULE_6__","UpdateShippingOptionRequested","UpdateShippingOptionSucceeded","UpdateShippingOptionFailed","loadShippingOptions","LoadShippingOptionsRequested","params","include","_checkout_checkout_params__WEBPACK_IMPORTED_MODULE_3__","AvailableShippingOptions","LoadShippingOptionsSucceeded","LoadShippingOptionsFailed","updateAddress","address","_getConsignmentRequestBody","createConsignments","CreateConsignmentsRequested","CreateConsignmentsSucceeded","CreateConsignmentsFailed","UpdateConsignmentRequested","UpdateConsignmentSucceeded","UpdateConsignmentFailed","consignmentId","DeleteConsignmentRequested","DeleteConsignmentSucceeded","DeleteConsignmentFailed","updateShippingOption","_isUpdateConsignmentRequest","physicalItems","itemId","_hydrateLineItems","lineItemIds","existingItem","sharedItem","find","lineItem","request","DEFAULT_PARAMS","join","ConsignmentRequestSender","put","delete","getCallbackUrl","location","mapToInternalShippingOption","isSelected","description","price","cost","selected","isRecommended","transitTime","UnrecoverableError","request_error","joinErrors","map_from_payment_error_response_joinErrors","RequestErrorFactory","_factoryMethods","register","detail","title","mapFromInternalErrorResponse","mapFromStorefrontErrorResponse","mapFromPaymentErrorResponse","timeout_error","factoryMethod","createError","_getType","_isStorefrontErrorResponseBody","_isInternalErrorResponseBody","internalType","split","errorResponse","storefrontErrorResponse","internalErrorResponse","clearErrorReducer","error_actions","ClearError","isClearErrorAction","omit_deep","DEFAULT_STATE","statuses","billingAddressReducer","data_store_","dataReducer","errorsReducer","statusesReducer","reducer","billing_address_actions","UpdateBillingAddressSucceeded","ContinueAsGuestSucceeded","checkout_actions","order_actions","LoadOrderSucceeded","billingAddress","loadError","UpdateBillingAddressRequested","updateError","UpdateBillingAddressFailed","ContinueAsGuestRequested","continueAsGuestError","ContinueAsGuestFailed","isLoading","isUpdating","isContinuingAsGuest","cart_reducer_DEFAULT_STATE","cartReducer","cart_reducer_dataReducer","cart_reducer_errorsReducer","cart_reducer_statusesReducer","consignment_actions","coupon_actions","ApplyCouponSucceeded","RemoveCouponSucceeded","gift_certificate_actions","ApplyGiftCertificateSucceeded","RemoveGiftCertificateSucceeded","checkout_button_reducer_DEFAULT_STATE","DEFAULT_DATA_STATE","initializedContainers","DEFAULT_ERROR_STATE","DEFAULT_STATUS_STATE","checkoutButtonReducer","checkout_button_reducer_dataReducer","checkout_button_reducer_errorsReducer","checkout_button_reducer_statusesReducer","checkout_button_actions","InitializeButtonSucceeded","containerId","DeinitializeButtonSucceeded","InitializeButtonRequested","initializeError","InitializeButtonFailed","DeinitializeButtonRequested","deinitializeError","DeinitializeButtonFailed","isInitializing","isDeinitializing","config_reducer_DEFAULT_STATE","configReducer","config_reducer_dataReducer","config_reducer_errorsReducer","config_reducer_statusesReducer","config_actions","LoadConfigSucceeded","LoadConfigFailed","LoadConfigRequested","coupon_reducer_DEFAULT_STATE","couponReducer","coupon_reducer_dataReducer","coupon_reducer_errorsReducer","coupon_reducer_statusesReducer","coupons","ApplyCouponRequested","applyCouponError","ApplyCouponFailed","RemoveCouponRequested","removeCouponError","RemoveCouponFailed","isApplyingCoupon","isRemovingCoupon","gift_certificate_reducer_DEFAULT_STATE","giftCertificateReducer","gift_certificate_reducer_dataReducer","gift_certificate_reducer_errorsReducer","gift_certificate_reducer_statusesReducer","giftCertificates","ApplyGiftCertificateRequested","applyGiftCertificateError","ApplyGiftCertificateFailed","RemoveGiftCertificateRequested","removeGiftCertificateError","RemoveGiftCertificateFailed","isApplyingGiftCertificate","isRemovingGiftCertificate","customer_reducer_DEFAULT_STATE","customerReducer","customer_reducer_dataReducer","customer","customer_strategy_state_DEFAULT_STATE","customerStrategyReducer","customer_strategy_reducer_dataReducer","customer_strategy_reducer_errorsReducer","customer_strategy_reducer_statusesReducer","customer_strategy_actions","InitializeSucceeded","isInitialized","DeinitializeSucceeded","InitializeRequested","initializeMethodId","InitializeFailed","DeinitializeRequested","deinitializeMethodId","DeinitializeFailed","SignInRequested","SignInSucceeded","signInError","signInMethodId","SignInFailed","SignOutRequested","SignOutSucceeded","signOutError","signOutMethodId","SignOutFailed","WidgetInteractionStarted","WidgetInteractionFinished","widgetInteractionError","widgetInteractionMethodId","WidgetInteractionFailed","isSigningIn","isSigningOut","isWidgetInteracting","country_reducer_DEFAULT_STATE","countryReducer","country_reducer_dataReducer","country_reducer_errorsReducer","country_reducer_statusesReducer","country_actions","LoadCountriesSucceeded","LoadCountriesRequested","LoadCountriesFailed","order_reducer_DEFAULT_STATE","orderReducer","order_reducer_dataReducer","order_reducer_errorsReducer","metaReducer","order_reducer_statusesReducer","LoadOrderPaymentsSucceeded","FinalizeOrderSucceeded","SubmitOrderSucceeded","callbackUrl","order","orderToken","token","payment","spam_protection_actions","Completed","spamProtectionToken","LoadOrderRequested","LoadOrderPaymentsRequested","LoadOrderFailed","LoadOrderPaymentsFailed","paymentReducer","payment_reducer_dataReducer","payment_actions","SubmitPaymentSucceeded","payment_method_reducer_DEFAULT_STATE","paymentMethodReducer","payment_method_reducer_dataReducer","payment_method_reducer_errorsReducer","payment_method_reducer_metaReducer","payment_method_reducer_statusesReducer","payment_method_actions","array","gateway","newArray","loadMethodId","loadMethodError","isLoadingMethod","payment_strategy_state_DEFAULT_STATE","paymentStrategyReducer","payment_strategy_reducer_dataReducer","payment_strategy_reducer_errorsReducer","payment_strategy_reducer_statusesReducer","payment_strategy_actions","ExecuteRequested","ExecuteSucceeded","executeError","executeMethodId","ExecuteFailed","FinalizeRequested","FinalizeSucceeded","finalizeError","finalizeMethodId","FinalizeFailed","isExecuting","isFinalizing","instrument_reducer_DEFAULT_STATE","instrumentReducer","instrument_reducer_dataReducer","instrument_reducer_errorsReducer","instrument_reducer_metaReducer","instrument_reducer_statusesReducer","instrument_actions","LoadInstrumentsSucceeded","vaultedInstruments","DeleteInstrumentSucceeded","instrument","bigpayToken","instrumentId","LoadInstrumentsRequested","DeleteInstrumentRequested","deleteError","failedInstrument","LoadInstrumentsFailed","DeleteInstrumentFailed","isDeleting","deletingInstrument","remote_checkout_reducer_DEFAULT_STATE","remoteCheckoutReducer","remote_checkout_reducer_dataReducer","remote_checkout_actions","InitializeRemoteBillingSucceeded","billing","InitializeRemoteShippingSucceeded","shipping","LoadRemoteSettingsSucceeded","settings","UpdateRemoteCheckout","consignment_reducer_DEFAULT_STATE","updateShippingOptionError","isUpdatingShippingOption","consignmentReducer","consignment_reducer_dataReducer","consignment_reducer_errorsReducer","consignment_reducer_statusesReducer","customer_actions","SignOutCustomerSucceeded","_d","_e","_f","isLoadingShippingOptions","isCreating","shipping_country_reducer_DEFAULT_STATE","shippingCountryReducer","shipping_country_reducer_dataReducer","shipping_country_reducer_errorsReducer","shipping_country_reducer_statusesReducer","shipping_country_actions","LoadShippingCountriesSucceeded","LoadShippingCountriesRequested","LoadShippingCountriesFailed","shipping_strategy_state_DEFAULT_STATE","shippingStrategyReducer","shipping_strategy_reducer_dataReducer","shipping_strategy_reducer_errorsReducer","shipping_strategy_reducer_statusesReducer","shipping_strategy_actions","UpdateAddressRequested","UpdateAddressSucceeded","updateAddressError","updateAddressMethodId","UpdateAddressFailed","SelectOptionRequested","SelectOptionSucceeded","selectOptionError","selectOptionMethodId","SelectOptionFailed","isUpdatingAddress","isSelectingOption","checkout_reducer_DEFAULT_STATE","checkoutReducer","checkout_reducer_dataReducer","checkout_reducer_errorsReducer","checkout_reducer_statusesReducer","orderId","billing_address_selector","BillingAddressSelector","_billingAddress","getBillingAddress","getUpdateError","getContinueAsGuestError","getLoadError","selector_decorator","cart_selector","CartSelector","_cart","checkout_button_selector","CheckoutButtonSelector","_checkoutButton","getInitializeError","getDeinitializeError","createFreezeProxy","trap","proxy","iteratee","getPrototypeOf","traversePrototypeOf","charAt","createProxy","FormFieldFieldType","FormFieldType","config_selector","ConfigSelector","_config","getConfig","getStoreConfig","storeConfig","getExternalSource","externalSource","coupon_selector","CouponSelector","_coupon","getCoupons","getRemoveError","getApplyError","isApplying","isRemoving","gift_certificate_selector","GiftCertificateSelector","_giftCertificate","getGiftCertificates","customer_selector","CustomerSelector","_customer","getCustomer","CustomerStrategySelector","_customerStrategies","getSignInError","getSignOutError","getWidgetInteractionError","form_selector","FormSelector","getShippingAddressFields","countries","countryCode","selectedCountry","formFields","shippingAddressFields","field","_processField","getBillingAddressFields","billingAddressFields","_processCountry","_processProvince","_processsPostCode","country","items","label","fieldType","dropdown","itemtype","subdivisions","required","hasPostalCodes","Boolean","country_selector","CountrySelector","_countries","getCountries","order_selector","OrderSelector","_order","_coupons","getOrder","getOrderMeta","payment_method_selector","PaymentMethodSelector","_paymentMethods","getPaymentMethods","getPaymentMethodsMeta","getPaymentMethod","gatewayId","getLoadMethodError","payment_strategy_selector","PaymentStrategySelector","_paymentStrategies","getExecuteError","getFinalizeError","getWidgetInteractingError","payment_selector","PaymentSelector","_checkout","getPaymentId","internalPayment","_getInternalPayment","providerId","_getHostedPayment","_getGatewayPayment","getPaymentStatus","replace","step","getPaymentToken","getPaymentRedirectUrl","redirectUrl","isPaymentDataRequired","useStoreCredit","grandTotal","getGrandTotal","isPaymentDataSubmitted","paymentMethod","nonce","payment_status_types","payments","providerType","payment_method_types","InstrumentSelector","_instruments","getInstruments","getInstrumentsMeta","getDeleteError","remote_checkout_selector","RemoteCheckoutSelector","_remoteCheckout","shipping_address_selector","ShippingAddressSelector","_consignments","getShippingAddress","shipping_country_selector","ShippingCountrySelector","_shippingCountries","getShippingCountries","shipping_strategy_selector","ShippingStrategySelector","_shippingStrategies","getUpdateAddressError","getSelectOptionError","normalize","firstName","lastName","company","address1","address2","city","stateOrProvince","postalCode","phone","customFields","consignment_selector","ConsignmentSelector","getConsignmentById","addressA","addressB","getShippingOption","selectedShippingOption","getCreateError","getLoadShippingOptionsError","loadShippingOptionsError","getUnassignedItems","assignedLineItemIds","itemIds","getItemAssignmentError","getUpdateShippingOptionError","isAssigningItems","checkout_selector","CheckoutSelector","_giftCertificates","storeCredit","max","createInternalCheckoutSelectors","checkoutButton","customerStrategies","customer_strategy_selector","form","instruments","instrument_selector","paymentMethods","paymentStrategies","remoteCheckout","shippingCountries","shippingStrategies","selectors","shouldWarnMutation","createCheckoutStore","initialState","requestErrorFactory","factory","actionTransformer","request_error_factory","unrecoverable_error","payment_method_invalid_error","action$","every","stateTransformer","CheckoutNotAvailableError","checkout_request_sender_CheckoutRequestSender","CheckoutRequestSender","content_type","join_includes","checkout_default_includes","checkout_not_available_error","mapToInternalCoupon","couponTypes","coupon","displayName","discountType","couponType","mapToInternalAddress","addressId","isBillingAddressLike","addressLine1","addressLine2","province","provinceCode","stateOrProvinceCode","postCode","checkout_button_error_selector","CheckoutButtonErrorSelector","getInitializeButtonError","getDeinitializeButtonError","checkout_button_status_selector","CheckoutButtonStatusSelector","isInitializingButton","isDeinitializingButton","createCheckoutButtonSelectors","CheckoutButtonMethodType","CheckoutButtonInitializer","_store","_buttonStrategyActionCreator","_state","subscribe","subscriber","filters","initializeButton","containerIds","selector","idPrefix","containers","querySelectorAll","invalid_argument_error","container","setUniqueElementId","queueId","dispatch","deinitializeButton","deinitialize","CheckoutButtonStrategyActionCreator","_registry","_paymentMethodActionCreator","throw_error_action","checkout_button_method_type","BraintreePaypalButtonStrategy","_checkoutActionCreator","_braintreeSDKCreator","_paypalScriptLoader","_formPoster","_offerCredit","paypalOptions","braintreepaypalcredit","braintreepaypal","_paymentMethod","missing_data_error","allowedSources","disallowedSources","allowCredit","FUNDING","CREDIT","Button","render","env","testMode","commit","shouldProcessPayment","funding","allowed","disallowed","style","shape","_setupPayment","onPaymentError","onAuthorize","_tokenizePayment","onAuthorizeError","onError","addresses","not_initialized_error","CheckoutButtonNotInitialized","createPayment","flow","enableShippingAddress","shippingAddressEditable","shippingAddressOverride","_mapToBraintreeAddress","currency","offerCredit","tokenizePayment","postForm","payment_type","provider","device_data","shipping_address","JSON","stringify","_mapToLegacyShippingAddress","billing_address","_mapToLegacyBillingAddress","details","recipientName","email","first_name","last_name","phone_number","address_line_1","line1","address_line_2","line2","country_code","postal_code","googlepay_button_strategy","GooglePayButtonStrategy","_googlePayPaymentProcessor","_methodId","_getMethodId","_walletButton","_createSignInButton","parentNode","removeChild","getElementById","googlePayButton","createButton","_handleWalletButtonClick","appendChild","preventDefault","displayWallet","paymentData","handleSuccess","updateShippingAddress","_onPaymentSelectComplete","_onError","Content-Type","bind_decorator","masterpass_button_strategy","MasterpassButtonStrategy","_masterpassScriptLoader","initializationData","load","masterpass","_masterpassClient","_signInButton","buttonContainer","button","src","_createMasterpassPayload","allowedCardTypes","cartAmount","cartId","suppressShippingAddress","get_callback_url","PaypalButtonStrategy","_host","merchantId","clientId","actions","internal_api_headers","res","paymentID","payerID","paymentId","payerId","payerInfo","payer","payer_info","createCheckoutButtonInitializer","host","create_checkout_store","requestSender","request_sender_","formPoster","form_poster_","checkout_button_initializer","checkout_button_strategy_action_creator","registry","registry_registry","scriptLoader","script_loader_","checkoutActionCreator","checkout_action_creator","checkout_request_sender","config_action_creator","config_request_sender","BRAINTREE_PAYPAL","braintree_paypal_button_strategy","braintree_sdk_creator","braintree_script_loader","paypal_script_loader","BRAINTREE_PAYPAL_CREDIT","MASTERPASS","masterpass_script_loader","GOOGLEPAY_BRAINTREE","create_googlepay_payment_processor","googlepay_braintree_initializer","GOOGLEPAY_STRIPE","googlepay_stripe_initializer","PAYPALEXPRESS","paypal_button_strategy","createCheckoutButtonRegistry","payment_method_action_creator","payment_method_request_sender","NotEmbeddableErrorType","BrowserStorage","_namespace","getItem","rawValue","external_local_storage_fallback_default","a","withNamespace","parse","removeItem","getItemOnce","setItem","InvalidLoginTokenError","NotEmbeddableError","UnknownError","standard_error","EmbeddedCheckout","_iframeCreator","_messageListener","_messagePoster","_loadingIndicator","_storage","_location","_options","_isAttached","onComplete","embedded_checkout_events","CheckoutComplete","CheckoutError","onLoad","CheckoutLoaded","onFrameLoad","FrameLoaded","onSignOut","SignedOut","_configureStyles","attach","show","_allowCookie","_attemptLogin","createFrame","iframe","_iframe","hide","_retryAllowCookie","FrameError","detach","iFrameResizer","close","contentWindow","styles","embedded_content_events","StyleConfigured","parse_url","reject","invalid_login_token_error","encodeURIComponent","visibility","not_embeddable_error","MissingContent","DEFAULT_STYLES","size","color","backgroundColor","ROTATION_ANIMATION","LoadingIndicator","_styles","_defineAnimation","_container","_buildContainer","_indicator","_buildIndicator","parentId","parent_1","opacity","handleTransitionEnd","display","bottom","left","height","width","position","right","top","transition","indicator","borderRadius","border","borderColor","margin","transform","transformStyle","animation","head","sheet","CSSStyleSheet","insertRule","ResizableIframeCreator","MissingContainer","allowPaymentRequest","_toResizableFrame","timeoutInterval","setTimeout","handleMessage","is_iframe_event","contentId","iframes","external_iframe_resizer_","scrolling","sizeWidth","heightCalculationMethod","clearTimeout","embedCheckout","STORAGE_PREFIX","embedded_checkout","resizable_iframe_creator","iframe_event_listener","iframe_event_poster","loading_indicator","loadingIndicator","browser_storage","TimeoutError","selectorDecorator","_utility__WEBPACK_IMPORTED_MODULE_2__","memoizedMethod","lodash__WEBPACK_IMPORTED_MODULE_1__","_utility__WEBPACK_IMPORTED_MODULE_3__","cachedValue","newValue","_utility__WEBPACK_IMPORTED_MODULE_4__","_utility__WEBPACK_IMPORTED_MODULE_5__","cache","selectorMethodDecorator","joinIncludes","includes","ConfigActionCreator","_configRequestSender","_config_actions__WEBPACK_IMPORTED_MODULE_4__","ConfigRequestSender","BillingAddressActionCreator","continueAsGuest","credentials","_common_error_errors__WEBPACK_IMPORTED_MODULE_3__","isGuest","billingAddressRequestBody","existingBillingAddressRequestBody","_billing_address_actions__WEBPACK_IMPORTED_MODULE_5__","_createOrUpdateBillingAddress","createAddress","BillingAddressRequestSender","Registry","_factories","_instances","defaultToken","cacheToken","_getInstance","_hasFactory","_error_errors__WEBPACK_IMPORTED_MODULE_1__","_hasInstance","MasterpassScriptLoader","RemoteCheckoutSynchronizationError","GooglePayBraintreeInitializer","hasShippingAddress","googleBraintreePaymentInstance","_googlePaymentInstance","_createGooglePayPayload","parseResponse","paymentMethodData","tokenizationData","androidPayCards","cardType","lastFour","lastTwo","binData","platformToken","googlePayBraintreePaymentDataRequest","merchantInfo","authJwt","merchantName","googleMerchantName","googleMerchantId","transactionInfo","currencyCode","totalPriceStatus","totalPrice","toFixed","cardRequirements","billingAddressRequired","billingAddressFormat","shippingAddressRequired","emailRequired","phoneNumberRequired","_mapGooglePayBraintreeDataRequestToGooglePayDataRequestV2","createPaymentDataRequest","googlePayBraintreeDataRequestV1","apiVersion","apiVersionMinor","allowedPaymentMethods","parameters","allowedAuthMethods","allowedCardNetworks","billingAddressParameters","format","tokenizationSpecification","braintree:apiVersion","braintree:authorizationFingerprint","paymentMethodTokenizationParameters","braintree:merchantId","braintree:sdkVersion","shippingAddressParameters","GooglePayStripeInitializer","_mapGooglePayStripeDataRequestToGooglePayDataRequestV2","card","last4","err","stripe:version","stripeVersion","stripe:publishableKey","stripePublishableKey","mapToInternalCustomer","_address__WEBPACK_IMPORTED_MODULE_0__","customerId","fullName","mapToInternalGiftCertificate","giftCertificate","discountedAmount","used","remainingBalance","remaining","balance","purchaseDate","mapToInternalOrder","_cart__WEBPACK_IMPORTED_MODULE_1__","_coupon__WEBPACK_IMPORTED_MODULE_3__","orderMeta","customerCanBeCreated","mapToInternalOrderPayment","subtotal","baseAmount","sum","discountNotifications","totalDiscountedAmount","appliedGiftCertificates","socialData","mapToInternalSocialDataList","hasDigitalItems","isDownloadable","isComplete","shippingCostTotal","amountBeforeDiscount","shippingCostBeforeDiscount","integerAmountBeforeDiscount","mapToStoreCredit","taxes","taxTotal","handling","handlingCostTotal","orderAmount","orderAmountAsInteger","mapToInternalPaymentStatus","isDefaultOrderPayment","helpText","instructions","returnUrl","socialDataObject","digitalItems","socialMedia","image","link","shareText","text","sharingLink","channelName","channel","channelCode","PaypalScriptLoader","ErrorActionCreator","clearError","getEnvironment","process","NODE_ENV","e","ConsoleLogger","_console","log","messages","_logToConsole","info","warn","debug","NoopLogger","isEnabled","logger","console_logger","console","noop_logger","getDefaultLogger","CouponActionCreator","_couponRequestSender","applyCoupon","removeCoupon","CouponRequestSender","couponCode","checkout_params","GiftCertificateActionCreator","_giftCertificateRequestSender","applyGiftCertificate","removeGiftCertificate","GiftCertificateRequestSender","giftCertificateCode","CustomerStrategyActionCreator","_strategyRegistry","signIn","signOut","widgetInteraction","AmazonPayScriptLoader","loadWidget","onPaymentReady","region","toLowerCase","_configureWidget","onLoginReady","amazon","Login","setClientId","setUseCookie","onAmazonLoginReady","OffAmazonPayments","onAmazonPaymentsReady","BraintreeVisaCheckoutPaymentProcessor","createInitOptions","locale","collectShipping","paymentRequest","String","braintreeVisaCheckout","tokenize","tokenizedPayload","_toVisaCheckoutAddress","_postForm","userData","cardInformation","userEmail","card_information","_getCardInformation","_getAddress","phoneNumber","streetAddress","extendedAddress","locality","number","createBraintreeVisaCheckoutPaymentProcessor","braintreeScriptLoader","braintreeSDKCreator","braintree_visacheckout_payment_processor","VisaCheckoutScriptLoader","V","ChasePayScriptLoader","JPMC","RemoteCheckoutRequestSender","initializeBilling","methodName","initializeShipping","initializePayment","loadSettings","generateToken","trackAuthorizationEvent","RemoteCheckoutActionCreator","_remoteCheckoutRequestSender","InitializeRemoteBillingRequested","InitializeRemoteBillingFailed","InitializeRemoteShippingRequested","InitializeRemoteShippingFailed","InitializeRemotePaymentRequested","InitializeRemotePaymentSucceeded","InitializeRemotePaymentFailed","LoadRemoteSettingsRequested","LoadRemoteSettingsFailed","SignOutRemoteCustomerRequested","SignOutRemoteCustomerSucceeded","SignOutRemoteCustomerFailed","CustomerActionCreator","_customerRequestSender","signInCustomer","SignInCustomerRequested","SignInCustomerSucceeded","SignInCustomerFailed","signOutCustomer","SignOutCustomerRequested","SignOutCustomerFailed","CustomerRequestSender","NotImplementedError","AmazonPayCustomerStrategy","_remoteCheckoutActionCreator","amazonOptions","not_implemented_error","useAmazonAddressBook","_handleAuthorization","authorize","popup","scope","tokenPrefix","BraintreeVisaCheckoutCustomerStrategy","_customerStrategyActionCreator","_braintreeVisaCheckoutPaymentProcessor","_visaCheckoutScriptLoader","_buttonClassName","visaCheckoutOptions","braintreevisacheckout","initOptions","storeProfile","storeLanguage","signInButton","init","on","paymentSuccessPayload","_paymentInstrumentSelected","buttonClass","querySelector","_insertVisaCheckoutButton","visaCheckoutButton","className","innerHTML","ChasePayCustomerStrategy","_chasePayScriptLoader","chasePayOptions","chasepay","digitalSessionId","ChasePay","configure","language","isChasePayUp","insertButtons","EventType","START_CHECKOUT","sessionId","startCheckout","COMPLETE_CHECKOUT","requestId","merchantRequestId","_setExternalCheckoutData","_reloadPage","sessionToken","sendRequest","fromChasePay","DefaultCustomerStrategy","_customerActionCreator","googlepay_customer_strategy","GooglePayCustomerStrategy","googlePayOptions","_getGooglePayOptions","googlepaybraintree","googlepaystripe","MasterpassCustomerStrategy","masterpassOptions","Masterpass","SquareCustomerStrategy","CountryActionCreator","_countryRequestSender","loadCountries","CountryRequestSender","Accept-Language","OrderRequestSender","loadOrder","submitOrder","finalizeOrder","OrderActionCreator","_orderRequestSender","_checkoutValidator","_spamProtectionActionCreator","loadOrderPayments","loadCurrentOrder","_getCurrentOrderId","SubmitOrderRequested","_executeSpamProtection","checkoutSettings","isSpamProtectionEnabled","validate","_mapToOrderRequestBody","customerMessage","SubmitOrderFailed","FinalizeOrderRequested","FinalizeOrderFailed","execute","MutationObserverFactory","callback","MutationObserver","SpamProtectionFailedError","SpamProtectionNotCompletedError","GoogleRecaptcha","googleRecaptchaScriptLoader","mutationObserverFactory","sitekey","event$","_event$","recaptcha","getResponse","error-callback","spam_protection_failed_error","_recaptcha","_watchRecaptchaChallengeWindow","iframeElement","iframeContainer","parentElement","spam_protection_not_completed_error","observe","attributeFilter","GoogleRecaptchaScriptLoader","_loadPromise","_loadScript","grecaptcha","SpamProtectionActionCreator","_googleRecaptcha","recaptchaSitekey","googleRecaptchaSitekey","SubmitFailed","PaymentStrategyType","OrderFinalizationNotRequiredError","payment_strategy_type","PaymentStrategyActionCreator","_orderActionCreator","strategy","getByMethod","NO_PAYMENT_DATA_REQUIRED","finalize","_loadOrderPaymentsIfNeeded","order_finalization_not_required_error","CartComparator","cartA","cartB","_normalize","sort","itemA","itemB","localeCompare","giftWrapping","CartChangedError","CheckoutValidator","comparator","cart_comparator","_compareCoupons","_compareGiftCertificates","cart_changed_error","couponsA","couponsB","giftCertificatesA","giftCertificatesB","isVaultedInstrument","OrderIncludes","PaymentActionCreator","_paymentRequestSender","submitPayment","SubmitPaymentRequested","_getPaymentRequestBody","SubmitPaymentFailed","initializeOffsitePayment","InitializeOffsitePaymentRequested","InitializeOffsitePaymentSucceeded","InitializeOffsitePaymentFailed","_getPaymentMethod","shippingOption","contextConfig","instrumentMeta","paymentMeta","internalCustomer","map_to_internal_customer","authToken","vaultAccessToken","map_to_internal_address","map_to_internal_shipping_option","map_to_internal_cart","map_to_internal_order","quoteMeta","geoCountryCode","source","paymentMethodSelector","PaymentRequestSender","_transformResponse","statusText","PaymentStrategyRegistry","_getToken","_hasFactoryForMethod","_isLegacyMethod","LEGACY","OFFSITE","CREDIT_CARD","clientSidePaymentProviders","paymentSettings","PaymentArgumentInvalidError","invalidFields","PaymentMethodCancelledError","AffirmPaymentStrategy","_paymentActionCreator","_affirmScriptLoader","publicKey","affirm","_affirm","payment_argument_invalid_error","requestOptions","PhysicalItemsCategories","DigitalItemsCategories","_getCheckoutInformation","open","onFail","failObject","reason","payment_method_cancelled_error","onSuccess","successObject","ui","paymentPayload","checkout_token","_getBillingAddress","merchant","user_confirmation_url","links","checkoutLink","user_cancel_url","user_confirmation_url_action","_getShippingAddress","_getItems","metadata","shipping_type","_getShippingType","platform_type","platform_version","platform_affirm","discounts","_getDiscounts","order_id","shipping_amount","tax_amount","total","first","last","full","zipcode","display_name","sku","unit_price","salePrice","qty","item_image_url","item_url","categories","_getCategories","customItems","_g","listPrice","line","discount_amount","discount_display_name","DISCOUNTED_AMOUNT","categoryTree","category","affirmJs","Function","AffirmScriptLoader","apikey","scriptURI","_getScriptURI","AfterpayPaymentStrategy","_afterpayScriptLoader","storeCountryName","storeCountry","_mapCountryToISO2","afterpaySdk","_afterpaySdk","_redirectToAfterpay","afterpay","orderPayload","countryName","redirect","SCRIPTS_DEFAULT","SCRIPTS_US","AfterpayScriptLoader","AfterPay","isInternalAddressEqual","ignoredKeys","is_private","mapFromInternalAddress","AmazonPayPaymentStrategy","_billingAddressActionCreator","_walletOptions","_createWallet","referenceId","_getOrderReferenceId","_getMerchantId","onPaymentSelect","onReady","walletOptions","amazonOrderReferenceId","design","designMode","sellerId","orderReference","_synchronizeBillingAddress","_updateOrderReference","widget","Widgets","Wallet","remote_checkout_synchronization_error","remoteAddress","internalBillingAddress","getAmazonOrderReferenceId","Overlay","_element","_createElement","_registerClick","remove","_unregisterClick","_removeAfterTransition","element","background","transitionDuration","zIndex","onClick","onClick_1","handeTransition","propertyName","promise","cancellable","cancel","race","BraintreePaymentProcessor","_overlay","_threeDSecureOptions","preloadPaypal","tokenizeCard","requestData","_mapToCreditCard","creditCards","focusWindow","useraction","verifyCard","addFrame","removeFrame","cancelVerifyCard","verification","cancellable_promise","appendSessionId","processedPayment","creditCard","cardholderName","ccName","ccNumber","cvv","ccCvv","expirationDate","ccExpiry","month","year","endpoint","BraintreeCreditCardPaymentStrategy","_braintreePaymentProcessor","_is3dsEnabled","is3dsEnabled","_handleError","orderRequest","_preparePaymentData","_isUsingVaulting","shouldSaveInstrument","tokenizedCard","ChasePayEventType","BraintreePaypalPaymentStrategy","_credit","braintreeOptions","isBraintreeError","BraintreeVisaCheckoutPaymentStrategy","_paymentStrategyActionCreator","visaInitOptions","CardinalInitializationType","CardinalEventType","CardinalValidatedAction","CardinalPaymentType","CardinalTriggerEvents","CardinalPaymentBrand","chasepay_payment_strategy","ChasePayPaymentStrategy","_wepayRiskClient","_walletEvent$","walletButton","_configureWallet","_chasePayClient","_getPayment","_displayWallet","_createOrder","logoContainer","insertBrandings","CancelCheckout","onCancel","CompleteCheckout","_setSessionToken","showLoadingAnimation","getRiskToken","riskToken","paymentCryptogram","cryptogramId","eci","transactionId","btoa","reqTokenId","expDate","substr","accountNum","accountMask","extraData","ConvergePaymentStrategy","three_ds_result","acs_url","PaReq","payer_auth_request","TermUrl","callback_url","MD","merchant_data","CreditCardPaymentStrategy","CyberSourcePaymentStrategy","_cardinalClient","_placeOrderUsing3DS","_placeOrder","runBindProcess","getThreeDSecureData","_getOrderData","CardinalSignatureValidationErrors","CardBrand","DigitalWalletType","CardinalClient","_sdk","_getClientSDK","SetupCompleted","off","Validated","ActionCode","ErrorNumber","setup","Init","jwt","BinProcess","Status","threeDSecureData","orderData","Success","NoAction","ErrorDescription","Failure","continueObject","AcsUrl","Payload","partialOrder","_mapToPartialOrder","continue","CCA","consumer","BillingAddress","_mapToCardinalAddress","Account","_mapToCardinalAccount","Email1","ShippingAddress","Consumer","OrderDetails","OrderNumber","Amount","CurrencyCode","OrderChannel","TransactionId","AccountNumber","Number","ExpirationMonth","ExpirationYear","NameOnAccount","CardCode","cardinalAddress","FirstName","LastName","Address1","City","State","PostalCode","CountryCode","Address2","Phone1","CardinalScriptLoader","Cardinal","googlepay_payment_strategy","GooglePayPaymentStrategy","_googlePayOptions","statusCode","KlarnaPaymentStrategy","_klarnaScriptLoader","_supportedEUCountries","klarnaCredit","_klarnaCredit","_unsubscribe","_loadWidget","_authorize","authorizationToken","authorization_token","klarna","client_token","_getUpdateSessionData","_mapToKlarnaAddress","klarnaAddress","street_address","given_name","family_name","street_address2","updateSessionData","approved","show_form","KlarnaScriptLoader","Klarna","Credit","LegacyPaymentStrategy","masterpass_payment_strategy","MasterpassPaymentStrategy","NoPaymentDataRequiredPaymentStrategy","OfflinePaymentStrategy","OffsitePaymentStrategy","_shouldSubmitFullPayload","PaypalProPaymentStrategy","_isPaymentAcknowledged","PaypalExpressPaymentStrategy","_useRedirectFlow","paypalexpress","useRedirectFlow","_isInContextEnabled","_paypalSdk","environment","closeFlow","_isAcknowledgedOrFinalized","initXO","startFlow","SagePayPaymentStrategy","UnsupportedBrowserError","SquarePaymentStrategy","_syncPaymentMethod","createSquareForm","_paymentForm","_getFormOptions","build","_getNonceInstrument","_getCountryCode","toUpperCase","_deferredRequestNonce","requestCardNonce","deferred","squareOptions","square","_squareOptions","callbacks","cardNonceResponseReceived","cardData","billingContact","shippingContact","digital_wallet_type","none","_handleWalletNonceResponse","_handleCardNonceResponse","createPaymentRequest","_paymentRequestPayload","methodsSupported","methods","_showPaymentMethods","paymentFormLoaded","_setPostalCode","unsupportedBrowserDetected","unsupported_browser_error","requestShippingAddress","requestBillingInfo","storeName","pending","setPostalCode","masterpassBtn","elementId","SquareScriptLoader","SqPaymentForm","StripeV3PaymentStrategy","_stripeScriptLoader","stripeOptions","stripev3","stripeJs","_stripeV3Client","cardElement","elements","mount","_cardElement","_getStripeJs","handleCardPayment","_mapStripeCardPaymentOptions","stripeResponse","paymentIntent","unmount","_mapStripeBillingAddress","_mapStripeShippingAddress","_mapStripeBillingDetails","stripeBillingDetails","_mapStripeShippingDetails","stripeShippingDetails","_getCustomer","payment_method_data","billing_details","shippingDetails","receipt_email","StripeV3ScriptLoader","publishableKey","Stripe","betas","WepayRiskClient","_riskClient","WePay","risk","generate_risk_token","get_risk_token","WepayPaymentStrategy","orderActionCreator","paymentActionCreator","payloadWithToken","credit_card_payment_strategy","PaymentMethodDeclinedError","ZipPaymentStrategy","_zipScriptLoader","zip","_zipClient","zipClient","Checkout","_prepareForReferredRegistration","payment_method_declined_error","onCheckout","openModal","externalId","ZipScriptLoader","Zip","createPaymentStrategyRegistry","paymentClient","spamProtection","payment_strategy_registry","billingAddressActionCreator","billing_address_action_creator","billing_address_request_sender","braintreePaymentProcessor","overlay","overlay_overlay","braintree_payment_processor","createBraintreePaymentProcessor","checkoutRequestSender","checkoutValidator","checkout_validator","spamProtectionActionCreator","spam_protection_action_creator","order_action_creator","order_request_sender","payment_action_creator","payment_request_sender","paymentMethodActionCreator","remoteCheckoutActionCreator","remote_checkout_action_creator","remote_checkout_request_sender","configActionCreator","paymentStrategyActionCreator","payment_strategy_action_creator","AFFIRM","affirm_payment_strategy","affirm_script_loader","AFTERPAY","afterpay_payment_strategy","afterpay_script_loader","AMAZON","amazon_pay_payment_strategy","amazon_pay_script_loader","CYBERSOURCE","cybersource_payment_strategy","cardinal_client","cardinal_script_loader","KLARNA","klarna_payment_strategy","klarna_script_loader","legacy_payment_strategy","offline_payment_strategy","offsite_payment_strategy","PAYPAL","paypal_pro_payment_strategy","PAYPAL_EXPRESS","paypal_express_payment_strategy","PAYPAL_EXPRESS_CREDIT","SAGE_PAY","sage_pay_payment_strategy","SQUARE","square_payment_strategy","square_script_loader","no_payment_data_required_strategy","BRAINTREE","braintree_credit_card_payment_strategy","braintree_paypal_payment_strategy","BRAINTREE_VISA_CHECKOUT","braintree_visacheckout_payment_strategy","visacheckout_script_loader","CHASE_PAY","chasepay_script_loader","wepay_risk_client","BRAINTREE_GOOGLE_PAY","WE_PAY","wepay_payment_strategy","STRIPE_GOOGLE_PAY","ZIP","zip_payment_strategy","zip_script_loader","CONVERGE","converge_payment_strategy","STRIPEV3","stripev3_payment_strategy","stripev3_script_loader","InstrumentActionCreator","_instrumentRequestSender","loadInstruments","session","_getSessionContext","_getCurrentAccessToken","_getValidAccessToken","currentToken","deleteInstrument","_isValidVaultAccessToken","date","newDate","valueOf","now","isFuture","vaultAccessExpiry","setMinutes","getMinutes","getVaultAccessToken","storeId","shopperCurrency","isTransactional","InstrumentResponseTransformer","transformResponse","_transformVaultedInstruments","vaulted_instruments","transformErrorResponse","transformVaultAccessResponse","expires_at","bigpay_token","defaultInstrument","default_instrument","iin","last_4","expiryMonth","expiry_month","expiryYear","expiry_year","trustedShippingAddress","trusted_shipping_address","InstrumentRequestSender","_transformer","instrument_response_transformer","requestContext","_loadInstrumentsWithAddress","_loadInstruments","deleteShopperInstrument","loadInstrumentsWithAddress","ShippingCountryActionCreator","_shippingCountryRequestSender","ShippingCountryRequestSender","ShippingStrategyActionCreator","selectOption","mergedOptions","AmazonPayShippingStrategy","_consignmentActionCreator","_createAddressBook","optionId","onAddressSelect","AddressBook","_synchronizeShippingAddress","DefaultShippingStrategy","cloneDecorator","cloneMethodDecorator","cloneClassDecorator","memoizedCloneDeep","checkout_store_selector","CheckoutStoreSelector","_form","_payment","_shippingAddress","getShippingOptions","availableShippingOptions","getSelectedShippingOption","getBillingCountries","getSelectedPaymentMethod","checkout_store_error_selector","CheckoutStoreErrorSelector","getError","getLoadCheckoutError","getSubmitOrderError","getFinalizeOrderError","getLoadOrderError","getLoadCartError","getLoadBillingCountriesError","getLoadShippingCountriesError","getLoadPaymentMethodsError","getLoadPaymentMethodError","getInitializePaymentError","getSelectShippingOptionError","getInitializeCustomerError","getUpdateShippingAddressError","getUpdateBillingAddressError","getUpdateConsignmentError","getCreateConsignmentsError","getDeleteConsignmentError","getInitializeShippingError","getApplyCouponError","getRemoveCouponError","getApplyGiftCertificateError","getRemoveGiftCertificateError","getLoadInstrumentsError","getDeleteInstrumentError","getLoadConfigError","getUpdateCheckoutError","checkout_store_status_selector","CheckoutStoreStatusSelector","isPending","isLoadingCheckout","isSubmittingOrder","isFinalizingOrder","isLoadingOrder","isLoadingCart","isLoadingBillingCountries","isLoadingShippingCountries","isLoadingPaymentMethods","isLoadingPaymentMethod","isInitializingPayment","isSelectingShippingOption","isInitializingCustomer","isUpdatingBillingAddress","isUpdatingShippingAddress","isUpdatingConsignment","isCreatingConsignments","isDeletingConsignment","isInitializingShipping","isLoadingInstruments","isDeletingInstrument","isLoadingConfig","isCustomerStepPending","isPaymentStepPending","isUpdatingCheckout","createCheckoutSelectors","ErrorMessageTransformer","_messageCustomizer","input","trim","CheckoutService","_countryActionCreator","_couponActionCreator","_errorActionCreator","_giftCertificateActionCreator","_instrumentActionCreator","_shippingCountryActionCreator","_shippingStrategyActionCreator","isDevelopment","_errorTransformer","error_message_transformer","isCheckoutServiceError","notifyState","_dispatch","loadCheckoutAction","loadConfigAction","finalizeOrderIfNeeded","deinitializePayment","loadBillingCountries","loadShippingCountries","loadBillingAddressFields","loadShippingAddressFields","initializeCustomer","deinitializeCustomer","deinitializeShipping","assignItemsToAddress","unassignItemsToAddress","selectConsignmentShippingOption","updateBillingAddress","initializeSpamProtection","createCheckoutService","bigpay_client_","setHost","bigpayBaseUrl","createPaymentClient","orderRequestSender","google_recaptcha","google_recaptcha_script_loader","checkout_service","consignment_action_creator","consignment_request_sender","country_action_creator","country_request_sender","coupon_action_creator","coupon_request_sender","customer_strategy_action_creator","remoteCheckoutRequestSender","amazon_pay_customer_strategy","braintree_visacheckout_customer_strategy","chasepay_customer_strategy","square_customer_strategy","masterpass_customer_strategy","default_customer_strategy","customer_action_creator","customer_request_sender","createCustomerStrategyRegistry","error_action_creator","gift_certificate_action_creator","gift_certificate_request_sender","instrument_action_creator","instrument_request_sender","shipping_country_action_creator","shipping_country_request_sender","shipping_strategy_action_creator","consignmentRequestSender","consignmentActionCreator","amazon_pay_shipping_strategy","default_shipping_strategy","createShippingStrategyRegistry","handleFrameLoadedEvent","hasAttribute","setAttribute","isCustomError","IframeEmbeddedCheckoutMessenger","_untargetedMessagePoster","_messageHandlers","postComplete","_postMessage","postError","_transformError","postFrameError","untargeted","postFrameLoaded","postLoaded","postSignedOut","receiveStyles","handler","_notifyMessageHandlers","NoopEmbeddedCheckoutMessenger","createEmbeddedCheckoutMessenger","parentWindow","parent","noop_embedded_checkout_messenger","iframe_embedded_checkout_messenger","parentOrigin","LanguageService","_logger","_transformConfig","locales","translations","_locale","_locales","_translations","_formatters","mapKeys","translationKey","KEY_PREFIX","getLocale","_hasTranslations","translate","prefixedKey","messageFormat","external_messageformat_","compile","_transformData","output","defaultTranslations","_flattenObject","parentKey","resultKey","createLanguageService","language_service","CurrencyFormatter","currencySettings","symbolLocation","symbol","thousandsSeparator","decimalSeparator","parseInt","_symbolLocation","_symbol","_thousandsSeparator","_decimalSeparator","formattedNumber","_formatNumber","formattedCurrency","_formatCurrency","positiveAmount","abs","_toFixed","decimalAmount","parsedIntegerAmount","precision","CurrencyService","_storeConfig","_customerFormatter","currency_formatter","_storeFormatter","toCustomerCurrency","exchangeRate","toStoreCurrency","createCurrencyService","currency_service","create_checkout_button_initializer","embed_checkout","ButtonType","ButtonColor","GooglePayPaymentProcessor","_googlePayScriptLoader","_googlePayInitializer","_consigmentActionCreator","buttonType","buttonColor","Short","Default","_googlePayClient","loadPaymentData","_getPaymentDataRequest","_updateBillingAddress","_mapGooglePayAddressToShippingAddress","googlePay","paymentDataRequest","_getGooglePayClient","_paymentDataRequest","isReadyToPay","google","api","PaymentsClient","_mapGooglePayAddressToBillingAddress","companyName","address3","administrativeArea","postPaymentData","remoteBillingAddress","googlePayAddressMapped","GooglePayScriptLoader","createGooglePayPaymentProcessor","initializer","googlepay_payment_processor","googlepay_script_loader","mapToInternalCart","promotions","notifications","map_to_internal_line_items","map_to_internal_coupon","promotion","banners","banner","placeholders","messageHtml","certificate","map_to_internal_gift_certificate","isShippingRequired","taxSubtotal"],"mappings":"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phC,EAASrrB,SAASstC,GAAoByiB,YAAa,WAC/C,WAAIC,GACAh3D,EACA+1D,EACAvC,EACAC,EACA,IAAIwD,GAAe,IAAIC,GAAqB3kC,OAIpDF,EAASrrB,SAASstC,GAAoB6iB,OAAQ,WAC1C,WAAIC,GACAp3D,EACAwzD,EACAuC,EACAC,EACA,IAAIqB,GAAmB9kC,MAI/BF,EAASrrB,SAASstC,GAAoBiE,OAAQ,WAC1C,WAAI+e,GACAt3D,EACAwzD,KAIRnhC,EAASrrB,SAASstC,GAAoBhlD,QAAS,WAC3C,WAAIioE,GACAv3D,EACAwzD,KAIRnhC,EAASrrB,SAASstC,GAAoBkE,QAAS,WAC3C,WAAIgf,GACAx3D,EACAwzD,EACAC,KAIRphC,EAASrrB,SAASstC,GAAoBmjB,OAAQ,WAC1C,WAAIC,GACA13D,EACAwzD,EACAC,KAIRphC,EAASrrB,SAASstC,GAAoBqjB,eAAgB,WAClD,WAAIC,GACA53D,EACAwzD,EACA,IAAItgC,GAAA,EAAmBX,MAI/BF,EAASrrB,SAASstC,GAAoBujB,sBAAuB,WACzD,WAAID,GACA53D,EACAwzD,EACA,IAAItgC,GAAA,EAAmBX,MAI/BF,EAASrrB,SAASstC,GAAoBwjB,SAAU,WAC5C,WAAIC,GACA/3D,EACAwzD,EACAC,EACAxhC,KAIRI,EAASrrB,SAASstC,GAAoB0jB,OAAQ,WAC1C,WAAIC,GACAj4D,EACAyyB,EACA+gC,EACAC,EACAsC,EACAK,EACArkC,EACA,IAAImmC,GAAmB3lC,MAI/BF,EAASrrB,SAASstC,GAAoBK,yBAA0B,WAC5D,WAAIwjB,GACAn4D,EACAwzD,KAIRnhC,EAASrrB,SAASstC,GAAoB8jB,UAAW,WAC7C,WAAIC,GACAr4D,EACAwzD,EACAC,EACAsC,EACAd,KAIR5iC,EAASrrB,SAASstC,GAAoBxhB,iBAAkB,WACpD,WAAIwlC,GACAt4D,EACAwzD,EACAC,EACAsC,EACAd,KAIR5iC,EAASrrB,SAASstC,GAAoBnhB,wBAAyB,WAC3D,WAAImlC,GACAt4D,EACAwzD,EACAC,EACAsC,EACAd,GAC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","file":"checkout-sdk.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 139);\n","module.exports = require(\"tslib\");","module.exports = require(\"@bigcommerce/data-store\");","module.exports = require(\"lodash\");","module.exports = require(\"rxjs\");","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nimport { ConsignmentMeta } from './consignment';\n\nexport enum ConsignmentActionType {\n    CreateConsignmentsRequested = 'CREATE_CONSIGNMENTS_REQUESTED',\n    CreateConsignmentsSucceeded = 'CREATE_CONSIGNMENTS_SUCCEEDED',\n    CreateConsignmentsFailed = 'CREATE_CONSIGNMENTS_FAILED',\n\n    UpdateConsignmentRequested = 'UPDATE_CONSIGNMENT_REQUESTED',\n    UpdateConsignmentSucceeded = 'UPDATE_CONSIGNMENT_SUCCEEDED',\n    UpdateConsignmentFailed = 'UPDATE_CONSIGNMENT_FAILED',\n\n    DeleteConsignmentRequested = 'DELETE_CONSIGNMENT_REQUESTED',\n    DeleteConsignmentSucceeded = 'DELETE_CONSIGNMENT_SUCCEEDED',\n    DeleteConsignmentFailed = 'DELETE_CONSIGNMENT_FAILED',\n\n    UpdateShippingOptionRequested = 'UPDATE_SHIPPING_OPTION_REQUESTED',\n    UpdateShippingOptionSucceeded = 'UPDATE_SHIPPING_OPTION_SUCCEEDED',\n    UpdateShippingOptionFailed = 'UPDATE_SHIPPING_OPTION_FAILED',\n\n    LoadShippingOptionsRequested = 'LOAD_SHIPPING_OPTIONS_REQUESTED',\n    LoadShippingOptionsSucceeded = 'LOAD_SHIPPING_OPTIONS_SUCCEEDED',\n    LoadShippingOptionsFailed = 'LOAD_SHIPPING_OPTIONS_FAILED',\n}\n\nexport type ConsignmentAction =\n    CreateConsignmentsAction |\n    UpdateConsignmentAction |\n    DeleteConsignmentAction |\n    UpdateShippingOptionAction |\n    LoadShippingOptionsAction;\n\nexport type CreateConsignmentsAction =\n    CreateConsignmentsRequestedAction |\n    CreateConsignmentsSucceededAction |\n    CreateConsignmentsFailedAction;\n\nexport type UpdateConsignmentAction =\n    UpdateConsignmentRequestedAction |\n    UpdateConsignmentSucceededAction |\n    UpdateConsignmentFailedAction;\n\nexport type DeleteConsignmentAction =\n    DeleteConsignmentRequestedAction |\n    DeleteConsignmentSucceededAction |\n    DeleteConsignmentFailedAction;\n\nexport type UpdateShippingOptionAction =\n    UpdateShippingOptionRequestedAction |\n    UpdateShippingOptionSucceededAction |\n    UpdateShippingOptionFailedAction;\n\nexport type LoadShippingOptionsAction =\n    LoadShippingOptionsRequestedAction |\n    LoadShippingOptionsSucceededAction |\n    LoadShippingOptionsFailedAction;\n\nexport interface CreateConsignmentsRequestedAction extends Action {\n    type: ConsignmentActionType.CreateConsignmentsRequested;\n}\n\nexport interface CreateConsignmentsSucceededAction extends Action<Checkout> {\n    type: ConsignmentActionType.CreateConsignmentsSucceeded;\n}\n\nexport interface CreateConsignmentsFailedAction extends Action<Error> {\n    type: ConsignmentActionType.CreateConsignmentsFailed;\n}\n\nexport interface UpdateConsignmentRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentRequested;\n}\n\nexport interface UpdateConsignmentSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentSucceeded;\n}\n\nexport interface UpdateConsignmentFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentFailed;\n}\n\nexport interface DeleteConsignmentRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentRequested;\n}\n\nexport interface DeleteConsignmentSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentSucceeded;\n}\n\nexport interface DeleteConsignmentFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentFailed;\n}\n\nexport interface UpdateShippingOptionRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionRequested;\n}\n\nexport interface UpdateShippingOptionSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionSucceeded;\n}\n\nexport interface UpdateShippingOptionFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionFailed;\n}\n\nexport interface LoadShippingOptionsRequestedAction extends Action {\n    type: ConsignmentActionType.LoadShippingOptionsRequested;\n}\n\nexport interface LoadShippingOptionsSucceededAction extends Action<Checkout> {\n    type: ConsignmentActionType.LoadShippingOptionsSucceeded;\n}\n\nexport interface LoadShippingOptionsFailedAction extends Action<Error> {\n    type: ConsignmentActionType.LoadShippingOptionsFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum CustomerStrategyActionType {\n    SignInFailed = 'CUSTOMER_STRATEGY_SIGN_IN_FAILED',\n    SignInRequested = 'CUSTOMER_STRATEGY_SIGN_IN_REQUESTED',\n    SignInSucceeded = 'CUSTOMER_STRATEGY_SIGN_IN_SUCCEEDED',\n    SignOutFailed = 'CUSTOMER_STRATEGY_SIGN_OUT_FAILED',\n    SignOutRequested = 'CUSTOMER_STRATEGY_SIGN_OUT_REQUESTED',\n    SignOutSucceeded = 'CUSTOMER_STRATEGY_SIGN_OUT_SUCCEEDED',\n    InitializeFailed = 'CUSTOMER_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'CUSTOMER_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'CUSTOMER_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'CUSTOMER_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'CUSTOMER_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'CUSTOMER_STRATEGY_DEINITIALIZE_SUCCEEDED',\n    WidgetInteractionStarted = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_STARTED',\n    WidgetInteractionFinished = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_FINISHED',\n    WidgetInteractionFailed = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_FAILED',\n}\n\nexport type CustomerStrategyAction =\n    CustomerStrategySignInAction |\n    CustomerStrategySignOutAction |\n    CustomerStrategyInitializeAction |\n    CustomerStrategyDeinitializeAction |\n    CustomerStrategyWidgetAction;\n\nexport type CustomerStrategySignInAction =\n    SignInRequestedAction |\n    SignInSucceededAction |\n    SignInFailedAction;\n\nexport type CustomerStrategySignOutAction =\n    SignOutRequestedAction |\n    SignOutSucceededAction |\n    SignOutFailedAction;\n\nexport type CustomerStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type CustomerStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport type CustomerStrategyWidgetAction =\n    WidgetInteractionStartedAction |\n    WidgetInteractionFinishedAction |\n    WidgetInteractionFailedAction;\n\nexport interface SignInRequestedAction extends Action {\n    type: CustomerStrategyActionType.SignInRequested;\n}\n\nexport interface SignInSucceededAction extends Action {\n    type: CustomerStrategyActionType.SignInSucceeded;\n}\n\nexport interface SignInFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.SignInFailed;\n}\n\nexport interface SignOutRequestedAction extends Action {\n    type: CustomerStrategyActionType.SignOutRequested;\n}\n\nexport interface SignOutSucceededAction extends Action {\n    type: CustomerStrategyActionType.SignOutSucceeded;\n}\n\nexport interface SignOutFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.SignOutFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: CustomerStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: CustomerStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: CustomerStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: CustomerStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.DeinitializeFailed;\n}\n\nexport interface WidgetInteractionStartedAction extends Action {\n    type: CustomerStrategyActionType.WidgetInteractionStarted;\n}\n\nexport interface WidgetInteractionFinishedAction extends Action {\n    type: CustomerStrategyActionType.WidgetInteractionFinished;\n}\n\nexport interface WidgetInteractionFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.WidgetInteractionFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadOrderPaymentsAction } from '../order';\n\nexport enum PaymentStrategyActionType {\n    ExecuteFailed = 'PAYMENT_STRATEGY_EXECUTE_FAILED',\n    ExecuteRequested = 'PAYMENT_STRATEGY_EXECUTE_REQUESTED',\n    ExecuteSucceeded = 'PAYMENT_STRATEGY_EXECUTE_SUCCEEDED',\n    FinalizeFailed = 'PAYMENT_STRATEGY_FINALIZE_FAILED',\n    FinalizeRequested = 'PAYMENT_STRATEGY_FINALIZE_REQUESTED',\n    FinalizeSucceeded = 'PAYMENT_STRATEGY_FINALIZE_SUCCEEDED',\n    InitializeFailed = 'PAYMENT_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'PAYMENT_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'PAYMENT_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'PAYMENT_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'PAYMENT_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'PAYMENT_STRATEGY_DEINITIALIZE_SUCCEEDED',\n    WidgetInteractionStarted = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_STARTED',\n    WidgetInteractionFinished = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_FINISHED',\n    WidgetInteractionFailed = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_FAILED',\n}\n\nexport type PaymentStrategyAction =\n    PaymentStrategyExecuteAction |\n    PaymentStrategyFinalizeAction |\n    PaymentStrategyInitializeAction |\n    PaymentStrategyDeinitializeAction |\n    PaymentStrategyWidgetAction;\n\nexport type PaymentStrategyExecuteAction =\n    ExecuteRequestedAction |\n    ExecuteSucceededAction |\n    ExecuteFailedAction |\n    LoadOrderPaymentsAction;\n\nexport type PaymentStrategyFinalizeAction =\n    FinalizeRequestedAction |\n    FinalizeSucceededAction |\n    FinalizeFailedAction |\n    LoadOrderPaymentsAction;\n\nexport type PaymentStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type PaymentStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport type PaymentStrategyWidgetAction =\n    WidgetInteractionStartedAction |\n    WidgetInteractionFinishedAction |\n    WidgetInteractionFailedAction;\n\nexport interface ExecuteRequestedAction extends Action {\n    type: PaymentStrategyActionType.ExecuteRequested;\n}\n\nexport interface ExecuteSucceededAction extends Action {\n    type: PaymentStrategyActionType.ExecuteSucceeded;\n}\n\nexport interface ExecuteFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.ExecuteFailed;\n}\n\nexport interface FinalizeRequestedAction extends Action {\n    type: PaymentStrategyActionType.FinalizeRequested;\n}\n\nexport interface FinalizeSucceededAction extends Action {\n    type: PaymentStrategyActionType.FinalizeSucceeded;\n}\n\nexport interface FinalizeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.FinalizeFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: PaymentStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: PaymentStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: PaymentStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: PaymentStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.DeinitializeFailed;\n}\n\nexport interface WidgetInteractionStartedAction extends Action {\n    type: PaymentStrategyActionType.WidgetInteractionStarted;\n}\n\nexport interface WidgetInteractionFinishedAction extends Action {\n    type: PaymentStrategyActionType.WidgetInteractionFinished;\n}\n\nexport interface WidgetInteractionFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.WidgetInteractionFailed;\n}\n","import StandardError from './standard-error';\n\nexport enum MissingDataErrorType {\n    MissingBillingAddress,\n    MissingCart,\n    MissingCheckout,\n    MissingConsignments,\n    MissingCheckoutConfig,\n    MissingOrder,\n    MissingOrderConfig,\n    MissingOrderId,\n    MissingPayment,\n    MissingPaymentMethod,\n    MissingShippingAddress,\n    MissingSpamProtectionToken,\n}\n\nexport default class MissingDataError extends StandardError {\n    constructor(\n        public subtype: MissingDataErrorType\n    ) {\n        super(getErrorMessage(subtype));\n\n        this.name = 'MissingDataError';\n        this.type = 'missing_data';\n    }\n}\n\nfunction getErrorMessage(type: MissingDataErrorType): string {\n    switch (type) {\n    case MissingDataErrorType.MissingBillingAddress:\n        return 'Unable to proceed because billing address data is unavailable.';\n\n    case MissingDataErrorType.MissingCart:\n        return 'Unable to proceed because cart data is unavailable.';\n\n    case MissingDataErrorType.MissingConsignments:\n        return 'Unable to proceed because consignments data is unavailable.';\n\n    case MissingDataErrorType.MissingCheckout:\n        return 'Unable to proceed because checkout data is unavailable.';\n\n    case MissingDataErrorType.MissingCheckoutConfig:\n    case MissingDataErrorType.MissingOrderConfig:\n        return 'Unable to proceed because configuration data is unavailable.';\n\n    case MissingDataErrorType.MissingOrder:\n        return 'Unable to proceed because order data is unavailable.';\n\n    case MissingDataErrorType.MissingOrderId:\n        return 'Unable to proceed because order ID is unavailable or not generated yet.';\n\n    case MissingDataErrorType.MissingPayment:\n        return 'Unable to proceed because payment data is unavailable.';\n\n    case MissingDataErrorType.MissingPaymentMethod:\n        return 'Unable to proceed because payment method data is unavailable or not properly configured.';\n\n    case MissingDataErrorType.MissingShippingAddress:\n        return 'Unable to proceed because shipping address data is unavailable.';\n\n    case MissingDataErrorType.MissingSpamProtectionToken:\n        return 'Unable to proceed because spam protection token is not provided.';\n\n    default:\n        return 'Unable to proceed because the required data is unavailable.';\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum ShippingStrategyActionType {\n    UpdateAddressFailed = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_FAILED',\n    UpdateAddressRequested = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_REQUESTED',\n    UpdateAddressSucceeded = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_SUCCEEDED',\n    SelectOptionFailed = 'SHIPPING_STRATEGY_SELECT_OPTION_FAILED',\n    SelectOptionRequested = 'SHIPPING_STRATEGY_SELECT_OPTION_REQUESTED',\n    SelectOptionSucceeded = 'SHIPPING_STRATEGY_SELECT_OPTION_SUCCEEDED',\n    InitializeFailed = 'SHIPPING_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'SHIPPING_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'SHIPPING_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'SHIPPING_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'SHIPPING_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'SHIPPING_STRATEGY_DEINITIALIZE_SUCCEEDED',\n}\n\nexport type ShippingStrategyAction =\n    ShippingStrategyUpdateAddressAction |\n    ShippingStrategySelectOptionAction |\n    ShippingStrategyInitializeAction |\n    ShippingStrategyDeinitializeAction;\n\nexport type ShippingStrategyUpdateAddressAction =\n    UpdateAddressRequestedAction |\n    UpdateAddressSucceededAction |\n    UpdateAddressFailedAction;\n\nexport type ShippingStrategySelectOptionAction =\n    SelectOptionRequestedAction |\n    SelectOptionSucceededAction |\n    SelectOptionFailedAction;\n\nexport type ShippingStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type ShippingStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport interface UpdateAddressRequestedAction extends Action {\n    type: ShippingStrategyActionType.UpdateAddressRequested;\n}\n\nexport interface UpdateAddressSucceededAction extends Action {\n    type: ShippingStrategyActionType.UpdateAddressSucceeded;\n}\n\nexport interface UpdateAddressFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.UpdateAddressFailed;\n}\n\nexport interface SelectOptionRequestedAction extends Action {\n    type: ShippingStrategyActionType.SelectOptionRequested;\n}\n\nexport interface SelectOptionSucceededAction extends Action {\n    type: ShippingStrategyActionType.SelectOptionSucceeded;\n}\n\nexport interface SelectOptionFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.SelectOptionFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: ShippingStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: ShippingStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: ShippingStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: ShippingStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.DeinitializeFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadConfigAction } from '../config/config-actions';\n\nimport Checkout from './checkout';\n\nexport enum CheckoutActionType {\n    LoadCheckoutRequested = 'LOAD_CHECKOUT_REQUESTED',\n    LoadCheckoutSucceeded = 'LOAD_CHECKOUT_SUCCEEDED',\n    LoadCheckoutFailed = 'LOAD_CHECKOUT_FAILED',\n\n    UpdateCheckoutRequested = 'UPDATE_CHECKOUT_REQUESTED',\n    UpdateCheckoutSucceeded = 'UPDATE_CHECKOUT_SUCCEEDED',\n    UpdateCheckoutFailed = 'UPDATE_CHECKOUT_FAILED',\n}\n\nexport type CheckoutAction = LoadCheckoutAction | UpdateCheckoutAction;\n\nexport type LoadCheckoutAction =\n    LoadCheckoutRequestedAction |\n    LoadCheckoutSucceededAction |\n    LoadCheckoutFailedAction |\n    LoadConfigAction;\n\nexport type UpdateCheckoutAction =\n    UpdateCheckoutRequestedAction |\n    UpdateCheckoutSucceededAction |\n    UpdateCheckoutFailedAction;\n\nexport interface LoadCheckoutRequestedAction extends Action {\n    type: CheckoutActionType.LoadCheckoutRequested;\n}\n\nexport interface LoadCheckoutSucceededAction extends Action<Checkout> {\n    type: CheckoutActionType.LoadCheckoutSucceeded;\n}\n\nexport interface LoadCheckoutFailedAction extends Action<Error> {\n    type: CheckoutActionType.LoadCheckoutFailed;\n}\n\nexport interface UpdateCheckoutRequestedAction extends Action {\n    type: CheckoutActionType.UpdateCheckoutRequested;\n}\n\nexport interface UpdateCheckoutSucceededAction extends Action<Checkout> {\n    type: CheckoutActionType.UpdateCheckoutSucceeded;\n}\n\nexport interface UpdateCheckoutFailedAction extends Action<Error> {\n    type: CheckoutActionType.UpdateCheckoutFailed;\n}\n","import { setPrototypeOf } from '../../utility';\n\nimport CustomError from './custom-error';\n\nexport default class StandardError extends Error implements CustomError {\n    type = 'standard';\n\n    constructor(message?: string) {\n        super(message || 'An unexpected error has occurred.');\n\n        setPrototypeOf(this, new.target.prototype);\n\n        if (typeof Error.captureStackTrace === 'function') {\n            Error.captureStackTrace(this, new.target);\n        } else {\n            this.stack = (new Error(this.message)).stack;\n        }\n    }\n}\n","export default function setPrototypeOf(object: any, prototype: object) {\n    if (Object.setPrototypeOf) {\n        Object.setPrototypeOf(object, prototype);\n    } else {\n        object.__proto__ = prototype;\n    }\n\n    return object;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\nimport { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nexport enum CouponActionType {\n    ApplyCouponRequested = 'APPLY_COUPON_REQUESTED',\n    ApplyCouponSucceeded = 'APPLY_COUPON_SUCCEEDED',\n    ApplyCouponFailed = 'APPLY_COUPON_FAILED',\n\n    RemoveCouponRequested = 'REMOVE_COUPON_REQUESTED',\n    RemoveCouponSucceeded = 'REMOVE_COUPON_SUCCEEDED',\n    RemoveCouponFailed = 'REMOVE_COUPON_FAILED',\n}\n\nexport type CouponAction =\n    ApplyCouponAction |\n    RemoveCouponAction;\n\nexport type ApplyCouponAction =\n    ApplyCouponRequestedAction |\n    ApplyCouponSucceededAction |\n    ApplyCouponFailedAction;\n\nexport type RemoveCouponAction =\n    RemoveCouponRequestedAction |\n    RemoveCouponSucceededAction |\n    RemoveCouponFailedAction;\n\nexport interface ApplyCouponRequestedAction extends Action {\n    type: CouponActionType.ApplyCouponRequested;\n}\n\nexport interface ApplyCouponSucceededAction extends Action<Checkout> {\n    type: CouponActionType.ApplyCouponSucceeded;\n}\n\nexport interface ApplyCouponFailedAction extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: CouponActionType.ApplyCouponFailed;\n}\n\nexport interface RemoveCouponRequestedAction extends Action {\n    type: CouponActionType.RemoveCouponRequested;\n}\n\nexport interface RemoveCouponSucceededAction extends Action<Checkout> {\n    type: CouponActionType.RemoveCouponSucceeded;\n}\n\nexport interface RemoveCouponFailedAction extends Action<RequestError> {\n    type: CouponActionType.RemoveCouponFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nexport enum BillingAddressActionType {\n    UpdateBillingAddressRequested = 'UPDATE_BILLING_ADDRESS_REQUESTED',\n    UpdateBillingAddressSucceeded = 'UPDATE_BILLING_ADDRESS_SUCCEEDED',\n    UpdateBillingAddressFailed = 'UPDATE_BILLING_ADDRESS_FAILED',\n\n    ContinueAsGuestRequested = 'CONTINUE_AS_GUEST_REQUESTED',\n    ContinueAsGuestSucceeded = 'CONTINUE_AS_GUEST_SUCCEEDED',\n    ContinueAsGuestFailed = 'CONTINUE_AS_GUEST_FAILED',\n}\n\nexport type BillingAddressAction =\n    ContinueAsGuestAction |\n    UpdateBillingAddressAction;\n\nexport type UpdateBillingAddressAction =\n    UpdateBillingAddressRequested |\n    UpdateBillingAddressSucceeded |\n    UpdateBillingAddressFailed;\n\nexport type ContinueAsGuestAction =\n    ContinueAsGuestRequested |\n    ContinueAsGuestSucceeded |\n    ContinueAsGuestFailed;\n\nexport interface UpdateBillingAddressRequested extends Action {\n    type: BillingAddressActionType.UpdateBillingAddressRequested;\n}\n\nexport interface UpdateBillingAddressSucceeded extends Action<Checkout> {\n    type: BillingAddressActionType.UpdateBillingAddressSucceeded;\n}\n\nexport interface UpdateBillingAddressFailed extends Action<Error> {\n    type: BillingAddressActionType.UpdateBillingAddressFailed;\n}\n\nexport interface ContinueAsGuestRequested extends Action {\n    type: BillingAddressActionType.ContinueAsGuestRequested;\n}\n\nexport interface ContinueAsGuestSucceeded extends Action<Checkout> {\n    type: BillingAddressActionType.ContinueAsGuestSucceeded;\n}\n\nexport interface ContinueAsGuestFailed extends Action<Error> {\n    type: BillingAddressActionType.ContinueAsGuestFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { InternalOrderResponseData } from './internal-order-responses';\nimport Order from './order';\n\nexport enum OrderActionType {\n    LoadOrderRequested = 'LOAD_ORDER_REQUESTED',\n    LoadOrderSucceeded = 'LOAD_ORDER_SUCCEEDED',\n    LoadOrderFailed = 'LOAD_ORDER_FAILED',\n\n    LoadOrderPaymentsRequested = 'LOAD_ORDER_PAYMENTS_REQUESTED',\n    LoadOrderPaymentsSucceeded = 'LOAD_ORDER_PAYMENTS_SUCCEEDED',\n    LoadOrderPaymentsFailed = 'LOAD_ORDER_PAYMENTS_FAILED',\n\n    SubmitOrderRequested = 'SUBMIT_ORDER_REQUESTED',\n    SubmitOrderSucceeded = 'SUBMIT_ORDER_SUCCEEDED',\n    SubmitOrderFailed = 'SUBMIT_ORDER_FAILED',\n\n    FinalizeOrderRequested = 'FINALIZE_ORDER_REQUESTED',\n    FinalizeOrderSucceeded = 'FINALIZE_ORDER_SUCCEEDED',\n    FinalizeOrderFailed = 'FINALIZE_ORDER_FAILED',\n}\n\nexport type OrderAction = LoadOrderAction |\n    LoadOrderPaymentsAction |\n    SubmitOrderAction |\n    FinalizeOrderAction;\n\nexport type LoadOrderPaymentsAction = LoadOrderPaymentsRequestedAction |\n    LoadOrderPaymentsSucceededAction |\n    LoadOrderPaymentsFailedAction;\n\nexport type LoadOrderAction =\n    LoadOrderRequestedAction |\n    LoadOrderSucceededAction |\n    LoadOrderFailedAction;\n\nexport type SubmitOrderAction =\n    SubmitOrderRequestedAction |\n    SubmitOrderSucceededAction |\n    SubmitOrderFailedAction |\n    LoadOrderAction;\n\nexport type FinalizeOrderAction =\n    FinalizeOrderRequestedAction |\n    FinalizeOrderSucceededAction |\n    FinalizeOrderFailedAction |\n    LoadOrderAction;\n\nexport interface LoadOrderRequestedAction extends Action {\n    type: OrderActionType.LoadOrderRequested;\n}\n\nexport interface LoadOrderSucceededAction extends Action<Order> {\n    type: OrderActionType.LoadOrderSucceeded;\n}\n\nexport interface LoadOrderFailedAction extends Action<Error> {\n    type: OrderActionType.LoadOrderFailed;\n}\n\nexport interface LoadOrderPaymentsRequestedAction extends Action {\n    type: OrderActionType.LoadOrderPaymentsRequested;\n}\n\nexport interface LoadOrderPaymentsSucceededAction extends Action<Order> {\n    type: OrderActionType.LoadOrderPaymentsSucceeded;\n}\n\nexport interface LoadOrderPaymentsFailedAction extends Action<Error> {\n    type: OrderActionType.LoadOrderPaymentsFailed;\n}\n\nexport interface SubmitOrderRequestedAction extends Action {\n    type: OrderActionType.SubmitOrderRequested;\n}\n\nexport interface SubmitOrderSucceededAction extends Action<InternalOrderResponseData> {\n    type: OrderActionType.SubmitOrderSucceeded;\n}\n\nexport interface SubmitOrderFailedAction extends Action<Error> {\n    type: OrderActionType.SubmitOrderFailed;\n}\n\nexport interface FinalizeOrderRequestedAction extends Action {\n    type: OrderActionType.FinalizeOrderRequested;\n}\n\nexport interface FinalizeOrderSucceededAction extends Action<InternalOrderResponseData> {\n    type: OrderActionType.FinalizeOrderSucceeded;\n}\n\nexport interface FinalizeOrderFailedAction extends Action<Error> {\n    type: OrderActionType.FinalizeOrderFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport PaymentMethod from './payment-method';\nimport PaymentMethodMeta from './payment-method-meta';\n\nexport enum PaymentMethodActionType {\n    LoadPaymentMethodRequested = 'LOAD_PAYMENT_METHOD_REQUESTED',\n    LoadPaymentMethodSucceeded = 'LOAD_PAYMENT_METHOD_SUCCEEDED',\n    LoadPaymentMethodFailed = 'LOAD_PAYMENT_METHOD_FAILED',\n\n    LoadPaymentMethodsRequested = 'LOAD_PAYMENT_METHODS_REQUESTED',\n    LoadPaymentMethodsSucceeded = 'LOAD_PAYMENT_METHODS_SUCCEEDED',\n    LoadPaymentMethodsFailed = 'LOAD_PAYMENT_METHODS_FAILED',\n}\n\nexport type PaymentMethodAction = LoadPaymentMethodAction | LoadPaymentMethodsAction;\n\nexport type LoadPaymentMethodAction =\n    LoadPaymentMethodRequestedAction |\n    LoadPaymentMethodSucceededAction |\n    LoadPaymentMethodFailedAction;\n\nexport type LoadPaymentMethodsAction =\n    LoadPaymentMethodsRequestedAction |\n    LoadPaymentMethodsSucceededAction |\n    LoadPaymentMethodsFailedAction;\n\nexport interface LoadPaymentMethodRequestedAction extends Action {\n    type: PaymentMethodActionType.LoadPaymentMethodRequested;\n}\n\nexport interface LoadPaymentMethodSucceededAction extends Action<PaymentMethod> {\n    type: PaymentMethodActionType.LoadPaymentMethodSucceeded;\n}\n\nexport interface LoadPaymentMethodFailedAction extends Action<Error> {\n    type: PaymentMethodActionType.LoadPaymentMethodFailed;\n}\n\nexport interface LoadPaymentMethodsRequestedAction extends Action {\n    type: PaymentMethodActionType.LoadPaymentMethodsRequested;\n}\n\nexport interface LoadPaymentMethodsSucceededAction extends Action<PaymentMethod[], PaymentMethodMeta> {\n    type: PaymentMethodActionType.LoadPaymentMethodsSucceeded;\n}\n\nexport interface LoadPaymentMethodsFailedAction extends Action<Error> {\n    type: PaymentMethodActionType.LoadPaymentMethodsFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadPaymentMethodAction } from '../payment';\n\nimport { CheckoutButtonMethodType } from './strategies';\n\nexport enum CheckoutButtonActionType {\n    InitializeButtonFailed = 'INITIALIZE_BUTTON_FAILED',\n    InitializeButtonRequested = 'INITIALIZE_BUTTON_REQUESTED',\n    InitializeButtonSucceeded = 'INITIALIZE_BUTTON_SUCCEEDED',\n\n    DeinitializeButtonFailed = 'DEINITIALIZE_BUTTON_FAILED',\n    DeinitializeButtonRequested = 'DEINITIALIZE_BUTTON_REQUESTED',\n    DeinitializeButtonSucceeded = 'DEINITIALIZE_BUTTON_SUCCEEDED',\n}\n\nexport type CheckoutButtonAction = InitializeButtonAction | DeinitializeButtonAction;\n\nexport type InitializeButtonAction =\n    InitializeButtonRequestedAction |\n    InitializeButtonSucceededAction |\n    InitializeButtonFailedAction |\n    LoadPaymentMethodAction;\n\nexport type DeinitializeButtonAction =\n    DeinitializeButtonRequestedAction |\n    DeinitializeButtonSucceededAction |\n    DeinitializeButtonFailedAction;\n\nexport interface CheckoutButtonActionMeta {\n    methodId: CheckoutButtonMethodType;\n}\n\nexport interface InitializeButtonActionMeta extends CheckoutButtonActionMeta {\n    containerId: string;\n}\n\nexport interface InitializeButtonRequestedAction extends Action<undefined, InitializeButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonRequested;\n}\n\nexport interface InitializeButtonSucceededAction extends Action<undefined, InitializeButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonSucceeded;\n}\n\nexport interface InitializeButtonFailedAction extends Action<Error, InitializeButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonFailed;\n}\n\nexport interface DeinitializeButtonRequestedAction extends Action<undefined, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonRequested;\n}\n\nexport interface DeinitializeButtonSucceededAction extends Action<undefined, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonSucceeded;\n}\n\nexport interface DeinitializeButtonFailedAction extends Action<Error, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonFailed;\n}\n","module.exports = require(\"rxjs/operators\");","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\nimport { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nexport enum GiftCertificateActionType {\n    ApplyGiftCertificateRequested = 'APPLY_GIFT_CERTIFICATE_REQUESTED',\n    ApplyGiftCertificateSucceeded = 'APPLY_GIFT_CERTIFICATE_SUCCEEDED',\n    ApplyGiftCertificateFailed = 'APPLY_GIFT_CERTIFICATE_FAILED',\n\n    RemoveGiftCertificateRequested = 'REMOVE_GIFT_CERTIFICATE_REQUESTED',\n    RemoveGiftCertificateSucceeded = 'REMOVE_GIFT_CERTIFICATE_SUCCEEDED',\n    RemoveGiftCertificateFailed = 'REMOVE_GIFT_CERTIFICATE_FAILED',\n}\n\nexport type GiftCertificateAction =\n    ApplyGiftCertificateAction |\n    RemoveGiftCertificateAction;\n\nexport type ApplyGiftCertificateAction =\n    ApplyGiftCertificateRequestedAction |\n    ApplyGiftCertificateSucceededAction |\n    ApplyGiftCertificateFailedAction;\n\nexport type RemoveGiftCertificateAction =\n    RemoveGiftCertificateRequestedAction |\n    RemoveGiftCertificateSucceededAction |\n    RemoveGiftCertificateFailedAction;\n\nexport interface ApplyGiftCertificateRequestedAction extends Action {\n    type: GiftCertificateActionType.ApplyGiftCertificateRequested;\n}\n\nexport interface ApplyGiftCertificateSucceededAction extends Action<Checkout> {\n    type: GiftCertificateActionType.ApplyGiftCertificateSucceeded;\n}\n\nexport interface ApplyGiftCertificateFailedAction extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: GiftCertificateActionType.ApplyGiftCertificateFailed;\n}\n\nexport interface RemoveGiftCertificateRequestedAction extends Action {\n    type: GiftCertificateActionType.RemoveGiftCertificateRequested;\n}\n\nexport interface RemoveGiftCertificateSucceededAction extends Action<Checkout> {\n    type: GiftCertificateActionType.RemoveGiftCertificateSucceeded;\n}\n\nexport interface RemoveGiftCertificateFailedAction extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: GiftCertificateActionType.RemoveGiftCertificateFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { InstrumentsResponseBody } from './instrument-response-body';\n\nexport enum InstrumentActionType {\n    LoadInstrumentsRequested = 'LOAD_INSTRUMENTS_REQUESTED',\n    LoadInstrumentsSucceeded = 'LOAD_INSTRUMENTS_SUCCEEDED',\n    LoadInstrumentsFailed = 'LOAD_INSTRUMENTS_FAILED',\n\n    DeleteInstrumentRequested = 'DELETE_INSTRUMENT_REQUESTED',\n    DeleteInstrumentSucceeded = 'DELETE_INSTRUMENT_SUCCEEDED',\n    DeleteInstrumentFailed = 'DELETE_INSTRUMENT_FAILED',\n}\n\nexport type InstrumentAction =\n    LoadInstrumentsAction |\n    DeleteInstrumentAction;\n\nexport type LoadInstrumentsAction =\n    LoadInstrumentsRequestedAction |\n    LoadInstrumentsSucceededAction |\n    LoadInstrumentsFailedAction;\n\nexport type DeleteInstrumentAction =\n    DeleteInstrumentRequestedAction |\n    DeleteInstrumentSucceededAction |\n    DeleteInstrumentFailedAction;\n\nexport interface LoadInstrumentsRequestedAction extends Action {\n    type: InstrumentActionType.LoadInstrumentsRequested;\n}\n\nexport interface LoadInstrumentsSucceededAction extends Action<InstrumentsResponseBody> {\n    type: InstrumentActionType.LoadInstrumentsSucceeded;\n}\n\nexport interface LoadInstrumentsFailedAction extends Action<Error> {\n    type: InstrumentActionType.LoadInstrumentsFailed;\n}\n\nexport interface DeleteInstrumentRequestedAction extends Action {\n    type: InstrumentActionType.DeleteInstrumentRequested;\n}\n\nexport interface DeleteInstrumentSucceededAction extends Action<InstrumentsResponseBody> {\n    type: InstrumentActionType.DeleteInstrumentSucceeded;\n}\n\nexport interface DeleteInstrumentFailedAction extends Action<Error> {\n    type: InstrumentActionType.DeleteInstrumentFailed;\n}\n","import EmbeddedCheckoutError from './embedded-checkout-error';\nimport EmbeddedContentOptions from './iframe-content/embedded-content-options';\n\nexport enum EmbeddedCheckoutEventType {\n    CheckoutComplete = 'CHECKOUT_COMPLETE',\n    CheckoutError = 'CHECKOUT_ERROR',\n    CheckoutLoaded = 'CHECKOUT_LOADED',\n    FrameError = 'FRAME_ERROR',\n    FrameLoaded = 'FRAME_LOADED',\n    SignedOut = 'SIGNED_OUT',\n}\n\nexport interface EmbeddedCheckoutEventMap {\n    [EmbeddedCheckoutEventType.CheckoutComplete]: EmbeddedCheckoutCompleteEvent;\n    [EmbeddedCheckoutEventType.CheckoutError]: EmbeddedCheckoutErrorEvent;\n    [EmbeddedCheckoutEventType.CheckoutLoaded]: EmbeddedCheckoutLoadedEvent;\n    [EmbeddedCheckoutEventType.FrameError]: EmbeddedCheckoutFrameErrorEvent;\n    [EmbeddedCheckoutEventType.FrameLoaded]: EmbeddedCheckoutFrameLoadedEvent;\n    [EmbeddedCheckoutEventType.SignedOut]: EmbeddedCheckoutSignedOutEvent;\n}\n\nexport type EmbeddedCheckoutEvent = (\n    EmbeddedCheckoutCompleteEvent |\n    EmbeddedCheckoutErrorEvent |\n    EmbeddedCheckoutFrameErrorEvent |\n    EmbeddedCheckoutFrameLoadedEvent |\n    EmbeddedCheckoutLoadedEvent |\n    EmbeddedCheckoutSignedOutEvent\n);\n\nexport interface EmbeddedCheckoutCompleteEvent {\n    type: EmbeddedCheckoutEventType.CheckoutComplete;\n}\n\nexport interface EmbeddedCheckoutErrorEvent {\n    type: EmbeddedCheckoutEventType.CheckoutError;\n    payload: EmbeddedCheckoutError;\n}\n\nexport interface EmbeddedCheckoutLoadedEvent {\n    type: EmbeddedCheckoutEventType.CheckoutLoaded;\n}\n\nexport interface EmbeddedCheckoutFrameErrorEvent {\n    type: EmbeddedCheckoutEventType.FrameError;\n    payload: EmbeddedCheckoutError;\n}\n\nexport interface EmbeddedCheckoutFrameLoadedEvent {\n    type: EmbeddedCheckoutEventType.FrameLoaded;\n    payload?: EmbeddedContentOptions;\n}\n\nexport interface EmbeddedCheckoutSignedOutEvent {\n    type: EmbeddedCheckoutEventType.SignedOut;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { AmazonPayRemoteCheckout } from './methods';\n\nexport enum RemoteCheckoutActionType {\n    InitializeRemoteBillingRequested = 'INITIALIZE_REMOTE_BILLING_REQUESTED',\n    InitializeRemoteBillingSucceeded = 'INITIALIZE_REMOTE_BILLING_SUCCEEDED',\n    InitializeRemoteBillingFailed = 'INITIALIZE_REMOTE_BILLING_FAILED',\n\n    InitializeRemoteShippingRequested = 'INITIALIZE_REMOTE_SHIPPING_REQUESTED',\n    InitializeRemoteShippingSucceeded = 'INITIALIZE_REMOTE_SHIPPING_SUCCEEDED',\n    InitializeRemoteShippingFailed = 'INITIALIZE_REMOTE_SHIPPING_FAILED',\n\n    InitializeRemotePaymentRequested = 'INITIALIZE_REMOTE_PAYMENT_REQUESTED',\n    InitializeRemotePaymentSucceeded = 'INITIALIZE_REMOTE_PAYMENT_SUCCEEDED',\n    InitializeRemotePaymentFailed = 'INITIALIZE_REMOTE_PAYMENT_FAILED',\n\n    LoadRemoteSettingsRequested = 'LOAD_REMOTE_SETTINGS_REQUESTED',\n    LoadRemoteSettingsSucceeded = 'LOAD_REMOTE_SETTINGS_SUCCEEDED',\n    LoadRemoteSettingsFailed = 'LOAD_REMOTE_SETTINGS_FAILED',\n\n    SignOutRemoteCustomerRequested = 'SIGN_OUT_REMOTE_CUSTOMER_REQUESTED',\n    SignOutRemoteCustomerSucceeded = 'SIGN_OUT_REMOTE_CUSTOMER_SUCCEEDED',\n    SignOutRemoteCustomerFailed = 'SIGN_OUT_REMOTE_CUSTOMER_FAILED',\n\n    UpdateRemoteCheckout = 'UPDATE_REMOTE_CHECKOUT',\n}\n\nexport type RemoteCheckoutAction = InitializeRemoteBillingAction |\n    InitializeRemoteShippingAction |\n    InitializeRemotePaymentAction |\n    SignOutRemoteCustomerAction |\n    LoadRemoteSettingsAction |\n    UpdateRemoteCheckoutAction;\n\nexport type InitializeRemoteBillingAction = InitializeRemoteBillingSucceededAction |\n    InitializeRemoteBillingFailedAction |\n    InitializeRemoteBillingRequestedAction;\n\nexport interface InitializeRemoteBillingSucceededAction extends Action<AmazonPayRemoteCheckout> {\n    type: RemoteCheckoutActionType.InitializeRemoteBillingSucceeded;\n}\n\nexport interface InitializeRemoteBillingFailedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteBillingFailed;\n}\n\nexport interface InitializeRemoteBillingRequestedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteBillingRequested;\n}\n\nexport type InitializeRemoteShippingAction = InitializeRemoteShippingSucceededAction |\n    InitializeRemoteShippingFailedAction |\n    InitializeRemoteShippingRequestedAction;\n\nexport interface InitializeRemoteShippingSucceededAction extends Action<AmazonPayRemoteCheckout> {\n    type: RemoteCheckoutActionType.InitializeRemoteShippingSucceeded;\n}\n\nexport interface InitializeRemoteShippingFailedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteShippingFailed;\n}\n\nexport interface InitializeRemoteShippingRequestedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteShippingRequested;\n}\n\nexport type InitializeRemotePaymentAction = InitializeRemotePaymentSucceededAction |\n    InitializeRemotePaymentFailedAction |\n    InitializeRemotePaymentRequestedAction;\n\nexport interface InitializeRemotePaymentSucceededAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemotePaymentSucceeded;\n}\n\nexport interface InitializeRemotePaymentFailedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemotePaymentFailed;\n}\n\nexport interface InitializeRemotePaymentRequestedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemotePaymentRequested;\n}\n\nexport type SignOutRemoteCustomerAction = SignOutRemoteCustomerSucceededAction |\n    SignOutRemoteCustomerFailedAction |\n    SignOutRemoteCustomerRequestedAction;\n\nexport interface SignOutRemoteCustomerSucceededAction extends Action {\n    type: RemoteCheckoutActionType.SignOutRemoteCustomerSucceeded;\n}\n\nexport interface SignOutRemoteCustomerFailedAction extends Action {\n    type: RemoteCheckoutActionType.SignOutRemoteCustomerFailed;\n}\n\nexport interface SignOutRemoteCustomerRequestedAction extends Action {\n    type: RemoteCheckoutActionType.SignOutRemoteCustomerRequested;\n}\n\nexport type LoadRemoteSettingsAction = LoadRemoteSettingsSucceededAction |\n    LoadRemoteSettingsRequestedAction |\n    LoadRemoteSettingsFailedAction;\n\nexport interface LoadRemoteSettingsSucceededAction extends Action {\n    type: RemoteCheckoutActionType.LoadRemoteSettingsSucceeded;\n}\n\nexport interface LoadRemoteSettingsRequestedAction extends Action {\n    type: RemoteCheckoutActionType.LoadRemoteSettingsRequested;\n}\n\nexport interface LoadRemoteSettingsFailedAction extends Action {\n    type: RemoteCheckoutActionType.LoadRemoteSettingsFailed;\n}\n\nexport interface UpdateRemoteCheckoutAction extends Action {\n    type: RemoteCheckoutActionType.UpdateRemoteCheckout;\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport StandardError from './standard-error';\n\nconst DEFAULT_RESPONSE = {\n    body: {},\n    headers: {},\n    status: 0,\n};\n\nexport default class RequestError<TBody = any> extends StandardError {\n    body: TBody | {};\n    headers: { [key: string]: any };\n    errors: Array<{ code: string; message?: string }>;\n    status: number;\n\n    constructor(\n        response?: Response<TBody | {}>,\n        { message, errors }: {\n            message?: string;\n            errors?: Array<{ code: string; message?: string }>;\n        } = {}\n    ) {\n        const { body, headers, status } = response || DEFAULT_RESPONSE;\n\n        super(message || 'An unexpected error has occurred.');\n\n        this.name = 'RequestError';\n        this.type = 'request';\n        this.body = body;\n        this.headers = headers;\n        this.status = status;\n        this.errors = errors || [];\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport Config from './config';\n\nexport enum ConfigActionType {\n    LoadConfigRequested = 'LOAD_CONFIG_REQUESTED',\n    LoadConfigSucceeded = 'LOAD_CONFIG_SUCCEEDED',\n    LoadConfigFailed = 'LOAD_CONFIG_FAILED',\n}\n\nexport type LoadConfigAction =\n    LoadConfigRequestedAction |\n    LoadConfigSucceededAction |\n    LoadConfigFailedAction;\n\nexport interface LoadConfigRequestedAction extends Action {\n    type: ConfigActionType.LoadConfigRequested;\n}\n\nexport interface LoadConfigSucceededAction extends Action<Config> {\n    type: ConfigActionType.LoadConfigSucceeded;\n}\n\nexport interface LoadConfigFailedAction extends Action<Error> {\n    type: ConfigActionType.LoadConfigFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport Country from './country';\n\nexport enum CountryActionType {\n    LoadCountriesRequested = 'LOAD_COUNTRIES_REQUESTED',\n    LoadCountriesSucceeded = 'LOAD_COUNTRIES_SUCCEEDED',\n    LoadCountriesFailed = 'LOAD_COUNTRIES_FAILED',\n}\n\nexport type LoadCountriesAction =\n    LoadCountriesRequestedAction |\n    LoadCountriesSucceededAction |\n    LoadCountriesFailedAction;\n\nexport interface LoadCountriesRequestedAction extends Action {\n    type: CountryActionType.LoadCountriesRequested;\n}\n\nexport interface LoadCountriesSucceededAction extends Action<Country[]> {\n    type: CountryActionType.LoadCountriesSucceeded;\n}\n\nexport interface LoadCountriesFailedAction extends Action<Error> {\n    type: CountryActionType.LoadCountriesFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Country } from '../geography';\n\nexport enum ShippingCountryActionType {\n    LoadShippingCountriesRequested = 'LOAD_SHIPPING_COUNTRIES_REQUESTED',\n    LoadShippingCountriesSucceeded = 'LOAD_SHIPPING_COUNTRIES_SUCCEEDED',\n    LoadShippingCountriesFailed = 'LOAD_SHIPPING_COUNTRIES_FAILED',\n}\n\nexport type LoadShippingCountriesAction = LoadShippingCountriesRequestedAction |\n    LoadShippingCountriesSucceededAction |\n    LoadShippingCountriesFailedAction;\n\nexport interface LoadShippingCountriesRequestedAction extends Action {\n    type: ShippingCountryActionType.LoadShippingCountriesRequested;\n}\n\nexport interface LoadShippingCountriesSucceededAction extends Action<Country[]> {\n    type: ShippingCountryActionType.LoadShippingCountriesSucceeded;\n}\n\nexport interface LoadShippingCountriesFailedAction extends Action<Error> {\n    type: ShippingCountryActionType.LoadShippingCountriesFailed;\n}\n","module.exports = require(\"@bigcommerce/request-sender\");","export const ACKNOWLEDGE = 'ACKNOWLEDGE';\nexport const FINALIZE = 'FINALIZE';\nexport const INITIALIZE = 'INITIALIZE';\n","module.exports = require(\"@bigcommerce/script-loader\");","enum ContentType {\n    Json = 'application/json',\n    JsonV1 = 'application/vnd.bc.v1+json',\n}\n\nexport default ContentType;\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum SpamProtectionActionType {\n    InitializeFailed = 'SPAM_PROTECTION_INITIALIZE_FAILED',\n    InitializeSucceeded = 'SPAM_PROTECTION_INITIALIZE_SUCCEEDED',\n    InitializeRequested = 'SPAM_PROTECTION_INITIALIZE_REQUESTED',\n    ExecuteRequested = 'SPAM_PROTECTION_EXECUTE_REQUESTED',\n    Completed = 'SPAM_PROTECTION_COMPLETED',\n    SubmitFailed = 'SPAM_PROTECTION_SUBMIT_FAILED',\n}\n\nexport type SpamProtectionAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction |\n    ExecuteRequestedAction |\n    CompletedAction |\n    SubmitFailedAction;\n\nexport interface InitializeRequestedAction extends Action {\n    type: SpamProtectionActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: SpamProtectionActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: SpamProtectionActionType.InitializeFailed;\n}\n\nexport interface ExecuteRequestedAction extends Action {\n    type: SpamProtectionActionType.ExecuteRequested;\n}\n\nexport interface CompletedAction extends Action<string> {\n    type: SpamProtectionActionType.Completed;\n}\n\nexport interface SubmitFailedAction extends Action {\n    type: SpamProtectionActionType.SubmitFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadOrderAction } from '../order';\n\nimport PaymentResponseBody from './payment-response-body';\n\nexport enum PaymentActionType {\n    SubmitPaymentRequested = 'SUBMIT_PAYMENT_REQUESTED',\n    SubmitPaymentSucceeded = 'SUBMIT_PAYMENT_SUCCEEDED',\n    SubmitPaymentFailed = 'SUBMIT_PAYMENT_FAILED',\n\n    InitializeOffsitePaymentRequested = 'INITIALIZE_OFFSITE_PAYMENT_REQUESTED',\n    InitializeOffsitePaymentSucceeded = 'INITIALIZE_OFFSITE_PAYMENT_SUCCEEDED',\n    InitializeOffsitePaymentFailed = 'INITIALIZE_OFFSITE_PAYMENT_FAILED',\n}\n\nexport type PaymentAction = SubmitPaymentAction |\n    InitializeOffsitePaymentAction;\n\nexport type SubmitPaymentAction =\n    SubmitPaymentRequestedAction |\n    SubmitPaymentSucceededAction |\n    SubmitPaymentFailedAction |\n    LoadOrderAction;\n\nexport type InitializeOffsitePaymentAction =\n    InitializeOffsitePaymentRequestedAction |\n    InitializeOffsitePaymentSucceededAction |\n    InitializeOffsitePaymentFailedAction;\n\nexport interface SubmitPaymentRequestedAction extends Action {\n    type: PaymentActionType.SubmitPaymentRequested;\n}\n\nexport interface SubmitPaymentSucceededAction extends Action<PaymentResponseBody> {\n    type: PaymentActionType.SubmitPaymentSucceeded;\n}\n\nexport interface SubmitPaymentFailedAction extends Action<Error> {\n    type: PaymentActionType.SubmitPaymentFailed;\n}\n\nexport interface InitializeOffsitePaymentRequestedAction extends Action {\n    type: PaymentActionType.InitializeOffsitePaymentRequested;\n}\n\nexport interface InitializeOffsitePaymentSucceededAction extends Action {\n    type: PaymentActionType.InitializeOffsitePaymentSucceeded;\n}\n\nexport interface InitializeOffsitePaymentFailedAction extends Action<Error> {\n    type: PaymentActionType.InitializeOffsitePaymentFailed;\n}\n","import StandardError from './standard-error';\n\nexport default class InvalidArgumentError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Invalid arguments have been provided.');\n\n        this.name = 'InvalidArgumentError';\n        this.type = 'invalid_argument';\n    }\n}\n","export const HOSTED = 'PAYMENT_TYPE_HOSTED';\nexport const OFFLINE = 'PAYMENT_TYPE_OFFLINE';\n","import IframeEvent from './iframe-event';\n\nexport default function isIframeEvent<TEvent extends IframeEvent<TType>, TType extends string>(\n    object: any,\n    type: TType\n): object is TEvent {\n    return object.type === type;\n}\n","export interface CompareOptions {\n    keyFilter?(key: string): boolean;\n}\n\nexport default function isEqual(objectA: any, objectB: any, options?: CompareOptions): boolean {\n    if (objectA === objectB) {\n        return true;\n    }\n\n    if (objectA && objectB && typeof objectA === 'object' && typeof objectB === 'object') {\n        if (Array.isArray(objectA) && Array.isArray(objectB)) {\n            return isArrayEqual(objectA, objectB, options);\n        }\n\n        if (Array.isArray(objectA) || Array.isArray(objectB)) {\n            return false;\n        }\n\n        if ((objectA instanceof Date) && (objectB instanceof Date)) {\n            return isDateEqual(objectA, objectB);\n        }\n\n        if ((objectA instanceof Date) || (objectB instanceof Date)) {\n            return false;\n        }\n\n        if ((objectA instanceof RegExp) && (objectB instanceof RegExp)) {\n            return isRegExpEqual(objectA, objectB);\n        }\n\n        if ((objectA instanceof RegExp) || (objectB instanceof RegExp)) {\n            return false;\n        }\n\n        return isObjectEqual(objectA, objectB, options);\n    }\n\n    return objectA === objectB;\n}\n\nfunction isRegExpEqual(objectA: RegExp, objectB: RegExp): boolean {\n    return objectA.toString() === objectB.toString();\n}\n\nfunction isDateEqual(objectA: Date, objectB: Date): boolean {\n    return objectA.getTime() === objectB.getTime();\n}\n\nfunction isArrayEqual(objectA: any[], objectB: any[], options?: CompareOptions): boolean {\n    if (objectA.length !== objectB.length) {\n        return false;\n    }\n\n    for (let index = 0, length = objectA.length; index < length; index++) {\n        if (!isEqual(objectA[index], objectB[index], options)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nfunction isObjectEqual(\n    objectA: { [key: string]: any },\n    objectB: { [key: string]: any },\n    options?: CompareOptions\n): boolean {\n    const filter = options && options.keyFilter;\n    const keysA = filter ? Object.keys(objectA).filter(filter) : Object.keys(objectA);\n    const keysB = filter ? Object.keys(objectB).filter(filter) : Object.keys(objectB);\n\n    if (keysA.length !== keysB.length) {\n        return false;\n    }\n\n    for (let index = 0, length = keysA.length; index < length; index++) {\n        const key = keysA[index];\n\n        if (!objectB.hasOwnProperty(key)) {\n            return false;\n        }\n\n        if (!isEqual(objectA[key], objectB[key], options)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n","module.exports = require(\"@bigcommerce/form-poster\");","module.exports = require(\"local-storage-fallback\");","import { parseUrl } from '../common/url';\n\nexport default class IframeEventPoster<TEvent> {\n    private _targetOrigin: string;\n\n    constructor(\n        targetOrigin: string,\n        private _targetWindow?: Window\n    ) {\n        this._targetOrigin = targetOrigin === '*' ? '*' : parseUrl(targetOrigin).origin;\n    }\n\n    post(event: TEvent): void {\n        if (window === this._targetWindow) {\n            return;\n        }\n\n        if (!this._targetWindow) {\n            throw new Error('Unable to post message becauset target window is not set.');\n        }\n\n        this._targetWindow.postMessage(event, this._targetOrigin);\n    }\n\n    setTarget(window: Window) {\n        this._targetWindow = window;\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadCheckoutAction } from '../checkout';\n\nimport { InternalCustomerResponseData } from './internal-customer-responses';\n\nexport enum CustomerActionType {\n    SignInCustomerRequested = 'SIGN_IN_CUSTOMER_REQUESTED',\n    SignInCustomerSucceeded = 'SIGN_IN_CUSTOMER_SUCCEEDED',\n    SignInCustomerFailed = 'SIGN_IN_CUSTOMER_FAILED',\n\n    SignOutCustomerRequested = 'SIGN_OUT_CUSTOMER_REQUESTED',\n    SignOutCustomerSucceeded = 'SIGN_OUT_CUSTOMER_SUCCEEDED',\n    SignOutCustomerFailed = 'SIGN_OUT_CUSTOMER_FAILED',\n}\n\nexport type CustomerAction =\n    SignInCustomerAction |\n    SignOutCustomerAction;\n\nexport type SignInCustomerAction =\n    SignInCustomerRequestedAction |\n    SignInCustomerSucceededAction |\n    SignInCustomerFailedAction |\n    LoadCheckoutAction;\n\nexport type SignOutCustomerAction =\n    SignOutCustomerRequestedAction |\n    SignOutCustomerSucceededAction |\n    SignOutCustomerFailedAction |\n    LoadCheckoutAction;\n\nexport interface SignInCustomerRequestedAction extends Action {\n    type: CustomerActionType.SignInCustomerRequested;\n}\n\nexport interface SignInCustomerSucceededAction extends Action<InternalCustomerResponseData> {\n    type: CustomerActionType.SignInCustomerSucceeded;\n}\n\nexport interface SignInCustomerFailedAction extends Action<Error> {\n    type: CustomerActionType.SignInCustomerFailed;\n}\n\nexport interface SignOutCustomerRequestedAction extends Action {\n    type: CustomerActionType.SignOutCustomerRequested;\n}\n\nexport interface SignOutCustomerSucceededAction extends Action<InternalCustomerResponseData> {\n    type: CustomerActionType.SignOutCustomerSucceeded;\n}\n\nexport interface SignOutCustomerFailedAction extends Action<Error> {\n    type: CustomerActionType.SignOutCustomerFailed;\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { RequestError } from '../../common/error/errors';\n\nexport default class PaymentMethodInvalidError extends RequestError {\n    constructor(response?: Response) {\n        super(response, { message: 'There is a problem processing your payment. Please try again later.' });\n\n        this.name = 'PaymentMethodInvalidError';\n        this.type = 'payment_method_invalid';\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum ErrorActionType {\n    ClearError = 'CLEAR_ERROR',\n}\n\nexport type ErrorAction = ClearErrorAction;\n\nexport interface ClearErrorAction extends Action {\n    type: ErrorActionType.ClearError;\n    payload: Error;\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { cachableAction, ActionOptions } from '../common/action';\nimport { RequestOptions } from '../common/http-request';\n\nimport { LoadPaymentMethodsAction, LoadPaymentMethodAction, PaymentMethodActionType } from './payment-method-actions';\nimport PaymentMethodRequestSender from './payment-method-request-sender';\n\nexport default class PaymentMethodActionCreator {\n    constructor(\n        private _requestSender: PaymentMethodRequestSender\n    ) {}\n\n    loadPaymentMethods(options?: RequestOptions): Observable<LoadPaymentMethodsAction> {\n        return Observable.create((observer: Observer<LoadPaymentMethodsAction>) => {\n            observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodsRequested));\n\n            this._requestSender.loadPaymentMethods(options)\n                .then(response => {\n                    const meta = {\n                        deviceSessionId: response.headers['x-device-session-id'],\n                        sessionHash: response.headers['x-session-hash'],\n                    };\n\n                    observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodsSucceeded, response.body, meta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(PaymentMethodActionType.LoadPaymentMethodsFailed, response));\n                });\n        });\n    }\n\n    @cachableAction\n    loadPaymentMethod(methodId: string, options?: RequestOptions & ActionOptions): Observable<LoadPaymentMethodAction> {\n        return Observable.create((observer: Observer<LoadPaymentMethodAction>) => {\n            observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodRequested, undefined, { methodId }));\n\n            this._requestSender.loadPaymentMethod(methodId, options)\n                .then(response => {\n                    observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodSucceeded, response.body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(PaymentMethodActionType.LoadPaymentMethodFailed, response, { methodId }));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, INTERNAL_USE_ONLY, RequestOptions } from '../common/http-request';\n\nimport PaymentMethod from './payment-method';\n\nexport default class PaymentMethodRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadPaymentMethods({ timeout }: RequestOptions = {}): Promise<Response<PaymentMethod[]>> {\n        const url = '/api/storefront/payments';\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n        });\n    }\n\n    loadPaymentMethod(methodId: string, { timeout }: RequestOptions = {}): Promise<Response<PaymentMethod>> {\n        const url = `/api/storefront/payments/${methodId}`;\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n        });\n    }\n}\n","import EmbeddedCheckoutStyles from '../embedded-checkout-styles';\n\nexport enum EmbeddedContentEventType {\n    StyleConfigured = 'STYLE_CONFIGURED',\n}\n\nexport interface EmbeddedContentEventMap {\n    [EmbeddedContentEventType.StyleConfigured]: EmbeddedContentStyleConfiguredEvent;\n}\n\nexport type EmbeddedContentEvent = (\n    EmbeddedContentStyleConfiguredEvent\n);\n\nexport interface EmbeddedContentStyleConfiguredEvent {\n    type: EmbeddedContentEventType.StyleConfigured;\n    payload: EmbeddedCheckoutStyles;\n}\n","import { parseUrl } from '../common/url';\nimport { bindDecorator as bind } from '../common/utility';\n\nimport { IframeEventMap } from './iframe-event';\nimport isIframeEvent from './is-iframe-event';\n\nexport default class IframeEventListener<TEventMap extends IframeEventMap<keyof TEventMap>> {\n    private _isListening: boolean;\n    private _listeners: EventListeners<TEventMap>;\n    private _sourceOrigin: string;\n\n    constructor(\n        sourceOrigin: string\n    ) {\n        this._sourceOrigin = parseUrl(sourceOrigin).origin;\n        this._isListening = false;\n        this._listeners = {};\n    }\n\n    listen(): void {\n        if (this._isListening) {\n            return;\n        }\n\n        this._isListening = true;\n\n        window.addEventListener('message', this._handleMessage);\n    }\n\n    stopListen(): void {\n        if (!this._isListening) {\n            return;\n        }\n\n        this._isListening = false;\n\n        window.removeEventListener('message', this._handleMessage);\n    }\n\n    addListener<TType extends keyof TEventMap>(type: TType, listener: (event: TEventMap[TType]) => void): void {\n        let listeners = this._listeners[type];\n\n        if (!listeners) {\n            this._listeners[type] = listeners = [];\n        }\n\n        listeners.push(listener);\n    }\n\n    removeListener<TType extends keyof TEventMap>(type: TType, listener: (event: TEventMap[TType]) => void): void {\n        const listeners = this._listeners[type];\n\n        if (!listeners) {\n            return;\n        }\n\n        const index = listeners.indexOf(listener);\n\n        if (index >= 0) {\n            listeners.splice(index, 1);\n        }\n    }\n\n    trigger<TType extends keyof TEventMap>(event: TEventMap[TType]): void {\n        const listeners = this._listeners[event.type];\n\n        if (!listeners) {\n            return;\n        }\n\n        listeners.forEach(listener => listener(event));\n    }\n\n    @bind\n    private _handleMessage(event: MessageEvent): void {\n        if ((event.origin !== this._sourceOrigin) || !isIframeEvent(event.data, event.data.type)) {\n            return;\n        }\n\n        this.trigger(event.data);\n    }\n}\n\ntype EventListeners<TEventMap> = {\n    [key in keyof TEventMap]?: Array<(event: TEventMap[keyof TEventMap]) => void>;\n};\n","const CHECKOUT_DEFAULT_INCLUDES = [\n    'cart.lineItems.physicalItems.options',\n    'cart.lineItems.digitalItems.options',\n    'customer',\n    'payments',\n    'promotions.banners',\n];\n\nexport default CHECKOUT_DEFAULT_INCLUDES;\n","import InternalLineItem from './internal-line-item';\nimport { LineItem } from './line-item';\nimport LineItemMap from './line-item-map';\nimport mapGiftCertificateToInternalLineItem from './map-gift-certificate-to-internal-line-item';\nimport mapToInternalLineItem from './map-to-internal-line-item';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalLineItems(\n    itemMap: LineItemMap,\n    decimalPlaces: number,\n    idKey: keyof LineItem = 'id'\n): InternalLineItem[] {\n    return (Object.keys(itemMap) as Array<keyof LineItemMap>)\n        .reduce((result, key) => [\n            ...result,\n            ...(itemMap[key] as LineItem[]).map((item: any) => {\n                if (key === 'giftCertificates') {\n                    return mapGiftCertificateToInternalLineItem(item, decimalPlaces);\n                }\n\n                return mapToInternalLineItem(\n                    item,\n                    mapToInternalLineItemType(key),\n                    decimalPlaces,\n                    idKey\n                );\n            }),\n        ], [] as InternalLineItem[]);\n}\n\nfunction mapToInternalLineItemType(type: string): string {\n    switch (type) {\n        case 'physicalItems':\n            return 'ItemPhysicalEntity';\n\n        case 'digitalItems':\n            return 'ItemDigitalEntity';\n\n        case 'giftCertificates':\n            return 'ItemGiftCertificateEntity';\n\n        default:\n            return '';\n    }\n}\n","import { AmountTransformer } from '../common/utility';\n\nimport InternalLineItem from './internal-line-item';\nimport { GiftCertificateItem } from './line-item';\n\nexport default function mapGiftCertificateToInternalLineItem(\n    item: GiftCertificateItem,\n    decimalPlaces: number\n): InternalLineItem {\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: item.id,\n        imageUrl: '',\n        name: item.name,\n        amount: item.amount,\n        amountAfterDiscount: item.amount,\n        discount: 0,\n        integerAmount: amountTransformer.toInteger(item.amount),\n        integerAmountAfterDiscount: amountTransformer.toInteger(item.amount),\n        integerDiscount: 0,\n        quantity: 1,\n        sender: item.sender,\n        recipient: item.recipient,\n        type: 'ItemGiftCertificateEntity',\n        attributes: [],\n        variantId: null,\n    };\n}\n","export const INTERNAL_USE_ONLY = 'This API endpoint is for internal use only and may change in the future';\n","import isEqual from './is-equal';\n\nexport default class CacheKeyResolver {\n    private _lastId = 0;\n    private _maps: CacheKeyMap[] = [];\n\n    getKey(...args: any[]): string {\n        const { index, map, parentMaps } = this._resolveMap(...args);\n\n        if (map && map.cacheKey) {\n            map.usedCount++;\n\n            return map.cacheKey;\n        }\n\n        return this._generateKey(parentMaps, args.slice(index));\n    }\n\n    getUsedCount(...args: any[]): number {\n        const { map } = this._resolveMap(...args);\n\n        return map ? map.usedCount : 0;\n    }\n\n    private _resolveMap(...args: any[]): ResolveResult {\n        let index = 0;\n        let parentMaps = this._maps;\n\n        while (parentMaps.length) {\n            let isMatched = false;\n\n            for (const map of parentMaps) {\n                if (!isEqual(map.value, args[index])) {\n                    continue;\n                }\n\n                if ((args.length === 0 || index === args.length - 1) && map.cacheKey) {\n                    return { index, map, parentMaps };\n                }\n\n                isMatched = true;\n                parentMaps = map.maps;\n                index++;\n\n                break;\n            }\n\n            if (!isMatched) {\n                break;\n            }\n        }\n\n        return { index, parentMaps };\n    }\n\n    private _generateKey(maps: CacheKeyMap[], args: any[]): string {\n        let index = 0;\n        let parentMaps = maps;\n        let map!: CacheKeyMap;\n\n        do {\n            map = {\n                usedCount: 1,\n                value: args[index],\n                maps: [],\n            };\n\n            parentMaps.push(map);\n\n            parentMaps = map.maps;\n            index++;\n        } while (index < args.length);\n\n        map.cacheKey = `${++this._lastId}`;\n\n        return map.cacheKey;\n    }\n}\n\ninterface CacheKeyMap {\n    maps: CacheKeyMap[];\n    value: any;\n    usedCount: number;\n    cacheKey?: string;\n}\n\ninterface ResolveResult {\n    index: number;\n    parentMaps: CacheKeyMap[];\n    map?: CacheKeyMap;\n}\n","/**\n * Decorates a class or a method by binding all its prototype methods or itself\n * to the calling instance respectively.\n */\nexport default function bindDecorator<T extends Method>(target: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T>;\nexport default function bindDecorator<T extends Constructor<object>>(target: T): T;\nexport default function bindDecorator(target: any, key?: any, descriptor?: any): any {\n    if (!key || !descriptor) {\n        return bindClassDecorator(target);\n    }\n\n    return bindMethodDecorator(target, key, descriptor);\n}\n\n/**\n * Decorates a class by binding all its prototype methods to the calling\n * instance.\n */\nexport function bindClassDecorator<T extends Constructor<object>>(target: T): T {\n    const decoratedTarget = class extends target {};\n\n    Object.getOwnPropertyNames(target.prototype)\n        .forEach(key => {\n            const descriptor = Object.getOwnPropertyDescriptor(target.prototype, key);\n\n            if (!descriptor || key === 'constructor') {\n                return;\n            }\n\n            Object.defineProperty(\n                decoratedTarget.prototype,\n                key,\n                bindMethodDecorator(target.prototype, key, descriptor)\n            );\n        });\n\n    return decoratedTarget;\n}\n\n/**\n * Decorates a method by binding it to the calling instance.\n */\nexport function bindMethodDecorator<T extends Method>(target: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T> {\n    if (typeof descriptor.value !== 'function') {\n        return descriptor;\n    }\n\n    let method: T = descriptor.value;\n\n    return {\n        get() {\n            const boundMethod = method.bind(this);\n\n            Object.defineProperty(this, key, {\n                ...descriptor,\n                value: boundMethod,\n            });\n\n            return boundMethod;\n        },\n        set(value) {\n            method = value;\n        },\n    };\n}\n\nexport type Constructor<T> = new (...args: any[]) => T;\nexport type Method = (...args: any[]) => any;\n","export enum CheckoutIncludes {\n    AvailableShippingOptions = 'consignments.availableShippingOptions',\n    PhysicalItemsCategoryNames = 'cart.lineItems.physicalItems.categoryNames',\n    DigitalItemsCategoryNames = 'cart.lineItems.digitalItems.categoryNames',\n}\n\nexport default interface CheckoutParams {\n    include?: CheckoutIncludes[];\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\nimport { GooglePayCreator } from '../googlepay';\n\nimport {\n    BraintreeClientCreator,\n    BraintreeDataCollectorCreator,\n    BraintreeHostWindow,\n    BraintreePaypalCheckoutCreator,\n    BraintreePaypalCreator,\n    BraintreeThreeDSecureCreator,\n    BraintreeVisaCheckoutCreator,\n} from './braintree';\n\nexport default class BraintreeScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: BraintreeHostWindow = window\n    ) {}\n\n    loadClient(): Promise<BraintreeClientCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/client.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.client) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.client;\n            });\n    }\n\n    load3DS(): Promise<BraintreeThreeDSecureCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/three-d-secure.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.threeDSecure) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.threeDSecure;\n            });\n    }\n\n    loadDataCollector(): Promise<BraintreeDataCollectorCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/data-collector.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.dataCollector) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.dataCollector;\n            });\n    }\n\n    loadPaypal(): Promise<BraintreePaypalCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/paypal.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.paypal) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.paypal;\n            });\n    }\n\n    loadPaypalCheckout(): Promise<BraintreePaypalCheckoutCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/paypal-checkout.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.paypalCheckout) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.paypalCheckout;\n            });\n    }\n\n    loadVisaCheckout(): Promise<BraintreeVisaCheckoutCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/visa-checkout.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.visaCheckout) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.visaCheckout;\n            });\n    }\n\n    loadGooglePayment(): Promise<GooglePayCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/google-payment.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.googlePayment) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.googlePayment;\n            });\n    }\n}\n","import { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\n\nimport {\n    BraintreeClient,\n    BraintreeDataCollector,\n    BraintreeModule,\n    BraintreePaypal,\n    BraintreePaypalCheckout,\n    BraintreeThreeDSecure,\n    BraintreeVisaCheckout,\n    GooglePayBraintreeSDK,\n} from './braintree';\nimport BraintreeScriptLoader from './braintree-script-loader';\n\nexport default class BraintreeSDKCreator {\n    private _client?: Promise<BraintreeClient>;\n    private _3ds?: Promise<BraintreeThreeDSecure>;\n    private _paypal?: Promise<BraintreePaypal>;\n    private _paypalCheckout?: Promise<BraintreePaypalCheckout>;\n    private _clientToken?: string;\n    private _visaCheckout?: Promise<BraintreeVisaCheckout>;\n    private _dataCollectors: {\n        default?: Promise<BraintreeDataCollector>;\n        paypal?: Promise<BraintreeDataCollector>;\n    } = {};\n    private _googlePay?: Promise<GooglePayBraintreeSDK>;\n\n    constructor(\n        private _braintreeScriptLoader: BraintreeScriptLoader\n    ) {}\n\n    initialize(clientToken: string) {\n        this._clientToken = clientToken;\n    }\n\n    getClient(): Promise<BraintreeClient> {\n        if (!this._clientToken) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!this._client) {\n            this._client = this._braintreeScriptLoader.loadClient()\n                .then(client => client.create({ authorization: this._clientToken }));\n        }\n\n        return this._client;\n    }\n\n    getPaypal(): Promise<BraintreePaypal> {\n        if (!this._paypal) {\n            this._paypal = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadPaypal(),\n            ])\n            .then(([client, paypal]) => paypal.create({ client }));\n        }\n\n        return this._paypal;\n    }\n\n    getPaypalCheckout(): Promise<BraintreePaypalCheckout> {\n        if (!this._paypalCheckout) {\n            this._paypalCheckout = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadPaypalCheckout(),\n            ])\n                .then(([client, paypalCheckout]) => paypalCheckout.create({ client }));\n        }\n\n        return this._paypalCheckout;\n    }\n\n    get3DS(): Promise<BraintreeThreeDSecure> {\n        if (!this._3ds) {\n            this._3ds = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.load3DS(),\n            ])\n            .then(([client, threeDSecure]) => threeDSecure.create({ client }));\n        }\n\n        return this._3ds;\n    }\n\n    getDataCollector(options?: { paypal: boolean }): Promise<BraintreeDataCollector> {\n        const cacheKey = options && options.paypal ? 'paypal' : 'default';\n        let cached = this._dataCollectors[cacheKey];\n\n        if (!cached) {\n            cached = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadDataCollector(),\n            ])\n            .then(([client, dataCollector]) => dataCollector.create({ client, kount: true, ...options }))\n            .catch(error => {\n                if (error && error.code === 'DATA_COLLECTOR_KOUNT_NOT_ENABLED') {\n                    return { deviceData: undefined, teardown: () => Promise.resolve() };\n                }\n\n                throw error;\n            });\n\n            this._dataCollectors[cacheKey] = cached;\n        }\n\n        return cached;\n    }\n\n    getVisaCheckout(): Promise<BraintreeVisaCheckout> {\n        if (!this._visaCheckout) {\n            this._visaCheckout = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadVisaCheckout(),\n            ])\n            .then(([client, visaCheckout]) => visaCheckout.create({ client }));\n        }\n\n        return this._visaCheckout;\n    }\n\n    getGooglePaymentComponent(): Promise<GooglePayBraintreeSDK> {\n        if (!this._googlePay) {\n            this._googlePay = Promise.all ([\n                this.getClient(),\n                this._braintreeScriptLoader.loadGooglePayment(),\n            ])\n                .then(([client, googlePay]) => googlePay.create({ client }));\n        }\n\n        return this._googlePay;\n    }\n\n    teardown(): Promise<void> {\n        return Promise.all([\n            this._teardown(this._3ds),\n            this._teardown(this._dataCollectors.default),\n            this._teardown(this._dataCollectors.paypal),\n            this._teardown(this._visaCheckout),\n            this._teardown(this._googlePay),\n        ]).then(() => {\n            this._3ds = undefined;\n            this._visaCheckout = undefined;\n            this._dataCollectors = {};\n            this._googlePay = undefined;\n        });\n    }\n\n    private _teardown(module?: Promise<BraintreeModule>) {\n        return module ?\n            module.then(mod => mod.teardown()) :\n            Promise.resolve();\n    }\n}\n","import { AmountTransformer } from '../common/utility';\n\nimport InternalLineItem from './internal-line-item';\nimport { DigitalItem, LineItem } from './line-item';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalLineItem(\n    item: LineItem,\n    type: string,\n    decimalPlaces: number,\n    idKey: keyof LineItem = 'id'\n): InternalLineItem {\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: (item[idKey] as string | number),\n        imageUrl: item.imageUrl,\n        amount: item.extendedListPrice,\n        amountAfterDiscount: item.extendedSalePrice,\n        discount: item.discountAmount,\n        integerAmount: amountTransformer.toInteger(item.extendedListPrice),\n        integerAmountAfterDiscount: amountTransformer.toInteger(item.extendedSalePrice),\n        integerDiscount: amountTransformer.toInteger(item.discountAmount),\n        downloadsPageUrl: (item as DigitalItem).downloadPageUrl,\n        name: item.name,\n        quantity: item.quantity,\n        brand: item.brand,\n        categoryNames: item.categoryNames,\n        variantId: item.variantId,\n        productId: item.productId,\n        attributes: (item.options || []).map(option => ({\n            name: option.name,\n            value: option.value,\n        })),\n        addedByPromotion: item.addedByPromotion,\n        type,\n    };\n}\n","module.exports = require(\"iframe-resizer\");","export default function isPrivate(key: string): boolean {\n    return `${key}`.indexOf('$$') === 0 || `${key}`.indexOf('_') === 0;\n}\n","import StandardError from './standard-error';\n\nexport enum NotInitializedErrorType {\n    CheckoutButtonNotInitialized,\n    CustomerNotInitialized,\n    PaymentNotInitialized,\n    ShippingNotInitialized,\n    SpamProtectionNotInitialized,\n}\n\nexport default class NotInitializedError extends StandardError {\n    constructor(\n        public subtype: NotInitializedErrorType\n    ) {\n        super(getErrorMessage(subtype));\n\n        this.name = 'NotInitializedError';\n        this.type = 'not_initialized';\n    }\n}\n\nfunction getErrorMessage(type: NotInitializedErrorType): string {\n    switch (type) {\n    case NotInitializedErrorType.CustomerNotInitialized:\n        return 'Unable to proceed because the customer step of checkout has not been initialized.';\n\n    case NotInitializedErrorType.PaymentNotInitialized:\n        return 'Unable to proceed because the payment step of checkout has not been initialized.';\n\n    case NotInitializedErrorType.ShippingNotInitialized:\n        return 'Unable to proceed because the shipping step of checkout has not been initialized.';\n\n    case NotInitializedErrorType.SpamProtectionNotInitialized:\n        return 'Unable to proceed because the checkout spam protection has not been initialized.';\n\n    default:\n        return 'Unable to proceed because the required component has not been initialized.';\n    }\n}\n","import { createErrorAction, Action } from '@bigcommerce/data-store';\nimport { concat, of, throwError, Observable } from 'rxjs';\n\nexport default function throwErrorAction<TPayload, TMeta, TType extends string>(\n    type: TType,\n    error?: TPayload,\n    meta?: TMeta\n): Observable<Action<TPayload, TMeta, TType>> {\n    if (isErrorAction(error)) {\n        return concat(of(error), throwError(createErrorAction(type, error.payload, meta)));\n    }\n\n    return throwError(createErrorAction(type, error, meta));\n}\n\nfunction isErrorAction(action: any): action is Action {\n    return action && action.type && action.error;\n}\n","export default class AmountTransformer {\n    constructor(private _decimalPlaces: number) {}\n\n    toInteger(amount: number): number {\n        return Math.round(amount * Math.pow(10, this._decimalPlaces));\n    }\n}\n","import { InvalidArgumentError } from '../error/errors';\n\nimport Url from './url';\n\nexport default function parseUrl(url: string): Url {\n    if (!/^(https?:)?\\/\\//.test(url)) {\n        throw new InvalidArgumentError('The provided URL must be absolute.');\n    }\n\n    // new URL() is not supported in IE11, use anchor tag instead\n    const anchor = document.createElement('a');\n\n    anchor.href = url;\n\n    return {\n        hash: anchor.hash,\n        hostname: anchor.hostname,\n        href: anchor.href,\n        origin: anchor.origin,\n        pathname: anchor.pathname,\n        port: anchor.port,\n        protocol: anchor.protocol,\n        search: anchor.search,\n    };\n}\n","import cacheAction from './cache-action';\nimport isActionOptions from './is-action-options';\n\nexport default function cachableActionDecorator<TMethod extends (...args: any[]) => any>(\n    target: object,\n    key: string,\n    descriptor: TypedPropertyDescriptor<TMethod>\n): TypedPropertyDescriptor<TMethod> {\n    const memoizedMethods = new WeakMap<object, { [key: string]: TMethod }>();\n\n    function decorateMethod(this: object, method: TMethod): TMethod {\n        return ((...args: any[]) => {\n            const lastArg = args[args.length - 1];\n            const { useCache } = isActionOptions(lastArg) ? lastArg : { useCache: false };\n\n            if (!useCache) {\n                return method.call(this, ...args);\n            }\n\n            const instanceMethods = memoizedMethods.get(this) || {};\n\n            if (!memoizedMethods.get(this)) {\n                memoizedMethods.set(this, instanceMethods);\n            }\n\n            if (!instanceMethods[key]) {\n                instanceMethods[key] = cacheAction(method);\n            }\n\n            return instanceMethods[key].call(this, ...args);\n        }) as TMethod;\n    }\n\n    return {\n        get() {\n            if (typeof descriptor.value !== 'function') {\n                return descriptor.value;\n            }\n\n            const value = decorateMethod.call(this, descriptor.value);\n\n            Object.defineProperty(this, key, { ...descriptor, value });\n\n            return value;\n        },\n    };\n}\n","import ActionOptions from './action-options';\n\nexport default function isActionOptions(param: any): param is ActionOptions {\n    return param && typeof param.useCache === 'boolean';\n}\n","import { Action, ThunkAction } from '@bigcommerce/data-store';\nimport { memoize } from 'lodash';\nimport { from, Observable } from 'rxjs';\nimport { shareReplay } from 'rxjs/operators';\n\nimport { CacheKeyResolver } from '../utility';\n\nexport default function cacheAction<TFunction extends CreateActionFn>(\n    fn: TFunction\n): TFunction {\n    const resolver = new CacheKeyResolver();\n\n    function decoratedFn(this: any, ...args: any[]) {\n        const action = fn.call(this, ...args);\n\n        if (action instanceof Observable) {\n            return from(action).pipe(shareReplay());\n        }\n\n        if (typeof action === 'function') {\n            return memoize(store => from(action(store)).pipe(shareReplay()));\n        }\n\n        return action;\n    }\n\n    return memoize(\n        decoratedFn as TFunction,\n        (...args) => resolver.getKey(...args)\n    );\n}\n\ntype CreateActionFn = (...args: any[]) => Observable<Action> | ThunkAction<Action> | Action;\n","import { isPlainObject, omitBy, transform } from 'lodash';\n\nexport default function omitDeep(object: any, predicate: (value: any, key: string) => boolean): any {\n    if (Array.isArray(object)) {\n        return object.map(value => omitDeep(value, predicate));\n    }\n\n    if (isPlainObject(object)) {\n        return transform(omitBy(object, predicate), (result, value, key) => {\n            result[key] = omitDeep(value, predicate);\n        }, {});\n    }\n\n    return object;\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, merge, of, Observable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType, StandardError } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { ConfigActionCreator } from '../config';\n\nimport { CheckoutRequestBody } from './checkout';\nimport { CheckoutActionType, LoadCheckoutAction, UpdateCheckoutAction } from './checkout-actions';\nimport CheckoutRequestSender from './checkout-request-sender';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\nexport default class CheckoutActionCreator {\n    constructor(\n        private _checkoutRequestSender: CheckoutRequestSender,\n        private _configActionCreator: ConfigActionCreator\n    ) {}\n\n    loadCheckout(id: string, options?: RequestOptions): Observable<LoadCheckoutAction> {\n        return concat(\n            of(createAction(CheckoutActionType.LoadCheckoutRequested)),\n            merge(\n                this._configActionCreator.loadConfig({ ...options, useCache: true }),\n                defer(() => this._checkoutRequestSender.loadCheckout(id, options)\n                    .then(({ body }) => createAction(CheckoutActionType.LoadCheckoutSucceeded, body)))\n            )\n        ).pipe(\n            catchError(error => throwErrorAction(CheckoutActionType.LoadCheckoutFailed, error))\n        );\n    }\n\n    loadDefaultCheckout(options?: RequestOptions): ThunkAction<LoadCheckoutAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(CheckoutActionType.LoadCheckoutRequested)),\n            this._configActionCreator.loadConfig(),\n            defer(() => {\n                const state = store.getState();\n                const context = state.config.getContextConfig();\n\n                if (!context || !context.checkoutId) {\n                    throw new StandardError('Unable to load checkout: no cart is available');\n                }\n\n                return this._checkoutRequestSender.loadCheckout(context.checkoutId, options)\n                    .then(({ body }) => createAction(CheckoutActionType.LoadCheckoutSucceeded, body));\n            })\n        ).pipe(\n            catchError(error => throwErrorAction(CheckoutActionType.LoadCheckoutFailed, error))\n        );\n    }\n\n    updateCheckout(\n        body: CheckoutRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateCheckoutAction, InternalCheckoutSelectors> {\n        return store => new Observable(observer => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(CheckoutActionType.UpdateCheckoutRequested));\n\n            this._checkoutRequestSender.updateCheckout(checkout.id, body, options)\n                .then(({ body }) => {\n                    observer.next(createAction(CheckoutActionType.UpdateCheckoutSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CheckoutActionType.UpdateCheckoutFailed, response));\n                });\n        });\n    }\n\n    loadCurrentCheckout(options?: RequestOptions): ThunkAction<LoadCheckoutAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            return this.loadCheckout(checkout.id, options);\n        };\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { AddressRequestBody } from '../address';\nimport { Cart } from '../cart';\nimport { InternalCheckoutSelectors, ReadableCheckoutStore } from '../checkout';\nimport { CheckoutIncludes } from '../checkout/checkout-params';\nimport CheckoutRequestSender from '../checkout/checkout-request-sender';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport Consignment, {\n    ConsignmentsRequestBody,\n    ConsignmentAssignmentRequestBody,\n    ConsignmentCreateRequestBody,\n    ConsignmentLineItem,\n    ConsignmentRequestBody,\n    ConsignmentShippingOptionRequestBody,\n    ConsignmentUpdateRequestBody\n} from './consignment';\nimport {\n    ConsignmentActionType,\n    CreateConsignmentsAction,\n    DeleteConsignmentAction,\n    LoadShippingOptionsAction,\n    UpdateConsignmentAction,\n    UpdateShippingOptionAction,\n} from './consignment-actions';\nimport ConsignmentRequestSender from './consignment-request-sender';\n\nexport default class ConsignmentActionCreator {\n    constructor(\n        private _consignmentRequestSender: ConsignmentRequestSender,\n        private _checkoutRequestSender: CheckoutRequestSender\n    ) {}\n\n    unassignItemsByAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<DeleteConsignmentAction | UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const existingConsignment = state.consignments.getConsignmentByAddress(consignment.shippingAddress);\n\n            if (!existingConsignment) {\n                throw new InvalidArgumentError('No consignment found for the specified address');\n            }\n\n            const lineItems = this._removeLineItems(\n                consignment.lineItems,\n                existingConsignment,\n                state.cart.getCart()\n            );\n\n            if (!lineItems.length) {\n                return this.deleteConsignment(existingConsignment.id, options)(store);\n            }\n\n            return this.updateConsignment({\n                id: existingConsignment.id,\n                shippingAddress: consignment.shippingAddress,\n                lineItems,\n            }, options)(store);\n        };\n    }\n\n    assignItemsByAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateConsignmentAction | CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const existingConsignment = state.consignments.getConsignmentByAddress(consignment.shippingAddress);\n\n            return this._createOrUpdateConsignment({\n                id: existingConsignment && existingConsignment.id,\n                shippingAddress: consignment.shippingAddress,\n                lineItems: this._addLineItems(\n                    consignment.lineItems,\n                    existingConsignment,\n                    state.cart.getCart()\n                ),\n            }, options)(store);\n        };\n    }\n\n    selectShippingOption(\n        id: string,\n        options?: RequestOptions\n    ): ThunkAction<UpdateShippingOptionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateShippingOptionAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n            const consignments = state.consignments.getConsignments();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            if (!consignments || !consignments.length) {\n                throw new MissingDataError(MissingDataErrorType.MissingConsignments);\n            }\n\n            const consignmentUpdateBody = {\n                id: consignments[0].id,\n                shippingOptionId: id,\n            };\n\n            const consignmentMeta = {\n                id: consignments[0].id,\n            };\n\n            observer.next(createAction(ConsignmentActionType.UpdateShippingOptionRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignmentUpdateBody, options)\n                .then(({ body }) => {\n                    observer.next(createAction(\n                        ConsignmentActionType.UpdateShippingOptionSucceeded,\n                        body,\n                        consignmentMeta\n                    ));\n\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(\n                        ConsignmentActionType.UpdateShippingOptionFailed,\n                        response,\n                        consignmentMeta\n                    ));\n                });\n        });\n    }\n\n    loadShippingOptions(options?: RequestOptions): ThunkAction<LoadShippingOptionsAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<LoadShippingOptionsAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.LoadShippingOptionsRequested));\n\n            this._checkoutRequestSender.loadCheckout(checkout.id, {\n                ...options,\n                params: {\n                    include: [CheckoutIncludes.AvailableShippingOptions],\n                },\n            })\n            .then(({ body }) => {\n                observer.next(createAction(ConsignmentActionType.LoadShippingOptionsSucceeded, body));\n                observer.complete();\n            })\n            .catch(response => {\n                observer.error(createErrorAction(ConsignmentActionType.LoadShippingOptionsFailed, response));\n            });\n        });\n    }\n\n    updateAddress(\n        address: AddressRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<CreateConsignmentsAction | UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return store => {\n            const consignment = this._getConsignmentRequestBody(address, store);\n            const consignments = store.getState().consignments.getConsignments();\n\n            if (consignments && consignments.length) {\n                (consignment as ConsignmentUpdateRequestBody).id = consignments[0].id;\n            }\n\n            return this._createOrUpdateConsignment(consignment, options)(store);\n        };\n    }\n\n    createConsignments(\n        consignments: ConsignmentsRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<CreateConsignmentsAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.CreateConsignmentsRequested));\n\n            this._consignmentRequestSender.createConsignments(checkout.id, consignments, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.CreateConsignmentsSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.CreateConsignmentsFailed, response));\n                });\n        });\n    }\n\n    updateConsignment(\n        consignment: ConsignmentUpdateRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateConsignmentAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const consignmentMeta = { id: consignment.id };\n\n            observer.next(createAction(ConsignmentActionType.UpdateConsignmentRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignment, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.UpdateConsignmentSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.UpdateConsignmentFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    deleteConsignment(\n        consignmentId: string,\n        options?: RequestOptions\n    ): ThunkAction<DeleteConsignmentAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<DeleteConsignmentAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n            const consignmentMeta = { id: consignmentId };\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.DeleteConsignmentRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.deleteConsignment(checkout.id, consignmentId, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.DeleteConsignmentSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.DeleteConsignmentFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    updateShippingOption(\n        consignment: ConsignmentShippingOptionRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateShippingOptionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateShippingOptionAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const consignmentMeta = { id: consignment.id };\n\n            observer.next(createAction(ConsignmentActionType.UpdateShippingOptionRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignment, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.UpdateShippingOptionSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.UpdateShippingOptionFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    private _createOrUpdateConsignment(\n        consignment: ConsignmentCreateRequestBody | ConsignmentUpdateRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateConsignmentAction | CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return store => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            if (this._isUpdateConsignmentRequest(consignment)) {\n                return this.updateConsignment(consignment, options)(store);\n            }\n\n            return this.createConsignments([consignment], options)(store);\n        };\n    }\n\n    private _getConsignmentRequestBody(\n        shippingAddress: AddressRequestBody,\n        store: ReadableCheckoutStore\n    ): ConsignmentRequestBody {\n        const state = store.getState();\n        const cart = state.cart.getCart();\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        return {\n            shippingAddress,\n            lineItems: (cart.lineItems && cart.lineItems.physicalItems || [])\n                .map(item => ({\n                    itemId: item.id,\n                    quantity: item.quantity,\n                })\n            ),\n        };\n    }\n\n    private _removeLineItems(\n        lineItems: ConsignmentLineItem[],\n        consignment: Consignment,\n        cart?: Cart\n    ): ConsignmentLineItem[] {\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        return this._hydrateLineItems(consignment.lineItemIds, cart).map(existingItem => {\n            const sharedItem = lineItems.find(lineItem => lineItem.itemId === existingItem.itemId);\n\n            return {\n                ...existingItem,\n                quantity: sharedItem ? (existingItem.quantity - sharedItem.quantity) : existingItem.quantity,\n            };\n        }).filter(lineItem => lineItem.quantity > 0);\n    }\n\n    private _addLineItems(\n        lineItems: ConsignmentLineItem[],\n        consignment?: Consignment,\n        cart?: Cart\n    ): ConsignmentLineItem[] {\n        if (!consignment) {\n            return lineItems;\n        }\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        return lineItems\n            .concat(this._hydrateLineItems(consignment.lineItemIds, cart))\n            .filter(lineItem => lineItem.quantity > 0);\n    }\n\n    private _hydrateLineItems(lineItemIds: string[], cart: Cart): ConsignmentLineItem[] {\n        return lineItemIds.map(itemId => {\n            const item = cart.lineItems.physicalItems.find(lineItem => lineItem.id === itemId );\n\n            return {\n                itemId,\n                quantity: item ? item.quantity : 0,\n            };\n        });\n    }\n\n    private _isUpdateConsignmentRequest(\n        request: ConsignmentRequestBody\n    ): request is ConsignmentUpdateRequestBody {\n        const updateRequest = request as ConsignmentUpdateRequestBody;\n\n        return !!updateRequest.id;\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout } from '../checkout';\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nimport { ConsignmentsRequestBody, ConsignmentUpdateRequestBody } from './consignment';\n\nconst DEFAULT_PARAMS = {\n    include: [\n        'consignments.availableShippingOptions',\n        'cart.lineItems.physicalItems.options',\n        'cart.lineItems.digitalItems.options',\n        'customer',\n        'promotions.banners',\n    ].join(','),\n};\n\nexport default class ConsignmentRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    createConsignments(checkoutId: string, consignments: ConsignmentsRequestBody, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, { body: consignments, params: DEFAULT_PARAMS, headers, timeout });\n    }\n\n    updateConsignment(checkoutId: string, consignment: ConsignmentUpdateRequestBody, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const { id, ...body } = consignment;\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.put(url, { params: DEFAULT_PARAMS, body, headers, timeout });\n    }\n\n    deleteConsignment(checkoutId: string, consignmentId: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments/${consignmentId}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.delete(url, { params: DEFAULT_PARAMS, headers, timeout });\n    }\n}\n","export default function getCallbackUrl(origin: string): string {\n    return `${window.location.origin}/checkout.php?action=set_external_checkout&provider=masterpass&gateway=stripe&origin=${origin}`;\n}\n","import InternalShippingOption from './internal-shipping-option';\nimport ShippingOption from './shipping-option';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalShippingOption(option: ShippingOption, isSelected: boolean): InternalShippingOption {\n    return {\n        description: option.description,\n        module: option.type,\n        price: option.cost,\n        id: option.id,\n        selected: isSelected,\n        isRecommended: option.isRecommended,\n        imageUrl: option.imageUrl,\n        transitTime: option.transitTime,\n    };\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport RequestError from './request-error';\n\nexport default class UnrecoverableError extends RequestError {\n    constructor(response: Response, message?: string) {\n        super(response, {\n            message: message || 'An unexpected error has occurred. The checkout process cannot continue as a result.',\n        });\n\n        this.name = 'UnrecoverableError';\n        this.type = 'unrecoverable';\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { InternalErrorResponseBody } from '../error-response-body';\n\nimport RequestError from './request-error';\n\nexport default function mapFromInternalErrorResponse(\n    response: Response<InternalErrorResponseBody>,\n    message?: string\n): RequestError {\n    const { body } = response;\n    const { errors = [] } = body;\n\n    return new RequestError(response, {\n        message: joinErrors(errors) || body.detail || body.title || message,\n        errors: errors.length ?\n            errors.map(message => ({ code: body.type, message })) :\n            [{ code: body.type, message: body.detail || body.title }],\n    });\n}\n\nfunction joinErrors(errors: string[]): string | undefined {\n    return errors.reduce((result: string[], error) => {\n        if (error) {\n            return [...result, error];\n        }\n\n        return result;\n    }, []).join(' ');\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { PaymentErrorResponseBody } from '../error-response-body';\n\nimport RequestError from './request-error';\n\nexport default function mapFromPaymentErrorResponse(\n    response: Response<PaymentErrorResponseBody>,\n    message?: string\n): RequestError {\n    const { body } = response;\n    const { errors = [] } = body;\n\n    return new RequestError(response, {\n        message: joinErrors(errors) || message,\n        errors,\n    });\n}\n\nfunction joinErrors(errors: Array<{ code: string; message?: string }>): string | undefined {\n    if (!Array.isArray(errors)) {\n        return;\n    }\n\n    return errors.reduce((result: string[], error) => {\n        if (error && error.message) {\n            return [...result, error.message];\n        }\n\n        return result;\n    }, []).join(' ');\n}\n","import { Response } from '@bigcommerce/request-sender';\nimport { last } from 'lodash';\n\nimport ErrorResponseBody, {\n    InternalErrorResponseBody,\n    StorefrontErrorResponseBody\n} from './error-response-body';\nimport { RequestError, TimeoutError } from './errors';\nimport mapFromInternalErrorResponse from './errors/map-from-internal-error-response';\nimport mapFromPaymentErrorResponse from './errors/map-from-payment-error-response';\nimport mapFromStorefrontErrorResponse from './errors/map-from-storefront-error-response';\n\nexport default class RequestErrorFactory {\n    private _factoryMethods: { [key: string]: ErrorFactoryMethod } = {};\n\n    constructor() {\n        this.register('default', (response, message) => new RequestError(response, { message }));\n        this.register('internal', (response, message) => mapFromInternalErrorResponse(response, message));\n        this.register('storefront', (response, message) => mapFromStorefrontErrorResponse(response, message));\n        this.register('payment', (response, message) => mapFromPaymentErrorResponse(response, message));\n        this.register('timeout', response => new TimeoutError(response));\n    }\n\n    register(type: string, factoryMethod: ErrorFactoryMethod): void {\n        this._factoryMethods[type] = factoryMethod;\n    }\n\n    createError(response: Response, message?: string): RequestError {\n        const factoryMethod = this._factoryMethods[this._getType(response)] || this._factoryMethods.default;\n\n        return factoryMethod(response, message);\n    }\n\n    private _getType(response: Response<ErrorResponseBody>): string {\n        if (response.status === 0) {\n            return 'timeout';\n        }\n\n        if (this._isStorefrontErrorResponseBody(response.body)) {\n            return 'storefront';\n        }\n\n        if (this._isInternalErrorResponseBody(response.body)) {\n            const internalType = last(response.body.type.split('/'));\n\n            return internalType && this._factoryMethods[internalType] ?\n                internalType :\n                'internal';\n        }\n\n        const error = last(response.body && response.body.errors);\n\n        if (error && error.code && this._factoryMethods[error.code]) {\n            return error.code;\n        }\n\n        return 'payment';\n    }\n\n    private _isStorefrontErrorResponseBody(\n        errorResponse: ErrorResponseBody\n    ): errorResponse is StorefrontErrorResponseBody {\n        const storefrontErrorResponse = errorResponse as StorefrontErrorResponseBody;\n\n        return !this._isInternalErrorResponseBody(errorResponse) &&\n            typeof storefrontErrorResponse.title === 'string' &&\n            typeof storefrontErrorResponse.type === 'string' &&\n            typeof storefrontErrorResponse.status === 'number' &&\n            typeof storefrontErrorResponse.detail === 'string';\n    }\n\n    private _isInternalErrorResponseBody(\n        errorResponse: ErrorResponseBody\n    ): errorResponse is InternalErrorResponseBody {\n        const internalErrorResponse = errorResponse as InternalErrorResponseBody;\n\n        return typeof internalErrorResponse.errors === 'object' &&\n            typeof internalErrorResponse.title === 'string' &&\n            typeof internalErrorResponse.type === 'string' &&\n            typeof internalErrorResponse.status === 'number';\n    }\n}\n\nexport type ErrorFactoryMethod = (response: Response, message?: string) => RequestError;\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { StorefrontErrorResponseBody } from '../error-response-body';\n\nimport RequestError from './request-error';\n\nexport default function mapFromStorefrontErrorResponse(\n    response: Response<StorefrontErrorResponseBody>,\n    message?: string\n): RequestError<StorefrontErrorResponseBody> {\n    const { body } = response;\n\n    return new RequestError(response, {\n        message: message || body.detail || body.title,\n        errors: [{\n            code: body.code || body.type,\n            message: body.detail || body.title,\n        }],\n    });\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { omitDeep } from '../utility';\n\nimport { ClearErrorAction, ErrorActionType } from './error-actions';\n\nexport default function clearErrorReducer<TState extends { [key: string]: any }, TAction extends Action>(\n    state: TState,\n    action: TAction\n): TState | undefined {\n    if (isClearErrorAction(action)) {\n        return omitDeep(state, value => value === action.payload);\n    }\n\n    return state;\n}\n\nfunction isClearErrorAction(action: Action): action is ClearErrorAction {\n    return action.type === ErrorActionType.ClearError;\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { OrderAction, OrderActionType } from '../order';\n\nimport BillingAddress from './billing-address';\nimport { BillingAddressAction, BillingAddressActionType } from './billing-address-actions';\nimport BillingAddressState, { BillingAddressErrorsState, BillingAddressStatusesState } from './billing-address-state';\n\nconst DEFAULT_STATE: BillingAddressState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function billingAddressReducer(\n    state: BillingAddressState = DEFAULT_STATE,\n    action: Action\n): BillingAddressState {\n    const reducer = combineReducers<BillingAddressState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: BillingAddress | undefined,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddress | undefined {\n    switch (action.type) {\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case OrderActionType.LoadOrderSucceeded:\n        return action.payload ? action.payload.billingAddress : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: BillingAddressErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddressErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return { ...errors, loadError: action.payload };\n\n    case BillingAddressActionType.UpdateBillingAddressRequested:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n        return { ...errors, updateError: undefined };\n\n    case BillingAddressActionType.UpdateBillingAddressFailed:\n        return { ...errors, updateError: action.payload };\n\n    case BillingAddressActionType.ContinueAsGuestRequested:\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n        return { ...errors, continueAsGuestError: undefined };\n\n    case BillingAddressActionType.ContinueAsGuestFailed:\n        return { ...errors, continueAsGuestError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: BillingAddressStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddressStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return { ...statuses, isLoading: true };\n\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.LoadCheckoutFailed:\n        return { ...statuses, isLoading: false };\n\n    case BillingAddressActionType.UpdateBillingAddressRequested:\n        return { ...statuses, isUpdating: true };\n\n    case BillingAddressActionType.UpdateBillingAddressFailed:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n        return { ...statuses, isUpdating: false };\n\n    case BillingAddressActionType.ContinueAsGuestRequested:\n        return { ...statuses, isContinuingAsGuest: true };\n\n    case BillingAddressActionType.ContinueAsGuestFailed:\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n        return { ...statuses, isContinuingAsGuest: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { BillingAddressAction, BillingAddressActionType } from '../billing/billing-address-actions';\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { CouponAction, CouponActionType } from '../coupon/coupon-actions';\nimport { GiftCertificateAction, GiftCertificateActionType } from '../coupon/gift-certificate-actions';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping/consignment-actions';\n\nimport Cart from './cart';\nimport CartState, { CartErrorsState, CartStatusesState } from './cart-state';\n\nconst DEFAULT_STATE: CartState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function cartReducer(\n    state: CartState = DEFAULT_STATE,\n    action: Action\n): CartState {\n    const reducer = combineReducers<CartState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Cart | undefined,\n    action: BillingAddressAction | CheckoutAction | ConsignmentAction | CouponAction | GiftCertificateAction\n): Cart | undefined {\n    switch (action.type) {\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return action.payload ? { ...data, ...action.payload.cart } : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CartStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction\n): CartStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return { ...statuses, isLoading: true };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return { ...statuses, isLoading: false };\n\n    default:\n        return statuses;\n    }\n}\n\nfunction errorsReducer(\n    errors: CartErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction\n): CartErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return { ...errors, loadError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutButtonAction, CheckoutButtonActionType } from './checkout-button-actions';\nimport CheckoutButtonState, { CheckoutButtonDataState, CheckoutButtonErrorsState, CheckoutButtonStatusesState } from './checkout-button-state';\n\nconst DEFAULT_STATE: CheckoutButtonState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n\nconst DEFAULT_DATA_STATE: CheckoutButtonDataState = { initializedContainers: {} };\nconst DEFAULT_ERROR_STATE: CheckoutButtonErrorsState = {};\nconst DEFAULT_STATUS_STATE: CheckoutButtonStatusesState = {};\n\nexport default function checkoutButtonReducer(\n    state: CheckoutButtonState = DEFAULT_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonState {\n    if (!action.meta || !action.meta.methodId) {\n        return state;\n    }\n\n    const reducer = combineReducers<CheckoutButtonState>({\n        data: combineReducers({\n            [action.meta.methodId]: dataReducer,\n        }),\n        errors: combineReducers({\n            [action.meta.methodId]: errorsReducer,\n        }),\n        statuses: combineReducers({\n            [action.meta.methodId]: statusesReducer,\n        }),\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: CheckoutButtonDataState = DEFAULT_DATA_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonDataState {\n    switch (action.type) {\n    case CheckoutButtonActionType.InitializeButtonSucceeded:\n        if (!action.meta || !action.meta.containerId) {\n            return data;\n        }\n\n        return {\n            ...data,\n            initializedContainers: {\n                ...data.initializedContainers,\n                [action.meta.containerId]: true,\n            },\n        };\n\n    case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n        return {\n            ...data,\n            initializedContainers: {},\n        };\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: CheckoutButtonErrorsState = DEFAULT_ERROR_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonErrorsState {\n    switch (action.type) {\n    case CheckoutButtonActionType.InitializeButtonRequested:\n    case CheckoutButtonActionType.InitializeButtonSucceeded:\n        return {\n            ...errors,\n            initializeError: undefined,\n        };\n\n    case CheckoutButtonActionType.InitializeButtonFailed:\n        return {\n            ...errors,\n            initializeError: action.payload,\n        };\n\n    case CheckoutButtonActionType.DeinitializeButtonRequested:\n    case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n        return {\n            ...errors,\n            deinitializeError: undefined,\n        };\n\n    case CheckoutButtonActionType.DeinitializeButtonFailed:\n        return {\n            ...errors,\n            deinitializeError: action.payload,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CheckoutButtonStatusesState = DEFAULT_STATUS_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonStatusesState {\n    switch (action.type) {\n    case CheckoutButtonActionType.InitializeButtonRequested:\n        return {\n            ...statuses,\n            isInitializing: true,\n        };\n\n    case CheckoutButtonActionType.InitializeButtonFailed:\n    case CheckoutButtonActionType.InitializeButtonSucceeded:\n        return {\n            ...statuses,\n            isInitializing: false,\n        };\n\n    case CheckoutButtonActionType.DeinitializeButtonRequested:\n        return {\n            ...statuses,\n            isDeinitializing: true,\n        };\n\n    case CheckoutButtonActionType.DeinitializeButtonFailed:\n    case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n        return {\n            ...statuses,\n            isDeinitializing: false,\n        };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\n\nimport Config from './config';\nimport { ConfigActionType, LoadConfigAction } from './config-actions';\nimport ConfigState, { ConfigErrorsState, ConfigStatusesState } from './config-state';\n\nconst DEFAULT_STATE: ConfigState = {\n    meta: {},\n    errors: {},\n    statuses: {},\n};\n\nexport default function configReducer(\n    state: ConfigState = DEFAULT_STATE,\n    action: Action\n): ConfigState {\n    const reducer = combineReducers<ConfigState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Config | undefined,\n    action: LoadConfigAction\n): Config | undefined {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigSucceeded:\n        return action.payload ? action.payload : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ConfigErrorsState = DEFAULT_STATE.errors,\n    action: LoadConfigAction\n): ConfigErrorsState {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case ConfigActionType.LoadConfigFailed:\n        return { ...errors, loadError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ConfigStatusesState = DEFAULT_STATE.statuses,\n    action: LoadConfigAction\n): ConfigStatusesState {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigRequested:\n        return { ...statuses, isLoading: true };\n\n    case ConfigActionType.LoadConfigSucceeded:\n    case ConfigActionType.LoadConfigFailed:\n        return { ...statuses, isLoading: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { OrderAction, OrderActionType } from '../order';\n\nimport Coupon from './coupon';\nimport { CouponAction, CouponActionType } from './coupon-actions';\nimport CouponState, { CouponErrorsState, CouponStatusesState } from './coupon-state';\n\nconst DEFAULT_STATE: CouponState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function couponReducer(\n    state: CouponState = DEFAULT_STATE,\n    action: Action\n): CouponState {\n    const reducer = combineReducers<CouponState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Coupon[] | undefined,\n    action: CouponAction | CheckoutAction | OrderAction\n): Coupon[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case OrderActionType.LoadOrderSucceeded:\n        return action.payload ? action.payload.coupons : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CouponErrorsState = {},\n    action: CouponAction\n): CouponErrorsState {\n    switch (action.type) {\n    case CouponActionType.ApplyCouponRequested:\n    case CouponActionType.ApplyCouponSucceeded:\n        return { ...errors, applyCouponError: undefined };\n\n    case CouponActionType.ApplyCouponFailed:\n        return { ...errors, applyCouponError: action.payload };\n\n    case CouponActionType.RemoveCouponRequested:\n    case CouponActionType.RemoveCouponSucceeded:\n        return { ...errors, removeCouponError: undefined };\n\n    case CouponActionType.RemoveCouponFailed:\n        return { ...errors, removeCouponError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CouponStatusesState = {},\n    action: CouponAction\n): CouponStatusesState {\n    switch (action.type) {\n    case CouponActionType.ApplyCouponRequested:\n        return { ...statuses, isApplyingCoupon: true };\n\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.ApplyCouponFailed:\n        return { ...statuses, isApplyingCoupon: false };\n\n    case CouponActionType.RemoveCouponRequested:\n        return { ...statuses, isRemovingCoupon: true };\n\n    case CouponActionType.RemoveCouponSucceeded:\n    case CouponActionType.RemoveCouponFailed:\n        return { ...statuses, isRemovingCoupon: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping/consignment-actions';\n\nimport { CouponAction, CouponActionType } from './coupon-actions';\nimport GiftCertificate from './gift-certificate';\nimport { GiftCertificateAction, GiftCertificateActionType } from './gift-certificate-actions';\nimport GiftCertificateState, { GiftCertificateErrorsState, GiftCertificateStatusesState } from './gift-certificate-state';\n\nconst DEFAULT_STATE: GiftCertificateState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function giftCertificateReducer(\n    state: GiftCertificateState = DEFAULT_STATE,\n    action: Action\n): GiftCertificateState {\n    const reducer = combineReducers<GiftCertificateState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: GiftCertificate[] | undefined,\n    action: CheckoutAction | GiftCertificateAction | ConsignmentAction | CouponAction\n): GiftCertificate[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return action.payload ? action.payload.giftCertificates : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: GiftCertificateErrorsState = DEFAULT_STATE.errors,\n    action: GiftCertificateAction\n): GiftCertificateErrorsState {\n    switch (action.type) {\n    case GiftCertificateActionType.ApplyGiftCertificateRequested:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n        return { ...errors, applyGiftCertificateError: undefined };\n\n    case GiftCertificateActionType.ApplyGiftCertificateFailed:\n        return { ...errors, applyGiftCertificateError: action.payload };\n\n    case GiftCertificateActionType.RemoveGiftCertificateRequested:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return { ...errors, removeGiftCertificateError: undefined };\n\n    case GiftCertificateActionType.RemoveGiftCertificateFailed:\n        return { ...errors, removeGiftCertificateError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: GiftCertificateStatusesState = DEFAULT_STATE.statuses,\n    action: GiftCertificateAction\n): GiftCertificateStatusesState {\n    switch (action.type) {\n    case GiftCertificateActionType.ApplyGiftCertificateRequested:\n        return { ...statuses, isApplyingGiftCertificate: true };\n\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateFailed:\n        return { ...statuses, isApplyingGiftCertificate: false };\n\n    case GiftCertificateActionType.RemoveGiftCertificateRequested:\n        return { ...statuses, isRemovingGiftCertificate: true };\n\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateFailed:\n        return { ...statuses, isRemovingGiftCertificate: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\n\nimport Customer from './customer';\nimport CustomerState from './customer-state';\n\nconst DEFAULT_STATE: CustomerState = {};\n\nexport default function customerReducer(\n    state: CustomerState = DEFAULT_STATE,\n    action: CheckoutAction\n): CustomerState {\n    const reducer = combineReducers<CustomerState, CheckoutAction>({\n        data: dataReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Customer | undefined,\n    action: CheckoutAction\n): Customer | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return action.payload ? { ...data, ...action.payload.customer } : data;\n\n    default:\n        return data;\n    }\n}\n","export default interface CustomerStrategyState {\n    data: CustomerStrategyDataState;\n    errors: CustomerStrategyErrorsState;\n    statuses: CustomerStrategyStatusesState;\n}\n\nexport interface CustomerStrategyDataState {\n    [key: string]: {\n        isInitialized: boolean;\n    };\n}\n\nexport interface CustomerStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    signInError?: Error;\n    signInMethodId?: string;\n    signOutError?: Error;\n    signOutMethodId?: string;\n    widgetInteractionError?: Error;\n    widgetInteractionMethodId?: string;\n}\n\nexport interface CustomerStrategyStatusesState {\n    deinitializeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isInitializing?: boolean;\n    isSigningIn?: boolean;\n    isSigningOut?: boolean;\n    signInMethodId?: string;\n    signOutMethodId?: string;\n    isWidgetInteracting?: boolean;\n    widgetInteractionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: CustomerStrategyState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\n\nimport { CustomerStrategyAction, CustomerStrategyActionType } from './customer-strategy-actions';\nimport CustomerStrategyState, { CustomerStrategyDataState, CustomerStrategyErrorsState, CustomerStrategyStatusesState, DEFAULT_STATE } from './customer-strategy-state';\n\nexport default function customerStrategyReducer(\n    state: CustomerStrategyState = DEFAULT_STATE,\n    action: Action\n): CustomerStrategyState {\n    const reducer = combineReducers<CustomerStrategyState, CustomerStrategyAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: CustomerStrategyDataState = DEFAULT_STATE.data,\n    action: CustomerStrategyAction\n): CustomerStrategyDataState {\n    switch (action.type) {\n    case CustomerStrategyActionType.InitializeSucceeded:\n        return {\n            ...data,\n            [action.meta && action.meta.methodId]: {\n                isInitialized: true,\n            },\n        };\n\n    case CustomerStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...data,\n            [action.meta && action.meta.methodId]: {\n                isInitialized: false,\n            },\n        };\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: CustomerStrategyErrorsState = DEFAULT_STATE.errors,\n    action: CustomerStrategyAction\n): CustomerStrategyErrorsState {\n    switch (action.type) {\n    case CustomerStrategyActionType.InitializeRequested:\n    case CustomerStrategyActionType.InitializeSucceeded:\n        return {\n            ...errors,\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.InitializeFailed:\n        return {\n            ...errors,\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.DeinitializeRequested:\n    case CustomerStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...errors,\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.DeinitializeFailed:\n        return {\n            ...errors,\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.SignInRequested:\n    case CustomerStrategyActionType.SignInSucceeded:\n        return {\n            ...errors,\n            signInError: undefined,\n            signInMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.SignInFailed:\n        return {\n            ...errors,\n            signInError: action.payload,\n            signInMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.SignOutRequested:\n    case CustomerStrategyActionType.SignOutSucceeded:\n        return {\n            ...errors,\n            signOutError: undefined,\n            signOutMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.SignOutFailed:\n        return {\n            ...errors,\n            signOutError: action.payload,\n            signOutMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.WidgetInteractionStarted:\n    case CustomerStrategyActionType.WidgetInteractionFinished:\n        return {\n            ...errors,\n            widgetInteractionError: undefined,\n            widgetInteractionMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.WidgetInteractionFailed:\n        return {\n            ...errors,\n            widgetInteractionError: action.payload,\n            widgetInteractionMethodId: action.meta.methodId,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CustomerStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: CustomerStrategyAction\n): CustomerStrategyStatusesState {\n    switch (action.type) {\n    case CustomerStrategyActionType.InitializeRequested:\n        return {\n            ...statuses,\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.InitializeFailed:\n    case CustomerStrategyActionType.InitializeSucceeded:\n        return {\n            ...statuses,\n            isInitializing: false,\n            initializeMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.DeinitializeRequested:\n        return {\n            ...statuses,\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.DeinitializeFailed:\n    case CustomerStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...statuses,\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.SignInRequested:\n        return {\n            ...statuses,\n            isSigningIn: true,\n            signInMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.SignInFailed:\n    case CustomerStrategyActionType.SignInSucceeded:\n        return {\n            ...statuses,\n            isSigningIn: false,\n            signInMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.SignOutRequested:\n        return {\n            ...statuses,\n            isSigningOut: true,\n            signOutMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.SignOutFailed:\n    case CustomerStrategyActionType.SignOutSucceeded:\n        return {\n            ...statuses,\n            isSigningOut: false,\n            signOutMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.WidgetInteractionStarted:\n        return {\n            ...statuses,\n            isWidgetInteracting: true,\n            widgetInteractionMethodId: action.meta.methodId,\n         };\n\n    case CustomerStrategyActionType.WidgetInteractionFinished:\n    case CustomerStrategyActionType.WidgetInteractionFailed:\n         return {\n            ...statuses,\n            isWidgetInteracting: false,\n            widgetInteractionMethodId: undefined,\n         };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\n\nimport Country from './country';\nimport { CountryActionType, LoadCountriesAction } from './country-actions';\nimport CountryState, { CountryErrorsState, CountryStatusesState } from './country-state';\n\nconst DEFAULT_STATE: CountryState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function countryReducer(\n    state: CountryState = DEFAULT_STATE,\n    action: Action\n): CountryState {\n    const reducer = combineReducers<CountryState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Country[] | undefined,\n    action: LoadCountriesAction\n): Country[] | undefined {\n    switch (action.type) {\n    case CountryActionType.LoadCountriesSucceeded:\n        return action.payload || [];\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CountryErrorsState = DEFAULT_STATE.errors,\n    action: LoadCountriesAction\n): CountryErrorsState {\n    switch (action.type) {\n    case CountryActionType.LoadCountriesRequested:\n    case CountryActionType.LoadCountriesSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case CountryActionType.LoadCountriesFailed:\n        return { ...errors, loadError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CountryStatusesState = DEFAULT_STATE.statuses,\n    action: LoadCountriesAction\n): CountryStatusesState {\n    switch (action.type) {\n    case CountryActionType.LoadCountriesRequested:\n        return { ...statuses, isLoading: true };\n\n    case CountryActionType.LoadCountriesSucceeded:\n    case CountryActionType.LoadCountriesFailed:\n        return { ...statuses, isLoading: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\nimport { omit } from 'lodash';\n\nimport { clearErrorReducer } from '../common/error';\n\nimport { OrderAction, OrderActionType } from './order-actions';\nimport OrderState, { OrderDataState, OrderErrorsState, OrderMetaState, OrderStatusesState } from './order-state';\nimport { SpamProtectionAction, SpamProtectionActionType } from './spam-protection/spam-protection-actions';\n\nconst DEFAULT_STATE: OrderState = {\n    errors: {},\n    meta: {},\n    statuses: {},\n};\n\nexport default function orderReducer(\n    state: OrderState = DEFAULT_STATE,\n    action: Action\n): OrderState {\n    const reducer = combineReducers<OrderState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: OrderDataState | undefined,\n    action: OrderAction\n): OrderDataState | undefined {\n    switch (action.type) {\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n        return action.payload\n            ? omit({ ...data, ...action.payload }, ['billingAddress', 'coupons'])\n            : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(\n    meta: OrderMetaState | undefined,\n    action: OrderAction | SpamProtectionAction\n): OrderMetaState | undefined {\n    switch (action.type) {\n    case OrderActionType.FinalizeOrderSucceeded:\n    case OrderActionType.SubmitOrderSucceeded:\n        return action.payload ? {\n            ...meta,\n            ...action.meta,\n            callbackUrl: action.payload.order.callbackUrl,\n            orderToken: action.payload.order.token,\n            payment: action.payload.order && action.payload.order.payment,\n        } : meta;\n    case SpamProtectionActionType.Completed:\n        return action.payload ? {\n            ...meta,\n            spamProtectionToken: action.payload,\n        } : meta;\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: OrderErrorsState = DEFAULT_STATE.errors,\n    action: OrderAction\n): OrderErrorsState {\n    switch (action.type) {\n    case OrderActionType.LoadOrderRequested:\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n    case OrderActionType.LoadOrderPaymentsRequested:\n        return { ...errors, loadError: undefined };\n\n    case OrderActionType.LoadOrderFailed:\n    case OrderActionType.LoadOrderPaymentsFailed:\n        return { ...errors, loadError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: OrderStatusesState = DEFAULT_STATE.statuses,\n    action: OrderAction\n): OrderStatusesState {\n    switch (action.type) {\n    case OrderActionType.LoadOrderRequested:\n    case OrderActionType.LoadOrderPaymentsRequested:\n        return { ...statuses, isLoading: true };\n\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderFailed:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n    case OrderActionType.LoadOrderPaymentsFailed:\n        return { ...statuses, isLoading: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { PaymentAction, PaymentActionType } from './payment-actions';\nimport PaymentResponseBody from './payment-response-body';\nimport PaymentState from './payment-state';\n\nexport default function paymentReducer(state: PaymentState = {}, action: PaymentAction): PaymentState {\n    const reducer = combineReducers<PaymentState, PaymentAction>({\n        data: dataReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(data: PaymentResponseBody | undefined, action: PaymentAction): PaymentResponseBody | undefined {\n    switch (action.type) {\n    case PaymentActionType.SubmitPaymentSucceeded:\n        return action.payload;\n\n    default:\n        return data;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { mergeOrPush } from '../common/utility';\n\nimport PaymentMethod from './payment-method';\nimport { PaymentMethodAction, PaymentMethodActionType } from './payment-method-actions';\nimport PaymentMethodMeta from './payment-method-meta';\nimport PaymentMethodState, { PaymentMethodErrorsState, PaymentMethodStatusesState } from './payment-method-state';\n\nconst DEFAULT_STATE: PaymentMethodState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function paymentMethodReducer(\n    state: PaymentMethodState = DEFAULT_STATE,\n    action: Action\n): PaymentMethodState {\n    const reducer = combineReducers<PaymentMethodState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: PaymentMethod[] | undefined,\n    action: PaymentMethodAction\n): PaymentMethod[] | undefined {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n        return action.payload ?\n            mergeOrPush(data || [], action.payload, {\n                id: action.payload.id,\n                gateway: action.payload.gateway,\n            }) :\n            data;\n\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        return action.payload ? action.payload : [];\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(\n    meta: PaymentMethodMeta | undefined,\n    action: PaymentMethodAction\n): PaymentMethodMeta | undefined {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        return action.meta ? { ...meta, ...action.meta } : meta;\n\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: PaymentMethodErrorsState = DEFAULT_STATE.errors,\n    action: PaymentMethodAction\n): PaymentMethodErrorsState {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodsRequested:\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case PaymentMethodActionType.LoadPaymentMethodsFailed:\n        return { ...errors, loadError: action.payload };\n\n    case PaymentMethodActionType.LoadPaymentMethodRequested:\n    case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n        return {\n            ...errors,\n            loadMethodId: undefined,\n            loadMethodError: undefined,\n        };\n\n    case PaymentMethodActionType.LoadPaymentMethodFailed:\n        return {\n            ...errors,\n            loadMethodId: action.meta.methodId,\n            loadMethodError: action.payload,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: PaymentMethodStatusesState = DEFAULT_STATE.statuses,\n    action: PaymentMethodAction\n): PaymentMethodStatusesState {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodsRequested:\n        return { ...statuses, isLoading: true };\n\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n    case PaymentMethodActionType.LoadPaymentMethodsFailed:\n        return { ...statuses, isLoading: false };\n\n    case PaymentMethodActionType.LoadPaymentMethodRequested:\n        return {\n            ...statuses,\n            isLoadingMethod: true,\n            loadMethodId: action.meta.methodId,\n        };\n\n    case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n    case PaymentMethodActionType.LoadPaymentMethodFailed:\n        return {\n            ...statuses,\n            isLoadingMethod: false,\n            loadMethodId: undefined,\n        };\n\n    default:\n        return statuses;\n    }\n}\n","import { assign, findIndex, isPlainObject, pickBy } from 'lodash';\n\nimport { PartialDeep } from '../types';\n\n/**\n * Push an item to an array if it doesn't exist in the array. Otherwise, merge\n * with the existing item in the array. This function always returns a new array.\n */\nexport default function mergeOrPush<T>(\n    array: T[],\n    item: T,\n    predicate: ((item: T) => boolean) | PartialDeep<T>\n): T[] {\n    const index = findIndex(array, typeof predicate === 'object' ? pickBy(predicate) : predicate);\n    const newArray = [...array];\n\n    if (index === -1) {\n        newArray.push(item);\n    } else {\n        newArray[index] = isPlainObject(item) ? assign({}, array[index], item) : item;\n    }\n\n    return newArray;\n}\n","export default interface PaymentStrategyState {\n    data: PaymentStrategyDataState;\n    errors: PaymentStrategyErrorsState;\n    statuses: PaymentStrategyStatusesState;\n}\n\nexport interface PaymentStrategyDataState {\n    [key: string]: {\n        isInitialized: boolean;\n    };\n}\n\nexport interface PaymentStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    executeError?: Error;\n    executeMethodId?: string;\n    finalizeError?: Error;\n    finalizeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    widgetInteractionError?: Error;\n    widgetInteractionMethodId?: string;\n}\n\nexport interface PaymentStrategyStatusesState {\n    deinitializeMethodId?: string;\n    executeMethodId?: string;\n    finalizeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isExecuting?: boolean;\n    isFinalizing?: boolean;\n    isInitializing?: boolean;\n    isWidgetInteracting?: boolean;\n    widgetInteractionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: PaymentStrategyState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\n\nimport { PaymentStrategyAction, PaymentStrategyActionType } from './payment-strategy-actions';\nimport PaymentStrategyState, { DEFAULT_STATE, PaymentStrategyDataState, PaymentStrategyErrorsState, PaymentStrategyStatusesState } from './payment-strategy-state';\n\nexport default function paymentStrategyReducer(\n    state: PaymentStrategyState = DEFAULT_STATE,\n    action: Action\n): PaymentStrategyState {\n    const reducer = combineReducers<PaymentStrategyState, PaymentStrategyAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: PaymentStrategyDataState = DEFAULT_STATE.data,\n    action: PaymentStrategyAction\n): PaymentStrategyDataState {\n    switch (action.type) {\n    case PaymentStrategyActionType.InitializeSucceeded:\n        return {\n            ...data,\n            [action.meta && action.meta.methodId]: {\n                isInitialized: true,\n            },\n        };\n\n    case PaymentStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...data,\n            [action.meta && action.meta.methodId]: {\n                isInitialized: false,\n            },\n        };\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: PaymentStrategyErrorsState = DEFAULT_STATE.errors,\n    action: PaymentStrategyAction\n): PaymentStrategyErrorsState {\n    switch (action.type) {\n    case PaymentStrategyActionType.InitializeRequested:\n    case PaymentStrategyActionType.InitializeSucceeded:\n        return {\n            ...errors,\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.InitializeFailed:\n        return {\n            ...errors,\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.DeinitializeRequested:\n    case PaymentStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...errors,\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.DeinitializeFailed:\n        return {\n            ...errors,\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.ExecuteRequested:\n    case PaymentStrategyActionType.ExecuteSucceeded:\n        return {\n            ...errors,\n            executeError: undefined,\n            executeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.ExecuteFailed:\n        return {\n            ...errors,\n            executeError: action.payload,\n            executeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.FinalizeRequested:\n    case PaymentStrategyActionType.FinalizeSucceeded:\n        return {\n            ...errors,\n            finalizeError: undefined,\n            finalizeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.FinalizeFailed:\n        return {\n            ...errors,\n            finalizeError: action.payload,\n            finalizeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.WidgetInteractionStarted:\n    case PaymentStrategyActionType.WidgetInteractionFinished:\n        return {\n            ...errors,\n            widgetInteractionError: undefined,\n            widgetInteractionMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.WidgetInteractionFailed:\n        return {\n            ...errors,\n            widgetInteractionError: action.payload,\n            widgetInteractionMethodId: action.meta.methodId,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: PaymentStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: PaymentStrategyAction\n): PaymentStrategyStatusesState {\n    switch (action.type) {\n    case PaymentStrategyActionType.InitializeRequested:\n        return {\n            ...statuses,\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.InitializeFailed:\n    case PaymentStrategyActionType.InitializeSucceeded:\n        return {\n            ...statuses,\n            isInitializing: false,\n            initializeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.DeinitializeRequested:\n        return {\n            ...statuses,\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.DeinitializeFailed:\n    case PaymentStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...statuses,\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.ExecuteRequested:\n        return {\n            ...statuses,\n            isExecuting: true,\n            executeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.ExecuteFailed:\n    case PaymentStrategyActionType.ExecuteSucceeded:\n        return {\n            ...statuses,\n            isExecuting: false,\n            executeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.FinalizeRequested:\n        return {\n            ...statuses,\n            isFinalizing: true,\n            finalizeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.FinalizeFailed:\n    case PaymentStrategyActionType.FinalizeSucceeded:\n        return {\n            ...statuses,\n            isFinalizing: false,\n            finalizeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.WidgetInteractionStarted:\n    return {\n        ...statuses,\n        isWidgetInteracting: true,\n        widgetInteractionMethodId: action.meta.methodId,\n     };\n\n    case PaymentStrategyActionType.WidgetInteractionFinished:\n    case PaymentStrategyActionType.WidgetInteractionFailed:\n     return {\n        ...statuses,\n        isWidgetInteracting: false,\n        widgetInteractionMethodId: undefined,\n     };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../../common/error';\n\nimport Instrument from './instrument';\nimport { InstrumentAction, InstrumentActionType } from './instrument-actions';\nimport InstrumentState, { InstrumentErrorState, InstrumentMeta, InstrumentStatusState } from './instrument-state';\n\nconst DEFAULT_STATE = {\n    data: [],\n    errors: {},\n    statuses: {},\n};\n\nexport default function instrumentReducer(\n    state: InstrumentState = DEFAULT_STATE,\n    action: Action\n): InstrumentState {\n    const reducer = combineReducers<InstrumentState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Instrument[] = DEFAULT_STATE.data,\n    action: InstrumentAction\n): Instrument[] {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n        return action.payload ? action.payload.vaultedInstruments : [];\n\n    case InstrumentActionType.DeleteInstrumentSucceeded:\n        return data.filter(instrument =>\n            instrument.bigpayToken !== action.meta.instrumentId\n        );\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(\n    meta: InstrumentMeta | undefined,\n    action: InstrumentAction\n): InstrumentMeta | undefined {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n    case InstrumentActionType.DeleteInstrumentSucceeded:\n        return { ...meta, ...action.meta };\n\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: InstrumentErrorState = DEFAULT_STATE.errors,\n    action: InstrumentAction\n): InstrumentErrorState {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsRequested:\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case InstrumentActionType.DeleteInstrumentRequested:\n    case InstrumentActionType.DeleteInstrumentSucceeded:\n        return {\n            ...errors,\n            deleteError: undefined,\n            failedInstrument: undefined,\n        };\n\n    case InstrumentActionType.LoadInstrumentsFailed:\n        return { ...errors, loadError: action.payload };\n\n    case InstrumentActionType.DeleteInstrumentFailed:\n        return {\n            ...errors,\n            deleteError: action.payload,\n            failedInstrument: action.meta.instrumentId,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: InstrumentStatusState = DEFAULT_STATE.statuses,\n    action: InstrumentAction\n): InstrumentStatusState {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsRequested:\n        return { ...statuses, isLoading: true };\n\n    case InstrumentActionType.DeleteInstrumentRequested:\n        return {\n            ...statuses,\n            isDeleting: true,\n            deletingInstrument: action.meta.instrumentId,\n        };\n\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n    case InstrumentActionType.LoadInstrumentsFailed:\n        return { ...statuses, isLoading: false };\n\n    case InstrumentActionType.DeleteInstrumentSucceeded:\n    case InstrumentActionType.DeleteInstrumentFailed:\n        return {\n            ...statuses,\n            isDeleting: false,\n            deletingInstrument: undefined,\n        };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport RemoteCheckout from './remote-checkout';\nimport { RemoteCheckoutAction, RemoteCheckoutActionType } from './remote-checkout-actions';\nimport RemoteCheckoutState, { RemoteCheckoutStateData } from './remote-checkout-state';\n\nconst DEFAULT_STATE: RemoteCheckoutState = {\n    data: {},\n};\n\nexport default function remoteCheckoutReducer(\n    state: RemoteCheckoutState = DEFAULT_STATE,\n    action: RemoteCheckoutAction\n): RemoteCheckoutState {\n    if (!action.meta || !action.meta.methodId) {\n        return state;\n    }\n\n    const reducer = combineReducers<RemoteCheckoutState>({\n        data: combineReducers<RemoteCheckoutStateData>({\n            [action.meta.methodId]: dataReducer,\n        }),\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: RemoteCheckout = DEFAULT_STATE.data,\n    action: RemoteCheckoutAction\n): RemoteCheckout {\n    switch (action.type) {\n    case RemoteCheckoutActionType.InitializeRemoteBillingSucceeded:\n        return action.payload ? { ...data, billing: action.payload.billing } : data;\n\n    case RemoteCheckoutActionType.InitializeRemoteShippingSucceeded:\n        return action.payload ? { ...data, shipping: action.payload.shipping } : data;\n\n    case RemoteCheckoutActionType.LoadRemoteSettingsSucceeded:\n        return { ...data, settings: action.payload };\n\n    case RemoteCheckoutActionType.UpdateRemoteCheckout:\n        return { ...data, ...action.payload };\n\n    default:\n        return data;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { CouponAction, CouponActionType } from '../coupon';\nimport { CustomerAction, CustomerActionType } from '../customer';\n\nimport Consignment from './consignment';\nimport { ConsignmentAction, ConsignmentActionType } from './consignment-actions';\nimport ConsignmentState, { ConsignmentErrorsState, ConsignmentStatusesState } from './consignment-state';\n\nconst DEFAULT_STATE: ConsignmentState = {\n    errors: {\n        updateShippingOptionError: {},\n        updateError: {},\n        deleteError: {},\n    },\n    statuses: {\n        isUpdating: {},\n        isUpdatingShippingOption: {},\n        isDeleting: {},\n    },\n};\n\nexport default function consignmentReducer(\n    state: ConsignmentState = DEFAULT_STATE,\n    action: Action\n): ConsignmentState {\n    const reducer = combineReducers<ConsignmentState, ConsignmentAction | CheckoutAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Consignment[] | undefined,\n    action: ConsignmentAction | CheckoutAction | CouponAction | CustomerAction\n): Consignment[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n        return action.payload ? action.payload.consignments : data;\n\n    case CustomerActionType.SignOutCustomerSucceeded:\n        return [];\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ConsignmentErrorsState = DEFAULT_STATE.errors,\n    action: ConsignmentAction | CheckoutAction\n): ConsignmentErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsRequested:\n        return { ...errors, loadError: undefined };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case ConsignmentActionType.LoadShippingOptionsFailed:\n        return { ...errors, loadError: action.payload };\n\n    case ConsignmentActionType.CreateConsignmentsRequested:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n        return { ...errors, createError: undefined };\n\n    case ConsignmentActionType.CreateConsignmentsFailed:\n        return { ...errors, createError: action.payload };\n\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentRequested:\n        if (action.meta) {\n            errors = {\n                ...errors,\n                updateError: {\n                    ...errors.updateError,\n                    [action.meta.id]: undefined,\n                },\n            };\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateConsignmentFailed:\n        if (action.meta) {\n            errors = {\n                ...errors,\n                updateError: {\n                    ...errors.updateError,\n                    [action.meta.id]: action.payload,\n                },\n            };\n        }\n\n        return errors;\n\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentRequested:\n        if (action.meta) {\n            errors = {\n                ...errors,\n                deleteError: {\n                    ...errors.deleteError,\n                    [action.meta.id]: undefined,\n                },\n            };\n        }\n\n        return errors;\n\n    case ConsignmentActionType.DeleteConsignmentFailed:\n        if (action.meta) {\n            errors = {\n                ...errors,\n                deleteError: {\n                    ...errors.deleteError,\n                    [action.meta.id]: action.payload,\n                },\n            };\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateShippingOptionRequested:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n        if (action.meta) {\n            errors = {\n                ...errors,\n                updateShippingOptionError: {\n                    ...errors.updateShippingOptionError,\n                    [action.meta.id]: undefined,\n                },\n            };\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateShippingOptionFailed:\n        if (action.meta) {\n            errors = {\n                ...errors,\n                updateShippingOptionError: {\n                    ...errors.updateShippingOptionError,\n                    [action.meta.id]: action.payload,\n                },\n            };\n        }\n\n        return errors;\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ConsignmentStatusesState = DEFAULT_STATE.statuses,\n    action: ConsignmentAction | CheckoutAction\n): ConsignmentStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return { ...statuses, isLoading: true };\n\n    case ConsignmentActionType.LoadShippingOptionsRequested:\n        return { ...statuses, isLoadingShippingOptions: true };\n\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.LoadCheckoutFailed:\n        return { ...statuses, isLoading: false };\n\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsFailed:\n        return { ...statuses, isLoadingShippingOptions: false };\n\n    case ConsignmentActionType.CreateConsignmentsRequested:\n        return { ...statuses, isCreating: true };\n\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.CreateConsignmentsFailed:\n        return { ...statuses, isCreating: false };\n\n    case ConsignmentActionType.UpdateConsignmentRequested:\n        if (action.meta) {\n            statuses = {\n                ...statuses,\n                isUpdating: {\n                    ...statuses.isUpdating,\n                    [action.meta.id]: true,\n                },\n            };\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentFailed:\n        if (action.meta) {\n            statuses = {\n                ...statuses,\n                isUpdating: {\n                    ...statuses.isUpdating,\n                    [action.meta.id]: false,\n                },\n            };\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.DeleteConsignmentRequested:\n        if (action.meta) {\n            statuses = {\n                ...statuses,\n                isDeleting: {\n                    ...statuses.isDeleting,\n                    [action.meta.id]: true,\n                },\n            };\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentFailed:\n        if (action.meta) {\n            statuses = {\n                ...statuses,\n                isDeleting: {\n                    ...statuses.isDeleting,\n                    [action.meta.id]: false,\n                },\n            };\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateShippingOptionRequested:\n        if (action.meta) {\n            statuses = {\n                ...statuses,\n                isUpdatingShippingOption: {\n                    ...statuses.isUpdatingShippingOption,\n                    [action.meta.id]: true,\n                },\n            };\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionFailed:\n        if (action.meta) {\n            statuses = {\n                ...statuses,\n                isUpdatingShippingOption: {\n                    ...statuses.isUpdatingShippingOption,\n                    [action.meta.id]: false,\n                },\n            };\n        }\n\n        return statuses;\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { Country } from '../geography';\n\nimport { LoadShippingCountriesAction, ShippingCountryActionType } from './shipping-country-actions';\nimport ShippingCountryState, { ShippingCountryErrorsState, ShippingCountryStatusesState } from './shipping-country-state';\n\nconst DEFAULT_STATE: ShippingCountryState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function shippingCountryReducer(\n    state: ShippingCountryState = DEFAULT_STATE,\n    action: Action\n): ShippingCountryState {\n    const reducer = combineReducers<ShippingCountryState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Country[] | undefined,\n    action: LoadShippingCountriesAction\n): Country[] | undefined {\n    switch (action.type) {\n    case ShippingCountryActionType.LoadShippingCountriesSucceeded:\n        return action.payload || [];\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ShippingCountryErrorsState = DEFAULT_STATE.errors,\n    action: LoadShippingCountriesAction\n): ShippingCountryErrorsState {\n    switch (action.type) {\n    case ShippingCountryActionType.LoadShippingCountriesRequested:\n    case ShippingCountryActionType.LoadShippingCountriesSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case ShippingCountryActionType.LoadShippingCountriesFailed:\n        return { ...errors, loadError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ShippingCountryStatusesState = DEFAULT_STATE.statuses,\n    action: LoadShippingCountriesAction\n): ShippingCountryStatusesState {\n    switch (action.type) {\n    case ShippingCountryActionType.LoadShippingCountriesRequested:\n        return { ...statuses, isLoading: true };\n\n    case ShippingCountryActionType.LoadShippingCountriesSucceeded:\n    case ShippingCountryActionType.LoadShippingCountriesFailed:\n        return { ...statuses, isLoading: false };\n\n    default:\n        return statuses;\n    }\n}\n","export default interface ShippingStrategyState {\n    data: ShippingStrategyDataState;\n    errors: ShippingStrategyErrorsState;\n    statuses: ShippingStrategyStatusesState;\n}\n\nexport interface ShippingStrategyDataState {\n    [key: string]: {\n        isInitialized: boolean;\n    };\n}\n\nexport interface ShippingStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    updateAddressError?: Error;\n    updateAddressMethodId?: string;\n    selectOptionError?: Error;\n    selectOptionMethodId?: string;\n}\n\nexport interface ShippingStrategyStatusesState {\n    deinitializeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isInitializing?: boolean;\n    isUpdatingAddress?: boolean;\n    isSelectingOption?: boolean;\n    updateAddressMethodId?: string;\n    selectOptionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: ShippingStrategyState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\n\nimport { ShippingStrategyAction, ShippingStrategyActionType } from './shipping-strategy-actions';\nimport ShippingStrategyState, { DEFAULT_STATE, ShippingStrategyDataState, ShippingStrategyErrorsState, ShippingStrategyStatusesState } from './shipping-strategy-state';\n\nexport default function shippingStrategyReducer(\n    state: ShippingStrategyState = DEFAULT_STATE,\n    action: Action\n): ShippingStrategyState {\n    const reducer = combineReducers<ShippingStrategyState, ShippingStrategyAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: ShippingStrategyDataState = DEFAULT_STATE.data,\n    action: ShippingStrategyAction\n): ShippingStrategyDataState {\n    switch (action.type) {\n    case ShippingStrategyActionType.InitializeSucceeded:\n        return {\n            ...data,\n            [action.meta && action.meta.methodId]: {\n                isInitialized: true,\n            },\n        };\n\n    case ShippingStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...data,\n            [action.meta && action.meta.methodId]: {\n                isInitialized: false,\n            },\n        };\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: ShippingStrategyErrorsState = DEFAULT_STATE.errors,\n    action: ShippingStrategyAction\n): ShippingStrategyErrorsState {\n    switch (action.type) {\n    case ShippingStrategyActionType.InitializeRequested:\n    case ShippingStrategyActionType.InitializeSucceeded:\n        return {\n            ...errors,\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.InitializeFailed:\n        return {\n            ...errors,\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.DeinitializeRequested:\n    case ShippingStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...errors,\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.DeinitializeFailed:\n        return {\n            ...errors,\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.UpdateAddressRequested:\n    case ShippingStrategyActionType.UpdateAddressSucceeded:\n        return {\n            ...errors,\n            updateAddressError: undefined,\n            updateAddressMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.UpdateAddressFailed:\n        return {\n            ...errors,\n            updateAddressError: action.payload,\n            updateAddressMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.SelectOptionRequested:\n    case ShippingStrategyActionType.SelectOptionSucceeded:\n        return {\n            ...errors,\n            selectOptionError: undefined,\n            selectOptionMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.SelectOptionFailed:\n        return {\n            ...errors,\n            selectOptionError: action.payload,\n            selectOptionMethodId: action.meta && action.meta.methodId,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ShippingStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: ShippingStrategyAction\n): ShippingStrategyStatusesState {\n    switch (action.type) {\n    case ShippingStrategyActionType.InitializeRequested:\n        return {\n            ...statuses,\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.InitializeFailed:\n    case ShippingStrategyActionType.InitializeSucceeded:\n        return {\n            ...statuses,\n            isInitializing: false,\n            initializeMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.DeinitializeRequested:\n        return {\n            ...statuses,\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.DeinitializeFailed:\n    case ShippingStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...statuses,\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.UpdateAddressRequested:\n        return {\n            ...statuses,\n            isUpdatingAddress: true,\n            updateAddressMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.UpdateAddressFailed:\n    case ShippingStrategyActionType.UpdateAddressSucceeded:\n        return {\n            ...statuses,\n            isUpdatingAddress: false,\n            updateAddressMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.SelectOptionRequested:\n        return {\n            ...statuses,\n            isSelectingOption: true,\n            selectOptionMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.SelectOptionFailed:\n    case ShippingStrategyActionType.SelectOptionSucceeded:\n        return {\n            ...statuses,\n            isSelectingOption: false,\n            selectOptionMethodId: undefined,\n        };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\nimport { omit } from 'lodash';\n\nimport { BillingAddressAction, BillingAddressActionType } from '../billing';\nimport { clearErrorReducer } from '../common/error';\nimport { CouponAction, CouponActionType, GiftCertificateAction, GiftCertificateActionType } from '../coupon';\nimport { OrderAction, OrderActionType } from '../order';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping';\n\nimport { CheckoutAction, CheckoutActionType } from './checkout-actions';\nimport CheckoutState, { CheckoutDataState, CheckoutErrorsState, CheckoutStatusesState } from './checkout-state';\n\nconst DEFAULT_STATE: CheckoutState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function checkoutReducer(\n    state: CheckoutState = DEFAULT_STATE,\n    action: Action\n): CheckoutState {\n    const reducer = combineReducers<CheckoutState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: CheckoutDataState | undefined,\n    action: CheckoutAction | BillingAddressAction | ConsignmentAction | CouponAction | GiftCertificateAction | OrderAction\n): CheckoutDataState | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return action.payload\n            ? omit({ ...data, ...action.payload }, ['billingAddress', 'cart', 'consignments', 'customer', 'coupons', 'giftCertifcates'])\n            : data;\n\n    case OrderActionType.SubmitOrderSucceeded:\n        return action.payload && data\n            ? { ...data, orderId: action.payload.order.orderId }\n            : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CheckoutErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction | OrderAction\n): CheckoutErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return {\n            ...errors,\n            loadError: undefined,\n        };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return {\n            ...errors,\n            loadError: action.payload,\n        };\n\n    case CheckoutActionType.UpdateCheckoutRequested:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n        return {\n            ...errors,\n            updateError: undefined,\n        };\n\n    case CheckoutActionType.UpdateCheckoutFailed:\n        return {\n            ...errors,\n            updateError: action.payload,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CheckoutStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction | OrderAction\n): CheckoutStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return {\n            ...statuses,\n            isLoading: true,\n        };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return {\n            ...statuses,\n            isLoading: false,\n        };\n\n    case CheckoutActionType.UpdateCheckoutRequested:\n        return {\n            ...statuses,\n            isUpdating: true,\n        };\n\n    case CheckoutActionType.UpdateCheckoutFailed:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n        return {\n            ...statuses,\n            isUpdating: false,\n        };\n\n    default:\n        return statuses;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport BillingAddress from './billing-address';\nimport BillingAddressState from './billing-address-state';\n\n@selector\nexport default class BillingAddressSelector {\n    constructor(\n        private _billingAddress: BillingAddressState\n    ) {}\n\n    getBillingAddress(): BillingAddress | undefined {\n        return this._billingAddress.data;\n    }\n\n    getUpdateError(): Error | undefined {\n        return this._billingAddress.errors.updateError;\n    }\n\n    getContinueAsGuestError(): Error | undefined {\n        return this._billingAddress.errors.continueAsGuestError;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._billingAddress.errors.loadError;\n    }\n\n    isUpdating(): boolean {\n        return !!this._billingAddress.statuses.isUpdating;\n    }\n\n    isContinuingAsGuest(): boolean {\n        return !!this._billingAddress.statuses.isContinuingAsGuest;\n    }\n\n    isLoading(): boolean {\n        return !!this._billingAddress.statuses.isLoading;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport Cart from './cart';\nimport CartState from './cart-state';\n\n@selector\nexport default class CartSelector {\n    constructor(\n        private _cart: CartState\n    ) {}\n\n    getCart(): Cart | undefined {\n        return this._cart.data;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._cart.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return !!this._cart.statuses.isLoading;\n    }\n}\n","import { find, some, values } from 'lodash';\n\nimport { selector } from '../common/selector';\n\nimport CheckoutButtonState from './checkout-button-state';\nimport { CheckoutButtonMethodType } from './strategies';\n\n@selector\nexport default class CheckoutButtonSelector {\n    constructor(\n        private _checkoutButton: CheckoutButtonState\n    ) {}\n\n    getState(): CheckoutButtonState {\n        return this._checkoutButton;\n    }\n\n    isInitializing(methodId?: CheckoutButtonMethodType): boolean {\n        if (methodId) {\n            const method = this._checkoutButton.statuses[methodId];\n\n            return (method && method.isInitializing) === true;\n        }\n\n        return some(this._checkoutButton.statuses, { isInitializing: true });\n    }\n\n    isInitialized(methodId: CheckoutButtonMethodType, containerId?: string): boolean {\n        const method = this._checkoutButton.data[methodId];\n\n        if (!method) {\n            return false;\n        }\n\n        if (!containerId) {\n            return some(method.initializedContainers, isInitialized => isInitialized === true);\n        }\n\n        return method.initializedContainers[containerId] === true;\n    }\n\n    isDeinitializing(methodId?: CheckoutButtonMethodType): boolean {\n        if (methodId) {\n            const method = this._checkoutButton.statuses[methodId];\n\n            return (method && method.isDeinitializing) === true;\n        }\n\n        return some(this._checkoutButton.statuses, { isDeinitializing: true });\n    }\n\n    getInitializeError(methodId?: CheckoutButtonMethodType): Error | undefined {\n        const method = methodId ?\n            this._checkoutButton.errors[methodId] :\n            find(values(this._checkoutButton.errors), method => !!(method && method.initializeError));\n\n        return method && method.initializeError;\n    }\n\n    getDeinitializeError(methodId?: CheckoutButtonMethodType): Error | undefined {\n        const method = methodId ?\n            this._checkoutButton.errors[methodId] :\n            find(values(this._checkoutButton.errors), method => !!(method && method.deinitializeError));\n\n        return method && method.deinitializeError;\n    }\n}\n","import { deepFreeze } from '@bigcommerce/data-store';\n\n// tslint:disable-next-line:ban-types\ntype FunctionProperties<T> = { [K in keyof T]: T[K] extends Function ? T[K] : never };\n\nexport default function createFreezeProxy<T extends object>(target: T): T {\n    return createProxy(target, (target, name) =>\n        (...args: any[]) => deepFreeze(target[name].call(target, ...args))\n    );\n}\n\nexport function createFreezeProxies<T extends { [key: string]: object }>(map: T): T {\n    return Object.keys(map)\n        .reduce((result, key) => {\n            result[key] = createFreezeProxy(map[key]);\n\n            return result;\n        }, {} as T);\n}\n\nfunction createProxy<T extends object>(target: T, trap: (target: FunctionProperties<T>, name: keyof FunctionProperties<T>, proxy: T) => any): T {\n    const proxy = Object.create(target);\n\n    traversePrototypeOf(target, prototype => {\n        Object.getOwnPropertyNames(prototype)\n            .forEach(name => {\n                if (name === 'constructor' || typeof proxy[name] !== 'function' || name.charAt(0) === '_') {\n                    return;\n                }\n\n                proxy[name] = trap(target as FunctionProperties<T>, name as keyof T, proxy);\n            });\n    });\n\n    return proxy;\n}\n\nfunction traversePrototypeOf(target: object, iteratee: (prototype: object) => void): void {\n    let prototype = Object.getPrototypeOf(target);\n\n    while (prototype) {\n        iteratee(prototype);\n\n        prototype = Object.getPrototypeOf(prototype);\n    }\n}\n","import { selector } from '../common/selector';\n\nimport Config, { ContextConfig, StoreConfig } from './config';\nimport ConfigState from './config-state';\n\n@selector\nexport default class ConfigSelector {\n    constructor(\n        private _config: ConfigState\n    ) {}\n\n    getConfig(): Config | undefined {\n        return this._config.data;\n    }\n\n    getStoreConfig(): StoreConfig | undefined {\n        return this._config.data && this._config.data.storeConfig;\n    }\n\n    getContextConfig(): ContextConfig | undefined {\n        return this._config.data && this._config.data.context;\n    }\n\n    getExternalSource(): string | undefined {\n        return this._config.meta && this._config.meta.externalSource;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._config.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return !!this._config.statuses.isLoading;\n    }\n}\n","import { AddressKey } from '../address';\n\nexport default FormField;\n\ntype FormField = SystemFormField | CustomFormField;\n\nexport enum FormFieldFieldType {\n    checkbox = 'checkbox',\n    date = 'date',\n    text = 'text',\n    dropdown = 'dropdown',\n    radio = 'radio',\n    multiline = 'multiline',\n}\n\nexport enum FormFieldType {\n    array = 'array',\n    date = 'date',\n    number = 'integer',\n    string = 'string',\n}\n\nexport interface BaseFormField {\n    name: string;\n    custom: boolean;\n    id: string;\n    label: string;\n    required: boolean;\n    default?: string;\n    fieldType?: FormFieldFieldType;\n}\n\nexport interface SystemFormField extends BaseFormField {\n    name: AddressKey;\n    custom: false;\n    maxLength?: number;\n    options?: FormFieldOptions;\n}\n\nexport type CustomFormField = DateCustomFormField |\n    TextCustomFormField |\n    NumberCustomFormField |\n    MultilineCustomFormField |\n    ArrayCustomFormField;\n\ninterface BaseCustomFormField extends BaseFormField {\n    custom: true;\n    type?: FormFieldType;\n}\n\nexport interface DateCustomFormField extends BaseCustomFormField {\n    min: number | string;\n    max: number | string;\n    fieldType: FormFieldFieldType.date;\n    type: FormFieldType.date;\n}\n\nexport interface ArrayCustomFormField extends BaseCustomFormField {\n    fieldType: FormFieldFieldType.checkbox | FormFieldFieldType.radio | FormFieldFieldType.dropdown;\n    type: FormFieldType.array;\n    itemtype: 'string';\n    options: FormFieldOptions;\n}\n\nexport interface TextCustomFormField extends BaseCustomFormField {\n    fieldType: FormFieldFieldType.text;\n    type: FormFieldType.string;\n    maxLength?: number;\n    secret?: boolean;\n}\n\nexport interface NumberCustomFormField extends BaseCustomFormField {\n    fieldType: FormFieldFieldType.text;\n    type: FormFieldType.number;\n    min?: number;\n    max?: number;\n    maxLength?: number;\n}\n\nexport interface MultilineCustomFormField extends TextCustomFormField {\n    options: {\n        rows: number;\n    };\n}\n\nexport interface FormFieldOptions {\n    helperLabel?: string;\n    items: FormFieldItem[];\n}\n\nexport interface FormFieldItem {\n    value: string;\n    label: string;\n}\n","import { RequestError } from '../common/error/errors';\nimport { selector } from '../common/selector';\n\nimport Coupon from './coupon';\nimport CouponState from './coupon-state';\n\n@selector\nexport default class CouponSelector {\n    constructor(\n        private _coupon: CouponState\n    ) {}\n\n    getCoupons(): Coupon[] | undefined {\n        return this._coupon.data;\n    }\n\n    getRemoveError(): RequestError | undefined {\n        return this._coupon.errors.removeCouponError;\n    }\n\n    getApplyError(): RequestError | undefined {\n        return this._coupon.errors.applyCouponError;\n    }\n\n    isApplying(): boolean {\n        return !!this._coupon.statuses.isApplyingCoupon;\n    }\n\n    isRemoving(): boolean {\n        return !!this._coupon.statuses.isRemovingCoupon;\n    }\n}\n","import { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\nimport { selector } from '../common/selector';\n\nimport GiftCertificate from './gift-certificate';\nimport GiftCertificateState from './gift-certificate-state';\n\n@selector\nexport default class GiftCertificateSelector {\n    constructor(\n        private _giftCertificate: GiftCertificateState\n    ) {}\n\n    getGiftCertificates(): GiftCertificate[] | undefined {\n        return this._giftCertificate.data;\n    }\n\n    getRemoveError(): RequestError<StorefrontErrorResponseBody> | undefined {\n        return this._giftCertificate.errors.removeGiftCertificateError;\n    }\n\n    getApplyError(): RequestError<StorefrontErrorResponseBody> | undefined {\n        return this._giftCertificate.errors.applyGiftCertificateError;\n    }\n\n    isApplying(): boolean {\n        return !!this._giftCertificate.statuses.isApplyingGiftCertificate;\n    }\n\n    isRemoving(): boolean {\n        return !!this._giftCertificate.statuses.isRemovingGiftCertificate;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport Customer from './customer';\nimport CustomerState from './customer-state';\n\n@selector\nexport default class CustomerSelector {\n    constructor(\n        private _customer: CustomerState\n    ) {}\n\n    getCustomer(): Customer | undefined {\n        return this._customer.data;\n    }\n}\n","import CustomerStrategyState from './customer-strategy-state';\n\nexport default class CustomerStrategySelector {\n    constructor(\n        private _customerStrategies: CustomerStrategyState\n    ) {}\n\n    getSignInError(methodId?: string): Error | undefined {\n        if (methodId && this._customerStrategies.errors.signInMethodId !== methodId) {\n            return;\n        }\n\n        return this._customerStrategies.errors.signInError;\n    }\n\n    getSignOutError(methodId?: string): Error | undefined {\n        if (methodId && this._customerStrategies.errors.signOutMethodId !== methodId) {\n            return;\n        }\n\n        return this._customerStrategies.errors.signOutError;\n    }\n\n    getInitializeError(methodId?: string): Error | undefined {\n        if (methodId && this._customerStrategies.errors.initializeMethodId !== methodId) {\n            return;\n        }\n\n        return this._customerStrategies.errors.initializeError;\n    }\n\n    getWidgetInteractionError(methodId?: string): Error | undefined {\n        if (methodId && this._customerStrategies.errors.widgetInteractionMethodId !== methodId) {\n            return;\n        }\n\n        return this._customerStrategies.errors.widgetInteractionError;\n    }\n\n    isSigningIn(methodId?: string): boolean {\n        if (methodId && this._customerStrategies.statuses.signInMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._customerStrategies.statuses.isSigningIn;\n    }\n\n    isSigningOut(methodId?: string): boolean {\n        if (methodId && this._customerStrategies.statuses.signOutMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._customerStrategies.statuses.isSigningOut;\n    }\n\n    isInitializing(methodId?: string): boolean {\n        if (methodId && this._customerStrategies.statuses.initializeMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._customerStrategies.statuses.isInitializing;\n    }\n\n    isInitialized(methodId: string): boolean {\n        return !!(\n            this._customerStrategies.data[methodId] &&\n            this._customerStrategies.data[methodId].isInitialized\n        );\n    }\n\n    isWidgetInteracting(methodId?: string): boolean {\n        if (methodId && this._customerStrategies.statuses.widgetInteractionMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._customerStrategies.statuses.isWidgetInteracting;\n    }}\n","import { find } from 'lodash';\n\nimport { selector } from '../common/selector';\nimport { ConfigState } from '../config';\nimport { Country } from '../geography';\n\nimport FormField, { FormFieldFieldType, FormFieldType } from './form-field';\n\n@selector\nexport default class FormSelector {\n    constructor(\n        private _config: ConfigState\n    ) {}\n\n    getShippingAddressFields(countries: Country[] = [], countryCode: string): FormField[] {\n        const selectedCountry = find(countries, { code: countryCode });\n        const fields = this._config.data ? this._config.data.storeConfig.formFields.shippingAddressFields : [];\n\n        return fields.map((field: any) => this._processField(field, countries, selectedCountry));\n    }\n\n    getBillingAddressFields(countries: Country[] = [], countryCode: string): FormField[] {\n        const selectedCountry = find(countries, { code: countryCode });\n        const fields = this._config.data ? this._config.data.storeConfig.formFields.billingAddressFields : [];\n\n        return fields.map((field: any) => this._processField(field, countries, selectedCountry));\n    }\n\n    private _processField(field: FormField, countries: Country[], selectedCountry?: Country): FormField {\n        if (field.name === 'countryCode') {\n            return this._processCountry(field, countries, selectedCountry);\n        }\n\n        if (field.name === 'stateOrProvince') {\n            return this._processProvince(field, selectedCountry);\n        }\n\n        if (field.name === 'postalCode') {\n            return this._processsPostCode(field, selectedCountry);\n        }\n\n        return field;\n    }\n\n    private _processCountry(field: FormField, countries: Country[] = [], country?: Country): FormField {\n        if (!countries.length) {\n            return field;\n        }\n\n        const { code = '' } = country || {};\n        const items = countries.map(({ code, name }: any) => ({\n            value: code,\n            label: name,\n        }));\n\n        return {\n            ...field,\n            options: { items },\n            default: code,\n            type: FormFieldType.array,\n            fieldType: FormFieldFieldType.dropdown,\n            itemtype: 'string',\n        };\n    }\n\n    private _processProvince(field: FormField, country?: Country): FormField {\n        const { subdivisions = [] } = country || {};\n\n        if (!subdivisions.length) {\n            return {\n                ...field,\n                required: false,\n            };\n        }\n\n        const items = subdivisions.map(({ code, name }: any) => ({\n            value: code,\n            label: name,\n        }));\n\n        return {\n            ...field,\n            name: 'stateOrProvinceCode',\n            options: { items },\n            required: true,\n            type: FormFieldType.array,\n            fieldType: FormFieldFieldType.dropdown,\n            itemtype: 'string',\n        };\n    }\n\n    private _processsPostCode(field: FormField, country?: Country): FormField {\n        const { hasPostalCodes = [] } = country || {};\n\n        if (hasPostalCodes === undefined) {\n            return field;\n        }\n\n        return { ...field, required: Boolean(hasPostalCodes) };\n    }\n}\n","import { selector } from '../common/selector';\n\nimport Country from './country';\nimport CountryState from './country-state';\n\n@selector\nexport default class CountrySelector {\n    constructor(\n        private _countries: CountryState\n    ) {}\n\n    getCountries(): Country[] | undefined {\n        return this._countries.data;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._countries.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return !!this._countries.statuses.isLoading;\n    }\n}\n","import { BillingAddressSelector } from '../billing';\nimport { selector } from '../common/selector';\nimport { CouponSelector } from '../coupon';\n\nimport Order from './order';\nimport OrderState, { OrderMetaState } from './order-state';\n\n@selector\nexport default class OrderSelector {\n    constructor(\n        private _order: OrderState,\n        private _billingAddress: BillingAddressSelector,\n        private _coupons: CouponSelector\n    ) {}\n\n    getOrder(): Order | undefined {\n        const { data } = this._order;\n        const billingAddress = this._billingAddress.getBillingAddress();\n        const coupons = this._coupons.getCoupons() || [];\n\n        if (!data || !billingAddress) {\n            return;\n        }\n\n        return {\n            ...data,\n            billingAddress,\n            coupons,\n        };\n    }\n\n    getOrderMeta(): OrderMetaState | undefined {\n        return this._order.meta;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._order.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return !!this._order.statuses.isLoading;\n    }\n}\n","import { find } from 'lodash';\n\nimport { selector } from '../common/selector';\n\nimport PaymentMethod from './payment-method';\nimport PaymentMethodMeta from './payment-method-meta';\nimport PaymentMethodState from './payment-method-state';\n\n@selector\nexport default class PaymentMethodSelector {\n    constructor(\n        private _paymentMethods: PaymentMethodState\n    ) {}\n\n    getPaymentMethods(): PaymentMethod[] | undefined {\n        return this._paymentMethods.data;\n    }\n\n    getPaymentMethodsMeta(): PaymentMethodMeta | undefined {\n        return this._paymentMethods.meta;\n    }\n\n    getPaymentMethod(methodId: string, gatewayId?: string): PaymentMethod | undefined {\n        return gatewayId ?\n            find(this._paymentMethods.data, { id: methodId, gateway: gatewayId }) :\n            find(this._paymentMethods.data, { id: methodId });\n    }\n\n    getLoadError(): Error | undefined {\n        return this._paymentMethods.errors && this._paymentMethods.errors.loadError;\n    }\n\n    getLoadMethodError(methodId?: string): Error | undefined {\n        if (methodId && this._paymentMethods.errors.loadMethodId !== methodId) {\n            return;\n        }\n\n        return this._paymentMethods.errors.loadMethodError;\n    }\n\n    isLoading(): boolean {\n        return !!this._paymentMethods.statuses.isLoading;\n    }\n\n    isLoadingMethod(methodId?: string): boolean {\n        if (methodId && this._paymentMethods.statuses.loadMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._paymentMethods.statuses.isLoadingMethod;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport PaymentStrategyState, { DEFAULT_STATE } from './payment-strategy-state';\n\n@selector\nexport default class PaymentStrategySelector {\n    constructor(\n        private _paymentStrategies: PaymentStrategyState = DEFAULT_STATE\n    ) {}\n\n    getInitializeError(methodId?: string): Error | undefined {\n        if (methodId && this._paymentStrategies.errors.initializeMethodId !== methodId) {\n            return;\n        }\n\n        return this._paymentStrategies.errors.initializeError;\n    }\n\n    getExecuteError(methodId?: string): Error | undefined {\n        if (methodId && this._paymentStrategies.errors.executeMethodId !== methodId) {\n            return;\n        }\n\n        return this._paymentStrategies.errors.executeError;\n    }\n\n    getFinalizeError(methodId?: string): Error | undefined {\n        if (methodId && this._paymentStrategies.errors.finalizeMethodId !== methodId) {\n            return;\n        }\n\n        return this._paymentStrategies.errors.finalizeError;\n    }\n\n    getWidgetInteractingError(methodId?: string): Error | undefined {\n        if (methodId && this._paymentStrategies.errors.widgetInteractionMethodId !== methodId) {\n            return;\n        }\n\n        return this._paymentStrategies.errors.widgetInteractionError;\n    }\n\n    isInitializing(methodId?: string): boolean {\n        if (methodId && this._paymentStrategies.statuses.initializeMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._paymentStrategies.statuses.isInitializing;\n    }\n\n    isInitialized(methodId: string): boolean {\n        return !!(\n            this._paymentStrategies.data[methodId] &&\n            this._paymentStrategies.data[methodId].isInitialized\n        );\n    }\n\n    isExecuting(methodId?: string): boolean {\n        if (methodId && this._paymentStrategies.statuses.executeMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._paymentStrategies.statuses.isExecuting;\n    }\n\n    isFinalizing(methodId?: string): boolean {\n        if (methodId && this._paymentStrategies.statuses.finalizeMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._paymentStrategies.statuses.isFinalizing;\n    }\n\n    isWidgetInteracting(methodId?: string): boolean {\n        if (methodId && this._paymentStrategies.statuses.widgetInteractionMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._paymentStrategies.statuses.isWidgetInteracting;\n    }\n}\n","import { find } from 'lodash';\n\nimport { CheckoutPayment, CheckoutSelector } from '../checkout';\nimport { selector } from '../common/selector';\nimport { GatewayOrderPayment, InternalOrderPayment, OrderSelector } from '../order';\n\nimport PaymentMethod from './payment-method';\nimport { HOSTED } from './payment-method-types';\nimport { ACKNOWLEDGE, FINALIZE } from './payment-status-types';\n\n@selector\nexport default class PaymentSelector {\n    constructor(\n        private _checkout: CheckoutSelector,\n        private _order: OrderSelector\n    ) {}\n\n    getPaymentId(): { providerId: string; gatewayId?: string } | undefined {\n        const internalPayment = this._getInternalPayment();\n\n        if (internalPayment && internalPayment.id) {\n            return {\n                providerId: internalPayment.id,\n                gatewayId: internalPayment.gateway,\n            };\n        }\n\n        const payment = this._getHostedPayment() || this._getGatewayPayment();\n\n        if (payment && payment.providerId) {\n            return {\n                providerId: payment.providerId,\n                gatewayId: payment.gatewayId,\n            };\n        }\n    }\n\n    getPaymentStatus(): string | undefined {\n        const internalPayment = this._getInternalPayment();\n\n        if (internalPayment && internalPayment.status) {\n            return internalPayment.status.replace('PAYMENT_STATUS_', '');\n        }\n\n        const payment = this._getHostedPayment() || this._getGatewayPayment();\n\n        if (payment) {\n            return payment.detail.step;\n        }\n    }\n\n    getPaymentToken(): string | undefined {\n        const meta = this._order.getOrderMeta();\n\n        return meta && meta.token;\n    }\n\n    getPaymentRedirectUrl(): string | undefined {\n        const payment = this._getInternalPayment();\n\n        return payment && payment.redirectUrl;\n    }\n\n    isPaymentDataRequired(useStoreCredit: boolean = false): boolean {\n        const grandTotal = this._checkout.getGrandTotal(useStoreCredit);\n\n        return grandTotal ? grandTotal > 0 : false;\n    }\n\n    isPaymentDataSubmitted(paymentMethod?: PaymentMethod): boolean {\n        if (paymentMethod && paymentMethod.nonce) {\n            return true;\n        }\n\n        return this.getPaymentStatus() === ACKNOWLEDGE || this.getPaymentStatus() === FINALIZE;\n    }\n\n    private _getInternalPayment(): InternalOrderPayment | undefined {\n        const meta = this._order.getOrderMeta();\n\n        return meta && meta.payment;\n    }\n\n    private _getGatewayPayment(): GatewayOrderPayment | undefined {\n        const order = this._order.getOrder();\n\n        return find(order && order.payments, ({ providerId }) =>\n            providerId !== 'giftcertificate' && providerId !== 'storecredit'\n        ) as GatewayOrderPayment;\n    }\n\n    private _getHostedPayment(): CheckoutPayment | undefined {\n        const checkout = this._checkout.getCheckout();\n\n        return find(checkout && checkout.payments, ({ providerType }) =>\n            providerType === HOSTED\n        );\n    }\n}\n","import Instrument from './instrument';\nimport InstrumentState, { InstrumentMeta } from './instrument-state';\n\nexport default class InstrumentSelector {\n    constructor(\n        private _instruments: InstrumentState\n    ) {}\n\n    getInstruments(): Instrument[] | undefined {\n        return this._instruments.data;\n    }\n\n    getInstrumentsMeta(): InstrumentMeta | undefined {\n        return this._instruments.meta;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._instruments.errors && this._instruments.errors.loadError;\n    }\n\n    getDeleteError(instrumentId?: string): Error | undefined {\n        if (!this._instruments.errors || (instrumentId && this._instruments.errors.failedInstrument !== instrumentId)) {\n            return;\n        }\n\n        return this._instruments.errors.deleteError;\n    }\n\n    isLoading(): boolean {\n        return !!(this._instruments.statuses && this._instruments.statuses.isLoading);\n    }\n\n    isDeleting(instrumentId?: string): boolean {\n        if (!this._instruments.statuses || (instrumentId && this._instruments.statuses.deletingInstrument !== instrumentId)) {\n            return false;\n        }\n\n        return !!this._instruments.statuses.isDeleting;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport RemoteCheckoutState, { RemoteCheckoutStateData } from './remote-checkout-state';\n\n@selector\nexport default class RemoteCheckoutSelector {\n    constructor(\n        private _remoteCheckout: RemoteCheckoutState\n    ) {}\n\n    getCheckout<TMethodId extends keyof RemoteCheckoutStateData>(\n        methodId: TMethodId\n    ): RemoteCheckoutStateData[TMethodId] | undefined {\n        return this._remoteCheckout.data[methodId];\n    }\n}\n","import { Address } from '../address';\nimport { selector } from '../common/selector';\n\nimport ConsignmentState from './consignment-state';\n\n@selector\nexport default class ShippingAddressSelector {\n    constructor(\n        private _consignments: ConsignmentState\n    ) {}\n\n    getShippingAddress(): Address | undefined {\n        const consignments = this._consignments.data;\n\n        if (!consignments || !consignments[0]) {\n            return;\n        }\n\n        return consignments[0].shippingAddress;\n    }\n}\n","import { selector } from '../common/selector';\nimport { Country } from '../geography';\n\nimport ShippingCountryState from './shipping-country-state';\n\n@selector\nexport default class ShippingCountrySelector {\n    constructor(\n        private _shippingCountries: ShippingCountryState\n    ) {}\n\n    getShippingCountries(): Country[] | undefined {\n        return this._shippingCountries.data;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._shippingCountries.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return !!this._shippingCountries.statuses.isLoading;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport ShippingStrategyState from './shipping-strategy-state';\n\n@selector\nexport default class ShippingStrategySelector {\n    constructor(\n        private _shippingStrategies: ShippingStrategyState\n    ) {}\n\n    getUpdateAddressError(methodId?: string): Error | undefined {\n        if (methodId && this._shippingStrategies.errors.updateAddressMethodId !== methodId) {\n            return;\n        }\n\n        return this._shippingStrategies.errors.updateAddressError;\n    }\n\n    getSelectOptionError(methodId?: string): Error | undefined {\n        if (methodId && this._shippingStrategies.errors.selectOptionMethodId !== methodId) {\n            return;\n        }\n\n        return this._shippingStrategies.errors.selectOptionError;\n    }\n\n    getInitializeError(methodId?: string): Error | undefined {\n        if (methodId && this._shippingStrategies.errors.initializeMethodId !== methodId) {\n            return;\n        }\n\n        return this._shippingStrategies.errors.initializeError;\n    }\n\n    isUpdatingAddress(methodId?: string): boolean {\n        if (methodId && this._shippingStrategies.statuses.updateAddressMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._shippingStrategies.statuses.isUpdatingAddress;\n    }\n\n    isSelectingOption(methodId?: string): boolean {\n        if (methodId && this._shippingStrategies.statuses.selectOptionMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._shippingStrategies.statuses.isSelectingOption;\n    }\n\n    isInitializing(methodId?: string): boolean {\n        if (methodId && this._shippingStrategies.statuses.initializeMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._shippingStrategies.statuses.isInitializing;\n    }\n\n    isInitialized(methodId: string): boolean {\n        return !!(\n            this._shippingStrategies.data[methodId] &&\n            this._shippingStrategies.data[methodId].isInitialized\n        );\n    }\n}\n","import { identity, isEqual, pickBy } from 'lodash';\n\nimport Address from './address';\n\nexport default function isAddressEqual(addressA: Partial<Address>, addressB: Partial<Address>): boolean {\n    return isEqual(normalize(addressA), normalize(addressB));\n}\n\nfunction normalize(address: Partial<Address>): Partial<Address> {\n    return pickBy({\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        address1: address.address1,\n        address2: address.address2,\n        city: address.city,\n        stateOrProvince: address.stateOrProvince,\n        countryCode: address.countryCode,\n        postalCode: address.postalCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    }, identity);\n}\n","import { find } from 'lodash';\n\nimport { isAddressEqual, AddressRequestBody } from '../address';\nimport { CartSelector, PhysicalItem } from '../cart';\nimport { selector } from '../common/selector';\n\nimport Consignment from './consignment';\nimport ConsignmentState from './consignment-state';\nimport ShippingOption from './shipping-option';\n\n@selector\nexport default class ConsignmentSelector {\n    constructor(\n        private _consignments: ConsignmentState,\n        private _cart: CartSelector\n    ) {}\n\n    getConsignments(): Consignment[] | undefined {\n        return this._consignments.data;\n    }\n\n    getConsignmentById(id: string): Consignment | undefined {\n        const consignments = this._consignments.data;\n\n        if (!consignments || !consignments.length) {\n            return;\n        }\n\n        return find(consignments, { id });\n    }\n\n    getConsignmentByAddress(address: AddressRequestBody): Consignment | undefined {\n        const consignments = this._consignments.data;\n\n        if (!consignments || !consignments.length) {\n            return;\n        }\n\n        return find(consignments, consignment =>\n            isAddressEqual(consignment.shippingAddress, address)\n        );\n    }\n\n    getShippingOption(): ShippingOption | undefined {\n        const consignments = this._consignments.data;\n\n        if (consignments && consignments.length) {\n            return consignments[0].selectedShippingOption;\n        }\n    }\n\n    getLoadError(): Error | undefined {\n        return this._consignments.errors.loadError;\n    }\n\n    getCreateError(): Error | undefined {\n        return this._consignments.errors.createError;\n    }\n\n    getLoadShippingOptionsError(): Error | undefined {\n        return this._consignments.errors.loadShippingOptionsError;\n    }\n\n    getUnassignedItems(): PhysicalItem[] {\n        const cart = this._cart.getCart();\n\n        if (!cart) {\n            return [];\n        }\n\n        const assignedLineItemIds = (this.getConsignments() || []).reduce(\n            (itemIds, consignment) => itemIds.concat(consignment.lineItemIds),\n            [] as string[]\n        );\n\n        return (cart.lineItems.physicalItems || []).filter(\n            item => assignedLineItemIds.indexOf(item.id as string) < 0\n        );\n    }\n\n    getUpdateError(consignmentId?: string): Error | undefined {\n        if (consignmentId) {\n            return this._consignments.errors.updateError[consignmentId];\n        }\n\n        return find(this._consignments.errors.updateError);\n    }\n\n    getDeleteError(consignmentId?: string): Error | undefined {\n        if (consignmentId) {\n            return this._consignments.errors.deleteError[consignmentId];\n        }\n\n        return find(this._consignments.errors.deleteError);\n    }\n\n    getItemAssignmentError(address: AddressRequestBody): Error | undefined {\n        const consignment = this.getConsignmentByAddress(address);\n\n        return consignment ? this.getUpdateError(consignment.id) : this.getCreateError();\n    }\n\n    getUpdateShippingOptionError(consignmentId?: string): Error | undefined {\n        if (consignmentId) {\n            return this._consignments.errors.updateShippingOptionError[consignmentId];\n        }\n\n        return find(this._consignments.errors.updateShippingOptionError);\n    }\n\n    isLoading(): boolean {\n        return this._consignments.statuses.isLoading === true;\n    }\n\n    isLoadingShippingOptions(): boolean {\n        return this._consignments.statuses.isLoadingShippingOptions === true;\n    }\n\n    isCreating(): boolean {\n        return this._consignments.statuses.isCreating === true;\n    }\n\n    isUpdating(consignmentId?: string): boolean {\n        if (consignmentId) {\n            return this._consignments.statuses.isUpdating[consignmentId] === true;\n        }\n\n        return find(this._consignments.statuses.isUpdating) === true;\n    }\n\n    isDeleting(consignmentId?: string): boolean {\n        if (consignmentId) {\n            return this._consignments.statuses.isDeleting[consignmentId] === true;\n        }\n\n        return find(this._consignments.statuses.isDeleting) === true;\n    }\n\n    isAssigningItems(address: AddressRequestBody): boolean {\n        const consignment = this.getConsignmentByAddress(address);\n\n        return consignment ? this.isUpdating(consignment.id) : this.isCreating();\n    }\n\n    isUpdatingShippingOption(consignmentId?: string): boolean {\n        if (consignmentId) {\n            return this._consignments.statuses.isUpdatingShippingOption[consignmentId] === true;\n        }\n\n        return find(this._consignments.statuses.isUpdatingShippingOption) === true;\n    }\n}\n","import { BillingAddressSelector } from '../billing';\nimport { CartSelector } from '../cart';\nimport { selector } from '../common/selector';\nimport { CouponSelector, GiftCertificateSelector } from '../coupon';\nimport { CustomerSelector } from '../customer';\nimport { ConsignmentSelector } from '../shipping';\n\nimport Checkout from './checkout';\nimport CheckoutState from './checkout-state';\n\n@selector\nexport default class CheckoutSelector {\n    constructor(\n        private _checkout: CheckoutState,\n        private _billingAddress: BillingAddressSelector,\n        private _cart: CartSelector,\n        private _consignments: ConsignmentSelector,\n        private _coupons: CouponSelector,\n        private _customer: CustomerSelector,\n        private _giftCertificates: GiftCertificateSelector\n    ) {}\n\n    getCheckout(): Checkout | undefined {\n        const { data } = this._checkout;\n        const billingAddress = this._billingAddress.getBillingAddress();\n        const cart = this._cart.getCart();\n        const customer = this._customer.getCustomer();\n        const consignments = this._consignments.getConsignments() || [];\n        const coupons = this._coupons.getCoupons() || [];\n        const giftCertificates = this._giftCertificates.getGiftCertificates() || [];\n\n        if (!data || !cart || !customer) {\n            return;\n        }\n\n        return {\n            ...data,\n            billingAddress,\n            cart,\n            customer,\n            consignments,\n            coupons,\n            giftCertificates,\n        };\n    }\n\n    getGrandTotal(useStoreCredit?: boolean): number | undefined {\n        const checkout = this.getCheckout();\n\n        if (!checkout) {\n            return;\n        }\n\n        const grandTotal = checkout.grandTotal || 0;\n        const storeCredit = checkout.customer.storeCredit || 0;\n\n        return useStoreCredit ? Math.max(grandTotal - storeCredit, 0) : grandTotal;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._checkout.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return this._checkout.statuses.isLoading === true;\n    }\n\n    getUpdateError(): Error | undefined {\n        return this._checkout.errors.updateError;\n    }\n\n    isUpdating(): boolean {\n        return this._checkout.statuses.isUpdating === true;\n    }\n}\n","import { BillingAddressSelector } from '../billing';\nimport { CartSelector } from '../cart';\nimport { CheckoutButtonSelector } from '../checkout-buttons';\nimport { createFreezeProxies } from '../common/utility';\nimport { ConfigSelector } from '../config';\nimport { CouponSelector, GiftCertificateSelector } from '../coupon';\nimport { CustomerSelector, CustomerStrategySelector } from '../customer';\nimport { FormSelector } from '../form';\nimport { CountrySelector } from '../geography';\nimport { OrderSelector } from '../order';\nimport { PaymentMethodSelector, PaymentSelector, PaymentStrategySelector } from '../payment';\nimport { InstrumentSelector } from '../payment/instrument';\nimport { RemoteCheckoutSelector } from '../remote-checkout';\nimport { ConsignmentSelector, ShippingAddressSelector, ShippingCountrySelector, ShippingStrategySelector } from '../shipping';\n\nimport CheckoutSelector from './checkout-selector';\nimport { CheckoutStoreOptions } from './checkout-store';\nimport CheckoutStoreState from './checkout-store-state';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\nexport default function createInternalCheckoutSelectors(state: CheckoutStoreState, options: CheckoutStoreOptions = {}): InternalCheckoutSelectors {\n    const billingAddress = new BillingAddressSelector(state.billingAddress);\n    const cart = new CartSelector(state.cart);\n    const checkoutButton = new CheckoutButtonSelector(state.checkoutButton);\n    const config = new ConfigSelector(state.config);\n    const countries = new CountrySelector(state.countries);\n    const coupons = new CouponSelector(state.coupons);\n    const customer = new CustomerSelector(state.customer);\n    const customerStrategies = new CustomerStrategySelector(state.customerStrategies);\n    const form = new FormSelector(state.config);\n    const giftCertificates = new GiftCertificateSelector(state.giftCertificates);\n    const instruments = new InstrumentSelector(state.instruments);\n    const paymentMethods = new PaymentMethodSelector(state.paymentMethods);\n    const paymentStrategies = new PaymentStrategySelector(state.paymentStrategies);\n    const shippingAddress = new ShippingAddressSelector(state.consignments);\n    const remoteCheckout = new RemoteCheckoutSelector(state.remoteCheckout);\n    const shippingCountries = new ShippingCountrySelector(state.shippingCountries);\n    const shippingStrategies = new ShippingStrategySelector(state.shippingStrategies);\n\n    // Compose selectors\n    const consignments = new ConsignmentSelector(state.consignments, cart);\n    const checkout = new CheckoutSelector(state.checkout, billingAddress, cart, consignments, coupons, customer, giftCertificates);\n    const order = new OrderSelector(state.order, billingAddress, coupons);\n    const payment = new PaymentSelector(checkout, order);\n\n    const selectors = {\n        billingAddress,\n        cart,\n        checkout,\n        checkoutButton,\n        config,\n        consignments,\n        countries,\n        coupons,\n        customer,\n        customerStrategies,\n        form,\n        giftCertificates,\n        instruments,\n        order,\n        payment,\n        paymentMethods,\n        paymentStrategies,\n        remoteCheckout,\n        shippingAddress,\n        shippingCountries,\n        shippingStrategies,\n    };\n\n    return options.shouldWarnMutation ? createFreezeProxies(selectors) : selectors;\n}\n","import { createDataStore } from '@bigcommerce/data-store';\n\nimport { createRequestErrorFactory } from '../common/error';\n\nimport CheckoutStore, { CheckoutStoreOptions } from './checkout-store';\nimport CheckoutStoreState from './checkout-store-state';\nimport createActionTransformer from './create-action-transformer';\nimport createCheckoutStoreReducer from './create-checkout-store-reducer';\nimport createInternalCheckoutSelectors from './create-internal-checkout-selectors';\n\nexport default function createCheckoutStore(\n    initialState: Partial<CheckoutStoreState> = {},\n    options?: CheckoutStoreOptions\n): CheckoutStore {\n    const actionTransformer = createActionTransformer(createRequestErrorFactory());\n    const stateTransformer = (state: CheckoutStoreState) => createInternalCheckoutSelectors(state);\n\n    return createDataStore(\n        createCheckoutStoreReducer(),\n        initialState,\n        { actionTransformer, stateTransformer, ...options }\n    );\n}\n","import { Action } from '@bigcommerce/data-store';\nimport { from, Observable, Subscribable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { RequestErrorFactory } from '../common/error';\n\nexport default function createActionTransformer(\n    requestErrorFactory: RequestErrorFactory\n): (action: Subscribable<Action>) => Observable<Action> {\n    return action$ => from(action$).pipe(catchError<Action, never>(action => {\n        if (action instanceof Error || action.payload instanceof Error) {\n            throw action;\n        }\n\n        if (isResponse(action.payload)) {\n            const message = action.payload.body && action.payload.body.detail;\n\n            throw { ...action, payload: requestErrorFactory.createError(action.payload, message) };\n        }\n\n        throw action;\n    }));\n}\n\nfunction isResponse(object: any) {\n    if (!object || typeof object !== 'object') {\n        return false;\n    }\n\n    return ['body', 'headers', 'status', 'statusText'].every(key =>\n        object.hasOwnProperty(key)\n    );\n}\n","import { PaymentMethodInvalidError } from '../../payment/errors';\n\nimport { UnrecoverableError } from './errors';\nimport RequestErrorFactory from './request-error-factory';\n\nexport default function createRequestErrorFactory(): RequestErrorFactory {\n    const factory = new RequestErrorFactory();\n\n    const unrecoverableErrorTypes = [\n        'catalog_only',\n        'empty_cart',\n        'invalid_order_id',\n        'invalid_order_token',\n        'missing_order_token',\n        'missing_provider_token',\n        'missing_shipping_method',\n        'order_completion_error',\n        'order_could_not_be_finalized_error',\n        'order_create_failed',\n        'provider_fatal_error',\n        'provider_setup_error',\n        'stock_too_low',\n    ];\n\n    unrecoverableErrorTypes.forEach(type => {\n        factory.register(type, (response, message) => new UnrecoverableError(response, message));\n    });\n\n    factory.register('invalid_payment_provider', response => new PaymentMethodInvalidError(response));\n    factory.register('payment_config_not_found', response => new PaymentMethodInvalidError(response));\n\n    return factory;\n}\n","import { combineReducers, Action, Reducer } from '@bigcommerce/data-store';\n\nimport { billingAddressReducer } from '../billing';\nimport { cartReducer } from '../cart';\nimport { checkoutButtonReducer } from '../checkout-buttons';\nimport { configReducer } from '../config';\nimport { couponReducer, giftCertificateReducer } from '../coupon';\nimport { customerReducer, customerStrategyReducer } from '../customer';\nimport { countryReducer } from '../geography';\nimport { orderReducer } from '../order';\nimport { paymentMethodReducer, paymentReducer, paymentStrategyReducer } from '../payment';\nimport { instrumentReducer } from '../payment/instrument';\nimport { remoteCheckoutReducer } from '../remote-checkout';\nimport { consignmentReducer, shippingCountryReducer, shippingStrategyReducer } from '../shipping';\n\nimport checkoutReducer from './checkout-reducer';\nimport CheckoutStoreState from './checkout-store-state';\n\nexport default function createCheckoutStoreReducer(): Reducer<CheckoutStoreState, Action> {\n    return combineReducers({\n        billingAddress: billingAddressReducer,\n        cart: cartReducer,\n        checkout: checkoutReducer,\n        checkoutButton: checkoutButtonReducer,\n        config: configReducer,\n        consignments: consignmentReducer,\n        countries: countryReducer,\n        coupons: couponReducer,\n        customer: customerReducer,\n        customerStrategies: customerStrategyReducer,\n        giftCertificates: giftCertificateReducer,\n        instruments: instrumentReducer,\n        order: orderReducer,\n        payment: paymentReducer,\n        paymentMethods: paymentMethodReducer,\n        paymentStrategies: paymentStrategyReducer,\n        remoteCheckout: remoteCheckoutReducer,\n        shippingCountries: shippingCountryReducer,\n        shippingStrategies: shippingStrategyReducer,\n    });\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { InternalErrorResponseBody } from '../../common/error';\nimport { RequestError } from '../../common/error/errors';\n\nexport default class CheckoutNotAvailableError extends RequestError {\n    constructor(response: Response<InternalErrorResponseBody>) {\n        super(response, { message: response.body.title });\n\n        this.name = 'CheckoutNotAvailableError';\n        this.type = 'checkout_not_available';\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { joinIncludes, ContentType, RequestOptions } from '../common/http-request';\n\nimport Checkout, { CheckoutRequestBody } from './checkout';\nimport CHECKOUT_DEFAULT_INCLUDES from './checkout-default-includes';\nimport CheckoutParams from './checkout-params';\nimport { CheckoutNotAvailableError } from './errors';\n\nexport default class CheckoutRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadCheckout(id: string, { params, timeout }: RequestOptions<CheckoutParams> = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkout/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.get(url, {\n            params: {\n                include: joinIncludes([\n                    ...CHECKOUT_DEFAULT_INCLUDES,\n                    ...(params && params.include || []),\n                ]),\n            },\n            headers,\n            timeout,\n        }).catch(error => {\n            if (error.status >= 400 && error.status < 500) {\n                throw new CheckoutNotAvailableError(error);\n            }\n\n            throw error;\n        });\n    }\n\n    updateCheckout(id: string, body: CheckoutRequestBody, { params, timeout }: RequestOptions<CheckoutParams> = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkout/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.put(url, {\n            params: {\n                include: joinIncludes([\n                    ...CHECKOUT_DEFAULT_INCLUDES,\n                    ...(params && params.include || []),\n                ]),\n            },\n            body,\n            headers,\n            timeout,\n        });\n    }\n}\n","import Coupon from './coupon';\nimport InternalCoupon from './internal-coupon';\n\nconst couponTypes = [\n    'per_item_discount',\n    'percentage_discount',\n    'per_total_discount',\n    'shipping_discount',\n    'free_shipping',\n];\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalCoupon(coupon: Coupon): InternalCoupon {\n    return {\n        code: coupon.code,\n        discount: coupon.displayName,\n        discountType: couponTypes.indexOf(coupon.couponType),\n    };\n}\n","import { isBillingAddressLike } from '../billing';\nimport BillingAddress from '../billing/billing-address';\nimport { Consignment } from '../shipping';\n\nimport Address from './address';\nimport InternalAddress from './internal-address';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalAddress(address: Address | BillingAddress, consignments?: Consignment[]): InternalAddress {\n    let addressId;\n\n    if (isBillingAddressLike(address)) {\n        addressId = address.id;\n    } else if (consignments && consignments.length) {\n        addressId = consignments[0].id;\n    }\n\n    return {\n        id: addressId,\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        addressLine1: address.address1,\n        addressLine2: address.address2,\n        city: address.city,\n        province: address.stateOrProvince,\n        provinceCode: address.stateOrProvinceCode,\n        postCode: address.postalCode,\n        country: address.country,\n        countryCode: address.countryCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    };\n}\n","import Address from '../address/address';\n\nimport BillingAddress from './billing-address';\n\nexport default function isBillingAddressLike(address: Address): address is BillingAddress {\n    const billingAddress = address as BillingAddress;\n\n    return typeof billingAddress.id !== 'undefined';\n}\n","import { InternalCheckoutSelectors } from '../checkout';\nimport { selector } from '../common/selector';\n\nimport CheckoutButtonSelector from './checkout-button-selector';\nimport { CheckoutButtonMethodType } from './strategies';\n\n@selector\nexport default class CheckoutButtonErrorSelector {\n    private _checkoutButton: CheckoutButtonSelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._checkoutButton = selectors.checkoutButton;\n    }\n\n    getInitializeButtonError(methodId?: CheckoutButtonMethodType): Error | undefined {\n        return this._checkoutButton.getInitializeError(methodId);\n    }\n\n    getDeinitializeButtonError(methodId?: CheckoutButtonMethodType): Error | undefined {\n        return this._checkoutButton.getDeinitializeError(methodId);\n    }\n}\n","import { InternalCheckoutSelectors } from '../checkout';\nimport { selector } from '../common/selector';\n\nimport CheckoutButtonSelector from './checkout-button-selector';\nimport { CheckoutButtonMethodType } from './strategies';\n\n@selector\nexport default class CheckoutButtonStatusSelector {\n    private _checkoutButton: CheckoutButtonSelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._checkoutButton = selectors.checkoutButton;\n    }\n\n    isInitializingButton(methodId?: CheckoutButtonMethodType): boolean {\n        return this._checkoutButton.isInitializing(methodId);\n    }\n\n    isDeinitializingButton(methodId?: CheckoutButtonMethodType): boolean {\n        return this._checkoutButton.isDeinitializing(methodId);\n    }\n}\n","import { InternalCheckoutSelectors } from '../checkout';\n\nimport CheckoutButtonErrorSelector from './checkout-button-error-selector';\nimport CheckoutButtonSelectors from './checkout-button-selectors';\nimport CheckoutButtonStatusSelector from './checkout-button-status-selector';\n\nexport default function createCheckoutButtonSelectors(selectors: InternalCheckoutSelectors): CheckoutButtonSelectors {\n    const errors = new CheckoutButtonErrorSelector(selectors);\n    const statuses = new CheckoutButtonStatusSelector(selectors);\n\n    return {\n        errors,\n        statuses,\n    };\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../checkout';\nimport { isElementId, setUniqueElementId } from '../common/dom';\n\nimport { CheckoutButtonInitializeOptions, CheckoutButtonOptions } from './checkout-button-options';\nimport CheckoutButtonSelectors from './checkout-button-selectors';\nimport CheckoutButtonStrategyActionCreator from './checkout-button-strategy-action-creator';\nimport createCheckoutButtonSelectors from './create-checkout-button-selectors';\n\nexport default class CheckoutButtonInitializer {\n    private _state: CheckoutButtonSelectors;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _store: CheckoutStore,\n        private _buttonStrategyActionCreator: CheckoutButtonStrategyActionCreator\n    ) {\n        this._state = createCheckoutButtonSelectors(this._store.getState());\n\n        this._store.subscribe(state => {\n            this._state = createCheckoutButtonSelectors(state);\n        });\n    }\n\n    /**\n     * Returns a snapshot of the current state.\n     *\n     * The method returns a new instance every time there is a change in the\n     * state. You can query the state by calling any of its getter methods.\n     *\n     * ```js\n     * const state = service.getState();\n     *\n     * console.log(state.errors.getInitializeButtonError());\n     * console.log(state.statuses.isInitializingButton());\n     * ```\n     *\n     * @returns The current customer's checkout state\n     */\n    getState(): CheckoutButtonSelectors {\n        return this._state;\n    }\n\n    /**\n     * Subscribes to any changes to the current state.\n     *\n     * The method registers a callback function and executes it every time there\n     * is a change in the current state.\n     *\n     * ```js\n     * service.subscribe(state => {\n     *     console.log(state.statuses.isInitializingButton());\n     * });\n     * ```\n     *\n     * The method can be configured to notify subscribers only regarding\n     * relevant changes, by providing a filter function.\n     *\n     * ```js\n     * const filter = state => state.errors.getInitializeButtonError();\n     *\n     * // Only trigger the subscriber when the cart changes.\n     * service.subscribe(state => {\n     *     console.log(state.errors.getInitializeButtonError())\n     * }, filter);\n     * ```\n     *\n     * @param subscriber - The function to subscribe to state changes.\n     * @param filters - One or more functions to filter out irrelevant state\n     * changes. If more than one function is provided, the subscriber will only\n     * be triggered if all conditions are met.\n     * @returns A function, if called, will unsubscribe the subscriber.\n     */\n    subscribe(\n        subscriber: (state: CheckoutButtonSelectors) => void,\n        ...filters: Array<(state: CheckoutButtonSelectors) => any>\n    ): () => void {\n        return this._store.subscribe(\n            () => subscriber(this.getState()),\n            state => state.checkoutButton.getState(),\n            ...filters.map(filter => (state: InternalCheckoutSelectors) => filter(createCheckoutButtonSelectors(state)))\n        );\n    }\n\n    /**\n     * Initializes the checkout button of a payment method.\n     *\n     * When the checkout button is initialized, it will be inserted into the DOM,\n     * ready to be interacted with by the customer.\n     *\n     * ```js\n     * initializer.initializeButton({\n     *     methodId: 'braintreepaypal',\n     *     containerId: 'checkoutButton',\n     *     braintreepaypal: {\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the checkout button.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeButton(options: CheckoutButtonInitializeOptions): Promise<CheckoutButtonSelectors> {\n        const containerIds = isElementId(options.containerId) ?\n            [options.containerId] :\n            setUniqueElementId(options.containerId, `${options.methodId}-container`);\n\n        return Promise.all(\n            containerIds.map(containerId => {\n                const action = this._buttonStrategyActionCreator.initialize({ ...options, containerId });\n                const queueId = `checkoutButtonStrategy:${options.methodId}:${containerId}`;\n\n                return this._store.dispatch(action, { queueId });\n            })\n        )\n            .then(() => this.getState());\n    }\n\n    /**\n     * De-initializes the checkout button by performing any necessary clean-ups.\n     *\n     * ```js\n     * await service.deinitializeButton({\n     *     methodId: 'braintreepaypal',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the checkout button.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeButton(options: CheckoutButtonOptions): Promise<CheckoutButtonSelectors> {\n        const action = this._buttonStrategyActionCreator.deinitialize(options);\n        const queueId = `checkoutButtonStrategy:${options.methodId}`;\n\n        return this._store.dispatch(action, { queueId })\n            .then(() => this.getState());\n    }\n}\n","enum CheckoutButtonMethodType {\n    BRAINTREE_PAYPAL = 'braintreepaypal',\n    BRAINTREE_PAYPAL_CREDIT = 'braintreepaypalcredit',\n    GOOGLEPAY_BRAINTREE = 'googlepaybraintree',\n    GOOGLEPAY_STRIPE = 'googlepaystripe',\n    MASTERPASS = 'masterpass',\n    PAYPALEXPRESS = 'paypalexpress',\n}\n\nexport default CheckoutButtonMethodType;\n","export default function isElementId(id: string): boolean {\n    return /^\\w[\\w\\-\\:\\.]*$/.test(id);\n}\n","import { uniqueId } from 'lodash';\n\nimport { InvalidArgumentError } from '../error/errors';\n\nexport default function setUniqueElementId(selector: string, idPrefix: string): string[] {\n    const containers = document.querySelectorAll(selector);\n\n    if (!containers.length) {\n        throw new InvalidArgumentError(`Unable to find any element with the specified selector: ${selector}`);\n    }\n\n    return Array.prototype.slice.call(containers)\n        .map((container: HTMLElement) => {\n            if (!container.id) {\n                container.id = uniqueId(idPrefix);\n            }\n\n            return container.id;\n        });\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, empty, of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { Registry } from '../common/registry';\nimport { PaymentMethodActionCreator } from '../payment';\n\nimport { CheckoutButtonActionType, DeinitializeButtonAction, InitializeButtonAction } from './checkout-button-actions';\nimport { CheckoutButtonInitializeOptions, CheckoutButtonOptions } from './checkout-button-options';\nimport { CheckoutButtonStrategy } from './strategies';\n\nexport default class CheckoutButtonStrategyActionCreator {\n    constructor(\n        private _registry: Registry<CheckoutButtonStrategy>,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): ThunkAction<InitializeButtonAction, InternalCheckoutSelectors> {\n        return store => {\n            const meta = { methodId: options.methodId, containerId: options.containerId };\n\n            if (store.getState().checkoutButton.isInitialized(options.methodId, options.containerId)) {\n                return empty();\n            }\n\n            return concat(\n                of(createAction(CheckoutButtonActionType.InitializeButtonRequested, undefined, meta)),\n                this._paymentMethodActionCreator.loadPaymentMethod(options.methodId, { timeout: options.timeout, useCache: true }),\n                defer(() => this._registry.get(options.methodId).initialize(options)\n                    .then(() => createAction(CheckoutButtonActionType.InitializeButtonSucceeded, undefined, meta)))\n            ).pipe(\n                catchError(error => throwErrorAction(CheckoutButtonActionType.InitializeButtonFailed, error, meta))\n            );\n        };\n    }\n\n    deinitialize(options: CheckoutButtonOptions): ThunkAction<DeinitializeButtonAction, InternalCheckoutSelectors> {\n        return store => {\n            const meta = { methodId: options.methodId };\n\n            if (!store.getState().checkoutButton.isInitialized(options.methodId)) {\n                return empty();\n            }\n\n            return concat(\n                of(createAction(CheckoutButtonActionType.DeinitializeButtonRequested, undefined, meta)),\n                defer(() => this._registry.get(options.methodId).deinitialize()\n                    .then(() => createAction(CheckoutButtonActionType.DeinitializeButtonSucceeded, undefined, meta)))\n            ).pipe(\n                catchError(error => throwErrorAction(CheckoutButtonActionType.DeinitializeButtonFailed, error, meta))\n            );\n        };\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { pick } from 'lodash';\n\nimport { Address, LegacyAddress } from '../../../address';\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, StandardError } from '../../../common/error/errors';\nimport { PaymentMethod } from '../../../payment';\nimport { BraintreeAddress, BraintreeError, BraintreePaypalCheckout, BraintreeSDKCreator, BraintreeTokenizePayload } from '../../../payment/strategies/braintree';\nimport { PaypalAuthorizeData, PaypalScriptLoader } from '../../../payment/strategies/paypal';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class BraintreePaypalButtonStrategy implements CheckoutButtonStrategy {\n    private _paypalCheckout?: BraintreePaypalCheckout;\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _braintreeSDKCreator: BraintreeSDKCreator,\n        private _paypalScriptLoader: PaypalScriptLoader,\n        private _formPoster: FormPoster,\n        private _offerCredit: boolean = false\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const paypalOptions = (this._offerCredit ? options.braintreepaypalcredit : options.braintreepaypal) || {};\n        const state = this._store.getState();\n        const paymentMethod = this._paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n        if (!paymentMethod || !paymentMethod.clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._braintreeSDKCreator.initialize(paymentMethod.clientToken);\n\n        return Promise.all([\n            this._braintreeSDKCreator.getPaypalCheckout(),\n            this._paypalScriptLoader.loadPaypal(),\n        ])\n            .then(([paypalCheckout, paypal]) => {\n                this._paypalCheckout = paypalCheckout;\n\n                const allowedSources = [];\n                const disallowedSources = [];\n\n                if (paypalOptions.allowCredit) {\n                    allowedSources.push(paypal.FUNDING.CREDIT);\n                } else {\n                    disallowedSources.push(paypal.FUNDING.CREDIT);\n                }\n\n                return paypal.Button.render({\n                    env: paymentMethod.config.testMode ? 'sandbox' : 'production',\n                    commit: paypalOptions.shouldProcessPayment ? true : false,\n                    funding: {\n                        allowed: allowedSources,\n                        disallowed: disallowedSources,\n                    },\n                    style: {\n                        shape: 'rect',\n                        label: this._offerCredit ? 'credit' : undefined,\n                        ...pick(paypalOptions.style, 'layout', 'size', 'color', 'label', 'shape', 'tagline', 'fundingicons'),\n                    },\n                    payment: () => this._setupPayment(paypalOptions.onPaymentError),\n                    onAuthorize: data => this._tokenizePayment(data, paypalOptions.shouldProcessPayment, paypalOptions.onAuthorizeError),\n                }, options.containerId);\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        this._paypalCheckout = undefined;\n        this._paymentMethod = undefined;\n\n        this._braintreeSDKCreator.teardown();\n\n        return Promise.resolve();\n    }\n\n    private _setupPayment(onError?: (error: BraintreeError | StandardError) => void): Promise<string> {\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(state => {\n                const checkout = state.checkout.getCheckout();\n                const config = state.config.getStoreConfig();\n                const customer = state.customer.getCustomer();\n                const address = customer && customer.addresses && customer.addresses[0];\n\n                if (!this._paypalCheckout) {\n                    throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n                }\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!config) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                return this._paypalCheckout.createPayment({\n                    flow: 'checkout',\n                    enableShippingAddress: true,\n                    shippingAddressEditable: false,\n                    shippingAddressOverride: address ? this._mapToBraintreeAddress(address) : undefined,\n                    amount: checkout.grandTotal,\n                    currency: config.currency.code,\n                    offerCredit: this._offerCredit,\n                });\n            })\n            .catch(error => {\n                if (onError) {\n                    onError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    private _tokenizePayment(\n        data: PaypalAuthorizeData,\n        shouldProcessPayment?: boolean,\n        onError?: (error: BraintreeError | StandardError) => void\n    ): Promise<BraintreeTokenizePayload> {\n        if (!this._paypalCheckout || !this._paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        const methodId = this._paymentMethod.id;\n\n        return Promise.all([\n            this._paypalCheckout.tokenizePayment(data),\n            this._braintreeSDKCreator.getDataCollector({ paypal: true }),\n        ])\n            .then(([payload, { deviceData }]) => {\n                this._formPoster.postForm('/checkout.php', {\n                    payment_type: 'paypal',\n                    provider: methodId,\n                    action: shouldProcessPayment ? 'process_payment' : 'set_external_checkout',\n                    nonce: payload.nonce,\n                    device_data: deviceData,\n                    shipping_address: JSON.stringify(this._mapToLegacyShippingAddress(payload)),\n                    billing_address: JSON.stringify(this._mapToLegacyBillingAddress(payload)),\n                });\n\n                return payload;\n            })\n            .catch(error => {\n                if (onError) {\n                    onError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    private _mapToLegacyShippingAddress(payload: BraintreeTokenizePayload): Partial<LegacyAddress> {\n        const shippingAddress = payload.details.shippingAddress;\n        const recipientName = shippingAddress && shippingAddress.recipientName || '';\n        const [firstName, lastName] = recipientName.split(' ');\n\n        return {\n            email: payload.details.email,\n            first_name: firstName,\n            last_name: lastName,\n            phone_number: shippingAddress && shippingAddress.phone || payload.details.phone,\n            address_line_1: shippingAddress && shippingAddress.line1,\n            address_line_2: shippingAddress && shippingAddress.line2,\n            city: shippingAddress && shippingAddress.city,\n            state: shippingAddress && shippingAddress.state,\n            country_code: shippingAddress && shippingAddress.countryCode,\n            postal_code: shippingAddress && shippingAddress.postalCode,\n        };\n    }\n\n    private _mapToLegacyBillingAddress(payload: BraintreeTokenizePayload): Partial<LegacyAddress> {\n        const billingAddress = payload.details.billingAddress;\n        const shippingAddress = payload.details.shippingAddress;\n\n        if (billingAddress) {\n            return {\n                email: payload.details.email,\n                first_name: billingAddress.firstName || payload.details.firstName,\n                last_name: billingAddress.lastName || payload.details.lastName,\n                phone_number: billingAddress.phone || payload.details.phone,\n                address_line_1: billingAddress.line1,\n                address_line_2: billingAddress.line2,\n                city: billingAddress.city,\n                state: billingAddress.state,\n                country_code: billingAddress.countryCode,\n                postal_code: billingAddress.postalCode,\n            };\n        }\n\n        return {\n            email: payload.details.email,\n            first_name: payload.details.firstName,\n            last_name: payload.details.lastName,\n            phone_number: payload.details.phone,\n            address_line_1: shippingAddress && shippingAddress.line1,\n            address_line_2: shippingAddress && shippingAddress.line2,\n            city: shippingAddress && shippingAddress.city,\n            state: shippingAddress && shippingAddress.state,\n            country_code: shippingAddress && shippingAddress.countryCode,\n            postal_code: shippingAddress && shippingAddress.postalCode,\n        };\n    }\n\n    private _mapToBraintreeAddress(address: Address): BraintreeAddress {\n        return {\n            line1: address.address1,\n            line2: address.address2,\n            city: address.city,\n            state: address.stateOrProvinceCode,\n            postalCode: address.postalCode,\n            countryCode: address.countryCode,\n            phone: address.phone,\n            recipientName: `${address.firstName} ${address.lastName}`,\n        };\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { InvalidArgumentError, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { GooglePayPaymentProcessor } from '../../../payment/strategies/googlepay';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class GooglePayButtonStrategy implements CheckoutButtonStrategy {\n    private _methodId?: string;\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _formPoster: FormPoster,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _googlePayPaymentProcessor: GooglePayPaymentProcessor\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { containerId, methodId } = options;\n\n        if (!containerId || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"containerId\" argument is not provided.');\n        }\n\n        this._methodId = methodId;\n\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(() => this._googlePayPaymentProcessor.initialize(this._getMethodId()))\n            .then(() => {\n                this._walletButton = this._createSignInButton(containerId);\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        if (this._walletButton && this._walletButton.parentNode) {\n            this._walletButton.parentNode.removeChild(this._walletButton);\n            this._walletButton = undefined;\n        }\n\n        return this._googlePayPaymentProcessor.deinitialize();\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const container = document.getElementById(containerId);\n\n        if (!container) {\n            throw new InvalidArgumentError('Unable to create sign-in button without valid container ID.');\n        }\n\n        const googlePayButton = this._googlePayPaymentProcessor.createButton(this._handleWalletButtonClick);\n\n        container.appendChild(googlePayButton);\n\n        return googlePayButton;\n    }\n\n    private _getMethodId(): string {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._methodId;\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): Promise<void> {\n        event.preventDefault();\n\n        return this._googlePayPaymentProcessor.displayWallet()\n            .then(paymentData => this._googlePayPaymentProcessor.handleSuccess(paymentData)\n            .then(() => {\n                if (paymentData.shippingAddress) {\n                    this._googlePayPaymentProcessor.updateShippingAddress(paymentData.shippingAddress);\n                }\n            }))\n            .then(() => this._onPaymentSelectComplete())\n            .catch(error => this._onError(error));\n    }\n\n    private _onPaymentSelectComplete(): void {\n        this._formPoster.postForm('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n        });\n    }\n\n    private _onError(error?: Error): void {\n        if (error && error.message !== 'CANCELED') {\n            throw error;\n        }\n    }\n}\n","import { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType\n} from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { getCallbackUrl, Masterpass, MasterpassCheckoutOptions, MasterpassScriptLoader } from '../../../payment/strategies/masterpass';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class MasterpassButtonStrategy implements CheckoutButtonStrategy {\n    private _masterpassClient?: Masterpass;\n    private _methodId?: string;\n    private _signInButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _masterpassScriptLoader: MasterpassScriptLoader\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { containerId, methodId } = options;\n\n        if (!containerId || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"containerId\" argument is not provided.');\n        }\n\n        this._methodId = methodId;\n\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!paymentMethod || !paymentMethod.initializationData.checkoutId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                return this._masterpassScriptLoader.load(paymentMethod.config.testMode);\n            })\n            .then(masterpass => {\n                this._masterpassClient = masterpass;\n                this._signInButton = this._createSignInButton(containerId);\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        if (this._signInButton && this._signInButton.parentNode) {\n            this._signInButton.removeEventListener('click', this._handleWalletButtonClick);\n            this._signInButton.parentNode.removeChild(this._signInButton);\n            this._signInButton = undefined;\n        }\n\n        return Promise.resolve();\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const buttonContainer = document.getElementById(containerId);\n\n        if (!buttonContainer) {\n            throw new Error('Need a container to place the button');\n        }\n\n        const button = document.createElement('input');\n\n        button.type = 'image';\n        button.src = 'https://static.masterpass.com/dyn/img/btn/global/mp_chk_btn_160x037px.svg';\n        buttonContainer.appendChild(button);\n\n        button.addEventListener('click', this._handleWalletButtonClick);\n\n        return button;\n    }\n\n    private _createMasterpassPayload(): MasterpassCheckoutOptions {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const paymentMethod = this._methodId ? state.paymentMethods.getPaymentMethod(this._methodId) : null;\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return {\n            checkoutId: paymentMethod.initializationData.checkoutId,\n            allowedCardTypes: paymentMethod.initializationData.allowedCardTypes,\n            amount: checkout.cart.cartAmount.toString(),\n            currency: checkout.cart.currency.code,\n            cartId: checkout.cart.id,\n            suppressShippingAddress: false,\n            callbackUrl: getCallbackUrl('cart'),\n        };\n    }\n\n    @bind\n    private _handleWalletButtonClick(): void {\n        if (!this._masterpassClient) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        this._masterpassClient.checkout(this._createMasterpassPayload());\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { pick } from 'lodash';\n\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, StandardError } from '../../../common/error/errors';\nimport { INTERNAL_USE_ONLY } from '../../../common/http-request';\nimport { PaymentMethod } from '../../../payment';\nimport { PaypalActions, PaypalAuthorizeData, PaypalClientToken, PaypalScriptLoader } from '../../../payment/strategies/paypal';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class PaypalButtonStrategy implements CheckoutButtonStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paypalScriptLoader: PaypalScriptLoader,\n        private _formPoster: FormPoster,\n        private _host: string = ''\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const paypalOptions = options.paypal;\n        const state = this._store.getState();\n        const paymentMethod = this._paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n        if (!paypalOptions) {\n            throw new InvalidArgumentError();\n        }\n\n        return this._paypalScriptLoader.loadPaypal()\n            .then(paypal => {\n                if (!paymentMethod || !paymentMethod.config.merchantId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const merchantId = paymentMethod.config.merchantId;\n                const env = paymentMethod.config.testMode ? 'sandbox' : 'production';\n                const clientToken: PaypalClientToken = { [env]: paypalOptions.clientId };\n\n                const allowedSources = [];\n                const disallowedSources = [];\n\n                if (paypalOptions.allowCredit) {\n                    allowedSources.push(paypal.FUNDING.CREDIT);\n                } else {\n                    disallowedSources.push(paypal.FUNDING.CREDIT);\n                }\n\n                return paypal.Button.render({\n                    env,\n                    client: clientToken,\n                    commit: paypalOptions.shouldProcessPayment,\n                    funding: {\n                        allowed: allowedSources,\n                        disallowed: disallowedSources,\n                    },\n                    style: {\n                        shape: 'rect',\n                        ...pick(paypalOptions.style, 'layout', 'size', 'color', 'label', 'shape', 'tagline', 'fundingicons'),\n                    },\n                    payment: (data, actions) => this._setupPayment(merchantId, actions, paypalOptions.onPaymentError),\n                    onAuthorize: (data, actions) => this._tokenizePayment(data, actions, paypalOptions.shouldProcessPayment, paypalOptions.onAuthorizeError),\n                }, options.containerId);\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        this._paymentMethod = undefined;\n\n        return Promise.resolve();\n    }\n\n    private _setupPayment(merchantId: string, actions?: PaypalActions, onError?: (error: StandardError) => void): Promise<string> {\n        if (!actions) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(state => {\n                const cart = state.cart.getCart();\n                const cartId = cart ? cart.id : '';\n\n                return actions.request.post(`${this._host}/api/storefront/payment/paypalexpress`, { merchantId, cartId }, {\n                    headers: {\n                        'X-API-INTERNAL': INTERNAL_USE_ONLY,\n                    },\n                });\n            })\n            .then(res => res.id)\n            .catch(error => {\n                if (onError) {\n                    onError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    private _tokenizePayment(\n        data: PaypalAuthorizeData,\n        actions?: PaypalActions,\n        shouldProcessPayment?: boolean,\n        onError?: (error: StandardError) => void\n    ): Promise<void> {\n        if (!this._paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        if (!actions) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        if (!data.paymentID || !data.payerID) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        const methodId = this._paymentMethod.id;\n\n        return actions.payment.get(data.paymentID).then(payload => {\n            this._formPoster.postForm('/checkout.php', {\n                payment_type: 'paypal',\n                provider: methodId,\n                action: shouldProcessPayment ? 'process_payment' : 'set_external_checkout',\n                paymentId: data.paymentID,\n                payerId: data.payerID,\n                payerInfo: JSON.stringify(payload.payer.payer_info),\n            });\n        });\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport { createCheckoutStore } from '../checkout';\nimport { PaymentMethodActionCreator, PaymentMethodRequestSender } from '../payment';\n\nimport CheckoutButtonInitializer from './checkout-button-initializer';\nimport CheckoutButtonInitializerOptions from './checkout-button-initializer-options';\nimport CheckoutButtonStrategyActionCreator from './checkout-button-strategy-action-creator';\nimport createCheckoutButtonRegistry from './create-checkout-button-registry';\n\n/**\n * Creates an instance of `CheckoutButtonInitializer`.\n *\n * @remarks\n * ```js\n * const initializer = createCheckoutButtonInitializer();\n *\n * initializer.initializeButton({\n *     methodId: 'braintreepaypal',\n *     braintreepaypal: {\n *         container: '#checkoutButton',\n *     },\n * });\n * ```\n *\n * @alpha\n * Please note that `CheckoutButtonInitializer` is currently in an early stage\n * of development. Therefore the API is unstable and not ready for public\n * consumption.\n *\n * @param options - A set of construction options.\n * @returns an instance of `CheckoutButtonInitializer`.\n */\nexport default function createCheckoutButtonInitializer(\n    options?: CheckoutButtonInitializerOptions\n): CheckoutButtonInitializer {\n    const host = options && options.host;\n    const store = createCheckoutStore();\n    const requestSender = createRequestSender({ host });\n    const formPoster = createFormPoster({ host });\n\n    return new CheckoutButtonInitializer(\n        store,\n        new CheckoutButtonStrategyActionCreator(\n            createCheckoutButtonRegistry(store, requestSender, formPoster, host),\n            new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender))\n        )\n    );\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { CheckoutActionCreator, CheckoutRequestSender, CheckoutStore } from '../checkout';\nimport { Registry } from '../common/registry';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { BraintreeScriptLoader, BraintreeSDKCreator } from '../payment/strategies/braintree';\nimport { createGooglePayPaymentProcessor, GooglePayBraintreeInitializer, GooglePayStripeInitializer } from '../payment/strategies/googlepay';\nimport { MasterpassScriptLoader } from '../payment/strategies/masterpass';\nimport { PaypalScriptLoader } from '../payment/strategies/paypal';\n\nimport { CheckoutButtonMethodType, CheckoutButtonStrategy } from './strategies';\nimport { BraintreePaypalButtonStrategy } from './strategies/braintree';\nimport { GooglePayButtonStrategy } from './strategies/googlepay';\nimport { MasterpassButtonStrategy } from './strategies/masterpass';\nimport { PaypalButtonStrategy } from './strategies/paypal';\n\nexport default function createCheckoutButtonRegistry(\n    store: CheckoutStore,\n    requestSender: RequestSender,\n    formPoster: FormPoster,\n    host?: string\n): Registry<CheckoutButtonStrategy, CheckoutButtonMethodType> {\n    const registry = new Registry<CheckoutButtonStrategy, CheckoutButtonMethodType>();\n    const scriptLoader = getScriptLoader();\n    const checkoutActionCreator = new CheckoutActionCreator(\n        new CheckoutRequestSender(requestSender),\n        new ConfigActionCreator(new ConfigRequestSender(requestSender))\n    );\n\n    registry.register(CheckoutButtonMethodType.BRAINTREE_PAYPAL, () =>\n        new BraintreePaypalButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new BraintreeSDKCreator(new BraintreeScriptLoader(scriptLoader)),\n            new PaypalScriptLoader(scriptLoader),\n            formPoster\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.BRAINTREE_PAYPAL_CREDIT, () =>\n        new BraintreePaypalButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new BraintreeSDKCreator(new BraintreeScriptLoader(scriptLoader)),\n            new PaypalScriptLoader(scriptLoader),\n            formPoster,\n            true\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.MASTERPASS, () =>\n        new MasterpassButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new MasterpassScriptLoader(scriptLoader)\n        ));\n\n    registry.register(CheckoutButtonMethodType.GOOGLEPAY_BRAINTREE, () =>\n        new GooglePayButtonStrategy(\n            store,\n            formPoster,\n            checkoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayBraintreeInitializer(\n                    new BraintreeSDKCreator(\n                        new BraintreeScriptLoader(scriptLoader)\n                    )\n                )\n            )\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.GOOGLEPAY_STRIPE, () =>\n        new GooglePayButtonStrategy(\n            store,\n            formPoster,\n            checkoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayStripeInitializer()\n            )\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.PAYPALEXPRESS, () =>\n        new PaypalButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new PaypalScriptLoader(scriptLoader),\n            formPoster,\n            host\n        )\n    );\n\n    return registry;\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport enum NotEmbeddableErrorType {\n    MissingContainer = 'missing_container',\n    MissingContent = 'missing_content',\n    UnknownError = 'unknown_error',\n}\n\nexport default class NotEmbeddableError extends StandardError {\n    constructor(\n        message?: string,\n        public subtype: NotEmbeddableErrorType = NotEmbeddableErrorType.UnknownError\n    ) {\n        super(message || 'Unable to embed the checkout form.');\n\n        this.name = 'NotEmbeddableError';\n        this.type = 'not_embeddable';\n    }\n}\n","import { default as storage } from 'local-storage-fallback';\n\nexport default class BrowserStorage {\n    constructor(\n        private _namespace: string\n    ) {}\n\n    getItem<TValue = any>(key: string): TValue | null {\n        const rawValue = storage.getItem(this.withNamespace(key));\n\n        if (rawValue === null) {\n            return null;\n        }\n\n        try {\n            return JSON.parse(rawValue);\n        } catch (error) {\n            // Clean up invalid values\n            this.removeItem(this.withNamespace(key));\n\n            return null;\n        }\n    }\n\n    getItemOnce<TValue = any>(key: string): TValue | null {\n        const value = this.getItem(key);\n\n        this.removeItem(key);\n\n        return value;\n    }\n\n    setItem<TValue = any>(key: string, value: TValue): void {\n        return storage.setItem(this.withNamespace(key), JSON.stringify(value));\n    }\n\n    removeItem(key: string): void {\n        return storage.removeItem(this.withNamespace(key));\n    }\n\n    private withNamespace(key: string): string {\n        return `${this._namespace}.${key}`;\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { InternalErrorResponseBody } from '../../common/error';\nimport { RequestError } from '../../common/error/errors';\n\nexport default class InvalidLoginTokenError extends RequestError {\n    constructor(response: Response<InternalErrorResponseBody>) {\n        super(response, { message: response.body.title });\n\n        this.name = 'InvalidLoginTokenError';\n        this.type = 'invalid_login_token';\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { IFrameComponent } from 'iframe-resizer';\n\nimport { BrowserStorage } from '../common/storage';\nimport { parseUrl } from '../common/url';\n\nimport EmbeddedCheckoutError from './embedded-checkout-error';\nimport { EmbeddedCheckoutEventMap, EmbeddedCheckoutEventType } from './embedded-checkout-events';\nimport EmbeddedCheckoutOptions from './embedded-checkout-options';\nimport { InvalidLoginTokenError, NotEmbeddableError, NotEmbeddableErrorType } from './errors';\nimport { EmbeddedContentEvent, EmbeddedContentEventType } from './iframe-content/embedded-content-events';\nimport IframeEventListener from './iframe-event-listener';\nimport IframeEventPoster from './iframe-event-poster';\nimport LoadingIndicator from './loading-indicator';\nimport ResizableIframeCreator from './resizable-iframe-creator';\n\nconst CAN_RETRY_ALLOW_COOKIE = 'canRetryAllowCookie';\nconst IS_COOKIE_ALLOWED_KEY = 'isCookieAllowed';\n\nexport default class EmbeddedCheckout {\n    private _iframe?: IFrameComponent;\n    private _isAttached: boolean;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _iframeCreator: ResizableIframeCreator,\n        private _messageListener: IframeEventListener<EmbeddedCheckoutEventMap>,\n        private _messagePoster: IframeEventPoster<EmbeddedContentEvent>,\n        private _loadingIndicator: LoadingIndicator,\n        private _requestSender: RequestSender,\n        private _storage: BrowserStorage,\n        private _location: Location,\n        private _options: EmbeddedCheckoutOptions\n    ) {\n        this._isAttached = false;\n\n        if (this._options.onComplete) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.CheckoutComplete, this._options.onComplete);\n        }\n\n        if (this._options.onError) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.CheckoutError, this._options.onError);\n        }\n\n        if (this._options.onLoad) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.CheckoutLoaded, this._options.onLoad);\n        }\n\n        if (this._options.onFrameLoad) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.FrameLoaded, this._options.onFrameLoad);\n        }\n\n        if (this._options.onSignOut) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.SignedOut, this._options.onSignOut);\n        }\n\n        this._messageListener.addListener(EmbeddedCheckoutEventType.FrameLoaded, () => this._configureStyles());\n    }\n\n    attach(): Promise<this> {\n        if (this._isAttached) {\n            return Promise.resolve(this);\n        }\n\n        this._isAttached = true;\n        this._messageListener.listen();\n        this._loadingIndicator.show(this._options.containerId);\n\n        return this._allowCookie()\n            .then(() => this._attemptLogin())\n            .then(url => this._iframeCreator.createFrame(url, this._options.containerId))\n            .then(iframe => {\n                this._iframe = iframe;\n\n                this._configureStyles();\n                this._loadingIndicator.hide();\n            })\n            .catch(error => {\n                this._isAttached = false;\n\n                return this._retryAllowCookie(error)\n                    .catch(() => {\n                        this._messageListener.trigger({\n                            type: EmbeddedCheckoutEventType.FrameError,\n                            payload: error,\n                        });\n\n                        this._loadingIndicator.hide();\n\n                        throw error;\n                    });\n            })\n            .then(() => this);\n    }\n\n    detach(): void {\n        if (!this._isAttached) {\n            return;\n        }\n\n        this._isAttached = false;\n        this._messageListener.stopListen();\n\n        if (this._iframe && this._iframe.parentNode) {\n            this._iframe.parentNode.removeChild(this._iframe);\n            this._iframe.iFrameResizer.close();\n        }\n    }\n\n    private _configureStyles(): void {\n        if (!this._iframe || !this._iframe.contentWindow || !this._options.styles) {\n            return;\n        }\n\n        this._messagePoster.setTarget(this._iframe.contentWindow);\n\n        this._messagePoster.post({\n            type: EmbeddedContentEventType.StyleConfigured,\n            payload: this._options.styles,\n        });\n    }\n\n    private _attemptLogin(): Promise<string> {\n        if (!/^\\/login\\/token/.test(parseUrl(this._options.url).pathname)) {\n            return Promise.resolve(this._options.url);\n        }\n\n        return this._requestSender.post(this._options.url)\n            .then(({ body: { redirectUrl } }) => redirectUrl)\n            .catch(response => Promise.reject(new InvalidLoginTokenError(response)));\n    }\n\n    /**\n     * This workaround is required for certain browsers (namely Safari) that\n     * prevent session cookies to be set for a third party website unless the\n     * user has recently visited such website. Therefore, before we attempt to\n     * login or set an active cart in the session, we need to first redirect the\n     * user to the domain of Embedded Checkout.\n     */\n    private _allowCookie(): Promise<void> {\n        if (this._storage.getItem(IS_COOKIE_ALLOWED_KEY)) {\n            // It could be possible that the flag is set to true but the browser\n            // has already removed the permission to store cookie. In that case,\n            // we should try to redirect the user again.\n            this._storage.setItem(CAN_RETRY_ALLOW_COOKIE, true);\n\n            return Promise.resolve();\n        }\n\n        this._storage.removeItem(CAN_RETRY_ALLOW_COOKIE);\n        this._storage.setItem(IS_COOKIE_ALLOWED_KEY, true);\n\n        const { origin } = parseUrl(this._options.url);\n        const redirectUrl = `${origin}/embedded-checkout/allow-cookie?returnUrl=${encodeURIComponent(this._location.href)}`;\n\n        document.body.style.visibility = 'hidden';\n        this._location.replace(redirectUrl);\n\n        return new Promise<never>(() => {});\n    }\n\n    private _retryAllowCookie(error: EmbeddedCheckoutError): Promise<void> {\n        const canRetry = (\n            this._storage.getItem(CAN_RETRY_ALLOW_COOKIE) &&\n            error instanceof NotEmbeddableError &&\n            error.subtype === NotEmbeddableErrorType.MissingContent\n        );\n\n        if (!canRetry) {\n            return Promise.reject();\n        }\n\n        this._storage.removeItem(CAN_RETRY_ALLOW_COOKIE);\n        this._storage.removeItem(IS_COOKIE_ALLOWED_KEY);\n\n        return this._allowCookie();\n    }\n}\n","import { LoadingIndicatorStyles } from './embedded-checkout-styles';\n\nconst DEFAULT_STYLES: LoadingIndicatorStyles = {\n    size: 70,\n    color: '#d9d9d9',\n    backgroundColor: '#ffffff',\n};\n\nconst ROTATION_ANIMATION = 'embedded-checkout-loading-indicator-rotation';\n\nexport default class LoadingIndicator {\n    private _container: HTMLElement;\n    private _indicator: HTMLElement;\n    private _styles: LoadingIndicatorStyles;\n\n    constructor(\n        options?: { styles?: LoadingIndicatorStyles }\n    ) {\n        this._styles = { ...DEFAULT_STYLES, ...options && options.styles };\n\n        this._defineAnimation();\n\n        this._container = this._buildContainer();\n        this._indicator = this._buildIndicator();\n\n        this._container.appendChild(this._indicator);\n    }\n\n    show(parentId?: string): void {\n        if (parentId) {\n            const parent = document.getElementById(parentId);\n\n            if (!parent) {\n                throw new Error('Unable to attach the loading indicator because the parent ID is not valid.');\n            }\n\n            parent.appendChild(this._container);\n        }\n\n        this._container.style.visibility = 'visible';\n        this._container.style.opacity = '1';\n    }\n\n    hide(): void {\n        const handleTransitionEnd = () => {\n            this._container.style.visibility = 'hidden';\n\n            this._container.removeEventListener('transitionend', handleTransitionEnd);\n        };\n\n        this._container.addEventListener('transitionend', handleTransitionEnd);\n\n        this._container.style.opacity = '0';\n    }\n\n    private _buildContainer(): HTMLElement {\n        const container = document.createElement('div');\n\n        container.style.display = 'block';\n        container.style.bottom = '0';\n        container.style.left = '0';\n        container.style.height = '100%';\n        container.style.width = '100%';\n        container.style.position = 'absolute';\n        container.style.right = '0';\n        container.style.top = '0';\n        container.style.transition = 'all 250ms ease-out';\n        container.style.opacity = '0';\n\n        return container;\n    }\n\n    private _buildIndicator(): HTMLElement {\n        const indicator = document.createElement('div');\n\n        indicator.style.display = 'block';\n        indicator.style.width = `${this._styles.size}px`;\n        indicator.style.height = `${this._styles.size}px`;\n        indicator.style.borderRadius = `${this._styles.size}px`;\n        indicator.style.border = 'solid 1px';\n        indicator.style.borderColor = `${this._styles.backgroundColor} ${this._styles.backgroundColor} ${this._styles.color} ${this._styles.color}`;\n        indicator.style.margin = '0 auto';\n        indicator.style.position = 'absolute';\n        indicator.style.left = '0';\n        indicator.style.right = '0';\n        indicator.style.top = '50%';\n        indicator.style.transform = 'translateY(-50%) rotate(0deg)';\n        indicator.style.transformStyle = 'preserve-3d';\n        indicator.style.animation = `${ROTATION_ANIMATION} 500ms infinite cubic-bezier(0.69, 0.31, 0.56, 0.83)`;\n\n        return indicator;\n    }\n\n    private _defineAnimation(): void {\n        // In order to define CSS animation, we need to insert a stylesheet into the host frame.\n        // We only have to do it once.\n        if (document.getElementById(ROTATION_ANIMATION)) {\n            return;\n        }\n\n        const style = document.createElement('style');\n\n        style.id = ROTATION_ANIMATION;\n\n        document.head.appendChild(style);\n\n        if (style.sheet instanceof CSSStyleSheet) {\n            style.sheet.insertRule(`\n                @keyframes ${ROTATION_ANIMATION} {\n                    0% { transform: translateY(-50%) rotate(0deg); }\n                    100% { transform: translateY(-50%) rotate(360deg); }\n                }\n            `);\n        }\n    }\n}\n","import { iframeResizer, IFrameComponent } from 'iframe-resizer';\n\nimport { parseUrl } from '../common/url';\n\nimport { EmbeddedCheckoutEventType } from './embedded-checkout-events';\nimport { NotEmbeddableError, NotEmbeddableErrorType } from './errors';\nimport isIframeEvent from './is-iframe-event';\n\nexport default class ResizableIframeCreator {\n    constructor(\n        private _options?: { timeout: number }\n    ) {}\n\n    createFrame(src: string, containerId: string): Promise<IFrameComponent> {\n        const container = document.getElementById(containerId);\n        const { timeout = 60000 } = this._options || {};\n\n        if (!container) {\n            throw new NotEmbeddableError(\n                'Unable to embed the iframe because the container element could not be found.',\n                NotEmbeddableErrorType.MissingContainer\n            );\n        }\n\n        const iframe = document.createElement('iframe');\n\n        iframe.src = src;\n        iframe.style.border = 'none';\n        iframe.style.display = 'none';\n        iframe.style.width = '100%';\n        iframe.allowPaymentRequest = true;\n\n        container.appendChild(iframe);\n\n        return this._toResizableFrame(iframe, timeout)\n            .catch(error => {\n                container.removeChild(iframe);\n\n                throw error;\n            });\n    }\n\n    private _toResizableFrame(iframe: HTMLIFrameElement, timeoutInterval: number): Promise<IFrameComponent> {\n        // Can't simply listen to `load` event because it always gets triggered even if there's an error.\n        // Instead, listen to the `load` inside the iframe and let the parent frame know when it happens.\n        return new Promise((resolve, reject) => {\n            const timeout = window.setTimeout(() => {\n                reject(new NotEmbeddableError('Unable to embed the iframe because the content could not be loaded.'));\n            }, timeoutInterval);\n\n            const handleMessage = (event: MessageEvent) => {\n                if (event.origin !== parseUrl(iframe.src).origin) {\n                    return;\n                }\n\n                if (isIframeEvent(event.data, EmbeddedCheckoutEventType.FrameError)) {\n                    teardown();\n                    reject(new NotEmbeddableError(event.data.payload.message, NotEmbeddableErrorType.MissingContent));\n                }\n\n                if (isIframeEvent(event.data, EmbeddedCheckoutEventType.FrameLoaded)) {\n                    iframe.style.display = '';\n\n                    const contentId = event.data.payload && event.data.payload.contentId;\n                    const iframes = iframeResizer({\n                        scrolling: false,\n                        sizeWidth: false,\n                        heightCalculationMethod: contentId ? 'taggedElement' : 'lowestElement',\n                    }, iframe);\n\n                    teardown();\n                    resolve(iframes[iframes.length - 1]);\n                }\n            };\n\n            const teardown = () => {\n                window.removeEventListener('message', handleMessage);\n                window.clearTimeout(timeout);\n            };\n\n            window.addEventListener('message', handleMessage);\n        });\n    }\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\n\nimport { BrowserStorage } from '../common/storage';\nimport { parseUrl } from '../common/url';\n\nimport EmbeddedCheckout from './embedded-checkout';\nimport { EmbeddedCheckoutEventMap } from './embedded-checkout-events';\nimport EmbeddedCheckoutOptions from './embedded-checkout-options';\nimport { EmbeddedContentEvent } from './iframe-content/embedded-content-events';\nimport IframeEventListener from './iframe-event-listener';\nimport IframeEventPoster from './iframe-event-poster';\nimport LoadingIndicator from './loading-indicator';\nimport ResizableIframeCreator from './resizable-iframe-creator';\n\nconst STORAGE_PREFIX = 'BigCommerce.EmbeddedCheckout';\n\n/**\n * Embed the checkout form in an iframe.\n *\n * @remarks\n * Once the iframe is embedded, it will automatically resize according to the\n * size of the checkout form. It will also notify the parent window when certain\n * events have occurred. i.e.: when the form is loaded and ready to be used.\n *\n * ```js\n * embedCheckout({\n *     url: 'https://checkout/url',\n *     containerId: 'container-id',\n * });\n * ```\n *\n * @param options - Options for embedding the checkout form.\n * @returns A promise that resolves to an instance of `EmbeddedCheckout`.\n */\nexport default function embedCheckout(options: EmbeddedCheckoutOptions): Promise<EmbeddedCheckout> {\n    const origin = parseUrl(options.url).origin;\n    const embeddedCheckout = new EmbeddedCheckout(\n        new ResizableIframeCreator(),\n        new IframeEventListener<EmbeddedCheckoutEventMap>(origin),\n        new IframeEventPoster<EmbeddedContentEvent>(origin),\n        new LoadingIndicator({ styles: options.styles && options.styles.loadingIndicator }),\n        createRequestSender(),\n        new BrowserStorage(STORAGE_PREFIX),\n        window.location,\n        options\n    );\n\n    return embeddedCheckout.attach();\n}\n","module.exports = require(\"@bigcommerce/bigpay-client\");","module.exports = require(\"messageformat\");","import { Response } from '@bigcommerce/request-sender';\n\nimport RequestError from './request-error';\n\nexport default class TimeoutError extends RequestError<{}> {\n    constructor(response?: Response) {\n        super(response, {\n            message: 'The request has timed out or aborted.',\n        });\n\n        this.name = 'TimeoutError';\n        this.type = 'timeout';\n    }\n}\n","import { memoize } from 'lodash';\n\nimport { bindDecorator, isEqual, isPrivate, CacheKeyResolver } from '../utility';\n\n/**\n * Decorates a class by patching all of its methods to cache their return values\n * and return them if they are called again with the same set of parameters. The\n * decorator also binds all the methods to the calling instance so it can be\n * destructed.\n */\nexport default function selectorDecorator<T extends Constructor<object>>(target: T): T {\n    const decoratedTarget = class extends target {};\n\n    Object.getOwnPropertyNames(target.prototype)\n        .forEach(key => {\n            const descriptor = Object.getOwnPropertyDescriptor(target.prototype, key);\n\n            if (!descriptor || key === 'constructor') {\n                return;\n            }\n\n            Object.defineProperty(\n                decoratedTarget.prototype,\n                key,\n                selectorMethodDecorator(target.prototype, key, descriptor)\n            );\n        });\n\n    return decoratedTarget;\n}\n\nfunction selectorMethodDecorator<T extends Method>(target: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T> {\n    if (typeof descriptor.value !== 'function') {\n        return descriptor;\n    }\n\n    let resolver = new CacheKeyResolver();\n    let method = descriptor.value;\n    let memoizedMethod = memoize(method, (...args) => resolver.getKey(...args));\n\n    return bindDecorator(target, key, {\n        get() {\n            const value = ((...args: any[]) => {\n                const cachedValue = memoizedMethod.call(this, ...args);\n\n                if (resolver.getUsedCount(...args) === 1) {\n                    return cachedValue;\n                }\n\n                const newValue = method.call(this, ...args);\n\n                if (isEqual(newValue, cachedValue, { keyFilter: key => !isPrivate(key) })) {\n                    return cachedValue;\n                }\n\n                memoizedMethod.cache.set(resolver.getKey(...args), newValue);\n\n                return newValue;\n            }) as T;\n\n            Object.defineProperty(this, key, { ...descriptor, value });\n\n            return value;\n        },\n        set(value) {\n            resolver = new CacheKeyResolver();\n            method = value;\n            memoizedMethod = memoize(method, (...args) => resolver.getKey(...args));\n        },\n    });\n}\n\nexport type Constructor<T> = new (...args: any[]) => T;\ntype Method = (...args: any[]) => any;\n","import { uniq } from 'lodash';\n\nexport default function joinIncludes(includes: string[]): string {\n    return uniq(includes).join(',');\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { cachableAction, ActionOptions } from '../common/action';\nimport { RequestOptions } from '../common/http-request';\n\nimport { ConfigRequestSender } from '.';\nimport { ConfigActionType, LoadConfigAction } from './config-actions';\n\nexport default class ConfigActionCreator {\n    constructor(\n        private _configRequestSender: ConfigRequestSender\n    ) {}\n\n    @cachableAction\n    loadConfig(options?: RequestOptions & ActionOptions): Observable<LoadConfigAction> {\n        return Observable.create((observer: Observer<LoadConfigAction>) => {\n            observer.next(createAction(ConfigActionType.LoadConfigRequested));\n\n            this._configRequestSender.loadConfig(options)\n                .then(response => {\n                    observer.next(createAction(ConfigActionType.LoadConfigSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConfigActionType.LoadConfigFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, INTERNAL_USE_ONLY, RequestOptions } from '../common/http-request';\n\nimport Config from './config';\n\nexport default class ConfigRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadConfig({ timeout }: RequestOptions = {}): Promise<Response<Config>> {\n        const url = '/api/storefront/checkout-settings';\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n        });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Response } from '@bigcommerce/request-sender';\nimport { Observable, Observer } from 'rxjs';\n\nimport { Checkout, InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType, StandardError } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { GuestCredentials } from '../customer';\n\nimport { BillingAddressRequestSender } from '.';\nimport { BillingAddressUpdateRequestBody } from './billing-address';\nimport { BillingAddressActionType, ContinueAsGuestAction, UpdateBillingAddressAction } from './billing-address-actions';\n\nexport default class BillingAddressActionCreator {\n    constructor(\n        private _requestSender: BillingAddressRequestSender\n    ) {}\n\n    continueAsGuest(\n        credentials: GuestCredentials,\n        options?: RequestOptions\n    ): ThunkAction<ContinueAsGuestAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ContinueAsGuestAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const customer = state.customer.getCustomer();\n\n            if (customer && !customer.isGuest) {\n                throw new StandardError('Cannot continue as guest: customer is logged in.');\n            }\n\n            const billingAddress = state.billingAddress.getBillingAddress();\n\n            let billingAddressRequestBody;\n\n            if (!billingAddress) {\n                billingAddressRequestBody = credentials;\n            } else {\n                const { country, ...existingBillingAddressRequestBody } = billingAddress;\n\n                billingAddressRequestBody = {\n                    ...existingBillingAddressRequestBody,\n                    ...credentials,\n                };\n            }\n\n            observer.next(createAction(BillingAddressActionType.ContinueAsGuestRequested));\n\n            this._createOrUpdateBillingAddress(checkout.id, billingAddressRequestBody, options)\n                .then(({ body }) => {\n                    observer.next(createAction(BillingAddressActionType.ContinueAsGuestSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(BillingAddressActionType.ContinueAsGuestFailed, response));\n                });\n        });\n    }\n\n    updateAddress(\n        address: Partial<BillingAddressUpdateRequestBody>,\n        options?: RequestOptions\n    ): ThunkAction<UpdateBillingAddressAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateBillingAddressAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(BillingAddressActionType.UpdateBillingAddressRequested));\n\n            const billingAddress = state.billingAddress.getBillingAddress();\n\n            // If email is not present in the address provided by the client, then\n            // fall back to the stored email as it could have been set separately\n            // using a convenience method. We can't rely on billingAddress having\n            // an ID to consider that there's a preexisting email, as billingAddress\n            // object from Order doesn't have an ID.\n            const billingAddressRequestBody = {\n                ...address,\n                email: typeof address.email === 'undefined' && billingAddress ? billingAddress.email : address.email,\n            };\n\n            if (billingAddress && billingAddress.id) {\n                billingAddressRequestBody.id = billingAddress.id;\n            }\n\n            this._createOrUpdateBillingAddress(checkout.id, billingAddressRequestBody, options)\n                .then(({ body }) => {\n                    observer.next(createAction(BillingAddressActionType.UpdateBillingAddressSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(BillingAddressActionType.UpdateBillingAddressFailed, response));\n                });\n        });\n    }\n\n    private _createOrUpdateBillingAddress(\n        checkoutId: string,\n        address: Partial<BillingAddressUpdateRequestBody>,\n        options?: RequestOptions\n    ): Promise<Response<Checkout>> {\n        if (!address.id) {\n            return this._requestSender.createAddress(checkoutId, address, options);\n        }\n\n        return this._requestSender.updateAddress(checkoutId, address, options);\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { AddressRequestBody } from '../address';\nimport { Checkout } from '../checkout';\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nimport { BillingAddressUpdateRequestBody } from './billing-address';\n\nconst DEFAULT_PARAMS = {\n    include: [\n        'cart.lineItems.physicalItems.options',\n        'cart.lineItems.digitalItems.options',\n        'customer',\n        'promotions.banners',\n    ].join(','),\n};\n\nexport default class BillingAddressRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    createAddress(checkoutId: string, address: Partial<AddressRequestBody>, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/billing-address`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, { body: address, params: DEFAULT_PARAMS, headers, timeout });\n    }\n\n    updateAddress(checkoutId: string, address: Partial<BillingAddressUpdateRequestBody>, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const { id, ...body } = address;\n        const url = `/api/storefront/checkouts/${checkoutId}/billing-address/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.put(url, { params: DEFAULT_PARAMS, body, headers, timeout });\n    }\n}\n","import { InvalidArgumentError } from '../error/errors';\n\nexport default class Registry<T, K extends string = string> {\n    private _factories: { [key: string]: Factory<T> };\n    private _instances: { [key: string]: T };\n    private _options: RegistryOptions;\n\n    constructor(options?: RegistryOptions) {\n        this._factories = {};\n        this._instances = {};\n        this._options = { defaultToken: 'default', ...options };\n    }\n\n    get(token?: K, cacheToken?: string): T {\n        try {\n            return this._getInstance(\n                token || this._options.defaultToken,\n                cacheToken || token || this._options.defaultToken\n            );\n        } catch (error) {\n            return this._getInstance(\n                this._options.defaultToken,\n                cacheToken || this._options.defaultToken\n            );\n        }\n    }\n\n    register(token: K, factory: Factory<T>): void {\n        if (this._hasFactory(token)) {\n            throw new InvalidArgumentError(`'${token}' is already registered.`);\n        }\n\n        this._factories[token] = factory;\n    }\n\n    protected _hasFactory(token: string): boolean {\n        return !!this._factories[token];\n    }\n\n    private _hasInstance(token: string): boolean {\n        return !!this._instances[token];\n    }\n\n    private _getInstance(token: string, cacheToken: string): T {\n        if (!this._hasInstance(cacheToken)) {\n            const factory = this._factories[token];\n\n            if (!factory) {\n                throw new InvalidArgumentError(`'${token}' is not registered.`);\n            }\n\n            this._instances[cacheToken] = factory();\n        }\n\n        return this._instances[cacheToken];\n    }\n}\n\nexport type Factory<T> = () => T;\n\nexport interface RegistryOptions {\n    defaultToken: string;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { Masterpass, MasterpassHostWindow } from './masterpass';\n\nexport default class MasterpassScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        public _window: MasterpassHostWindow = window\n    ) {}\n\n    load(testMode?: boolean): Promise<Masterpass> {\n        return this._scriptLoader\n            .loadScript(`//${testMode ? 'sandbox.' : ''}masterpass.com/integration/merchant.js`)\n            .then(() => {\n                if (!this._window.masterpass) {\n                    throw new StandardError();\n                }\n\n                return this._window.masterpass;\n            });\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class RemoteCheckoutSynchronizationError extends StandardError {\n    constructor(\n        public error?: Error\n    ) {\n        super('Unable to synchronize your checkout details with a third party provider. Please try again later.');\n\n        this.name = 'RemoteCheckoutSynchronizationError';\n        this.type = 'remote_checkout_synchronization';\n    }\n}\n","import { round } from 'lodash';\n\nimport { Checkout } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport PaymentMethod from '../../payment-method';\nimport { BraintreeSDKCreator, GooglePayBraintreeSDK } from '../braintree';\n\nimport {\n    GooglePaymentData,\n    GooglePayInitializer,\n    GooglePayPaymentDataRequestV2,\n    TokenizePayload\n} from './googlepay';\nimport { GooglePayBraintreeDataRequest, GooglePayBraintreePaymentDataRequestV1 } from './googlepay-braintree';\n\nexport default class GooglePayBraintreeInitializer implements GooglePayInitializer {\n    private _googlePaymentInstance!: GooglePayBraintreeSDK;\n\n    constructor(\n        private _braintreeSDKCreator: BraintreeSDKCreator\n    ) {}\n\n    initialize(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        if (!paymentMethod.clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._braintreeSDKCreator.initialize(paymentMethod.clientToken);\n\n        return this._braintreeSDKCreator.getGooglePaymentComponent()\n            .then(googleBraintreePaymentInstance => {\n                this._googlePaymentInstance = googleBraintreePaymentInstance;\n\n                return this._createGooglePayPayload(\n                    checkout,\n                    paymentMethod.initializationData,\n                    hasShippingAddress\n                );\n            });\n    }\n\n    teardown(): Promise<void> {\n        return this._braintreeSDKCreator.teardown();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): TokenizePayload {\n        const payload = JSON.parse(paymentData.paymentMethodData.tokenizationData.token).androidPayCards[0];\n\n        return {\n            nonce: payload.nonce,\n            type: payload.type,\n            description: payload.description,\n            details: {\n                cardType: payload.details.cardType,\n                lastFour: payload.details.lastFour,\n                lastTwo: payload.details.lastTwo,\n            },\n            binData: payload.binData,\n        };\n    }\n\n    private _createGooglePayPayload(\n        checkout: Checkout,\n        initializationData: any,\n        hasShippingAddress: boolean\n    ): GooglePayPaymentDataRequestV2 {\n        if (!initializationData.platformToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const googlePayBraintreePaymentDataRequest: GooglePayBraintreeDataRequest = {\n            merchantInfo: {\n                authJwt: initializationData.platformToken,\n                merchantName: initializationData.googleMerchantName,\n                merchantId: initializationData.googleMerchantId,\n            },\n            transactionInfo: {\n                currencyCode: checkout.cart.currency.code,\n                totalPriceStatus: 'FINAL',\n                totalPrice: round(checkout.grandTotal, 2).toFixed(2),\n            },\n            cardRequirements: {\n                billingAddressRequired: true,\n                billingAddressFormat: 'FULL',\n            },\n            shippingAddressRequired: !hasShippingAddress,\n            emailRequired: true,\n            phoneNumberRequired: true,\n        };\n\n        return this._mapGooglePayBraintreeDataRequestToGooglePayDataRequestV2(\n            this._googlePaymentInstance.createPaymentDataRequest(googlePayBraintreePaymentDataRequest)\n        );\n    }\n\n    private _mapGooglePayBraintreeDataRequestToGooglePayDataRequestV2(googlePayBraintreeDataRequestV1: GooglePayBraintreePaymentDataRequestV1): GooglePayPaymentDataRequestV2 {\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt: googlePayBraintreeDataRequestV1.merchantInfo.authJwt,\n                merchantId: googlePayBraintreeDataRequestV1.merchantInfo.merchantId,\n                merchantName: googlePayBraintreeDataRequestV1.merchantInfo.merchantName,\n            },\n            allowedPaymentMethods: [{\n                type: 'CARD',\n                parameters: {\n                    allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                    allowedCardNetworks: googlePayBraintreeDataRequestV1.cardRequirements.allowedCardNetworks,\n                    billingAddressRequired: true,\n                    billingAddressParameters: {\n                        format: 'FULL',\n                        phoneNumberRequired: true,\n                    },\n                },\n                tokenizationSpecification: {\n                    type: 'PAYMENT_GATEWAY',\n                    parameters: {\n                        gateway: 'braintree',\n                        'braintree:apiVersion': 'v1',\n                        'braintree:authorizationFingerprint': googlePayBraintreeDataRequestV1.paymentMethodTokenizationParameters.parameters['braintree:authorizationFingerprint'],\n                        'braintree:merchantId': googlePayBraintreeDataRequestV1.paymentMethodTokenizationParameters.parameters['braintree:merchantId'],\n                        'braintree:sdkVersion': googlePayBraintreeDataRequestV1.paymentMethodTokenizationParameters.parameters['braintree:sdkVersion'],\n                    },\n                },\n            }],\n            transactionInfo: googlePayBraintreeDataRequestV1.transactionInfo,\n            emailRequired: true,\n            shippingAddressRequired: googlePayBraintreeDataRequestV1.shippingAddressRequired,\n            shippingAddressParameters: {\n                phoneNumberRequired: googlePayBraintreeDataRequestV1.phoneNumberRequired,\n            },\n        };\n    }\n}\n","import { round } from 'lodash';\n\nimport { Checkout } from '../../../checkout';\nimport { InvalidArgumentError } from '../../../common/error/errors';\nimport PaymentMethod from '../../payment-method';\n\nimport {\n    GooglePaymentData,\n    GooglePayInitializer,\n    GooglePayPaymentDataRequestV2,\n    TokenizePayload\n} from './googlepay';\n\nexport default class GooglePayStripeInitializer implements GooglePayInitializer {\n    initialize(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        return Promise.resolve(this._mapGooglePayStripeDataRequestToGooglePayDataRequestV2(\n            checkout,\n            paymentMethod.initializationData,\n            hasShippingAddress\n        ));\n    }\n\n    teardown(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): TokenizePayload {\n        try {\n            const payload = JSON.parse(paymentData.paymentMethodData.tokenizationData.token);\n\n            return {\n                nonce: payload.id,\n                type: payload.type,\n                details: {\n                    cardType: payload.card.brand,\n                    lastFour: payload.card.last4,\n                },\n            };\n        } catch (err) {\n            throw new InvalidArgumentError('Unable to parse response from Google Pay.');\n        }\n    }\n\n    private _mapGooglePayStripeDataRequestToGooglePayDataRequestV2(\n        checkout: Checkout,\n        initializationData: any,\n        hasShippingAddress: boolean\n    ): GooglePayPaymentDataRequestV2 {\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt: initializationData.platformToken,\n                merchantId: initializationData.googleMerchantId,\n                merchantName: initializationData.googleMerchantName,\n            },\n            allowedPaymentMethods: [{\n                type: 'CARD',\n                parameters: {\n                    allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                    allowedCardNetworks: ['AMEX', 'DISCOVER', 'JCB', 'MASTERCARD', 'VISA'],\n                    billingAddressRequired: true,\n                    billingAddressParameters: {\n                        format: 'FULL',\n                        phoneNumberRequired: true,\n                    },\n                },\n                tokenizationSpecification: {\n                    type: 'PAYMENT_GATEWAY',\n                    parameters: {\n                        gateway: 'stripe',\n                        'stripe:version': initializationData.stripeVersion,\n                        'stripe:publishableKey': initializationData.stripePublishableKey,\n                    },\n                },\n            }],\n            transactionInfo: {\n                currencyCode: checkout.cart.currency.code,\n                totalPriceStatus: 'FINAL',\n                totalPrice: round(checkout.grandTotal, 2).toFixed(2),\n            },\n            emailRequired: true,\n            shippingAddressRequired: !hasShippingAddress,\n            shippingAddressParameters: {\n                phoneNumberRequired: true,\n            },\n        };\n    }\n}\n","import { mapToInternalAddress } from '../address';\nimport { BillingAddress } from '../billing';\n\nimport { Customer } from '.';\nimport InternalCustomer from './internal-customer';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalCustomer(customer: Customer, billingAddress: BillingAddress): InternalCustomer {\n    const firstName = customer.firstName || billingAddress.firstName || '';\n    const lastName = customer.lastName || billingAddress.lastName || '';\n\n    return {\n        addresses: (customer.addresses || []).map(address => mapToInternalAddress(address)),\n        customerId: customer.id,\n        isGuest: customer.isGuest,\n        storeCredit: customer.storeCredit,\n        email: customer.email || billingAddress.email || '',\n        firstName,\n        lastName,\n        name: customer.fullName || [firstName, lastName].join(' '),\n    };\n}\n","import GiftCertificate from './gift-certificate';\nimport InternalGiftCertificate from './internal-gift-certificate';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalGiftCertificate(giftCertificate: GiftCertificate): InternalGiftCertificate {\n    return {\n        code: giftCertificate.code,\n        discountedAmount: giftCertificate.used,\n        remainingBalance: giftCertificate.remaining,\n        giftCertificate: {\n            balance: giftCertificate.balance,\n            code: giftCertificate.code,\n            purchaseDate: giftCertificate.purchaseDate,\n        },\n    };\n}\n","import { filter, find, keyBy, reduce } from 'lodash';\n\nimport { mapToInternalLineItems, LineItem } from '../cart';\nimport { Checkout } from '../checkout';\nimport { AmountTransformer } from '../common/utility';\nimport { mapToInternalCoupon } from '../coupon';\nimport { HOSTED } from '../payment';\n\nimport InternalOrder, { InternalGiftCertificateList, InternalIncompleteOrder, InternalOrderPayment, InternalSocialDataList } from './internal-order';\nimport Order, { GatewayOrderPayment, GiftCertificateOrderPayment, OrderPayment, OrderPayments } from './order';\nimport { OrderMetaState } from './order-state';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalOrder(order: Order, orderMeta: OrderMetaState = {}): InternalOrder {\n    const decimalPlaces = order.currency.decimalPlaces;\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: order.orderId,\n        items: mapToInternalLineItems(order.lineItems, order.currency.decimalPlaces, 'productId'),\n        orderId: order.orderId,\n        currency: order.currency.code,\n        customerCanBeCreated: order.customerCanBeCreated,\n        payment: mapToInternalOrderPayment(order.payments, orderMeta.payment),\n        subtotal: {\n            amount: order.baseAmount,\n            integerAmount: amountTransformer.toInteger(order.baseAmount),\n        },\n        coupon: {\n            discountedAmount: reduce(order.coupons, (sum, coupon) => {\n                return sum + coupon.discountedAmount;\n            }, 0),\n            coupons: order.coupons.map(mapToInternalCoupon),\n        },\n        discount: {\n            amount: order.discountAmount,\n            integerAmount: amountTransformer.toInteger(order.discountAmount),\n        },\n        token: orderMeta.orderToken,\n        callbackUrl: orderMeta.callbackUrl,\n        discountNotifications: [],\n        giftCertificate: mapToGiftCertificates(order.payments),\n        socialData: mapToInternalSocialDataList(order),\n        status: order.status,\n        hasDigitalItems: order.hasDigitalItems,\n        isDownloadable: order.isDownloadable,\n        isComplete: order.isComplete,\n        shipping: {\n            amount: order.shippingCostTotal,\n            integerAmount: amountTransformer.toInteger(order.shippingCostTotal),\n            amountBeforeDiscount: order.shippingCostBeforeDiscount,\n            integerAmountBeforeDiscount: amountTransformer.toInteger(order.shippingCostBeforeDiscount),\n        },\n        storeCredit: {\n            amount: mapToStoreCredit(order.payments),\n        },\n        taxes: order.taxes,\n        taxTotal: {\n            amount: order.taxTotal,\n            integerAmount: amountTransformer.toInteger(order.taxTotal),\n        },\n        handling: {\n            amount: order.handlingCostTotal,\n            integerAmount: amountTransformer.toInteger(order.handlingCostTotal),\n        },\n        grandTotal: {\n            amount: order.orderAmount,\n            integerAmount: order.orderAmountAsInteger,\n        },\n    };\n}\n\nexport function mapToInternalIncompleteOrder(checkout: Checkout): InternalIncompleteOrder {\n    const payment = find(checkout.payments, { providerType: HOSTED });\n\n    return {\n        orderId: null,\n        isComplete: false,\n        payment: !payment ? {} : {\n            id: payment.providerId,\n            gateway: payment.gatewayId,\n            status: mapToInternalPaymentStatus(payment.detail.step),\n        },\n    };\n}\n\nfunction mapToInternalPaymentStatus(status: string): string {\n    return `PAYMENT_STATUS_${status}`;\n}\n\nfunction mapToStoreCredit(payments?: OrderPayments): number {\n    const item = find(payments, { providerId: 'storecredit' });\n\n    return item ? item.amount : 0;\n}\n\nfunction mapToGiftCertificates(payments?: OrderPayments): InternalGiftCertificateList {\n    const items = filter(payments, { providerId: 'giftcertificate' }) as GiftCertificateOrderPayment[];\n\n    return {\n        totalDiscountedAmount: reduce(items, (sum, item) => item.amount + sum, 0),\n        appliedGiftCertificates: keyBy(items.map(item => ({\n            code: item.detail.code,\n            discountedAmount: item.amount,\n            remainingBalance: item.detail.remaining,\n            giftCertificate: {\n                balance: item.amount + item.detail.remaining,\n                code: item.detail.code,\n                purchaseDate: '',\n            },\n        })), 'code'),\n    };\n}\n\nfunction mapToInternalOrderPayment(payments?: OrderPayments, payment: InternalOrderPayment = {}): InternalOrderPayment {\n    const item = find(payments, isDefaultOrderPayment) as GatewayOrderPayment;\n\n    if (!item) {\n        return {};\n    }\n\n    return {\n        id: item.providerId,\n        status: mapToInternalPaymentStatus(item.detail.step),\n        helpText: item.detail.instructions,\n        returnUrl: payment.returnUrl,\n    };\n}\n\nfunction isDefaultOrderPayment(payment: OrderPayment): payment is GatewayOrderPayment {\n    return payment.providerId !== 'giftcertificate' && payment.providerId !== 'storecredit';\n}\n\nfunction mapToInternalSocialDataList(order: Order): { [itemId: string]: InternalSocialDataList } | undefined {\n    const socialDataObject: { [itemId: string]: InternalSocialDataList } = {};\n    const items = [\n        ...order.lineItems.physicalItems,\n        ...order.lineItems.digitalItems,\n    ];\n\n    items.forEach(item => {\n        socialDataObject[item.id] = mapToInternalSocialData(item);\n    });\n\n    return socialDataObject;\n}\n\nfunction mapToInternalSocialData(lineItem: LineItem): InternalSocialDataList {\n    const codes = ['fb', 'tw', 'gp'];\n\n    return codes.reduce((socialData, code) => {\n        const item = lineItem.socialMedia && lineItem.socialMedia.find(item => item.code === code);\n\n        if (!item) {\n            return socialData;\n        }\n\n        socialData[code] = {\n            name: lineItem.name,\n            description: lineItem.name,\n            image: lineItem.imageUrl,\n            url: item.link,\n            shareText: item.text,\n            sharingLink: item.link,\n            channelName: item.channel,\n            channelCode: item.code,\n        };\n\n        return socialData;\n    }, {} as InternalSocialDataList);\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { PaypalHostWindow, PaypalSDK } from './paypal-sdk';\n\nexport default class PaypalScriptLoader {\n    private _window: PaypalHostWindow;\n\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    loadPaypal(): Promise<PaypalSDK> {\n        return this._scriptLoader\n            .loadScript('//www.paypalobjects.com/api/checkout.min.js')\n            .then(() => {\n                if (!this._window.paypal) {\n                    throw new StandardError();\n                }\n\n                return this._window.paypal;\n            });\n    }\n}\n","import { ClearErrorAction, ErrorActionType } from './error-actions';\n\nexport default class ErrorActionCreator {\n    clearError(error: Error): ClearErrorAction {\n        return {\n            type: ErrorActionType.ClearError,\n            payload: error,\n        };\n    }\n}\n","export default function getEnvironment(): string {\n    try {\n        return process.env.NODE_ENV || 'development';\n    } catch (e) {\n        return 'development';\n    }\n}\n","import Logger from './logger';\n\nexport default class ConsoleLogger implements Logger {\n    constructor(\n        private _console?: Console\n    ) {}\n\n    log(...messages: any[]): void {\n        this._logToConsole('log', ...messages);\n    }\n\n    info(...messages: any[]): void {\n        this._logToConsole('info', ...messages);\n    }\n\n    warn(...messages: any[]): void {\n        this._logToConsole('warn', ...messages);\n    }\n\n    error(...messages: any[]): void {\n        this._logToConsole('error', ...messages);\n    }\n\n    debug(...messages: any[]): void {\n        this._logToConsole('debug', ...messages);\n    }\n\n    private _logToConsole(type: keyof Console, ...messages: any[]): void {\n        if (!this._console || !this._console[type]) {\n            return;\n        }\n\n        this._console[type].call(this._console, ...messages);\n    }\n}\n","import Logger from './logger';\n\nexport default class NoopLogger implements Logger {\n    log(): void {}\n\n    info(): void {}\n\n    warn(): void {}\n\n    error(): void {}\n\n    debug(): void {}\n}\n","import { getEnvironment } from '../utility';\n\nimport createLogger from './create-logger';\nimport Logger from './logger';\n\nconst logger = createLogger(getEnvironment() !== 'test');\n\nexport default function getDefaultLogger(): Logger {\n    return logger;\n}\n","import ConsoleLogger from './console-logger';\nimport Logger from './logger';\nimport NoopLogger from './noop-logger';\n\nexport default function createLogger(isEnabled = true): Logger {\n    if (!isEnabled) {\n        return new NoopLogger();\n    }\n\n    return new ConsoleLogger(console);\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport { ApplyCouponAction, CouponAction, CouponActionType, RemoveCouponAction } from './coupon-actions';\nimport CouponRequestSender from './coupon-request-sender';\n\nexport default class CouponActionCreator {\n    constructor(\n        private _couponRequestSender: CouponRequestSender\n    ) {}\n\n    applyCoupon(code: string, options?: RequestOptions): ThunkAction<CouponAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ApplyCouponAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(CouponActionType.ApplyCouponRequested));\n\n            this._couponRequestSender.applyCoupon(checkout.id, code, options)\n                .then(({ body }) => {\n                    observer.next(createAction(CouponActionType.ApplyCouponSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CouponActionType.ApplyCouponFailed, response));\n                });\n        });\n    }\n\n    removeCoupon(code: string, options?: RequestOptions): ThunkAction<CouponAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<RemoveCouponAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(CouponActionType.RemoveCouponRequested));\n\n            this._couponRequestSender.removeCoupon(checkout.id, code, options)\n                .then(({ body }) => {\n                    observer.next(createAction(CouponActionType.RemoveCouponSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CouponActionType.RemoveCouponFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout, CheckoutIncludes, CHECKOUT_DEFAULT_INCLUDES } from '../checkout';\nimport { joinIncludes, ContentType, RequestOptions } from '../common/http-request';\n\nexport default class CouponRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    applyCoupon(checkoutId: string, couponCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/coupons`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes([\n                    ...CHECKOUT_DEFAULT_INCLUDES,\n                    CheckoutIncludes.AvailableShippingOptions,\n                ]),\n            },\n            body: { couponCode },\n        });\n    }\n\n    removeCoupon(checkoutId: string, couponCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/coupons/${couponCode}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.delete(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes([\n                    ...CHECKOUT_DEFAULT_INCLUDES,\n                    CheckoutIncludes.AvailableShippingOptions,\n                ]),\n            },\n        });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable ,  Observer } from 'rxjs';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport { GiftCertificateRequestSender } from '.';\nimport { ApplyGiftCertificateAction, GiftCertificateActionType, RemoveGiftCertificateAction } from './gift-certificate-actions';\n\nexport default class GiftCertificateActionCreator {\n    constructor(\n        private _giftCertificateRequestSender: GiftCertificateRequestSender\n    ) {}\n\n    applyGiftCertificate(giftCertificate: string, options?: RequestOptions): ThunkAction<ApplyGiftCertificateAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ApplyGiftCertificateAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(GiftCertificateActionType.ApplyGiftCertificateRequested));\n\n            this._giftCertificateRequestSender.applyGiftCertificate(checkout.id, giftCertificate, options)\n                .then(({ body }) => {\n                    observer.next(createAction(GiftCertificateActionType.ApplyGiftCertificateSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(GiftCertificateActionType.ApplyGiftCertificateFailed, response));\n                });\n        });\n    }\n\n    removeGiftCertificate(giftCertificate: string, options?: RequestOptions): ThunkAction<RemoveGiftCertificateAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<RemoveGiftCertificateAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(GiftCertificateActionType.RemoveGiftCertificateRequested));\n\n            this._giftCertificateRequestSender.removeGiftCertificate(checkout.id, giftCertificate, options)\n                .then(({ body }) => {\n                    observer.next(createAction(GiftCertificateActionType.RemoveGiftCertificateSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(GiftCertificateActionType.RemoveGiftCertificateFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout, CHECKOUT_DEFAULT_INCLUDES } from '../checkout';\nimport { joinIncludes, ContentType, RequestOptions } from '../common/http-request';\n\nexport default class GiftCertificateRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    applyGiftCertificate(checkoutId: string, giftCertificateCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/gift-certificates`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes(CHECKOUT_DEFAULT_INCLUDES),\n            },\n            body: { giftCertificateCode },\n        });\n    }\n\n    removeGiftCertificate(checkoutId: string, giftCertificateCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/gift-certificates/${giftCertificateCode}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.delete(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes(CHECKOUT_DEFAULT_INCLUDES),\n            },\n        });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { Registry } from '../common/registry';\n\nimport CustomerCredentials from './customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from './customer-request-options';\nimport {\n    CustomerStrategyActionType,\n    CustomerStrategyDeinitializeAction,\n    CustomerStrategyInitializeAction,\n    CustomerStrategySignInAction,\n    CustomerStrategySignOutAction,\n    CustomerStrategyWidgetAction,\n} from './customer-strategy-actions';\nimport { CustomerStrategy } from './strategies';\n\nexport default class CustomerStrategyActionCreator {\n    constructor(\n        private _strategyRegistry: Registry<CustomerStrategy>\n    ) {}\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Observable<CustomerStrategySignInAction> {\n        return Observable.create((observer: Observer<CustomerStrategySignInAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.SignInRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .signIn(credentials, options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.SignInSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.SignInFailed, error, meta));\n                });\n        });\n    }\n\n    signOut(options?: CustomerRequestOptions): Observable<CustomerStrategySignOutAction> {\n        return Observable.create((observer: Observer<CustomerStrategySignOutAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.SignOutRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .signOut(options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.SignOutSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.SignOutFailed, error, meta));\n                });\n        });\n    }\n\n    initialize(options?: CustomerInitializeOptions): ThunkAction<CustomerStrategyInitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<CustomerStrategyInitializeAction>) => {\n            const state = store.getState();\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            if (methodId && state.customerStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(CustomerStrategyActionType.InitializeRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .initialize(options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.InitializeSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.InitializeFailed, error, meta));\n                });\n        });\n    }\n\n    deinitialize(options?: CustomerRequestOptions): ThunkAction<CustomerStrategyDeinitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<CustomerStrategyDeinitializeAction>) => {\n            const state = store.getState();\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            if (methodId && !state.customerStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(CustomerStrategyActionType.DeinitializeRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .deinitialize(options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.DeinitializeSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.DeinitializeFailed, error, meta));\n                });\n        });\n    }\n\n    widgetInteraction(method: () => Promise<any>, options?: CustomerRequestOptions): Observable<CustomerStrategyWidgetAction> {\n        return Observable.create((observer: Observer<CustomerStrategyWidgetAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.WidgetInteractionStarted, undefined, meta));\n\n            method().then(() => {\n                observer.next(createAction(CustomerStrategyActionType.WidgetInteractionFinished, undefined, meta));\n                observer.complete();\n            })\n            .catch(error => {\n                observer.error(createErrorAction(CustomerStrategyActionType.WidgetInteractionFailed, error, meta));\n            });\n        });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport PaymentMethod from '../../payment-method';\n\nimport AmazonPayWindow from './amazon-pay-window';\n\nexport default class AmazonPayScriptLoader {\n    private _window: AmazonPayWindow;\n\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    loadWidget(method: PaymentMethod, onPaymentReady?: () => void): Promise<Event> {\n        const {\n            config: { merchantId, testMode },\n            initializationData: { region = 'us' } = {},\n        } = method;\n\n        const url = 'https://' +\n            (region.toLowerCase() !== 'us' ? 'static-eu.' : 'static-na.') +\n            'payments-amazon.com/OffAmazonPayments/' +\n            `${region.toLowerCase()}/` +\n            (testMode ? 'sandbox/' : '') +\n            (region.toLowerCase() !== 'us' ? 'lpa/' : '') +\n            `js/Widgets.js?sellerId=${merchantId}`;\n\n        this._configureWidget(method, onPaymentReady);\n\n        return this._scriptLoader.loadScript(url);\n    }\n\n    private _configureWidget(method: PaymentMethod, onPaymentReady?: () => void): void {\n        const onLoginReady = () => {\n            if (!this._window.amazon) {\n                return;\n            }\n\n            this._window.amazon.Login.setClientId(method.initializationData.clientId);\n            this._window.amazon.Login.setUseCookie(true);\n        };\n\n        if (this._window.amazon && this._window.amazon.Login) {\n            onLoginReady();\n        } else {\n            this._window.onAmazonLoginReady = onLoginReady;\n        }\n\n        if (this._window.OffAmazonPayments && onPaymentReady) {\n            onPaymentReady();\n        } else {\n            this._window.onAmazonPaymentsReady = onPaymentReady;\n        }\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\n\nimport { Address, LegacyAddress } from '../../../address';\n\nimport { BraintreeDataCollector } from './braintree';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\nimport {\n    VisaCheckoutAddress,\n    VisaCheckoutInitOptions,\n    VisaCheckoutPaymentSuccessPayload,\n    VisaCheckoutTokenizedPayload,\n} from './visacheckout';\n\nexport default class BraintreeVisaCheckoutPaymentProcessor {\n    constructor(\n        private _braintreeSDKCreator: BraintreeSDKCreator,\n        private _requestSender: RequestSender\n    ) {}\n\n    initialize(clientToken: string, options: VisaCheckoutInitializeOptions): Promise<VisaCheckoutInitOptions> {\n        this._braintreeSDKCreator.initialize(clientToken);\n\n        return this._braintreeSDKCreator.getVisaCheckout()\n            .then(visaCheckout => visaCheckout.createInitOptions({\n                settings: {\n                    locale: options.locale,\n                    shipping: {\n                        collectShipping: options.collectShipping,\n                    },\n                },\n                paymentRequest: {\n                    currencyCode: options.currencyCode,\n                    subtotal: String(options.subtotal),\n                },\n            }));\n    }\n\n    deinitialize(): Promise<void> {\n        return this._braintreeSDKCreator.teardown();\n    }\n\n    handleSuccess(payment: VisaCheckoutPaymentSuccessPayload, shipping?: Address, billing?: Address): Promise<any> {\n        return this._braintreeSDKCreator.getVisaCheckout()\n            .then(braintreeVisaCheckout => Promise.all([\n                braintreeVisaCheckout.tokenize(payment),\n                this._braintreeSDKCreator.getDataCollector(),\n            ])\n            .then(([tokenizedPayload, dataCollector]) => {\n                const {\n                    shippingAddress = this._toVisaCheckoutAddress(shipping),\n                    billingAddress = this._toVisaCheckoutAddress(billing),\n                } = tokenizedPayload;\n\n                return this._postForm({\n                    ...tokenizedPayload,\n                    shippingAddress,\n                    billingAddress,\n                }, dataCollector);\n            }));\n    }\n\n    private _postForm(paymentData: VisaCheckoutTokenizedPayload, dataCollector: BraintreeDataCollector) {\n        const {\n            userData,\n            billingAddress,\n            shippingAddress,\n            details: cardInformation,\n        } = paymentData;\n        const { userEmail } = userData;\n        const { deviceData } = dataCollector;\n\n        return this._requestSender.post('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: {\n                payment_type: paymentData.type,\n                nonce: paymentData.nonce,\n                provider: 'braintreevisacheckout',\n                action: 'set_external_checkout',\n                device_data: deviceData,\n                card_information: this._getCardInformation(cardInformation),\n                billing_address: this._getAddress(userEmail, billingAddress),\n                shipping_address: this._getAddress(userEmail, shippingAddress),\n            },\n        });\n    }\n\n    private _toVisaCheckoutAddress(address?: Address): VisaCheckoutAddress {\n        if (!address) {\n            return {};\n        }\n\n        return {\n            firstName: address.firstName,\n            lastName: address.lastName,\n            phoneNumber: address.phone,\n            streetAddress: address.address1,\n            extendedAddress: address.address2,\n            locality: address.city,\n            region: address.stateOrProvinceCode,\n            countryCode: address.countryCode,\n            postalCode: address.postalCode,\n        };\n    }\n\n    private _getAddress(email: string, address: VisaCheckoutAddress = {}): Partial<LegacyAddress> {\n        return {\n            email,\n            first_name: address.firstName,\n            last_name: address.lastName,\n            phone_number: address.phoneNumber,\n            address_line_1: address.streetAddress,\n            address_line_2: address.extendedAddress,\n            city: address.locality,\n            state: address.region,\n            country_code: address.countryCode,\n            postal_code: address.postalCode,\n        };\n    }\n\n    private _getCardInformation(cardInformation: { cardType: string; lastTwo: string }) {\n        return {\n            type: cardInformation.cardType,\n            number: cardInformation.lastTwo,\n        };\n    }\n}\n\nexport interface VisaCheckoutInitializeOptions {\n    locale?: string;\n    collectShipping?: boolean;\n    subtotal?: number;\n    currencyCode?: string;\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport BraintreeScriptLoader from './braintree-script-loader';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\nimport BraintreeVisaCheckoutPaymentProcessor from './braintree-visacheckout-payment-processor';\n\nexport default function createBraintreeVisaCheckoutPaymentProcessor(\n    scriptLoader: ScriptLoader,\n    requestSender: RequestSender\n) {\n    const braintreeScriptLoader = new BraintreeScriptLoader(scriptLoader);\n    const braintreeSDKCreator = new BraintreeSDKCreator(braintreeScriptLoader);\n\n    return new BraintreeVisaCheckoutPaymentProcessor(braintreeSDKCreator, requestSender);\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { VisaCheckoutHostWindow, VisaCheckoutSDK } from './visacheckout';\n\nexport default class VisaCheckoutScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: VisaCheckoutHostWindow = window\n    ) {}\n\n    load(testMode?: boolean): Promise<VisaCheckoutSDK> {\n        return this._scriptLoader\n            .loadScript(`//${testMode ? 'sandbox-' : ''}assets.secure.checkout.visa.com/checkout-widget/resources/js/integration/v1/sdk.js`)\n            .then(() => {\n                if (!this._window.V) {\n                    throw new StandardError();\n                }\n\n                return this._window.V;\n            });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\nimport { ChasePayHostWindow, JPMC } from '../chasepay/chasepay';\n\nexport default class ChasePayScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        public _window: ChasePayHostWindow = window\n    ) {}\n\n    load(testMode?: boolean): Promise<JPMC> {\n        return this._scriptLoader\n            .loadScript(`//pwc${testMode ? 'psb' : ''}.chase.com/pwc/checkout/js/v20170521/list.action?type=raw&applId=PWC&channelId=CWC&version=1`)\n            .then(() => {\n                if (!this._window.JPMC) {\n                    throw new StandardError();\n                }\n\n                return this._window.JPMC;\n            });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\n\n/**\n * @todo Convert this file into TypeScript properly\n */\nexport default class RemoteCheckoutRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    initializeBilling(methodName: string, params?: { referenceId: string }, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/billing`;\n\n        return this._requestSender.get(url, { params, timeout });\n    }\n\n    initializeShipping(methodName: string, params?: { referenceId: string }, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/shipping`;\n\n        return this._requestSender.get(url, { params, timeout });\n    }\n\n    initializePayment(methodName: string, params?: InitializePaymentOptions, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/payment`;\n\n        return this._requestSender.get(url, { params, timeout });\n    }\n\n    loadSettings(methodName: string, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/settings`;\n\n        return this._requestSender.get(url, { timeout });\n    }\n\n    signOut(methodName: string, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/signout`;\n\n        return this._requestSender.get(url, { timeout });\n    }\n\n    generateToken({ timeout }: RequestOptions = {}): Promise<Response> {\n        const url = '/remote-checkout-token';\n\n        return this._requestSender.get(url, { timeout });\n    }\n\n    trackAuthorizationEvent({ timeout }: RequestOptions = {}): Promise<Response> {\n        const url = '/remote-checkout/events/shopper-checkout-service-provider-authorization-requested';\n\n        return this._requestSender.post(url, { timeout });\n    }\n}\n\nexport interface InitializePaymentOptions {\n    authorizationToken?: string;\n    customerMessage?: string;\n    referenceId?: string;\n    useStoreCredit?: boolean;\n}\n","import { createAction, createErrorAction, Action } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport { RemoteCheckoutActionType } from './remote-checkout-actions';\nimport RemoteCheckoutRequestSender, { InitializePaymentOptions } from './remote-checkout-request-sender';\nimport { RemoteCheckoutStateData } from './remote-checkout-state';\n\n/**\n * @todo Convert this file into TypeScript properly\n * i.e.: Action<T>\n */\nexport default class RemoteCheckoutActionCreator {\n    constructor(\n        private _remoteCheckoutRequestSender: RemoteCheckoutRequestSender\n    ) {}\n\n    initializeBilling(methodId: string, params?: { referenceId: string }, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.InitializeRemoteBillingRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.initializeBilling(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(createAction(RemoteCheckoutActionType.InitializeRemoteBillingSucceeded, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.InitializeRemoteBillingFailed, response, { methodId }));\n                });\n        });\n    }\n\n    initializeShipping(methodId: string, params?: { referenceId: string }, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.InitializeRemoteShippingRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.initializeShipping(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(createAction(RemoteCheckoutActionType.InitializeRemoteShippingSucceeded, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.InitializeRemoteShippingFailed, response, { methodId }));\n                });\n        });\n    }\n\n    initializePayment(methodId: string, params?: InitializePaymentOptions, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.InitializeRemotePaymentRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.initializePayment(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(createAction(RemoteCheckoutActionType.InitializeRemotePaymentSucceeded, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.InitializeRemotePaymentFailed, response, { methodId }));\n                });\n        });\n    }\n\n    loadSettings(methodId: string, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.LoadRemoteSettingsRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.loadSettings(methodId, options)\n                .then(({ body }) => {\n                    observer.next(createAction(RemoteCheckoutActionType.LoadRemoteSettingsSucceeded, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.LoadRemoteSettingsFailed, response, { methodId }));\n                });\n        });\n    }\n\n    signOut(methodId: string, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.SignOutRemoteCustomerRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.signOut(methodId, options)\n                .then(() => {\n                    observer.next(createAction(RemoteCheckoutActionType.SignOutRemoteCustomerSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.SignOutRemoteCustomerFailed, response, { methodId }));\n                });\n        });\n    }\n\n    updateCheckout<K extends keyof RemoteCheckoutStateData>(methodId: K, data: Partial<RemoteCheckoutStateData[K]>): Action {\n        return createAction(RemoteCheckoutActionType.UpdateRemoteCheckout, data, { methodId });\n    }\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, from, of } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\n\nimport { CheckoutActionCreator, InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { RequestOptions } from '../common/http-request';\n\nimport { CustomerActionType, SignInCustomerAction, SignOutCustomerAction } from './customer-actions';\nimport CustomerCredentials from './customer-credentials';\nimport CustomerRequestSender from './customer-request-sender';\n\nexport default class CustomerActionCreator {\n    constructor(\n        private _customerRequestSender: CustomerRequestSender,\n        private _checkoutActionCreator: CheckoutActionCreator\n    ) {}\n\n    signInCustomer(\n        credentials: CustomerCredentials,\n        options?: RequestOptions\n    ): ThunkAction<SignInCustomerAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(CustomerActionType.SignInCustomerRequested)),\n            from(this._customerRequestSender.signInCustomer(credentials, options))\n                .pipe(\n                    switchMap(({ body }) => concat(\n                        this._checkoutActionCreator.loadCurrentCheckout(options)(store),\n                        of(createAction(CustomerActionType.SignInCustomerSucceeded, body.data))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(CustomerActionType.SignInCustomerFailed, error))\n        );\n    }\n\n    signOutCustomer(\n        options?: RequestOptions\n    ): ThunkAction<SignOutCustomerAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(CustomerActionType.SignOutCustomerRequested)),\n            from(this._customerRequestSender.signOutCustomer(options))\n                .pipe(\n                    switchMap(({ body }) => concat(\n                        this._checkoutActionCreator.loadCurrentCheckout(options)(store),\n                        of(createAction(CustomerActionType.SignOutCustomerSucceeded, body.data))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(CustomerActionType.SignOutCustomerFailed, error))\n        );\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport CustomerCredentials from './customer-credentials';\nimport { InternalCustomerResponseBody } from './internal-customer-responses';\n\nexport default class CustomerRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    signInCustomer(credentials: CustomerCredentials, { timeout }: RequestOptions = {}): Promise<Response<InternalCustomerResponseBody>> {\n        const url = '/internalapi/v1/checkout/customer';\n\n        return this._requestSender.post(url, { timeout, body: credentials });\n    }\n\n    signOutCustomer({ timeout }: RequestOptions = {}): Promise<Response<InternalCustomerResponseBody>> {\n        const url = '/internalapi/v1/checkout/customer';\n\n        return this._requestSender.delete(url, { timeout });\n    }\n}\n","import StandardError from './standard-error';\n\nexport default class NotImplementedError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Not implemented.');\n\n        this.name = 'NotImplementedError';\n        this.type = 'not_implemented';\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { AmazonPayLoginButton, AmazonPayScriptLoader, AmazonPayWindow } from '../../../payment/strategies/amazon-pay';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../../../remote-checkout';\nimport CustomerCredentials from '../../customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nimport AmazonPayCustomerInitializeOptions from './amazon-pay-customer-initialize-options';\n\nexport default class AmazonPayCustomerStrategy implements CustomerStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _window: AmazonPayWindow;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _remoteCheckoutRequestSender: RemoteCheckoutRequestSender,\n        private _scriptLoader: AmazonPayScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { amazon: amazonOptions, methodId } = options;\n\n        if (!amazonOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.amazon\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => new Promise((resolve, reject) => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const { onError = () => {} } = amazonOptions;\n                const onReady = () => {\n                    this._createSignInButton({\n                        ...amazonOptions,\n                        onError: error => {\n                            reject(error);\n                            onError(error);\n                        },\n                    });\n\n                    resolve();\n                };\n\n                this._scriptLoader.loadWidget(this._paymentMethod, onReady)\n                    .catch(reject);\n            }))\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via AmazonPay, the shopper must click on \"Login with Amazon\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _createSignInButton(options: AmazonPayCustomerInitializeOptions): AmazonPayLoginButton {\n        if (!this._paymentMethod || !this._window.OffAmazonPayments) {\n            throw new NotInitializedError(NotInitializedErrorType.CustomerNotInitialized);\n        }\n\n        if (!this._paymentMethod.config.merchantId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { initializationData } = this._paymentMethod;\n\n        return new this._window.OffAmazonPayments.Button(options.container, this._paymentMethod.config.merchantId, {\n            color: options.color || 'Gold',\n            size: options.size || 'small',\n            type: 'PwA',\n            useAmazonAddressBook: true,\n            onError: options.onError,\n            authorization: () => {\n                this._handleAuthorization(initializationData);\n            },\n        });\n    }\n\n    private _handleAuthorization(options: AuthorizationOptions): void {\n        this._remoteCheckoutRequestSender.generateToken()\n            .then(({ body }) => {\n                if (!this._window.amazon) {\n                    throw new NotInitializedError(NotInitializedErrorType.ShippingNotInitialized);\n                }\n\n                this._window.amazon.Login.authorize({\n                    popup: false,\n                    scope: 'payments:shipping_address payments:billing_address payments:widget profile',\n                    state: `${options.tokenPrefix}${body.token}`,\n                }, options.redirectUrl);\n\n                this._remoteCheckoutRequestSender.trackAuthorizationEvent();\n            });\n    }\n}\n\ninterface AuthorizationOptions {\n    redirectUrl: string;\n    tokenPrefix: string;\n}\n","import { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError } from '../../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { BraintreeVisaCheckoutPaymentProcessor, VisaCheckoutScriptLoader } from '../../../payment/strategies/braintree';\nimport { VisaCheckoutPaymentSuccessPayload } from '../../../payment/strategies/braintree/visacheckout';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport CustomerCredentials from '../../customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategyActionCreator from '../../customer-strategy-action-creator';\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class BraintreeVisaCheckoutCustomerStrategy implements CustomerStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _buttonClassName: string = 'visa-checkout-wrapper';\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _customerStrategyActionCreator: CustomerStrategyActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _braintreeVisaCheckoutPaymentProcessor: BraintreeVisaCheckoutPaymentProcessor,\n        private _visaCheckoutScriptLoader: VisaCheckoutScriptLoader\n    ) {}\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { braintreevisacheckout: visaCheckoutOptions, methodId } = options;\n\n        if (!visaCheckoutOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.braintreevisacheckout\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                const checkout = state.checkout.getCheckout();\n                const storeConfig = state.config.getStoreConfig();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const {\n                    container,\n                    onError = () => {},\n                } = visaCheckoutOptions;\n\n                const initOptions = {\n                    locale: storeConfig.storeProfile.storeLanguage,\n                    collectShipping: true,\n                    subtotal: checkout.subtotal,\n                    currencyCode: storeConfig.currency.code,\n                };\n\n                return Promise.all([\n                    this._visaCheckoutScriptLoader.load(this._paymentMethod.config.testMode),\n                    this._braintreeVisaCheckoutPaymentProcessor.initialize(this._paymentMethod.clientToken, initOptions),\n                ])\n                .then(([visaCheckout, initOptions]) => {\n                    const signInButton = this._createSignInButton(container, this._buttonClassName);\n\n                    visaCheckout.init(initOptions);\n                    visaCheckout.on('payment.success', (paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) =>\n                        this._paymentInstrumentSelected(paymentSuccessPayload)\n                            .catch(error => onError(error))\n                    );\n                    visaCheckout.on('payment.error', (payment, error) => onError(error));\n\n                    return signInButton;\n                })\n                .then(signInButton => { signInButton.style.visibility = 'visible'; });\n            })\n            .then(() => this._store.getState());\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via VisaCheckout, the shopper must click on \"Visa Checkout\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut('braintreevisacheckout', options)\n        );\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        return this._braintreeVisaCheckoutPaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    private _paymentInstrumentSelected(paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) {\n        const state = this._store.getState();\n\n        if (!this._paymentMethod) {\n            throw new Error('Payment method not initialized');\n        }\n\n        const { id: methodId } = this._paymentMethod;\n\n        return this._store.dispatch(\n            this._customerStrategyActionCreator.widgetInteraction(() => {\n                return this._braintreeVisaCheckoutPaymentProcessor.handleSuccess(\n                    paymentSuccessPayload,\n                    state.shippingAddress.getShippingAddress(),\n                    state.billingAddress.getBillingAddress()\n                )\n                .then(() => this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()));\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _createSignInButton(containerId: string, buttonClass: string): HTMLElement {\n        const container = document.querySelector(`#${containerId}`);\n\n        if (!container) {\n            throw new Error('Need a container to place the button');\n        }\n\n        return (container.querySelector('.' + buttonClass) as HTMLElement) ||\n            this._insertVisaCheckoutButton(container, buttonClass);\n    }\n\n    private _insertVisaCheckoutButton(container: Element, buttonClass: string): HTMLElement {\n        const buttonSource = 'https://secure.checkout.visa.com/wallet-services-web/xo/button.png?acceptCanadianVisaDebit=false&cobrand=true&size=154';\n        const buttonTemplate = `\n            <img\n                alt=\"Visa Checkout\"\n                class=\"v-button\"\n                role=\"button\"\n                src=\"${buttonSource}\"\n                />\n            <a class=\"v-learn v-learn-default\" style=\"text-align: right; display: block; font-size: 10px; color: #003366;\" href=\"#\" data-locale=\"en_US\">Tell Me More</a>`;\n\n        const visaCheckoutButton = document.createElement('div');\n        visaCheckoutButton.style.visibility = 'hidden';\n        visaCheckoutButton.className = buttonClass;\n        visaCheckoutButton.innerHTML = buttonTemplate;\n\n        container.appendChild(visaCheckoutButton);\n\n        return visaCheckoutButton;\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { ChasePayScriptLoader, ChasePaySuccessPayload } from '../../../payment/strategies/chasepay';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport CustomerCredentials from '../../customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class ChasePayCustomerStrategy implements CustomerStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _chasePayScriptLoader: ChasePayScriptLoader,\n        private _requestSender: RequestSender,\n        private _formPoster: FormPoster\n    ) {}\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { chasepay: chasePayOptions, methodId } = options;\n\n        if (!chasePayOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.chasepay\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                const cart = state.cart.getCart();\n                const storeConfig = state.config.getStoreConfig();\n\n                if (!cart) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCart);\n                }\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!this._paymentMethod || !this._paymentMethod.initializationData.digitalSessionId) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n\n                const { container } = chasePayOptions;\n\n                return this._chasePayScriptLoader.load(this._paymentMethod.config.testMode)\n                    .then(JPMC => {\n                        const ChasePay = JPMC.ChasePay;\n\n                        ChasePay.configure({\n                            language: storeConfig.storeProfile.storeLanguage,\n                        });\n\n                        if (ChasePay.isChasePayUp) {\n                            ChasePay.insertButtons({\n                                containers: [container],\n                            });\n                        }\n\n                        ChasePay.on(ChasePay.EventType.START_CHECKOUT, () => {\n                            this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n                                .then(() => {\n                                    const state = this._store.getState();\n                                    const method = state.paymentMethods.getPaymentMethod(methodId);\n                                    const sessionId = method && method.initializationData && method.initializationData.digitalSessionId;\n\n                                    if (sessionId) {\n                                        ChasePay.startCheckout(sessionId);\n                                    }\n                                });\n                        });\n\n                        ChasePay.on(ChasePay.EventType.COMPLETE_CHECKOUT, (payload: ChasePaySuccessPayload) => {\n                            const state = this._store.getState();\n                            const method = state.paymentMethods.getPaymentMethod(methodId);\n                            const requestId = method && method.initializationData && method.initializationData.merchantRequestId;\n\n                            if (requestId) {\n                                this._setExternalCheckoutData(payload, requestId)\n                                    .then(() => {\n                                        this._reloadPage();\n                                });\n                            }\n                        });\n                    });\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Chase Pay®, the shopper must click on \"Chase Pay®\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _setExternalCheckoutData(payload: ChasePaySuccessPayload, requestId: string): Promise<Response> {\n        const url = `checkout.php?provider=chasepay&action=set_external_checkout`;\n        const options = {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\n            },\n            body: {\n                sessionToken: payload.sessionToken,\n                merchantRequestId: requestId,\n            },\n            method: 'post',\n        };\n\n        return this._requestSender.sendRequest(url, options);\n    }\n\n    private _reloadPage() {\n        this._formPoster.postForm('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            params: {\n                fromChasePay: true,\n            },\n        });\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport CustomerActionCreator from '../../customer-action-creator';\nimport CustomerCredentials from '../../customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class DefaultCustomerStrategy implements CustomerStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _customerActionCreator: CustomerActionCreator\n    ) {}\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._customerActionCreator.signInCustomer(credentials, options)\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._customerActionCreator.signOutCustomer(options)\n        );\n    }\n\n    initialize(options?: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError } from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { GooglePayPaymentProcessor } from '../../../payment/strategies/googlepay';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport CustomerCredentials from '../../customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nimport GooglePayCustomerInitializeOptions from './googlepay-customer-initialize-options';\n\nexport default class GooglePayCustomerStrategy implements CustomerStrategy {\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _googlePayPaymentProcessor: GooglePayPaymentProcessor,\n        private _formPoster: FormPoster\n    ) {}\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId }  = options;\n\n        const googlePayOptions = this._getGooglePayOptions(options);\n\n        if (!methodId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._googlePayPaymentProcessor.initialize(methodId)\n            .then(() => {\n                this._walletButton = this._createSignInButton(googlePayOptions.container);\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._walletButton && this._walletButton.parentNode) {\n            this._walletButton.parentNode.removeChild(this._walletButton);\n            this._walletButton = undefined;\n        }\n\n        return this._googlePayPaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Google Pay, the shopper must click on \"Google Pay\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const container = document.querySelector(`#${containerId}`);\n\n        if (!container) {\n            throw new InvalidArgumentError('Unable to create sign-in button without valid container ID.');\n        }\n\n        const button = this._googlePayPaymentProcessor.createButton(this._handleWalletButtonClick);\n\n        container.appendChild(button);\n\n        return button;\n    }\n\n    private _getGooglePayOptions(options: CustomerInitializeOptions): GooglePayCustomerInitializeOptions {\n        if (options.methodId === 'googlepaybraintree' && options.googlepaybraintree) {\n            return options.googlepaybraintree;\n        }\n\n        if (options.methodId === 'googlepaystripe' && options.googlepaystripe) {\n            return options.googlepaystripe;\n        }\n\n        throw new InvalidArgumentError();\n    }\n\n    private _onPaymentSelectComplete(): void {\n        this._formPoster.postForm('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n        });\n    }\n\n    private _onError(error?: Error): void {\n        if (error && error.message !== 'CANCELED') {\n            throw error;\n        }\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): Promise<void> {\n        event.preventDefault();\n\n        return this._googlePayPaymentProcessor.displayWallet()\n            .then(paymentData => this._googlePayPaymentProcessor.handleSuccess(paymentData)\n            .then(() => {\n                if (paymentData.shippingAddress) {\n                    this._googlePayPaymentProcessor.updateShippingAddress(paymentData.shippingAddress);\n                }\n            }))\n            .then(() => this._onPaymentSelectComplete())\n            .catch(error => this._onError(error));\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotImplementedError\n} from '../../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { getCallbackUrl, MasterpassScriptLoader } from '../../../payment/strategies/masterpass';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport CustomerCredentials from '../../customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class MasterpassCustomerStrategy implements CustomerStrategy {\n    private _signInButton?: HTMLElement;\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _masterpassScriptLoader: MasterpassScriptLoader\n    ) {}\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { masterpass: masterpassOptions, methodId } = options;\n\n        if (!masterpassOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.masterpass\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n                if (!this._paymentMethod || !this._paymentMethod.initializationData.checkoutId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const cart = state.cart.getCart();\n                if (!cart) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCart);\n                }\n\n                const { container } = masterpassOptions;\n\n                const payload = {\n                    checkoutId: this._paymentMethod.initializationData.checkoutId,\n                    allowedCardTypes: this._paymentMethod.initializationData.allowedCardTypes,\n                    amount: cart.cartAmount.toString(),\n                    currency: cart.currency.code,\n                    cartId: cart.id,\n                    suppressShippingAddress: false,\n                    callbackUrl: getCallbackUrl('checkout'),\n                };\n\n                return this._masterpassScriptLoader.load(this._paymentMethod.config.testMode)\n                    .then(Masterpass => {\n                        this._signInButton = this._createSignInButton(container);\n\n                        this._signInButton.addEventListener('click', () => {\n                            Masterpass.checkout(payload);\n                        });\n                    });\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        if (this._signInButton && this._signInButton.parentNode) {\n            this._signInButton.parentNode.removeChild(this._signInButton);\n            this._signInButton = undefined;\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Masterpass, the shopper must click on \"Masterpass\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const container = document.querySelector(`#${containerId}`);\n\n        if (!container) {\n            throw new InvalidArgumentError('Unable to create sign-in button without valid container ID.');\n        }\n\n        const button = document.createElement('input');\n\n        button.type = 'image';\n        button.src = 'https://static.masterpass.com/dyn/img/btn/global/mp_chk_btn_160x037px.svg';\n        container.appendChild(button);\n\n        return button;\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { NotImplementedError } from '../../../common/error/errors';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport CustomerCredentials from '../../customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class SquareCustomerStrategy implements CustomerStrategy {\n\n    constructor(\n        private _store: CheckoutStore,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator\n    ) {}\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Masterpass, the shopper must click on \"Masterpass\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    initialize(options?: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { createAction, createErrorAction, Action } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport Country from './country';\nimport { CountryActionType } from './country-actions';\nimport CountryRequestSender from './country-request-sender';\n\nexport default class CountryActionCreator {\n    constructor(\n        private _countryRequestSender: CountryRequestSender\n    ) {}\n\n    loadCountries(options?: RequestOptions): Observable<Action<Country[]>> {\n        return Observable.create((observer: Observer<Action<Country[]>>) => {\n            observer.next(createAction(CountryActionType.LoadCountriesRequested));\n\n            this._countryRequestSender.loadCountries(options)\n                .then(response => {\n                    observer.next(createAction(CountryActionType.LoadCountriesSucceeded, response.body.data));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CountryActionType.LoadCountriesFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport { CountryResponseBody } from './country-responses';\n\nexport default class CountryRequestSender {\n    constructor(\n        private _requestSender: RequestSender,\n        private _config: { locale?: string }\n    ) {}\n\n    loadCountries({ timeout }: RequestOptions = {}): Promise<Response<CountryResponseBody>> {\n        const url = '/internalapi/v1/store/countries';\n        const headers = {\n            'Accept-Language': this._config.locale,\n        };\n\n        return this._requestSender.get(url, { headers, timeout });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { joinIncludes, ContentType, RequestOptions } from '../common/http-request';\n\nimport InternalOrderRequestBody from './internal-order-request-body';\nimport { InternalOrderResponseBody } from './internal-order-responses';\nimport Order from './order';\nimport OrderParams from './order-params';\n\nexport default class OrderRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadOrder(orderId: number, { timeout, params }: RequestOptions<OrderParams> = {}): Promise<Response<Order>> {\n        const url = `/api/storefront/orders/${orderId}`;\n        const headers = { Accept: ContentType.JsonV1 };\n        const include = [\n            'payments',\n            'lineItems.physicalItems.socialMedia',\n            'lineItems.physicalItems.options',\n            'lineItems.digitalItems.socialMedia',\n            'lineItems.digitalItems.options',\n        ];\n\n        return this._requestSender.get(url, {\n            params: {\n                include: joinIncludes([\n                    ...include,\n                    ...(params && params.include || []),\n                ]),\n            },\n            headers,\n            timeout,\n        });\n    }\n\n    submitOrder(body: InternalOrderRequestBody, { timeout }: RequestOptions = {}): Promise<Response<InternalOrderResponseBody>> {\n        const url = '/internalapi/v1/checkout/order';\n\n        return this._requestSender.post(url, { body, timeout });\n    }\n\n    finalizeOrder(orderId: number, { timeout }: RequestOptions = {}): Promise<Response<InternalOrderResponseBody>> {\n        const url = `/internalapi/v1/checkout/order/${orderId}`;\n\n        return this._requestSender.post(url, { timeout });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, empty, from, of, Observable, Observer } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\n\nimport { CheckoutValidator, InternalCheckoutSelectors, ReadableCheckoutStore } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport InternalOrderRequestBody from './internal-order-request-body';\nimport { FinalizeOrderAction, LoadOrderAction, LoadOrderPaymentsAction, OrderActionType, SubmitOrderAction } from './order-actions';\nimport OrderRequestBody from './order-request-body';\nimport OrderRequestSender from './order-request-sender';\nimport { SpamProtectionActionCreator } from './spam-protection';\nimport { SpamProtectionAction } from './spam-protection/spam-protection-actions';\n\nexport default class OrderActionCreator {\n    constructor(\n        private _orderRequestSender: OrderRequestSender,\n        private _checkoutValidator: CheckoutValidator,\n        private _spamProtectionActionCreator: SpamProtectionActionCreator\n    ) {}\n\n    loadOrder(orderId: number, options?: RequestOptions): Observable<LoadOrderAction> {\n        return new Observable((observer: Observer<LoadOrderAction>) => {\n            observer.next(createAction(OrderActionType.LoadOrderRequested));\n\n            this._orderRequestSender.loadOrder(orderId, options)\n                .then(response => {\n                    observer.next(createAction(OrderActionType.LoadOrderSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(OrderActionType.LoadOrderFailed, response));\n                });\n        });\n    }\n\n    // TODO: Remove when checkout does not contain unrelated order data.\n    loadOrderPayments(orderId: number, options?: RequestOptions): Observable<LoadOrderPaymentsAction> {\n        return new Observable((observer: Observer<LoadOrderPaymentsAction>) => {\n            observer.next(createAction(OrderActionType.LoadOrderPaymentsRequested));\n\n            this._orderRequestSender.loadOrder(orderId, options)\n                .then(response => {\n                    observer.next(createAction(OrderActionType.LoadOrderPaymentsSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(OrderActionType.LoadOrderPaymentsFailed, response));\n                });\n        });\n    }\n\n    loadCurrentOrder(options?: RequestOptions): ThunkAction<LoadOrderAction, InternalCheckoutSelectors> {\n        return store => defer(() => {\n            const orderId = this._getCurrentOrderId(store.getState());\n\n            if (!orderId) {\n                throw new MissingDataError(MissingDataErrorType.MissingOrderId);\n            }\n\n            return this.loadOrder(orderId, options);\n        });\n    }\n\n    submitOrder(payload: OrderRequestBody, options?: RequestOptions): ThunkAction<SubmitOrderAction | SpamProtectionAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(OrderActionType.SubmitOrderRequested)),\n            this._executeSpamProtection(store),\n            defer(() => {\n                const state = store.getState();\n                const externalSource = state.config.getExternalSource();\n                const checkout = state.checkout.getCheckout();\n                const orderMeta = state.order.getOrderMeta();\n                const storeConfig = state.config.getStoreConfig();\n                const spamProtectionToken = orderMeta && orderMeta.spamProtectionToken;\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                const { isSpamProtectionEnabled } = storeConfig.checkoutSettings;\n\n                if (isSpamProtectionEnabled && !spamProtectionToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingSpamProtectionToken);\n                }\n\n                return from(\n                    this._checkoutValidator.validate(checkout, options)\n                        .then(() => this._orderRequestSender.submitOrder(this._mapToOrderRequestBody(\n                            payload,\n                            checkout.customerMessage,\n                            externalSource,\n                            spamProtectionToken\n                        ), options))\n                ).pipe(\n                    switchMap(response => concat(\n                        // TODO: Remove once we can submit orders using storefront API\n                        this.loadOrder(response.body.data.order.orderId, options),\n                        of(createAction(OrderActionType.SubmitOrderSucceeded, response.body.data, { ...response.body.meta, token: response.headers.token }))\n                    ))\n                );\n            }).pipe(\n                catchError(error => throwErrorAction(OrderActionType.SubmitOrderFailed, error))\n            )\n        );\n    }\n\n    finalizeOrder(orderId: number, options?: RequestOptions): Observable<FinalizeOrderAction | LoadOrderAction> {\n        return concat(\n            of(createAction(OrderActionType.FinalizeOrderRequested)),\n            from(this._orderRequestSender.finalizeOrder(orderId, options))\n                .pipe(\n                    switchMap(response => concat(\n                        this.loadOrder(orderId, options),\n                        of(createAction(OrderActionType.FinalizeOrderSucceeded, response.body.data))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(OrderActionType.FinalizeOrderFailed, error))\n        );\n    }\n\n    private _getCurrentOrderId(state: InternalCheckoutSelectors): number | undefined {\n        const order = state.order.getOrder();\n        const checkout = state.checkout.getCheckout();\n\n        return (order && order.orderId) || (checkout && checkout.orderId);\n    }\n\n    private _executeSpamProtection(store: ReadableCheckoutStore): Observable<SpamProtectionAction> {\n        const storeConfig = store.getState().config.getStoreConfig();\n\n        if (!storeConfig) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        const { isSpamProtectionEnabled } = storeConfig.checkoutSettings;\n\n        if (!isSpamProtectionEnabled) {\n            return empty();\n        }\n\n        return this._spamProtectionActionCreator.execute();\n    }\n\n    private _mapToOrderRequestBody(\n        payload: OrderRequestBody,\n        customerMessage: string,\n        externalSource?: string,\n        spamProtectionToken?: string\n    ): InternalOrderRequestBody {\n        const { payment, ...order } = payload;\n\n        if (!payment) {\n            return {\n                ...order,\n                customerMessage,\n                externalSource,\n                spamProtectionToken,\n            };\n        }\n\n        return {\n            ...order,\n            customerMessage,\n            externalSource,\n            spamProtectionToken,\n            payment: {\n                paymentData: payment.paymentData,\n                name: payment.methodId,\n                gateway: payment.gatewayId,\n            },\n        };\n    }\n}\n","export interface MutationObeserverCreator {\n    prototype: MutationObserver;\n    new(callback: MutationCallback): MutationObserver;\n}\n\nexport interface MutationObserverWindow extends Window {\n    MutationObserver: MutationObeserverCreator;\n}\n\nexport class MutationObserverFactory {\n    constructor(\n        private _window: MutationObserverWindow = window as MutationObserverWindow\n    ) {}\n\n    create(callback: MutationCallback): MutationObserver {\n        return new this._window.MutationObserver(callback);\n    }\n}\n","import { StandardError } from '../../../common/error/errors';\n\nexport default class SpamProtectionFailedError extends StandardError {\n    constructor() {\n        super('We were not able to complete our spam protection verification. Please try again.');\n\n        this.name = 'SpamProtectionFailedError';\n        this.type = 'spam_protection_failed';\n    }\n}\n","import { StandardError } from '../../../common/error/errors';\n\nexport default class SpamProtectionNotCompletedError extends StandardError {\n    constructor() {\n        super('You haven\\'t complete our spam protection verification. Please try again.');\n\n        this.name = 'SpamProtectionNotCompletedError';\n        this.type = 'spam_protection_not_completed';\n    }\n}\n","import { Observable, Subject } from 'rxjs';\n\nimport { MutationObserverFactory } from '../../common/dom/mutation-observer';\nimport { NotInitializedError, NotInitializedErrorType } from '../../common/error/errors';\n\nimport { SpamProtectionFailedError, SpamProtectionNotCompletedError } from './errors';\nimport GoogleRecaptchaScriptLoader from './google-recaptcha-script-loader';\n\nexport interface RecaptchaResult {\n    error?: Error;\n    token?: string;\n}\n\nexport default class GoogleRecaptcha {\n    private _event$?: Subject<RecaptchaResult>;\n    private _recaptcha?: ReCaptchaV2.ReCaptcha;\n\n    constructor(\n        private googleRecaptchaScriptLoader: GoogleRecaptchaScriptLoader,\n        private mutationObserverFactory: MutationObserverFactory\n    ) {}\n\n    load(containerId: string, sitekey: string): Promise<void> {\n        const event$ = new Subject<RecaptchaResult>();\n        this._event$ = event$;\n\n        return this.googleRecaptchaScriptLoader.load()\n            .then(recaptcha => {\n                recaptcha.render(containerId, {\n                    sitekey,\n                    size: 'invisible',\n                    callback: () => {\n                        event$.next({\n                            token: recaptcha.getResponse(),\n                        });\n                    },\n                    'error-callback': () => {\n                        event$.next({\n                            error: new SpamProtectionFailedError(),\n                        });\n                    },\n                });\n\n                this._recaptcha = recaptcha;\n            });\n    }\n\n    execute(): Observable<RecaptchaResult> {\n        if (!this._event$ || !this._recaptcha) {\n            throw new NotInitializedError(NotInitializedErrorType.SpamProtectionNotInitialized);\n        }\n\n        this._watchRecaptchaChallengeWindow(this._event$);\n\n        this._recaptcha.execute();\n\n        return this._event$;\n    }\n\n    private _watchRecaptchaChallengeWindow(event: Subject<RecaptchaResult>) {\n        const iframeElement = document.querySelector('iframe[title=\"recaptcha challenge\"]');\n\n        if (!iframeElement) {\n            throw new Error('Recaptcha challenge iframe not found.');\n        }\n\n        const iframeContainer = iframeElement.parentElement;\n\n        if (!iframeContainer) {\n            throw new Error('Recaptcha challenge iframe container not found.');\n        }\n\n        const container = iframeContainer.parentElement;\n\n        if (!container) {\n            throw new Error('Recaptcha challenge container not found.');\n        }\n\n        this.mutationObserverFactory.create(() => {\n            // When customer closes the Google ReCaptcha challenge window, throw SpamProtectionNotCompletedError\n            if (container.style.visibility === 'hidden') {\n                event.next({\n                    error: new SpamProtectionNotCompletedError(),\n                });\n            }\n        })\n\n        .observe(container, { attributes: true, attributeFilter: ['style'] });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nexport default class GoogleRecaptchaScriptLoader {\n    private _loadPromise?: Promise<ReCaptchaV2.ReCaptcha>;\n\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: GoogleRecaptchaWindow = window\n    ) {}\n\n    load(): Promise<ReCaptchaV2.ReCaptcha> {\n        if (!this._loadPromise) {\n            this._loadPromise = this._loadScript();\n        }\n\n        return this._loadPromise;\n    }\n\n    private _loadScript(): Promise<ReCaptchaV2.ReCaptcha> {\n        const callbackName = 'initRecaptcha';\n        const params = [\n            `onload=${callbackName}`,\n            'render=explicit',\n        ].join('&');\n\n        return new Promise((resolve, reject) => {\n            this._window[callbackName] = () => resolve(this._window.grecaptcha);\n\n            this._scriptLoader.loadScript(`//www.google.com/recaptcha/api.js?${params}`)\n                .catch(error => {\n                    this._loadPromise = undefined;\n                    reject(error);\n                });\n        });\n    }\n}\n\nexport interface GoogleRecaptchaWindow extends Window {\n    grecaptcha?: ReCaptchaV2.ReCaptcha;\n    initRecaptcha?(): void;\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, of, throwError, Observable, Observer } from 'rxjs';\nimport { switchMap, take } from 'rxjs/operators';\n\nimport { InternalCheckoutSelectors } from '../../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../../common/error/errors';\n\nimport GoogleRecaptcha from './google-recaptcha';\nimport { SpamProtectionAction, SpamProtectionActionType } from './spam-protection-actions';\nimport { SpamProtectionOptions } from './spam-protection-options';\n\nexport default class SpamProtectionActionCreator {\n    constructor(\n        private _googleRecaptcha: GoogleRecaptcha\n    ) {}\n\n    initialize(options: SpamProtectionOptions): ThunkAction<SpamProtectionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<SpamProtectionAction>) => {\n            const state = store.getState();\n            const config = state.config.getConfig();\n            const { containerId } = options;\n\n            if (!config) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n            }\n\n            observer.next(createAction(SpamProtectionActionType.InitializeRequested, undefined));\n\n            const recaptchaSitekey = config.storeConfig.checkoutSettings.googleRecaptchaSitekey;\n\n            return this._googleRecaptcha.load(containerId, recaptchaSitekey)\n                .then(() => {\n                    observer.next(createAction(SpamProtectionActionType.InitializeSucceeded));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(SpamProtectionActionType.InitializeFailed, error, containerId));\n                });\n        });\n    }\n\n    execute(): Observable<SpamProtectionAction> {\n        return concat(\n            of(createAction(SpamProtectionActionType.ExecuteRequested, undefined)),\n            this._googleRecaptcha.execute()\n                .pipe(take(1))\n                .pipe(switchMap(({ error, token }) => {\n                    return error ?\n                        throwError(createErrorAction(SpamProtectionActionType.SubmitFailed, error)) :\n                        of(createAction(SpamProtectionActionType.Completed, token));\n                }))\n        );\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class OrderFinalizationNotRequiredError extends StandardError {\n    constructor() {\n        super('The current order does not need to be finalized at this stage.');\n\n        this.name = 'OrderFinalizationNotRequiredError';\n        this.type = 'order_finalization_not_required';\n    }\n}\n","enum PaymentStrategyType {\n    AFFIRM = 'affirm',\n    AFTERPAY = 'afterpay',\n    AMAZON = 'amazon',\n    CREDIT_CARD = 'creditcard',\n    CYBERSOURCE = 'cybersource',\n    KLARNA = 'klarna',\n    LEGACY = 'legacy',\n    OFFLINE = 'offline',\n    OFFSITE = 'offsite',\n    PAYPAL = 'paypal',\n    PAYPAL_EXPRESS = 'paypalexpress',\n    PAYPAL_EXPRESS_CREDIT = 'paypalexpresscredit',\n    SAGE_PAY = 'sagepay',\n    SQUARE = 'squarev2',\n    STRIPEV3 = 'stripev3',\n    NO_PAYMENT_DATA_REQUIRED = 'nopaymentdatarequired',\n    BRAINTREE = 'braintree',\n    BRAINTREE_PAYPAL = 'braintreepaypal',\n    BRAINTREE_PAYPAL_CREDIT = 'braintreepaypalcredit',\n    BRAINTREE_VISA_CHECKOUT = 'braintreevisacheckout',\n    BRAINTREE_GOOGLE_PAY = 'googlepaybraintree',\n    CHASE_PAY = 'chasepay',\n    WE_PAY = 'wepay',\n    MASTERPASS = 'masterpass',\n    STRIPE_GOOGLE_PAY = 'googlepaystripe',\n    ZIP = 'zip',\n    CONVERGE = 'converge',\n}\n\nexport default PaymentStrategyType;\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, empty, of, Observable, Observer } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { InternalCheckoutSelectors, ReadableCheckoutStore } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { LoadOrderPaymentsAction, OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../order';\nimport { OrderFinalizationNotRequiredError } from '../order/errors';\n\nimport { PaymentInitializeOptions, PaymentRequestOptions } from './payment-request-options';\nimport {\n    PaymentStrategyActionType,\n    PaymentStrategyDeinitializeAction,\n    PaymentStrategyExecuteAction,\n    PaymentStrategyFinalizeAction,\n    PaymentStrategyInitializeAction,\n    PaymentStrategyWidgetAction,\n} from './payment-strategy-actions';\nimport PaymentStrategyRegistry from './payment-strategy-registry';\nimport PaymentStrategyType from './payment-strategy-type';\nimport { PaymentStrategy } from './strategies';\n\nexport default class PaymentStrategyActionCreator {\n    constructor(\n        private _strategyRegistry: PaymentStrategyRegistry,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: RequestOptions): ThunkAction<PaymentStrategyExecuteAction, InternalCheckoutSelectors> {\n        return store => new Observable((observer: Observer<PaymentStrategyExecuteAction>) => {\n            const state = store.getState();\n            const { payment = {} as OrderPaymentRequestBody, useStoreCredit } = payload;\n            const meta = { methodId: payment.methodId };\n\n            let strategy: PaymentStrategy;\n\n            if (state.payment.isPaymentDataRequired(useStoreCredit)) {\n                const method = state.paymentMethods.getPaymentMethod(payment.methodId, payment.gatewayId);\n\n                if (!method) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                strategy = this._strategyRegistry.getByMethod(method);\n            } else {\n                strategy = this._strategyRegistry.get(PaymentStrategyType.NO_PAYMENT_DATA_REQUIRED);\n            }\n\n            observer.next(createAction(PaymentStrategyActionType.ExecuteRequested, undefined, meta));\n\n            strategy\n                .execute(payload, { ...options, methodId: payment.methodId, gatewayId: payment.gatewayId })\n                .then(() => {\n                    observer.next(createAction(PaymentStrategyActionType.ExecuteSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(PaymentStrategyActionType.ExecuteFailed, error, meta));\n                });\n        });\n    }\n\n    finalize(options?: RequestOptions): ThunkAction<PaymentStrategyFinalizeAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(PaymentStrategyActionType.FinalizeRequested)),\n            this._loadOrderPaymentsIfNeeded(store, options),\n            defer(() => {\n                const state = store.getState();\n                const { providerId = '', gatewayId = '' } = state.payment.getPaymentId() || {};\n                const method = state.paymentMethods.getPaymentMethod(providerId, gatewayId);\n\n                if (!method) {\n                    throw new OrderFinalizationNotRequiredError();\n                }\n\n                return this._strategyRegistry.getByMethod(method)\n                    .finalize({ ...options, methodId: method.id, gatewayId: method.gateway })\n                    .then(() => createAction(PaymentStrategyActionType.FinalizeSucceeded, undefined, { methodId: method.id }));\n            })\n        ).pipe(\n            catchError(error => {\n                const state = store.getState();\n                const payment = state.payment.getPaymentId();\n\n                return throwErrorAction(PaymentStrategyActionType.FinalizeFailed, error, { methodId: payment && payment.providerId });\n            })\n        );\n    }\n\n    initialize(options: PaymentInitializeOptions): ThunkAction<PaymentStrategyInitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<PaymentStrategyInitializeAction>) => {\n            const state = store.getState();\n            const { methodId, gatewayId } = options;\n            const method = state.paymentMethods.getPaymentMethod(methodId, gatewayId);\n\n            if (!method) {\n                throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n            }\n\n            if (methodId && state.paymentStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(PaymentStrategyActionType.InitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.getByMethod(method)\n                .initialize({ ...options, methodId, gatewayId })\n                .then(() => {\n                    observer.next(createAction(PaymentStrategyActionType.InitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(PaymentStrategyActionType.InitializeFailed, error, { methodId }));\n                });\n        });\n    }\n\n    deinitialize(options: PaymentRequestOptions): ThunkAction<PaymentStrategyDeinitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<PaymentStrategyDeinitializeAction>) => {\n            const state = store.getState();\n            const { methodId, gatewayId } = options;\n            const method = state.paymentMethods.getPaymentMethod(methodId, gatewayId);\n\n            if (!method) {\n                throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n            }\n\n            if (methodId && !state.paymentStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(PaymentStrategyActionType.DeinitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.getByMethod(method)\n                .deinitialize({ ...options, methodId, gatewayId })\n                .then(() => {\n                    observer.next(createAction(PaymentStrategyActionType.DeinitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(PaymentStrategyActionType.DeinitializeFailed, error, { methodId }));\n                });\n        });\n    }\n\n    widgetInteraction(method: () => Promise<any>, options?: PaymentRequestOptions): ThunkAction<PaymentStrategyWidgetAction> {\n        return store => Observable.create((observer: Observer<PaymentStrategyWidgetAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(PaymentStrategyActionType.WidgetInteractionStarted, undefined, meta));\n\n            method().then(() => {\n                observer.next(createAction(PaymentStrategyActionType.WidgetInteractionFinished, undefined, meta));\n                observer.complete();\n            })\n            .catch(error => {\n                observer.error(createErrorAction(PaymentStrategyActionType.WidgetInteractionFailed, error, meta));\n            });\n        });\n    }\n\n    private _loadOrderPaymentsIfNeeded(store: ReadableCheckoutStore, options?: RequestOptions): Observable<LoadOrderPaymentsAction> {\n        const state = store.getState();\n        const checkout = state.checkout.getCheckout();\n\n        if (checkout && checkout.orderId) {\n            return this._orderActionCreator.loadOrderPayments(checkout.orderId, options);\n        }\n\n        return empty();\n    }\n}\n","import { isEqual } from 'lodash';\n\nimport { PartialDeep } from '../common/types';\n\nimport Cart from './cart';\n\nexport default class CartComparator {\n    isEqual(cartA: Cart, cartB: Cart): boolean {\n        return isEqual(\n            this._normalize(cartA),\n            this._normalize(cartB)\n        );\n    }\n\n    private _normalize(cart: Cart): PartialDeep<Cart> {\n        return {\n            cartAmount: cart.cartAmount,\n            currency: cart.currency,\n            id: cart.id,\n            lineItems: {\n                digitalItems: cart.lineItems.digitalItems\n                    .slice()\n                    .sort((itemA, itemB) =>\n                        `${itemA.productId}${itemA.variantId}`.localeCompare(`${itemB.productId}${itemB.variantId}`)\n                    )\n                    .map(item => ({\n                        extendedSalePrice: item.extendedSalePrice,\n                        productId: item.productId,\n                        quantity: item.quantity,\n                        variantId: item.variantId,\n                    })),\n                giftCertificates: cart.lineItems.giftCertificates\n                    .slice()\n                    .sort((itemA, itemB) => `${itemA.id}`.localeCompare(`${itemB.id}`))\n                    .map(item => ({\n                        amount: item.amount,\n                        recipient: item.recipient,\n                    })),\n                physicalItems: cart.lineItems.physicalItems\n                    .slice()\n                    .sort((itemA, itemB) =>\n                        `${itemA.productId}${itemA.variantId}`.localeCompare(`${itemB.productId}${itemB.variantId}`)\n                    )\n                    .map(item => ({\n                        extendedSalePrice: item.extendedSalePrice,\n                        productId: item.productId,\n                        quantity: item.quantity,\n                        variantId: item.variantId,\n                        giftWrapping: item.giftWrapping,\n                    })),\n            },\n        };\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class CartChangedError extends StandardError {\n    constructor() {\n        super('An update to your shopping cart has been detected and your available shipping costs have been updated.');\n\n        this.name = 'CartChangedError';\n        this.type = 'cart_changed';\n    }\n}\n","import { isEqual, map } from 'lodash';\n\nimport { CartComparator } from '../cart';\nimport { CartChangedError } from '../cart/errors';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { Coupon, GiftCertificate } from '../coupon';\n\nimport Checkout from './checkout';\nimport CheckoutRequestSender from './checkout-request-sender';\n\nexport default class CheckoutValidator {\n    constructor(\n        private _checkoutRequestSender: CheckoutRequestSender\n    ) {}\n\n    validate(checkout?: Checkout, options?: RequestOptions): Promise<void> {\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        return this._checkoutRequestSender.loadCheckout(checkout.id, options)\n            .then(response => {\n                const comparator = new CartComparator();\n\n                if (checkout.grandTotal === response.body.grandTotal\n                    && this._compareCoupons(checkout.coupons, response.body.coupons)\n                    && this._compareGiftCertificates(checkout.giftCertificates, response.body.giftCertificates)\n                    && comparator.isEqual(checkout.cart, response.body.cart)\n                ) {\n                    return;\n                }\n\n                throw new CartChangedError();\n            });\n    }\n\n    private _compareCoupons(couponsA: Coupon[], couponsB: Coupon[]): boolean {\n        return isEqual(map(couponsA, 'code'), map(couponsB, 'code'));\n    }\n\n    private _compareGiftCertificates(giftCertificatesA: GiftCertificate[], giftCertificatesB: GiftCertificate[]): boolean {\n        return isEqual(map(giftCertificatesA, 'code'), map(giftCertificatesB, 'code'));\n    }\n}\n","import { PaymentInstrument, VaultedInstrument } from './payment';\n\nexport default function isVaultedInstrument(instrument: PaymentInstrument): instrument is VaultedInstrument {\n    return Boolean((instrument as VaultedInstrument).instrumentId);\n}\n","export enum OrderIncludes {\n    DigitalItemsCategories = 'lineItems.digitalItems.categories',\n    PhysicalItemsCategories = 'lineItems.physicalItems.categories',\n}\n\nexport default interface OrderParams {\n    include?: OrderIncludes[];\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { pick } from 'lodash';\nimport { concat, from, of } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\n\nimport { mapToInternalAddress } from '../address';\nimport { mapToInternalCart } from '../cart';\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { StandardError } from '../common/error/errors';\nimport { mapToInternalCustomer } from '../customer';\nimport { mapToInternalOrder, OrderActionCreator } from '../order';\nimport { mapToInternalShippingOption } from '../shipping';\n\nimport isVaultedInstrument from './is-vaulted-instrument';\nimport Payment from './payment';\nimport { InitializeOffsitePaymentAction, PaymentActionType, SubmitPaymentAction } from './payment-actions';\nimport PaymentMethod from './payment-method';\nimport PaymentMethodSelector from './payment-method-selector';\nimport PaymentRequestBody from './payment-request-body';\nimport PaymentRequestSender from './payment-request-sender';\n\nexport default class PaymentActionCreator {\n    constructor(\n        private _paymentRequestSender: PaymentRequestSender,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    submitPayment(payment: Payment): ThunkAction<SubmitPaymentAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(PaymentActionType.SubmitPaymentRequested)),\n            from(this._paymentRequestSender.submitPayment(\n                this._getPaymentRequestBody(payment, store.getState())\n            ))\n                .pipe(\n                    switchMap(({ body }) => concat(\n                        this._orderActionCreator.loadCurrentOrder()(store),\n                        of(createAction(PaymentActionType.SubmitPaymentSucceeded, body))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(PaymentActionType.SubmitPaymentFailed, error))\n        );\n    }\n\n    initializeOffsitePayment(\n        methodId: string,\n        gatewayId?: string\n    ): ThunkAction<InitializeOffsitePaymentAction, InternalCheckoutSelectors> {\n        return store => {\n            const payload = this._getPaymentRequestBody({ gatewayId, methodId }, store.getState());\n\n            return concat(\n                of(createAction(PaymentActionType.InitializeOffsitePaymentRequested)),\n                this._paymentRequestSender.initializeOffsitePayment(payload)\n                    .then(() => createAction(PaymentActionType.InitializeOffsitePaymentSucceeded))\n            ).pipe(\n                catchError(error => throwErrorAction(PaymentActionType.InitializeOffsitePaymentFailed, error))\n            );\n        };\n    }\n\n    private _getPaymentRequestBody(payment: Payment, state: InternalCheckoutSelectors): PaymentRequestBody {\n        const billingAddress = state.billingAddress.getBillingAddress();\n        const checkout = state.checkout.getCheckout();\n        const customer = state.customer.getCustomer();\n        const order = state.order.getOrder();\n        const paymentMethod = this._getPaymentMethod(state.paymentMethods, payment.methodId, payment.gatewayId);\n        const shippingAddress = state.shippingAddress.getShippingAddress();\n        const consignments = state.consignments.getConsignments();\n        const shippingOption = state.consignments.getShippingOption();\n        const storeConfig = state.config.getStoreConfig();\n        const contextConfig = state.config.getContextConfig();\n        const instrumentMeta = state.instruments.getInstrumentsMeta();\n        const paymentMeta = state.paymentMethods.getPaymentMethodsMeta();\n        const orderMeta = state.order.getOrderMeta();\n        const internalCustomer = customer && billingAddress && mapToInternalCustomer(customer, billingAddress);\n\n        const authToken = instrumentMeta && payment.paymentData && isVaultedInstrument(payment.paymentData) ?\n            `${state.payment.getPaymentToken()}, ${instrumentMeta.vaultAccessToken}` :\n            state.payment.getPaymentToken();\n\n        if (!authToken) {\n            throw new StandardError();\n        }\n\n        return {\n            authToken,\n            paymentMethod,\n            customer: internalCustomer,\n            billingAddress: billingAddress && mapToInternalAddress(billingAddress),\n            shippingAddress: shippingAddress && mapToInternalAddress(shippingAddress, consignments),\n            shippingOption: shippingOption && mapToInternalShippingOption(shippingOption, true),\n            cart: checkout && mapToInternalCart(checkout),\n            order: order && mapToInternalOrder(order, orderMeta),\n            orderMeta,\n            payment: payment.paymentData,\n            quoteMeta: {\n                request: {\n                    ...paymentMeta,\n                    geoCountryCode: contextConfig && contextConfig.geoCountryCode,\n                },\n            },\n            source: 'bigcommerce-checkout-js-sdk',\n            store: pick(storeConfig && storeConfig.storeProfile, [\n                'storeHash',\n                'storeId',\n                'storeLanguage',\n                'storeName',\n            ]),\n        };\n    }\n\n    private _getPaymentMethod(\n        paymentMethodSelector: PaymentMethodSelector,\n        methodId: string,\n        gatewayId?: string\n    ): PaymentMethod | undefined {\n        const paymentMethod = paymentMethodSelector.getPaymentMethod(methodId, gatewayId);\n\n        if (!paymentMethod) {\n            return;\n        }\n\n        if (paymentMethod.method === 'multi-option' && !paymentMethod.gateway) {\n            return { ...paymentMethod, gateway: paymentMethod.id };\n        }\n\n        if (paymentMethod.initializationData && paymentMethod.initializationData.gateway) {\n            return { ...paymentMethod, id: paymentMethod.initializationData.gateway };\n        }\n\n        return paymentMethod;\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport PaymentRequestBody from './payment-request-body';\n\n/**\n * @todo Convert this file into TypeScript properly\n */\nexport default class PaymentRequestSender {\n    /**\n     * @constructor\n     * @param {BigpayClient} client\n     */\n    constructor(\n        private _client: any\n    ) {}\n\n    submitPayment(payload: PaymentRequestBody): Promise<Response> {\n        return new Promise((resolve, reject) => {\n            this._client.submitPayment(payload, (error: any, response: any) => {\n                if (error) {\n                    reject(this._transformResponse(error));\n                } else {\n                    resolve(this._transformResponse(response));\n                }\n            });\n        });\n    }\n\n    initializeOffsitePayment(payload: PaymentRequestBody): Promise<void> {\n        return new Promise(() => {\n            this._client.initializeOffsitePayment(payload);\n        });\n    }\n\n    private _transformResponse(response: any): Response {\n        return {\n            headers: {},\n            body: response.data,\n            status: response.status,\n            statusText: response.statusText,\n        };\n    }\n}\n","import { ReadableDataStore } from '@bigcommerce/data-store';\nimport { some } from 'lodash';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { Registry } from '../common/registry';\nimport { RegistryOptions } from '../common/registry/registry';\n\nimport PaymentMethod from './payment-method';\nimport * as paymentMethodTypes from './payment-method-types';\nimport PaymentStrategyType from './payment-strategy-type';\nimport PaymentStrategy from './strategies/payment-strategy';\n\nexport default class PaymentStrategyRegistry extends Registry<PaymentStrategy, PaymentStrategyType> {\n    constructor(\n        private _store: ReadableDataStore<InternalCheckoutSelectors>,\n        options?: PaymentStrategyRegistryOptions\n    ) {\n        super(options);\n    }\n\n    getByMethod(paymentMethod?: PaymentMethod): PaymentStrategy {\n        if (!paymentMethod) {\n            return this.get();\n        }\n\n        const token = this._getToken(paymentMethod);\n        const cacheToken = paymentMethod.gateway || paymentMethod.id;\n\n        return this.get(token, cacheToken);\n    }\n\n    private _getToken(paymentMethod: PaymentMethod): PaymentStrategyType {\n        const methodId = paymentMethod.gateway || paymentMethod.id;\n\n        if (this._hasFactoryForMethod(methodId)) {\n            return methodId;\n        }\n\n        if (paymentMethod.type === paymentMethodTypes.OFFLINE) {\n            return PaymentStrategyType.OFFLINE;\n        }\n\n        if (this._isLegacyMethod(paymentMethod)) {\n            return PaymentStrategyType.LEGACY;\n        }\n\n        if (paymentMethod.type === paymentMethodTypes.HOSTED) {\n            return PaymentStrategyType.OFFSITE;\n        }\n\n        return PaymentStrategyType.CREDIT_CARD;\n    }\n\n    private _hasFactoryForMethod(\n        methodId: string\n    ): methodId is PaymentStrategyType {\n        return this._hasFactory(methodId);\n    }\n\n    private _isLegacyMethod(paymentMethod: PaymentMethod): boolean {\n        const config = this._store.getState().config.getStoreConfig();\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        const { clientSidePaymentProviders } = config.paymentSettings;\n\n        if (!clientSidePaymentProviders || paymentMethod.gateway === 'adyen') {\n            return false;\n        }\n\n        return !some(clientSidePaymentProviders, id =>\n            paymentMethod.id === id || paymentMethod.gateway === id\n        );\n    }\n}\n\nexport interface PaymentStrategyRegistryOptions extends RegistryOptions {\n    clientSidePaymentProviders?: string[];\n}\n","import { InvalidArgumentError } from '../../common/error/errors';\n\nexport default class PaymentArgumentInvalidError extends InvalidArgumentError {\n    constructor(invalidFields?: string[]) {\n        let message = 'Unable to submit payment for the order because the payload is invalid.';\n\n        if (invalidFields) {\n            message = `${message} Make sure the following fields are provided correctly: ${invalidFields.join(', ')}.`;\n        }\n\n        super(message);\n\n        this.name = 'PaymentArgumentInvalidError';\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class PaymentMethodCancelledError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Payment process was cancelled.');\n\n        this.name = 'PaymentMethodCancelledError';\n        this.type = 'payment_cancelled';\n    }\n}\n","import { LineItemCategory } from '../../../cart/line-item';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { AmountTransformer } from '../../../common/utility';\nimport { Order, OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { OrderIncludes } from '../../../order/order-params';\nimport { Consignment } from '../../../shipping';\nimport { PaymentArgumentInvalidError, PaymentMethodCancelledError, PaymentMethodInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { Affirm, AffirmAddress, AffirmDiscount, AffirmFailResponse, AffirmItem, AffirmRequestData, AffirmSuccessResponse } from './affirm';\nimport AffirmScriptLoader from './affirm-script-loader';\n\nexport default class AffirmPaymentStrategy implements PaymentStrategy {\n    private _affirm?: Affirm;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _affirmScriptLoader: AffirmScriptLoader\n    ) { }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(options.methodId))\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n                if (!paymentMethod || !paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const { config: { testMode }, clientToken: publicKey } = paymentMethod;\n\n                return this._affirmScriptLoader.load(publicKey, testMode);\n            })\n            .then(affirm => {\n                this._affirm = affirm;\n\n                return this._store.getState();\n            });\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const methodId = payload.payment && payload.payment.methodId;\n        const { useStoreCredit } = payload;\n        const { _affirm } = this;\n\n        if (!_affirm) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!methodId) {\n            throw new PaymentArgumentInvalidError(['payment.methodId']);\n        }\n\n        const requestOptions = {\n            ...options,\n            params: {\n                include: [\n                    OrderIncludes.PhysicalItemsCategories,\n                    OrderIncludes.DigitalItemsCategories,\n                ],\n            },\n        };\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder({ useStoreCredit }, requestOptions))\n            .then<AffirmSuccessResponse>(() => {\n                _affirm.checkout(this._getCheckoutInformation());\n\n                return new Promise((resolve, reject) => {\n                    _affirm.checkout.open({\n                        onFail: (failObject: AffirmFailResponse) => {\n                            failObject.reason === 'canceled' ? reject(new PaymentMethodCancelledError()) : reject(new PaymentMethodInvalidError());\n                        },\n                        onSuccess: successObject => { resolve(successObject); },\n                    });\n                    _affirm.ui.error.on('close', () => {\n                        reject(new PaymentMethodCancelledError());\n                    });\n                });\n            })\n            .then(result => {\n                const paymentPayload = {\n                    methodId,\n                    paymentData: { nonce: result.checkout_token },\n                };\n\n                return this._store.dispatch(this._paymentActionCreator.submitPayment(paymentPayload));\n            });\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._affirm) {\n            this._affirm = undefined;\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _getCheckoutInformation(): AffirmRequestData {\n        const state = this._store.getState();\n        const config = state.config.getStoreConfig();\n        const consignments = state.consignments.getConsignments();\n        const order = state.order.getOrder();\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!order) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        const amountTransformer = new AmountTransformer(order.currency.decimalPlaces);\n        const billingAddress = this._getBillingAddress();\n\n        return {\n            merchant: {\n                user_confirmation_url: config.links.checkoutLink,\n                user_cancel_url: config.links.checkoutLink,\n                user_confirmation_url_action: 'POST',\n            },\n            shipping: this._getShippingAddress() || billingAddress,\n            billing: billingAddress,\n            items: this._getItems(amountTransformer, order),\n            metadata: {\n                shipping_type: this._getShippingType(consignments),\n                mode: 'modal',\n                platform_type: 'BigCommerce',\n                platform_version: '',\n                platform_affirm: '',\n            },\n            discounts: this._getDiscounts(amountTransformer, order),\n            order_id: order.orderId ? order.orderId.toString() : '',\n            shipping_amount: amountTransformer.toInteger(order.shippingCostTotal),\n            tax_amount: amountTransformer.toInteger(order.taxTotal),\n            total: amountTransformer.toInteger(order.orderAmount),\n        };\n    }\n\n    private _getShippingType(consignments?: Consignment[]): string {\n        if (!consignments) {\n            return '';\n        }\n\n        const consignment = consignments[0];\n\n        return consignment && consignment.selectedShippingOption ?\n            consignment.selectedShippingOption.type : '';\n    }\n\n    private _getBillingAddress(): AffirmAddress {\n        const state = this._store.getState();\n        const billingAddress = state.billingAddress.getBillingAddress();\n\n        if (!billingAddress) {\n            throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n        }\n\n        const billingInformation = {\n            name: {\n                first: billingAddress.firstName,\n                last: billingAddress.lastName,\n                full: `${billingAddress.firstName} ${billingAddress.lastName}`,\n            },\n            address: {\n                line1: billingAddress.address1,\n                line2: billingAddress.address2,\n                city: billingAddress.city,\n                state: billingAddress.stateOrProvinceCode,\n                zipcode: billingAddress.postalCode,\n                country: billingAddress.countryCode,\n            },\n            phone_number: billingAddress.phone,\n            email: billingAddress.email,\n        };\n\n        return billingInformation;\n    }\n\n    private _getShippingAddress(): AffirmAddress | undefined {\n        const state = this._store.getState();\n        const shippingAddress = state.shippingAddress.getShippingAddress();\n\n        if (!shippingAddress) {\n            return;\n        }\n\n        const shippingInformation = {\n            name: {\n                first: shippingAddress.firstName,\n                last: shippingAddress.lastName,\n                full: `${shippingAddress.firstName} ${shippingAddress.lastName}`,\n            },\n            address: {\n                line1: shippingAddress.address1,\n                line2: shippingAddress.address2,\n                city: shippingAddress.city,\n                state: shippingAddress.stateOrProvinceCode,\n                zipcode: shippingAddress.postalCode,\n                country: shippingAddress.countryCode,\n            },\n            phone_number: shippingAddress.phone,\n        };\n\n        return shippingInformation;\n    }\n\n    private _getItems(amountTransformer: AmountTransformer, order: Order): AffirmItem[] {\n        const items: AffirmItem[] = [];\n\n        for (const item of order.lineItems.physicalItems) {\n            items.push({\n                display_name: item.name,\n                sku: item.sku,\n                unit_price: amountTransformer.toInteger(item.salePrice),\n                qty: item.quantity,\n                item_image_url: item.imageUrl,\n                item_url: item.url,\n                categories: this._getCategories(item.categories),\n            });\n        }\n\n        for (const item of order.lineItems.digitalItems) {\n            items.push({\n                display_name: item.name,\n                sku: item.sku,\n                unit_price: amountTransformer.toInteger(item.salePrice),\n                qty: item.quantity,\n                item_image_url: item.imageUrl,\n                item_url: item.url,\n                categories: this._getCategories(item.categories),\n            });\n        }\n\n        for (const item of order.lineItems.giftCertificates) {\n            items.push({\n                display_name: item.name,\n                sku: '',\n                unit_price: amountTransformer.toInteger(item.amount),\n                qty: 1,\n                item_image_url: '',\n                item_url: '',\n            });\n        }\n\n        if (order.lineItems.customItems) {\n            for (const item of order.lineItems.customItems) {\n                items.push({\n                    display_name: item.name,\n                    sku: item.sku,\n                    unit_price: amountTransformer.toInteger(item.listPrice),\n                    qty: item.quantity,\n                    item_image_url: '',\n                    item_url: '',\n                });\n            }\n        }\n\n        return items;\n    }\n\n    private _getDiscounts(amountTransformer: AmountTransformer, order: Order): AffirmDiscount {\n        const discounts: AffirmDiscount = {};\n\n        for (const line of order.coupons) {\n            if (line.discountedAmount > 0) {\n                discounts[line.code] = {\n                    discount_amount: amountTransformer.toInteger(line.discountedAmount),\n                    discount_display_name: line.displayName,\n                };\n            }\n        }\n\n        if (order.discountAmount > 0) {\n            discounts.DISCOUNTED_AMOUNT = {\n                discount_amount: amountTransformer.toInteger(order.discountAmount),\n                discount_display_name: 'discount',\n            };\n        }\n\n        return discounts;\n    }\n\n    private _getCategories(categories?: LineItemCategory[][]): string[][] {\n        if (!categories) {\n            return[[]];\n        }\n\n        return categories.map(categoryTree => categoryTree.map(category => category.name));\n    }\n}\n","/**\n * Used this approach as Affirm uses snipped for initializing. Please refer to Affirm documentation in: https://docs.affirm.com/Integrate_Affirm/Direct_API#1._Add_Affirm.js\n */\nexport default Function(`\n'use strict';\nreturn function loadAffirmJS(apiKey, scriptURL) {\n    var _affirm_config = {\n        public_api_key:  apiKey,\n        script:          scriptURL\n    };\n    (function(l,g,m,e,a,f,b){var d,c=l[m]||{},h=document.createElement(f),n=document.getElementsByTagName(f)[0],k=function(a,b,c){return function(){a[b]._.push([c,arguments])}};c[e]=k(c,e,\"set\");d=c[e];c[a]={};c[a]._=[];d._=[];c[a][b]=k(c,a,b);a=0;for(b=\"set add save post open empty reset on off trigger ready setProduct\".split(\" \");a<b.length;a++)d[b[a]]=k(c,e,b[a]);a=0;for(b=[\"get\",\"token\",\"url\",\"items\"];a<b.length;a++)d[b[a]]=function(){};h.async=!0;h.src=g[f];n.parentNode.insertBefore(h,n);delete g[f];d(g);l[m]=c})(window,_affirm_config,\"affirm\",\"checkout\",\"ui\",\"script\",\"ready\");\n}`)();\n","import { StandardError } from '../../../common/error/errors';\n\nimport { Affirm, AffirmHostWindow, AffirmScripts } from './affirm';\nimport loadAffirmJS from './affirmJs';\n\nexport default class AffirmScriptLoader {\n    constructor(\n        public _window: AffirmHostWindow = window\n    ) { }\n\n    load(apikey?: string, testMode?: boolean): Promise<Affirm> {\n        const scriptURI = this._getScriptURI(testMode);\n\n        loadAffirmJS(apikey, scriptURI);\n        if (!this._window.affirm) {\n            throw new StandardError();\n        }\n\n        return Promise.resolve(this._window.affirm);\n    }\n\n    private _getScriptURI(testMode: boolean = false): string {\n        const SCRIPTS_DEFAULT: AffirmScripts = {\n            PROD: '//cdn1.affirm.com/js/v2/affirm.js',\n            SANDBOX: '//cdn1-sandbox.affirm.com/js/v2/affirm.js',\n        };\n\n        return testMode ? SCRIPTS_DEFAULT.SANDBOX : SCRIPTS_DEFAULT.PROD;\n    }\n}\n","import { CheckoutStore, CheckoutValidator, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport AfterpayScriptLoader from './afterpay-script-loader';\nimport AfterpaySdk from './afterpay-sdk';\n\nexport default class AfterpayPaymentStrategy implements PaymentStrategy {\n    private _afterpaySdk?: AfterpaySdk;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutValidator: CheckoutValidator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _afterpayScriptLoader: AfterpayScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId, options.gatewayId);\n        const config = state.config.getStoreConfig();\n        const storeCountryName = config ? config.storeProfile.storeCountry : '';\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._afterpayScriptLoader.load(paymentMethod, this._mapCountryToISO2(storeCountryName))\n            .then(afterpaySdk => {\n                this._afterpaySdk = afterpaySdk;\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._afterpaySdk) {\n            this._afterpaySdk = undefined;\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const paymentId = payload.payment && payload.payment.gatewayId;\n\n        if (!paymentId) {\n            throw new PaymentArgumentInvalidError(['payment.gatewayId']);\n        }\n\n        const useStoreCredit = !!payload.useStoreCredit;\n        const state = this._store.getState();\n        const config = state.config.getStoreConfig();\n        const storeCountryName = config ? config.storeProfile.storeCountry : '';\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.initializePayment(paymentId, { useStoreCredit })\n        )\n            .then(state => this._checkoutValidator.validate(state.checkout.getCheckout(), options))\n            .then(() => this._store.dispatch(\n                this._paymentMethodActionCreator.loadPaymentMethod(paymentId, options)\n            ))\n            .then(state => this._redirectToAfterpay(storeCountryName, state.paymentMethods.getPaymentMethod(paymentId)))\n            // Afterpay will handle the rest of the flow so return a promise that doesn't really resolve\n            .then(() => new Promise<never>(() => {}));\n    }\n\n    finalize(options: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._remoteCheckoutActionCreator.loadSettings(options.methodId))\n            .then(state => {\n                const payment = state.payment.getPaymentId();\n                const config = state.config.getContextConfig();\n                const afterpay = state.remoteCheckout.getCheckout('afterpay');\n\n                if (!payment) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!config || !config.payment.token) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!afterpay || !afterpay.settings) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n\n                const orderPayload = {\n                    useStoreCredit: afterpay.settings.useStoreCredit,\n                };\n\n                const paymentPayload = {\n                    methodId: payment.providerId,\n                    paymentData: { nonce: config.payment.token },\n                };\n\n                return this._store.dispatch(this._orderActionCreator.submitOrder(orderPayload, options))\n                    .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment(paymentPayload)));\n            });\n    }\n\n    private _redirectToAfterpay(countryName: string, paymentMethod?: PaymentMethod): void {\n        if (!this._afterpaySdk || !paymentMethod || !paymentMethod.clientToken) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        this._afterpaySdk.initialize({ countryCode: this._mapCountryToISO2(countryName)});\n        this._afterpaySdk.redirect({ token: paymentMethod.clientToken });\n    }\n\n    private _mapCountryToISO2(countryName: string): string {\n        switch (countryName) {\n        case 'Australia':\n            return 'AU';\n\n        case 'New Zealand':\n            return 'NZ';\n\n        case 'United States':\n            return 'US';\n\n        default:\n            return 'AU';\n        }\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport PaymentMethod from '../../payment-method';\n\nimport AfterpaySdk from './afterpay-sdk';\nimport AfterpayWindow from './afterpay-window';\n\ninterface AfterpayScripts {\n    PROD: string;\n    SANDBOX: string;\n}\n\nconst SCRIPTS_DEFAULT: AfterpayScripts = {\n    PROD: '//portal.afterpay.com/afterpay-async.js',\n    SANDBOX: '//portal-sandbox.afterpay.com/afterpay-async.js',\n};\n\nconst SCRIPTS_US: AfterpayScripts = {\n    PROD: '//portal.afterpay.com/afterpay-async.js',\n    SANDBOX: '//portal.us-sandbox.afterpay.com/afterpay-async.js',\n};\n\n/** Class responsible for loading the Afterpay SDK */\nexport default class AfterpayScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    /**\n     * Loads the appropriate Afterpay SDK depending on the payment method data.\n     * @param method the payment method data\n     */\n    load(method: PaymentMethod, countryCode: string): Promise<AfterpaySdk> {\n        const testMode = method.config.testMode || false;\n        const scriptURI = this._getScriptURI(countryCode, testMode);\n\n        return this._scriptLoader.loadScript(scriptURI)\n            .then(() => (window as AfterpayWindow).AfterPay);\n    }\n\n    private _getScriptURI(countryCode: string, testMode: boolean): string {\n        if (countryCode === 'US') {\n            return testMode ? SCRIPTS_US.SANDBOX : SCRIPTS_US.PROD;\n        }\n\n        return testMode ? SCRIPTS_DEFAULT.SANDBOX : SCRIPTS_DEFAULT.PROD;\n    }\n\n}\n","import { isEqual } from 'lodash';\n\nimport { omitPrivate } from '../common/utility';\n\nimport InternalAddress from './internal-address';\n\nexport default function isInternalAddressEqual(addressA: Partial<InternalAddress>, addressB: Partial<InternalAddress>): boolean {\n    return isEqual(normalize(addressA), normalize(addressB));\n}\n\nfunction normalize(address: Partial<InternalAddress>): Partial<InternalAddress> {\n    const ignoredKeys = ['id', 'provinceCode'];\n\n    return (Object.keys(omitPrivate(address) || {}) as Array<keyof InternalAddress>)\n        .reduce(\n            (result, key) => ignoredKeys.indexOf(key) === -1 && address[key] ?\n                { ...result, [key]: address[key] } :\n                result,\n            {}\n        );\n}\n","import isPrivate from './is-private';\nimport omitDeep from './omit-deep';\n\nexport default function omitPrivate(object: any): any {\n    return omitDeep(object, (value: any, key: string) => isPrivate(key));\n}\n","import { BillingAddress } from '../billing';\n\nimport Address from './address';\nimport InternalAddress from './internal-address';\n\nexport default function mapFromInternalAddress(address: InternalAddress): Address | BillingAddress {\n    return {\n        id: address.id,\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        address1: address.addressLine1,\n        address2: address.addressLine2,\n        city: address.city,\n        stateOrProvince: address.province,\n        stateOrProvinceCode: address.provinceCode,\n        postalCode: address.postCode,\n        country: address.country,\n        countryCode: address.countryCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    };\n}\n","import { noop } from 'lodash';\n\nimport { isInternalAddressEqual, mapFromInternalAddress, mapToInternalAddress } from '../../../address';\nimport { BillingAddressActionCreator } from '../../../billing';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, RequestError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { RemoteCheckoutSynchronizationError } from '../../../remote-checkout/errors';\nimport PaymentMethod from '../../payment-method';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport AmazonPayOrderReference from './amazon-pay-order-reference';\nimport AmazonPayPaymentInitializeOptions from './amazon-pay-payment-initialize-options';\nimport AmazonPayScriptLoader from './amazon-pay-script-loader';\nimport AmazonPayWallet, { AmazonPayWalletOptions } from './amazon-pay-wallet';\nimport AmazonPayWindow from './amazon-pay-window';\n\nexport default class AmazonPayPaymentStrategy implements PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _walletOptions?: AmazonPayPaymentInitializeOptions;\n    private _window: AmazonPayWindow;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _scriptLoader: AmazonPayScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { amazon: amazonOptions, methodId } = options;\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n        if (!amazonOptions) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.amazon\" argument is not provided.');\n        }\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._walletOptions = amazonOptions;\n        this._paymentMethod = paymentMethod;\n\n        return new Promise((resolve, reject) => {\n            const onReady = () => {\n                this._createWallet(amazonOptions)\n                    .then(resolve)\n                    .catch(reject);\n            };\n\n            this._scriptLoader.loadWidget(paymentMethod, onReady)\n                .catch(reject);\n        })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._walletOptions = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const referenceId = this._getOrderReferenceId();\n\n        if (!referenceId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!payload.payment) {\n            throw new InvalidArgumentError('Unable to proceed because \"payload.payment.methodId\" argument is not provided.');\n        }\n\n        const { payment: { paymentData, ...paymentPayload }, useStoreCredit = false } = payload;\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.initializePayment(paymentPayload.methodId, { referenceId, useStoreCredit })\n        )\n            .then(() => this._store.dispatch(\n                this._orderActionCreator.submitOrder({\n                    ...payload,\n                    payment: paymentPayload,\n                }, options)\n            ))\n            .catch(error => {\n                if (error instanceof RequestError && error.body.type === 'provider_widget_error' && this._walletOptions) {\n                    return this._createWallet(this._walletOptions)\n                        .then(() => Promise.reject(error));\n                }\n\n                return Promise.reject(error);\n            });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _getMerchantId(): string | undefined {\n        return this._paymentMethod && this._paymentMethod.config.merchantId;\n    }\n\n    private _getOrderReferenceId(): string | undefined {\n        const state = this._store.getState();\n        const amazon = state.remoteCheckout.getCheckout('amazon');\n\n        return amazon ? amazon.referenceId : undefined;\n    }\n\n    private _createWallet(options: AmazonPayPaymentInitializeOptions): Promise<AmazonPayWallet> {\n        return new Promise((resolve, reject) => {\n            const { container, onError = noop, onPaymentSelect = noop, onReady = noop } = options;\n            const referenceId = this._getOrderReferenceId();\n            const merchantId = this._getMerchantId();\n\n            if (!document.getElementById(container)) {\n                return reject(new InvalidArgumentError('Unable to create AmazonPay Wallet widget without valid container ID.'));\n            }\n\n            if (!this._window.OffAmazonPayments) {\n                return reject(new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized));\n            }\n\n            if (!merchantId) {\n                return reject(new MissingDataError(MissingDataErrorType.MissingPaymentMethod));\n            }\n\n            const walletOptions: AmazonPayWalletOptions = {\n                amazonOrderReferenceId: referenceId,\n                design: { designMode: 'responsive' },\n                scope: 'payments:billing_address payments:shipping_address payments:widget profile',\n                sellerId: merchantId,\n                onError: error => {\n                    reject(error);\n                    onError(error);\n                },\n                onPaymentSelect: orderReference => {\n                    this._synchronizeBillingAddress()\n                        .then(() => onPaymentSelect(orderReference))\n                        .catch(onError);\n                },\n                onReady: orderReference => {\n                    resolve();\n                    onReady(orderReference);\n                },\n            };\n\n            if (!walletOptions.amazonOrderReferenceId) {\n                walletOptions.onReady = orderReference => {\n                    this._updateOrderReference(orderReference)\n                        .then(() => {\n                            resolve();\n                            onReady(orderReference);\n                        })\n                        .catch(onError);\n                };\n            }\n\n            const widget = new this._window.OffAmazonPayments.Widgets.Wallet(walletOptions);\n\n            widget.bind(container);\n\n            return widget;\n        });\n    }\n\n    private _synchronizeBillingAddress(): Promise<InternalCheckoutSelectors> {\n        const referenceId = this._getOrderReferenceId();\n        const methodId = this._paymentMethod && this._paymentMethod.id;\n\n        if (!methodId || !referenceId) {\n            throw new RemoteCheckoutSynchronizationError();\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.initializeBilling(methodId, { referenceId })\n        )\n            .then(state => {\n                const amazon = state.remoteCheckout.getCheckout('amazon');\n                const remoteAddress = amazon && amazon.billing && amazon.billing.address;\n                const billingAddress = state.billingAddress.getBillingAddress();\n                const internalBillingAddress = billingAddress && mapToInternalAddress(billingAddress);\n\n                if (remoteAddress === false) {\n                    throw new RemoteCheckoutSynchronizationError();\n                }\n\n                if (!remoteAddress || isInternalAddressEqual(remoteAddress, internalBillingAddress || {})) {\n                    return this._store.getState();\n                }\n\n                return this._store.dispatch(\n                    this._billingAddressActionCreator.updateAddress(mapFromInternalAddress(remoteAddress))\n                );\n            });\n    }\n\n    private _updateOrderReference(orderReference: AmazonPayOrderReference): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.updateCheckout('amazon', {\n                referenceId: orderReference.getAmazonOrderReferenceId(),\n            })\n        );\n    }\n}\n","export interface OverlayOptions {\n    background?: string;\n    id?: string;\n    transitionDuration?: number;\n}\n\nexport interface OverlayShowOptions {\n    onClick?(event: MouseEvent): void;\n}\n\nexport default class Overlay {\n    private _element: HTMLElement;\n    private _unregisterClick?: () => void;\n\n    constructor(options?: OverlayOptions) {\n        this._element = this._createElement(options);\n    }\n\n    show(options?: OverlayShowOptions): void {\n        if (this._element.parentElement) {\n            return;\n        }\n\n        this._registerClick(options);\n\n        document.body.appendChild(this._element);\n\n        // Fade In\n        setTimeout(() => this._element.style.opacity = '1');\n    }\n\n    remove(): void {\n        if (!this._element.parentElement) {\n            return;\n        }\n\n        if (this._unregisterClick) {\n            this._unregisterClick();\n        }\n\n        this._removeAfterTransition();\n\n        setTimeout(() => this._element.style.opacity = '0');\n    }\n\n    private _createElement(options?: OverlayOptions): HTMLElement {\n        const element = document.createElement('div');\n        const {\n            background = 'rgba(0, 0, 0, 0.8)',\n            id = null,\n            transitionDuration = 400,\n        } = options || {};\n\n        element.style.background = background;\n        element.style.display = 'block';\n        element.style.height = '100%';\n        element.style.left = '0px';\n        element.style.opacity = '0';\n        element.style.position = 'fixed';\n        element.style.top = '0px';\n        element.style.transition = `opacity ${transitionDuration}ms ease-out`;\n        element.style.width = '100%';\n        element.style.zIndex = '2147483647';\n\n        if (id) {\n            element.id = id;\n        }\n\n        return element;\n    }\n\n    private _registerClick(options?: OverlayShowOptions): void {\n        if (this._unregisterClick) {\n            this._unregisterClick();\n        }\n\n        if (options && options.onClick) {\n            const { onClick } = options;\n\n            this._element.addEventListener('click', onClick);\n\n            this._unregisterClick = () => {\n                this._element.removeEventListener('click', onClick);\n                this._unregisterClick = undefined;\n            };\n        }\n    }\n\n    private _removeAfterTransition(): void {\n        const handeTransition: (event: Event) => void = event => {\n            // NOTE: `event` is not correctly typed in this version of TS\n            if ((event as TransitionEvent).propertyName !== 'opacity') {\n                return;\n            }\n\n            if (this._element.parentElement) {\n                this._element.parentElement.removeChild(this._element);\n            }\n\n            this._element.removeEventListener('transitionend', handeTransition);\n        };\n\n        this._element.addEventListener('transitionend', handeTransition);\n    }\n}\n","export default class CancellablePromise<T> {\n    promise: Promise<T>;\n    cancel!: (reason?: any) => void;\n\n    constructor(promise: Promise<T>) {\n        const cancellable = new Promise<T>((resolve, reject) => {\n            this.cancel = reject;\n        });\n\n        this.promise = Promise.race([promise, cancellable]);\n    }\n}\n","import { Address } from '../../../address';\nimport { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { Overlay } from '../../../common/overlay';\nimport { CancellablePromise } from '../../../common/utility';\nimport { OrderPaymentRequestBody } from '../../../order';\nimport { PaymentMethodCancelledError } from '../../errors';\nimport { CreditCardInstrument, NonceInstrument } from '../../payment';\n\nimport { BraintreePaypal, BraintreeRequestData } from './braintree';\nimport { BraintreePaymentInitializeOptions, BraintreeThreeDSecureOptions } from './braintree-payment-options';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\n\nexport default class BraintreePaymentProcessor {\n    private _threeDSecureOptions?: BraintreeThreeDSecureOptions;\n\n    constructor(\n        private _braintreeSDKCreator: BraintreeSDKCreator,\n        private _overlay: Overlay\n    ) {}\n\n    initialize(clientToken: string, options?: BraintreePaymentInitializeOptions): void {\n        this._braintreeSDKCreator.initialize(clientToken);\n        this._threeDSecureOptions = options && options.threeDSecure;\n    }\n\n    preloadPaypal(): Promise<BraintreePaypal> {\n        return this._braintreeSDKCreator.getPaypal();\n    }\n\n    tokenizeCard(payment: OrderPaymentRequestBody, billingAddress: Address): Promise<NonceInstrument> {\n        const { paymentData } = payment;\n        const requestData = this._mapToCreditCard(paymentData as CreditCardInstrument, billingAddress);\n\n        return this._braintreeSDKCreator.getClient()\n            .then(client => client.request(requestData))\n            .then(({ creditCards }) => ({\n                nonce: creditCards[0].nonce,\n            }));\n    }\n\n    paypal(amount: number, storeLanguage: string, currency: string, offerCredit: boolean): Promise<NonceInstrument> {\n        return this._braintreeSDKCreator.getPaypal()\n            .then(paypal => {\n                this._overlay.show({\n                    onClick: () => paypal.focusWindow(),\n                });\n\n                return paypal.tokenize({\n                    amount,\n                    currency,\n                    enableShippingAddress: true,\n                    flow: 'checkout',\n                    locale: storeLanguage,\n                    offerCredit,\n                    useraction: 'commit',\n                });\n            })\n            .then(response => {\n                this._overlay.remove();\n\n                return response;\n            })\n            .catch(error => {\n                this._overlay.remove();\n\n                throw error;\n            });\n    }\n\n    verifyCard(payment: OrderPaymentRequestBody, billingAddress: Address, amount: number): Promise<NonceInstrument> {\n        if (!this._threeDSecureOptions) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const { addFrame, removeFrame } = this._threeDSecureOptions;\n\n        return Promise.all([\n            this.tokenizeCard(payment, billingAddress),\n            this._braintreeSDKCreator.get3DS(),\n        ]).then(([paymentData, threeDSecure]) => {\n            const { nonce } = paymentData;\n            const cancelVerifyCard = () => threeDSecure.cancelVerifyCard()\n                .then(response => {\n                    verification.cancel(new PaymentMethodCancelledError());\n\n                    return response;\n                });\n\n            const verification = new CancellablePromise(\n                threeDSecure.verifyCard({\n                    addFrame: (error, iframe) => {\n                        addFrame(error, iframe, cancelVerifyCard);\n                    },\n                    amount,\n                    nonce,\n                    removeFrame,\n                })\n            );\n\n            return verification.promise;\n        });\n    }\n\n    appendSessionId(processedPayment: Promise<NonceInstrument>): Promise<NonceInstrument> {\n        return processedPayment\n            .then(paymentData => Promise.all([paymentData, this._braintreeSDKCreator.getDataCollector()]))\n            .then(([paymentData, { deviceData }]) => ({ ...paymentData, deviceSessionId: deviceData }));\n    }\n\n    deinitialize(): Promise<void> {\n        return this._braintreeSDKCreator.teardown();\n    }\n\n    private _mapToCreditCard(creditCard: CreditCardInstrument, billingAddress: Address): BraintreeRequestData {\n        let streetAddress = billingAddress.address1;\n\n        if (billingAddress.address2) {\n            streetAddress = ` ${billingAddress.address2}`;\n        }\n\n        return {\n            data: {\n                creditCard: {\n                    cardholderName: creditCard.ccName,\n                    number: creditCard.ccNumber,\n                    cvv: creditCard.ccCvv,\n                    expirationDate: `${creditCard.ccExpiry.month}/${creditCard.ccExpiry.year}`,\n                    options: {\n                        validate: false,\n                    },\n                    billingAddress: {\n                        countryName: billingAddress.country,\n                        postalCode: billingAddress.postalCode,\n                        streetAddress,\n                    },\n                },\n            },\n            endpoint: 'payment_methods/credit_cards',\n            method: 'post',\n        };\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, StandardError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport isCreditCardLike from '../../is-credit-card-like';\nimport isVaultedInstrument from '../../is-vaulted-instrument';\nimport Payment, { PaymentInstrument } from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport BraintreePaymentProcessor from './braintree-payment-processor';\n\nexport default class BraintreeCreditCardPaymentStrategy implements PaymentStrategy {\n    private _is3dsEnabled?: boolean;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _braintreePaymentProcessor: BraintreePaymentProcessor\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(options.methodId))\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n                if (!paymentMethod || !paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                this._braintreePaymentProcessor.initialize(paymentMethod.clientToken, options.braintree);\n                this._is3dsEnabled = paymentMethod.config.is3dsEnabled;\n\n                return this._store.getState();\n            })\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        return this._store.dispatch(\n            this._orderActionCreator.submitOrder(order, options)\n        )\n            .then(state =>\n                state.payment.isPaymentDataRequired(order.useStoreCredit) && payment ?\n                    this._preparePaymentData(payment) :\n                    Promise.resolve(payment as Payment)\n            )\n            .then(payment =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment(payment))\n            )\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._braintreePaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    private _handleError(error: Error): never {\n        if (error.name === 'BraintreeError') {\n            throw new StandardError(error.message);\n        }\n\n        throw error;\n    }\n\n    private _isUsingVaulting(paymentData: PaymentInstrument): boolean {\n        if (isCreditCardLike(paymentData)) {\n            return Boolean(paymentData.shouldSaveInstrument);\n        }\n\n        return isVaultedInstrument(paymentData);\n    }\n\n    private _preparePaymentData(payment: OrderPaymentRequestBody): Promise<Payment> {\n        const { paymentData } = payment;\n        const state = this._store.getState();\n\n        if (paymentData && this._isUsingVaulting(paymentData)) {\n            return Promise.resolve(payment as Payment);\n        }\n\n        const order = state.order.getOrder();\n        const billingAddress = state.billingAddress.getBillingAddress();\n\n        if (!order) {\n            throw new MissingDataError(MissingDataErrorType.MissingOrder);\n        }\n\n        if (!billingAddress) {\n            throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n        }\n\n        const tokenizedCard = this._is3dsEnabled ?\n            this._braintreePaymentProcessor.verifyCard(payment, billingAddress, order.orderAmount) :\n            this._braintreePaymentProcessor.tokenizeCard(payment, billingAddress);\n\n        return this._braintreePaymentProcessor.appendSessionId(tokenizedCard)\n            .then(paymentData => ({ ...payment, paymentData }));\n    }\n}\n","import isVaultedInstrument from './is-vaulted-instrument';\nimport { CreditCardInstrument, PaymentInstrument } from './payment';\n\nexport default function isCreditCardLike(instrument: PaymentInstrument): instrument is CreditCardInstrument {\n    const card = instrument as CreditCardInstrument;\n\n    return !isVaultedInstrument(card) &&\n        typeof card.ccName === 'string' &&\n        typeof card.ccNumber === 'string' &&\n        typeof card.ccExpiry === 'object' &&\n        typeof card.ccExpiry.month === 'string' &&\n        typeof card.ccExpiry.year === 'string';\n    }\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, StandardError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError, PaymentMethodCancelledError } from '../../errors';\nimport Payment from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { BraintreeError } from './braintree';\nimport BraintreePaymentProcessor from './braintree-payment-processor';\nimport isBraintreeError from './is-braintree-error';\n\nexport default class BraintreePaypalPaymentStrategy implements PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _braintreePaymentProcessor: BraintreePaymentProcessor,\n        private _credit: boolean = false\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { braintree: braintreeOptions, methodId } = options;\n\n        this._paymentMethod = this._store.getState().paymentMethods.getPaymentMethod(methodId);\n\n        if (this._paymentMethod && this._paymentMethod.nonce) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                this._braintreePaymentProcessor.initialize(this._paymentMethod.clientToken, braintreeOptions);\n\n                return this._braintreePaymentProcessor.preloadPaypal();\n            })\n            .then(() => this._store.getState())\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        return (payment ? this._preparePaymentData(payment, order.useStoreCredit) : Promise.resolve(payment))\n            .then(payment => Promise.all([payment, this._store.dispatch(this._orderActionCreator.submitOrder(order, options))]))\n            .then(([payment]) => this._store.dispatch(this._paymentActionCreator.submitPayment(payment)))\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(options: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._braintreePaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    private _handleError(error: BraintreeError | Error): never {\n        if (!isBraintreeError(error)) {\n            throw error;\n        }\n\n        if (error.code === 'PAYPAL_POPUP_CLOSED') {\n            throw new PaymentMethodCancelledError(error.message);\n        }\n\n        throw new StandardError(error.message);\n    }\n\n    private _preparePaymentData(payment: OrderPaymentRequestBody, useStoreCredit?: boolean): Promise<Payment> {\n        const state = this._store.getState();\n        const grandTotal = state.checkout.getGrandTotal(useStoreCredit);\n        const config = state.config.getStoreConfig();\n\n        if (!grandTotal) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!this._paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const { currency, storeProfile: { storeLanguage } } = config;\n        const { method, nonce } = this._paymentMethod;\n\n        if (nonce) {\n            return Promise.resolve({ ...payment, paymentData: { nonce, method } });\n        }\n\n        const tokenizedCard = this._braintreePaymentProcessor\n            .paypal(grandTotal, storeLanguage, currency.code, this._credit);\n\n        return this._braintreePaymentProcessor.appendSessionId(tokenizedCard)\n            .then(paymentData => ({ ...payment, paymentData: { ...paymentData, method } }));\n    }\n}\n","export enum ChasePayEventType {\n    StartCheckout = 'startCheckout',\n    CompleteCheckout = 'completeCheckout',\n    CancelCheckout = 'cancelCheckout',\n}\n\nexport interface ChasePayEventMap {\n    [ChasePayEventType.StartCheckout](digitalSessionId: string): void;\n    [ChasePayEventType.CompleteCheckout](payload: ChasePaySuccessPayload): void;\n    [ChasePayEventType.CancelCheckout](): void;\n}\n\nexport interface ChasePayHostWindow extends Window {\n    JPMC?: JPMC;\n}\n\nexport interface JPMC {\n    ChasePay: ChasePay;\n}\n\nexport interface ChasePaySuccessPayload {\n    sessionToken: string;\n}\n\nexport interface ChasePayInsertOptions {\n    color?: string;\n    containers?: string[];\n    height?: number;\n    width?: number;\n}\n\nexport interface ChasePayConfigureOptions {\n    language?: string;\n    zindex?: number;\n    sessionWarningTime?: number;\n    sessionTimeoutTime?: number;\n}\n\nexport interface ChasePay {\n    EventType: {\n        START_CHECKOUT: ChasePayEventType.StartCheckout;\n        COMPLETE_CHECKOUT: ChasePayEventType.CompleteCheckout;\n        CANCEL_CHECKOUT: ChasePayEventType.CancelCheckout;\n    };\n    isChasePayUp(): boolean;\n    insertButtons(options: ChasePayInsertOptions): void;\n    insertBrandings(options: ChasePayInsertOptions): void;\n    startCheckout(digitalSessionId?: string): void;\n    showLoadingAnimation(): void;\n    configure(options: ChasePayConfigureOptions): void;\n    on<ChasePayEventType extends keyof ChasePayEventMap>(eventType: ChasePayEventType, callback: ChasePayEventMap[ChasePayEventType]): {};\n}\n\nexport interface ChasePayInitializeOptions {\n    /**\n     * This container is used to host the chasepay branding logo.\n     * It should be an HTML element.\n     */\n    logoContainer: string;\n\n    /**\n     * This walletButton is used to set an event listener, provide an element ID if you want\n     * users to be able to launch the ChasePay wallet modal by clicking on a button.\n     * It should be an HTML element.\n     */\n    walletButton?: string;\n\n    /**\n     * A callback that gets called when the customer selects a payment option.\n     */\n    onPaymentSelect?(): void;\n}\n","import { BraintreeError } from './braintree';\n\nexport default function isBraintreeError(error: BraintreeError | Error): error is BraintreeError {\n    return error.name === 'BraintreeError';\n}\n","import { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, StandardError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategyActionCreator from '../../payment-strategy-action-creator';\nimport PaymentStrategy from '../payment-strategy';\n\nimport BraintreeVisaCheckoutPaymentProcessor from './braintree-visacheckout-payment-processor';\nimport { VisaCheckoutPaymentSuccessPayload } from './visacheckout';\nimport VisaCheckoutScriptLoader from './visacheckout-script-loader';\n\nexport default class BraintreeVisaCheckoutPaymentStrategy implements PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _braintreeVisaCheckoutPaymentProcessor: BraintreeVisaCheckoutPaymentProcessor,\n        private _visaCheckoutScriptLoader: VisaCheckoutScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { braintreevisacheckout: visaCheckoutOptions, methodId } = options;\n\n        if (!visaCheckoutOptions) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.braintreevisacheckout\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                const checkout = state.checkout.getCheckout();\n                const storeConfig = state.config.getStoreConfig();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const {\n                    onError = () => {},\n                    onPaymentSelect = () => {},\n                } = visaCheckoutOptions;\n\n                const initOptions = {\n                    locale: storeConfig.storeProfile.storeLanguage,\n                    collectShipping: false,\n                    subtotal: checkout.subtotal,\n                    currencyCode: storeConfig.currency.code,\n                };\n\n                return Promise.all([\n                    this._visaCheckoutScriptLoader.load(this._paymentMethod.config.testMode),\n                    this._braintreeVisaCheckoutPaymentProcessor.initialize(this._paymentMethod.clientToken, initOptions),\n                ])\n                .then(([visaCheckout, visaInitOptions]) => {\n                    visaCheckout.init(visaInitOptions);\n                    visaCheckout.on('payment.success', (paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) =>\n                        this._paymentInstrumentSelected(paymentSuccessPayload)\n                            .then(() => onPaymentSelect())\n                            .catch(error => onError(error))\n                    );\n                    visaCheckout.on('payment.error', (payment, error) => onError(error));\n                });\n            })\n            .then(() => this._store.getState());\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new InvalidArgumentError('Unable to submit payment because \"payload.payment\" argument is not provided.');\n        }\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData || !this._paymentMethod.initializationData.nonce) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { nonce } = this._paymentMethod.initializationData;\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData: { nonce } }))\n            )\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._braintreeVisaCheckoutPaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    private _paymentInstrumentSelected(paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) {\n        const state = this._store.getState();\n\n        if (!this._paymentMethod) {\n            throw new Error('Payment method not initialized');\n        }\n\n        const { id: methodId } = this._paymentMethod;\n\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            return this._braintreeVisaCheckoutPaymentProcessor.handleSuccess(\n                paymentSuccessPayload,\n                state.shippingAddress.getShippingAddress(),\n                state.billingAddress.getBillingAddress()\n            )\n            .then(() => Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId)),\n            ]));\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _handleError(error: Error): never {\n        if (error.name === 'BraintreeError') {\n            throw new StandardError(error.message);\n        }\n\n        throw error;\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { Subject } from 'rxjs';\nimport { take } from 'rxjs/operators';\n\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentMethodCancelledError } from '../../errors';\nimport Payment from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategyActionCreator from '../../payment-strategy-action-creator';\nimport PaymentStrategy from '../payment-strategy';\nimport { WepayRiskClient } from '../wepay';\n\nimport { ChasePay, ChasePayEventType, ChasePaySuccessPayload } from './chasepay';\nimport ChasePayInitializeOptions from './chasepay-initialize-options';\nimport ChasePayScriptLoader from './chasepay-script-loader';\n\nexport default class ChasePayPaymentStrategy implements PaymentStrategy {\n    private _chasePayClient?: ChasePay;\n    private _methodId!: string;\n    private _walletButton?: HTMLElement;\n    private _walletEvent$: Subject<{ type: ChasePayEventType }>;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _requestSender: RequestSender,\n        private _chasePayScriptLoader: ChasePayScriptLoader,\n        private _wepayRiskClient: WepayRiskClient\n    ) {\n        this._walletEvent$ = new Subject();\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._methodId = options.methodId;\n\n        if (!options.chasepay) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.chasepay\" argument is not provided.');\n        }\n\n        const walletButton = options.chasepay.walletButton && document.getElementById(options.chasepay.walletButton);\n\n        if (walletButton) {\n            this._walletButton = walletButton;\n            this._walletButton.addEventListener('click', this._handleWalletButtonClick);\n        }\n\n        return this._configureWallet(options.chasepay)\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._walletButton) {\n            this._walletButton.removeEventListener('click', this._handleWalletButtonClick);\n        }\n\n        this._walletButton = undefined;\n        this._chasePayClient = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._getPayment()\n            .catch(error => {\n                if (error.subtype === MissingDataErrorType.MissingPayment) {\n                    return this._displayWallet()\n                        .then(() => this._getPayment());\n                }\n\n                throw error;\n            })\n            .then(payment =>\n                this._createOrder(payment, payload.useStoreCredit, options)\n            );\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _configureWallet(options: ChasePayInitializeOptions): Promise<void> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n        const storeConfig = state.config.getStoreConfig();\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (!storeConfig) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        return this._chasePayScriptLoader.load(paymentMethod.config.testMode)\n            .then(({ ChasePay }) => {\n                this._chasePayClient = ChasePay;\n\n                if (options.logoContainer && document.getElementById(options.logoContainer)) {\n                    this._chasePayClient.insertBrandings({\n                        color: 'white',\n                        containers: [options.logoContainer],\n                    });\n                }\n\n                this._chasePayClient.configure({\n                    language: storeConfig.storeProfile.storeLanguage,\n                });\n\n                this._chasePayClient.on(ChasePayEventType.CancelCheckout, () => {\n                    this._walletEvent$.next({ type: ChasePayEventType.CancelCheckout });\n\n                    if (options.onCancel) {\n                        options.onCancel();\n                    }\n                });\n\n                this._chasePayClient.on(ChasePayEventType.CompleteCheckout, (payload: ChasePaySuccessPayload) => {\n                    this._setSessionToken(payload.sessionToken)\n                        .then(() => {\n                            this._walletEvent$.next({ type: ChasePayEventType.CompleteCheckout });\n\n                            if (options.onPaymentSelect) {\n                                options.onPaymentSelect();\n                            }\n                        });\n                });\n            });\n    }\n\n    private _displayWallet(): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(this._methodId))\n                .then(state => {\n                    const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n\n                    if (!this._chasePayClient) {\n                        throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                    }\n\n                    if (!paymentMethod) {\n                        throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                    }\n\n                    this._chasePayClient.showLoadingAnimation();\n                    this._chasePayClient.startCheckout(paymentMethod.initializationData.digitalSessionId);\n                });\n\n            // Wait for payment selection\n            return new Promise((resolve, reject) => {\n                this._walletEvent$\n                    .pipe(take(1))\n                    .subscribe((event: { type: ChasePayEventType }) => {\n                        if (event.type === ChasePayEventType.CancelCheckout) {\n                            reject(new PaymentMethodCancelledError());\n                        } else if (event.type === ChasePayEventType.CompleteCheckout) {\n                            resolve();\n                        }\n                    });\n            });\n        }, { methodId: this._methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _setSessionToken(sessionToken: string): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n        const merchantRequestId = paymentMethod && paymentMethod.initializationData.merchantRequestId;\n\n        return this._requestSender.post('checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\n            },\n            body: {\n                action: 'set_external_checkout',\n                provider: this._methodId,\n                sessionToken,\n                merchantRequestId,\n            },\n        })\n            // Re-hydrate checkout data\n            .then(() => Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(this._methodId)),\n            ]))\n            .then(() => this._store.getState());\n    }\n\n    private _getPayment(): Promise<Payment> {\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(this._methodId))\n            .then(() => {\n                if (this._methodId === 'wepay') {\n                    return this._wepayRiskClient.initialize()\n                        .then(client => client.getRiskToken());\n                }\n\n                return '';\n            })\n            .then(riskToken => {\n                const state = this._store.getState();\n                const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n\n                if (!paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                if (!paymentMethod.initializationData.paymentCryptogram) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPayment);\n                }\n\n                const paymentData = {\n                    method: this._methodId,\n                    cryptogramId: paymentMethod.initializationData.paymentCryptogram,\n                    eci: paymentMethod.initializationData.eci,\n                    transactionId: btoa(paymentMethod.initializationData.reqTokenId),\n                    ccExpiry: {\n                        month: paymentMethod.initializationData.expDate.toString().substr(0, 2),\n                        year: paymentMethod.initializationData.expDate.toString().substr(2, 2),\n                    },\n                    ccNumber: paymentMethod.initializationData.accountNum,\n                    accountMask: paymentMethod.initializationData.accountMask,\n                    extraData: riskToken ? { riskToken } : undefined,\n                };\n\n                return {\n                    methodId: this._methodId,\n                    paymentData,\n                };\n            });\n    }\n\n    private _createOrder(payment: Payment, useStoreCredit?: boolean, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._orderActionCreator.submitOrder({ useStoreCredit }, options))\n            .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment(payment)));\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): void {\n        event.preventDefault();\n\n        this._displayWallet();\n    }\n}\n","import Address from '../../../address/address';\nimport BillingAddress from '../../../billing/billing-address';\nimport { CreditCardInstrument } from '../../payment';\n\nexport const CardinalSignatureValidationErrors = [100004, 1010, 1011, 1020];\n\nexport interface CardinalSDK {\n    configure(params: CardinalConfiguration): void;\n    on(params: CardinalEventType, callback: CardinalEventMap[CardinalEventType]): void;\n    off(params: CardinalEventType): void;\n    setup<K extends keyof CardinalInitializationDataMap>(initializationType: K, initializationData: CardinalInitializationDataMap[K]): void;\n    trigger(event: CardinalTriggerEvents, data?: string): Promise<CardinalBinProcessResponse | void>;\n    continue(paymentBrand: CardinalPaymentBrand, continueObject: CardinalContinue, order: CardinalPartialOrder): void;\n    start(paymentBrand: CardinalPaymentBrand, order: CardinalPartialOrder, jwt?: string): void;\n}\n\nexport interface CardinalWindow extends Window {\n    Cardinal?: CardinalSDK;\n}\n\nexport interface CardinalEventMap {\n    [CardinalEventType.SetupCompleted](setupCompleteData: CardinalSetupCompletedData): void;\n    [CardinalEventType.Validated](data: CardinalValidatedData, jwt?: string): void;\n}\n\nexport type CardinalConfiguration = Partial<{\n    logging: {\n        level: string;\n    };\n    payment: {\n        view: string;\n        framework: string;\n        displayLoading: boolean;\n    };\n}>;\n\nexport interface CardinalSetupCompletedData {\n    sessionId: string;\n    modules: CardinalModuleState[];\n}\n\nexport interface CardinalModuleState {\n    loaded: boolean;\n    module: string;\n}\n\nexport interface CardinalOrderData {\n    billingAddress: BillingAddress;\n    shippingAddress?: Address;\n    currencyCode: string;\n    id: string;\n    amount: number;\n    paymentData: CreditCardInstrument;\n}\n\nexport enum CardinalInitializationType {\n    Init = 'init',\n    Complete = 'complete',\n    Confirm = 'confirm',\n}\n\nexport interface CardinalInitializationDataMap {\n    [CardinalInitializationType.Init]: CardinalInitTypeData;\n    [CardinalInitializationType.Complete]: CardinalCompleteTypeData;\n    [CardinalInitializationType.Confirm]: CardinalConfirmTypeData;\n}\n\nexport interface CardinalInitTypeData {\n    jwt: string;\n}\n\nexport interface CardinalCompleteTypeData {\n    Status: string;\n}\n\nexport interface CardinalConfirmTypeData {\n    jwt: string;\n    cardinalResponseJwt: string;\n}\n\nexport interface CardinalValidatedData {\n    ActionCode: CardinalValidatedAction;\n    ErrorDescription: string;\n    ErrorNumber: number;\n    Validated: boolean;\n    Payment?: CardinalPayment;\n}\n\nexport interface CardinalPayment {\n    ProcessorTransactionId: string;\n    Type: CardinalPaymentType;\n}\n\nexport interface CardinalBinProcessResponse {\n    Status: boolean;\n}\n\nexport interface CardinalContinue {\n    AcsUrl: string;\n    Payload: string;\n}\n\nexport interface CardinalPartialOrder {\n    OrderDetails: CardinalOrderDetails;\n    Consumer?: CardinalConsumer;\n}\n\nexport interface CardinalConsumer {\n    Email1?: string;\n    Email2?: string;\n    ShippingAddress?: CardinalAddress;\n    BillingAddress: CardinalAddress;\n    Account: CardinalAccount;\n}\n\nexport interface CardinalAccount {\n    AccountNumber: number;\n    ExpirationMonth: number;\n    ExpirationYear: number;\n    NameOnAccount: string;\n    CardCode: number;\n}\n\nexport interface CardinalAddress {\n    FullName?: string;\n    FirstName: string;\n    MiddleName?: string;\n    LastName: string;\n    Address1: string;\n    Address2?: string;\n    Address3?: string;\n    City: string;\n    State: string;\n    PostalCode: string;\n    CountryCode: string;\n    Phone1?: string;\n    Phone2?: string;\n}\n\nexport interface CardinalOrderDetails {\n    OrderNumber: string;\n    Amount: number;\n    CurrencyCode: string;\n    OrderDescription?: string;\n    OrderChannel: string;\n    TransactionId?: string;\n}\n\nexport enum CardinalEventType {\n    SetupCompleted = 'payments.setupComplete',\n    Validated = 'payments.validated',\n}\n\nexport enum CardinalValidatedAction {\n    Success = 'SUCCESS',\n    NoAction = 'NOACTION',\n    Failure = 'FAILURE',\n    Error = 'ERROR',\n}\n\nexport enum CardinalPaymentType {\n    CCA = 'CCA',\n    Paypal = 'Paypal',\n    Wallet = 'Wallet',\n    VisaCheckout = 'VisaCheckout',\n    ApplePay = 'ApplePay',\n    DiscoverWallet = 'DiscoverWallet',\n}\n\nexport enum CardinalTriggerEvents {\n    BinProcess = 'bin.process',\n}\n\nexport enum CardinalPaymentBrand {\n    CCA = 'cca',\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { some } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { RequestError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class ConvergePaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _formPoster: FormPoster\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n            )\n            .catch(error => {\n                if (!(error instanceof RequestError) || !some(error.body.errors, { code: 'three_d_secure_required' })) {\n                    return Promise.reject(error);\n                }\n\n                return new Promise(() => {\n                    this._formPoster.postForm(error.body.three_ds_result.acs_url, {\n                        PaReq: error.body.three_ds_result.payer_auth_request,\n                        TermUrl: error.body.three_ds_result.callback_url,\n                        MD: error.body.three_ds_result.merchant_data,\n                    });\n                });\n            });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n\n        if (order && state.payment.getPaymentStatus() === paymentStatusTypes.FINALIZE) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class CreditCardPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n            );\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { some } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    MissingDataError,\n    MissingDataErrorType,\n    RequestError\n} from '../../../common/error/errors';\nimport { OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport Payment, { CreditCardInstrument } from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { CardinalClient, CardinalOrderData } from './index';\n\nexport default class CyberSourcePaymentStrategy implements PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _cardinalClient: CardinalClient\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId } = options;\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod || !this._paymentMethod.config) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                return this._cardinalClient.initialize(this._paymentMethod.config.testMode)\n                    .then(() => this._store.getState());\n            });\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n\n        if (!payment) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        if (!this._paymentMethod || !this._paymentMethod.config) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._paymentMethod.config.is3dsEnabled ? this._placeOrderUsing3DS(order, payment, options, this._paymentMethod.clientToken) :\n            this._placeOrder(order, payment, options);\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _placeOrderUsing3DS(order: OrderRequestBody, payment: OrderPaymentRequestBody, options?: PaymentRequestOptions, clientToken?: string): Promise<InternalCheckoutSelectors> {\n        if (!clientToken) {\n            return Promise.reject(new MissingDataError(MissingDataErrorType.MissingPaymentMethod));\n        }\n\n        if (!payment.paymentData) {\n            return Promise.reject(new MissingDataError(MissingDataErrorType.MissingPayment));\n        }\n\n        const paymentData = payment.paymentData as CreditCardInstrument;\n\n        return this._cardinalClient.configure(clientToken)\n            .then(() => this._cardinalClient.runBindProcess(paymentData.ccNumber))\n            .then(() => {\n                return this._placeOrder(order, payment, options)\n                    .catch(error => {\n                        if (!(error instanceof RequestError) || !some(error.body.errors, { code: 'enrolled_card' })) {\n                            return Promise.reject(error);\n                        }\n\n                        return this._cardinalClient.getThreeDSecureData(error.body.three_ds_result, this._getOrderData(paymentData))\n                            .then(threeDSecure =>\n                                this._store.dispatch(this._paymentActionCreator.submitPayment({\n                                    ...payment,\n                                    paymentData: {\n                                        ...paymentData,\n                                        threeDSecure,\n                                    },\n                                }))\n                            );\n                    });\n            });\n    }\n\n    private _placeOrder(order: OrderRequestBody, payment: OrderPaymentRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!payment.paymentData) {\n            return Promise.reject(new MissingDataError(MissingDataErrorType.MissingPayment));\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment(payment))\n            );\n    }\n\n    private _getOrderData(paymentData: CreditCardInstrument): CardinalOrderData {\n        const billingAddress = this._store.getState().billingAddress.getBillingAddress();\n        const shippingAddress = this._store.getState().shippingAddress.getShippingAddress();\n        const checkout = this._store.getState().checkout.getCheckout();\n        const order = this._store.getState().order.getOrder();\n\n        if (!billingAddress || !billingAddress.email) {\n            throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n        }\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!order) {\n            throw new MissingDataError(MissingDataErrorType.MissingOrder);\n        }\n\n        return {\n            billingAddress,\n            shippingAddress,\n            currencyCode: checkout.cart.currency.code,\n            id: order.orderId.toString(),\n            amount: checkout.cart.cartAmount,\n            paymentData,\n        };\n    }\n}\n","import { includes } from 'lodash';\n\nimport Address from '../../../address/address';\nimport {\n    MissingDataError, MissingDataErrorType, NotInitializedError,\n    NotInitializedErrorType, StandardError\n} from '../../../common/error/errors';\nimport { CreditCardInstrument, ThreeDSecureToken } from '../../payment';\nimport { ThreeDsResult } from '../../payment-response-body';\n\nimport {\n    CardinalAccount,\n    CardinalAddress,\n    CardinalConsumer,\n    CardinalEventType,\n    CardinalInitializationType,\n    CardinalOrderData,\n    CardinalPartialOrder,\n    CardinalPaymentBrand,\n    CardinalScriptLoader,\n    CardinalSignatureValidationErrors,\n    CardinalSDK,\n    CardinalTriggerEvents,\n    CardinalValidatedAction,\n    CardinalValidatedData\n} from './index';\n\nexport default class CardinalClient {\n    private _sdk?: Promise<CardinalSDK>;\n\n    constructor(\n        private _scriptLoader: CardinalScriptLoader\n    ) {}\n\n    initialize(testMode?: boolean): Promise<void> {\n        if (!this._sdk) {\n            this._sdk = this._scriptLoader.load(testMode);\n        }\n\n        return this._sdk.then(() => {});\n    }\n\n    configure(clientToken: string): Promise<void> {\n        return this._getClientSDK()\n            .then(client => new Promise<void>((resolve, reject) => {\n                client.on(CardinalEventType.SetupCompleted, () => {\n                    client.off(CardinalEventType.SetupCompleted);\n                    client.off(CardinalEventType.Validated);\n\n                    resolve();\n                });\n\n                client.on(CardinalEventType.Validated, (data: CardinalValidatedData) => {\n                    client.off(CardinalEventType.SetupCompleted);\n                    client.off(CardinalEventType.Validated);\n\n                    switch (data.ActionCode) {\n                        case CardinalValidatedAction.Error:\n                            if (includes(CardinalSignatureValidationErrors, data.ErrorNumber)) {\n                                reject(new MissingDataError(MissingDataErrorType.MissingPaymentMethod));\n                            }\n                            break;\n                    }\n                });\n\n                client.setup(CardinalInitializationType.Init, {\n                    jwt: clientToken,\n                });\n        }));\n    }\n\n    runBindProcess(ccNumber: string): Promise<void> {\n        return this._getClientSDK()\n            .then(client => client.trigger(CardinalTriggerEvents.BinProcess, ccNumber).catch(() => {}))\n            .then(result => {\n                if (!result || !result.Status) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n            });\n    }\n\n    getThreeDSecureData(threeDSecureData: ThreeDsResult, orderData: CardinalOrderData): Promise<ThreeDSecureToken> {\n        return this._getClientSDK()\n            .then(client => {\n                return new Promise<ThreeDSecureToken>((resolve, reject) => {\n                    client.on(CardinalEventType.Validated, (data: CardinalValidatedData, jwt: string) => {\n                        client.off(CardinalEventType.Validated);\n                        switch (data.ActionCode) {\n                            case CardinalValidatedAction.Success:\n                                resolve({ token: jwt });\n                                break;\n                            case CardinalValidatedAction.NoAction:\n                                if (data.ErrorNumber > 0) {\n                                    reject(new StandardError(data.ErrorDescription));\n                                } else {\n                                    resolve({ token: jwt });\n                                }\n                                break;\n                            case CardinalValidatedAction.Failure:\n                                reject(new StandardError('User failed authentication or an error was encountered while processing the transaction'));\n                                break;\n                            case CardinalValidatedAction.Error:\n                                reject(new StandardError(data.ErrorDescription));\n                        }\n                    });\n\n                    const continueObject = {\n                        AcsUrl: threeDSecureData.acs_url,\n                        Payload: threeDSecureData.merchant_data,\n                    };\n\n                    const partialOrder = this._mapToPartialOrder(orderData, threeDSecureData.payer_auth_request);\n\n                    client.continue(CardinalPaymentBrand.CCA, continueObject, partialOrder);\n                });\n        });\n    }\n\n    private _mapToPartialOrder(orderData: CardinalOrderData, transactionId: string): CardinalPartialOrder {\n        const consumer: CardinalConsumer = {\n            BillingAddress: this._mapToCardinalAddress(orderData.billingAddress),\n            Account: this._mapToCardinalAccount(orderData.paymentData),\n        };\n\n        if (orderData.billingAddress.email) {\n            consumer.Email1 = orderData.billingAddress.email;\n        }\n\n        if (orderData.shippingAddress) {\n            consumer.ShippingAddress = this._mapToCardinalAddress(orderData.shippingAddress);\n        }\n\n        return  {\n            Consumer: consumer,\n            OrderDetails: {\n                OrderNumber: orderData.id,\n                Amount: orderData.amount,\n                CurrencyCode: orderData.currencyCode,\n                OrderChannel: 'S',\n                TransactionId: transactionId,\n            },\n        };\n    }\n\n    private _mapToCardinalAccount(paymentData: CreditCardInstrument): CardinalAccount {\n        return {\n            AccountNumber: Number(paymentData.ccNumber),\n            ExpirationMonth: Number(paymentData.ccExpiry.month),\n            ExpirationYear: Number(paymentData.ccExpiry.year),\n            NameOnAccount: paymentData.ccName,\n            CardCode: Number(paymentData.ccCvv),\n        };\n    }\n\n    private _mapToCardinalAddress(address: Address): CardinalAddress {\n        const cardinalAddress: CardinalAddress = {\n            FirstName: address.firstName,\n            LastName: address.lastName,\n            Address1: address.address1,\n            City: address.city,\n            State: address.stateOrProvince,\n            PostalCode: address.postalCode,\n            CountryCode: address.countryCode,\n        };\n\n        if (address.address2) {\n            cardinalAddress.Address2 = address.address2;\n        }\n\n        if (address.phone) {\n            cardinalAddress.Phone1 = address.phone;\n        }\n\n        return cardinalAddress;\n    }\n\n    private _getClientSDK(): Promise<CardinalSDK> {\n        if (!this._sdk) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._sdk;\n    }\n}\n","export default interface SquarePaymentForm {\n    build(): void;\n    requestCardNonce(): void;\n    setPostalCode(postalCode: string): void;\n}\n\nexport type SquarePaymentFormConstructor = new(options: SquareFormOptions) => SquarePaymentForm;\n\nexport interface SquareFormOptions {\n    applicationId: string;\n    env: string;\n    locationId: string;\n    inputClass?: string;\n    inputStyles?: string[];\n    callbacks?: SquareFormCallbacks;\n    cardNumber: SquareFormElement;\n    cvv: SquareFormElement;\n    expirationDate: SquareFormElement;\n    postalCode: SquareFormElement;\n    masterpass: SquareFormElement;\n}\nexport interface LineItem {\n    label: string;\n    amount: string;\n    pending: boolean;\n}\n\nexport interface SquarePaymentRequest {\n    requestShippingAddress: boolean;\n    requestBillingInfo: boolean;\n    shippingContact?: Contact;\n    countryCode: string;\n    currencyCode: string;\n    lineItems?: LineItem[];\n    total: LineItem;\n}\n\nexport interface NonceGenerationError {\n    type: string;\n    message: string;\n    field: string;\n}\n\nexport interface CardData {\n    card_brand: CardBrand;\n    last_4: number;\n    exp_month: number;\n    exp_year: number;\n    billing_postal_code: string;\n    digital_wallet_type: DigitalWalletType;\n}\n\nexport interface Contact {\n    familyName: string;\n    givenName: string;\n    email: string;\n    country: string;\n    countryName: string;\n    region: string;\n    city: string;\n    addressLines: string[];\n    postalCode: string;\n    phone: string;\n}\n\nexport enum CardBrand {\n    americanExpress = 'AMERICAN_EXPRESS',\n    discover = 'DISCOVER',\n    discoverDiners = 'DISCOVER_DINERS',\n    JCB = 'JCB',\n    masterCard = 'MASTERCARD',\n    unionPay = 'CHINA_UNIONPAY',\n    unknown = 'OTHER_BRAND',\n    visa = 'VISA',\n    squareGift = 'SQUARE_GIFT_CARD',\n}\n\nexport enum DigitalWalletType {\n    applePay = 'APPLEPAY',\n    masterpass = 'MASTERPASS',\n    none = 'NONE',\n}\n\n/**\n * Configures any form element provided by Square payment.\n */\nexport interface SquareFormElement {\n    /**\n     * The ID of the container which the form element should insert into.\n     */\n    elementId: string;\n\n    /**\n     * The placeholder text to use for the form element, if provided.\n     */\n    placeholder?: string;\n}\n\nexport interface SquareFormCallbacks {\n    paymentFormLoaded?(form: SquarePaymentForm): void;\n    unsupportedBrowserDetected?(): void;\n    cardNonceResponseReceived?(\n        errors?: NonceGenerationError[],\n        nonce?: string,\n        cardData?: CardData,\n        billingContact?: Contact,\n        shippingContact?: Contact): void;\n    methodsSupported?(methods: { [key: string]: boolean }): void;\n    createPaymentRequest?(): void;\n}\n\nexport type SquareFormFactory = (options: SquareFormOptions) => SquarePaymentForm;\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { CardinalSDK, CardinalWindow } from './cardinal';\n\nconst SDK_TEST_URL = 'https://songbirdstag.cardinalcommerce.com/edge/v1/songbird.js';\nconst SDK_PROD_URL = 'https://songbird.cardinalcommerce.com/edge/v1/songbird.js';\n\nexport default class CardinalScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: CardinalWindow = window\n    ) {}\n\n    load(testMode?: boolean): Promise<CardinalSDK> {\n        return this._scriptLoader\n            .loadScript(testMode ? SDK_TEST_URL : SDK_PROD_URL)\n            .then(() => {\n                if (!this._window.Cardinal) {\n                    throw new StandardError();\n                }\n\n                return this._window.Cardinal;\n            });\n    }\n}\n","\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n} from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategyActionCreator from '../../payment-strategy-action-creator';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { GooglePaymentData, PaymentMethodData } from './googlepay';\nimport GooglePayPaymentInitializeOptions from './googlepay-initialize-options';\nimport GooglePayPaymentProcessor from './googlepay-payment-processor';\n\nexport default class GooglePayPaymentStrategy implements PaymentStrategy {\n    private _googlePayOptions?: GooglePayPaymentInitializeOptions;\n    private _methodId?: string;\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _googlePayPaymentProcessor: GooglePayPaymentProcessor\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._methodId = options.methodId;\n\n        return this._googlePayPaymentProcessor.initialize(this._methodId)\n            .then(() => {\n                this._googlePayOptions = this._getGooglePayOptions(options);\n\n                if (!this._googlePayOptions) {\n                    throw new InvalidArgumentError('Unable to initialize payment because \"options.googlepay\" argument is not provided.');\n                }\n\n                const walletButton = this._googlePayOptions.walletButton && document.getElementById(this._googlePayOptions.walletButton);\n\n                if (walletButton) {\n                    this._walletButton = walletButton;\n                    this._walletButton.addEventListener('click', this._handleWalletButtonClick);\n                }\n\n                return this._store.getState();\n            });\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._walletButton) {\n            this._walletButton.removeEventListener('click', this._handleWalletButtonClick);\n        }\n\n        this._walletButton = undefined;\n\n        return this._googlePayPaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!this._googlePayOptions) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.googlepay\" argument is not provided.');\n        }\n\n        const {\n            onError = () => {},\n            onPaymentSelect = () => {},\n        } = this._googlePayOptions;\n\n        return Promise.resolve(this._getPayment())\n            .then(payment => {\n                if (!payment.paymentData.nonce || !payment.paymentData.cardInformation) {\n                    // TODO: Find a way to share the code with _handleWalletButtonClick method\n                    return this._googlePayPaymentProcessor.displayWallet()\n                        .then(paymentData => this._paymentInstrumentSelected(paymentData))\n                        .then(() => onPaymentSelect())\n                        .then(() => this._getPayment())\n                        .catch(error => {\n                            if (error.statusCode !== 'CANCELED') {\n                                onError(error);\n                            }\n                        });\n                }\n\n                return payment;\n            })\n            .then(payment =>\n                this._store.dispatch(this._orderActionCreator.submitOrder({ useStoreCredit: payload.useStoreCredit }, options))\n                    .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment(this._getPayment())))\n            );\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _paymentInstrumentSelected(paymentData: GooglePaymentData) {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const methodId = this._methodId;\n\n        // TODO: Revisit how we deal with GooglePaymentData after receiving it from Google\n        return this._googlePayPaymentProcessor.handleSuccess(paymentData)\n            .then(() => Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId)),\n            ]));\n    }\n\n    private _getGooglePayOptions(options: PaymentInitializeOptions): GooglePayPaymentInitializeOptions {\n        if (options.methodId === 'googlepaybraintree' && options.googlepaybraintree) {\n            return options.googlepaybraintree;\n        }\n\n        if (options.methodId === 'googlepaystripe' && options.googlepaystripe) {\n            return options.googlepaystripe;\n        }\n\n        throw new InvalidArgumentError();\n    }\n\n    private _getPayment(): PaymentMethodData {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (!paymentMethod.initializationData.nonce) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        const paymentData = {\n            method: this._methodId,\n            nonce: paymentMethod.initializationData.nonce,\n            cardInformation: paymentMethod.initializationData.card_information,\n        };\n\n        return {\n            methodId: this._methodId,\n            paymentData,\n        };\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): Promise<InternalCheckoutSelectors> {\n        event.preventDefault();\n\n        if (!this._methodId || !this._googlePayOptions) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const methodId = this._methodId;\n\n        const {\n            onError = () => {},\n            onPaymentSelect = () => {},\n        } = this._googlePayOptions;\n\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            return this._googlePayPaymentProcessor.displayWallet()\n                .then(paymentData => this._paymentInstrumentSelected(paymentData))\n                .then(() => onPaymentSelect())\n                .catch(error => {\n                    if (error.statusCode !== 'CANCELED') {\n                        onError(error);\n                    }\n                });\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n}\n","import { includes } from 'lodash';\n\nimport { Address } from '../../../address';\nimport BillingAddress from '../../../billing/billing-address';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType\n} from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { PaymentMethodCancelledError } from '../../errors';\nimport PaymentMethodInvalidError from '../../errors/payment-method-invalid-error';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport KlarnaCredit, { KlarnaAddress, KlarnaLoadResponse, KlarnaUpdateSessionParams } from './klarna-credit';\nimport KlarnaScriptLoader from './klarna-script-loader';\n\nexport default class KlarnaPaymentStrategy implements PaymentStrategy {\n    private _klarnaCredit?: KlarnaCredit;\n    private _unsubscribe?: (() => void);\n    private _supportedEUCountries = ['AT', 'DE', 'DK', 'FI', 'GB', 'NL', 'NO', 'SE', 'CH'];\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _klarnaScriptLoader: KlarnaScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return this._klarnaScriptLoader.load()\n            .then(klarnaCredit => { this._klarnaCredit = klarnaCredit; })\n            .then(() => {\n                this._unsubscribe = this._store.subscribe(\n                    state => {\n                        if (state.paymentStrategies.isInitialized(options.methodId)) {\n                            this._loadWidget(options);\n                        }\n                    },\n                    state => {\n                        const checkout = state.checkout.getCheckout();\n\n                        return checkout && checkout.grandTotal;\n                    }\n                );\n\n                return this._loadWidget(options);\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._unsubscribe) {\n            this._unsubscribe();\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!payload.payment) {\n            throw new InvalidArgumentError('Unable to proceed because \"payload.payment\" argument is not provided.');\n        }\n\n        const { payment: { paymentData, ...paymentPayload } } = payload;\n\n        return this._authorize()\n            .then(({ authorization_token: authorizationToken }) => this._store.dispatch(\n                this._remoteCheckoutActionCreator.initializePayment(paymentPayload.methodId, { authorizationToken })\n            ))\n            .then(() => this._store.dispatch(\n                this._orderActionCreator.submitOrder({\n                    ...payload,\n                    payment: paymentPayload,\n                    // Note: API currently doesn't support using Store Credit with Klarna.\n                    // To prevent deducting customer's store credit, set it as false.\n                    useStoreCredit: false,\n                }, options)\n            ));\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _loadWidget(options: PaymentInitializeOptions): Promise<KlarnaLoadResponse> {\n        if (!options.klarna) {\n            throw new InvalidArgumentError('Unable to load widget because \"options.klarna\" argument is not provided.');\n        }\n\n        const { methodId, klarna: { container, onLoad } } = options;\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => new Promise<KlarnaLoadResponse>((resolve, reject) => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                if (!this._klarnaCredit || !paymentMethod.clientToken) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n\n                this._klarnaCredit.init({ client_token: paymentMethod.clientToken });\n\n                this._klarnaCredit.load({ container }, response => {\n                    if (onLoad) {\n                        onLoad(response);\n                    }\n                    resolve(response);\n                });\n            }));\n    }\n\n    private _getUpdateSessionData(billingAddress: BillingAddress, shippingAddress?: Address): KlarnaUpdateSessionParams {\n        if (!includes(this._supportedEUCountries, billingAddress.countryCode)) {\n            return {};\n        }\n\n        const data: KlarnaUpdateSessionParams = {\n            billing_address: this._mapToKlarnaAddress(billingAddress, billingAddress.email),\n        };\n\n        if (shippingAddress) {\n            data.shipping_address = this._mapToKlarnaAddress(shippingAddress, billingAddress.email);\n        }\n\n        return data;\n    }\n\n    private _mapToKlarnaAddress(address: Address, email?: string): KlarnaAddress {\n        const klarnaAddress: KlarnaAddress = {\n            street_address: address.address1,\n            city: address.city,\n            country: address.countryCode,\n            given_name: address.firstName,\n            family_name: address.lastName,\n            postal_code: address.postalCode,\n            region: address.stateOrProvince,\n            email,\n        };\n\n        if (address.address2) {\n            klarnaAddress.street_address2 = address.address2;\n        }\n\n        if (address.phone) {\n            klarnaAddress.phone = address.phone;\n        }\n\n        return klarnaAddress;\n    }\n\n    private _authorize(): Promise<any> {\n        return new Promise((resolve, reject) => {\n            const billingAddress = this._store.getState().billingAddress.getBillingAddress();\n            const shippingAddress = this._store.getState().shippingAddress.getShippingAddress();\n\n            if (!billingAddress) {\n                throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n            }\n\n            if (!this._klarnaCredit) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            const updateSessionData = this._getUpdateSessionData(billingAddress, shippingAddress);\n\n            this._klarnaCredit.authorize(updateSessionData, res => {\n                if (res.approved) {\n                    return resolve(res);\n                }\n\n                if (res.show_form) {\n                    return reject(new PaymentMethodCancelledError());\n                }\n\n                reject(new PaymentMethodInvalidError());\n            });\n        });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport KlarnaCredit from './klarna-credit';\nimport KlarnaWindow from './klarna-window';\n\nconst SDK_URL = '//credit.klarnacdn.net/lib/v1/api.js';\n\nexport default class KlarnaScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    load(): Promise<KlarnaCredit> {\n        return this._scriptLoader.loadScript(SDK_URL)\n            .then(() => (window as KlarnaWindow).Klarna.Credit);\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class LegacyPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options));\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport getCallbackUrl from './get-callback-url';\nimport { Masterpass, MasterpassCheckoutOptions } from './masterpass';\nimport MasterpassScriptLoader from './masterpass-script-loader';\n\nexport default class MasterpassPaymentStrategy implements PaymentStrategy {\n    private _masterpassClient?: Masterpass;\n    private _paymentMethod?: PaymentMethod;\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _masterpassScriptLoader: MasterpassScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId } = options;\n\n        this._paymentMethod = this._store.getState().paymentMethods.getPaymentMethod(methodId);\n\n        if (!this._paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._masterpassScriptLoader.load(this._paymentMethod.config.testMode)\n            .then(masterpass => {\n                this._masterpassClient = masterpass;\n\n                if (!options.masterpass) {\n                    throw new InvalidArgumentError('Unable to initialize payment because \"options.masterpass\" argument is not provided.');\n                }\n\n                const walletButton  = options.masterpass.walletButton && document.getElementById(options.masterpass.walletButton);\n\n                if (walletButton) {\n                    this._walletButton = walletButton;\n                    this._walletButton.addEventListener('click', this._handleWalletButtonClick);\n                }\n\n                return this._store.getState();\n            });\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        if (this._walletButton) {\n            this._walletButton.removeEventListener('click', this._handleWalletButtonClick);\n        }\n\n        this._walletButton = undefined;\n        this._masterpassClient = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment } = payload;\n        const order = { useStoreCredit: payload.useStoreCredit };\n\n        if (!payment) {\n            throw new InvalidArgumentError('Unable to submit payment because \"payload.payment\" argument is not provided.');\n        }\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData || !this._paymentMethod.initializationData.gateway) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        // TODO: Refactor the API endpoint to return nonce in the right place.\n        const paymentData = this._paymentMethod.initializationData.paymentData;\n\n        // TODO: Redirect to Masterpass if nonce has not been generated yet. And then finalise the order when the shopper is redirected back to the checkout page.\n        if (!paymentData) {\n            throw new InvalidArgumentError('Unable to proceed because \"paymentMethod.initializationData.paymentData\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData })));\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _createMasterpassPayload(): MasterpassCheckoutOptions {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const storeConfig = state.config.getStoreConfig();\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!storeConfig) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return {\n            checkoutId: this._paymentMethod.initializationData.checkoutId,\n            allowedCardTypes: this._paymentMethod.initializationData.allowedCardTypes,\n            amount: checkout.subtotal.toFixed(2),\n            currency: storeConfig.currency.code,\n            cartId: checkout.cart.id,\n            suppressShippingAddress: false,\n            callbackUrl: getCallbackUrl('checkout'),\n        };\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event) {\n        event.preventDefault();\n\n        if (!this._masterpassClient) {\n            return;\n        }\n\n        const payload = this._createMasterpassPayload();\n        this._masterpassClient.checkout(payload);\n    }\n}\n","import { omit } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class NoPaymentDataRequiredPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._orderActionCreator.submitOrder(omit(orderRequest, 'payment'), options)\n        );\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class OfflinePaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const action = this._orderActionCreator.submitOrder({\n            ...payload,\n            payment: payload.payment ? { methodId: payload.payment.methodId } : undefined,\n        }, options);\n\n        return this._store.dispatch(action);\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class OffsitePaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const orderPayload = this._shouldSubmitFullPayload(payment) ? payload : order;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(orderPayload, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.initializeOffsitePayment(payment.methodId, payment.gatewayId))\n            );\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n        const status = state.payment.getPaymentStatus();\n\n        if (order && (status === paymentStatusTypes.ACKNOWLEDGE || status === paymentStatusTypes.FINALIZE)) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _shouldSubmitFullPayload(payment?: OrderPaymentRequestBody): boolean {\n        // FIXME: A temporary workaround to support offsite payment methods\n        // where their return URL needs to be provided by the core app.\n        if (!payment) {\n            return false;\n        }\n\n        return payment.gatewayId === 'adyen' || payment.methodId === 'ccavenuemars';\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class PaypalProPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._isPaymentAcknowledged()) {\n            return this._store.dispatch(\n                this._orderActionCreator.submitOrder({\n                    ...payload,\n                    payment: payload.payment ? { methodId: payload.payment.methodId } : undefined,\n                }, options)\n            );\n        }\n\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n            );\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _isPaymentAcknowledged(): boolean {\n        const state = this._store.getState();\n\n        return state.payment.getPaymentStatus() === paymentStatusTypes.ACKNOWLEDGE;\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentMethod from '../../payment-method';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\nimport PaymentStrategy from '../payment-strategy';\n\nimport PaypalScriptLoader from './paypal-script-loader';\nimport { PaypalHostWindow, PaypalSDK } from './paypal-sdk';\n\nexport default class PaypalExpressPaymentStrategy implements PaymentStrategy {\n    private _paypalSdk?: PaypalSDK;\n    private _paymentMethod?: PaymentMethod;\n    private _useRedirectFlow: boolean = false;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _scriptLoader: PaypalScriptLoader,\n        private _window: PaypalHostWindow = window\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n\n        this._paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n        this._useRedirectFlow = (options.paypalexpress && options.paypalexpress.useRedirectFlow) === true;\n\n        if (!this._isInContextEnabled()) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._scriptLoader.loadPaypal()\n            .then(paypal => {\n                this._paypalSdk = paypal;\n\n                if (!this._paymentMethod || !this._paymentMethod.config.merchantId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                this._paypalSdk.checkout.setup(this._paymentMethod.config.merchantId, {\n                    button: 'paypal-button',\n                    environment: this._paymentMethod.config.testMode ? 'sandbox' : 'production',\n                });\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._isInContextEnabled() && this._paypalSdk) {\n            this._paypalSdk.checkout.closeFlow();\n            this._paypalSdk = undefined;\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const paypal = this._paypalSdk;\n\n        if (this._isAcknowledgedOrFinalized()) {\n            return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options));\n        }\n\n        if (!this._isInContextEnabled() || this._useRedirectFlow) {\n            return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options))\n                .then(state => {\n                    const redirectUrl = state.payment.getPaymentRedirectUrl();\n\n                    if (redirectUrl) {\n                        this._window.top.location.href = redirectUrl;\n                    }\n\n                    // We need to hold execution so the consumer does not redirect us somewhere else\n                    return new Promise<never>(() => {});\n                });\n        }\n\n        if (!paypal) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        paypal.checkout.initXO();\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options))\n            .then(state => {\n                const redirectUrl = state.payment.getPaymentRedirectUrl();\n\n                if (redirectUrl) {\n                    paypal.checkout.startFlow(redirectUrl);\n                }\n\n                // We need to hold execution so the consumer does not redirect us somewhere else\n                return new Promise<never>(() => {});\n            })\n            .catch(error => {\n                paypal.checkout.closeFlow();\n\n                return Promise.reject(error);\n            });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n\n        if (order && this._isAcknowledgedOrFinalized()) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _isAcknowledgedOrFinalized(): boolean {\n        const state = this._store.getState();\n\n        return state.payment.getPaymentStatus() === paymentStatusTypes.ACKNOWLEDGE\n            || state.payment.getPaymentStatus() === paymentStatusTypes.FINALIZE;\n    }\n\n    private _isInContextEnabled(): boolean {\n        return !!(this._paymentMethod && this._paymentMethod.config.merchantId);\n    }\n}\n","import { some } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { RequestError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class SagePayPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _formPoster: any\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n            )\n            .catch(error => {\n                if (!(error instanceof RequestError) || !some(error.body.errors, { code: 'three_d_secure_required' })) {\n                    return Promise.reject(error);\n                }\n\n                return new Promise(() => {\n                    this._formPoster.postForm(error.body.three_ds_result.acs_url, {\n                        PaReq: error.body.three_ds_result.payer_auth_request,\n                        TermUrl: error.body.three_ds_result.callback_url,\n                        MD: error.body.three_ds_result.merchant_data,\n                    });\n                });\n            });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n\n        if (order && state.payment.getPaymentStatus() === paymentStatusTypes.FINALIZE) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import StandardError from './standard-error';\n\nexport default class UnsupportedBrowserError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Unsupported browser error');\n\n        this.name = 'UnsupportedBrowserError';\n        this.type = 'unsupported_browser';\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\nimport { omit } from 'lodash';\nimport { noop } from 'rxjs';\n\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    StandardError,\n    TimeoutError,\n    UnsupportedBrowserError,\n} from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { NonceInstrument } from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategyActionCreator from '../../payment-strategy-action-creator';\nimport PaymentStrategy from '../payment-strategy';\n\nimport SquarePaymentForm, {\n    CardData,\n    Contact,\n    DigitalWalletType,\n    NonceGenerationError,\n    SquareFormElement,\n    SquareFormOptions,\n    SquarePaymentRequest\n} from './square-form';\nimport SquarePaymentInitializeOptions from './square-payment-initialize-options';\nimport SquareScriptLoader from './square-script-loader';\n\nexport default class SquarePaymentStrategy implements PaymentStrategy {\n    private _deferredRequestNonce?: DeferredPromise;\n    private _paymentForm?: SquarePaymentForm;\n    private _paymentMethod?: PaymentMethod;\n    private _squareOptions?: SquarePaymentInitializeOptions;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _requestSender: RequestSender,\n        private _scriptLoader: SquareScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId } = options;\n\n        this._syncPaymentMethod(methodId);\n\n        return this._scriptLoader.load()\n            .then(createSquareForm =>\n                new Promise((resolve, reject) => {\n                    this._paymentForm = createSquareForm(\n                        this._getFormOptions(options, { resolve, reject })\n                    );\n                    this._paymentForm.build();\n                }))\n            .then(() => this._store.getState());\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment } = orderRequest;\n\n        if (!payment || !payment.methodId) {\n            throw new InvalidArgumentError('Unable to submit payment because \"payload.payment.methodId\" argument is not provided.');\n        }\n\n        this._syncPaymentMethod(payment.methodId);\n\n        return this._getNonceInstrument(payment.methodId)\n            .then(paymentData =>\n                this._store.dispatch(this._orderActionCreator.submitOrder(omit(orderRequest, 'payment'), options))\n                .then(() =>\n                    this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n                ));\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _syncPaymentMethod(methodId: string): void {\n        const state = this._store.getState();\n        this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n    }\n\n    private _getCountryCode(countryName: string) {\n        switch (countryName.toUpperCase()) {\n            case 'NEW ZELAND':\n                return 'NZ';\n            case 'AUSTRALIA':\n                return 'AU';\n            default:\n                return 'US';\n        }\n    }\n\n    private _getNonceInstrument(methodId: string): Promise<NonceInstrument> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n        if (paymentMethod) {\n            const { initializationData } = paymentMethod;\n            if (initializationData && initializationData.paymentData.nonce) {\n                return Promise.resolve({ nonce: paymentMethod.initializationData.paymentData.nonce });\n            }\n        }\n\n        return new Promise<NonceInstrument>((resolve, reject) => {\n            if (!this._paymentForm) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            if (this._deferredRequestNonce) {\n                this._deferredRequestNonce.reject(new TimeoutError());\n            }\n\n            this._deferredRequestNonce = { resolve, reject };\n            this._paymentForm.requestCardNonce();\n        });\n    }\n\n    private _getFormOptions(options: PaymentInitializeOptions, deferred: DeferredPromise): SquareFormOptions {\n        const { square: squareOptions } = options;\n\n        if (!squareOptions || !this._paymentMethod) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.square\" argument is not provided.');\n        }\n\n        this._squareOptions = squareOptions;\n\n        return {\n            ...this._squareOptions,\n            ...this._paymentMethod.initializationData,\n            callbacks: {\n                cardNonceResponseReceived: (errors, nonce, cardData, billingContact, shippingContact) => {\n                    if (cardData && cardData.digital_wallet_type !== DigitalWalletType.none) {\n                        this._handleWalletNonceResponse(errors, nonce, cardData, billingContact, shippingContact);\n                    } else {\n                        this._handleCardNonceResponse(errors, nonce);\n                    }\n                },\n                createPaymentRequest: () => this._paymentRequestPayload(),\n                methodsSupported: methods => {\n                    const { masterpass } = squareOptions;\n\n                    if (masterpass) {\n                        this._showPaymentMethods(methods, masterpass);\n                    }\n                },\n                paymentFormLoaded: () => {\n                    deferred.resolve();\n                    this._setPostalCode();\n                },\n                unsupportedBrowserDetected: () => deferred.reject(new UnsupportedBrowserError()),\n            },\n        };\n    }\n\n    private _handleWalletNonceResponse(\n        errors?: NonceGenerationError[],\n        nonce?: string,\n        cardData?: CardData,\n        billingContact?: Contact,\n        shippingContact?: Contact\n    ): void {\n        const onError = this._squareOptions && this._squareOptions.onError || noop;\n        const onPaymentSelect = this._squareOptions && this._squareOptions.onPaymentSelect || noop;\n\n        if (errors) {\n            onError(errors);\n        } else if (nonce && this._paymentMethod) {\n            this._paymentInstrumentSelected(\n                this._paymentMethod.id,\n                nonce,\n                cardData,\n                billingContact,\n                shippingContact\n            )\n                .then(onPaymentSelect)\n                .catch(onError);\n        }\n    }\n\n    private _handleCardNonceResponse(errors?: NonceGenerationError[], nonce?: string): void {\n        if (!this._deferredRequestNonce) {\n            throw new StandardError();\n        }\n\n        if (nonce && !errors) {\n            this._deferredRequestNonce.resolve({ nonce });\n\n            return;\n        }\n\n        const onError = this._squareOptions && this._squareOptions.onError || noop;\n\n        onError(errors);\n\n        this._deferredRequestNonce.reject(errors);\n    }\n\n    private _paymentInstrumentSelected(\n        methodId: string,\n        nonce?: string,\n        cardData?: CardData,\n        billingContact?: Contact,\n        shippingContact?: Contact): Promise<InternalCheckoutSelectors> {\n\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            return this._setExternalCheckoutData(nonce, cardData, billingContact, shippingContact)\n            .then(() =>\n                Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId)),\n            ]));\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _paymentRequestPayload(): SquarePaymentRequest {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const storeConfig = state.config.getStoreConfig();\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!storeConfig) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        return {\n            requestShippingAddress: true,\n            requestBillingInfo: true,\n            currencyCode: storeConfig.currency.code,\n            countryCode: this._getCountryCode(storeConfig.storeProfile.storeCountry),\n            total: {\n                label: storeConfig.storeProfile.storeName,\n                amount: String(checkout.subtotal),\n                pending: false,\n            },\n        };\n    }\n\n    private _setExternalCheckoutData(nonce?: string, cardData?: CardData, billingContact?: Contact, shippingContact?: Contact): Promise<Response<any>> {\n        return this._requestSender.post('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: {\n                nonce,\n                provider: 'squarev2',\n                action: 'set_external_checkout',\n                cardData: JSON.stringify(cardData),\n                billingContact: JSON.stringify(billingContact),\n                shippingContact: JSON.stringify(shippingContact),\n            },\n        });\n    }\n\n    private _setPostalCode(): void {\n        const state = this._store.getState();\n        const billingAddress = state.billingAddress.getBillingAddress();\n\n        if (!this._paymentForm) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (billingAddress && billingAddress.postalCode) {\n            this._paymentForm.setPostalCode(billingAddress.postalCode);\n        }\n    }\n\n    private _showPaymentMethods(methods: { [key: string]: boolean }, element: SquareFormElement): void {\n        const masterpassBtn = document.getElementById(element.elementId);\n\n        if (masterpassBtn && methods.masterpass) {\n            masterpassBtn.style.display = 'inline-block';\n        }\n    }\n}\n\nexport interface DeferredPromise {\n    resolve(resolution?: NonceInstrument): void;\n    reject(reason?: any): void;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { SquareFormFactory, SquareFormOptions } from './square-form';\nimport SquareWindow from './square-window';\n\nexport default class SquareScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    load(): Promise<SquareFormFactory> {\n        const scriptURI = '//js.squareup.com/v2/paymentform';\n\n        return this._scriptLoader.loadScript(scriptURI)\n            .then(() => (options: SquareFormOptions) =>\n                new (window as SquareWindow).SqPaymentForm(options)\n            );\n    }\n}\n","import { Address } from '../../../address';\nimport { BillingAddress } from '../../../billing';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError, NotInitializedErrorType,\n    StandardError\n} from '../../../common/error/errors';\nimport { Customer } from '../../../customer';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport {\n    StripeAddress,\n    StripeBillingDetails,\n    StripeCardElement,\n    StripeHandleCardPaymentOptions,\n    StripeShippingDetails,\n    StripeV3Client\n} from './stripev3';\nimport StripeV3ScriptLoader from './stripev3-script-loader';\n\nexport default class StripeV3PaymentStrategy implements PaymentStrategy {\n    private _stripeV3Client?: StripeV3Client;\n    private _cardElement?: StripeCardElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _stripeScriptLoader: StripeV3ScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const stripeOptions = options.stripev3;\n\n        if (!stripeOptions) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.stripev3\" argument is not provided.');\n        }\n\n        const paymentMethod = this._store.getState().paymentMethods.getPaymentMethod(options.methodId);\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._stripeScriptLoader.load(paymentMethod.initializationData.stripePublishableKey)\n            .then(stripeJs => {\n                this._stripeV3Client = stripeJs;\n                const elements = this._stripeV3Client.elements();\n                const cardElement = elements.create('card', {\n                    style: stripeOptions.style,\n                });\n\n                cardElement.mount(`#${stripeOptions.containerId}`);\n\n                this._cardElement = cardElement;\n\n                return Promise.resolve(this._store.getState());\n            });\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(payment.methodId))\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(payment.methodId);\n\n                if (!paymentMethod || !paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                if (!this._cardElement) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n\n                return this._getStripeJs().handleCardPayment(\n                    paymentMethod.clientToken, this._cardElement, this._mapStripeCardPaymentOptions()\n                ).then(stripeResponse => {\n                    if (stripeResponse.error || !stripeResponse.paymentIntent.id) {\n                        throw new StandardError(stripeResponse.error && stripeResponse.error.message);\n                    }\n\n                    const paymentPayload = {\n                        methodId: payment.methodId,\n                        paymentData: { nonce: stripeResponse.paymentIntent.id },\n                    };\n\n                    return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n                        .then(() =>\n                            this._store.dispatch(this._paymentActionCreator.submitPayment(paymentPayload))\n                        );\n                });\n            });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._cardElement) {\n            this._cardElement.unmount();\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _getStripeJs(): StripeV3Client {\n        if (!this._stripeV3Client) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._stripeV3Client;\n    }\n\n    private _mapStripeBillingAddress(billingAddress: BillingAddress | undefined): StripeAddress | undefined {\n        if (!billingAddress) {\n            return undefined;\n        }\n\n        return {\n            city: billingAddress.city,\n            country: billingAddress.countryCode,\n            line1: billingAddress.address1,\n            line2: billingAddress.address2,\n            postal_code: billingAddress.postalCode,\n            state: billingAddress.postalCode,\n        };\n    }\n\n    private _mapStripeShippingAddress(shippingAddress: Address | undefined): StripeAddress {\n        if (!shippingAddress) {\n            return { };\n        }\n\n        return {\n            city: shippingAddress.city,\n            country: shippingAddress.countryCode,\n            line1: shippingAddress.address1,\n            line2: shippingAddress.address2,\n            postal_code: shippingAddress.postalCode,\n            state: shippingAddress.postalCode,\n        };\n    }\n\n    private _mapStripeBillingDetails({ billingAddress, customer }: { billingAddress?: BillingAddress; customer?: Customer } = {}): StripeBillingDetails {\n        const stripeBillingDetails = {\n            address: this._mapStripeBillingAddress(billingAddress),\n        };\n\n        if (customer) {\n            return {\n                ...stripeBillingDetails,\n                email: customer.email,\n                name: `${customer.firstName} ${customer.lastName}`,\n            };\n        }\n\n        if (billingAddress) {\n            return {\n                ...stripeBillingDetails,\n                email: billingAddress.email,\n                name: `${billingAddress.firstName} ${billingAddress.lastName}`,\n            };\n        }\n\n        return {\n            name: 'Guest',\n        };\n    }\n\n    private _mapStripeShippingDetails({ shippingAddress, customer }: { shippingAddress?: Address ; customer?: Customer } = {}): StripeShippingDetails {\n        const stripeShippingDetails = {\n            address: this._mapStripeShippingAddress(shippingAddress),\n        };\n\n        if (customer) {\n            return {\n                ...stripeShippingDetails,\n                name: `${customer.firstName} ${customer.lastName}`,\n            };\n        }\n\n        if (shippingAddress) {\n            return {\n                ...stripeShippingDetails,\n                name: `${shippingAddress.firstName} ${shippingAddress.lastName}`,\n            };\n        }\n\n        return {\n            ...stripeShippingDetails,\n            name: 'Guest',\n        };\n    }\n\n    private _getCustomer(): Customer | undefined {\n        const customer = this._store.getState().customer.getCustomer();\n\n        if (customer) {\n            if (customer.firstName === '' || customer.lastName === '' || customer.email === '') {\n                return undefined;\n            }\n        }\n\n        return customer;\n    }\n\n    private _mapStripeCardPaymentOptions(): StripeHandleCardPaymentOptions {\n        const customer = this._getCustomer();\n        const billingAddress = this._store.getState().billingAddress.getBillingAddress();\n        const shippingAddress = this._store.getState().shippingAddress.getShippingAddress();\n\n        const paymentMethodData = {\n            payment_method_data: {\n                billing_details: this._mapStripeBillingDetails({ billingAddress, customer }),\n            },\n        };\n\n        const shippingDetails = {\n            shipping: this._mapStripeShippingDetails({ shippingAddress, customer }),\n        };\n\n        if (billingAddress) {\n            if (customer) {\n                return {\n                    ...paymentMethodData,\n                    ...shippingDetails,\n                    receipt_email: customer.email,\n                };\n            } else {\n                return {\n                    ...paymentMethodData,\n                    ...shippingDetails,\n                    receipt_email: billingAddress.email,\n                };\n            }\n        }\n\n        if (customer) {\n            return {\n                ...shippingDetails,\n                receipt_email: customer.email,\n            };\n        } else {\n            return {\n                ...shippingDetails,\n            };\n        }\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { StripeHostWindow, StripeV3Client } from './stripev3';\n\nexport default class StripeV3ScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: StripeHostWindow = window\n    ) {}\n\n    load(publishableKey: string): Promise<StripeV3Client> {\n        return this._scriptLoader\n            .loadScript('https://js.stripe.com/v3/')\n            .then(() => {\n                if (!this._window.Stripe) {\n                    throw new StandardError();\n                }\n\n                return this._window.Stripe(publishableKey, {\n                    betas: ['payment_intent_beta_3'],\n                });\n            });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\n\nimport WepayRisk from './wepay-risk';\nimport WepayWindow from './wepay-window';\n\nconst SCRIPT_SRC = '//static.wepay.com/min/js/risk.1.latest.js';\n\nexport default class WepayRiskClient {\n    private _riskClient?: WepayRisk;\n\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    initialize(): Promise<WepayRiskClient> {\n        return this._scriptLoader\n            .loadScript(SCRIPT_SRC)\n            .then(() => this._riskClient = (window as WepayWindow).WePay.risk)\n            .then(() => this);\n    }\n\n    getRiskToken(): string {\n        if (!this._riskClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        this._riskClient.generate_risk_token();\n\n        return this._riskClient.get_risk_token();\n    }\n}\n","import { merge } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport CreditCardPaymentStrategy from '../credit-card/credit-card-payment-strategy';\n\nimport WepayRiskClient from './wepay-risk-client';\n\nexport default class WepayPaymentStrategy extends CreditCardPaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        orderActionCreator: OrderActionCreator,\n        paymentActionCreator: PaymentActionCreator,\n        private _wepayRiskClient: WepayRiskClient\n    ) {\n        super(store, orderActionCreator, paymentActionCreator);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._wepayRiskClient.initialize();\n\n        return super.initialize(options);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const token = this._wepayRiskClient.getRiskToken();\n        const payloadWithToken = merge({}, payload, {\n            payment: {\n                paymentData: {\n                    deviceSessionId: token,\n                },\n            },\n        });\n\n        return super.execute(payloadWithToken, options);\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class PaymentMethodDeclinedError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'The selected payment method was declined. Please select another payment method.');\n\n        this.name = 'PaymentMethodDeclinedError';\n        this.type = 'payment_declined';\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n} from '../../../common/error/errors';\nimport { ContentType, INTERNAL_USE_ONLY } from '../../../common/http-request';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { PaymentMethodCancelledError, PaymentMethodDeclinedError, PaymentMethodInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { Zip, ZipModalEvent } from './zip';\nimport ZipScriptLoader from './zip-script-loader';\n\nexport default class ZipPaymentStrategy implements PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _zipClient?: Zip;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _zipScriptLoader: ZipScriptLoader,\n        private _requestSender: RequestSender\n    ) { }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return this._zipScriptLoader.load()\n            .then(zip => {\n                this._zipClient = zip;\n\n                return this._store.getState();\n            });\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n        this._zipClient = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const { _zipClient: zipClient } = this;\n        const useStoreCredit = !!payload.useStoreCredit;\n\n        if (!payment) {\n            throw new InvalidArgumentError('Unable to submit payment because \"payload.payment\" argument is not provided.');\n        }\n\n        if (!zipClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() => this._store.dispatch(\n                this._remoteCheckoutActionCreator.initializePayment(payment.methodId, { useStoreCredit })\n            ))\n            .then(()  => {\n                return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(payment.methodId, options))\n                    .then(state => {\n                        this._paymentMethod = state.paymentMethods.getPaymentMethod(payment.methodId);\n\n                        if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                        }\n                    })\n                    .then(() => new Promise<string | undefined>((resolve, reject) => {\n                        zipClient.Checkout.init({\n                            onComplete: ({ checkoutId, state }) => {\n                                if (state === ZipModalEvent.CancelCheckout) {\n                                    return reject(new PaymentMethodCancelledError());\n                                }\n\n                                if (state === ZipModalEvent.CheckoutReferred && checkoutId) {\n                                    return this._prepareForReferredRegistration(payment.methodId, checkoutId)\n                                        .then(() => resolve());\n                                }\n\n                                if (state === ZipModalEvent.CheckoutApproved && checkoutId) {\n                                    return resolve(checkoutId);\n                                }\n\n                                if (state === ZipModalEvent.CheckoutDeclined) {\n                                    return reject(new PaymentMethodDeclinedError('Unfortunately your application was declined. Please select another payment method.'));\n                                }\n\n                                reject(new PaymentMethodInvalidError());\n                            },\n                            onCheckout: openModal => {\n                                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                                }\n\n                                openModal(JSON.parse(this._paymentMethod.clientToken));\n                            },\n                        });\n                    })\n                    .then(nonce => {\n                        if (nonce !== undefined) {\n                            return this._store.dispatch(this._paymentActionCreator.submitPayment({\n                                methodId: payment.methodId,\n                                paymentData: { nonce },\n                            }));\n                        }\n\n                        return this._store.getState();\n                    }\n                    ));\n            });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _prepareForReferredRegistration(provider: string, externalId: string): Promise<Response> {\n        const url = `/api/storefront/payment/${provider}/save-external-id`;\n        const options = {\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n            body: {\n                externalId,\n                provider,\n            },\n        };\n\n        return this._requestSender.post(url, options);\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\nimport { Zip, ZipHostWindow } from '../zip/zip';\n\nexport default class ZipScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        public _window: ZipHostWindow = window\n    ) {}\n\n    load(): Promise<Zip> {\n        return this._scriptLoader\n            .loadScript(`//static.zipmoney.com.au/checkout/checkout-v1.min.js`)\n            .then(() => {\n                if (!this._window.Zip) {\n                    throw new StandardError();\n                }\n\n                return this._window.Zip;\n            });\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../billing';\nimport { CheckoutActionCreator, CheckoutRequestSender, CheckoutStore, CheckoutValidator } from '../checkout';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { OrderActionCreator, OrderRequestSender } from '../order';\nimport { createSpamProtection, SpamProtectionActionCreator } from '../order/spam-protection';\nimport GoogleRecaptcha from '../order/spam-protection/google-recaptcha';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../remote-checkout';\n\nimport PaymentActionCreator from './payment-action-creator';\nimport PaymentMethodActionCreator from './payment-method-action-creator';\nimport PaymentMethodRequestSender from './payment-method-request-sender';\nimport PaymentRequestSender from './payment-request-sender';\nimport PaymentStrategyActionCreator from './payment-strategy-action-creator';\nimport PaymentStrategyRegistry from './payment-strategy-registry';\nimport PaymentStrategyType from './payment-strategy-type';\nimport { AffirmPaymentStrategy, AffirmScriptLoader } from './strategies/affirm';\nimport { AfterpayPaymentStrategy, AfterpayScriptLoader } from './strategies/afterpay';\nimport { AmazonPayPaymentStrategy, AmazonPayScriptLoader } from './strategies/amazon-pay';\nimport {\n    createBraintreePaymentProcessor,\n    createBraintreeVisaCheckoutPaymentProcessor,\n    BraintreeCreditCardPaymentStrategy,\n    BraintreePaypalPaymentStrategy,\n    BraintreeScriptLoader,\n    BraintreeSDKCreator,\n    BraintreeVisaCheckoutPaymentStrategy,\n    VisaCheckoutScriptLoader\n} from './strategies/braintree';\nimport { ChasePayPaymentStrategy, ChasePayScriptLoader } from './strategies/chasepay';\nimport { ConvergePaymentStrategy } from './strategies/converge';\nimport { CreditCardPaymentStrategy } from './strategies/credit-card';\nimport {\n    CardinalClient,\n    CardinalScriptLoader,\n    CyberSourcePaymentStrategy\n} from './strategies/cybersource';\nimport {\n    createGooglePayPaymentProcessor,\n    GooglePayBraintreeInitializer,\n    GooglePayPaymentStrategy,\n    GooglePayStripeInitializer\n} from './strategies/googlepay';\nimport { KlarnaPaymentStrategy, KlarnaScriptLoader } from './strategies/klarna';\nimport { LegacyPaymentStrategy } from './strategies/legacy';\nimport { MasterpassPaymentStrategy, MasterpassScriptLoader } from './strategies/masterpass';\nimport { NoPaymentDataRequiredPaymentStrategy } from './strategies/no-payment';\nimport { OfflinePaymentStrategy } from './strategies/offline';\nimport { OffsitePaymentStrategy } from './strategies/offsite';\nimport { PaypalExpressPaymentStrategy, PaypalProPaymentStrategy, PaypalScriptLoader } from './strategies/paypal';\nimport { SagePayPaymentStrategy } from './strategies/sage-pay';\nimport { SquarePaymentStrategy, SquareScriptLoader } from './strategies/square';\nimport { StripeScriptLoader, StripeV3PaymentStrategy } from './strategies/stripev3';\nimport { WepayPaymentStrategy, WepayRiskClient } from './strategies/wepay';\nimport { ZipPaymentStrategy, ZipScriptLoader } from './strategies/zip';\n\nexport default function createPaymentStrategyRegistry(\n    store: CheckoutStore,\n    paymentClient: any,\n    requestSender: RequestSender,\n    spamProtection: GoogleRecaptcha\n) {\n    const registry = new PaymentStrategyRegistry(store, { defaultToken: PaymentStrategyType.CREDIT_CARD });\n    const scriptLoader = getScriptLoader();\n    const billingAddressActionCreator = new BillingAddressActionCreator(new BillingAddressRequestSender(requestSender));\n    const braintreePaymentProcessor = createBraintreePaymentProcessor(scriptLoader);\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const checkoutValidator = new CheckoutValidator(checkoutRequestSender);\n    const spamProtectionActionCreator = new SpamProtectionActionCreator(spamProtection);\n    const orderActionCreator = new OrderActionCreator(new OrderRequestSender(requestSender), checkoutValidator, spamProtectionActionCreator);\n    const paymentActionCreator = new PaymentActionCreator(new PaymentRequestSender(paymentClient), orderActionCreator);\n    const paymentMethodActionCreator = new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender));\n    const remoteCheckoutActionCreator = new RemoteCheckoutActionCreator(new RemoteCheckoutRequestSender(requestSender));\n    const configActionCreator = new ConfigActionCreator(new ConfigRequestSender(requestSender));\n    const checkoutActionCreator = new CheckoutActionCreator(checkoutRequestSender, configActionCreator);\n    const paymentStrategyActionCreator = new PaymentStrategyActionCreator(registry, orderActionCreator);\n    const formPoster = createFormPoster();\n\n    registry.register(PaymentStrategyType.AFFIRM, () =>\n        new AffirmPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            new AffirmScriptLoader()\n        )\n    );\n\n    registry.register(PaymentStrategyType.AFTERPAY, () =>\n        new AfterpayPaymentStrategy(\n            store,\n            checkoutValidator,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new AfterpayScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.AMAZON, () =>\n        new AmazonPayPaymentStrategy(\n            store,\n            orderActionCreator,\n            billingAddressActionCreator,\n            remoteCheckoutActionCreator,\n            new AmazonPayScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.CREDIT_CARD, () =>\n        new CreditCardPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.CYBERSOURCE, () =>\n        new CyberSourcePaymentStrategy(\n            store,\n            paymentMethodActionCreator,\n            orderActionCreator,\n            paymentActionCreator,\n            new CardinalClient(new CardinalScriptLoader(scriptLoader))\n        )\n    );\n\n    registry.register(PaymentStrategyType.KLARNA, () =>\n        new KlarnaPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new KlarnaScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.LEGACY, () =>\n        new LegacyPaymentStrategy(\n            store,\n            orderActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.OFFLINE, () =>\n        new OfflinePaymentStrategy(\n            store,\n            orderActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.OFFSITE, () =>\n        new OffsitePaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.PAYPAL, () =>\n        new PaypalProPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.PAYPAL_EXPRESS, () =>\n        new PaypalExpressPaymentStrategy(\n            store,\n            orderActionCreator,\n            new PaypalScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.PAYPAL_EXPRESS_CREDIT, () =>\n        new PaypalExpressPaymentStrategy(\n            store,\n            orderActionCreator,\n            new PaypalScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.SAGE_PAY, () =>\n        new SagePayPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            formPoster\n        )\n    );\n\n    registry.register(PaymentStrategyType.SQUARE, () =>\n        new SquarePaymentStrategy(\n            store,\n            checkoutActionCreator,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            requestSender,\n            new SquareScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.NO_PAYMENT_DATA_REQUIRED, () =>\n        new NoPaymentDataRequiredPaymentStrategy(\n            store,\n            orderActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.BRAINTREE, () =>\n        new BraintreeCreditCardPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            braintreePaymentProcessor\n        )\n    );\n\n    registry.register(PaymentStrategyType.BRAINTREE_PAYPAL, () =>\n        new BraintreePaypalPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            braintreePaymentProcessor\n        )\n    );\n\n    registry.register(PaymentStrategyType.BRAINTREE_PAYPAL_CREDIT, () =>\n        new BraintreePaypalPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            braintreePaymentProcessor,\n            true\n        )\n    );\n\n    registry.register(PaymentStrategyType.BRAINTREE_VISA_CHECKOUT, () =>\n        new BraintreeVisaCheckoutPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            paymentActionCreator,\n            orderActionCreator,\n            createBraintreeVisaCheckoutPaymentProcessor(scriptLoader, requestSender),\n            new VisaCheckoutScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.CHASE_PAY, () =>\n        new ChasePayPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            requestSender,\n            new ChasePayScriptLoader(scriptLoader),\n            new WepayRiskClient(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.BRAINTREE_GOOGLE_PAY, () =>\n        new GooglePayPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            paymentActionCreator,\n            orderActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayBraintreeInitializer(\n                    new BraintreeSDKCreator(\n                        new BraintreeScriptLoader(scriptLoader)\n                    )\n                )\n            )\n        )\n    );\n\n    registry.register(PaymentStrategyType.WE_PAY, () =>\n        new WepayPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            new WepayRiskClient(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.MASTERPASS, () =>\n        new MasterpassPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            new MasterpassScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.STRIPE_GOOGLE_PAY, () =>\n        new GooglePayPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            paymentActionCreator,\n            orderActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayStripeInitializer()\n            )\n        )\n    );\n\n    registry.register(PaymentStrategyType.ZIP, () =>\n        new ZipPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new ZipScriptLoader(scriptLoader),\n            requestSender\n        )\n    );\n\n    registry.register(PaymentStrategyType.CONVERGE, () =>\n        new ConvergePaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            formPoster\n            )\n    );\n\n    registry.register(PaymentStrategyType.STRIPEV3, () =>\n        new StripeV3PaymentStrategy(\n            store,\n            paymentMethodActionCreator,\n            paymentActionCreator,\n            orderActionCreator,\n            new StripeScriptLoader(scriptLoader)\n        )\n    );\n\n    return registry;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { Overlay } from '../../../common/overlay';\n\nimport BraintreePaymentProcessor from './braintree-payment-processor';\nimport BraintreeScriptLoader from './braintree-script-loader';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\n\nexport default function createBraintreePaymentProcessor(scriptLoader: ScriptLoader) {\n    const braintreeScriptLoader = new BraintreeScriptLoader(scriptLoader);\n    const braintreeSDKCreator = new BraintreeSDKCreator(braintreeScriptLoader);\n    const overlay = new Overlay();\n\n    return new BraintreePaymentProcessor(braintreeSDKCreator, overlay);\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { Address } from '../../address';\nimport { InternalCheckoutSelectors, ReadableCheckoutStore } from '../../checkout';\nimport { addMinutes, isFuture } from '../../common/date-time';\nimport { MissingDataError, MissingDataErrorType } from '../../common/error/errors';\n\nimport { SessionContext, VaultAccessToken } from './instrument';\nimport { DeleteInstrumentAction, InstrumentActionType, LoadInstrumentsAction } from './instrument-actions';\nimport InstrumentRequestSender from './instrument-request-sender';\n\nexport default class InstrumentActionCreator {\n    constructor(\n        private _instrumentRequestSender: InstrumentRequestSender\n    ) {}\n\n    loadInstruments(): ThunkAction<LoadInstrumentsAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<LoadInstrumentsAction>) => {\n            observer.next(createAction(InstrumentActionType.LoadInstrumentsRequested));\n\n            const session = this._getSessionContext(store);\n            const token = this._getCurrentAccessToken(store);\n            const shippingAddress = this._getShippingAddress(store);\n\n            return this._getValidAccessToken(token)\n                .then(currentToken =>\n                    this._instrumentRequestSender.loadInstruments({\n                            ...session,\n                            authToken: currentToken.vaultAccessToken,\n                        },\n                        shippingAddress\n                    )\n                        .then(({ body }) => {\n                            observer.next(createAction(\n                                InstrumentActionType.LoadInstrumentsSucceeded,\n                                body,\n                                currentToken\n                            ));\n                            observer.complete();\n                        })\n                )\n                .catch(response => {\n                    observer.error(createErrorAction(InstrumentActionType.LoadInstrumentsFailed, response));\n                });\n        });\n    }\n\n    deleteInstrument(instrumentId: string): ThunkAction<DeleteInstrumentAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<DeleteInstrumentAction>) => {\n            observer.next(createAction(InstrumentActionType.DeleteInstrumentRequested, undefined, { instrumentId }));\n\n            const session = this._getSessionContext(store);\n            const token = this._getCurrentAccessToken(store);\n\n            return this._getValidAccessToken(token)\n                .then(currentToken =>\n                    this._instrumentRequestSender.deleteInstrument({\n                        ...session,\n                        authToken: currentToken.vaultAccessToken,\n                    }, instrumentId)\n                        .then(({ body }) => {\n                            observer.next(createAction(InstrumentActionType.DeleteInstrumentSucceeded, body, {\n                                instrumentId,\n                                ...currentToken,\n                            }));\n                            observer.complete();\n                        })\n                )\n                .catch(response => {\n                    observer.error(createErrorAction(InstrumentActionType.DeleteInstrumentFailed, response, { instrumentId }));\n                });\n        });\n    }\n\n    private _isValidVaultAccessToken(token: VaultAccessToken): boolean {\n        if (!token || !token.vaultAccessToken) {\n            return false;\n        }\n\n        const expiryBuffer = 2;\n        const expiry = addMinutes(new Date(token.vaultAccessExpiry), expiryBuffer);\n\n        return isFuture(expiry);\n    }\n\n    private _getCurrentAccessToken(store: ReadableCheckoutStore): VaultAccessToken | undefined {\n        const { instruments } = store.getState();\n        const meta = instruments.getInstrumentsMeta();\n\n        if (!meta) {\n            return;\n        }\n\n        return {\n            vaultAccessToken: meta.vaultAccessToken,\n            vaultAccessExpiry: meta.vaultAccessExpiry,\n        };\n    }\n\n    private _getValidAccessToken(token?: VaultAccessToken): Promise<VaultAccessToken> {\n        return token && this._isValidVaultAccessToken(token) ?\n            Promise.resolve(token) :\n            this._instrumentRequestSender.getVaultAccessToken().then(({ body }) => body);\n    }\n\n    private _getShippingAddress(store: ReadableCheckoutStore): Address | undefined {\n        const state = store.getState();\n\n        return state.shippingAddress.getShippingAddress();\n    }\n\n    private _getSessionContext(store: ReadableCheckoutStore): SessionContext {\n        const state = store.getState();\n        const config = state.config.getStoreConfig();\n        const cart = state.cart.getCart();\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        const { customerId } = cart;\n        const { storeId } = config.storeProfile;\n        const { code } = config.shopperCurrency.isTransactional ? config.shopperCurrency : config.currency;\n\n        return {\n            customerId,\n            storeId,\n            currencyCode: code,\n        };\n    }\n}\n","export default function addMinutes(date: Date, amount: number): Date {\n    const newDate = new Date(date.getTime());\n\n    newDate.setMinutes(date.getMinutes() + amount);\n\n    return newDate;\n}\n","export default function isFuture(date: Date): boolean {\n    return date.valueOf() > Date.now();\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport PaymentResponse from '../payment-response';\n\nimport Instrument, { VaultAccessToken } from './instrument';\nimport {\n    InstrumentsResponseBody,\n    InstrumentErrorResponseBody,\n    InternalInstrument,\n    InternalInstrumentsResponseBody,\n    InternalInstrumentErrorResponseBody,\n    InternalVaultAccessTokenResponseBody,\n} from './instrument-response-body';\n\nexport default class InstrumentResponseTransformer {\n    transformResponse(\n        response: PaymentResponse<InternalInstrumentsResponseBody>\n    ): Response<InstrumentsResponseBody> {\n        const { body, ...payload } = this._transformResponse(response);\n\n        return {\n            ...payload,\n            body: {\n                vaultedInstruments: this._transformVaultedInstruments(body.vaulted_instruments),\n            },\n        };\n    }\n\n    transformErrorResponse(\n        response: PaymentResponse<InternalInstrumentErrorResponseBody>\n    ): Response<InstrumentErrorResponseBody> {\n        return this._transformResponse(response);\n    }\n\n    transformVaultAccessResponse(\n        response: Response<InternalVaultAccessTokenResponseBody>\n    ): Response<VaultAccessToken> {\n        return {\n            ...response,\n            body: {\n                vaultAccessToken: response.body.data.token,\n                vaultAccessExpiry: response.body.data.expires_at,\n            },\n        };\n    }\n\n    private _transformVaultedInstruments(vaultedInstruments: InternalInstrument[] = []): Instrument[] {\n        return vaultedInstruments.map(instrument => ({\n            bigpayToken: instrument.bigpay_token,\n            defaultInstrument: instrument.default_instrument,\n            provider: instrument.provider,\n            iin: instrument.iin,\n            last4: instrument.last_4,\n            expiryMonth: instrument.expiry_month,\n            expiryYear: instrument.expiry_year,\n            brand: instrument.brand,\n            trustedShippingAddress: instrument.trusted_shipping_address,\n        }));\n    }\n\n    private _transformResponse<T>(response: PaymentResponse<T>): Response<T> {\n        const { data: body, ...payload } = response;\n\n        return {\n            ...payload,\n            body,\n        };\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { mapToInternalAddress, Address } from '../../address';\nimport { RequestOptions } from '../../common/http-request';\nimport PaymentResponse from '../payment-response';\n\nimport { InstrumentRequestContext, VaultAccessToken } from './instrument';\nimport {\n    InstrumentsResponseBody,\n    InternalInstrumentsResponseBody,\n    InternalInstrumentErrorResponseBody,\n} from './instrument-response-body';\nimport InstrumentResponseTransformer from './instrument-response-transformer';\n\nexport default class InstrumentRequestSender {\n    private _transformer: InstrumentResponseTransformer;\n\n    constructor(\n        private _client: any,\n        private _requestSender: RequestSender\n    ) {\n        this._transformer = new InstrumentResponseTransformer();\n    }\n\n    getVaultAccessToken(\n        { timeout }: RequestOptions = {}\n    ): Promise<Response<VaultAccessToken>> {\n        const url = '/internalapi/v1/checkout/payments/vault-access-token';\n\n        return this._requestSender.get(url, { timeout }).then(response => ({\n            ...response,\n            body: {\n                vaultAccessToken: response.body.data.token,\n                vaultAccessExpiry: response.body.data.expires_at,\n            },\n        }));\n    }\n\n    loadInstruments(\n        requestContext: InstrumentRequestContext,\n        shippingAddress?: Address\n    ): Promise<Response<InstrumentsResponseBody>> {\n        return (shippingAddress) ?\n            this._loadInstrumentsWithAddress(requestContext, shippingAddress) :\n            this._loadInstruments(requestContext);\n    }\n\n    deleteInstrument(\n        requestContext: InstrumentRequestContext,\n        instrumentId: string\n    ): Promise<Response<InstrumentsResponseBody>> {\n        const payload = {\n            ...requestContext,\n            instrumentId,\n        };\n\n        return new Promise((resolve, reject) => {\n            this._client.deleteShopperInstrument(\n                payload, (\n                    errorResponse: PaymentResponse<InternalInstrumentErrorResponseBody>,\n                    response: PaymentResponse<InternalInstrumentsResponseBody>\n                ) =>  errorResponse ?\n                    reject(this._transformer.transformErrorResponse(errorResponse)) :\n                    resolve(this._transformer.transformResponse(response))\n            );\n        });\n    }\n\n    private _loadInstruments(\n        requestContext: InstrumentRequestContext\n    ): Promise<Response<InstrumentsResponseBody>> {\n        return new Promise((resolve, reject) => {\n            this._client.loadInstruments(\n                requestContext, (\n                    errorResponse: PaymentResponse<InternalInstrumentErrorResponseBody>,\n                    response: PaymentResponse<InternalInstrumentsResponseBody>\n                ) => errorResponse ?\n                    reject(this._transformer.transformErrorResponse(errorResponse)) :\n                    resolve(this._transformer.transformResponse(response))\n            );\n        });\n    }\n\n    private _loadInstrumentsWithAddress(\n        requestContext: InstrumentRequestContext,\n        shippingAddress: Address\n    ): Promise<Response<InstrumentsResponseBody>> {\n        const payload = {\n            ...requestContext,\n            shippingAddress: mapToInternalAddress(shippingAddress),\n        };\n\n        return new Promise((resolve, reject) => {\n            this._client.loadInstrumentsWithAddress(\n                payload, (\n                    errorResponse: PaymentResponse<InternalInstrumentErrorResponseBody>,\n                    response: PaymentResponse<InternalInstrumentsResponseBody>\n                ) => errorResponse ?\n                    reject(this._transformer.transformErrorResponse(errorResponse)) :\n                    resolve(this._transformer.transformResponse(response))\n            );\n        });\n    }\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport { LoadShippingCountriesAction, ShippingCountryActionType } from './shipping-country-actions';\nimport ShippingCountryRequestSender from './shipping-country-request-sender';\n\nexport default class ShippingCountryActionCreator {\n    constructor(\n        private _shippingCountryRequestSender: ShippingCountryRequestSender\n    ) {}\n\n    loadCountries(options?: RequestOptions): Observable<LoadShippingCountriesAction> {\n        return Observable.create((observer: Observer<LoadShippingCountriesAction>) => {\n            observer.next(createAction(ShippingCountryActionType.LoadShippingCountriesRequested));\n\n            this._shippingCountryRequestSender.loadCountries(options)\n                .then(response => {\n                    observer.next(createAction(ShippingCountryActionType.LoadShippingCountriesSucceeded, response.body.data));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ShippingCountryActionType.LoadShippingCountriesFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\nimport { CountryResponseBody } from '../geography';\n\nexport default class ShippingCountryRequestSender {\n    constructor(\n        private _requestSender: RequestSender,\n        private _config: { locale?: string }\n    ) {}\n\n    loadCountries({ timeout }: RequestOptions = {}): Promise<Response<CountryResponseBody>> {\n        const url = '/internalapi/v1/shipping/countries';\n        const headers = {\n            'Accept-Language': this._config.locale,\n        };\n\n        return this._requestSender.get(url, { headers, timeout });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { AddressRequestBody } from '../address';\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { Registry } from '../common/registry';\n\nimport { ShippingInitializeOptions, ShippingRequestOptions } from './shipping-request-options';\nimport {\n    ShippingStrategyActionType,\n    ShippingStrategyDeinitializeAction,\n    ShippingStrategyInitializeAction,\n    ShippingStrategySelectOptionAction,\n    ShippingStrategyUpdateAddressAction,\n} from './shipping-strategy-actions';\nimport { ShippingStrategy } from './strategies';\n\nexport default class ShippingStrategyActionCreator {\n    constructor(\n        private _strategyRegistry: Registry<ShippingStrategy>\n    ) {}\n\n    updateAddress(address: Partial<AddressRequestBody>, options?: ShippingRequestOptions): ThunkAction<ShippingStrategyUpdateAddressAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategyUpdateAddressAction>) => {\n            const payment = store.getState().payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n\n            observer.next(createAction(ShippingStrategyActionType.UpdateAddressRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .updateAddress(address, { ...options, methodId })\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.UpdateAddressSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.UpdateAddressFailed, error, { methodId }));\n                });\n        });\n    }\n\n    selectOption(shippingOptionId: string, options?: ShippingRequestOptions): ThunkAction<ShippingStrategySelectOptionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategySelectOptionAction>) => {\n            const payment = store.getState().payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n\n            observer.next(createAction(ShippingStrategyActionType.SelectOptionRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .selectOption(shippingOptionId, { ...options, methodId })\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.SelectOptionSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.SelectOptionFailed, error, { methodId }));\n                });\n        });\n    }\n\n    initialize(options?: ShippingInitializeOptions): ThunkAction<ShippingStrategyInitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategyInitializeAction>) => {\n            const state = store.getState();\n            const payment = state.payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n            const mergedOptions = { ...options, methodId };\n\n            if (methodId && state.shippingStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(ShippingStrategyActionType.InitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .initialize(mergedOptions)\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.InitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.InitializeFailed, error, { methodId }));\n                });\n        });\n    }\n\n    deinitialize(options?: ShippingRequestOptions): ThunkAction<ShippingStrategyDeinitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategyDeinitializeAction>) => {\n            const state = store.getState();\n            const payment = state.payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n\n            if (methodId && !state.shippingStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(ShippingStrategyActionType.DeinitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .deinitialize({ ...options, methodId })\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.DeinitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.DeinitializeFailed, error, { methodId }));\n                });\n        });\n    }\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\n\nimport { isInternalAddressEqual, mapFromInternalAddress, AddressRequestBody } from '../../../address';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { AmazonPayAddressBook, AmazonPayOrderReference, AmazonPayScriptLoader, AmazonPayWindow } from '../../../payment/strategies/amazon-pay';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { RemoteCheckoutSynchronizationError } from '../../../remote-checkout/errors';\nimport ConsignmentActionCreator from '../../consignment-action-creator';\nimport { ShippingInitializeOptions, ShippingRequestOptions } from '../../shipping-request-options';\nimport { ShippingStrategyActionType } from '../../shipping-strategy-actions';\nimport ShippingStrategy from '../shipping-strategy';\n\nimport AmazonPayShippingInitializeOptions from './amazon-pay-shipping-initialize-options';\n\nexport default class AmazonPayShippingStrategy implements ShippingStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _window: AmazonPayWindow;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _consignmentActionCreator: ConsignmentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _scriptLoader: AmazonPayScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    initialize(options: ShippingInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { amazon: amazonOptions, methodId } = options;\n\n        if (!amazonOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.amazon\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => new Promise((resolve, reject) => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const onReady = () => {\n                    this._createAddressBook(amazonOptions)\n                        .then(resolve)\n                        .catch(reject);\n                };\n\n                this._scriptLoader.loadWidget(this._paymentMethod, onReady)\n                    .catch(reject);\n            }))\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    updateAddress(address: AddressRequestBody, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    selectOption(optionId: string, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.selectShippingOption(optionId, options)\n        );\n    }\n\n    private _createAddressBook(options: AmazonPayShippingInitializeOptions): Promise<AmazonPayAddressBook> {\n        return new Promise((resolve, reject) => {\n            const { container, onAddressSelect = () => {}, onError = () => {}, onReady = () => {} } = options;\n            const merchantId = this._paymentMethod && this._paymentMethod.config.merchantId;\n\n            if (!document.getElementById(container)) {\n                return reject(new InvalidArgumentError('Unable to create AmazonPay AddressBook widget without valid container ID.'));\n            }\n\n            if (!this._window.OffAmazonPayments) {\n                return reject(new NotInitializedError(NotInitializedErrorType.ShippingNotInitialized));\n            }\n\n            if (!merchantId) {\n                return reject(new MissingDataError(MissingDataErrorType.MissingPaymentMethod));\n            }\n\n            const widget = new this._window.OffAmazonPayments.Widgets.AddressBook({\n                design: {\n                    designMode: 'responsive',\n                },\n                scope: 'payments:billing_address payments:shipping_address payments:widget profile',\n                sellerId: merchantId,\n                onAddressSelect: orderReference => {\n                    this._synchronizeShippingAddress()\n                        .then(() => onAddressSelect(orderReference))\n                        .catch(onError);\n                },\n                onError: error => {\n                    reject(error);\n                    onError(error);\n                },\n                onReady: orderReference => {\n                    this._updateOrderReference(orderReference)\n                        .then(() => {\n                            resolve();\n                            onReady(orderReference);\n                        })\n                        .catch(onError);\n                },\n            });\n\n            widget.bind(container);\n\n            return widget;\n        });\n    }\n\n    private _synchronizeShippingAddress(): Promise<InternalCheckoutSelectors> {\n        const methodId = this._paymentMethod && this._paymentMethod.id;\n        const amazon = this._store.getState().remoteCheckout.getCheckout('amazon');\n        const referenceId = amazon ? amazon.referenceId : undefined;\n\n        if (!methodId || !referenceId) {\n            throw new RemoteCheckoutSynchronizationError();\n        }\n\n        return this._store.dispatch(\n            createAction(ShippingStrategyActionType.UpdateAddressRequested, undefined, { methodId })\n        )\n            .then(() => this._store.dispatch(\n                this._remoteCheckoutActionCreator.initializeShipping(methodId, { referenceId })\n            ))\n            .then(state => {\n                const amazon = state.remoteCheckout.getCheckout('amazon');\n                const remoteAddress = amazon && amazon.shipping && amazon.shipping.address;\n                const address = state.shippingAddress.getShippingAddress();\n\n                if (remoteAddress === false) {\n                    throw new RemoteCheckoutSynchronizationError();\n                }\n\n                if (!remoteAddress || isInternalAddressEqual(remoteAddress, address || {})) {\n                    return this._store.getState();\n                }\n\n                return this._store.dispatch(\n                    this._consignmentActionCreator.updateAddress(mapFromInternalAddress(remoteAddress))\n                );\n            })\n            .then(() => this._store.dispatch(\n                createAction(ShippingStrategyActionType.UpdateAddressSucceeded, undefined, { methodId })\n            ))\n            .catch(error => this._store.dispatch(\n                createErrorAction(ShippingStrategyActionType.UpdateAddressFailed, error, { methodId })\n            ));\n    }\n\n    private _updateOrderReference(orderReference: AmazonPayOrderReference): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.updateCheckout('amazon', {\n                referenceId: orderReference.getAmazonOrderReferenceId(),\n            })\n        );\n    }\n}\n","import { AddressRequestBody } from '../../../address';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport ConsignmentActionCreator from '../../consignment-action-creator';\nimport { ShippingRequestOptions } from '../../shipping-request-options';\nimport ShippingStrategy from '../shipping-strategy';\n\nexport default class DefaultShippingStrategy implements ShippingStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _consignmentActionCreator: ConsignmentActionCreator\n    ) {}\n\n    updateAddress(address: AddressRequestBody, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.updateAddress(address, options)\n        );\n    }\n\n    selectOption(optionId: string, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.selectShippingOption(optionId, options)\n        );\n    }\n\n    initialize(options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { cloneDeep, memoize } from 'lodash';\n\nexport default function cloneDecorator<T extends Method>(target: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T>;\nexport default function cloneDecorator<T extends Constructor<object>>(target: T): T;\nexport default function cloneDecorator(target: any, key?: any, descriptor?: any): any {\n    if (!key || !descriptor) {\n        return cloneClassDecorator(target);\n    }\n\n    return cloneMethodDecorator(target, key, descriptor);\n}\n\nexport function cloneClassDecorator<T extends Constructor<object>>(target: T): T {\n    const decoratedTarget = class extends target {};\n\n    Object.getOwnPropertyNames(target.prototype)\n        .forEach(key => {\n            const descriptor = Object.getOwnPropertyDescriptor(target.prototype, key);\n\n            if (!descriptor || key === 'constructor') {\n                return;\n            }\n\n            Object.defineProperty(\n                decoratedTarget.prototype,\n                key,\n                cloneMethodDecorator(target.prototype, key, descriptor)\n            );\n        });\n\n    return decoratedTarget;\n}\n\nexport function cloneMethodDecorator<T extends Method>(target: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T> {\n    if (typeof descriptor.value !== 'function') {\n        return descriptor;\n    }\n\n    let method = descriptor.value;\n    const memoizedCloneDeep = memoize(cloneDeep);\n\n    // Use WeakMap as the MapCache, this allows for better garbage collection\n    // There's a deprecated `clear` method in the lodash implementation\n    // of MapCache, hence the `any`\n    memoizedCloneDeep.cache = new WeakMap() as any;\n\n    return {\n        get() {\n            const value = ((...args: any[]) => {\n                const result = method.apply(this, args);\n\n                return result && typeof result === 'object'\n                    ? memoizedCloneDeep(result)\n                    : result;\n            }) as T;\n\n            Object.defineProperty(this, key, { ...descriptor, value });\n\n            return value;\n        },\n        set(value) {\n            method = value;\n        },\n    };\n}\n\nexport type Constructor<T> = new (...args: any[]) => T;\nexport type Method = (...args: any[]) => any;\n","import { Address } from '../address';\nimport { BillingAddress, BillingAddressSelector } from '../billing';\nimport { Cart, CartSelector } from '../cart';\nimport { selector } from '../common/selector';\nimport { clone } from '../common/utility';\nimport { ConfigSelector } from '../config';\nimport { StoreConfig } from '../config/config';\nimport { Coupon, CouponSelector, GiftCertificate, GiftCertificateSelector } from '../coupon';\nimport { Customer, CustomerSelector } from '../customer';\nimport { FormField, FormSelector } from '../form';\nimport { Country, CountrySelector } from '../geography';\nimport { Order, OrderSelector } from '../order';\nimport { PaymentMethod, PaymentMethodSelector, PaymentSelector } from '../payment';\nimport { Instrument, InstrumentSelector } from '../payment/instrument';\nimport {\n    Consignment,\n    ConsignmentSelector,\n    ShippingAddressSelector,\n    ShippingCountrySelector,\n    ShippingOption,\n} from '../shipping';\n\nimport Checkout from './checkout';\nimport CheckoutSelector from './checkout-selector';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for getting the state of the current checkout.\n *\n * This object has a set of methods that allow you to get a specific piece of\n * checkout information, such as shipping and billing details.\n */\n@selector\n@clone\nexport default class CheckoutStoreSelector {\n    private _billingAddress: BillingAddressSelector;\n    private _cart: CartSelector;\n    private _checkout: CheckoutSelector;\n    private _config: ConfigSelector;\n    private _consignments: ConsignmentSelector;\n    private _countries: CountrySelector;\n    private _coupons: CouponSelector;\n    private _customer: CustomerSelector;\n    private _form: FormSelector;\n    private _giftCertificates: GiftCertificateSelector;\n    private _instruments: InstrumentSelector;\n    private _order: OrderSelector;\n    private _payment: PaymentSelector;\n    private _paymentMethods: PaymentMethodSelector;\n    private _shippingAddress: ShippingAddressSelector;\n    private _shippingCountries: ShippingCountrySelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._billingAddress = selectors.billingAddress;\n        this._cart = selectors.cart;\n        this._checkout = selectors.checkout;\n        this._config = selectors.config;\n        this._consignments = selectors.consignments;\n        this._countries = selectors.countries;\n        this._coupons = selectors.coupons;\n        this._customer = selectors.customer;\n        this._form = selectors.form;\n        this._giftCertificates = selectors.giftCertificates;\n        this._instruments = selectors.instruments;\n        this._order = selectors.order;\n        this._payment = selectors.payment;\n        this._paymentMethods = selectors.paymentMethods;\n        this._shippingAddress = selectors.shippingAddress;\n        this._shippingCountries = selectors.shippingCountries;\n    }\n\n    /**\n     * Gets the current checkout.\n     *\n     * @returns The current checkout if it is loaded, otherwise undefined.\n     */\n    getCheckout(): Checkout | undefined {\n        return this._checkout.getCheckout();\n    }\n\n    /**\n     * Gets the current order.\n     *\n     * @returns The current order if it is loaded, otherwise undefined.\n     */\n    getOrder(): Order | undefined {\n        return this._order.getOrder();\n    }\n\n    /**\n     * Gets the checkout configuration of a store.\n     *\n     * @returns The configuration object if it is loaded, otherwise undefined.\n     */\n    getConfig(): StoreConfig | undefined {\n        return this._config.getStoreConfig();\n    }\n\n    /**\n     * Gets the shipping address of the current checkout.\n     *\n     * If the address is partially complete, it may not have shipping options\n     * associated with it.\n     *\n     * @returns The shipping address object if it is loaded, otherwise\n     * undefined.\n     */\n    getShippingAddress(): Address | undefined {\n        const shippingAddress = this._shippingAddress.getShippingAddress();\n        const context = this._config.getContextConfig();\n\n        if (!shippingAddress) {\n            if (!context || !context.geoCountryCode) {\n                return;\n            }\n\n            return {\n                firstName: '',\n                lastName: '',\n                company: '',\n                address1: '',\n                address2: '',\n                city: '',\n                stateOrProvince: '',\n                stateOrProvinceCode: '',\n                postalCode: '',\n                country: '',\n                phone: '',\n                customFields: [],\n                countryCode: context.geoCountryCode,\n            };\n        }\n\n        return shippingAddress;\n    }\n\n    /**\n     * Gets a list of shipping options available for the shipping address.\n     *\n     * If there is no shipping address assigned to the current checkout, the\n     * list of shipping options will be empty.\n     *\n     * @returns The list of shipping options if any, otherwise undefined.\n     */\n    getShippingOptions(): ShippingOption[] | undefined {\n        const consignments = this._consignments.getConsignments();\n\n        if (consignments && consignments.length) {\n            return consignments[0].availableShippingOptions;\n        }\n\n        return;\n    }\n\n    /**\n     * Gets a list of consignments.\n     *\n     * If there are no consignments created for to the current checkout, the\n     * list will be empty.\n     *\n     * @returns The list of consignments if any, otherwise undefined.\n     */\n    getConsignments(): Consignment[] | undefined {\n        return this._consignments.getConsignments();\n    }\n\n    /**\n     * Gets the selected shipping option for the current checkout.\n     *\n     * @returns The shipping option object if there is a selected option,\n     * otherwise undefined.\n     */\n    getSelectedShippingOption(): ShippingOption | undefined {\n        const consignments = this._consignments.getConsignments();\n\n        if (!consignments || !consignments.length) {\n            return;\n        }\n\n        return consignments[0].selectedShippingOption;\n    }\n\n    /**\n     * Gets a list of countries available for shipping.\n     *\n     * @returns The list of countries if it is loaded, otherwise undefined.\n     */\n    getShippingCountries(): Country[] | undefined {\n        return this._shippingCountries.getShippingCountries();\n    }\n\n    /**\n     * Gets the billing address of an order.\n     *\n     * @returns The billing address object if it is loaded, otherwise undefined.\n     */\n    getBillingAddress(): BillingAddress | undefined {\n        return this._billingAddress.getBillingAddress();\n    }\n\n    /**\n     * Gets a list of countries available for billing.\n     *\n     * @returns The list of countries if it is loaded, otherwise undefined.\n     */\n    getBillingCountries(): Country[] | undefined {\n        return this._countries.getCountries();\n    }\n\n    /**\n     * Gets a list of payment methods available for checkout.\n     *\n     * @returns The list of payment methods if it is loaded, otherwise undefined.\n     */\n    getPaymentMethods(): PaymentMethod[] | undefined {\n        return this._paymentMethods.getPaymentMethods();\n    }\n\n    /**\n     * Gets a payment method by an id.\n     *\n     * The method returns undefined if unable to find a payment method with the\n     * specified id, either because it is not available for the customer, or it\n     * is not loaded.\n     *\n     * @param methodId - The identifier of the payment method.\n     * @param gatewayId - The identifier of a payment provider providing the\n     * payment method.\n     * @returns The payment method object if loaded and available, otherwise,\n     * undefined.\n     */\n    getPaymentMethod(methodId: string, gatewayId?: string): PaymentMethod | undefined {\n        return this._paymentMethods.getPaymentMethod(methodId, gatewayId);\n    }\n\n    /**\n     * Gets the payment method that is selected for checkout.\n     *\n     * @returns The payment method object if there is a selected method;\n     * undefined if otherwise.\n     */\n    getSelectedPaymentMethod(): PaymentMethod | undefined {\n        const payment = this._payment.getPaymentId();\n\n        return payment && this._paymentMethods.getPaymentMethod(payment.providerId, payment.gatewayId);\n    }\n\n    /**\n     * Gets the current cart.\n     *\n     * @returns The current cart object if it is loaded, otherwise undefined.\n     */\n    getCart(): Cart | undefined {\n        return this._cart.getCart();\n    }\n\n    /**\n     * Gets a list of coupons that are applied to the current checkout.\n     *\n     * @returns The list of applied coupons if there is any, otherwise undefined.\n     */\n    getCoupons(): Coupon[] | undefined {\n        return this._coupons.getCoupons();\n    }\n\n    /**\n     * Gets a list of gift certificates that are applied to the current checkout.\n     *\n     * @returns The list of applied gift certificates if there is any, otherwise undefined.\n     */\n    getGiftCertificates(): GiftCertificate[] | undefined {\n        return this._giftCertificates.getGiftCertificates();\n    }\n\n    /**\n     * Gets the current customer.\n     *\n     * @returns The current customer object if it is loaded, otherwise\n     * undefined.\n     */\n    getCustomer(): Customer | undefined {\n        return this._customer.getCustomer();\n    }\n\n    /**\n     * Checks if payment data is required or not.\n     *\n     * If payment data is required, customers should be prompted to enter their\n     * payment details.\n     *\n     * ```js\n     * if (state.checkout.isPaymentDataRequired()) {\n     *     // Render payment form\n     * } else {\n     *     // Render \"Payment is not required for this order\" message\n     * }\n     * ```\n     *\n     * @param useStoreCredit - If true, check whether payment data is required\n     * with store credit applied; otherwise, check without store credit.\n     * @returns True if payment data is required, otherwise false.\n     */\n    isPaymentDataRequired(useStoreCredit?: boolean): boolean {\n        return this._payment.isPaymentDataRequired(useStoreCredit);\n    }\n\n    /**\n     * Checks if payment data is submitted or not.\n     *\n     * If payment data is already submitted using a payment method, customers\n     * should not be prompted to enter their payment details again.\n     *\n     * @param methodId - The identifier of the payment method.\n     * @param gatewayId - The identifier of a payment provider providing the\n     * payment method.\n     * @returns True if payment data is submitted, otherwise false.\n     */\n    isPaymentDataSubmitted(methodId: string, gatewayId?: string): boolean {\n        return this._payment.isPaymentDataSubmitted(this.getPaymentMethod(methodId, gatewayId));\n    }\n\n    /**\n     * Gets a list of payment instruments associated with the current customer.\n     *\n     * @returns The list of payment instruments if it is loaded, otherwise undefined.\n     */\n    getInstruments(): Instrument[] | undefined {\n        return this._instruments.getInstruments();\n    }\n\n    /**\n     * Gets a set of form fields that should be presented to customers in order\n     * to capture their billing address for a specific country.\n     *\n     * @param countryCode - A 2-letter country code (ISO 3166-1 alpha-2).\n     * @returns The set of billing address form fields if it is loaded,\n     * otherwise undefined.\n     */\n    getBillingAddressFields(countryCode: string): FormField[] {\n        return this._form.getBillingAddressFields(this.getBillingCountries(), countryCode);\n    }\n\n    /**\n     * Gets a set of form fields that should be presented to customers in order\n     * to capture their shipping address for a specific country.\n     *\n     * @param countryCode - A 2-letter country code (ISO 3166-1 alpha-2).\n     * @returns The set of shipping address form fields if it is loaded,\n     * otherwise undefined.\n     */\n    getShippingAddressFields(countryCode: string): FormField[] {\n        return this._form.getShippingAddressFields(this.getShippingCountries(), countryCode);\n    }\n}\n","import { BillingAddressSelector } from '../billing';\nimport { CartSelector } from '../cart';\nimport { RequestError } from '../common/error/errors';\nimport { selector } from '../common/selector';\nimport { ConfigSelector } from '../config';\nimport { CouponSelector, GiftCertificateSelector } from '../coupon';\nimport { CustomerStrategySelector } from '../customer';\nimport { CountrySelector } from '../geography';\nimport { OrderSelector } from '../order';\nimport { PaymentMethodSelector, PaymentStrategySelector } from '../payment';\nimport { InstrumentSelector } from '../payment/instrument';\nimport { ConsignmentSelector, ShippingCountrySelector, ShippingStrategySelector } from '../shipping';\n\nimport CheckoutSelector from './checkout-selector';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for getting the error of any asynchronous checkout action, if\n * there is any.\n *\n * This object has a set of getters that would return an error if an action is\n * not executed successfully. For example, if you are unable to submit an order,\n * you can use this object to retrieve the reason for the failure.\n */\n@selector\nexport default class CheckoutStoreErrorSelector {\n    private _billingAddress: BillingAddressSelector;\n    private _cart: CartSelector;\n    private _checkout: CheckoutSelector;\n    private _config: ConfigSelector;\n    private _consignments: ConsignmentSelector;\n    private _countries: CountrySelector;\n    private _coupons: CouponSelector;\n    private _customerStrategies: CustomerStrategySelector;\n    private _giftCertificates: GiftCertificateSelector;\n    private _instruments: InstrumentSelector;\n    private _order: OrderSelector;\n    private _paymentMethods: PaymentMethodSelector;\n    private _paymentStrategies: PaymentStrategySelector;\n    private _shippingCountries: ShippingCountrySelector;\n    private _shippingStrategies: ShippingStrategySelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._billingAddress = selectors.billingAddress;\n        this._cart = selectors.cart;\n        this._checkout = selectors.checkout;\n        this._config = selectors.config;\n        this._consignments = selectors.consignments;\n        this._countries = selectors.countries;\n        this._coupons = selectors.coupons;\n        this._customerStrategies = selectors.customerStrategies;\n        this._giftCertificates = selectors.giftCertificates;\n        this._instruments = selectors.instruments;\n        this._order = selectors.order;\n        this._paymentMethods = selectors.paymentMethods;\n        this._paymentStrategies = selectors.paymentStrategies;\n        this._shippingCountries = selectors.shippingCountries;\n        this._shippingStrategies = selectors.shippingStrategies;\n    }\n\n    /**\n     * Gets the error of any checkout action that has failed.\n     *\n     * @returns The error object if unable to perform any checkout action,\n     * otherwise undefined.\n     */\n    getError(): Error | undefined {\n        // tslint:disable-next-line:cyclomatic-complexity\n        return this.getLoadCheckoutError() ||\n            this.getSubmitOrderError() ||\n            this.getFinalizeOrderError() ||\n            this.getLoadOrderError() ||\n            this.getLoadCartError() ||\n            this.getLoadBillingCountriesError() ||\n            this.getLoadShippingCountriesError() ||\n            this.getLoadPaymentMethodsError() ||\n            this.getLoadPaymentMethodError() ||\n            this.getInitializePaymentError() ||\n            this.getLoadShippingOptionsError() ||\n            this.getSelectShippingOptionError() ||\n            this.getSignInError() ||\n            this.getSignOutError() ||\n            this.getInitializeCustomerError() ||\n            this.getUpdateShippingAddressError() ||\n            this.getUpdateBillingAddressError() ||\n            this.getContinueAsGuestError() ||\n            this.getUpdateConsignmentError() ||\n            this.getCreateConsignmentsError() ||\n            this.getDeleteConsignmentError() ||\n            this.getInitializeShippingError() ||\n            this.getApplyCouponError() ||\n            this.getRemoveCouponError() ||\n            this.getApplyGiftCertificateError() ||\n            this.getRemoveGiftCertificateError() ||\n            this.getLoadInstrumentsError() ||\n            this.getDeleteInstrumentError() ||\n            this.getLoadConfigError();\n    }\n\n    /**\n     * Returns an error if unable to load the current checkout.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadCheckoutError(): Error | undefined {\n        return this._checkout.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to update the current checkout.\n     *\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateCheckoutError(): Error | undefined {\n        return this._checkout.getUpdateError();\n    }\n\n    /**\n     * Returns an error if unable to submit the current order.\n     *\n     * @returns The error object if unable to submit, otherwise undefined.\n     */\n    getSubmitOrderError(): Error | undefined {\n        return this._paymentStrategies.getExecuteError();\n    }\n\n    /**\n     * Returns an error if unable to finalize the current order.\n     *\n     * @returns The error object if unable to finalize, otherwise undefined.\n     */\n    getFinalizeOrderError(): Error | undefined {\n        return this._paymentStrategies.getFinalizeError();\n    }\n\n    /**\n     * Returns an error if unable to load the current order.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadOrderError(): Error | undefined {\n        return this._order.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to load the current cart.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadCartError(): Error | undefined {\n        return this._cart.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to load billing countries.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadBillingCountriesError(): Error | undefined {\n        return this._countries.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to load shipping countries.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadShippingCountriesError(): Error | undefined {\n        return this._shippingCountries.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to load payment methods.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadPaymentMethodsError(): Error | undefined {\n        return this._paymentMethods.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to load a specific payment method.\n     *\n     * @param methodId - The identifier of the payment method to load.\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadPaymentMethodError(methodId?: string): Error | undefined {\n        return this._paymentMethods.getLoadMethodError(methodId);\n    }\n\n    /**\n     * Returns an error if unable to initialize a specific payment method.\n     *\n     * @param methodId - The identifier of the payment method to initialize.\n     * @returns The error object if unable to initialize, otherwise undefined.\n     */\n    getInitializePaymentError(methodId?: string): Error | undefined {\n        return this._paymentStrategies.getInitializeError(methodId);\n    }\n\n    /**\n     * Returns an error if unable to sign in.\n     *\n     * @returns The error object if unable to sign in, otherwise undefined.\n     */\n    getSignInError(): Error | undefined {\n        return this._customerStrategies.getSignInError();\n    }\n\n    /**\n     * Returns an error if unable to sign out.\n     *\n     * @returns The error object if unable to sign out, otherwise undefined.\n     */\n    getSignOutError(): Error | undefined {\n        return this._customerStrategies.getSignOutError();\n    }\n\n    /**\n     * Returns an error if unable to initialize the customer step of a checkout\n     * process.\n     *\n     * @param methodId - The identifer of the initialization method to execute.\n     * @returns The error object if unable to initialize, otherwise undefined.\n     */\n    getInitializeCustomerError(methodId?: string): Error | undefined {\n        return this._customerStrategies.getInitializeError(methodId);\n    }\n\n    /**\n     * Returns an error if unable to load shipping options.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadShippingOptionsError(): Error | undefined {\n        return this._consignments.getLoadShippingOptionsError();\n    }\n\n    /**\n     * Returns an error if unable to select a shipping option.\n     *\n     * A consignment ID should be provided when checking for an error for a\n     * specific consignment, otherwise it will check for all available consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns The error object if unable to select, otherwise undefined.\n     */\n    getSelectShippingOptionError(consignmentId?: string): Error | undefined {\n        return this._shippingStrategies.getSelectOptionError() ||\n            this._consignments.getUpdateShippingOptionError(consignmentId);\n    }\n\n    /**\n     * Returns an error if unable to continue as guest.\n     *\n     * @returns The error object if unable to continue, otherwise undefined.\n     */\n    getContinueAsGuestError(): Error | undefined {\n        return this._billingAddress.getContinueAsGuestError();\n    }\n\n    /**\n     * Returns an error if unable to update billing address.\n     *\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateBillingAddressError(): Error | undefined {\n        return this._billingAddress.getUpdateError();\n    }\n\n    /**\n     * Returns an error if unable to update shipping address.\n     *\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateShippingAddressError(): Error | undefined {\n        return this._shippingStrategies.getUpdateAddressError();\n    }\n\n    /**\n     * Returns an error if unable to delete a consignment.\n     *\n     * A consignment ID should be provided when checking for an error for a\n     * specific consignment, otherwise it will check for all available consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns The error object if unable to delete, otherwise undefined.\n     */\n    getDeleteConsignmentError(consignmentId?: string): Error | undefined {\n        return this._consignments.getDeleteError(consignmentId);\n    }\n\n    /**\n     * Returns an error if unable to update a consignment.\n     *\n     * A consignment ID should be provided when checking for an error for a\n     * specific consignment, otherwise it will check for all available consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateConsignmentError(consignmentId?: string): Error | undefined {\n        return this._consignments.getUpdateError(consignmentId);\n    }\n\n    /**\n     * Returns an error if unable to create consignments.\n     *\n     * @returns The error object if unable to create, otherwise undefined.\n     */\n    getCreateConsignmentsError(): Error | undefined {\n        return this._consignments.getCreateError();\n    }\n\n    /**\n     * Returns an error if unable to initialize the shipping step of a checkout\n     * process.\n     *\n     * @param methodId - The identifer of the initialization method to execute.\n     * @returns The error object if unable to initialize, otherwise undefined.\n     */\n    getInitializeShippingError(methodId?: string): Error | undefined {\n        return this._shippingStrategies.getInitializeError(methodId);\n    }\n\n    /**\n     * Returns an error if unable to apply a coupon code.\n     *\n     * @returns The error object if unable to apply, otherwise undefined.\n     */\n    getApplyCouponError(): RequestError | undefined {\n        return this._coupons.getApplyError();\n    }\n\n    /**\n     * Returns an error if unable to remove a coupon code.\n     *\n     * @returns The error object if unable to remove, otherwise undefined.\n     */\n    getRemoveCouponError(): RequestError | undefined {\n        return this._coupons.getRemoveError();\n    }\n\n    /**\n     * Returns an error if unable to apply a gift certificate.\n     *\n     * @returns The error object if unable to apply, otherwise undefined.\n     */\n    getApplyGiftCertificateError(): RequestError | undefined {\n        return this._giftCertificates.getApplyError();\n    }\n\n    /**\n     * Returns an error if unable to remove a gift certificate.\n     *\n     * @returns The error object if unable to remove, otherwise undefined.\n     */\n    getRemoveGiftCertificateError(): RequestError | undefined {\n        return this._giftCertificates.getRemoveError();\n    }\n\n    /**\n     * Returns an error if unable to load payment instruments.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadInstrumentsError(): Error | undefined {\n        return this._instruments.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to delete a payment instrument.\n     *\n     * @param instrumentId - The identifier of the payment instrument to delete.\n     * @returns The error object if unable to delete, otherwise undefined.\n     */\n    getDeleteInstrumentError(instrumentId?: string): Error | undefined {\n        return this._instruments.getDeleteError(instrumentId);\n    }\n\n    /**\n     * Returns an error if unable to load the checkout configuration of a store.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadConfigError(): Error | undefined {\n        return this._config.getLoadError();\n    }\n}\n","import { BillingAddressSelector } from '../billing';\nimport { CartSelector } from '../cart';\nimport { selector } from '../common/selector';\nimport { ConfigSelector } from '../config';\nimport { CouponSelector, GiftCertificateSelector } from '../coupon';\nimport { CustomerStrategySelector } from '../customer';\nimport { CountrySelector } from '../geography';\nimport { OrderSelector } from '../order';\nimport { PaymentMethodSelector, PaymentStrategySelector } from '../payment';\nimport { InstrumentSelector } from '../payment/instrument';\nimport { ConsignmentSelector, ShippingCountrySelector, ShippingStrategySelector } from '../shipping';\n\nimport CheckoutSelector from './checkout-selector';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for checking the statuses of various asynchronous actions related\n * to checkout.\n *\n * This object has a set of getters that return true if an action is in\n * progress. For example, you can check whether a customer is submitting an\n * order and waiting for the request to complete.\n */\n@selector\nexport default class CheckoutStoreStatusSelector {\n    private _billingAddress: BillingAddressSelector;\n    private _cart: CartSelector;\n    private _checkout: CheckoutSelector;\n    private _config: ConfigSelector;\n    private _consignments: ConsignmentSelector;\n    private _countries: CountrySelector;\n    private _coupons: CouponSelector;\n    private _customerStrategies: CustomerStrategySelector;\n    private _giftCertificates: GiftCertificateSelector;\n    private _instruments: InstrumentSelector;\n    private _order: OrderSelector;\n    private _paymentMethods: PaymentMethodSelector;\n    private _paymentStrategies: PaymentStrategySelector;\n    private _shippingCountries: ShippingCountrySelector;\n    private _shippingStrategies: ShippingStrategySelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._billingAddress = selectors.billingAddress;\n        this._cart = selectors.cart;\n        this._checkout = selectors.checkout;\n        this._config = selectors.config;\n        this._consignments = selectors.consignments;\n        this._countries = selectors.countries;\n        this._coupons = selectors.coupons;\n        this._customerStrategies = selectors.customerStrategies;\n        this._giftCertificates = selectors.giftCertificates;\n        this._instruments = selectors.instruments;\n        this._order = selectors.order;\n        this._paymentMethods = selectors.paymentMethods;\n        this._paymentStrategies = selectors.paymentStrategies;\n        this._shippingCountries = selectors.shippingCountries;\n        this._shippingStrategies = selectors.shippingStrategies;\n    }\n\n    /**\n     * Checks whether any checkout action is pending.\n     *\n     * @returns True if there is a pending action, otherwise false.\n     */\n    isPending(): boolean {\n        // tslint:disable-next-line:cyclomatic-complexity\n        return this.isLoadingCheckout() ||\n            this.isSubmittingOrder() ||\n            this.isFinalizingOrder() ||\n            this.isLoadingOrder() ||\n            this.isLoadingCart() ||\n            this.isLoadingBillingCountries() ||\n            this.isLoadingShippingCountries() ||\n            this.isLoadingPaymentMethods() ||\n            this.isLoadingPaymentMethod() ||\n            this.isInitializingPayment() ||\n            this.isLoadingShippingOptions() ||\n            this.isSelectingShippingOption() ||\n            this.isSigningIn() ||\n            this.isSigningOut() ||\n            this.isInitializingCustomer() ||\n            this.isUpdatingBillingAddress() ||\n            this.isContinuingAsGuest() ||\n            this.isUpdatingShippingAddress() ||\n            this.isUpdatingConsignment() ||\n            this.isCreatingConsignments() ||\n            this.isDeletingConsignment() ||\n            this.isInitializingShipping() ||\n            this.isApplyingCoupon() ||\n            this.isRemovingCoupon() ||\n            this.isApplyingGiftCertificate() ||\n            this.isRemovingGiftCertificate() ||\n            this.isLoadingInstruments() ||\n            this.isDeletingInstrument() ||\n            this.isLoadingConfig() ||\n            this.isCustomerStepPending() ||\n            this.isPaymentStepPending();\n    }\n\n    /**\n     * Checks whether the current checkout is loading.\n     *\n     * @returns True if the current checkout is loading, otherwise false.\n     */\n    isLoadingCheckout(): boolean {\n        return this._checkout.isLoading();\n    }\n\n    /**\n     * Checks whether the current checkout is being updated.\n     *\n     * @returns True if the current checkout is being updated, otherwise false.\n     */\n    isUpdatingCheckout(): boolean {\n        return this._checkout.isUpdating();\n    }\n\n    /**\n     * Checks whether the current order is submitting.\n     *\n     * @returns True if the current order is submitting, otherwise false.\n     */\n    isSubmittingOrder(): boolean {\n        return this._paymentStrategies.isExecuting();\n    }\n\n    /**\n     * Checks whether the current order is finalizing.\n     *\n     * @returns True if the current order is finalizing, otherwise false.\n     */\n    isFinalizingOrder(): boolean {\n        return this._paymentStrategies.isFinalizing();\n    }\n\n    /**\n     * Checks whether the current order is loading.\n     *\n     * @returns True if the current order is loading, otherwise false.\n     */\n    isLoadingOrder(): boolean {\n        return this._order.isLoading();\n    }\n\n    /**\n     * Checks whether the current cart is loading.\n     *\n     * @returns True if the current cart is loading, otherwise false.\n     */\n    isLoadingCart(): boolean {\n        return this._cart.isLoading();\n    }\n\n    /**\n     * Checks whether billing countries are loading.\n     *\n     * @returns True if billing countries are loading, otherwise false.\n     */\n    isLoadingBillingCountries(): boolean {\n        return this._countries.isLoading();\n    }\n\n    /**\n     * Checks whether shipping countries are loading.\n     *\n     * @returns True if shipping countries are loading, otherwise false.\n     */\n    isLoadingShippingCountries(): boolean {\n        return this._shippingCountries.isLoading();\n    }\n\n    /**\n     * Checks whether payment methods are loading.\n     *\n     * @returns True if payment methods are loading, otherwise false.\n     */\n    isLoadingPaymentMethods(): boolean {\n        return this._paymentMethods.isLoading();\n    }\n\n    /**\n     * Checks whether a specific or any payment method is loading.\n     *\n     * The method returns true if no ID is provided and at least one payment\n     * method is loading.\n     *\n     * @param methodId - The identifier of the payment method to check.\n     * @returns True if the payment method is loading, otherwise false.\n     */\n    isLoadingPaymentMethod(methodId?: string): boolean {\n        return this._paymentMethods.isLoadingMethod(methodId);\n    }\n\n    /**\n     * Checks whether a specific or any payment method is initializing.\n     *\n     * The method returns true if no ID is provided and at least one payment\n     * method is initializing.\n     *\n     * @param methodId - The identifier of the payment method to check.\n     * @returns True if the payment method is initializing, otherwise false.\n     */\n    isInitializingPayment(methodId?: string): boolean {\n        return this._paymentStrategies.isInitializing(methodId);\n    }\n\n    /**\n     * Checks whether the current customer is signing in.\n     *\n     * If an ID is provided, the method also checks whether the customer is\n     * signing in using a specific customer method with the same ID.\n     *\n     * @param methodId - The identifier of the method used for signing in the\n     * current customer.\n     * @returns True if the customer is signing in, otherwise false.\n     */\n    isSigningIn(methodId?: string): boolean {\n        return this._customerStrategies.isSigningIn(methodId);\n    }\n\n    /**\n     * Checks whether the current customer is signing out.\n     *\n     * If an ID is provided, the method also checks whether the customer is\n     * signing out using a specific customer method with the same ID.\n     *\n     * @param methodId - The identifier of the method used for signing out the\n     * current customer.\n     * @returns True if the customer is signing out, otherwise false.\n     */\n    isSigningOut(methodId?: string): boolean {\n        return this._customerStrategies.isSigningOut(methodId);\n    }\n\n    /**\n     * Checks whether the customer step is initializing.\n     *\n     * If an ID is provided, the method also checks whether the customer step is\n     * initializing using a specific customer method with the same ID.\n     *\n     * @param methodId - The identifier of the method used for initializing the\n     * customer step of checkout.\n     * @returns True if the customer step is initializing, otherwise false.\n     */\n    isInitializingCustomer(methodId?: string): boolean {\n        return this._customerStrategies.isInitializing(methodId);\n    }\n\n    /**\n     * Checks whether shipping options are loading.\n     *\n     * @returns True if shipping options are loading, otherwise false.\n     */\n    isLoadingShippingOptions(): boolean {\n        return this._consignments.isLoadingShippingOptions();\n    }\n\n    /**\n     * Checks whether a shipping option is being selected.\n     *\n     * A consignment ID should be provided when checking if a shipping option\n     * is being selected for a specific consignment, otherwise it will check\n     * for all consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns True if selecting a shipping option, otherwise false.\n     */\n    isSelectingShippingOption(consignmentId?: string): boolean {\n        return this._shippingStrategies.isSelectingOption() ||\n            this._consignments.isUpdatingShippingOption(consignmentId);\n    }\n\n    /**\n     * Checks whether the billing address is being updated.\n     *\n     * @returns True if updating their billing address, otherwise false.\n     */\n    isUpdatingBillingAddress(): boolean {\n        return this._billingAddress.isUpdating();\n    }\n\n    /**\n     * Checks whether the shopper is continuing out as a guest.\n     *\n     * @returns True if continuing as guest, otherwise false.\n     */\n    isContinuingAsGuest(): boolean {\n        return this._billingAddress.isContinuingAsGuest();\n    }\n\n    /**\n     * Checks the shipping address is being updated.\n     *\n     * @returns True if updating their shipping address, otherwise false.\n     */\n    isUpdatingShippingAddress(): boolean {\n        return this._shippingStrategies.isUpdatingAddress();\n    }\n\n    /**\n     * Checks whether a given/any consignment is being updated.\n     *\n     * A consignment ID should be provided when checking for a specific consignment,\n     * otherwise it will check for any consignment.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns True if updating consignment(s), otherwise false.\n     */\n    isUpdatingConsignment(consignmentId?: string): boolean {\n        return this._consignments.isUpdating(consignmentId);\n    }\n\n    /**\n     * Checks whether a given/any consignment is being deleted.\n     *\n     * A consignment ID should be provided when checking for a specific consignment,\n     * otherwise it will check for any consignment.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns True if deleting consignment(s), otherwise false.\n     */\n    isDeletingConsignment(consignmentId?: string): boolean {\n        return this._consignments.isDeleting(consignmentId);\n    }\n\n    /**\n     * Checks whether a given/any consignment is being updated.\n     *\n     * A consignment ID should be provided when checking for a specific consignment,\n     * otherwise it will check for any consignment.\n     *\n     * @returns True if creating consignments, otherwise false.\n     */\n    isCreatingConsignments(): boolean {\n        return this._consignments.isCreating();\n    }\n\n    /**\n     * Checks whether the shipping step of a checkout process is initializing.\n     *\n     * If an identifier is provided, the method also checks whether the shipping\n     * step is initializing using a specific shipping method with the same\n     * identifier.\n     *\n     * @param methodId - The identifer of the initialization method to check.\n     * @returns True if the shipping step is initializing, otherwise false.\n     */\n    isInitializingShipping(methodId?: string) {\n        return this._shippingStrategies.isInitializing(methodId);\n    }\n\n    /**\n     * Checks whether the current customer is applying a coupon code.\n     *\n     * @returns True if applying a coupon code, otherwise false.\n     */\n    isApplyingCoupon(): boolean {\n        return this._coupons.isApplying();\n    }\n\n    /**\n     * Checks whether the current customer is removing a coupon code.\n     *\n     * @returns True if removing a coupon code, otherwise false.\n     */\n    isRemovingCoupon(): boolean {\n        return this._coupons.isRemoving();\n    }\n\n    /**\n     * Checks whether the current customer is applying a gift certificate.\n     *\n     * @returns True if applying a gift certificate, otherwise false.\n     */\n    isApplyingGiftCertificate(): boolean {\n        return this._giftCertificates.isApplying();\n    }\n\n    /**\n     * Checks whether the current customer is removing a gift certificate.\n     *\n     * @returns True if removing a gift certificate, otherwise false.\n     */\n    isRemovingGiftCertificate(): boolean {\n        return this._giftCertificates.isRemoving();\n    }\n\n    /**\n     * Checks whether the current customer's payment instruments are loading.\n     *\n     * @returns True if payment instruments are loading, otherwise false.\n     */\n    isLoadingInstruments(): boolean {\n        return this._instruments.isLoading();\n    }\n\n    /**\n     * Checks whether the current customer is deleting a payment instrument.\n     *\n     * @returns True if deleting a payment instrument, otherwise false.\n     */\n    isDeletingInstrument(instrumentId?: string): boolean {\n        return this._instruments.isDeleting(instrumentId);\n    }\n\n    /**\n     * Checks whether the checkout configuration of a store is loading.\n     *\n     * @returns True if the configuration is loading, otherwise false.\n     */\n    isLoadingConfig(): boolean {\n        return this._config.isLoading();\n    }\n\n    /**\n     * Checks whether the customer step of a checkout is in a pending state.\n     *\n     * The customer step is considered to be pending if it is in the process of\n     * initializing, signing in, signing out, and/or interacting with a customer\n     * widget.\n     *\n     * @returns True if the customer step is pending, otherwise false.\n     */\n    isCustomerStepPending(): boolean {\n        return this._customerStrategies.isInitializing() ||\n            this._customerStrategies.isSigningIn() ||\n            this._customerStrategies.isSigningOut() ||\n            this._customerStrategies.isWidgetInteracting();\n    }\n\n    /**\n     * Checks whether the payment step of a checkout is in a pending state.\n     *\n     * The payment step is considered to be pending if it is in the process of\n     * initializing, submitting an order, finalizing an order, and/or\n     * interacting with a payment widget.\n     *\n     * @returns True if the payment step is pending, otherwise false.\n     */\n    isPaymentStepPending(): boolean {\n        return this._paymentStrategies.isInitializing() ||\n            this._paymentStrategies.isExecuting() ||\n            this._paymentStrategies.isFinalizing() ||\n            this._paymentStrategies.isWidgetInteracting();\n    }\n}\n","import {\n    CheckoutSelectors,\n    CheckoutStoreErrorSelector,\n    CheckoutStoreSelector,\n    CheckoutStoreStatusSelector,\n    InternalCheckoutSelectors,\n} from '../checkout';\n\nexport default function createCheckoutSelectors(selectors: InternalCheckoutSelectors): CheckoutSelectors {\n    const data = new CheckoutStoreSelector(selectors);\n    const errors = new CheckoutStoreErrorSelector(selectors);\n    const statuses = new CheckoutStoreStatusSelector(selectors);\n\n    return {\n        data,\n        errors,\n        statuses,\n    };\n}\n","import { toSingleLine } from '../utility';\n\nexport default class ErrorMessageTransformer<TError extends Error = Error> {\n    constructor(\n        private _messageCustomizer: (type: TError) => string\n    ) {}\n\n    transform(error: TError): TError {\n        error.message = toSingleLine(this._messageCustomizer(error));\n\n        return error;\n    }\n}\n","export default function toSingleLine(input?: string) {\n    if (!input) {\n        return '';\n    }\n\n    return input.split(/(?:\\r\\n|\\n|\\r)/)\n        .map(line => line.replace(/^\\s+/gm, ''))\n        .join(' ')\n        .trim();\n}\n","import { Action, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs';\n\nimport { AddressRequestBody } from '../address';\nimport { BillingAddressActionCreator, BillingAddressRequestBody } from '../billing';\nimport { ErrorActionCreator, ErrorMessageTransformer } from '../common/error';\nimport { RequestOptions } from '../common/http-request';\nimport { ConfigActionCreator } from '../config';\nimport { CouponActionCreator, GiftCertificateActionCreator } from '../coupon';\nimport { CustomerCredentials, CustomerInitializeOptions, CustomerRequestOptions, CustomerStrategyActionCreator, GuestCredentials } from '../customer';\nimport { CountryActionCreator } from '../geography';\nimport { OrderActionCreator, OrderRequestBody } from '../order';\nimport { SpamProtectionActionCreator, SpamProtectionOptions } from '../order/spam-protection';\nimport { PaymentInitializeOptions, PaymentMethodActionCreator, PaymentRequestOptions, PaymentStrategyActionCreator } from '../payment';\nimport { InstrumentActionCreator } from '../payment/instrument';\nimport { ConsignmentsRequestBody, ConsignmentActionCreator, ShippingCountryActionCreator, ShippingInitializeOptions, ShippingRequestOptions, ShippingStrategyActionCreator } from '../shipping';\nimport { ConsignmentAssignmentRequestBody, ConsignmentUpdateRequestBody } from '../shipping/consignment';\n\nimport { CheckoutRequestBody } from './checkout';\nimport CheckoutActionCreator from './checkout-action-creator';\nimport CheckoutParams from './checkout-params';\nimport CheckoutSelectors from './checkout-selectors';\nimport CheckoutStore from './checkout-store';\nimport createCheckoutSelectors from './create-checkout-selectors';\nimport createCheckoutServiceErrorTransformer from './create-checkout-service-error-transformer';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for completing the checkout process for the current customer.\n *\n * This object can be used to collect all information that is required for\n * checkout, such as shipping and billing information. It can also be used to\n * retrieve the current checkout state and subscribe to its changes.\n */\nexport default class CheckoutService {\n    private _state: CheckoutSelectors;\n    private _errorTransformer: ErrorMessageTransformer;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _store: CheckoutStore,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _configActionCreator: ConfigActionCreator,\n        private _consignmentActionCreator: ConsignmentActionCreator,\n        private _countryActionCreator: CountryActionCreator,\n        private _couponActionCreator: CouponActionCreator,\n        private _customerStrategyActionCreator: CustomerStrategyActionCreator,\n        private _errorActionCreator: ErrorActionCreator,\n        private _giftCertificateActionCreator: GiftCertificateActionCreator,\n        private _instrumentActionCreator: InstrumentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _shippingCountryActionCreator: ShippingCountryActionCreator,\n        private _shippingStrategyActionCreator: ShippingStrategyActionCreator,\n        private _spamProtectionActionCreator: SpamProtectionActionCreator\n    ) {\n        this._state = createCheckoutSelectors(this._store.getState());\n        this._errorTransformer = createCheckoutServiceErrorTransformer();\n\n        this._store.subscribe(state => {\n            this._state = createCheckoutSelectors(state);\n        });\n    }\n\n    /**\n     * Returns a snapshot of the current checkout state.\n     *\n     * The method returns a new instance every time there is a change in the\n     * checkout state. You can query the state by calling any of its getter\n     * methods.\n     *\n     * ```js\n     * const state = service.getState();\n     *\n     * console.log(state.data.getOrder());\n     * console.log(state.errors.getSubmitOrderError());\n     * console.log(state.statuses.isSubmittingOrder());\n     * ```\n     *\n     * @returns The current customer's checkout state\n     */\n    getState(): CheckoutSelectors {\n        return this._state;\n    }\n\n    /**\n     * Notifies all subscribers with the current state.\n     *\n     * When this method gets called, the subscribers get called regardless if\n     * they have any filters applied.\n     */\n    notifyState(): void {\n        this._store.notifyState();\n    }\n\n    /**\n     * Subscribes to any changes to the current state.\n     *\n     * The method registers a callback function and executes it every time there\n     * is a change in the checkout state.\n     *\n     * ```js\n     * service.subscribe(state => {\n     *     console.log(state.data.getCart());\n     * });\n     * ```\n     *\n     * The method can be configured to notify subscribers only regarding\n     * relevant changes, by providing a filter function.\n     *\n     * ```js\n     * const filter = state => state.data.getCart();\n     *\n     * // Only trigger the subscriber when the cart changes.\n     * service.subscribe(state => {\n     *     console.log(state.data.getCart())\n     * }, filter);\n     * ```\n     *\n     * @param subscriber - The function to subscribe to state changes.\n     * @param filters - One or more functions to filter out irrelevant state\n     * changes. If more than one function is provided, the subscriber will only\n     * be triggered if all conditions are met.\n     * @returns A function, if called, will unsubscribe the subscriber.\n     */\n    subscribe(\n        subscriber: (state: CheckoutSelectors) => void,\n        ...filters: Array<(state: CheckoutSelectors) => any>\n    ): () => void {\n        return this._store.subscribe(\n            () => subscriber(this.getState()),\n            ...filters.map(filter => (state: InternalCheckoutSelectors) => filter(createCheckoutSelectors(state)))\n        );\n    }\n\n    /**\n     * Loads the current checkout.\n     *\n     * This method can only be called if there is an active checkout. Also, it\n     * can only retrieve data that belongs to the current customer. When it is\n     * successfully executed, you can retrieve the data by calling\n     * `CheckoutStoreSelector#getCheckout`.\n     *\n     * ```js\n     * const state = await service.loadCheckout('0cfd6c06-57c3-4e29-8d7a-de55cc8a9052');\n     *\n     * console.log(state.data.getCheckout());\n     * ```\n     *\n     * @param id - The identifier of the checkout to load, or the default checkout if not provided.\n     * @param options - Options for loading the current checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    loadCheckout(id?: string, options?: RequestOptions<CheckoutParams>): Promise<CheckoutSelectors> {\n        return this._dispatch(id ?\n            this._checkoutActionCreator.loadCheckout(id, options) :\n            this._checkoutActionCreator.loadDefaultCheckout(options)\n        );\n    }\n\n    /**\n     * Updates specific properties of the current checkout.\n     *\n     * ```js\n     * const state = await service.updateCheckout(checkout);\n     *\n     * console.log(state.data.getCheckout());\n     * ```\n     *\n     * @param payload - The checkout properties to be updated.\n     * @param options - Options for loading the current checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    updateCheckout(payload: CheckoutRequestBody, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._checkoutActionCreator.updateCheckout(payload, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Loads an order by an id.\n     *\n     * The method can only retrieve an order if the order belongs to the current\n     * customer. If it is successfully executed, the data can be retrieved by\n     * calling `CheckoutStoreSelector#getOrder`.\n     *\n     * ```js\n     * const state = await service.loadOrder(123);\n     *\n     * console.log(state.data.getOrder());\n     * ```\n     *\n     * @param orderId - The identifier of the order to load.\n     * @param options - Options for loading the order.\n     * @returns A promise that resolves to the current state.\n     */\n    loadOrder(orderId: number, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const loadCheckoutAction = this._orderActionCreator.loadOrder(orderId, options);\n        const loadConfigAction = this._configActionCreator.loadConfig(options);\n\n        return Promise.all([\n            this._dispatch(loadCheckoutAction),\n            this._dispatch(loadConfigAction, { queueId: 'config' }),\n        ])\n            .then(() => this.getState());\n    }\n\n    /**\n     * Submits an order, thereby completing a checkout process.\n     *\n     * Before you can submit an order, you must initialize the payment method\n     * chosen by the customer by calling `CheckoutService#initializePayment`.\n     *\n     * ```js\n     * await service.initializePayment({ methodId: 'braintree' });\n     * await service.submitOrder({\n     *     payment: {\n     *         methodId: 'braintree',\n     *         paymentData: {\n     *             ccExpiry: { month: 10, year: 20 },\n     *             ccName: 'BigCommerce',\n     *             ccNumber: '4111111111111111',\n     *             ccCvv: 123,\n     *         },\n     *     },\n     * });\n     * ```\n     *\n     * You are not required to include `paymentData` if the order does not\n     * require additional payment details. For example, the customer has already\n     * entered their payment details on the cart page using one of the hosted\n     * payment methods, such as PayPal. Or the customer has applied a gift\n     * certificate that exceeds the grand total amount.\n     *\n     * If the order is submitted successfully, you can retrieve the newly\n     * created order by calling `CheckoutStoreSelector#getOrder`.\n     *\n     * ```js\n     * const state = await service.submitOrder(payload);\n     *\n     * console.log(state.data.getOrder());\n     * ```\n     *\n     * @param payload - The request payload to submit for the current order.\n     * @param options - Options for submitting the current order.\n     * @returns A promise that resolves to the current state.\n     */\n    submitOrder(payload: OrderRequestBody, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.execute(payload, options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * Finalizes the submission process for an order.\n     *\n     * This method is only required for certain hosted payment methods that\n     * require a customer to enter their credit card details on their website.\n     * You need to call this method once the customer has redirected back to\n     * checkout in order to complete the checkout process.\n     *\n     * If the method is called before order finalization is required or for a\n     * payment method that does not require order finalization, an error will be\n     * thrown. Conversely, if the method is called successfully, you should\n     * immediately redirect the customer to the order confirmation page.\n     *\n     * ```js\n     * try {\n     *     await service.finalizeOrderIfNeeded();\n     *\n     *     window.location.assign('/order-confirmation');\n     * } catch (error) {\n     *     if (error.type !== 'order_finalization_not_required') {\n     *         throw error;\n     *     }\n     * }\n     * ```\n     *\n     * @param options - Options for finalizing the current order.\n     * @returns A promise that resolves to the current state.\n     * @throws `OrderFinalizationNotRequiredError` error if order finalization\n     * is not required for the current order at the time of execution.\n     */\n    finalizeOrderIfNeeded(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.finalize(options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * Loads a list of payment methods available for checkout.\n     *\n     * If a customer enters their payment details before navigating to the\n     * checkout page (i.e.: using PayPal checkout button on the cart page), only\n     * one payment method will be available for the customer - the selected\n     * payment method. Otherwise, by default, all payment methods configured by\n     * the merchant will be available for the customer.\n     *\n     * Once the method is executed successfully, you can call\n     * `CheckoutStoreSelector#getPaymentMethods` to retrieve the list of payment\n     * methods.\n     *\n     * ```js\n     * const state = service.loadPaymentMethods();\n     *\n     * console.log(state.data.getPaymentMethods());\n     * ```\n     *\n     * @param options - Options for loading the payment methods that are\n     * available to the current customer.\n     * @returns A promise that resolves to the current state.\n     */\n    loadPaymentMethods(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentMethodActionCreator.loadPaymentMethods(options);\n\n        return this._dispatch(action, { queueId: 'paymentMethods' });\n    }\n\n    /**\n     * Loads a payment method by an id.\n     *\n     * This method does not work with multi-option payment providers. Due to its\n     * limitation, it is deprecated and will be removed in the future.\n     *\n     * @deprecated\n     * @internal\n     * @param methodId - The identifier for the payment method to load.\n     * @param options - Options for loading the payment method.\n     * @returns A promise that resolves to the current state.\n     */\n    loadPaymentMethod(methodId: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentMethodActionCreator.loadPaymentMethod(methodId, options);\n\n        return this._dispatch(action, { queueId: 'paymentMethods' });\n    }\n\n    /**\n     * Initializes the payment step of a checkout process.\n     *\n     * Before a payment method can accept payment details, it must first be\n     * initialized. Some payment methods require you to provide additional\n     * initialization options. For example, Amazon requires a container ID in\n     * order to initialize their payment widget.\n     *\n     * ```js\n     * await service.initializePayment({\n     *     methodId: 'amazon',\n     *     amazon: {\n     *         container: 'walletWidget',\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the payment step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    initializePayment(options: PaymentInitializeOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * De-initializes the payment step of a checkout process.\n     *\n     * The method should be called once you no longer require a payment method\n     * to be initialized. It can perform any necessary clean-up behind the\n     * scene, i.e.: remove DOM nodes or event handlers that are attached as a\n     * result of payment initialization.\n     *\n     * ```js\n     * await service.deinitializePayment({\n     *     methodId: 'amazon',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the payment step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializePayment(options: PaymentRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.deinitialize(options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * Loads a list of countries available for billing.\n     *\n     * Once you make a successful request, you will be able to retrieve the list\n     * of countries by calling `CheckoutStoreSelector#getBillingCountries`.\n     *\n     * ```js\n     * const state = await service.loadBillingCountries();\n     *\n     * console.log(state.data.getBillingCountries());\n     * ```\n     *\n     * @param options - Options for loading the available billing countries.\n     * @returns A promise that resolves to the current state.\n     */\n    loadBillingCountries(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._countryActionCreator.loadCountries(options);\n\n        return this._dispatch(action, { queueId: 'billingCountries' });\n    }\n\n    /**\n     * Loads a list of countries available for shipping.\n     *\n     * The list is determined based on the shipping zones configured by a\n     * merchant. Once you make a successful call, you will be able to retrieve\n     * the list of available shipping countries by calling\n     * `CheckoutStoreSelector#getShippingCountries`.\n     *\n     * ```js\n     * const state = await service.loadShippingCountries();\n     *\n     * console.log(state.data.getShippingCountries());\n     * ```\n     *\n     * @param options - Options for loading the available shipping countries.\n     * @returns A promise that resolves to the current state.\n     */\n    loadShippingCountries(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingCountryActionCreator.loadCountries(options);\n\n        return this._dispatch(action, { queueId: 'shippingCountries' });\n    }\n\n    /**\n     * Loads a set of form fields that should be presented to customers in order\n     * to capture their billing address.\n     *\n     * Once the method has been executed successfully, you can call\n     * `CheckoutStoreSelector#getBillingAddressFields` to retrieve the set of\n     * form fields.\n     *\n     * ```js\n     * const state = service.loadBillingAddressFields();\n     *\n     * console.log(state.data.getBillingAddressFields('US'));\n     * ```\n     *\n     * @param options - Options for loading the billing address form fields.\n     * @returns A promise that resolves to the current state.\n     */\n    loadBillingAddressFields(options?: RequestOptions): Promise<CheckoutSelectors> {\n        return this.loadBillingCountries(options);\n    }\n\n    /**\n     * Loads a set of form fields that should be presented to customers in order\n     * to capture their shipping address.\n     *\n     * Once the method has been executed successfully, you can call\n     * `CheckoutStoreSelector#getShippingAddressFields` to retrieve the set of\n     * form fields.\n     *\n     * ```js\n     * const state = service.loadShippingAddressFields();\n     *\n     * console.log(state.data.getShippingAddressFields('US'));\n     * ```\n     *\n     * @param options - Options for loading the shipping address form fields.\n     * @returns A promise that resolves to the current state.\n     */\n    loadShippingAddressFields(options?: RequestOptions): Promise<CheckoutSelectors> {\n        return this.loadShippingCountries(options);\n    }\n\n    /**\n     * Initializes the sign-in step of a checkout process.\n     *\n     * Some payment methods, such as Amazon, have their own sign-in flow. In\n     * order to support them, this method must be called.\n     *\n     * ```js\n     * await service.initializeCustomer({\n     *     methodId: 'amazon',\n     *     amazon: {\n     *         container: 'signInButton',\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the customer step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeCustomer(options?: CustomerInitializeOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * De-initializes the sign-in step of a checkout process.\n     *\n     * It should be called once you no longer want to prompt customers to sign\n     * in. It can perform any necessary clean-up behind the scene, i.e.: remove\n     * DOM nodes or event handlers that are attached as a result of customer\n     * initialization.\n     *\n     * ```js\n     * await service.deinitializeCustomer({\n     *     methodId: 'amazon',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the customer step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeCustomer(options?: CustomerRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.deinitialize(options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * Continues to check out as a guest.\n     *\n     * The customer is required to provide their email address in order to\n     * continue. Once they provide their email address, it will be stored as a\n     * part of their billing address.\n     *\n     * @param credentials - The guest credentials to use.\n     * @param options - Options for continuing as a guest.\n     * @returns A promise that resolves to the current state.\n     */\n    continueAsGuest(credentials: GuestCredentials, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._billingAddressActionCreator.continueAsGuest(credentials, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Signs into a customer's registered account.\n     *\n     * Once the customer is signed in successfully, the checkout state will be\n     * populated with information associated with the customer, such as their\n     * saved addresses. You can call `CheckoutStoreSelector#getCustomer` to\n     * retrieve the data.\n     *\n     * ```js\n     * const state = await service.signInCustomer({\n     *     email: 'foo@bar.com',\n     *     password: 'password123',\n     * });\n     *\n     * console.log(state.data.getCustomer());\n     * ```\n     *\n     * @param credentials - The credentials to be used for signing in the customer.\n     * @param options - Options for signing in the customer.\n     * @returns A promise that resolves to the current state.\n     */\n    signInCustomer(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.signIn(credentials, options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * Signs out the current customer if they are previously signed in.\n     *\n     * Once the customer is successfully signed out, the checkout state will be\n     * reset automatically.\n     *\n     * ```js\n     * const state = await service.signOutCustomer();\n     *\n     * // The returned object should not contain information about the previously signed-in customer.\n     * console.log(state.data.getCustomer());\n     * ```\n     *\n     * @param options - Options for signing out the customer.\n     * @returns A promise that resolves to the current state.\n     */\n    signOutCustomer(options?: CustomerRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.signOut(options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * Loads a list of shipping options available for checkout.\n     *\n     * Available shipping options can only be determined once a customer\n     * provides their shipping address. If the method is executed successfully,\n     * `CheckoutStoreSelector#getShippingOptions` can be called to retrieve the\n     * list of shipping options.\n     *\n     * ```js\n     * const state = await service.loadShippingOptions();\n     *\n     * console.log(state.data.getShippingOptions());\n     * ```\n     *\n     * @param options - Options for loading the available shipping options.\n     * @returns A promise that resolves to the current state.\n     */\n    loadShippingOptions(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.loadShippingOptions(options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Initializes the shipping step of a checkout process.\n     *\n     * Some payment methods, such as Amazon, can provide shipping information to\n     * be used for checkout. In order to support them, this method must be\n     * called.\n     *\n     * ```js\n     * await service.initializeShipping({\n     *     methodId: 'amazon',\n     *     amazon: {\n     *         container: 'addressBook',\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the shipping step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeShipping(options?: ShippingInitializeOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * De-initializes the shipping step of a checkout process.\n     *\n     * It should be called once you no longer need to collect shipping details.\n     * It can perform any necessary clean-up behind the scene, i.e.: remove DOM\n     * nodes or event handlers that are attached as a result of shipping\n     * initialization.\n     *\n     * ```js\n     * await service.deinitializeShipping({\n     *     methodId: 'amazon',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the shipping step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeShipping(options?: ShippingRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.deinitialize(options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Selects a shipping option for the current address.\n     *\n     * If a shipping option has an additional cost, the quote for the current\n     * order will be adjusted once the option is selected.\n     *\n     * ```js\n     * const state = await service.selectShippingOption('address-id', 'shipping-option-id');\n     *\n     * console.log(state.data.getSelectedShippingOption());\n     * ```\n     *\n     * @param shippingOptionId - The identifier of the shipping option to\n     * select.\n     * @param options - Options for selecting the shipping option.\n     * @returns A promise that resolves to the current state.\n     */\n    selectShippingOption(shippingOptionId: string, options?: ShippingRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.selectOption(shippingOptionId, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Updates the shipping address for the current checkout.\n     *\n     * When a customer updates their shipping address for an order, they will\n     * see an updated list of shipping options and the cost for each option,\n     * unless no options are available. If the update is successful, you can\n     * call `CheckoutStoreSelector#getShippingAddress` to retrieve the address.\n     *\n     * If the shipping address changes and the selected shipping option becomes\n     * unavailable for the updated address, the shipping option will be\n     * deselected.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.updateShippingAddress(address);\n     *\n     * console.log(state.data.getShippingAddress());\n     * ```\n     *\n     * @param address - The address to be used for shipping.\n     * @param options - Options for updating the shipping address.\n     * @returns A promise that resolves to the current state.\n     */\n    updateShippingAddress(address: Partial<AddressRequestBody>, options?: ShippingRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.updateAddress(address, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Creates consignments given a list.\n     *\n     * Note: this is used when items need to be shipped to multiple addresses,\n     * for single shipping address, use `CheckoutService#updateShippingAddress`.\n     *\n     * When consignments are created, an updated list of shipping options will\n     * become available for each consignment, unless no options are available.\n     * If the update is successful, you can call\n     * `CheckoutStoreSelector#getConsignments` to retrieve the updated list of\n     * consignments.'\n     *\n     * Beware that if a consignment includes all line items from another\n     * consignment, that consignment will be deleted as a valid consignment must\n     * include at least one valid line item.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.createConsignments(consignments);\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignments - The list of consignments to be created.\n     * @param options - Options for updating the shipping address.\n     * @returns A promise that resolves to the current state.\n     */\n    createConsignments(\n        consignments: ConsignmentsRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.createConsignments(consignments, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Deletes a consignment\n     *\n     * ```js\n     * const state = await service.deleteConsignment('55c96cda6f04c');\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignmentId - The ID of the consignment to be deleted\n     * @param options - Options for the consignment delete request\n     * @returns A promise that resolves to the current state.\n     */\n    deleteConsignment(\n        consignmentId: string,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.deleteConsignment(consignmentId, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Updates a specific consignment.\n     *\n     * Note: this is used when items need to be shipped to multiple addresses,\n     * for single shipping address, use `CheckoutService#selectShippingOption`.\n     *\n     * When a shipping address for a consignment is updated, an updated list of\n     * shipping options will become available for the consignment, unless no\n     * options are available. If the update is successful, you can call\n     * `CheckoutStoreSelector#getConsignments` to retrieve updated list of\n     * consignments.\n     *\n     * Beware that if the updated consignment includes all line items from another\n     * consignment, that consignment will be deleted as a valid consignment must\n     * include at least one valid line item.\n     *\n     * If the shipping address changes and the selected shipping option becomes\n     * unavailable for the updated address, the shipping option will be\n     * deselected.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.updateConsignment(consignment);\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignment - The consignment data that will be used.\n     * @param options - Options for updating the shipping address.\n     * @returns A promise that resolves to the current state.\n     */\n    updateConsignment(\n        consignment: ConsignmentUpdateRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.updateConsignment(consignment, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Convenience method that assigns items to be shipped to a specific address.\n     *\n     * Note: this method finds an existing consignment that matches the provided address\n     * and assigns the provided items. If no consignment matches the address, a new one\n     * will be created.\n     *\n     * @param consignment - The consignment data that will be used.\n     * @param options - Options for the request\n     * @returns A promise that resolves to the current state.\n     */\n    assignItemsToAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.assignItemsByAddress(consignment, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Convenience method that unassigns items from a specific shipping address.\n     *\n     * Note: this method finds an existing consignment that matches the provided address\n     * and unassigns the specified items. If the consignment ends up with no line items\n     * after the unassignment, it will be deleted.\n     *\n     * @param consignment - The consignment data that will be used.\n     * @param options - Options for the request\n     * @returns A promise that resolves to the current state.\n     */\n    unassignItemsToAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.unassignItemsByAddress(consignment, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Selects a shipping option for a given consignment.\n     *\n     * Note: this is used when items need to be shipped to multiple addresses,\n     * for single shipping address, use `CheckoutService#updateShippingAddres`.\n     *\n     * If a shipping option has an additional cost, the quote for the current\n     * order will be adjusted once the option is selected.\n     *\n     * ```js\n     * const state = await service.selectConsignmentShippingOption(consignmentId, optionId);\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignmentId - The identified of the consignment to be updated.\n     * @param shippingOptionId - The identifier of the shipping option to\n     * select.\n     * @param options - Options for selecting the shipping option.\n     * @returns A promise that resolves to the current state.\n     */\n    selectConsignmentShippingOption(\n        consignmentId: string,\n        shippingOptionId: string,\n        options?: ShippingRequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.updateShippingOption({\n            id: consignmentId,\n            shippingOptionId,\n        }, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Updates the billing address for the current checkout.\n     *\n     * A customer must provide their billing address before they can proceed to\n     * pay for their order.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.updateBillingAddress(address);\n     *\n     * console.log(state.data.getBillingAddress());\n     * ```\n     *\n     * @param address - The address to be used for billing.\n     * @param options - Options for updating the billing address.\n     * @returns A promise that resolves to the current state.\n     */\n    updateBillingAddress(address: Partial<BillingAddressRequestBody>, options: RequestOptions = {}): Promise<CheckoutSelectors> {\n        const action = this._billingAddressActionCreator.updateAddress(address, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Applies a coupon code to the current checkout.\n     *\n     * Once the coupon code gets applied, the quote for the current checkout will\n     * be adjusted accordingly. The same coupon code cannot be applied more than\n     * once.\n     *\n     * ```js\n     * await service.applyCoupon('COUPON');\n     * ```\n     *\n     * @param code - The coupon code to apply to the current checkout.\n     * @param options - Options for applying the coupon code.\n     * @returns A promise that resolves to the current state.\n     */\n    applyCoupon(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._couponActionCreator.applyCoupon(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Removes a coupon code from the current checkout.\n     *\n     * Once the coupon code gets removed, the quote for the current checkout will\n     * be adjusted accordingly.\n     *\n     * ```js\n     * await service.removeCoupon('COUPON');\n     * ```\n     *\n     * @param code - The coupon code to remove from the current checkout.\n     * @param options - Options for removing the coupon code.\n     * @returns A promise that resolves to the current state.\n     */\n    removeCoupon(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._couponActionCreator.removeCoupon(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Applies a gift certificate to the current checkout.\n     *\n     * Once the gift certificate gets applied, the quote for the current\n     * checkout will be adjusted accordingly.\n     *\n     * ```js\n     * await service.applyGiftCertificate('GIFT_CERTIFICATE');\n     * ```\n     *\n     * @param code - The gift certificate to apply to the current checkout.\n     * @param options - Options for applying the gift certificate.\n     * @returns A promise that resolves to the current state.\n     */\n    applyGiftCertificate(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._giftCertificateActionCreator.applyGiftCertificate(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Removes a gift certificate from an order.\n     *\n     * Once the gift certificate gets removed, the quote for the current\n     * checkout will be adjusted accordingly.\n     *\n     * ```js\n     * await service.removeGiftCertificate('GIFT_CERTIFICATE');\n     * ```\n     *\n     * @param code - The gift certificate to remove from the current checkout.\n     * @param options - Options for removing the gift certificate.\n     * @returns A promise that resolves to the current state.\n     */\n    removeGiftCertificate(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._giftCertificateActionCreator.removeGiftCertificate(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Loads a list of payment instruments associated with a customer.\n     *\n     * Once the method has been called successfully, you can retrieve the list\n     * of payment instruments by calling `CheckoutStoreSelector#getInstruments`.\n     * If the customer does not have any payment instruments on record, i.e.:\n     * credit card, you will get an empty list instead.\n     *\n     * ```js\n     * const state = service.loadInstruments();\n     *\n     * console.log(state.data.getInstruments());\n     * ```\n     *\n     * @returns A promise that resolves to the current state.\n     */\n    loadInstruments(): Promise<CheckoutSelectors> {\n        const action = this._instrumentActionCreator.loadInstruments();\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Deletes a payment instrument by an id.\n     *\n     * Once an instrument gets removed, it can no longer be retrieved using\n     * `CheckoutStoreSelector#getInstruments`.\n     *\n     * ```js\n     * const state = service.deleteInstrument('123');\n     *\n     * console.log(state.data.getInstruments());\n     * ```\n     *\n     * @param instrumentId - The identifier of the payment instrument to delete.\n     * @returns A promise that resolves to the current state.\n     */\n    deleteInstrument(instrumentId: string): Promise<CheckoutSelectors> {\n        const action = this._instrumentActionCreator.deleteInstrument(instrumentId);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Clear errors that have been collected from previous calls.\n     *\n     * ```js\n     * const state = await service.clearError(error);\n     *\n     * console.log(state.errors.getError());\n     * ```\n     *\n     * @param error - Specific error object to clear\n     * @returns A promise that resolves to the current state.\n     */\n    clearError(error: Error): Promise<CheckoutSelectors> {\n        const action = this._errorActionCreator.clearError(error);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Initializes the spam protection for order creation.\n     *\n     * With spam protection enabled, the customer has to be verified as\n     * a human. The order creation will fail if spam protection\n     * is enabled but verification fails.\n     *\n     * ```js\n     * await service.initializeSpamProtection({\n     *     containerId: 'spamProtectionContainer',\n     * });\n     * ```\n     *\n     * @param options - Options for initializing spam protection.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeSpamProtection(options: SpamProtectionOptions): Promise<CheckoutSelectors> {\n        const action = this._spamProtectionActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'spamProtection' });\n    }\n\n    /**\n     * Dispatches an action through the data store and returns the current state\n     * once the action is dispatched.\n     *\n     * @param action - The action to dispatch.\n     * @returns A promise that resolves to the current state.\n     */\n    private _dispatch(action: Action | Observable<Action> | ThunkAction<Action>, options?: { queueId?: string }): Promise<CheckoutSelectors> {\n        return this._store.dispatch(action, options)\n            .then(() => this.getState())\n            .catch(error => {\n                throw this._errorTransformer.transform(error);\n            });\n    }\n}\n","import { ErrorMessageTransformer } from '../common/error';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../common/error/errors';\nimport { getEnvironment } from '../common/utility';\n\nexport type CheckoutServiceErrorType = MissingDataError | NotInitializedError;\nexport type CheckoutServiceErrorTransformer = ErrorMessageTransformer<CheckoutServiceErrorType | Error>;\n\nexport default function createCheckoutServiceErrorTransformer(\n    isDevelopment: boolean = getEnvironment() === 'development'\n): CheckoutServiceErrorTransformer {\n    return new ErrorMessageTransformer(error => {\n        if (!isDevelopment || !isCheckoutServiceError(error)) {\n            return error.message;\n        }\n\n        switch (error.subtype || error.type) {\n        case MissingDataErrorType.MissingConsignments:\n            return `\n                ${error.message}\n                The data could be unavailable because no shipping address has been provided.\n                To fix this, create a consignment or update the shipping address before performing\n                the same action again.\n            `;\n\n        case MissingDataErrorType.MissingCart:\n        case MissingDataErrorType.MissingCheckout:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server yet.\n                To fix this issue, you can try calling \\`CheckoutService#loadCheckout\\`\n                before performing the same action again.\n            `;\n\n        case MissingDataErrorType.MissingCheckoutConfig:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server yet.\n                To fix this issue, you need to make sure \\`CheckoutService\\` is initialized\n                properly by calling \\`CheckoutService#loadCheckout\\` before performing any\n                other actions.\n            `;\n\n        case MissingDataErrorType.MissingOrder:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server yet.\n                To fix this issue, you can try calling \\`CheckoutService#loadOrder\\`\n                before performing the same action again.\n            `;\n\n        case MissingDataErrorType.MissingOrderId:\n            return `\n                ${error.message}\n                The data could be unavailable because no order has been created yet. You have\n                to first create the order before you can perform the action.\n            `;\n\n        case MissingDataErrorType.MissingPaymentMethod:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server, or\n                configured by the merchant yet. To fix the former issue, you can try calling\n                \\`CheckoutService#loadPaymentMethods\\` before performing the same action again.\n            `;\n\n        case NotInitializedErrorType.CustomerNotInitialized:\n            return `\n                In order to initialize the customer step of checkout, you need to call\n                \\`CheckoutService#initializeCustomer\\`. Afterwards, you should be able to\n                submit customer details.\n            `;\n\n        case NotInitializedErrorType.PaymentNotInitialized:\n            return `\n                ${error.message}\n                In order to initialize the payment step of checkout, you need to call\n                \\`CheckoutService#initializePayment\\`. Afterwards, you should be able to\n                submit payment details.\n            `;\n\n        case NotInitializedErrorType.ShippingNotInitialized:\n            return `\n                ${error.message}\n                In order to initialize the shipping step of checkout, you need to call\n                \\`CheckoutService#initializeShipping\\`. Afterwards, you should be able to\n                submit shipping details.\n            `;\n\n        default:\n            return error.message;\n        }\n    });\n}\n\nfunction isCheckoutServiceError(error: any): error is CheckoutServiceErrorType {\n    return !!(error.subtype || error.type);\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\nimport { createScriptLoader } from '@bigcommerce/script-loader';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../billing';\nimport { ErrorActionCreator } from '../common/error';\nimport { getDefaultLogger } from '../common/log';\nimport { getEnvironment } from '../common/utility';\nimport { ConfigActionCreator, ConfigRequestSender, ConfigState } from '../config';\nimport { CouponActionCreator, CouponRequestSender, GiftCertificateActionCreator, GiftCertificateRequestSender } from '../coupon';\nimport { createCustomerStrategyRegistry, CustomerStrategyActionCreator } from '../customer';\nimport { CountryActionCreator, CountryRequestSender } from '../geography';\nimport { OrderActionCreator, OrderRequestSender } from '../order';\nimport { createSpamProtection, SpamProtectionActionCreator } from '../order/spam-protection';\nimport { createPaymentClient, createPaymentStrategyRegistry, PaymentMethodActionCreator, PaymentMethodRequestSender, PaymentStrategyActionCreator } from '../payment';\nimport { InstrumentActionCreator, InstrumentRequestSender } from '../payment/instrument';\nimport { createShippingStrategyRegistry, ConsignmentActionCreator, ConsignmentRequestSender, ShippingCountryActionCreator, ShippingCountryRequestSender, ShippingStrategyActionCreator } from '../shipping';\n\nimport CheckoutActionCreator from './checkout-action-creator';\nimport CheckoutRequestSender from './checkout-request-sender';\nimport CheckoutService from './checkout-service';\nimport CheckoutValidator from './checkout-validator';\nimport createCheckoutStore from './create-checkout-store';\n\n/**\n * Creates an instance of `CheckoutService`.\n *\n * @remarks\n * ```js\n * const service = createCheckoutService();\n *\n * service.subscribe(state => {\n *     console.log(state);\n * });\n *\n * service.loadCheckout();\n * ```\n *\n * @param options - A set of construction options.\n * @returns an instance of `CheckoutService`.\n */\nexport default function createCheckoutService(options?: CheckoutServiceOptions): CheckoutService {\n    if (document.location.protocol !== 'https:') {\n        getDefaultLogger().warn('The BigCommerce Checkout SDK should not be used on a non-HTTPS page');\n    }\n\n    if (getEnvironment() !== 'production') {\n        getDefaultLogger().warn('Note that the development build is not optimized. To create a production build, set process.env.NODE_ENV to `production`.');\n    }\n\n    const config: ConfigState = {\n        meta: {\n            externalSource: options && options.externalSource,\n        },\n        errors: {},\n        statuses: {},\n    };\n    const { locale = '', shouldWarnMutation = true } = options || {};\n    const requestSender = createRequestSender({ host: options && options.host });\n    const store = createCheckoutStore({ config }, { shouldWarnMutation });\n    const paymentClient = createPaymentClient(store);\n    const orderRequestSender = new OrderRequestSender(requestSender);\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const configActionCreator = new ConfigActionCreator(new ConfigRequestSender(requestSender));\n    const spamProtection = createSpamProtection(createScriptLoader());\n    const spamProtectionActionCreator = new SpamProtectionActionCreator(spamProtection);\n    const orderActionCreator = new OrderActionCreator(\n        orderRequestSender,\n        new CheckoutValidator(checkoutRequestSender),\n        spamProtectionActionCreator\n    );\n\n    return new CheckoutService(\n        store,\n        new BillingAddressActionCreator(new BillingAddressRequestSender(requestSender)),\n        new CheckoutActionCreator(checkoutRequestSender, configActionCreator),\n        configActionCreator,\n        new ConsignmentActionCreator(new ConsignmentRequestSender(requestSender), checkoutRequestSender),\n        new CountryActionCreator(new CountryRequestSender(requestSender, { locale })),\n        new CouponActionCreator(new CouponRequestSender(requestSender)),\n        new CustomerStrategyActionCreator(createCustomerStrategyRegistry(store, requestSender)),\n        new ErrorActionCreator(),\n        new GiftCertificateActionCreator(new GiftCertificateRequestSender(requestSender)),\n        new InstrumentActionCreator(new InstrumentRequestSender(paymentClient, requestSender)),\n        orderActionCreator,\n        new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender)),\n        new PaymentStrategyActionCreator(\n            createPaymentStrategyRegistry(store, paymentClient, requestSender, spamProtection),\n            orderActionCreator\n        ),\n        new ShippingCountryActionCreator(new ShippingCountryRequestSender(requestSender, { locale })),\n        new ShippingStrategyActionCreator(createShippingStrategyRegistry(store, requestSender)),\n        spamProtectionActionCreator\n    );\n}\n\nexport interface CheckoutServiceOptions {\n    locale?: string;\n    host?: string;\n    shouldWarnMutation?: boolean;\n    externalSource?: string;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { MutationObserverFactory } from '../../common/dom/mutation-observer';\n\nimport GoogleRecaptcha from './google-recaptcha';\nimport GoogleRecaptchaScriptLoader from './google-recaptcha-script-loader';\n\nexport default function createSpamProtection(scriptLoader: ScriptLoader) {\n    return new GoogleRecaptcha(\n        new GoogleRecaptchaScriptLoader(scriptLoader),\n        new MutationObserverFactory()\n    );\n}\n","// tslint:disable-next-line:no-reference\n/// <reference path=\"../payment/bigpay-client.d.ts\" />\nimport { createClient as createBigpayClient } from '@bigcommerce/bigpay-client';\n\nimport { CheckoutStore } from '../checkout';\n\nexport default function createPaymentClient(store: CheckoutStore) {\n    const paymentClient = createBigpayClient();\n\n    store.subscribe(\n        state => {\n            const config = state.config.getStoreConfig();\n\n            if (config) {\n                paymentClient.setHost(config.paymentSettings.bigpayBaseUrl);\n            }\n        },\n        state => state.config.getStoreConfig()\n    );\n\n    return paymentClient;\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { CheckoutActionCreator, CheckoutRequestSender, CheckoutStore } from '../checkout';\nimport { Registry } from '../common/registry';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { PaymentMethodActionCreator, PaymentMethodRequestSender } from '../payment';\nimport { AmazonPayScriptLoader } from '../payment/strategies/amazon-pay';\nimport {\n    createBraintreeVisaCheckoutPaymentProcessor,\n    BraintreeScriptLoader,\n    BraintreeSDKCreator,\n    VisaCheckoutScriptLoader\n} from '../payment/strategies/braintree';\nimport { ChasePayScriptLoader } from '../payment/strategies/chasepay';\nimport { createGooglePayPaymentProcessor, GooglePayBraintreeInitializer, GooglePayStripeInitializer } from '../payment/strategies/googlepay';\nimport { MasterpassScriptLoader } from '../payment/strategies/masterpass';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../remote-checkout';\n\nimport CustomerActionCreator from './customer-action-creator';\nimport CustomerRequestSender from './customer-request-sender';\nimport CustomerStrategyActionCreator from './customer-strategy-action-creator';\nimport { CustomerStrategy } from './strategies';\nimport { AmazonPayCustomerStrategy } from './strategies/amazon';\nimport { BraintreeVisaCheckoutCustomerStrategy } from './strategies/braintree';\nimport { ChasePayCustomerStrategy } from './strategies/chasepay';\nimport { DefaultCustomerStrategy } from './strategies/default';\nimport { GooglePayCustomerStrategy } from './strategies/googlepay';\nimport { MasterpassCustomerStrategy } from './strategies/masterpass';\nimport { SquareCustomerStrategy } from './strategies/square';\n\nexport default function createCustomerStrategyRegistry(\n    store: CheckoutStore,\n    requestSender: RequestSender\n): Registry<CustomerStrategy> {\n    const registry = new Registry<CustomerStrategy>();\n    const scriptLoader = getScriptLoader();\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const checkoutActionCreator = new CheckoutActionCreator(\n        checkoutRequestSender,\n        new ConfigActionCreator(new ConfigRequestSender(requestSender))\n    );\n    const formPoster = createFormPoster();\n    const paymentMethodActionCreator = new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender));\n    const remoteCheckoutRequestSender = new RemoteCheckoutRequestSender(requestSender);\n    const remoteCheckoutActionCreator = new RemoteCheckoutActionCreator(remoteCheckoutRequestSender);\n\n    registry.register('amazon', () =>\n        new AmazonPayCustomerStrategy(\n            store,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            remoteCheckoutRequestSender,\n            new AmazonPayScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('braintreevisacheckout', () =>\n        new BraintreeVisaCheckoutCustomerStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            new CustomerStrategyActionCreator(registry),\n            remoteCheckoutActionCreator,\n            createBraintreeVisaCheckoutPaymentProcessor(scriptLoader, requestSender),\n            new VisaCheckoutScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('chasepay', () =>\n        new ChasePayCustomerStrategy(\n            store,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new ChasePayScriptLoader(scriptLoader),\n            requestSender,\n            formPoster\n        )\n    );\n\n    registry.register('squarev2', () =>\n        new SquareCustomerStrategy(\n            store,\n            new RemoteCheckoutActionCreator(remoteCheckoutRequestSender)\n        )\n    );\n\n    registry.register('masterpass', () =>\n        new MasterpassCustomerStrategy(\n            store,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new MasterpassScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('googlepaybraintree', () =>\n        new GooglePayCustomerStrategy(\n            store,\n            remoteCheckoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayBraintreeInitializer(\n                    new BraintreeSDKCreator(\n                        new BraintreeScriptLoader(scriptLoader)\n                    )\n                )\n            ),\n            formPoster\n        )\n    );\n\n    registry.register('googlepaystripe', () =>\n        new GooglePayCustomerStrategy(\n            store,\n            remoteCheckoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayStripeInitializer()\n            ),\n            formPoster\n    )\n);\n\n    registry.register('default', () =>\n        new DefaultCustomerStrategy(\n            store,\n            new CustomerActionCreator(\n                new CustomerRequestSender(requestSender),\n                checkoutActionCreator\n            )\n        )\n    );\n\n    return registry;\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { CheckoutRequestSender, CheckoutStore } from '../checkout';\nimport { Registry } from '../common/registry';\nimport { PaymentMethodActionCreator, PaymentMethodRequestSender } from '../payment';\nimport { AmazonPayScriptLoader } from '../payment/strategies/amazon-pay';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../remote-checkout';\n\nimport ConsignmentActionCreator from './consignment-action-creator';\nimport ConsignmentRequestSender from './consignment-request-sender';\nimport { ShippingStrategy } from './strategies';\nimport { AmazonPayShippingStrategy } from './strategies/amazon';\nimport { DefaultShippingStrategy } from './strategies/default';\n\nexport default function createShippingStrategyRegistry(\n    store: CheckoutStore,\n    requestSender: RequestSender\n): Registry<ShippingStrategy> {\n    const registry = new Registry<ShippingStrategy>();\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const consignmentRequestSender = new ConsignmentRequestSender(requestSender);\n    const consignmentActionCreator = new ConsignmentActionCreator(consignmentRequestSender, checkoutRequestSender);\n\n    registry.register('amazon', () =>\n        new AmazonPayShippingStrategy(\n            store,\n            consignmentActionCreator,\n            new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender)),\n            new RemoteCheckoutActionCreator(new RemoteCheckoutRequestSender(requestSender)),\n            new AmazonPayScriptLoader(getScriptLoader())\n        )\n    );\n\n    registry.register('default', () =>\n        new DefaultShippingStrategy(\n            store,\n            consignmentActionCreator\n        )\n    );\n\n    return registry;\n}\n","import { EmbeddedCheckoutFrameLoadedEvent } from '../embedded-checkout-events';\n\nexport default function handleFrameLoadedEvent(message: EmbeddedCheckoutFrameLoadedEvent): void {\n    if (!message.payload || !message.payload.contentId) {\n        return;\n    }\n\n    const body = document.getElementById(message.payload.contentId);\n\n    if (!body || body.hasAttribute('data-iframe-height')) {\n        return;\n    }\n\n    body.setAttribute('data-iframe-height', '');\n}\n","export default interface CustomError extends Error {\n    message: string;\n    type: string;\n    subtype?: string;\n}\n\nexport function isCustomError(error: any): error is CustomError {\n    return (\n        typeof error.message === 'string' &&\n        typeof error.type === 'string' &&\n        (typeof error.subtype === 'string' || !error.subtype) &&\n        error instanceof Error\n    );\n}\n","import { isCustomError, CustomError } from '../../common/error/errors';\nimport EmbeddedCheckoutError from '../embedded-checkout-error';\nimport {\n    EmbeddedCheckoutCompleteEvent,\n    EmbeddedCheckoutErrorEvent,\n    EmbeddedCheckoutEvent,\n    EmbeddedCheckoutEventMap,\n    EmbeddedCheckoutEventType,\n    EmbeddedCheckoutFrameErrorEvent,\n    EmbeddedCheckoutFrameLoadedEvent,\n    EmbeddedCheckoutLoadedEvent,\n    EmbeddedCheckoutSignedOutEvent,\n} from '../embedded-checkout-events';\nimport EmbeddedCheckoutStyles from '../embedded-checkout-styles';\nimport IframeEventListener from '../iframe-event-listener';\nimport IframeEventPoster from '../iframe-event-poster';\n\nimport EmbeddedCheckoutMessenger from './embedded-checkout-messenger';\nimport { EmbeddedContentEventMap, EmbeddedContentEventType } from './embedded-content-events';\nimport EmbeddedContentOptions from './embedded-content-options';\n\nexport default class IframeEmbeddedCheckoutMessenger implements EmbeddedCheckoutMessenger {\n    /**\n     * @internal\n     */\n    constructor(\n        private _messageListener: IframeEventListener<EmbeddedContentEventMap>,\n        private _messagePoster: IframeEventPoster<EmbeddedCheckoutEvent>,\n        private _untargetedMessagePoster: IframeEventPoster<EmbeddedCheckoutEvent>,\n        private _messageHandlers: EventCallbacks<EmbeddedCheckoutEventMap> = {}\n    ) {\n        this._messageListener.listen();\n    }\n\n    postComplete(): void {\n        const message: EmbeddedCheckoutCompleteEvent = {\n            type: EmbeddedCheckoutEventType.CheckoutComplete,\n        };\n\n        this._postMessage(message);\n    }\n\n    postError(payload: Error | CustomError): void {\n        const message: EmbeddedCheckoutErrorEvent = {\n            type: EmbeddedCheckoutEventType.CheckoutError,\n            payload: this._transformError(payload),\n        };\n\n        this._postMessage(message);\n    }\n\n    postFrameError(payload: Error | CustomError): void {\n        const message: EmbeddedCheckoutFrameErrorEvent = {\n            type: EmbeddedCheckoutEventType.FrameError,\n            payload: this._transformError(payload),\n        };\n\n        // Ideally, all messages should be targeted at a specific origin.\n        // However, for `FrameError` message, we have to post it in an\n        // untargeted fashion. This is because the error could be caused by a\n        // missing cart. That makes it not possible to determine of site origin\n        // of the parent window. Nevertheless, we still want to notify the\n        // parent window about the error.\n        this._postMessage(message, { untargeted: true });\n    }\n\n    postFrameLoaded(payload?: EmbeddedContentOptions): void {\n        const message: EmbeddedCheckoutFrameLoadedEvent = {\n            type: EmbeddedCheckoutEventType.FrameLoaded,\n            payload,\n        };\n\n        this._postMessage(message);\n    }\n\n    postLoaded(): void {\n        const message: EmbeddedCheckoutLoadedEvent = {\n            type: EmbeddedCheckoutEventType.CheckoutLoaded,\n        };\n\n        this._postMessage(message);\n    }\n\n    postSignedOut(): void {\n        const message: EmbeddedCheckoutSignedOutEvent = {\n            type: EmbeddedCheckoutEventType.SignedOut,\n        };\n\n        this._postMessage(message);\n    }\n\n    receiveStyles(handler: (styles: EmbeddedCheckoutStyles) => void): void {\n        this._messageListener.addListener(EmbeddedContentEventType.StyleConfigured, ({ payload }) => {\n            handler(payload);\n        });\n    }\n\n    private _postMessage(message: EmbeddedCheckoutEvent, options?: { untargeted?: boolean }): void {\n        this._notifyMessageHandlers(message);\n\n        if (options && options.untargeted) {\n            return this._untargetedMessagePoster.post(message);\n        }\n\n        this._messagePoster.post(message);\n    }\n\n    private _notifyMessageHandlers(message: EmbeddedCheckoutEvent): void {\n        Object.keys(this._messageHandlers)\n            .forEach(key => {\n                const handler = this._messageHandlers[key as keyof EmbeddedCheckoutEventMap];\n\n                if (handler) {\n                    handler.call(null, message);\n                }\n            });\n    }\n\n    private _transformError(error: Error | CustomError): EmbeddedCheckoutError {\n        return {\n            message: error.message,\n            type: isCustomError(error) ? error.type : undefined,\n            subtype: isCustomError(error) ? error.subtype : undefined,\n        };\n    }\n}\n\nexport type EventCallbacks<TEventMap> = {\n    [key in keyof TEventMap]?: (event: TEventMap[key]) => void;\n};\n","import EmbeddedCheckoutMessenger from './embedded-checkout-messenger';\n\nexport default class NoopEmbeddedCheckoutMessenger implements EmbeddedCheckoutMessenger {\n    postComplete(): void {}\n\n    postError(): void {}\n\n    postFrameError(): void {}\n\n    postFrameLoaded(): void {}\n\n    postLoaded(): void {}\n\n    postSignedOut(): void {}\n\n    receiveStyles(): void {}\n}\n","import { EmbeddedCheckoutEvent, EmbeddedCheckoutEventType } from '../embedded-checkout-events';\nimport IframeEventListener from '../iframe-event-listener';\nimport IframeEventPoster from '../iframe-event-poster';\n\nimport EmbeddedCheckoutMessenger from './embedded-checkout-messenger';\nimport EmbeddedCheckoutMessengerOptions from './embedded-checkout-messenger-options';\nimport { EmbeddedContentEventMap } from './embedded-content-events';\nimport handleFrameLoadedEvent from './handle-frame-loaded-event';\nimport IframeEmbeddedCheckoutMessenger from './iframe-embedded-checkout-messenger';\nimport NoopEmbeddedCheckoutMessenger from './noop-embedded-checkout-messenger';\n\n/**\n * Create an instance of `EmbeddedCheckoutMessenger`.\n *\n * @remarks\n * The object is responsible for posting messages to the parent window from the\n * iframe when certain events have occurred. For example, when the checkout\n * form is first loaded, you should notify the parent window about it.\n *\n * The iframe can only be embedded in domains that are allowed by the store.\n *\n * ```ts\n * const messenger = createEmbeddedCheckoutMessenger({\n *     parentOrigin: 'https://some/website',\n * });\n *\n * messenger.postFrameLoaded();\n * ```\n *\n * @alpha\n * Please note that this feature is currently in an early stage of development.\n * Therefore the API is unstable and not ready for public consumption.\n *\n * @param options - Options for creating `EmbeddedCheckoutMessenger`\n * @returns - An instance of `EmbeddedCheckoutMessenger`\n */\nexport default function createEmbeddedCheckoutMessenger(options: EmbeddedCheckoutMessengerOptions): EmbeddedCheckoutMessenger {\n    const parentWindow = options.parentWindow || window.parent;\n\n    // Return a No-op messenger if it is not called inside an iframe\n    if (window === parentWindow) {\n        return new NoopEmbeddedCheckoutMessenger();\n    }\n\n    return new IframeEmbeddedCheckoutMessenger(\n        new IframeEventListener<EmbeddedContentEventMap>(options.parentOrigin),\n        new IframeEventPoster<EmbeddedCheckoutEvent>(options.parentOrigin, parentWindow),\n        new IframeEventPoster<EmbeddedCheckoutEvent>('*', parentWindow),\n        { [EmbeddedCheckoutEventType.FrameLoaded]: handleFrameLoadedEvent }\n    );\n}\n","import { isObject, union } from 'lodash';\nimport * as MessageFormat from 'messageformat';\n\nimport Logger from '../common/log/logger';\n\nimport LanguageConfig, { Locales, Translations } from './language-config';\n\nconst DEFAULT_LOCALE = 'en';\nconst KEY_PREFIX = 'optimized_checkout';\n\n/**\n * Responsible for getting language strings.\n *\n * This object can be used to retrieve language strings that are most\n * appropriate for a given locale.\n *\n * The language strings provided to the object should follow [ICU\n * MessageFormat](http://userguide.icu-project.org/formatparse/messages) syntax.\n */\nexport default class LanguageService {\n    private _locale: string;\n    private _locales: Locales;\n    private _translations: Translations;\n    private _formatters: { [key: string]: any };\n\n    /**\n     * @internal\n     */\n    constructor(\n        config: Partial<LanguageConfig>,\n        private _logger: Logger\n    ) {\n        const { locale, locales, translations } = this._transformConfig(config);\n\n        this._locale = locale;\n        this._locales = locales;\n        this._translations = translations;\n        this._formatters = {};\n    }\n\n    /**\n     * Remaps a set of language strings with a different set of keys.\n     *\n     * ```js\n     * service.mapKeys({\n     *     'new_key': 'existing_key',\n     * });\n     *\n     * console.log(service.translate('new_key'));\n     * ```\n     *\n     * @param maps - The set of language strings.\n     */\n    mapKeys(maps: { [key: string]: string }): void {\n        Object.keys(maps).forEach(key => {\n            const translationKey = `${KEY_PREFIX}.${maps[key]}`;\n\n            this._translations[`${KEY_PREFIX}.${key}`] = this._translations[translationKey];\n        });\n    }\n\n    /**\n     * Gets the preferred locale of the current customer.\n     *\n     * @returns The preferred locale code.\n     */\n    getLocale(): string {\n        return this._hasTranslations() ? this._locale : DEFAULT_LOCALE;\n    }\n\n    /**\n     * Gets a language string by a key.\n     *\n     * ```js\n     * service.translate('language_key');\n     * ```\n     *\n     * If the language string contains a placeholder, you can replace it by\n     * providing a second argument.\n     *\n     * ```js\n     * service.translate('language_key', { placeholder: 'Hello' });\n     * ```\n     *\n     * @param key - The language key.\n     * @param data - Data for replacing placeholders in the language string.\n     * @returns The translated language string.\n     */\n    translate(key: string, data: TranslationData = {}): string {\n        const prefixedKey = `${KEY_PREFIX}.${key}`;\n\n        if (typeof this._translations[prefixedKey] !== 'string') {\n            this._logger.warn(`Translation key \"${prefixedKey}\" is missing`);\n\n            return prefixedKey;\n        }\n\n        if (!this._formatters[prefixedKey]) {\n            const messageFormat = new MessageFormat(this._locales[prefixedKey]);\n\n            this._formatters[prefixedKey] = messageFormat.compile(this._translations[prefixedKey] || '');\n        }\n\n        return this._formatters[prefixedKey](this._transformData(data));\n    }\n\n    private _transformConfig(config: Partial<LanguageConfig> = {}): LanguageConfig {\n        const output: LanguageConfig = {\n            defaultTranslations: {},\n            translations: {},\n            locales: {},\n            locale: config.locale || DEFAULT_LOCALE,\n        };\n\n        const locales = config.locales || {};\n        const translations = this._flattenObject(config.translations || {});\n        const defaultTranslations = this._flattenObject(config.defaultTranslations || {});\n        const translationKeys = union(Object.keys(defaultTranslations), Object.keys(translations));\n\n        translationKeys.forEach(key => {\n            if (translations && translations[key]) {\n                output.translations[key] = translations[key];\n                output.locales[key] = locales[key] || output.locale;\n            } else {\n                output.translations[key] = defaultTranslations[key];\n                output.locales[key] = DEFAULT_LOCALE;\n            }\n        });\n\n        return output;\n    }\n\n    private _flattenObject(object: Translations, result: Translations = {}, parentKey: string = ''): Translations {\n        try {\n            Object.keys(object).forEach(key => {\n                const value = object[key];\n                const resultKey = parentKey ? `${parentKey}.${key}` : key;\n\n                if (isObject(value)) {\n                    return this._flattenObject(value as Translations, result, resultKey);\n                }\n\n                result[resultKey] = value;\n            });\n        } catch (err) {\n            this._logger.warn(`Unable to parse object: ${err}`);\n        }\n\n        return result;\n    }\n\n    private _transformData(data: TranslationData): TranslationData {\n        return Object.keys(data).reduce((result, key) => {\n            const value = data[key];\n\n            result[key] = value === null || value === undefined ? '' : value;\n\n            return result;\n        }, {} as TranslationData);\n    }\n\n    private _hasTranslations(): boolean {\n        return Object.keys(this._locales).map(key => this._locales[key])\n            .filter(code => code.split('-')[0] === this._locale.split('-')[0])\n            .length > 0;\n    }\n}\n\nexport interface TranslationData {\n    [key: string]: string | number;\n}\n","import { getDefaultLogger } from '../common/log';\n\nimport LanguageConfig from './language-config';\nimport LanguageService from './language-service';\n\n/**\n * Creates an instance of `LanguageService`.\n *\n * @remarks\n * ```js\n * const language = {{{langJson 'optimized_checkout'}}}; // `langJson` is a Handlebars helper provided by BigCommerce's Stencil template engine.\n * const service = createLanguageService(language);\n *\n * console.log(service.translate('address.city_label'));\n * ```\n *\n * @param config - A configuration object.\n * @returns An instance of `LanguageService`.\n */\nexport default function createLanguageService(config: Partial<LanguageConfig> = {}): LanguageService {\n    return new LanguageService(\n        config,\n        getDefaultLogger()\n    );\n}\n","import { InvalidArgumentError } from '../common/error/errors';\n\nimport { CurrencyConfig } from './currency';\n\nexport default class CurrencyFormatter {\n    private _decimalPlaces: number;\n    private _symbolLocation: string;\n    private _symbol: string;\n    private _thousandsSeparator: string;\n    private _decimalSeparator: string;\n\n    constructor(\n        currencySettings: CurrencyConfig\n    ) {\n        if (!currencySettings) {\n            throw new Error('Currency settings missing');\n        }\n\n        const {\n            decimalPlaces,\n            symbolLocation,\n            symbol,\n            thousandsSeparator,\n            decimalSeparator,\n        } = currencySettings;\n\n        if (\n            typeof symbolLocation !== 'string' ||\n            typeof symbol !== 'string' ||\n            typeof thousandsSeparator !== 'string' ||\n            typeof decimalSeparator !== 'string' ||\n            typeof decimalPlaces !== 'string'\n        ) {\n            throw new InvalidArgumentError('Invalid currency settings provided');\n        }\n\n        this._decimalPlaces = parseInt(decimalPlaces, 10);\n        this._symbolLocation = symbolLocation;\n        this._symbol = symbol;\n        this._thousandsSeparator = thousandsSeparator;\n        this._decimalSeparator = decimalSeparator;\n    }\n\n    format(amount?: number): string {\n        if (typeof amount !== 'number') {\n            throw new InvalidArgumentError('Invalid amount provided');\n        }\n\n        const formattedNumber = this._formatNumber(amount);\n\n        const formattedCurrency = this._formatCurrency(formattedNumber);\n\n        return amount < 0 ?\n            `-${formattedCurrency}` :\n            formattedCurrency;\n    }\n\n    private _formatNumber(amount: number): string {\n        const positiveAmount = Math.abs(amount);\n        const [ integerAmount, decimalAmount = '' ] = (this._toFixed(positiveAmount, this._decimalPlaces)).split('.');\n        const parsedIntegerAmount = integerAmount.replace(/\\B(?=(\\d{3})+(?!\\d))/g, this._thousandsSeparator);\n\n        if (this._decimalPlaces < 1) {\n            return parsedIntegerAmount;\n        }\n\n        return [\n            parsedIntegerAmount,\n            decimalAmount,\n        ].join(this._decimalSeparator);\n    }\n\n    private _formatCurrency(formattedNumber: string): string {\n        return (this._symbolLocation.toLowerCase() === 'left') ?\n            `${this._symbol}${formattedNumber}` :\n            `${formattedNumber}${this._symbol}`;\n    }\n\n    private _toFixed(value: number, precision: number): string {\n        return (+(Math.round(+(value + 'e' + precision)) + 'e' + -precision)).toFixed(precision);\n    }\n}\n","import { StoreConfig } from '../config';\n\nimport CurrencyFormatter from './currency-formatter';\n\n/**\n * Responsible for formatting and converting currencies.\n */\nexport default class CurrencyService {\n    private _customerFormatter: CurrencyFormatter;\n    private _storeFormatter: CurrencyFormatter;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _storeConfig: StoreConfig\n    ) {\n        this._customerFormatter = new CurrencyFormatter(this._storeConfig.shopperCurrency);\n        this._storeFormatter = new CurrencyFormatter(this._storeConfig.currency);\n    }\n\n    toCustomerCurrency(amount: number): string {\n        const exchangeRate = this._storeConfig.shopperCurrency.exchangeRate;\n\n        return this._customerFormatter.format(amount * exchangeRate);\n    }\n\n    toStoreCurrency(amount: number): string {\n        return this._storeFormatter.format(amount);\n    }\n}\n","import { StoreConfig } from '../config';\n\nimport CurrencyService from './currency-service';\n\n/**\n * Creates an instance of `CurrencyService`.\n *\n * @remarks\n * ```js\n * const { data } = checkoutService.getState();\n * const config = data.getConfig();\n * const checkout = data.getCheckout();\n * const currencyService = createCurrencyService(config);\n *\n * currencyService.toStoreCurrency(checkout.grandTotal);\n * currencyService.toCustomerCurrency(checkout.grandTotal);\n * ```\n *\n * @alpha\n * Please note that `CurrencyService` is currently in an early stage\n * of development. Therefore the API is unstable and not ready for public\n * consumption.\n *\n * @param config - The config object containing the currency configuration\n * @returns an instance of `CurrencyService`.\n */\nexport default function createCurrencyService(\n    config: StoreConfig\n): CurrencyService {\n    return new CurrencyService(config);\n}\n","export { createTimeout } from '@bigcommerce/request-sender';\n\nexport { createCheckoutService } from './checkout';\nexport { createCheckoutButtonInitializer } from './checkout-buttons';\nexport { embedCheckout } from './embedded-checkout';\nexport { createEmbeddedCheckoutMessenger } from './embedded-checkout/iframe-content';\nexport { createLanguageService } from './locale';\nexport { createCurrencyService } from './currency';\n","import { Checkout } from '../../../checkout';\nimport PaymentMethod from '../../payment-method';\nimport { BraintreeModuleCreator, GooglePayBraintreeSDK } from '../braintree';\n\nexport type EnvironmentType = 'PRODUCTION' | 'TEST';\ntype TokenizeType = 'AndroidPayCard' | 'CreditCard';\n\nexport interface GooglePayInitializer {\n    initialize(checkout: Checkout, paymentMethod: PaymentMethod, hasShippingAddress: boolean, publishableKey?: string): Promise<GooglePayPaymentDataRequestV2>;\n    teardown(): Promise<void>;\n    parseResponse(paymentData: GooglePaymentData): TokenizePayload;\n}\n\nexport interface GooglePayCreator extends BraintreeModuleCreator<GooglePayBraintreeSDK> {}\n\nexport interface GooglePayPaymentOptions {\n    environment: EnvironmentType;\n}\n\nexport interface GooglePayIsReadyToPayResponse {\n    result: boolean;\n    paymentMethodPresend?: boolean;\n}\n\nexport interface GooglePaySDK {\n    payments: {\n        api: {\n            PaymentsClient: new(options: GooglePayPaymentOptions) => GooglePayClient;\n        };\n    };\n}\n\nexport interface GooglePayClient {\n    isReadyToPay(options: object): Promise<GooglePayIsReadyToPayResponse>;\n    loadPaymentData(paymentDataRequest: GooglePayPaymentDataRequestV2): Promise<GooglePaymentData>;\n    createButton(options: { [key: string]: string | object }): HTMLElement;\n}\n\nexport interface GooglePayHostWindow extends Window {\n    google?: GooglePaySDK;\n}\n\nexport interface TokenizePayload {\n    nonce: string;\n    details: {\n        cardType: string;\n        lastFour: string;\n        lastTwo?: string;\n    };\n    description?: string;\n    type: TokenizeType;\n    binData?: {\n        commercial: string;\n        countryOfIssuance: string;\n        debit: string;\n        durbinRegulated: string;\n        healthcare: string;\n        issuingBank: string;\n        payroll: string;\n        prepaid: string;\n        productId: string;\n    };\n}\n\nexport interface GooglePaymentData {\n    apiVersion: number;\n    apiVersionMinor: number;\n    paymentMethodData: {\n        description: string;\n        info: {\n            cardDetails: string;\n            cardNetwork: string;\n            billingAddress: GooglePayAddress;\n        };\n        tokenizationData: {\n            token: string;\n            type: string;\n        };\n        type: string;\n    };\n    shippingAddress: GooglePayAddress;\n    email: string;\n}\n\nexport interface GooglePayAddress {\n    address1: string;\n    address2: string;\n    address3: string;\n    administrativeArea: string;\n    companyName: string;\n    countryCode: string;\n    locality: string;\n    name: string;\n    postalCode: string;\n    sortingCode: string;\n    phoneNumber: string;\n}\n\nexport interface GooglePaymentsError {\n    statusCode: string;\n    statusMessage?: string;\n}\n\nexport interface PaymentMethodData {\n    methodId: string;\n    paymentData: {\n        method: string;\n        nonce: string;\n        cardInformation: {\n            type: string;\n            number: string;\n        };\n    };\n}\n\nexport enum ButtonType {\n    Long = 'long',\n    Short = 'short',\n}\nexport enum ButtonColor {\n    Default = 'default',\n    Black = 'black',\n    White = 'white',\n}\n\nexport interface GooglePayPaymentDataRequestV2 {\n    apiVersion: number;\n    apiVersionMinor: number;\n    merchantInfo: {\n        authJwt?: string;\n        merchantId?: string;\n        merchantName?: string;\n    };\n    allowedPaymentMethods: [{\n        type: string;\n        parameters: {\n            allowedAuthMethods: string[];\n            allowedCardNetworks: string[];\n            allowPrepaidCards?: boolean;\n            billingAddressRequired?: boolean;\n            billingAddressParameters?: {\n                format?: string;\n                phoneNumberRequired?: boolean;\n            };\n        };\n        tokenizationSpecification?: {\n            type: string;\n            parameters: {\n                gateway: string;\n                gatewayMerchantId?: string;\n                'braintree:apiVersion'?: string;\n                'braintree:clientKey'?: string;\n                'braintree:merchantId'?: string;\n                'braintree:sdkVersion'?: string;\n                'braintree:authorizationFingerprint'?: string;\n                'stripe:version'?: string;\n                'stripe:publishableKey'?: string;\n            };\n        };\n    }];\n    transactionInfo: {\n        currencyCode: string;\n        totalPriceStatus: string;\n        totalPrice?: string;\n        checkoutOption?: string;\n    };\n    emailRequired?: boolean;\n    shippingAddressRequired?: boolean;\n    shippingAddressParameters?: {\n        allowedCountryCodes?: string[];\n        phoneNumberRequired?: boolean;\n    };\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { AddressRequestBody } from '../../../address';\nimport { BillingAddressActionCreator, BillingAddressUpdateRequestBody } from '../../../billing';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n} from '../../../common/error/errors';\nimport { RemoteCheckoutSynchronizationError } from '../../../remote-checkout/errors';\nimport { ConsignmentActionCreator } from '../../../shipping';\nimport PaymentMethodInvalidError from '../../errors/payment-method-invalid-error';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\n\nimport {\n    ButtonColor,\n    ButtonType,\n    EnvironmentType,\n    GooglePaymentData,\n    GooglePayAddress,\n    GooglePayClient,\n    GooglePayInitializer,\n    GooglePayPaymentDataRequestV2,\n    GooglePaySDK,\n    TokenizePayload\n} from './googlepay';\nimport GooglePayScriptLoader from './googlepay-script-loader';\n\nexport default class GooglePayPaymentProcessor {\n    private _googlePayClient?: GooglePayClient;\n    private _methodId?: string;\n    private _paymentDataRequest?: GooglePayPaymentDataRequestV2;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _googlePayScriptLoader: GooglePayScriptLoader,\n        private _googlePayInitializer: GooglePayInitializer,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _consigmentActionCreator: ConsignmentActionCreator,\n        private _requestSender: RequestSender\n    ) {}\n\n    initialize(methodId: string): Promise<void> {\n        this._methodId = methodId;\n\n        return this._configureWallet();\n    }\n\n    deinitialize(): Promise<void> {\n        return this._googlePayInitializer.teardown();\n    }\n\n    createButton(\n        onClick: (event: Event) => Promise<void>,\n        buttonType: ButtonType = ButtonType.Short,\n        buttonColor: ButtonColor = ButtonColor.Default\n    ): HTMLElement {\n        if (!this._googlePayClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._googlePayClient.createButton({\n            buttonColor,\n            buttonType,\n            onClick,\n        });\n    }\n\n    displayWallet(): Promise<GooglePaymentData> {\n        if (!this._googlePayClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._googlePayClient.loadPaymentData(this._getPaymentDataRequest());\n    }\n\n    handleSuccess(paymentData: GooglePaymentData): Promise<InternalCheckoutSelectors> {\n        return this._postForm(this._googlePayInitializer.parseResponse(paymentData))\n            .then(() => this._updateBillingAddress(paymentData));\n    }\n\n    updateShippingAddress(shippingAddress: GooglePayAddress): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consigmentActionCreator.updateAddress(this._mapGooglePayAddressToShippingAddress(shippingAddress))\n        );\n    }\n\n    private _configureWallet(): Promise<void> {\n        const methodId = this._getMethodId();\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n                const checkout = state.checkout.getCheckout();\n                const hasShippingAddress = !!state.shippingAddress.getShippingAddress();\n\n                if (!paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                const { testMode } = paymentMethod.config;\n\n                return Promise.all([\n                    this._googlePayScriptLoader.load(),\n                    this._googlePayInitializer.initialize(checkout, paymentMethod, hasShippingAddress),\n                ]).then(([googlePay, paymentDataRequest]) => {\n                    this._googlePayClient = this._getGooglePayClient(googlePay, testMode);\n                    this._paymentDataRequest = paymentDataRequest;\n\n                    return this._googlePayClient.isReadyToPay({\n                        allowedPaymentMethods: [\n                            {\n                                type: paymentDataRequest.allowedPaymentMethods[0].type,\n                                parameters: {\n                                    allowedAuthMethods: paymentDataRequest.allowedPaymentMethods[0].parameters.allowedAuthMethods,\n                                    allowedCardNetworks: paymentDataRequest.allowedPaymentMethods[0].parameters.allowedCardNetworks,\n                                },\n                            },\n                        ],\n                        apiVersion: paymentDataRequest.apiVersion,\n                        apiVersionMinor: paymentDataRequest.apiVersionMinor,\n                    }).then(response => {\n                        if (response.result) {\n                            return;\n                        }\n\n                        throw new PaymentMethodInvalidError();\n                    });\n                });\n            });\n    }\n\n    private _getCardInformation(cardInformation: { cardType: string; lastFour: string }) {\n        return {\n            type: cardInformation.cardType,\n            number: cardInformation.lastFour,\n        };\n    }\n\n    private _getPaymentDataRequest(): GooglePayPaymentDataRequestV2 {\n        if (!this._paymentDataRequest) {\n            throw new RemoteCheckoutSynchronizationError();\n        }\n\n        return this._paymentDataRequest;\n    }\n\n    private _getGooglePayClient(google: GooglePaySDK, testMode?: boolean): GooglePayClient {\n        if (testMode === undefined) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const environment: EnvironmentType = testMode ? 'TEST' : 'PRODUCTION';\n\n        return new google.payments.api.PaymentsClient({ environment });\n    }\n\n    private _getMethodId(): string {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._methodId;\n    }\n\n    private _mapGooglePayAddressToBillingAddress(paymentData: GooglePaymentData, id: string): BillingAddressUpdateRequestBody {\n        return {\n            id,\n            firstName: paymentData.paymentMethodData.info.billingAddress.name.split(' ').slice(0, -1).join(' '),\n            lastName: paymentData.paymentMethodData.info.billingAddress.name.split(' ').slice(-1).join(' '),\n            company: paymentData.paymentMethodData.info.billingAddress.companyName,\n            address1: paymentData.paymentMethodData.info.billingAddress.address1,\n            address2: paymentData.paymentMethodData.info.billingAddress.address2 + paymentData.paymentMethodData.info.billingAddress.address3,\n            city: paymentData.paymentMethodData.info.billingAddress.locality,\n            stateOrProvince: paymentData.paymentMethodData.info.billingAddress.administrativeArea,\n            stateOrProvinceCode: paymentData.paymentMethodData.info.billingAddress.administrativeArea,\n            postalCode: paymentData.paymentMethodData.info.billingAddress.postalCode,\n            countryCode: paymentData.paymentMethodData.info.billingAddress.countryCode,\n            phone: paymentData.paymentMethodData.info.billingAddress.phoneNumber,\n            customFields: [],\n            email: paymentData.email,\n        };\n    }\n\n    private _mapGooglePayAddressToShippingAddress(address: GooglePayAddress): AddressRequestBody {\n        return {\n            firstName: address.name.split(' ').slice(0, -1).join(' '),\n            lastName: address.name.split(' ').slice(-1).join(' '),\n            company: address.companyName,\n            address1: address.address1,\n            address2: address.address2 + address.address3,\n            city: address.locality,\n            stateOrProvince: address.administrativeArea,\n            stateOrProvinceCode: address.administrativeArea,\n            postalCode: address.postalCode,\n            countryCode: address.countryCode,\n            phone: address.phoneNumber,\n            customFields: [],\n        };\n    }\n\n    private _postForm(postPaymentData: TokenizePayload): Promise<Response<void>> {\n        const cardInformation = postPaymentData.details;\n\n        return this._requestSender.post('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: {\n                payment_type: postPaymentData.type,\n                nonce: postPaymentData.nonce,\n                provider: this._getMethodId(),\n                action: 'set_external_checkout',\n                card_information: this._getCardInformation(cardInformation),\n            },\n        });\n    }\n\n    private _updateBillingAddress(paymentData: GooglePaymentData): Promise<InternalCheckoutSelectors> {\n        const remoteBillingAddress = this._store.getState().billingAddress.getBillingAddress();\n\n        if (!remoteBillingAddress) {\n            throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n        }\n\n        const googlePayAddressMapped = this._mapGooglePayAddressToBillingAddress(paymentData, remoteBillingAddress.id);\n\n        return this._store.dispatch(\n            this._billingAddressActionCreator.updateAddress(googlePayAddressMapped)\n        );\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { GooglePayHostWindow, GooglePaySDK } from './googlepay';\n\nexport default class GooglePayScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: GooglePayHostWindow = window\n    ) {}\n\n    load(): Promise<GooglePaySDK> {\n        return this._scriptLoader\n            .loadScript('https://pay.google.com/gp/p/js/pay.js')\n            .then(() => {\n                if (!this._window.google) {\n                    throw new StandardError();\n                }\n\n                return this._window.google;\n            });\n    }\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../../../billing';\nimport { CheckoutRequestSender, CheckoutStore } from '../../../checkout';\nimport { ConsignmentActionCreator, ConsignmentRequestSender } from '../../../shipping';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport PaymentMethodRequestSender from '../../payment-method-request-sender';\n\nimport { GooglePayInitializer } from './googlepay';\nimport GooglePayPaymentProcessor from './googlepay-payment-processor';\nimport GooglePayScriptLoader from './googlepay-script-loader';\n\nexport default function createGooglePayPaymentProcessor(store: CheckoutStore, initializer: GooglePayInitializer): GooglePayPaymentProcessor {\n    const requestSender = createRequestSender();\n    const scriptLoader = getScriptLoader();\n\n    return new GooglePayPaymentProcessor(\n        store,\n        new PaymentMethodActionCreator(\n            new PaymentMethodRequestSender(requestSender)\n        ),\n        new GooglePayScriptLoader(scriptLoader),\n        initializer,\n        new BillingAddressActionCreator(\n            new BillingAddressRequestSender(requestSender)\n        ),\n        new ConsignmentActionCreator(\n            new ConsignmentRequestSender(requestSender),\n            new CheckoutRequestSender(requestSender)\n        ),\n        requestSender\n    );\n}\n","import { keyBy, reduce, some } from 'lodash';\n\nimport { Checkout } from '../checkout';\nimport { AmountTransformer } from '../common/utility';\nimport { mapToInternalCoupon, mapToInternalGiftCertificate } from '../coupon';\nimport { mapToDiscountNotifications } from '../promotion';\n\nimport InternalCart from './internal-cart';\nimport mapToInternalLineItems from './map-to-internal-line-items';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalCart(checkout: Checkout): InternalCart {\n    const decimalPlaces = checkout.cart.currency.decimalPlaces;\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: checkout.cart.id,\n        items: mapToInternalLineItems(checkout.cart.lineItems, decimalPlaces),\n        currency: checkout.cart.currency.code,\n        coupon: {\n            discountedAmount: reduce(checkout.cart.coupons, (sum, coupon) => {\n                return sum + coupon.discountedAmount;\n            }, 0),\n            coupons: checkout.cart.coupons.map(mapToInternalCoupon),\n        },\n        discount: {\n            amount: checkout.cart.discountAmount,\n            integerAmount: amountTransformer.toInteger(checkout.cart.discountAmount),\n        },\n        discountNotifications: mapToDiscountNotifications(checkout.promotions),\n        giftCertificate: {\n            totalDiscountedAmount: reduce(checkout.giftCertificates, (sum, certificate) => {\n                return sum + certificate.used;\n            }, 0),\n            appliedGiftCertificates: keyBy(checkout.giftCertificates.map(mapToInternalGiftCertificate), 'code'),\n        },\n        shipping: {\n            amount: checkout.shippingCostTotal,\n            integerAmount: amountTransformer.toInteger(checkout.shippingCostTotal),\n            amountBeforeDiscount: checkout.shippingCostBeforeDiscount,\n            integerAmountBeforeDiscount: amountTransformer.toInteger(checkout.shippingCostBeforeDiscount),\n            required: some(checkout.cart.lineItems.physicalItems, lineItem => lineItem.isShippingRequired),\n        },\n        subtotal: {\n            amount: checkout.subtotal,\n            integerAmount: amountTransformer.toInteger(checkout.subtotal),\n        },\n        storeCredit: {\n            amount: checkout.customer ? checkout.customer.storeCredit : 0,\n        },\n        taxSubtotal: {\n            amount: checkout.taxTotal,\n            integerAmount: amountTransformer.toInteger(checkout.taxTotal),\n        },\n        taxes: checkout.taxes,\n        taxTotal: {\n            amount: checkout.taxTotal,\n            integerAmount: amountTransformer.toInteger(checkout.taxTotal),\n        },\n        handling: {\n            amount: checkout.handlingCostTotal,\n            integerAmount: amountTransformer.toInteger(checkout.handlingCostTotal),\n        },\n        grandTotal: {\n            amount: checkout.grandTotal,\n            integerAmount: amountTransformer.toInteger(checkout.grandTotal),\n        },\n    };\n}\n","import { DiscountNotification } from '../discount';\n\nimport { Promotion } from '.';\n\nexport default function mapToDiscountNotifications(promotions?: Promotion[]): DiscountNotification[] {\n    const notifications: DiscountNotification[] = [];\n\n    (promotions || []).forEach(promotion => {\n        (promotion.banners || []).forEach(banner => {\n            notifications.push({\n                placeholders: [],\n                discountType: null,\n                message: '',\n                messageHtml: banner.text,\n            });\n        });\n    });\n\n    return notifications;\n}\n"],"sourceRoot":""}