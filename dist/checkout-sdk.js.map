{"version":3,"sources":["webpack://checkoutKit/webpack/bootstrap","webpack://checkoutKit/external \"tslib\"","webpack://checkoutKit/external \"@bigcommerce/data-store\"","webpack://checkoutKit/external \"lodash\"","webpack://checkoutKit/external \"rxjs\"","webpack://checkoutKit/./src/shipping/consignment-actions.ts","webpack://checkoutKit/./src/checkout/checkout-actions.ts","webpack://checkoutKit/./src/common/error/errors/missing-data-error.ts","webpack://checkoutKit/./src/customer/customer-strategy-actions.ts","webpack://checkoutKit/./src/payment/payment-strategy-actions.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-actions.ts","webpack://checkoutKit/./src/coupon/coupon-actions.ts","webpack://checkoutKit/./src/order/order-actions.ts","webpack://checkoutKit/./src/common/error/errors/standard-error.ts","webpack://checkoutKit/./src/billing/billing-address-actions.ts","webpack://checkoutKit/./src/coupon/gift-certificate-actions.ts","webpack://checkoutKit/./src/payment/payment-method-actions.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-actions.ts","webpack://checkoutKit/./src/payment/instrument/instrument-actions.ts","webpack://checkoutKit/external \"rxjs/operators\"","webpack://checkoutKit/./src/embedded-checkout/embedded-checkout-events.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-actions.ts","webpack://checkoutKit/./src/common/error/error-action-creator.ts","webpack://checkoutKit/./src/geography/country-action-creator.ts","webpack://checkoutKit/./src/geography/country-request-sender.ts","webpack://checkoutKit/./src/payment/payment-strategy-type.ts","webpack://checkoutKit/./src/order/errors/order-finalization-not-required-error.ts","webpack://checkoutKit/./src/payment/payment-strategy-action-creator.ts","webpack://checkoutKit/./src/cart/errors/cart-changed-error.ts","webpack://checkoutKit/./src/checkout/checkout-validator.ts","webpack://checkoutKit/./src/payment/is-vaulted-instrument.ts","webpack://checkoutKit/./src/payment/payment-action-creator.ts","webpack://checkoutKit/./src/payment/payment-request-sender.ts","webpack://checkoutKit/./src/payment/payment-strategy-registry.ts","webpack://checkoutKit/./src/payment/errors/payment-argument-invalid-error.ts","webpack://checkoutKit/./src/payment/errors/payment-method-cancelled-error.ts","webpack://checkoutKit/./src/payment/strategies/affirm/affirm-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/affirm/affirmJs.ts","webpack://checkoutKit/./src/payment/strategies/affirm/affirm-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/afterpay/afterpay-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/afterpay/afterpay-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/amazon-pay/amazon-pay-payment-strategy.ts","webpack://checkoutKit/./src/common/overlay/overlay.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-payment-processor.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-credit-card-payment-strategy.ts","webpack://checkoutKit/./src/payment/is-credit-card-like.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-paypal-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/chasepay/chasepay.ts","webpack://checkoutKit/./src/payment/strategies/braintree/is-braintree-error.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-visacheckout-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/chasepay/chasepay-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/square/square-form.ts","webpack://checkoutKit/./src/payment/strategies/converge/converge-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/credit-card/credit-card-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/klarna/klarna-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/klarna/klarna-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/legacy/legacy-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/masterpass/masterpass-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/no-payment/no-payment-data-required-strategy.ts","webpack://checkoutKit/./src/payment/strategies/offline/offline-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/offsite/offsite-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/paypal/paypal-pro-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/paypal/paypal-express-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/sage-pay/sage-pay-payment-strategy.ts","webpack://checkoutKit/./src/common/error/errors/unsupported-browser-error.ts","webpack://checkoutKit/./src/payment/strategies/square/square-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/square/square-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/wepay/wepay-risk-client.ts","webpack://checkoutKit/./src/payment/strategies/wepay/wepay-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/zip/zip-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/zip/zip-script-loader.ts","webpack://checkoutKit/./src/payment/create-payment-strategy-registry.ts","webpack://checkoutKit/./src/payment/strategies/braintree/create-braintree-payment-processor.ts","webpack://checkoutKit/./src/payment/instrument/instrument-action-creator.ts","webpack://checkoutKit/./src/common/date-time/add-minutes.ts","webpack://checkoutKit/./src/common/date-time/is-future.ts","webpack://checkoutKit/./src/payment/instrument/instrument-response-transformer.ts","webpack://checkoutKit/./src/payment/instrument/instrument-request-sender.ts","webpack://checkoutKit/./src/checkout/checkout-store-selector.ts","webpack://checkoutKit/./src/checkout/checkout-store-error-selector.ts","webpack://checkoutKit/./src/checkout/checkout-store-status-selector.ts","webpack://checkoutKit/./src/checkout/create-checkout-selectors.ts","webpack://checkoutKit/./src/common/error/error-message-transformer.ts","webpack://checkoutKit/./src/checkout/checkout-service.ts","webpack://checkoutKit/./src/checkout/create-checkout-service-error-transformer.ts","webpack://checkoutKit/./src/checkout/create-checkout-service.ts","webpack://checkoutKit/./src/payment/create-payment-client.ts","webpack://checkoutKit/./src/checkout/index.ts","webpack://checkoutKit/./src/common/error/errors/request-error.ts","webpack://checkoutKit/./src/config/config-actions.ts","webpack://checkoutKit/./src/common/selector/selector-decorator.ts","webpack://checkoutKit/./src/common/http-request/content-type.ts","webpack://checkoutKit/./src/geography/country-actions.ts","webpack://checkoutKit/./src/shipping/shipping-country-actions.ts","webpack://checkoutKit/external \"@bigcommerce/request-sender\"","webpack://checkoutKit/./src/payment/payment-status-types.ts","webpack://checkoutKit/external \"@bigcommerce/script-loader\"","webpack://checkoutKit/./src/payment/payment-strategy-state.ts","webpack://checkoutKit/./src/common/error/clear-error-reducer.ts","webpack://checkoutKit/./src/checkout/checkout-default-includes.ts","webpack://checkoutKit/./src/common/utility/is-equal.ts","webpack://checkoutKit/./src/customer/customer-actions.ts","webpack://checkoutKit/./src/payment/payment-actions.ts","webpack://checkoutKit/./src/common/error/errors/invalid-argument-error.ts","webpack://checkoutKit/./src/payment/payment-method-types.ts","webpack://checkoutKit/./src/embedded-checkout/is-iframe-event.ts","webpack://checkoutKit/./src/payment/errors/payment-method-invalid-error.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-error-selector.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-status-selector.ts","webpack://checkoutKit/./src/checkout-buttons/create-checkout-button-selectors.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-initializer.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/checkout-button-method-type.ts","webpack://checkoutKit/./src/common/dom/is-element-id.ts","webpack://checkoutKit/./src/common/dom/set-unique-element-id.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-strategy-action-creator.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/braintree/braintree-paypal-button-strategy.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/googlepay/googlepay-button-strategy.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/masterpass/masterpass-button-strategy.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/paypal/paypal-button-strategy.ts","webpack://checkoutKit/./src/checkout-buttons/create-checkout-button-initializer.ts","webpack://checkoutKit/./src/checkout-buttons/create-checkout-button-registry.ts","webpack://checkoutKit/./src/checkout-buttons/index.ts","webpack://checkoutKit/./src/checkout/checkout-params.ts","webpack://checkoutKit/external \"@bigcommerce/form-poster\"","webpack://checkoutKit/./src/cart/map-to-internal-line-items.ts","webpack://checkoutKit/./src/common/utility/amount-transformer.ts","webpack://checkoutKit/external \"local-storage-fallback\"","webpack://checkoutKit/./src/common/error/throw-error-action.ts","webpack://checkoutKit/./src/common/utility/cache-key-resolver.ts","webpack://checkoutKit/./src/common/utility/bind-decorator.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-event-poster.ts","webpack://checkoutKit/./src/checkout/create-action-transformer.ts","webpack://checkoutKit/./src/checkout/checkout-selector.ts","webpack://checkoutKit/./src/checkout/checkout-reducer.ts","webpack://checkoutKit/./src/cart/map-gift-certificate-to-internal-line-item.ts","webpack://checkoutKit/./src/cart/map-to-internal-line-item.ts","webpack://checkoutKit/./src/billing/billing-address-selector.ts","webpack://checkoutKit/./src/config/config-selector.ts","webpack://checkoutKit/./src/form/form-selector.ts","webpack://checkoutKit/./src/geography/country-selector.ts","webpack://checkoutKit/./src/payment/payment-selector.ts","webpack://checkoutKit/./src/payment/payment-method-selector.ts","webpack://checkoutKit/./src/payment/payment-strategy-selector.ts","webpack://checkoutKit/./src/payment/instrument/instrument-selector.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-selector.ts","webpack://checkoutKit/./src/checkout/create-internal-checkout-selectors.ts","webpack://checkoutKit/./src/common/utility/set-prototype-of.ts","webpack://checkoutKit/./src/common/utility/is-private.ts","webpack://checkoutKit/./src/common/utility/omit-deep.ts","webpack://checkoutKit/./src/common/error/error-actions.ts","webpack://checkoutKit/./src/payment/payment-method-action-creator.ts","webpack://checkoutKit/./src/payment/payment-method-request-sender.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-content/embedded-content-events.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-event-listener.ts","webpack://checkoutKit/./src/common/http-request/internal-api-headers.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-selector.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-reducer.ts","webpack://checkoutKit/./src/embedded-checkout/errors/not-embeddable-error.ts","webpack://checkoutKit/./src/common/storage/browser-storage.ts","webpack://checkoutKit/./src/embedded-checkout/errors/invalid-login-token-error.ts","webpack://checkoutKit/./src/embedded-checkout/embedded-checkout.ts","webpack://checkoutKit/./src/embedded-checkout/loading-indicator.ts","webpack://checkoutKit/./src/embedded-checkout/resizable-iframe-creator.ts","webpack://checkoutKit/./src/embedded-checkout/embed-checkout.ts","webpack://checkoutKit/./src/embedded-checkout/index.ts","webpack://checkoutKit/./src/cart/map-to-internal-cart.ts","webpack://checkoutKit/./src/promotion/map-to-discount-notifications.ts","webpack://checkoutKit/./src/checkout/checkout-action-creator.ts","webpack://checkoutKit/./src/shipping/consignment-action-creator.ts","webpack://checkoutKit/./src/shipping/consignment-request-sender.ts","webpack://checkoutKit/./src/shipping/map-to-internal-shipping-option.ts","webpack://checkoutKit/./src/common/error/errors/unrecoverable-error.ts","webpack://checkoutKit/./src/common/error/errors/map-from-internal-error-response.ts","webpack://checkoutKit/./src/common/error/errors/map-from-payment-error-response.ts","webpack://checkoutKit/./src/common/error/request-error-factory.ts","webpack://checkoutKit/./src/common/error/errors/map-from-storefront-error-response.ts","webpack://checkoutKit/./src/billing/billing-address-reducer.ts","webpack://checkoutKit/./src/config/config-reducer.ts","webpack://checkoutKit/./src/geography/country-reducer.ts","webpack://checkoutKit/./src/payment/payment-reducer.ts","webpack://checkoutKit/./src/payment/payment-method-reducer.ts","webpack://checkoutKit/./src/payment/payment-strategy-reducer.ts","webpack://checkoutKit/./src/payment/instrument/instrument-reducer.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-reducer.ts","webpack://checkoutKit/./src/checkout/create-checkout-store.ts","webpack://checkoutKit/./src/common/error/create-request-error-factory.ts","webpack://checkoutKit/./src/checkout/create-checkout-store-reducer.ts","webpack://checkoutKit/./src/checkout/errors/checkout-not-available-error.ts","webpack://checkoutKit/./src/checkout/checkout-request-sender.ts","webpack://checkoutKit/./src/address/is-address-equal.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-sdk-creator.ts","webpack://checkoutKit/./src/coupon/map-to-internal-coupon.ts","webpack://checkoutKit/external \"iframe-resizer\"","webpack://checkoutKit/./src/address/map-to-internal-address.ts","webpack://checkoutKit/./src/billing/is-billing-address-like.ts","webpack://checkoutKit/./src/common/http-request/join-includes.ts","webpack://checkoutKit/./src/common/error/errors/not-initialized-error.ts","webpack://checkoutKit/./src/common/url/parse-url.ts","webpack://checkoutKit/./src/common/action/cachable-action-decorator.ts","webpack://checkoutKit/./src/common/action/is-action-options.ts","webpack://checkoutKit/./src/common/action/cache-action.ts","webpack://checkoutKit/./src/common/utility/create-freeze-proxy.ts","webpack://checkoutKit/./src/customer/customer-strategy-action-creator.ts","webpack://checkoutKit/./src/customer/customer-action-creator.ts","webpack://checkoutKit/./src/customer/customer-request-sender.ts","webpack://checkoutKit/./src/cart/cart-selector.ts","webpack://checkoutKit/./src/coupon/coupon-selector.ts","webpack://checkoutKit/./src/customer/customer-selector.ts","webpack://checkoutKit/./src/customer/customer-strategy-selector.ts","webpack://checkoutKit/./src/coupon/gift-certificate-selector.ts","webpack://checkoutKit/./src/shipping/shipping-address-selector.ts","webpack://checkoutKit/./src/shipping/shipping-country-selector.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-selector.ts","webpack://checkoutKit/./src/shipping/consignment-selector.ts","webpack://checkoutKit/./src/order/order-selector.ts","webpack://checkoutKit/./src/cart/cart-reducer.ts","webpack://checkoutKit/./src/shipping/consignment-reducer.ts","webpack://checkoutKit/./src/coupon/coupon-reducer.ts","webpack://checkoutKit/./src/customer/customer-reducer.ts","webpack://checkoutKit/./src/coupon/gift-certificate-reducer.ts","webpack://checkoutKit/./src/order/order-reducer.ts","webpack://checkoutKit/./src/common/utility/merge-or-push.ts","webpack://checkoutKit/./src/shipping/shipping-country-reducer.ts","webpack://checkoutKit/./src/customer/map-to-internal-customer.ts","webpack://checkoutKit/./src/coupon/map-to-internal-gift-certificate.ts","webpack://checkoutKit/./src/order/map-to-internal-order.ts","webpack://checkoutKit/./src/customer/customer-strategy-state.ts","webpack://checkoutKit/./src/customer/customer-strategy-reducer.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-state.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-reducer.ts","webpack://checkoutKit/./src/payment/strategies/masterpass/get-callback-url.ts","webpack://checkoutKit/./src/common/utility/omit-private.ts","webpack://checkoutKit/./src/common/utility/get-environment.ts","webpack://checkoutKit/./src/order/order-request-sender.ts","webpack://checkoutKit/./src/order/order-action-creator.ts","webpack://checkoutKit/./src/cart/cart-comparator.ts","webpack://checkoutKit/./src/common/utility/to-single-line.ts","webpack://checkoutKit/./src/coupon/coupon-action-creator.ts","webpack://checkoutKit/./src/coupon/coupon-request-sender.ts","webpack://checkoutKit/./src/coupon/gift-certificate-action-creator.ts","webpack://checkoutKit/./src/coupon/gift-certificate-request-sender.ts","webpack://checkoutKit/./src/common/utility/cancellable-promise.ts","webpack://checkoutKit/./src/address/is-internal-address-equal.ts","webpack://checkoutKit/./src/address/map-from-internal-address.ts","webpack://checkoutKit/./src/shipping/shipping-country-action-creator.ts","webpack://checkoutKit/./src/shipping/shipping-country-request-sender.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-action-creator.ts","webpack://checkoutKit/./src/common/error/errors/not-implemented-error.ts","webpack://checkoutKit/./src/customer/strategies/amazon/amazon-pay-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/braintree/braintree-visacheckout-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/chasepay/chasepay-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/default/default-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/googlepay/googlepay-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/masterpass/masterpass-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/square/square-customer-strategy.ts","webpack://checkoutKit/./src/customer/create-customer-strategy-registry.ts","webpack://checkoutKit/./src/shipping/strategies/amazon/amazon-pay-shipping-strategy.ts","webpack://checkoutKit/./src/shipping/strategies/default/default-shipping-strategy.ts","webpack://checkoutKit/./src/shipping/create-shipping-strategy-registry.ts","webpack://checkoutKit/external \"@bigcommerce/bigpay-client\"","webpack://checkoutKit/external \"messageformat\"","webpack://checkoutKit/./src/common/error/errors/timeout-error.ts","webpack://checkoutKit/./src/config/config-action-creator.ts","webpack://checkoutKit/./src/config/config-request-sender.ts","webpack://checkoutKit/./src/billing/billing-address-action-creator.ts","webpack://checkoutKit/./src/billing/billing-address-request-sender.ts","webpack://checkoutKit/./src/common/registry/registry.ts","webpack://checkoutKit/./src/common/http-request/to-form-url-encoded.ts","webpack://checkoutKit/./src/payment/strategies/masterpass/masterpass-script-loader.ts","webpack://checkoutKit/./src/remote-checkout/errors/remote-checkout-synchronization-error.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-braintree-initializer.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-stripe-initializer.ts","webpack://checkoutKit/./src/payment/strategies/paypal/paypal-script-loader.ts","webpack://checkoutKit/external \"iframe-resizer/js/iframeResizer.contentWindow\"","webpack://checkoutKit/./src/embedded-checkout/iframe-content/handle-frame-loaded-event.ts","webpack://checkoutKit/./src/common/error/errors/custom-error.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-content/iframe-embedded-checkout-messenger.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-content/noop-embedded-checkout-messenger.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-content/create-embedded-checkout-messenger.ts","webpack://checkoutKit/./src/locale/language-service.ts","webpack://checkoutKit/./src/locale/create-language-service.ts","webpack://checkoutKit/./src/currency/currency-formatter.ts","webpack://checkoutKit/./src/currency/currency-service.ts","webpack://checkoutKit/./src/currency/create-currency-service.ts","webpack://checkoutKit/./src/index.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-payment-processor.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/create-googlepay-payment-processor.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-request-sender.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-action-creator.ts","webpack://checkoutKit/./src/payment/strategies/amazon-pay/amazon-pay-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/braintree/visacheckout-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/chasepay/chasepay-script-loader.ts","webpack://checkoutKit/./src/common/log/console-logger.ts","webpack://checkoutKit/./src/common/log/noop-logger.ts","webpack://checkoutKit/./src/common/log/get-default-logger.ts","webpack://checkoutKit/./src/common/log/create-logger.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-visacheckout-payment-processor.ts","webpack://checkoutKit/./src/payment/strategies/braintree/create-braintree-visacheckout-payment-processor.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","ConsignmentActionType","__webpack_exports__","CheckoutActionType","MissingDataErrorType","MissingDataError","_super","subtype","_this","this","type","MissingBillingAddress","MissingCart","MissingConsignments","MissingCheckout","MissingCheckoutConfig","MissingOrderConfig","MissingOrder","MissingOrderId","MissingPayment","MissingPaymentMethod","MissingShippingAddress","getErrorMessage","tslib__WEBPACK_IMPORTED_MODULE_0__","_standard_error__WEBPACK_IMPORTED_MODULE_1__","CustomerStrategyActionType","PaymentStrategyActionType","ShippingStrategyActionType","CouponActionType","OrderActionType","StandardError","message","_utility__WEBPACK_IMPORTED_MODULE_1__","_newTarget","Error","captureStackTrace","stack","BillingAddressActionType","GiftCertificateActionType","PaymentMethodActionType","CheckoutButtonActionType","InstrumentActionType","EmbeddedCheckoutEventType","RemoteCheckoutActionType","ErrorActionCreator","clearError","error","error_actions","ClearError","payload","CountryActionCreator","_countryRequestSender","loadCountries","options","external_rxjs_","observer","next","data_store_","country_actions","LoadCountriesRequested","then","response","LoadCountriesSucceeded","body","data","complete","catch","LoadCountriesFailed","CountryRequestSender","_requestSender","_config","_a","timeout","headers","Accept-Language","locale","PaymentStrategyType","OrderFinalizationNotRequiredError","external_tslib_","standard_error","payment_strategy_type","PaymentStrategyActionCreator","_strategyRegistry","_orderActionCreator","execute","store","strategy","state","getState","payment","useStoreCredit","meta","methodId","isPaymentDataRequired","method","paymentMethods","getPaymentMethod","gatewayId","missing_data_error","getByMethod","NO_PAYMENT_DATA_REQUIRED","payment_strategy_actions","ExecuteRequested","undefined","ExecuteSucceeded","ExecuteFailed","finalize","FinalizeRequested","_loadOrderPaymentsIfNeeded","getPaymentId","order_finalization_not_required_error","providerId","id","gateway","FinalizeSucceeded","pipe","operators_","throw_error_action","FinalizeFailed","initialize","paymentStrategies","isInitialized","InitializeRequested","InitializeSucceeded","InitializeFailed","deinitialize","DeinitializeRequested","DeinitializeSucceeded","DeinitializeFailed","widgetInteraction","WidgetInteractionStarted","WidgetInteractionFinished","WidgetInteractionFailed","checkout","getCheckout","orderId","loadOrderPayments","CartChangedError","CheckoutValidator","_checkoutRequestSender","validate","loadCheckout","comparator","cart_comparator","grandTotal","_compareCoupons","coupons","_compareGiftCertificates","giftCertificates","isEqual","cart","cart_changed_error","couponsA","couponsB","external_lodash_","giftCertificatesA","giftCertificatesB","isVaultedInstrument","instrument","Boolean","instrumentId","PaymentActionCreator","_paymentRequestSender","submitPayment","payment_actions","SubmitPaymentRequested","_getPaymentRequestBody","loadCurrentOrder","SubmitPaymentSucceeded","SubmitPaymentFailed","initializeOffsitePayment","InitializeOffsitePaymentRequested","InitializeOffsitePaymentSucceeded","InitializeOffsitePaymentFailed","billingAddress","getBillingAddress","customer","getCustomer","order","getOrder","paymentMethod","_getPaymentMethod","shippingAddress","getShippingAddress","consignments","getConsignments","shippingOption","getShippingOption","storeConfig","config","getStoreConfig","contextConfig","getContextConfig","instrumentMeta","instruments","getInstrumentsMeta","paymentMeta","getPaymentMethodsMeta","orderMeta","getOrderMeta","internalCustomer","map_to_internal_customer","authToken","paymentData","getPaymentToken","vaultAccessToken","map_to_internal_address","map_to_internal_shipping_option","map_to_internal_cart","map_to_internal_order","quoteMeta","request","geoCountryCode","source","storeProfile","paymentMethodSelector","initializationData","PaymentRequestSender","_client","Promise","resolve","reject","_transformResponse","status","statusText","PaymentStrategyRegistry","_store","token","_getToken","cacheToken","_hasFactoryForMethod","payment_method_types","OFFLINE","_isLegacyMethod","LEGACY","OFFSITE","CREDIT_CARD","_hasFactory","clientSidePaymentProviders","paymentSettings","registry_registry","PaymentArgumentInvalidError","invalidFields","join","invalid_argument_error","PaymentMethodCancelledError","AffirmPaymentStrategy","_paymentActionCreator","_paymentMethodActionCreator","_affirmScriptLoader","dispatch","loadPaymentMethod","clientToken","testMode","publicKey","load","affirm","_affirm","not_initialized_error","PaymentNotInitialized","payment_argument_invalid_error","submitOrder","_getCheckoutInformation","open","onFail","failObject","reason","payment_method_cancelled_error","payment_method_invalid_error","onSuccess","successObject","ui","on","result","paymentPayload","nonce","checkout_token","amountTransformer","amount_transformer","currency","decimalPlaces","_getBillingAddress","merchant","user_confirmation_url","links","checkoutLink","user_cancel_url","user_confirmation_url_action","shipping","_getShippingAddress","billing","items","_getItems","metadata","shipping_type","_getShippingType","platform_type","platform_version","platform_affirm","discounts","_getDiscounts","order_id","toString","shipping_amount","toInteger","shippingCostTotal","tax_amount","taxTotal","total","orderAmount","consignment","selectedShippingOption","first","firstName","last","lastName","full","address","line1","address1","line2","address2","city","stateOrProvinceCode","zipcode","postalCode","country","countryCode","phone_number","phone","email","_i","lineItems","physicalItems","length","item","push","display_name","sku","unit_price","salePrice","qty","quantity","item_image_url","imageUrl","item_url","url","_b","_c","digitalItems","_d","_e","amount","customItems","_f","_g","listPrice","line","discountedAmount","code","discount_amount","discount_display_name","displayName","discountAmount","DISCOUNTED_AMOUNT","affirmJs","Function","AffirmScriptLoader","_window","window","apikey","scriptURI","_getScriptURI","AfterpayPaymentStrategy","_checkoutValidator","_remoteCheckoutActionCreator","_afterpayScriptLoader","storeCountryName","storeCountry","_mapCountryToISO2","afterpaySdk","_afterpaySdk","paymentId","initializePayment","_displayModal","loadSettings","afterpay","remoteCheckout","settings","orderPayload","countryName","display","SCRIPTS_DEFAULT","SCRIPTS_US","AfterpayScriptLoader","_scriptLoader","loadScript","AfterPay","AmazonPayPaymentStrategy","_billingAddressActionCreator","amazonOptions","amazon","_walletOptions","_paymentMethod","loadWidget","_createWallet","referenceId","_getOrderReferenceId","request_error","_getMerchantId","merchantId","container","onError","onPaymentSelect","onReady","document","getElementById","OffAmazonPayments","walletOptions","amazonOrderReferenceId","design","designMode","scope","sellerId","orderReference","_synchronizeBillingAddress","_updateOrderReference","widget","Widgets","Wallet","remote_checkout_synchronization_error","initializeBilling","remoteAddress","internalBillingAddress","is_internal_address_equal","updateAddress","map_from_internal_address","updateCheckout","getAmazonOrderReferenceId","Overlay","_element","_createElement","show","parentElement","_registerClick","appendChild","setTimeout","style","opacity","remove","_unregisterClick","_removeAfterTransition","element","createElement","background","transitionDuration","height","left","position","top","transition","width","zIndex","onClick","onClick_1","addEventListener","removeEventListener","handeTransition","event","propertyName","removeChild","BraintreePaymentProcessor","_braintreeSDKCreator","_overlay","_threeDSecureOptions","threeDSecure","preloadPaypal","getPaypal","tokenizeCard","requestData","_mapToCreditCard","getClient","client","creditCards","paypal","storeLanguage","offerCredit","focusWindow","tokenize","enableShippingAddress","flow","useraction","verifyCard","addFrame","removeFrame","all","get3DS","cancelVerifyCard","verification","cancel","cancellable_promise","iframe","promise","appendSessionId","processedPayment","getDataCollector","deviceData","deviceSessionId","teardown","creditCard","streetAddress","cardholderName","ccName","number","ccNumber","cvv","ccCvv","expirationDate","ccExpiry","month","year","endpoint","BraintreeCreditCardPaymentStrategy","_braintreePaymentProcessor","braintree","_is3dsEnabled","is3dsEnabled","_handleError","orderRequest","_preparePaymentData","_isUsingVaulting","card","shouldSaveInstrument","tokenizedCard","ChasePayEventType","BraintreePaypalPaymentStrategy","_credit","braintreeOptions","isBraintreeError","getGrandTotal","BraintreeVisaCheckoutPaymentStrategy","_checkoutActionCreator","_paymentStrategyActionCreator","_braintreeVisaCheckoutPaymentProcessor","_visaCheckoutScriptLoader","visaCheckoutOptions","braintreevisacheckout","initOptions","collectShipping","subtotal","currencyCode","visaCheckout","visaInitOptions","init","paymentSuccessPayload","_paymentInstrumentSelected","handleSuccess","loadCurrentCheckout","queueId","CardBrand","DigitalWalletType","chasepay_payment_strategy","ChasePayPaymentStrategy","_chasePayScriptLoader","_wepayRiskClient","_walletEvent$","_methodId","chasepay","walletButton","_walletButton","_handleWalletButtonClick","_configureWallet","_chasePayClient","_getPayment","_displayWallet","_createOrder","ChasePay","logoContainer","insertBrandings","color","containers","configure","language","CancelCheckout","onCancel","CompleteCheckout","_setSessionToken","sessionToken","showLoadingAnimation","startCheckout","digitalSessionId","subscribe","merchantRequestId","post","Accept","Content-Type","to_form_url_encoded","action","provider","getRiskToken","riskToken","paymentCryptogram","cryptogramId","eci","transactionId","btoa","reqTokenId","expDate","substr","accountNum","accountMask","extraData","preventDefault","bind_decorator","ConvergePaymentStrategy","_formPoster","errors","postForm","three_ds_result","acs_url","PaReq","payer_auth_request","TermUrl","callback_url","MD","merchant_data","getPaymentStatus","payment_status_types","finalizeOrder","CreditCardPaymentStrategy","googlepay_payment_strategy","GooglePayPaymentStrategy","_googlePayPaymentProcessor","_googlePayOptions","_getGooglePayOptions","cardInformation","displayWallet","statusCode","googlepaybraintree","googlepaystripe","card_information","KlarnaPaymentStrategy","_klarnaScriptLoader","_supportedEUCountries","klarnaCredit","_klarnaCredit","_unsubscribe","_loadWidget","_authorize","authorizationToken","authorization_token","klarna","onLoad","updateSessionData","_getUpdateSessionData","client_token","show_form","billing_address","_mapToKlarnaAddress","shipping_address","klarnaAddress","street_address","given_name","family_name","postal_code","region","stateOrProvince","street_address2","authorize","res","approved","KlarnaScriptLoader","Klarna","Credit","LegacyPaymentStrategy","masterpass_payment_strategy","MasterpassPaymentStrategy","_masterpassScriptLoader","masterpass","_masterpassClient","_createMasterpassPayload","checkoutId","allowedCardTypes","toFixed","cartId","suppressShippingAddress","callbackUrl","get_callback_url","NoPaymentDataRequiredPaymentStrategy","OfflinePaymentStrategy","OffsitePaymentStrategy","_shouldSubmitFullPayload","PaypalProPaymentStrategy","_isPaymentAcknowledged","PaypalExpressPaymentStrategy","_useRedirectFlow","paypalexpress","useRedirectFlow","_isInContextEnabled","loadPaypal","_paypalSdk","setup","button","environment","closeFlow","_isAcknowledgedOrFinalized","redirectUrl","getPaymentRedirectUrl","location","href","initXO","startFlow","SagePayPaymentStrategy","UnsupportedBrowserError","SquarePaymentStrategy","_syncPaymentMethod","createSquareForm","_paymentForm","_getFormOptions","build","_getNonceInstrument","_getCountryCode","toUpperCase","_deferredRequestNonce","timeout_error","requestCardNonce","deferred","squareOptions","square","_squareOptions","callbacks","cardNonceResponseReceived","cardData","billingContact","shippingContact","digital_wallet_type","none","_handleWalletNonceResponse","_handleCardNonceResponse","createPaymentRequest","_paymentRequestPayload","methodsSupported","methods","_showPaymentMethods","paymentFormLoaded","_setPostalCode","unsupportedBrowserDetected","unsupported_browser_error","_setExternalCheckoutData","requestShippingAddress","requestBillingInfo","label","storeName","String","pending","JSON","stringify","setPostalCode","masterpassBtn","elementId","SquareScriptLoader","SqPaymentForm","WepayRiskClient","_riskClient","WePay","risk","generate_risk_token","get_risk_token","WepayPaymentStrategy","orderActionCreator","paymentActionCreator","payloadWithToken","credit_card_payment_strategy","ZipPaymentStrategy","_zipScriptLoader","zip","_zipClient","zipClient","Checkout","onComplete","onCheckout","openModal","parse","ZipScriptLoader","Zip","createPaymentStrategyRegistry","paymentClient","requestSender","registry","payment_strategy_registry","defaultToken","scriptLoader","script_loader_","billingAddressActionCreator","billing_address_action_creator","billing_address_request_sender","braintreePaymentProcessor","braintreeScriptLoader","braintree_script_loader","braintreeSDKCreator","braintree_sdk_creator","overlay","overlay_overlay","braintree_payment_processor","createBraintreePaymentProcessor","checkoutRequestSender","checkout_request_sender","checkoutValidator","checkout_validator","order_action_creator","order_request_sender","payment_action_creator","payment_request_sender","paymentMethodActionCreator","payment_method_action_creator","payment_method_request_sender","remoteCheckoutActionCreator","remote_checkout_action_creator","remote_checkout_request_sender","configActionCreator","config_action_creator","config_request_sender","checkoutActionCreator","checkout_action_creator","paymentStrategyActionCreator","payment_strategy_action_creator","formPoster","form_poster_","register","AFFIRM","affirm_payment_strategy","affirm_script_loader","AFTERPAY","afterpay_payment_strategy","afterpay_script_loader","AMAZON","amazon_pay_payment_strategy","amazon_pay_script_loader","KLARNA","klarna_payment_strategy","klarna_script_loader","legacy_payment_strategy","offline_payment_strategy","offsite_payment_strategy","PAYPAL","paypal_pro_payment_strategy","PAYPAL_EXPRESS","paypal_express_payment_strategy","paypal_script_loader","PAYPAL_EXPRESS_CREDIT","SAGE_PAY","sage_pay_payment_strategy","SQUARE","square_payment_strategy","square_script_loader","no_payment_data_required_strategy","BRAINTREE","braintree_credit_card_payment_strategy","BRAINTREE_PAYPAL","braintree_paypal_payment_strategy","BRAINTREE_PAYPAL_CREDIT","BRAINTREE_VISA_CHECKOUT","braintree_visacheckout_payment_strategy","create_braintree_visacheckout_payment_processor","visacheckout_script_loader","CHASE_PAY","chasepay_script_loader","wepay_risk_client","BRAINTREE_GOOGLE_PAY","create_googlepay_payment_processor","googlepay_braintree_initializer","WE_PAY","wepay_payment_strategy","MASTERPASS","masterpass_script_loader","STRIPE_GOOGLE_PAY","googlepay_stripe_initializer","ZIP","zip_payment_strategy","zip_script_loader","CONVERGE","converge_payment_strategy","InstrumentActionCreator","_instrumentRequestSender","loadInstruments","instrument_actions","LoadInstrumentsRequested","session","_getSessionContext","_getCurrentAccessToken","_getValidAccessToken","currentToken","LoadInstrumentsSucceeded","LoadInstrumentsFailed","deleteInstrument","DeleteInstrumentRequested","DeleteInstrumentSucceeded","DeleteInstrumentFailed","_isValidVaultAccessToken","date","newDate","valueOf","Date","now","isFuture","vaultAccessExpiry","getTime","setMinutes","getMinutes","getVaultAccessToken","getCart","customerId","storeId","InstrumentResponseTransformer","transformResponse","vaultedInstruments","_transformVaultedInstruments","vaulted_instruments","transformErrorResponse","transformVaultAccessResponse","expires_at","map","bigpayToken","bigpay_token","defaultInstrument","default_instrument","iin","last4","last_4","expiryMonth","expiry_month","expiryYear","expiry_year","brand","trustedShippingAddress","trusted_shipping_address","InstrumentRequestSender","_transformer","instrument_response_transformer","requestContext","_loadInstrumentsWithAddress","_loadInstruments","deleteShopperInstrument","errorResponse","loadInstrumentsWithAddress","checkout_store_selector","CheckoutStoreSelector","selectors","_billingAddress","_cart","_checkout","_consignments","_countries","countries","_coupons","_customer","_form","form","_giftCertificates","_instruments","_order","_payment","_paymentMethods","_shippingAddress","_shippingCountries","shippingCountries","getConfig","context","company","customFields","getShippingOptions","availableShippingOptions","getSelectedShippingOption","getShippingCountries","getBillingCountries","getCountries","getPaymentMethods","getSelectedPaymentMethod","getCoupons","getGiftCertificates","isPaymentDataSubmitted","getInstruments","getBillingAddressFields","getShippingAddressFields","selector_decorator","checkout_store_error_selector","CheckoutStoreErrorSelector","_customerStrategies","customerStrategies","_paymentStrategies","_shippingStrategies","shippingStrategies","getError","getLoadCheckoutError","getSubmitOrderError","getFinalizeOrderError","getLoadOrderError","getLoadCartError","getLoadBillingCountriesError","getLoadShippingCountriesError","getLoadPaymentMethodsError","getLoadPaymentMethodError","getInitializePaymentError","getLoadShippingOptionsError","getSelectShippingOptionError","getSignInError","getSignOutError","getInitializeCustomerError","getUpdateShippingAddressError","getUpdateBillingAddressError","getContinueAsGuestError","getUpdateConsignmentError","getCreateConsignmentsError","getDeleteConsignmentError","getInitializeShippingError","getApplyCouponError","getRemoveCouponError","getApplyGiftCertificateError","getRemoveGiftCertificateError","getLoadInstrumentsError","getDeleteInstrumentError","getLoadConfigError","getLoadError","getUpdateCheckoutError","getUpdateError","getExecuteError","getFinalizeError","getLoadMethodError","getInitializeError","consignmentId","getSelectOptionError","getUpdateShippingOptionError","getUpdateAddressError","getDeleteError","getCreateError","getApplyError","getRemoveError","checkout_store_status_selector","CheckoutStoreStatusSelector","isPending","isLoadingCheckout","isSubmittingOrder","isFinalizingOrder","isLoadingOrder","isLoadingCart","isLoadingBillingCountries","isLoadingShippingCountries","isLoadingPaymentMethods","isLoadingPaymentMethod","isInitializingPayment","isLoadingShippingOptions","isSelectingShippingOption","isSigningIn","isSigningOut","isInitializingCustomer","isUpdatingBillingAddress","isContinuingAsGuest","isUpdatingShippingAddress","isUpdatingConsignment","isCreatingConsignments","isDeletingConsignment","isInitializingShipping","isApplyingCoupon","isRemovingCoupon","isApplyingGiftCertificate","isRemovingGiftCertificate","isLoadingInstruments","isDeletingInstrument","isLoadingConfig","isCustomerStepPending","isPaymentStepPending","isLoading","isUpdatingCheckout","isUpdating","isExecuting","isFinalizing","isLoadingMethod","isInitializing","isSelectingOption","isUpdatingShippingOption","isUpdatingAddress","isDeleting","isCreating","isApplying","isRemoving","isWidgetInteracting","createCheckoutSelectors","statuses","ErrorMessageTransformer","_messageCustomizer","transform","to_single_line","CheckoutService","_configActionCreator","_consignmentActionCreator","_countryActionCreator","_couponActionCreator","_customerStrategyActionCreator","_errorActionCreator","_giftCertificateActionCreator","_instrumentActionCreator","_shippingCountryActionCreator","_shippingStrategyActionCreator","isDevelopment","_state","_errorTransformer","get_environment","error_message_transformer","isCheckoutServiceError","CustomerNotInitialized","ShippingNotInitialized","notifyState","subscriber","filters","arguments","apply","concat","filter","_dispatch","loadDefaultCheckout","loadOrder","loadCheckoutAction","loadConfigAction","loadConfig","finalizeOrderIfNeeded","loadPaymentMethods","deinitializePayment","loadBillingCountries","loadShippingCountries","loadBillingAddressFields","loadShippingAddressFields","initializeCustomer","deinitializeCustomer","continueAsGuest","credentials","signInCustomer","signIn","signOutCustomer","signOut","loadShippingOptions","initializeShipping","deinitializeShipping","selectShippingOption","shippingOptionId","selectOption","updateShippingAddress","createConsignments","deleteConsignment","updateConsignment","assignItemsToAddress","assignItemsByAddress","unassignItemsToAddress","unassignItemsByAddress","selectConsignmentShippingOption","updateShippingOption","updateBillingAddress","applyCoupon","removeCoupon","applyGiftCertificate","removeGiftCertificate","createCheckoutService","protocol","get_default_logger","warn","externalSource","shouldWarnMutation","request_sender_","host","create_checkout_store","bigpay_client_","setHost","bigpayBaseUrl","createPaymentClient","orderRequestSender","checkout_service","consignment_action_creator","consignment_request_sender","country_action_creator","country_request_sender","coupon_action_creator","coupon_request_sender","customer_strategy_action_creator","create_customer_strategy_registry","error_action_creator","gift_certificate_action_creator","gift_certificate_request_sender","instrument_action_creator","instrument_request_sender","shipping_country_action_creator","shipping_country_request_sender","shipping_strategy_action_creator","create_shipping_strategy_registry","DEFAULT_RESPONSE","RequestError","ConfigActionType","selectorDecorator","target","decoratedTarget","class_1","getOwnPropertyNames","forEach","descriptor","getOwnPropertyDescriptor","resolver","_utility__WEBPACK_IMPORTED_MODULE_2__","memoizedMethod","lodash__WEBPACK_IMPORTED_MODULE_1__","args","getKey","_utility__WEBPACK_IMPORTED_MODULE_3__","cachedValue","getUsedCount","newValue","_utility__WEBPACK_IMPORTED_MODULE_4__","keyFilter","_utility__WEBPACK_IMPORTED_MODULE_5__","cache","set","selectorMethodDecorator","ContentType","CountryActionType","ShippingCountryActionType","ACKNOWLEDGE","FINALIZE","DEFAULT_STATE","clearErrorReducer","_utility__WEBPACK_IMPORTED_MODULE_0__","_error_actions__WEBPACK_IMPORTED_MODULE_1__","isClearErrorAction","objectA","objectB","Array","isArray","index","length_1","isArrayEqual","isDateEqual","RegExp","isRegExpEqual","keysA","keys","keysB","length_2","isObjectEqual","CustomerActionType","PaymentActionType","InvalidArgumentError","HOSTED","isIframeEvent","PaymentMethodInvalidError","checkout_button_error_selector","CheckoutButtonErrorSelector","_checkoutButton","checkoutButton","getInitializeButtonError","getDeinitializeButtonError","getDeinitializeError","checkout_button_status_selector","CheckoutButtonStatusSelector","isInitializingButton","isDeinitializingButton","isDeinitializing","createCheckoutButtonSelectors","CheckoutButtonMethodType","CheckoutButtonInitializer","_buttonStrategyActionCreator","initializeButton","containerIds","containerId","test","selector","idPrefix","querySelectorAll","slice","setUniqueElementId","deinitializeButton","CheckoutButtonStrategyActionCreator","_registry","checkout_button_actions","InitializeButtonRequested","useCache","InitializeButtonSucceeded","InitializeButtonFailed","DeinitializeButtonRequested","DeinitializeButtonSucceeded","DeinitializeButtonFailed","checkout_button_method_type","BraintreePaypalButtonStrategy","_paypalScriptLoader","_offerCredit","paypalOptions","braintreepaypalcredit","braintreepaypal","getPaypalCheckout","paypalCheckout","_paypalCheckout","allowedSources","disallowedSources","allowCredit","FUNDING","CREDIT","Button","render","env","commit","shouldProcessPayment","funding","allowed","disallowed","shape","_setupPayment","onPaymentError","onAuthorize","_tokenizePayment","onAuthorizeError","addresses","CheckoutButtonNotInitialized","createPayment","shippingAddressEditable","shippingAddressOverride","_mapToBraintreeAddress","tokenizePayment","payment_type","device_data","_mapToLegacyShippingAddress","_mapToLegacyBillingAddress","details","recipientName","split","first_name","last_name","address_line_1","address_line_2","country_code","googlepay_button_strategy","GooglePayButtonStrategy","_getMethodId","_createSignInButton","parentNode","googlePayButton","createButton","_onPaymentSelectComplete","_onError","masterpass_button_strategy","MasterpassButtonStrategy","_signInButton","buttonContainer","src","cartAmount","PaypalButtonStrategy","_host","clientId","actions","X-API-INTERNAL","internal_api_headers","paymentID","payerID","payerId","payerInfo","payer","payer_info","createCheckoutButtonInitializer","checkout_button_initializer","checkout_button_strategy_action_creator","braintree_paypal_button_strategy","GOOGLEPAY_BRAINTREE","GOOGLEPAY_STRIPE","PAYPALEXPRESS","paypal_button_strategy","createCheckoutButtonRegistry","CheckoutIncludes","mapToInternalLineItems","_map_gift_certificate_to_internal_line_item__WEBPACK_IMPORTED_MODULE_0__","_map_to_internal_line_item__WEBPACK_IMPORTED_MODULE_1__","itemMap","idKey","reduce","mapToInternalLineItemType","AmountTransformer","_decimalPlaces","Math","round","pow","throwErrorAction","_bigcommerce_data_store__WEBPACK_IMPORTED_MODULE_0__","rxjs__WEBPACK_IMPORTED_MODULE_1__","_is_equal__WEBPACK_IMPORTED_MODULE_0__","CacheKeyResolver","_lastId","_maps","_resolveMap","parentMaps","cacheKey","usedCount","_generateKey","isMatched","parentMaps_1","maps","bindDecorator","bindMethodDecorator","bindClassDecorator","boundMethod","_common_url__WEBPACK_IMPORTED_MODULE_0__","IframeEventPoster","targetOrigin","_targetWindow","_targetOrigin","origin","postMessage","setTarget","createActionTransformer","requestErrorFactory","action$","rxjs_operators__WEBPACK_IMPORTED_MODULE_2__","every","isResponse","detail","createError","CheckoutSelector","storeCredit","max","loadError","updateError","_common_selector__WEBPACK_IMPORTED_MODULE_1__","checkoutReducer","_bigcommerce_data_store__WEBPACK_IMPORTED_MODULE_1__","dataReducer","errorsReducer","_common_error__WEBPACK_IMPORTED_MODULE_4__","statusesReducer","reducer","_checkout_actions__WEBPACK_IMPORTED_MODULE_9__","LoadCheckoutSucceeded","UpdateCheckoutSucceeded","_billing__WEBPACK_IMPORTED_MODULE_3__","UpdateBillingAddressSucceeded","_coupon__WEBPACK_IMPORTED_MODULE_5__","ApplyCouponSucceeded","RemoveCouponSucceeded","_shipping__WEBPACK_IMPORTED_MODULE_8__","CreateConsignmentsSucceeded","UpdateConsignmentSucceeded","DeleteConsignmentSucceeded","UpdateShippingOptionSucceeded","_coupon__WEBPACK_IMPORTED_MODULE_6__","ApplyGiftCertificateSucceeded","RemoveGiftCertificateSucceeded","lodash__WEBPACK_IMPORTED_MODULE_2__","_order__WEBPACK_IMPORTED_MODULE_7__","SubmitOrderSucceeded","LoadCheckoutRequested","LoadCheckoutFailed","UpdateCheckoutRequested","UpdateCheckoutFailed","mapGiftCertificateToInternalLineItem","_common_utility__WEBPACK_IMPORTED_MODULE_0__","amountAfterDiscount","discount","integerAmount","integerAmountAfterDiscount","integerDiscount","sender","recipient","attributes","variantId","mapToInternalLineItem","extendedListPrice","extendedSalePrice","downloadsPageUrl","downloadPageUrl","categoryNames","productId","option","addedByPromotion","billing_address_selector","BillingAddressSelector","continueAsGuestError","config_selector","ConfigSelector","getExternalSource","form_selector","FormSelector","selectedCountry","formFields","shippingAddressFields","field","_processField","billingAddressFields","_processCountry","_processProvince","_processsPostCode","default","fieldType","itemtype","subdivisions","required","hasPostalCodes","country_selector","CountrySelector","payment_selector","PaymentSelector","internalPayment","_getInternalPayment","_getHostedPayment","_getGatewayPayment","replace","step","payments","providerType","payment_method_selector","PaymentMethodSelector","loadMethodId","loadMethodError","payment_strategy_selector","PaymentStrategySelector","payment_strategy_state","initializeMethodId","initializeError","executeMethodId","executeError","finalizeMethodId","finalizeError","getWidgetInteractingError","widgetInteractionMethodId","widgetInteractionError","InstrumentSelector","failedInstrument","deleteError","deletingInstrument","remote_checkout_selector","RemoteCheckoutSelector","_remoteCheckout","createInternalCheckoutSelectors","cart_selector","checkout_button_selector","coupon_selector","customer_selector","customer_strategy_selector","gift_certificate_selector","instrument_selector","shipping_address_selector","shipping_country_selector","shipping_strategy_selector","consignment_selector","checkout_selector","order_selector","create_freeze_proxy","setPrototypeOf","__proto__","isPrivate","indexOf","omitDeep","lodash__WEBPACK_IMPORTED_MODULE_0__","predicate","ErrorActionType","PaymentMethodActionCreator","rxjs__WEBPACK_IMPORTED_MODULE_2__","_payment_method_actions__WEBPACK_IMPORTED_MODULE_4__","LoadPaymentMethodsRequested","sessionHash","LoadPaymentMethodsSucceeded","LoadPaymentMethodsFailed","LoadPaymentMethodRequested","LoadPaymentMethodSucceeded","LoadPaymentMethodFailed","_common_action__WEBPACK_IMPORTED_MODULE_3__","_common_http_request__WEBPACK_IMPORTED_MODULE_0__","_common_http_request__WEBPACK_IMPORTED_MODULE_1__","PaymentMethodRequestSender","JsonV1","EmbeddedContentEventType","IframeEventListener","sourceOrigin","_sourceOrigin","_common_url__WEBPACK_IMPORTED_MODULE_1__","_isListening","_listeners","listen","_handleMessage","stopListen","addListener","listener","listeners","removeListener","splice","trigger","_is_iframe_event__WEBPACK_IMPORTED_MODULE_3__","_common_utility__WEBPACK_IMPORTED_MODULE_2__","INTERNAL_USE_ONLY","CheckoutButtonSelector","initializedContainers","deinitializeError","_common_selector__WEBPACK_IMPORTED_MODULE_2__","DEFAULT_DATA_STATE","DEFAULT_ERROR_STATE","DEFAULT_STATUS_STATE","checkoutButtonReducer","_checkout_button_actions__WEBPACK_IMPORTED_MODULE_2__","NotEmbeddableErrorType","BrowserStorage","_namespace","getItem","rawValue","external_local_storage_fallback_default","a","withNamespace","removeItem","getItemOnce","setItem","InvalidLoginTokenError","title","NotEmbeddableError","UnknownError","EmbeddedCheckout","_iframeCreator","_messageListener","_messagePoster","_loadingIndicator","_storage","_location","_options","_isAttached","embedded_checkout_events","CheckoutComplete","CheckoutError","CheckoutLoaded","onFrameLoad","FrameLoaded","onSignOut","SignedOut","_configureStyles","attach","_allowCookie","_attemptLogin","createFrame","_iframe","hide","_retryAllowCookie","FrameError","detach","iFrameResizer","close","contentWindow","styles","embedded_content_events","StyleConfigured","parse_url","pathname","invalid_login_token_error","encodeURIComponent","visibility","not_embeddable_error","MissingContent","DEFAULT_STYLES","size","backgroundColor","ROTATION_ANIMATION","LoadingIndicator","_styles","_defineAnimation","_container","_buildContainer","_indicator","_buildIndicator","parentId","parent_1","handleTransitionEnd","bottom","right","indicator","borderRadius","border","borderColor","margin","transformStyle","animation","head","sheet","CSSStyleSheet","insertRule","ResizableIframeCreator","MissingContainer","allowPaymentRequest","_toResizableFrame","timeoutInterval","handleMessage","is_iframe_event","contentId","iframes","external_iframe_resizer_","scrolling","sizeWidth","heightCalculationMethod","clearTimeout","STORAGE_PREFIX","embedCheckout","embedded_checkout","resizable_iframe_creator","iframe_event_listener","iframe_event_poster","loading_indicator","loadingIndicator","browser_storage","mapToInternalCart","promotions","notifications","map_to_internal_line_items","coupon","sum","map_to_internal_coupon","discountNotifications","promotion","banners","banner","placeholders","discountType","messageHtml","text","giftCertificate","totalDiscountedAmount","certificate","used","appliedGiftCertificates","map_to_internal_gift_certificate","amountBeforeDiscount","shippingCostBeforeDiscount","integerAmountBeforeDiscount","lineItem","isShippingRequired","taxSubtotal","taxes","handling","handlingCostTotal","CheckoutActionCreator","_checkout_actions__WEBPACK_IMPORTED_MODULE_7__","rxjs_operators__WEBPACK_IMPORTED_MODULE_3__","_common_error_errors__WEBPACK_IMPORTED_MODULE_5__","_common_error_errors__WEBPACK_IMPORTED_MODULE_6__","ConsignmentActionCreator","_consignmentRequestSender","_common_error_errors__WEBPACK_IMPORTED_MODULE_4__","existingConsignment","getConsignmentByAddress","_removeLineItems","_createOrUpdateConsignment","_addLineItems","consignmentUpdateBody","consignmentMeta","_consignment_actions__WEBPACK_IMPORTED_MODULE_6__","UpdateShippingOptionRequested","UpdateShippingOptionFailed","LoadShippingOptionsRequested","params","include","_checkout_checkout_params__WEBPACK_IMPORTED_MODULE_3__","AvailableShippingOptions","LoadShippingOptionsSucceeded","LoadShippingOptionsFailed","_getConsignmentRequestBody","CreateConsignmentsRequested","CreateConsignmentsFailed","UpdateConsignmentRequested","UpdateConsignmentFailed","DeleteConsignmentRequested","DeleteConsignmentFailed","_isUpdateConsignmentRequest","itemId","_hydrateLineItems","lineItemIds","existingItem","sharedItem","find","DEFAULT_PARAMS","ConsignmentRequestSender","put","delete","mapToInternalShippingOption","isSelected","description","price","cost","selected","isRecommended","transitTime","UnrecoverableError","joinErrors","map_from_payment_error_response_joinErrors","RequestErrorFactory","_factoryMethods","mapFromInternalErrorResponse","mapFromStorefrontErrorResponse","mapFromPaymentErrorResponse","factoryMethod","_getType","_isStorefrontErrorResponseBody","_isInternalErrorResponseBody","internalType","storefrontErrorResponse","internalErrorResponse","billingAddressReducer","clear_error_reducer","billing_address_actions","ContinueAsGuestSucceeded","checkout_actions","order_actions","LoadOrderSucceeded","UpdateBillingAddressRequested","UpdateBillingAddressFailed","ContinueAsGuestRequested","ContinueAsGuestFailed","config_reducer_DEFAULT_STATE","configReducer","config_reducer_dataReducer","config_reducer_errorsReducer","config_reducer_statusesReducer","config_actions","LoadConfigSucceeded","LoadConfigFailed","LoadConfigRequested","country_reducer_DEFAULT_STATE","countryReducer","country_reducer_dataReducer","country_reducer_errorsReducer","country_reducer_statusesReducer","paymentReducer","payment_reducer_dataReducer","payment_method_reducer_DEFAULT_STATE","paymentMethodReducer","payment_method_reducer_dataReducer","payment_method_reducer_errorsReducer","metaReducer","payment_method_reducer_statusesReducer","payment_method_actions","merge_or_push","paymentStrategyReducer","payment_strategy_reducer_dataReducer","payment_strategy_reducer_errorsReducer","payment_strategy_reducer_statusesReducer","deinitializeMethodId","instrument_reducer_DEFAULT_STATE","instrumentReducer","instrument_reducer_dataReducer","instrument_reducer_errorsReducer","instrument_reducer_metaReducer","instrument_reducer_statusesReducer","remote_checkout_reducer_DEFAULT_STATE","remoteCheckoutReducer","remote_checkout_reducer_dataReducer","remote_checkout_actions","InitializeRemoteBillingSucceeded","InitializeRemoteShippingSucceeded","LoadRemoteSettingsSucceeded","UpdateRemoteCheckout","createCheckoutStore","initialState","factory","actionTransformer","create_action_transformer","request_error_factory","unrecoverable_error","cart_reducer","checkout_reducer","checkout_button_reducer","consignment_reducer","coupon_reducer","customer_reducer","customer_strategy_reducer","gift_certificate_reducer","order_reducer","shipping_country_reducer","shipping_strategy_reducer","stateTransformer","create_internal_checkout_selectors","CheckoutNotAvailableError","checkout_request_sender_CheckoutRequestSender","CheckoutRequestSender","content_type","join_includes","checkout_default_includes","checkout_not_available_error","isAddressEqual","addressA","addressB","normalize","_common_error_errors__WEBPACK_IMPORTED_MODULE_0__","BraintreeScriptLoader","loadClient","load3DS","loadDataCollector","dataCollector","loadPaypalCheckout","loadVisaCheckout","loadGooglePayment","googlePayment","BraintreeSDKCreator","_braintreeScriptLoader","_dataCollectors","_clientToken","_common_error_errors__WEBPACK_IMPORTED_MODULE_1__","authorization","_paypal","_3ds","cached","kount","getVisaCheckout","_visaCheckout","getGooglePaymentComponent","_googlePay","_teardown","mod","mapToInternalCoupon","couponTypes","couponType","mapToInternalAddress","addressId","isBillingAddressLike","addressLine1","addressLine2","province","provinceCode","postCode","joinIncludes","includes","NotInitializedErrorType","NotInitializedError","parseUrl","_error_errors__WEBPACK_IMPORTED_MODULE_0__","anchor","hash","hostname","port","search","cachableActionDecorator","memoizedMethods","WeakMap","decorateMethod","param","lastArg","fn","instanceMethods","cache_key_resolver","createFreezeProxies","createFreezeProxy","trap","proxy","iteratee","getPrototypeOf","traversePrototypeOf","charAt","createProxy","_customer_strategy_actions__WEBPACK_IMPORTED_MODULE_2__","CustomerStrategyActionCreator","SignInRequested","SignInSucceeded","SignInFailed","SignOutRequested","SignOutSucceeded","SignOutFailed","_common_error__WEBPACK_IMPORTED_MODULE_3__","_customer_actions__WEBPACK_IMPORTED_MODULE_4__","CustomerActionCreator","_customerRequestSender","SignInCustomerRequested","SignInCustomerSucceeded","SignInCustomerFailed","SignOutCustomerRequested","SignOutCustomerSucceeded","SignOutCustomerFailed","CustomerRequestSender","CartSelector","CouponSelector","_coupon","removeCouponError","applyCouponError","CustomerSelector","CustomerStrategySelector","signInMethodId","signInError","signOutMethodId","signOutError","getWidgetInteractionError","GiftCertificateSelector","_giftCertificate","removeGiftCertificateError","applyGiftCertificateError","ShippingAddressSelector","ShippingCountrySelector","ShippingStrategySelector","updateAddressMethodId","updateAddressError","selectOptionMethodId","selectOptionError","ConsignmentSelector","getConsignmentById","_address__WEBPACK_IMPORTED_MODULE_2__","loadShippingOptionsError","getUnassignedItems","assignedLineItemIds","itemIds","getItemAssignmentError","updateShippingOptionError","isAssigningItems","_common_selector__WEBPACK_IMPORTED_MODULE_3__","OrderSelector","cartReducer","_billing_billing_address_actions__WEBPACK_IMPORTED_MODULE_2__","_checkout__WEBPACK_IMPORTED_MODULE_3__","_shipping_consignment_actions__WEBPACK_IMPORTED_MODULE_7__","_coupon_coupon_actions__WEBPACK_IMPORTED_MODULE_5__","_coupon_gift_certificate_actions__WEBPACK_IMPORTED_MODULE_6__","consignmentReducer","_checkout__WEBPACK_IMPORTED_MODULE_2__","_coupon__WEBPACK_IMPORTED_MODULE_4__","_customer__WEBPACK_IMPORTED_MODULE_5__","couponReducer","_coupon_actions__WEBPACK_IMPORTED_MODULE_5__","_order__WEBPACK_IMPORTED_MODULE_4__","ApplyCouponRequested","ApplyCouponFailed","RemoveCouponRequested","RemoveCouponFailed","customerReducer","giftCertificateReducer","_shipping_consignment_actions__WEBPACK_IMPORTED_MODULE_4__","_gift_certificate_actions__WEBPACK_IMPORTED_MODULE_6__","ApplyGiftCertificateRequested","ApplyGiftCertificateFailed","RemoveGiftCertificateRequested","RemoveGiftCertificateFailed","orderReducer","_order_actions__WEBPACK_IMPORTED_MODULE_4__","LoadOrderPaymentsSucceeded","FinalizeOrderSucceeded","orderToken","LoadOrderRequested","LoadOrderPaymentsRequested","LoadOrderFailed","LoadOrderPaymentsFailed","mergeOrPush","array","newArray","shippingCountryReducer","_common_error__WEBPACK_IMPORTED_MODULE_2__","_shipping_country_actions__WEBPACK_IMPORTED_MODULE_3__","LoadShippingCountriesSucceeded","LoadShippingCountriesRequested","LoadShippingCountriesFailed","mapToInternalCustomer","_address__WEBPACK_IMPORTED_MODULE_0__","isGuest","fullName","mapToInternalGiftCertificate","remainingBalance","remaining","balance","purchaseDate","mapToInternalOrder","_cart__WEBPACK_IMPORTED_MODULE_1__","_coupon__WEBPACK_IMPORTED_MODULE_3__","customerCanBeCreated","mapToInteralOrderPayment","baseAmount","socialData","mapToInternalSocialDataList","hasDigitalItems","isDownloadable","isComplete","mapToStoreCredit","orderAmountAsInteger","mapToInternalPaymentStatus","isDefaultOrderPayment","helpText","instructions","returnUrl","socialDataObject","socialMedia","image","link","shareText","sharingLink","channelName","channel","channelCode","customerStrategyReducer","customer_strategy_actions","shippingStrategyReducer","shipping_strategy_actions","UpdateAddressRequested","UpdateAddressSucceeded","UpdateAddressFailed","SelectOptionRequested","SelectOptionSucceeded","SelectOptionFailed","getCallbackUrl","omitPrivate","_is_private__WEBPACK_IMPORTED_MODULE_0__","_omit_deep__WEBPACK_IMPORTED_MODULE_1__","getEnvironment","process","NODE_ENV","e","OrderRequestSender","OrderActionCreator","_orderRequestSender","_order_actions__WEBPACK_IMPORTED_MODULE_6__","_getCurrentOrderId","SubmitOrderRequested","_mapToOrderRequestBody","customerMessage","SubmitOrderFailed","FinalizeOrderRequested","FinalizeOrderFailed","CartComparator","cartA","cartB","_normalize","sort","itemA","itemB","localeCompare","giftWrapping","toSingleLine","input","trim","_common_error_errors__WEBPACK_IMPORTED_MODULE_2__","_coupon_actions__WEBPACK_IMPORTED_MODULE_3__","CouponActionCreator","_couponRequestSender","_checkout__WEBPACK_IMPORTED_MODULE_0__","_checkout__WEBPACK_IMPORTED_MODULE_1__","_common_http_request__WEBPACK_IMPORTED_MODULE_2__","_common_http_request__WEBPACK_IMPORTED_MODULE_3__","CouponRequestSender","couponCode","_gift_certificate_actions__WEBPACK_IMPORTED_MODULE_3__","GiftCertificateActionCreator","_giftCertificateRequestSender","GiftCertificateRequestSender","giftCertificateCode","CancellablePromise","cancellable","race","isInternalAddressEqual","ignoredKeys","mapFromInternalAddress","_shipping_country_actions__WEBPACK_IMPORTED_MODULE_2__","ShippingCountryActionCreator","_shippingCountryRequestSender","ShippingCountryRequestSender","ShippingStrategyActionCreator","_shipping_strategy_actions__WEBPACK_IMPORTED_MODULE_3__","mergedOptions","NotImplementedError","AmazonPayCustomerStrategy","_remoteCheckoutRequestSender","not_implemented_error","useAmazonAddressBook","_handleAuthorization","generateToken","Login","popup","tokenPrefix","trackAuthorizationEvent","BraintreeVisaCheckoutCustomerStrategy","_buttonClassName","signInButton","buttonClass","querySelector","_insertVisaCheckoutButton","visaCheckoutButton","className","innerHTML","ChasePayCustomerStrategy","chasePayOptions","JPMC","isChasePayUp","insertButtons","EventType","START_CHECKOUT","sessionId","COMPLETE_CHECKOUT","requestId","_reloadPage","sendRequest","fromChasePay","DefaultCustomerStrategy","_customerActionCreator","googlepay_customer_strategy","GooglePayCustomerStrategy","googlePayOptions","MasterpassCustomerStrategy","masterpassOptions","Masterpass","SquareCustomerStrategy","createCustomerStrategyRegistry","remoteCheckoutRequestSender","amazon_pay_customer_strategy","braintree_visacheckout_customer_strategy","chasepay_customer_strategy","square_customer_strategy","masterpass_customer_strategy","default_customer_strategy","customer_action_creator","customer_request_sender","AmazonPayShippingStrategy","_createAddressBook","optionId","onAddressSelect","AddressBook","_synchronizeShippingAddress","DefaultShippingStrategy","createShippingStrategyRegistry","consignmentRequestSender","consignmentActionCreator","amazon_pay_shipping_strategy","default_shipping_strategy","TimeoutError","ConfigActionCreator","_configRequestSender","_config_actions__WEBPACK_IMPORTED_MODULE_4__","ConfigRequestSender","BillingAddressActionCreator","_common_error_errors__WEBPACK_IMPORTED_MODULE_3__","billingAddressRequestBody","existingBillingAddressRequestBody","_billing_address_actions__WEBPACK_IMPORTED_MODULE_5__","_createOrUpdateBillingAddress","createAddress","BillingAddressRequestSender","Registry","_factories","_instances","_getInstance","_error_errors__WEBPACK_IMPORTED_MODULE_1__","_hasInstance","toFormUrlEncoded","MasterpassScriptLoader","RemoteCheckoutSynchronizationError","GooglePayBraintreeInitializer","hasShippingAddress","googleBraintreePaymentInstance","_googlePaymentInstance","_createGooglePayPayload","parseResponse","paymentMethodData","tokenizationData","androidPayCards","cardType","lastFour","lastTwo","binData","platformToken","googlePayBraintreePaymentDataRequest","merchantInfo","authJwt","merchantName","googleMerchantName","googleMerchantId","transactionInfo","totalPriceStatus","totalPrice","cardRequirements","billingAddressRequired","billingAddressFormat","shippingAddressRequired","emailRequired","phoneNumberRequired","_mapGooglePayBraintreeDataRequestToGooglePayDataRequestV2","createPaymentDataRequest","googlePayBraintreeDataRequestV1","apiVersion","apiVersionMinor","allowedPaymentMethods","parameters","allowedAuthMethods","allowedCardNetworks","billingAddressParameters","format","tokenizationSpecification","braintree:apiVersion","braintree:authorizationFingerprint","paymentMethodTokenizationParameters","braintree:merchantId","braintree:sdkVersion","shippingAddressParameters","GooglePayStripeInitializer","_mapGooglePayStripeDataRequestToGooglePayDataRequestV2","err","stripe:version","stripeVersion","stripe:publishableKey","stripePublishableKey","PaypalScriptLoader","handleFrameLoadedEvent","hasAttribute","setAttribute","isCustomError","IframeEmbeddedCheckoutMessenger","_untargetedMessagePoster","_messageHandlers","postComplete","_postMessage","postError","_transformError","postFrameError","untargeted","postFrameLoaded","postLoaded","postSignedOut","receiveStyles","handler","_notifyMessageHandlers","NoopEmbeddedCheckoutMessenger","createEmbeddedCheckoutMessenger","parentWindow","parent","noop_embedded_checkout_messenger","iframe_embedded_checkout_messenger","parentOrigin","LanguageService","_logger","_transformConfig","locales","translations","_locale","_locales","_translations","_formatters","mapKeys","translationKey","KEY_PREFIX","getLocale","_hasTranslations","translate","prefixedKey","messageFormat","external_messageformat_","compile","_transformData","output","defaultTranslations","_flattenObject","parentKey","resultKey","createLanguageService","language_service","CurrencyFormatter","currencySettings","symbolLocation","symbol","thousandsSeparator","decimalSeparator","parseInt","_symbolLocation","_symbol","_thousandsSeparator","_decimalSeparator","formattedNumber","_formatNumber","formattedCurrency","_formatCurrency","positiveAmount","abs","_toFixed","decimalAmount","parsedIntegerAmount","toLowerCase","precision","CurrencyService","_storeConfig","_customerFormatter","currency_formatter","shopperCurrency","_storeFormatter","toCustomerCurrency","exchangeRate","toStoreCurrency","createCurrencyService","currency_service","checkout_buttons","ButtonType","ButtonColor","GooglePayPaymentProcessor","_googlePayScriptLoader","_googlePayInitializer","_consigmentActionCreator","buttonType","buttonColor","Short","Default","_googlePayClient","loadPaymentData","_getPaymentDataRequest","_postForm","_updateBillingAddress","_mapGooglePayAddressToShippingAddress","googlePay","paymentDataRequest","_getGooglePayClient","_paymentDataRequest","isReadyToPay","_getCardInformation","google","api","PaymentsClient","_mapGooglePayAddressToBillingAddress","info","companyName","address3","locality","administrativeArea","phoneNumber","postPaymentData","remoteBillingAddress","googlePayAddressMapped","GooglePayScriptLoader","createGooglePayPaymentProcessor","initializer","googlepay_payment_processor","googlepay_script_loader","RemoteCheckoutRequestSender","methodName","_remote_checkout_actions__WEBPACK_IMPORTED_MODULE_2__","RemoteCheckoutActionCreator","InitializeRemoteBillingRequested","InitializeRemoteBillingFailed","InitializeRemoteShippingRequested","InitializeRemoteShippingFailed","InitializeRemotePaymentRequested","InitializeRemotePaymentSucceeded","InitializeRemotePaymentFailed","LoadRemoteSettingsRequested","LoadRemoteSettingsFailed","SignOutRemoteCustomerRequested","SignOutRemoteCustomerSucceeded","SignOutRemoteCustomerFailed","AmazonPayScriptLoader","onPaymentReady","_configureWidget","onLoginReady","setClientId","setUseCookie","onAmazonLoginReady","onAmazonPaymentsReady","VisaCheckoutScriptLoader","V","ChasePayScriptLoader","ConsoleLogger","_console","log","messages","_logToConsole","debug","NoopLogger","getDefaultLogger","isEnabled","logger","console_logger","console","noop_logger","BraintreeVisaCheckoutPaymentProcessor","createInitOptions","paymentRequest","braintreeVisaCheckout","tokenizedPayload","_toVisaCheckoutAddress","userData","userEmail","_getAddress","extendedAddress","createBraintreeVisaCheckoutPaymentProcessor","braintree_visacheckout_payment_processor"],"mappings":"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","file":"checkout-sdk.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 191);\n","module.exports = require(\"tslib\");","module.exports = require(\"@bigcommerce/data-store\");","module.exports = require(\"lodash\");","module.exports = require(\"rxjs\");","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nimport { ConsignmentMeta } from './consignment';\n\nexport enum ConsignmentActionType {\n    CreateConsignmentsRequested = 'CREATE_CONSIGNMENTS_REQUESTED',\n    CreateConsignmentsSucceeded = 'CREATE_CONSIGNMENTS_SUCCEEDED',\n    CreateConsignmentsFailed = 'CREATE_CONSIGNMENTS_FAILED',\n\n    UpdateConsignmentRequested = 'UPDATE_CONSIGNMENT_REQUESTED',\n    UpdateConsignmentSucceeded = 'UPDATE_CONSIGNMENT_SUCCEEDED',\n    UpdateConsignmentFailed = 'UPDATE_CONSIGNMENT_FAILED',\n\n    DeleteConsignmentRequested = 'DELETE_CONSIGNMENT_REQUESTED',\n    DeleteConsignmentSucceeded = 'DELETE_CONSIGNMENT_SUCCEEDED',\n    DeleteConsignmentFailed = 'DELETE_CONSIGNMENT_FAILED',\n\n    UpdateShippingOptionRequested = 'UPDATE_SHIPPING_OPTION_REQUESTED',\n    UpdateShippingOptionSucceeded = 'UPDATE_SHIPPING_OPTION_SUCCEEDED',\n    UpdateShippingOptionFailed = 'UPDATE_SHIPPING_OPTION_FAILED',\n\n    LoadShippingOptionsRequested = 'LOAD_SHIPPING_OPTIONS_REQUESTED',\n    LoadShippingOptionsSucceeded = 'LOAD_SHIPPING_OPTIONS_SUCCEEDED',\n    LoadShippingOptionsFailed = 'LOAD_SHIPPING_OPTIONS_FAILED',\n}\n\nexport type ConsignmentAction =\n    CreateConsignmentsAction |\n    UpdateConsignmentAction |\n    DeleteConsignmentAction |\n    UpdateShippingOptionAction |\n    LoadShippingOptionsAction;\n\nexport type CreateConsignmentsAction =\n    CreateConsignmentsRequestedAction |\n    CreateConsignmentsSucceededAction |\n    CreateConsignmentsFailedAction;\n\nexport type UpdateConsignmentAction =\n    UpdateConsignmentRequestedAction |\n    UpdateConsignmentSucceededAction |\n    UpdateConsignmentFailedAction;\n\nexport type DeleteConsignmentAction =\n    DeleteConsignmentRequestedAction |\n    DeleteConsignmentSucceededAction |\n    DeleteConsignmentFailedAction;\n\nexport type UpdateShippingOptionAction =\n    UpdateShippingOptionRequestedAction |\n    UpdateShippingOptionSucceededAction |\n    UpdateShippingOptionFailedAction;\n\nexport type LoadShippingOptionsAction =\n    LoadShippingOptionsRequestedAction |\n    LoadShippingOptionsSucceededAction |\n    LoadShippingOptionsFailedAction;\n\nexport interface CreateConsignmentsRequestedAction extends Action {\n    type: ConsignmentActionType.CreateConsignmentsRequested;\n}\n\nexport interface CreateConsignmentsSucceededAction extends Action<Checkout> {\n    type: ConsignmentActionType.CreateConsignmentsSucceeded;\n}\n\nexport interface CreateConsignmentsFailedAction extends Action<Error> {\n    type: ConsignmentActionType.CreateConsignmentsFailed;\n}\n\nexport interface UpdateConsignmentRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentRequested;\n}\n\nexport interface UpdateConsignmentSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentSucceeded;\n}\n\nexport interface UpdateConsignmentFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentFailed;\n}\n\nexport interface DeleteConsignmentRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentRequested;\n}\n\nexport interface DeleteConsignmentSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentSucceeded;\n}\n\nexport interface DeleteConsignmentFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentFailed;\n}\n\nexport interface UpdateShippingOptionRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionRequested;\n}\n\nexport interface UpdateShippingOptionSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionSucceeded;\n}\n\nexport interface UpdateShippingOptionFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionFailed;\n}\n\nexport interface LoadShippingOptionsRequestedAction extends Action {\n    type: ConsignmentActionType.LoadShippingOptionsRequested;\n}\n\nexport interface LoadShippingOptionsSucceededAction extends Action<Checkout> {\n    type: ConsignmentActionType.LoadShippingOptionsSucceeded;\n}\n\nexport interface LoadShippingOptionsFailedAction extends Action<Error> {\n    type: ConsignmentActionType.LoadShippingOptionsFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadConfigAction } from '../config/config-actions';\n\nimport Checkout from './checkout';\n\nexport enum CheckoutActionType {\n    LoadCheckoutRequested = 'LOAD_CHECKOUT_REQUESTED',\n    LoadCheckoutSucceeded = 'LOAD_CHECKOUT_SUCCEEDED',\n    LoadCheckoutFailed = 'LOAD_CHECKOUT_FAILED',\n\n    UpdateCheckoutRequested = 'UPDATE_CHECKOUT_REQUESTED',\n    UpdateCheckoutSucceeded = 'UPDATE_CHECKOUT_SUCCEEDED',\n    UpdateCheckoutFailed = 'UPDATE_CHECKOUT_FAILED',\n}\n\nexport type CheckoutAction = LoadCheckoutAction | UpdateCheckoutAction;\n\nexport type LoadCheckoutAction =\n    LoadCheckoutRequestedAction |\n    LoadCheckoutSucceededAction |\n    LoadCheckoutFailedAction |\n    LoadConfigAction;\n\nexport type UpdateCheckoutAction =\n    UpdateCheckoutRequestedAction |\n    UpdateCheckoutSucceededAction |\n    UpdateCheckoutFailedAction;\n\nexport interface LoadCheckoutRequestedAction extends Action {\n    type: CheckoutActionType.LoadCheckoutRequested;\n}\n\nexport interface LoadCheckoutSucceededAction extends Action<Checkout> {\n    type: CheckoutActionType.LoadCheckoutSucceeded;\n}\n\nexport interface LoadCheckoutFailedAction extends Action<Error> {\n    type: CheckoutActionType.LoadCheckoutFailed;\n}\n\nexport interface UpdateCheckoutRequestedAction extends Action {\n    type: CheckoutActionType.UpdateCheckoutRequested;\n}\n\nexport interface UpdateCheckoutSucceededAction extends Action<Checkout> {\n    type: CheckoutActionType.UpdateCheckoutSucceeded;\n}\n\nexport interface UpdateCheckoutFailedAction extends Action<Error> {\n    type: CheckoutActionType.UpdateCheckoutFailed;\n}\n","import StandardError from './standard-error';\n\nexport enum MissingDataErrorType {\n    MissingBillingAddress,\n    MissingCart,\n    MissingCheckout,\n    MissingConsignments,\n    MissingCheckoutConfig,\n    MissingOrder,\n    MissingOrderConfig,\n    MissingOrderId,\n    MissingPayment,\n    MissingPaymentMethod,\n    MissingShippingAddress,\n}\n\nexport default class MissingDataError extends StandardError {\n    constructor(\n        public subtype: MissingDataErrorType\n    ) {\n        super(getErrorMessage(subtype));\n\n        this.type = 'missing_data';\n    }\n}\n\nfunction getErrorMessage(type: MissingDataErrorType): string {\n    switch (type) {\n    case MissingDataErrorType.MissingBillingAddress:\n        return 'Unable to proceed because billing address data is unavailable.';\n\n    case MissingDataErrorType.MissingCart:\n        return 'Unable to proceed because cart data is unavailable.';\n\n    case MissingDataErrorType.MissingConsignments:\n        return 'Unable to proceed because consignments data is unavailable.';\n\n    case MissingDataErrorType.MissingCheckout:\n        return 'Unable to proceed because checkout data is unavailable.';\n\n    case MissingDataErrorType.MissingCheckoutConfig:\n    case MissingDataErrorType.MissingOrderConfig:\n        return 'Unable to proceed because configuration data is unavailable.';\n\n    case MissingDataErrorType.MissingOrder:\n        return 'Unable to proceed because order data is unavailable.';\n\n    case MissingDataErrorType.MissingOrderId:\n        return 'Unable to proceed because order ID is unavailable or not generated yet.';\n\n    case MissingDataErrorType.MissingPayment:\n        return 'Unable to proceed because payment data is unavailable.';\n\n    case MissingDataErrorType.MissingPaymentMethod:\n        return 'Unable to proceed because payment method data is unavailable or not properly configured.';\n\n    case MissingDataErrorType.MissingShippingAddress:\n        return 'Unable to proceed because shipping address data is unavailable.';\n\n    default:\n        return 'Unable to proceed because the required data is unavailable.';\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum CustomerStrategyActionType {\n    SignInFailed = 'CUSTOMER_STRATEGY_SIGN_IN_FAILED',\n    SignInRequested = 'CUSTOMER_STRATEGY_SIGN_IN_REQUESTED',\n    SignInSucceeded = 'CUSTOMER_STRATEGY_SIGN_IN_SUCCEEDED',\n    SignOutFailed = 'CUSTOMER_STRATEGY_SIGN_OUT_FAILED',\n    SignOutRequested = 'CUSTOMER_STRATEGY_SIGN_OUT_REQUESTED',\n    SignOutSucceeded = 'CUSTOMER_STRATEGY_SIGN_OUT_SUCCEEDED',\n    InitializeFailed = 'CUSTOMER_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'CUSTOMER_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'CUSTOMER_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'CUSTOMER_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'CUSTOMER_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'CUSTOMER_STRATEGY_DEINITIALIZE_SUCCEEDED',\n    WidgetInteractionStarted = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_STARTED',\n    WidgetInteractionFinished = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_FINISHED',\n    WidgetInteractionFailed = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_FAILED',\n}\n\nexport type CustomerStrategyAction =\n    CustomerStrategySignInAction |\n    CustomerStrategySignOutAction |\n    CustomerStrategyInitializeAction |\n    CustomerStrategyDeinitializeAction |\n    CustomerStrategyWidgetAction;\n\nexport type CustomerStrategySignInAction =\n    SignInRequestedAction |\n    SignInSucceededAction |\n    SignInFailedAction;\n\nexport type CustomerStrategySignOutAction =\n    SignOutRequestedAction |\n    SignOutSucceededAction |\n    SignOutFailedAction;\n\nexport type CustomerStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type CustomerStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport type CustomerStrategyWidgetAction =\n    WidgetInteractionStartedAction |\n    WidgetInteractionFinishedAction |\n    WidgetInteractionFailedAction;\n\nexport interface SignInRequestedAction extends Action {\n    type: CustomerStrategyActionType.SignInRequested;\n}\n\nexport interface SignInSucceededAction extends Action {\n    type: CustomerStrategyActionType.SignInSucceeded;\n}\n\nexport interface SignInFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.SignInFailed;\n}\n\nexport interface SignOutRequestedAction extends Action {\n    type: CustomerStrategyActionType.SignOutRequested;\n}\n\nexport interface SignOutSucceededAction extends Action {\n    type: CustomerStrategyActionType.SignOutSucceeded;\n}\n\nexport interface SignOutFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.SignOutFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: CustomerStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: CustomerStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: CustomerStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: CustomerStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.DeinitializeFailed;\n}\n\nexport interface WidgetInteractionStartedAction extends Action {\n    type: CustomerStrategyActionType.WidgetInteractionStarted;\n}\n\nexport interface WidgetInteractionFinishedAction extends Action {\n    type: CustomerStrategyActionType.WidgetInteractionFinished;\n}\n\nexport interface WidgetInteractionFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.WidgetInteractionFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadOrderPaymentsAction } from '../order';\n\nexport enum PaymentStrategyActionType {\n    ExecuteFailed = 'PAYMENT_STRATEGY_EXECUTE_FAILED',\n    ExecuteRequested = 'PAYMENT_STRATEGY_EXECUTE_REQUESTED',\n    ExecuteSucceeded = 'PAYMENT_STRATEGY_EXECUTE_SUCCEEDED',\n    FinalizeFailed = 'PAYMENT_STRATEGY_FINALIZE_FAILED',\n    FinalizeRequested = 'PAYMENT_STRATEGY_FINALIZE_REQUESTED',\n    FinalizeSucceeded = 'PAYMENT_STRATEGY_FINALIZE_SUCCEEDED',\n    InitializeFailed = 'PAYMENT_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'PAYMENT_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'PAYMENT_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'PAYMENT_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'PAYMENT_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'PAYMENT_STRATEGY_DEINITIALIZE_SUCCEEDED',\n    WidgetInteractionStarted = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_STARTED',\n    WidgetInteractionFinished = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_FINISHED',\n    WidgetInteractionFailed = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_FAILED',\n}\n\nexport type PaymentStrategyAction =\n    PaymentStrategyExecuteAction |\n    PaymentStrategyFinalizeAction |\n    PaymentStrategyInitializeAction |\n    PaymentStrategyDeinitializeAction |\n    PaymentStrategyWidgetAction;\n\nexport type PaymentStrategyExecuteAction =\n    ExecuteRequestedAction |\n    ExecuteSucceededAction |\n    ExecuteFailedAction |\n    LoadOrderPaymentsAction;\n\nexport type PaymentStrategyFinalizeAction =\n    FinalizeRequestedAction |\n    FinalizeSucceededAction |\n    FinalizeFailedAction |\n    LoadOrderPaymentsAction;\n\nexport type PaymentStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type PaymentStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport type PaymentStrategyWidgetAction =\n    WidgetInteractionStartedAction |\n    WidgetInteractionFinishedAction |\n    WidgetInteractionFailedAction;\n\nexport interface ExecuteRequestedAction extends Action {\n    type: PaymentStrategyActionType.ExecuteRequested;\n}\n\nexport interface ExecuteSucceededAction extends Action {\n    type: PaymentStrategyActionType.ExecuteSucceeded;\n}\n\nexport interface ExecuteFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.ExecuteFailed;\n}\n\nexport interface FinalizeRequestedAction extends Action {\n    type: PaymentStrategyActionType.FinalizeRequested;\n}\n\nexport interface FinalizeSucceededAction extends Action {\n    type: PaymentStrategyActionType.FinalizeSucceeded;\n}\n\nexport interface FinalizeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.FinalizeFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: PaymentStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: PaymentStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: PaymentStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: PaymentStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.DeinitializeFailed;\n}\n\nexport interface WidgetInteractionStartedAction extends Action {\n    type: PaymentStrategyActionType.WidgetInteractionStarted;\n}\n\nexport interface WidgetInteractionFinishedAction extends Action {\n    type: PaymentStrategyActionType.WidgetInteractionFinished;\n}\n\nexport interface WidgetInteractionFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.WidgetInteractionFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum ShippingStrategyActionType {\n    UpdateAddressFailed = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_FAILED',\n    UpdateAddressRequested = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_REQUESTED',\n    UpdateAddressSucceeded = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_SUCCEEDED',\n    SelectOptionFailed = 'SHIPPING_STRATEGY_SELECT_OPTION_FAILED',\n    SelectOptionRequested = 'SHIPPING_STRATEGY_SELECT_OPTION_REQUESTED',\n    SelectOptionSucceeded = 'SHIPPING_STRATEGY_SELECT_OPTION_SUCCEEDED',\n    InitializeFailed = 'SHIPPING_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'SHIPPING_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'SHIPPING_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'SHIPPING_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'SHIPPING_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'SHIPPING_STRATEGY_DEINITIALIZE_SUCCEEDED',\n}\n\nexport type ShippingStrategyAction =\n    ShippingStrategyUpdateAddressAction |\n    ShippingStrategySelectOptionAction |\n    ShippingStrategyInitializeAction |\n    ShippingStrategyDeinitializeAction;\n\nexport type ShippingStrategyUpdateAddressAction =\n    UpdateAddressRequestedAction |\n    UpdateAddressSucceededAction |\n    UpdateAddressFailedAction;\n\nexport type ShippingStrategySelectOptionAction =\n    SelectOptionRequestedAction |\n    SelectOptionSucceededAction |\n    SelectOptionFailedAction;\n\nexport type ShippingStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type ShippingStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport interface UpdateAddressRequestedAction extends Action {\n    type: ShippingStrategyActionType.UpdateAddressRequested;\n}\n\nexport interface UpdateAddressSucceededAction extends Action {\n    type: ShippingStrategyActionType.UpdateAddressSucceeded;\n}\n\nexport interface UpdateAddressFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.UpdateAddressFailed;\n}\n\nexport interface SelectOptionRequestedAction extends Action {\n    type: ShippingStrategyActionType.SelectOptionRequested;\n}\n\nexport interface SelectOptionSucceededAction extends Action {\n    type: ShippingStrategyActionType.SelectOptionSucceeded;\n}\n\nexport interface SelectOptionFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.SelectOptionFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: ShippingStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: ShippingStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: ShippingStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: ShippingStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.DeinitializeFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\nimport { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nexport enum CouponActionType {\n    ApplyCouponRequested = 'APPLY_COUPON_REQUESTED',\n    ApplyCouponSucceeded = 'APPLY_COUPON_SUCCEEDED',\n    ApplyCouponFailed = 'APPLY_COUPON_FAILED',\n\n    RemoveCouponRequested = 'REMOVE_COUPON_REQUESTED',\n    RemoveCouponSucceeded = 'REMOVE_COUPON_SUCCEEDED',\n    RemoveCouponFailed = 'REMOVE_COUPON_FAILED',\n}\n\nexport type CouponAction =\n    ApplyCouponAction |\n    RemoveCouponAction;\n\nexport type ApplyCouponAction =\n    ApplyCouponRequestedAction |\n    ApplyCouponSucceededAction |\n    ApplyCouponFailedAction;\n\nexport type RemoveCouponAction =\n    RemoveCouponRequestedAction |\n    RemoveCouponSucceededAction |\n    RemoveCouponFailedAction;\n\nexport interface ApplyCouponRequestedAction extends Action {\n    type: CouponActionType.ApplyCouponRequested;\n}\n\nexport interface ApplyCouponSucceededAction extends Action<Checkout> {\n    type: CouponActionType.ApplyCouponSucceeded;\n}\n\nexport interface ApplyCouponFailedAction extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: CouponActionType.ApplyCouponFailed;\n}\n\nexport interface RemoveCouponRequestedAction extends Action {\n    type: CouponActionType.RemoveCouponRequested;\n}\n\nexport interface RemoveCouponSucceededAction extends Action<Checkout> {\n    type: CouponActionType.RemoveCouponSucceeded;\n}\n\nexport interface RemoveCouponFailedAction extends Action<RequestError> {\n    type: CouponActionType.RemoveCouponFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { InternalOrderResponseData } from './internal-order-responses';\nimport Order from './order';\n\nexport enum OrderActionType {\n    LoadOrderRequested = 'LOAD_ORDER_REQUESTED',\n    LoadOrderSucceeded = 'LOAD_ORDER_SUCCEEDED',\n    LoadOrderFailed = 'LOAD_ORDER_FAILED',\n\n    LoadOrderPaymentsRequested = 'LOAD_ORDER_PAYMENTS_REQUESTED',\n    LoadOrderPaymentsSucceeded = 'LOAD_ORDER_PAYMENTS_SUCCEEDED',\n    LoadOrderPaymentsFailed = 'LOAD_ORDER_PAYMENTS_FAILED',\n\n    SubmitOrderRequested = 'SUBMIT_ORDER_REQUESTED',\n    SubmitOrderSucceeded = 'SUBMIT_ORDER_SUCCEEDED',\n    SubmitOrderFailed = 'SUBMIT_ORDER_FAILED',\n\n    FinalizeOrderRequested = 'FINALIZE_ORDER_REQUESTED',\n    FinalizeOrderSucceeded = 'FINALIZE_ORDER_SUCCEEDED',\n    FinalizeOrderFailed = 'FINALIZE_ORDER_FAILED',\n}\n\nexport type OrderAction = LoadOrderAction |\n    LoadOrderPaymentsAction |\n    SubmitOrderAction |\n    FinalizeOrderAction;\n\nexport type LoadOrderPaymentsAction = LoadOrderPaymentsRequestedAction |\n    LoadOrderPaymentsSucceededAction |\n    LoadOrderPaymentsFailedAction;\n\nexport type LoadOrderAction =\n    LoadOrderRequestedAction |\n    LoadOrderSucceededAction |\n    LoadOrderFailedAction;\n\nexport type SubmitOrderAction =\n    SubmitOrderRequestedAction |\n    SubmitOrderSucceededAction |\n    SubmitOrderFailedAction |\n    LoadOrderAction;\n\nexport type FinalizeOrderAction =\n    FinalizeOrderRequestedAction |\n    FinalizeOrderSucceededAction |\n    FinalizeOrderFailedAction |\n    LoadOrderAction;\n\nexport interface LoadOrderRequestedAction extends Action {\n    type: OrderActionType.LoadOrderRequested;\n}\n\nexport interface LoadOrderSucceededAction extends Action<Order> {\n    type: OrderActionType.LoadOrderSucceeded;\n}\n\nexport interface LoadOrderFailedAction extends Action<Error> {\n    type: OrderActionType.LoadOrderFailed;\n}\n\nexport interface LoadOrderPaymentsRequestedAction extends Action {\n    type: OrderActionType.LoadOrderPaymentsRequested;\n}\n\nexport interface LoadOrderPaymentsSucceededAction extends Action<Order> {\n    type: OrderActionType.LoadOrderPaymentsSucceeded;\n}\n\nexport interface LoadOrderPaymentsFailedAction extends Action<Error> {\n    type: OrderActionType.LoadOrderPaymentsFailed;\n}\n\nexport interface SubmitOrderRequestedAction extends Action {\n    type: OrderActionType.SubmitOrderRequested;\n}\n\nexport interface SubmitOrderSucceededAction extends Action<InternalOrderResponseData> {\n    type: OrderActionType.SubmitOrderSucceeded;\n}\n\nexport interface SubmitOrderFailedAction extends Action<Error> {\n    type: OrderActionType.SubmitOrderFailed;\n}\n\nexport interface FinalizeOrderRequestedAction extends Action {\n    type: OrderActionType.FinalizeOrderRequested;\n}\n\nexport interface FinalizeOrderSucceededAction extends Action<InternalOrderResponseData> {\n    type: OrderActionType.FinalizeOrderSucceeded;\n}\n\nexport interface FinalizeOrderFailedAction extends Action<Error> {\n    type: OrderActionType.FinalizeOrderFailed;\n}\n","import { setPrototypeOf } from '../../utility';\n\nimport CustomError from './custom-error';\n\nexport default class StandardError extends Error implements CustomError {\n    type = 'standard';\n\n    constructor(message?: string) {\n        super(message || 'An unexpected error has occurred.');\n\n        setPrototypeOf(this, new.target.prototype);\n\n        if (typeof Error.captureStackTrace === 'function') {\n            Error.captureStackTrace(this, new.target);\n        } else {\n            this.stack = (new Error(this.message)).stack;\n        }\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nexport enum BillingAddressActionType {\n    UpdateBillingAddressRequested = 'UPDATE_BILLING_ADDRESS_REQUESTED',\n    UpdateBillingAddressSucceeded = 'UPDATE_BILLING_ADDRESS_SUCCEEDED',\n    UpdateBillingAddressFailed = 'UPDATE_BILLING_ADDRESS_FAILED',\n\n    ContinueAsGuestRequested = 'CONTINUE_AS_GUEST_REQUESTED',\n    ContinueAsGuestSucceeded = 'CONTINUE_AS_GUEST_SUCCEEDED',\n    ContinueAsGuestFailed = 'CONTINUE_AS_GUEST_FAILED',\n}\n\nexport type BillingAddressAction =\n    ContinueAsGuestAction |\n    UpdateBillingAddressAction;\n\nexport type UpdateBillingAddressAction =\n    UpdateBillingAddressRequested |\n    UpdateBillingAddressSucceeded |\n    UpdateBillingAddressFailed;\n\nexport type ContinueAsGuestAction =\n    ContinueAsGuestRequested |\n    ContinueAsGuestSucceeded |\n    ContinueAsGuestFailed;\n\nexport interface UpdateBillingAddressRequested extends Action {\n    type: BillingAddressActionType.UpdateBillingAddressRequested;\n}\n\nexport interface UpdateBillingAddressSucceeded extends Action<Checkout> {\n    type: BillingAddressActionType.UpdateBillingAddressSucceeded;\n}\n\nexport interface UpdateBillingAddressFailed extends Action<Error> {\n    type: BillingAddressActionType.UpdateBillingAddressFailed;\n}\n\nexport interface ContinueAsGuestRequested extends Action {\n    type: BillingAddressActionType.ContinueAsGuestRequested;\n}\n\nexport interface ContinueAsGuestSucceeded extends Action<Checkout> {\n    type: BillingAddressActionType.ContinueAsGuestSucceeded;\n}\n\nexport interface ContinueAsGuestFailed extends Action<Error> {\n    type: BillingAddressActionType.ContinueAsGuestFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\nimport { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nexport enum GiftCertificateActionType {\n    ApplyGiftCertificateRequested = 'APPLY_GIFT_CERTIFICATE_REQUESTED',\n    ApplyGiftCertificateSucceeded = 'APPLY_GIFT_CERTIFICATE_SUCCEEDED',\n    ApplyGiftCertificateFailed = 'APPLY_GIFT_CERTIFICATE_FAILED',\n\n    RemoveGiftCertificateRequested = 'REMOVE_GIFT_CERTIFICATE_REQUESTED',\n    RemoveGiftCertificateSucceeded = 'REMOVE_GIFT_CERTIFICATE_SUCCEEDED',\n    RemoveGiftCertificateFailed = 'REMOVE_GIFT_CERTIFICATE_FAILED',\n}\n\nexport type GiftCertificateAction =\n    ApplyGiftCertificateAction |\n    RemoveGiftCertificateAction;\n\nexport type ApplyGiftCertificateAction =\n    ApplyGiftCertificateRequestedAction |\n    ApplyGiftCertificateSucceededAction |\n    ApplyGiftCertificateFailedAction;\n\nexport type RemoveGiftCertificateAction =\n    RemoveGiftCertificateRequestedAction |\n    RemoveGiftCertificateSucceededAction |\n    RemoveGiftCertificateFailedAction;\n\nexport interface ApplyGiftCertificateRequestedAction extends Action {\n    type: GiftCertificateActionType.ApplyGiftCertificateRequested;\n}\n\nexport interface ApplyGiftCertificateSucceededAction extends Action<Checkout> {\n    type: GiftCertificateActionType.ApplyGiftCertificateSucceeded;\n}\n\nexport interface ApplyGiftCertificateFailedAction extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: GiftCertificateActionType.ApplyGiftCertificateFailed;\n}\n\nexport interface RemoveGiftCertificateRequestedAction extends Action {\n    type: GiftCertificateActionType.RemoveGiftCertificateRequested;\n}\n\nexport interface RemoveGiftCertificateSucceededAction extends Action<Checkout> {\n    type: GiftCertificateActionType.RemoveGiftCertificateSucceeded;\n}\n\nexport interface RemoveGiftCertificateFailedAction extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: GiftCertificateActionType.RemoveGiftCertificateFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport PaymentMethod from './payment-method';\nimport PaymentMethodMeta from './payment-method-meta';\n\nexport enum PaymentMethodActionType {\n    LoadPaymentMethodRequested = 'LOAD_PAYMENT_METHOD_REQUESTED',\n    LoadPaymentMethodSucceeded = 'LOAD_PAYMENT_METHOD_SUCCEEDED',\n    LoadPaymentMethodFailed = 'LOAD_PAYMENT_METHOD_FAILED',\n\n    LoadPaymentMethodsRequested = 'LOAD_PAYMENT_METHODS_REQUESTED',\n    LoadPaymentMethodsSucceeded = 'LOAD_PAYMENT_METHODS_SUCCEEDED',\n    LoadPaymentMethodsFailed = 'LOAD_PAYMENT_METHODS_FAILED',\n}\n\nexport type PaymentMethodAction = LoadPaymentMethodAction | LoadPaymentMethodsAction;\n\nexport type LoadPaymentMethodAction =\n    LoadPaymentMethodRequestedAction |\n    LoadPaymentMethodSucceededAction |\n    LoadPaymentMethodFailedAction;\n\nexport type LoadPaymentMethodsAction =\n    LoadPaymentMethodsRequestedAction |\n    LoadPaymentMethodsSucceededAction |\n    LoadPaymentMethodsFailedAction;\n\nexport interface LoadPaymentMethodRequestedAction extends Action {\n    type: PaymentMethodActionType.LoadPaymentMethodRequested;\n}\n\nexport interface LoadPaymentMethodSucceededAction extends Action<PaymentMethod> {\n    type: PaymentMethodActionType.LoadPaymentMethodSucceeded;\n}\n\nexport interface LoadPaymentMethodFailedAction extends Action<Error> {\n    type: PaymentMethodActionType.LoadPaymentMethodFailed;\n}\n\nexport interface LoadPaymentMethodsRequestedAction extends Action {\n    type: PaymentMethodActionType.LoadPaymentMethodsRequested;\n}\n\nexport interface LoadPaymentMethodsSucceededAction extends Action<PaymentMethod[], PaymentMethodMeta> {\n    type: PaymentMethodActionType.LoadPaymentMethodsSucceeded;\n}\n\nexport interface LoadPaymentMethodsFailedAction extends Action<Error> {\n    type: PaymentMethodActionType.LoadPaymentMethodsFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadPaymentMethodAction } from '../payment';\n\nimport { CheckoutButtonMethodType } from './strategies';\n\nexport enum CheckoutButtonActionType {\n    InitializeButtonFailed = 'INITIALIZE_BUTTON_FAILED',\n    InitializeButtonRequested = 'INITIALIZE_BUTTON_REQUESTED',\n    InitializeButtonSucceeded = 'INITIALIZE_BUTTON_SUCCEEDED',\n\n    DeinitializeButtonFailed = 'DEINITIALIZE_BUTTON_FAILED',\n    DeinitializeButtonRequested = 'DEINITIALIZE_BUTTON_REQUESTED',\n    DeinitializeButtonSucceeded = 'DEINITIALIZE_BUTTON_SUCCEEDED',\n}\n\nexport type CheckoutButtonAction = InitializeButtonAction | DeinitializeButtonAction;\n\nexport type InitializeButtonAction =\n    InitializeButtonRequestedAction |\n    InitializeButtonSucceededAction |\n    InitializeButtonFailedAction |\n    LoadPaymentMethodAction;\n\nexport type DeinitializeButtonAction =\n    DeinitializeButtonRequestedAction |\n    DeinitializeButtonSucceededAction |\n    DeinitializeButtonFailedAction;\n\nexport interface CheckoutButtonActionMeta {\n    methodId: CheckoutButtonMethodType;\n}\n\nexport interface InitializeButtonActionMeta extends CheckoutButtonActionMeta {\n    containerId: string;\n}\n\nexport interface InitializeButtonRequestedAction extends Action<undefined, InitializeButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonRequested;\n}\n\nexport interface InitializeButtonSucceededAction extends Action<undefined, InitializeButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonSucceeded;\n}\n\nexport interface InitializeButtonFailedAction extends Action<Error, InitializeButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonFailed;\n}\n\nexport interface DeinitializeButtonRequestedAction extends Action<undefined, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonRequested;\n}\n\nexport interface DeinitializeButtonSucceededAction extends Action<undefined, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonSucceeded;\n}\n\nexport interface DeinitializeButtonFailedAction extends Action<Error, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { InstrumentsResponseBody } from './instrument-response-body';\n\nexport enum InstrumentActionType {\n    LoadInstrumentsRequested = 'LOAD_INSTRUMENTS_REQUESTED',\n    LoadInstrumentsSucceeded = 'LOAD_INSTRUMENTS_SUCCEEDED',\n    LoadInstrumentsFailed = 'LOAD_INSTRUMENTS_FAILED',\n\n    DeleteInstrumentRequested = 'DELETE_INSTRUMENT_REQUESTED',\n    DeleteInstrumentSucceeded = 'DELETE_INSTRUMENT_SUCCEEDED',\n    DeleteInstrumentFailed = 'DELETE_INSTRUMENT_FAILED',\n}\n\nexport type InstrumentAction =\n    LoadInstrumentsAction |\n    DeleteInstrumentAction;\n\nexport type LoadInstrumentsAction =\n    LoadInstrumentsRequestedAction |\n    LoadInstrumentsSucceededAction |\n    LoadInstrumentsFailedAction;\n\nexport type DeleteInstrumentAction =\n    DeleteInstrumentRequestedAction |\n    DeleteInstrumentSucceededAction |\n    DeleteInstrumentFailedAction;\n\nexport interface LoadInstrumentsRequestedAction extends Action {\n    type: InstrumentActionType.LoadInstrumentsRequested;\n}\n\nexport interface LoadInstrumentsSucceededAction extends Action<InstrumentsResponseBody> {\n    type: InstrumentActionType.LoadInstrumentsSucceeded;\n}\n\nexport interface LoadInstrumentsFailedAction extends Action<Error> {\n    type: InstrumentActionType.LoadInstrumentsFailed;\n}\n\nexport interface DeleteInstrumentRequestedAction extends Action {\n    type: InstrumentActionType.DeleteInstrumentRequested;\n}\n\nexport interface DeleteInstrumentSucceededAction extends Action<InstrumentsResponseBody> {\n    type: InstrumentActionType.DeleteInstrumentSucceeded;\n}\n\nexport interface DeleteInstrumentFailedAction extends Action<Error> {\n    type: InstrumentActionType.DeleteInstrumentFailed;\n}\n","module.exports = require(\"rxjs/operators\");","import EmbeddedCheckoutError from './embedded-checkout-error';\nimport EmbeddedContentOptions from './iframe-content/embedded-content-options';\n\nexport enum EmbeddedCheckoutEventType {\n    CheckoutComplete = 'CHECKOUT_COMPLETE',\n    CheckoutError = 'CHECKOUT_ERROR',\n    CheckoutLoaded = 'CHECKOUT_LOADED',\n    FrameError = 'FRAME_ERROR',\n    FrameLoaded = 'FRAME_LOADED',\n    SignedOut = 'SIGNED_OUT',\n}\n\nexport interface EmbeddedCheckoutEventMap {\n    [EmbeddedCheckoutEventType.CheckoutComplete]: EmbeddedCheckoutCompleteEvent;\n    [EmbeddedCheckoutEventType.CheckoutError]: EmbeddedCheckoutErrorEvent;\n    [EmbeddedCheckoutEventType.CheckoutLoaded]: EmbeddedCheckoutLoadedEvent;\n    [EmbeddedCheckoutEventType.FrameError]: EmbeddedCheckoutFrameErrorEvent;\n    [EmbeddedCheckoutEventType.FrameLoaded]: EmbeddedCheckoutFrameLoadedEvent;\n    [EmbeddedCheckoutEventType.SignedOut]: EmbeddedCheckoutSignedOutEvent;\n}\n\nexport type EmbeddedCheckoutEvent = (\n    EmbeddedCheckoutCompleteEvent |\n    EmbeddedCheckoutErrorEvent |\n    EmbeddedCheckoutFrameErrorEvent |\n    EmbeddedCheckoutFrameLoadedEvent |\n    EmbeddedCheckoutLoadedEvent |\n    EmbeddedCheckoutSignedOutEvent\n);\n\nexport interface EmbeddedCheckoutCompleteEvent {\n    type: EmbeddedCheckoutEventType.CheckoutComplete;\n}\n\nexport interface EmbeddedCheckoutErrorEvent {\n    type: EmbeddedCheckoutEventType.CheckoutError;\n    payload: EmbeddedCheckoutError;\n}\n\nexport interface EmbeddedCheckoutLoadedEvent {\n    type: EmbeddedCheckoutEventType.CheckoutLoaded;\n}\n\nexport interface EmbeddedCheckoutFrameErrorEvent {\n    type: EmbeddedCheckoutEventType.FrameError;\n    payload: EmbeddedCheckoutError;\n}\n\nexport interface EmbeddedCheckoutFrameLoadedEvent {\n    type: EmbeddedCheckoutEventType.FrameLoaded;\n    payload?: EmbeddedContentOptions;\n}\n\nexport interface EmbeddedCheckoutSignedOutEvent {\n    type: EmbeddedCheckoutEventType.SignedOut;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { AmazonPayRemoteCheckout } from './methods';\n\nexport enum RemoteCheckoutActionType {\n    InitializeRemoteBillingRequested = 'INITIALIZE_REMOTE_BILLING_REQUESTED',\n    InitializeRemoteBillingSucceeded = 'INITIALIZE_REMOTE_BILLING_SUCCEEDED',\n    InitializeRemoteBillingFailed = 'INITIALIZE_REMOTE_BILLING_FAILED',\n\n    InitializeRemoteShippingRequested = 'INITIALIZE_REMOTE_SHIPPING_REQUESTED',\n    InitializeRemoteShippingSucceeded = 'INITIALIZE_REMOTE_SHIPPING_SUCCEEDED',\n    InitializeRemoteShippingFailed = 'INITIALIZE_REMOTE_SHIPPING_FAILED',\n\n    InitializeRemotePaymentRequested = 'INITIALIZE_REMOTE_PAYMENT_REQUESTED',\n    InitializeRemotePaymentSucceeded = 'INITIALIZE_REMOTE_PAYMENT_SUCCEEDED',\n    InitializeRemotePaymentFailed = 'INITIALIZE_REMOTE_PAYMENT_FAILED',\n\n    LoadRemoteSettingsRequested = 'LOAD_REMOTE_SETTINGS_REQUESTED',\n    LoadRemoteSettingsSucceeded = 'LOAD_REMOTE_SETTINGS_SUCCEEDED',\n    LoadRemoteSettingsFailed = 'LOAD_REMOTE_SETTINGS_FAILED',\n\n    SignOutRemoteCustomerRequested = 'SIGN_OUT_REMOTE_CUSTOMER_REQUESTED',\n    SignOutRemoteCustomerSucceeded = 'SIGN_OUT_REMOTE_CUSTOMER_SUCCEEDED',\n    SignOutRemoteCustomerFailed = 'SIGN_OUT_REMOTE_CUSTOMER_FAILED',\n\n    UpdateRemoteCheckout = 'UPDATE_REMOTE_CHECKOUT',\n}\n\nexport type RemoteCheckoutAction = InitializeRemoteBillingAction |\n    InitializeRemoteShippingAction |\n    InitializeRemotePaymentAction |\n    SignOutRemoteCustomerAction |\n    LoadRemoteSettingsAction |\n    UpdateRemoteCheckoutAction;\n\nexport type InitializeRemoteBillingAction = InitializeRemoteBillingSucceededAction |\n    InitializeRemoteBillingFailedAction |\n    InitializeRemoteBillingRequestedAction;\n\nexport interface InitializeRemoteBillingSucceededAction extends Action<AmazonPayRemoteCheckout> {\n    type: RemoteCheckoutActionType.InitializeRemoteBillingSucceeded;\n}\n\nexport interface InitializeRemoteBillingFailedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteBillingFailed;\n}\n\nexport interface InitializeRemoteBillingRequestedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteBillingRequested;\n}\n\nexport type InitializeRemoteShippingAction = InitializeRemoteShippingSucceededAction |\n    InitializeRemoteShippingFailedAction |\n    InitializeRemoteShippingRequestedAction;\n\nexport interface InitializeRemoteShippingSucceededAction extends Action<AmazonPayRemoteCheckout> {\n    type: RemoteCheckoutActionType.InitializeRemoteShippingSucceeded;\n}\n\nexport interface InitializeRemoteShippingFailedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteShippingFailed;\n}\n\nexport interface InitializeRemoteShippingRequestedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteShippingRequested;\n}\n\nexport type InitializeRemotePaymentAction = InitializeRemotePaymentSucceededAction |\n    InitializeRemotePaymentFailedAction |\n    InitializeRemotePaymentRequestedAction;\n\nexport interface InitializeRemotePaymentSucceededAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemotePaymentSucceeded;\n}\n\nexport interface InitializeRemotePaymentFailedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemotePaymentFailed;\n}\n\nexport interface InitializeRemotePaymentRequestedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemotePaymentRequested;\n}\n\nexport type SignOutRemoteCustomerAction = SignOutRemoteCustomerSucceededAction |\n    SignOutRemoteCustomerFailedAction |\n    SignOutRemoteCustomerRequestedAction;\n\nexport interface SignOutRemoteCustomerSucceededAction extends Action {\n    type: RemoteCheckoutActionType.SignOutRemoteCustomerSucceeded;\n}\n\nexport interface SignOutRemoteCustomerFailedAction extends Action {\n    type: RemoteCheckoutActionType.SignOutRemoteCustomerFailed;\n}\n\nexport interface SignOutRemoteCustomerRequestedAction extends Action {\n    type: RemoteCheckoutActionType.SignOutRemoteCustomerRequested;\n}\n\nexport type LoadRemoteSettingsAction = LoadRemoteSettingsSucceededAction |\n    LoadRemoteSettingsRequestedAction |\n    LoadRemoteSettingsFailedAction;\n\nexport interface LoadRemoteSettingsSucceededAction extends Action {\n    type: RemoteCheckoutActionType.LoadRemoteSettingsSucceeded;\n}\n\nexport interface LoadRemoteSettingsRequestedAction extends Action {\n    type: RemoteCheckoutActionType.LoadRemoteSettingsRequested;\n}\n\nexport interface LoadRemoteSettingsFailedAction extends Action {\n    type: RemoteCheckoutActionType.LoadRemoteSettingsFailed;\n}\n\nexport interface UpdateRemoteCheckoutAction extends Action {\n    type: RemoteCheckoutActionType.UpdateRemoteCheckout;\n}\n","import { ClearErrorAction, ErrorActionType } from './error-actions';\n\nexport default class ErrorActionCreator {\n    clearError(error: Error): ClearErrorAction {\n        return {\n            type: ErrorActionType.ClearError,\n            payload: error,\n        };\n    }\n}\n","import { createAction, createErrorAction, Action } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport Country from './country';\nimport { CountryActionType } from './country-actions';\nimport CountryRequestSender from './country-request-sender';\n\nexport default class CountryActionCreator {\n    constructor(\n        private _countryRequestSender: CountryRequestSender\n    ) {}\n\n    loadCountries(options?: RequestOptions): Observable<Action<Country[]>> {\n        return Observable.create((observer: Observer<Action<Country[]>>) => {\n            observer.next(createAction(CountryActionType.LoadCountriesRequested));\n\n            this._countryRequestSender.loadCountries(options)\n                .then(response => {\n                    observer.next(createAction(CountryActionType.LoadCountriesSucceeded, response.body.data));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CountryActionType.LoadCountriesFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport { CountryResponseBody } from './country-responses';\n\nexport default class CountryRequestSender {\n    constructor(\n        private _requestSender: RequestSender,\n        private _config: { locale?: string }\n    ) {}\n\n    loadCountries({ timeout }: RequestOptions = {}): Promise<Response<CountryResponseBody>> {\n        const url = '/internalapi/v1/store/countries';\n        const headers = {\n            'Accept-Language': this._config.locale,\n        };\n\n        return this._requestSender.get(url, { headers, timeout });\n    }\n}\n","enum PaymentStrategyType {\n    AFFIRM = 'affirm',\n    AFTERPAY = 'afterpay',\n    AMAZON = 'amazon',\n    CREDIT_CARD = 'creditcard',\n    KLARNA = 'klarna',\n    LEGACY = 'legacy',\n    OFFLINE = 'offline',\n    OFFSITE = 'offsite',\n    PAYPAL = 'paypal',\n    PAYPAL_EXPRESS = 'paypalexpress',\n    PAYPAL_EXPRESS_CREDIT = 'paypalexpresscredit',\n    SAGE_PAY = 'sagepay',\n    SQUARE = 'squarev2',\n    NO_PAYMENT_DATA_REQUIRED = 'nopaymentdatarequired',\n    BRAINTREE = 'braintree',\n    BRAINTREE_PAYPAL = 'braintreepaypal',\n    BRAINTREE_PAYPAL_CREDIT = 'braintreepaypalcredit',\n    BRAINTREE_VISA_CHECKOUT = 'braintreevisacheckout',\n    BRAINTREE_GOOGLE_PAY = 'googlepaybraintree',\n    CHASE_PAY = 'chasepay',\n    WE_PAY = 'wepay',\n    MASTERPASS = 'masterpass',\n    STRIPE_GOOGLE_PAY = 'googlepaystripe',\n    ZIP = 'zip',\n    CONVERGE = 'converge',\n}\n\nexport default PaymentStrategyType;\n","import { StandardError } from '../../common/error/errors';\n\nexport default class OrderFinalizationNotRequiredError extends StandardError {\n    constructor() {\n        super('The current order does not need to be finalized at this stage.');\n\n        this.type = 'order_finalization_not_required';\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, empty, of, Observable, Observer } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { InternalCheckoutSelectors, ReadableCheckoutStore } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { LoadOrderPaymentsAction, OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../order';\nimport { OrderFinalizationNotRequiredError } from '../order/errors';\n\nimport { PaymentInitializeOptions, PaymentRequestOptions } from './payment-request-options';\nimport {\n    PaymentStrategyActionType,\n    PaymentStrategyDeinitializeAction,\n    PaymentStrategyExecuteAction,\n    PaymentStrategyFinalizeAction,\n    PaymentStrategyInitializeAction,\n    PaymentStrategyWidgetAction,\n} from './payment-strategy-actions';\nimport PaymentStrategyRegistry from './payment-strategy-registry';\nimport PaymentStrategyType from './payment-strategy-type';\nimport { PaymentStrategy } from './strategies';\n\nexport default class PaymentStrategyActionCreator {\n    constructor(\n        private _strategyRegistry: PaymentStrategyRegistry,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: RequestOptions): ThunkAction<PaymentStrategyExecuteAction, InternalCheckoutSelectors> {\n        return store => new Observable((observer: Observer<PaymentStrategyExecuteAction>) => {\n            const state = store.getState();\n            const { payment = {} as OrderPaymentRequestBody, useStoreCredit } = payload;\n            const meta = { methodId: payment.methodId };\n\n            let strategy: PaymentStrategy;\n\n            if (state.payment.isPaymentDataRequired(useStoreCredit)) {\n                const method = state.paymentMethods.getPaymentMethod(payment.methodId, payment.gatewayId);\n\n                if (!method) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                strategy = this._strategyRegistry.getByMethod(method);\n            } else {\n                strategy = this._strategyRegistry.get(PaymentStrategyType.NO_PAYMENT_DATA_REQUIRED);\n            }\n\n            observer.next(createAction(PaymentStrategyActionType.ExecuteRequested, undefined, meta));\n\n            strategy\n                .execute(payload, { ...options, methodId: payment.methodId, gatewayId: payment.gatewayId })\n                .then(() => {\n                    observer.next(createAction(PaymentStrategyActionType.ExecuteSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(PaymentStrategyActionType.ExecuteFailed, error, meta));\n                });\n        });\n    }\n\n    finalize(options?: RequestOptions): ThunkAction<PaymentStrategyFinalizeAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(PaymentStrategyActionType.FinalizeRequested)),\n            this._loadOrderPaymentsIfNeeded(store, options),\n            defer(() => {\n                const state = store.getState();\n                const payment = state.payment.getPaymentId();\n\n                if (!payment) {\n                    throw new OrderFinalizationNotRequiredError();\n                }\n\n                const method = state.paymentMethods.getPaymentMethod(payment.providerId, payment.gatewayId);\n\n                if (!method) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                return this._strategyRegistry.getByMethod(method)\n                    .finalize({ ...options, methodId: method.id, gatewayId: method.gateway })\n                    .then(() => createAction(PaymentStrategyActionType.FinalizeSucceeded, undefined, { methodId: payment.providerId }));\n            })\n        ).pipe(\n            catchError(error => {\n                const state = store.getState();\n                const payment = state.payment.getPaymentId();\n\n                return throwErrorAction(PaymentStrategyActionType.FinalizeFailed, error, { methodId: payment && payment.providerId });\n            })\n        );\n    }\n\n    initialize(options: PaymentInitializeOptions): ThunkAction<PaymentStrategyInitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<PaymentStrategyInitializeAction>) => {\n            const state = store.getState();\n            const { methodId, gatewayId } = options;\n            const method = state.paymentMethods.getPaymentMethod(methodId, gatewayId);\n\n            if (!method) {\n                throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n            }\n\n            if (methodId && state.paymentStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(PaymentStrategyActionType.InitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.getByMethod(method)\n                .initialize({ ...options, methodId, gatewayId })\n                .then(() => {\n                    observer.next(createAction(PaymentStrategyActionType.InitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(PaymentStrategyActionType.InitializeFailed, error, { methodId }));\n                });\n        });\n    }\n\n    deinitialize(options: PaymentRequestOptions): ThunkAction<PaymentStrategyDeinitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<PaymentStrategyDeinitializeAction>) => {\n            const state = store.getState();\n            const { methodId, gatewayId } = options;\n            const method = state.paymentMethods.getPaymentMethod(methodId, gatewayId);\n\n            if (!method) {\n                throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n            }\n\n            if (methodId && !state.paymentStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(PaymentStrategyActionType.DeinitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.getByMethod(method)\n                .deinitialize({ ...options, methodId, gatewayId })\n                .then(() => {\n                    observer.next(createAction(PaymentStrategyActionType.DeinitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(PaymentStrategyActionType.DeinitializeFailed, error, { methodId }));\n                });\n        });\n    }\n\n    widgetInteraction(method: () => Promise<any>, options?: PaymentRequestOptions): ThunkAction<PaymentStrategyWidgetAction> {\n        return store => Observable.create((observer: Observer<PaymentStrategyWidgetAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(PaymentStrategyActionType.WidgetInteractionStarted, undefined, meta));\n\n            method().then(() => {\n                observer.next(createAction(PaymentStrategyActionType.WidgetInteractionFinished, undefined, meta));\n                observer.complete();\n            })\n            .catch(error => {\n                observer.error(createErrorAction(PaymentStrategyActionType.WidgetInteractionFailed, error, meta));\n            });\n        });\n    }\n\n    private _loadOrderPaymentsIfNeeded(store: ReadableCheckoutStore, options?: RequestOptions): Observable<LoadOrderPaymentsAction> {\n        const state = store.getState();\n        const checkout = state.checkout.getCheckout();\n\n        if (checkout && checkout.orderId) {\n            return this._orderActionCreator.loadOrderPayments(checkout.orderId, options);\n        }\n\n        return empty();\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class CartChangedError extends StandardError {\n    constructor() {\n        super('An update to your shopping cart has been detected and your available shipping costs have been updated.');\n\n        this.type = 'cart_changed';\n    }\n}\n","import { isEqual, map } from 'lodash';\n\nimport { CartComparator } from '../cart';\nimport { CartChangedError } from '../cart/errors';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { Coupon, GiftCertificate } from '../coupon';\n\nimport Checkout from './checkout';\nimport CheckoutRequestSender from './checkout-request-sender';\n\nexport default class CheckoutValidator {\n    constructor(\n        private _checkoutRequestSender: CheckoutRequestSender\n    ) {}\n\n    validate(checkout?: Checkout, options?: RequestOptions): Promise<void> {\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        return this._checkoutRequestSender.loadCheckout(checkout.id, options)\n            .then(response => {\n                const comparator = new CartComparator();\n\n                if (checkout.grandTotal === response.body.grandTotal\n                    && this._compareCoupons(checkout.coupons, response.body.coupons)\n                    && this._compareGiftCertificates(checkout.giftCertificates, response.body.giftCertificates)\n                    && comparator.isEqual(checkout.cart, response.body.cart)\n                ) {\n                    return;\n                }\n\n                throw new CartChangedError();\n            });\n    }\n\n    private _compareCoupons(couponsA: Coupon[], couponsB: Coupon[]): boolean {\n        return isEqual(map(couponsA, 'code'), map(couponsB, 'code'));\n    }\n\n    private _compareGiftCertificates(giftCertificatesA: GiftCertificate[], giftCertificatesB: GiftCertificate[]): boolean {\n        return isEqual(map(giftCertificatesA, 'code'), map(giftCertificatesB, 'code'));\n    }\n}\n","import { PaymentInstrument, VaultedInstrument } from './payment';\n\nexport default function isVaultedInstrument(instrument: PaymentInstrument): instrument is VaultedInstrument {\n    return Boolean((instrument as VaultedInstrument).instrumentId);\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { pick } from 'lodash';\nimport { concat, from, of } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\n\nimport { mapToInternalAddress } from '../address';\nimport { mapToInternalCart } from '../cart';\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { StandardError } from '../common/error/errors';\nimport { mapToInternalCustomer } from '../customer';\nimport { mapToInternalOrder, OrderActionCreator } from '../order';\nimport { mapToInternalShippingOption } from '../shipping';\n\nimport isVaultedInstrument from './is-vaulted-instrument';\nimport Payment from './payment';\nimport { InitializeOffsitePaymentAction, PaymentActionType, SubmitPaymentAction } from './payment-actions';\nimport PaymentMethod from './payment-method';\nimport PaymentMethodSelector from './payment-method-selector';\nimport PaymentRequestBody from './payment-request-body';\nimport PaymentRequestSender from './payment-request-sender';\n\nexport default class PaymentActionCreator {\n    constructor(\n        private _paymentRequestSender: PaymentRequestSender,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    submitPayment(payment: Payment): ThunkAction<SubmitPaymentAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(PaymentActionType.SubmitPaymentRequested)),\n            from(this._paymentRequestSender.submitPayment(\n                this._getPaymentRequestBody(payment, store.getState())\n            ))\n                .pipe(\n                    switchMap(({ body }) => concat(\n                        this._orderActionCreator.loadCurrentOrder()(store),\n                        of(createAction(PaymentActionType.SubmitPaymentSucceeded, body))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(PaymentActionType.SubmitPaymentFailed, error))\n        );\n    }\n\n    initializeOffsitePayment(\n        methodId: string,\n        gatewayId?: string\n    ): ThunkAction<InitializeOffsitePaymentAction, InternalCheckoutSelectors> {\n        return store => {\n            const payload = this._getPaymentRequestBody({ gatewayId, methodId }, store.getState());\n\n            return concat(\n                of(createAction(PaymentActionType.InitializeOffsitePaymentRequested)),\n                this._paymentRequestSender.initializeOffsitePayment(payload)\n                    .then(() => createAction(PaymentActionType.InitializeOffsitePaymentSucceeded))\n            ).pipe(\n                catchError(error => throwErrorAction(PaymentActionType.InitializeOffsitePaymentFailed, error))\n            );\n        };\n    }\n\n    private _getPaymentRequestBody(payment: Payment, state: InternalCheckoutSelectors): PaymentRequestBody {\n        const billingAddress = state.billingAddress.getBillingAddress();\n        const checkout = state.checkout.getCheckout();\n        const customer = state.customer.getCustomer();\n        const order = state.order.getOrder();\n        const paymentMethod = this._getPaymentMethod(state.paymentMethods, payment.methodId, payment.gatewayId);\n        const shippingAddress = state.shippingAddress.getShippingAddress();\n        const consignments = state.consignments.getConsignments();\n        const shippingOption = state.consignments.getShippingOption();\n        const storeConfig = state.config.getStoreConfig();\n        const contextConfig = state.config.getContextConfig();\n        const instrumentMeta = state.instruments.getInstrumentsMeta();\n        const paymentMeta = state.paymentMethods.getPaymentMethodsMeta();\n        const orderMeta = state.order.getOrderMeta();\n        const internalCustomer = customer && billingAddress && mapToInternalCustomer(customer, billingAddress);\n\n        const authToken = instrumentMeta && payment.paymentData && isVaultedInstrument(payment.paymentData) ?\n            `${state.payment.getPaymentToken()}, ${instrumentMeta.vaultAccessToken}` :\n            state.payment.getPaymentToken();\n\n        if (!authToken) {\n            throw new StandardError();\n        }\n\n        return {\n            authToken,\n            paymentMethod,\n            customer: internalCustomer,\n            billingAddress: billingAddress && mapToInternalAddress(billingAddress),\n            shippingAddress: shippingAddress && mapToInternalAddress(shippingAddress, consignments),\n            shippingOption: shippingOption && mapToInternalShippingOption(shippingOption, true),\n            cart: checkout && mapToInternalCart(checkout),\n            order: order && mapToInternalOrder(order, orderMeta),\n            orderMeta,\n            payment: payment.paymentData,\n            quoteMeta: {\n                request: {\n                    ...paymentMeta,\n                    geoCountryCode: contextConfig && contextConfig.geoCountryCode,\n                },\n            },\n            source: 'bigcommerce-checkout-js-sdk',\n            store: pick(storeConfig && storeConfig.storeProfile, [\n                'storeHash',\n                'storeId',\n                'storeLanguage',\n                'storeName',\n            ]),\n        };\n    }\n\n    private _getPaymentMethod(\n        paymentMethodSelector: PaymentMethodSelector,\n        methodId: string,\n        gatewayId?: string\n    ): PaymentMethod | undefined {\n        const paymentMethod = paymentMethodSelector.getPaymentMethod(methodId, gatewayId);\n\n        if (!paymentMethod) {\n            return;\n        }\n\n        if (paymentMethod.method === 'multi-option' && !paymentMethod.gateway) {\n            return { ...paymentMethod, gateway: paymentMethod.id };\n        }\n\n        if (paymentMethod.initializationData && paymentMethod.initializationData.gateway) {\n            return { ...paymentMethod, id: paymentMethod.initializationData.gateway };\n        }\n\n        return paymentMethod;\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport PaymentRequestBody from './payment-request-body';\n\n/**\n * @todo Convert this file into TypeScript properly\n */\nexport default class PaymentRequestSender {\n    /**\n     * @constructor\n     * @param {BigpayClient} client\n     */\n    constructor(\n        private _client: any\n    ) {}\n\n    submitPayment(payload: PaymentRequestBody): Promise<Response> {\n        return new Promise((resolve, reject) => {\n            this._client.submitPayment(payload, (error: any, response: any) => {\n                if (error) {\n                    reject(this._transformResponse(error));\n                } else {\n                    resolve(this._transformResponse(response));\n                }\n            });\n        });\n    }\n\n    initializeOffsitePayment(payload: PaymentRequestBody): Promise<void> {\n        return new Promise(() => {\n            this._client.initializeOffsitePayment(payload);\n        });\n    }\n\n    private _transformResponse(response: any): Response {\n        return {\n            headers: {},\n            body: response.data,\n            status: response.status,\n            statusText: response.statusText,\n        };\n    }\n}\n","import { ReadableDataStore } from '@bigcommerce/data-store';\nimport { some } from 'lodash';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { Registry } from '../common/registry';\nimport { RegistryOptions } from '../common/registry/registry';\n\nimport PaymentMethod from './payment-method';\nimport * as paymentMethodTypes from './payment-method-types';\nimport PaymentStrategyType from './payment-strategy-type';\nimport PaymentStrategy from './strategies/payment-strategy';\n\nexport default class PaymentStrategyRegistry extends Registry<PaymentStrategy, PaymentStrategyType> {\n    constructor(\n        private _store: ReadableDataStore<InternalCheckoutSelectors>,\n        options?: PaymentStrategyRegistryOptions\n    ) {\n        super(options);\n    }\n\n    getByMethod(paymentMethod?: PaymentMethod): PaymentStrategy {\n        if (!paymentMethod) {\n            return this.get();\n        }\n\n        const token = this._getToken(paymentMethod);\n        const cacheToken = paymentMethod.gateway || paymentMethod.id;\n\n        return this.get(token, cacheToken);\n    }\n\n    private _getToken(paymentMethod: PaymentMethod): PaymentStrategyType {\n        const methodId = paymentMethod.gateway || paymentMethod.id;\n\n        if (this._hasFactoryForMethod(methodId)) {\n            return methodId;\n        }\n\n        if (paymentMethod.type === paymentMethodTypes.OFFLINE) {\n            return PaymentStrategyType.OFFLINE;\n        }\n\n        if (this._isLegacyMethod(paymentMethod)) {\n            return PaymentStrategyType.LEGACY;\n        }\n\n        if (paymentMethod.type === paymentMethodTypes.HOSTED) {\n            return PaymentStrategyType.OFFSITE;\n        }\n\n        return PaymentStrategyType.CREDIT_CARD;\n    }\n\n    private _hasFactoryForMethod(\n        methodId: string\n    ): methodId is PaymentStrategyType {\n        return this._hasFactory(methodId);\n    }\n\n    private _isLegacyMethod(paymentMethod: PaymentMethod): boolean {\n        const config = this._store.getState().config.getStoreConfig();\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        const { clientSidePaymentProviders } = config.paymentSettings;\n\n        if (!clientSidePaymentProviders || paymentMethod.gateway === 'adyen') {\n            return false;\n        }\n\n        return !some(clientSidePaymentProviders, id =>\n            paymentMethod.id === id || paymentMethod.gateway === id\n        );\n    }\n}\n\nexport interface PaymentStrategyRegistryOptions extends RegistryOptions {\n    clientSidePaymentProviders?: string[];\n}\n","import { InvalidArgumentError } from '../../common/error/errors';\n\nexport default class PaymentArgumentInvalidError extends InvalidArgumentError {\n    constructor(invalidFields?: string[]) {\n        let message = 'Unable to submit payment for the order because the payload is invalid.';\n\n        if (invalidFields) {\n            message = `${message} Make sure the following fields are provided correctly: ${invalidFields.join(', ')}.`;\n        }\n\n        super(message);\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class PaymentMethodCancelledError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Payment process was cancelled.');\n\n        this.type = 'payment_cancelled';\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { AmountTransformer } from '../../../common/utility';\nimport { Order, OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { Consignment } from '../../../shipping';\nimport { PaymentArgumentInvalidError, PaymentMethodCancelledError, PaymentMethodInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { Affirm, AffirmAddress, AffirmDiscount, AffirmFailResponse, AffirmItem, AffirmRequestData, AffirmSuccessResponse } from './affirm';\nimport AffirmScriptLoader from './affirm-script-loader';\n\nexport default class AffirmPaymentStrategy implements PaymentStrategy {\n    private _affirm?: Affirm;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _affirmScriptLoader: AffirmScriptLoader\n    ) { }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(options.methodId))\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n                if (!paymentMethod || !paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const { config: { testMode }, clientToken: publicKey } = paymentMethod;\n\n                return this._affirmScriptLoader.load(publicKey, testMode);\n            })\n            .then(affirm => {\n                this._affirm = affirm;\n\n                return this._store.getState();\n            });\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const methodId = payload.payment && payload.payment.methodId;\n        const { useStoreCredit } = payload;\n        const { _affirm } = this;\n\n        if (!_affirm) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!methodId) {\n            throw new PaymentArgumentInvalidError(['payment.methodId']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder({ useStoreCredit }, options))\n            .then<AffirmSuccessResponse>(() => {\n                _affirm.checkout(this._getCheckoutInformation());\n\n                return new Promise((resolve, reject) => {\n                    _affirm.checkout.open({\n                        onFail: (failObject: AffirmFailResponse) => {\n                            failObject.reason === 'canceled' ? reject(new PaymentMethodCancelledError()) : reject(new PaymentMethodInvalidError());\n                        },\n                        onSuccess: successObject => { resolve(successObject); },\n                    });\n                    _affirm.ui.error.on('close', () => {\n                        reject(new PaymentMethodCancelledError());\n                    });\n                });\n            })\n            .then(result => {\n                const paymentPayload = {\n                    methodId,\n                    paymentData: { nonce: result.checkout_token },\n                };\n\n                return this._store.dispatch(this._paymentActionCreator.submitPayment(paymentPayload));\n            });\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._affirm) {\n            this._affirm = undefined;\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _getCheckoutInformation(): AffirmRequestData {\n        const state = this._store.getState();\n        const config = state.config.getStoreConfig();\n        const consignments = state.consignments.getConsignments();\n        const order = state.order.getOrder();\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!order) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        const amountTransformer = new AmountTransformer(order.currency.decimalPlaces);\n        const billingAddress = this._getBillingAddress();\n\n        return {\n            merchant: {\n                user_confirmation_url: config.links.checkoutLink,\n                user_cancel_url: config.links.checkoutLink,\n                user_confirmation_url_action: 'POST',\n            },\n            shipping: this._getShippingAddress() || billingAddress,\n            billing: billingAddress,\n            items: this._getItems(amountTransformer, order),\n            metadata: {\n                shipping_type: this._getShippingType(consignments),\n                mode: 'modal',\n                platform_type: 'BigCommerce',\n                platform_version: '',\n                platform_affirm: '',\n            },\n            discounts: this._getDiscounts(amountTransformer, order),\n            order_id: order.orderId ? order.orderId.toString() : '',\n            shipping_amount: amountTransformer.toInteger(order.shippingCostTotal),\n            tax_amount: amountTransformer.toInteger(order.taxTotal),\n            total: amountTransformer.toInteger(order.orderAmount),\n        };\n    }\n\n    private _getShippingType(consignments?: Consignment[]): string {\n        if (!consignments) {\n            return '';\n        }\n\n        const consignment = consignments[0];\n\n        return consignment && consignment.selectedShippingOption ?\n            consignment.selectedShippingOption.type : '';\n    }\n\n    private _getBillingAddress(): AffirmAddress {\n        const state = this._store.getState();\n        const billingAddress = state.billingAddress.getBillingAddress();\n\n        if (!billingAddress) {\n            throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n        }\n\n        const billingInformation = {\n            name: {\n                first: billingAddress.firstName,\n                last: billingAddress.lastName,\n                full: `${billingAddress.firstName} ${billingAddress.lastName}`,\n            },\n            address: {\n                line1: billingAddress.address1,\n                line2: billingAddress.address2,\n                city: billingAddress.city,\n                state: billingAddress.stateOrProvinceCode,\n                zipcode: billingAddress.postalCode,\n                country: billingAddress.countryCode,\n            },\n            phone_number: billingAddress.phone,\n            email: billingAddress.email,\n        };\n\n        return billingInformation;\n    }\n\n    private _getShippingAddress(): AffirmAddress | undefined {\n        const state = this._store.getState();\n        const shippingAddress = state.shippingAddress.getShippingAddress();\n\n        if (!shippingAddress) {\n            return;\n        }\n\n        const shippingInformation = {\n            name: {\n                first: shippingAddress.firstName,\n                last: shippingAddress.lastName,\n                full: `${shippingAddress.firstName} ${shippingAddress.lastName}`,\n            },\n            address: {\n                line1: shippingAddress.address1,\n                line2: shippingAddress.address2,\n                city: shippingAddress.city,\n                state: shippingAddress.stateOrProvinceCode,\n                zipcode: shippingAddress.postalCode,\n                country: shippingAddress.countryCode,\n            },\n            phone_number: shippingAddress.phone,\n        };\n\n        return shippingInformation;\n    }\n\n    private _getItems(amountTransformer: AmountTransformer, order: Order): AffirmItem[] {\n        const items: AffirmItem[] = [];\n\n        for (const item of order.lineItems.physicalItems) {\n            items.push({\n                display_name: item.name,\n                sku: item.sku,\n                unit_price: amountTransformer.toInteger(item.salePrice),\n                qty: item.quantity,\n                item_image_url: item.imageUrl,\n                item_url: item.url,\n            });\n        }\n\n        for (const item of order.lineItems.digitalItems) {\n            items.push({\n                display_name: item.name,\n                sku: item.sku,\n                unit_price: amountTransformer.toInteger(item.salePrice),\n                qty: item.quantity,\n                item_image_url: item.imageUrl,\n                item_url: item.url,\n            });\n        }\n\n        for (const item of order.lineItems.giftCertificates) {\n            items.push({\n                display_name: item.name,\n                sku: '',\n                unit_price: amountTransformer.toInteger(item.amount),\n                qty: 1,\n                item_image_url: '',\n                item_url: '',\n            });\n        }\n\n        if (order.lineItems.customItems) {\n            for (const item of order.lineItems.customItems) {\n                items.push({\n                    display_name: item.name,\n                    sku: item.sku,\n                    unit_price: amountTransformer.toInteger(item.listPrice),\n                    qty: item.quantity,\n                    item_image_url: '',\n                    item_url: '',\n                });\n            }\n        }\n\n        return items;\n    }\n\n    private _getDiscounts(amountTransformer: AmountTransformer, order: Order): AffirmDiscount {\n        const discounts: AffirmDiscount = {};\n\n        for (const line of order.coupons) {\n            if (line.discountedAmount > 0) {\n                discounts[line.code] = {\n                    discount_amount: amountTransformer.toInteger(line.discountedAmount),\n                    discount_display_name: line.displayName,\n                };\n            }\n        }\n\n        if (order.discountAmount > 0) {\n            discounts.DISCOUNTED_AMOUNT = {\n                discount_amount: amountTransformer.toInteger(order.discountAmount),\n                discount_display_name: 'discount',\n            };\n        }\n\n        return discounts;\n    }\n}\n","/**\n * Used this approach as Affirm uses snipped for initializing. Please refer to Affirm documentation in: https://docs.affirm.com/Integrate_Affirm/Direct_API#1._Add_Affirm.js\n */\nexport default Function(`\n'use strict';\nreturn function loadAffirmJS(apiKey, scriptURL) {\n    var _affirm_config = {\n        public_api_key:  apiKey,\n        script:          scriptURL\n    };\n    (function(l,g,m,e,a,f,b){var d,c=l[m]||{},h=document.createElement(f),n=document.getElementsByTagName(f)[0],k=function(a,b,c){return function(){a[b]._.push([c,arguments])}};c[e]=k(c,e,\"set\");d=c[e];c[a]={};c[a]._=[];d._=[];c[a][b]=k(c,a,b);a=0;for(b=\"set add save post open empty reset on off trigger ready setProduct\".split(\" \");a<b.length;a++)d[b[a]]=k(c,e,b[a]);a=0;for(b=[\"get\",\"token\",\"url\",\"items\"];a<b.length;a++)d[b[a]]=function(){};h.async=!0;h.src=g[f];n.parentNode.insertBefore(h,n);delete g[f];d(g);l[m]=c})(window,_affirm_config,\"affirm\",\"checkout\",\"ui\",\"script\",\"ready\");\n}`)();\n","import { StandardError } from '../../../common/error/errors';\n\nimport { Affirm, AffirmHostWindow, AffirmScripts } from './affirm';\nimport loadAffirmJS from './affirmJs';\n\nexport default class AffirmScriptLoader {\n    constructor(\n        public _window: AffirmHostWindow = window\n    ) { }\n\n    load(apikey?: string, testMode?: boolean): Promise<Affirm> {\n        const scriptURI = this._getScriptURI(testMode);\n\n        loadAffirmJS(apikey, scriptURI);\n        if (!this._window.affirm) {\n            throw new StandardError();\n        }\n\n        return Promise.resolve(this._window.affirm);\n    }\n\n    private _getScriptURI(testMode: boolean = false): string {\n        const SCRIPTS_DEFAULT: AffirmScripts = {\n            PROD: '//cdn1.affirm.com/js/v2/affirm.js',\n            SANDBOX: '//cdn1-sandbox.affirm.com/js/v2/affirm.js',\n        };\n\n        return testMode ? SCRIPTS_DEFAULT.SANDBOX : SCRIPTS_DEFAULT.PROD;\n    }\n}\n","import { CheckoutStore, CheckoutValidator, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport AfterpayScriptLoader from './afterpay-script-loader';\nimport AfterpaySdk from './afterpay-sdk';\n\nexport default class AfterpayPaymentStrategy implements PaymentStrategy {\n    private _afterpaySdk?: AfterpaySdk;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutValidator: CheckoutValidator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _afterpayScriptLoader: AfterpayScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId, options.gatewayId);\n        const config = state.config.getStoreConfig();\n        const storeCountryName = config ? config.storeProfile.storeCountry : '';\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._afterpayScriptLoader.load(paymentMethod, this._mapCountryToISO2(storeCountryName))\n            .then(afterpaySdk => {\n                this._afterpaySdk = afterpaySdk;\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._afterpaySdk) {\n            this._afterpaySdk = undefined;\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const paymentId = payload.payment && payload.payment.gatewayId;\n\n        if (!paymentId) {\n            throw new PaymentArgumentInvalidError(['payment.gatewayId']);\n        }\n\n        const useStoreCredit = !!payload.useStoreCredit;\n        const state = this._store.getState();\n        const config = state.config.getStoreConfig();\n        const storeCountryName = config ? config.storeProfile.storeCountry : '';\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.initializePayment(paymentId, { useStoreCredit })\n        )\n            .then(state => this._checkoutValidator.validate(state.checkout.getCheckout(), options))\n            .then(() => this._store.dispatch(\n                this._paymentMethodActionCreator.loadPaymentMethod(paymentId, options)\n            ))\n            .then(state => this._displayModal(storeCountryName, state.paymentMethods.getPaymentMethod(paymentId)))\n            // Afterpay will handle the rest of the flow so return a promise that doesn't really resolve\n            .then(() => new Promise<never>(() => {}));\n    }\n\n    finalize(options: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._remoteCheckoutActionCreator.loadSettings(options.methodId))\n            .then(state => {\n                const payment = state.payment.getPaymentId();\n                const config = state.config.getContextConfig();\n                const afterpay = state.remoteCheckout.getCheckout('afterpay');\n\n                if (!payment) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!config || !config.payment.token) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!afterpay || !afterpay.settings) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n\n                const orderPayload = {\n                    useStoreCredit: afterpay.settings.useStoreCredit,\n                };\n\n                const paymentPayload = {\n                    methodId: payment.providerId,\n                    paymentData: { nonce: config.payment.token },\n                };\n\n                return this._store.dispatch(this._orderActionCreator.submitOrder(orderPayload, options))\n                    .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment(paymentPayload)));\n            });\n    }\n\n    private _displayModal(countryName: string, paymentMethod?: PaymentMethod): void {\n        if (!this._afterpaySdk || !paymentMethod || !paymentMethod.clientToken) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        this._afterpaySdk.initialize({ countryCode: this._mapCountryToISO2(countryName)});\n        this._afterpaySdk.display({ token: paymentMethod.clientToken });\n    }\n\n    private _mapCountryToISO2(countryName: string): string {\n        switch (countryName) {\n        case 'Australia':\n            return 'AU';\n\n        case 'New Zealand':\n            return 'NZ';\n\n        case 'United States':\n            return 'US';\n\n        default:\n            return 'AU';\n        }\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport PaymentMethod from '../../payment-method';\n\nimport AfterpaySdk from './afterpay-sdk';\nimport AfterpayWindow from './afterpay-window';\n\ninterface AfterpayScripts {\n    PROD: string;\n    SANDBOX: string;\n}\n\nconst SCRIPTS_DEFAULT: AfterpayScripts = {\n    PROD: '//portal.afterpay.com/afterpay-async.js',\n    SANDBOX: '//portal-sandbox.afterpay.com/afterpay-async.js',\n};\n\nconst SCRIPTS_US: AfterpayScripts = {\n    PROD: '//portal.afterpay.com/afterpay-async.js',\n    SANDBOX: '//portal.us-sandbox.afterpay.com/afterpay-async.js',\n};\n\n/** Class responsible for loading the Afterpay SDK */\nexport default class AfterpayScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    /**\n     * Loads the appropriate Afterpay SDK depending on the payment method data.\n     * @param method the payment method data\n     */\n    load(method: PaymentMethod, countryCode: string): Promise<AfterpaySdk> {\n        const testMode = method.config.testMode || false;\n        const scriptURI = this._getScriptURI(countryCode, testMode);\n\n        return this._scriptLoader.loadScript(scriptURI)\n            .then(() => (window as AfterpayWindow).AfterPay);\n    }\n\n    private _getScriptURI(countryCode: string, testMode: boolean): string {\n        if (countryCode === 'US') {\n            return testMode ? SCRIPTS_US.SANDBOX : SCRIPTS_US.PROD;\n        }\n\n        return testMode ? SCRIPTS_DEFAULT.SANDBOX : SCRIPTS_DEFAULT.PROD;\n    }\n\n}\n","import { noop } from 'lodash';\n\nimport { isInternalAddressEqual, mapFromInternalAddress, mapToInternalAddress } from '../../../address';\nimport { BillingAddressActionCreator } from '../../../billing';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, RequestError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { RemoteCheckoutSynchronizationError } from '../../../remote-checkout/errors';\nimport PaymentMethod from '../../payment-method';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport AmazonPayOrderReference from './amazon-pay-order-reference';\nimport AmazonPayPaymentInitializeOptions from './amazon-pay-payment-initialize-options';\nimport AmazonPayScriptLoader from './amazon-pay-script-loader';\nimport AmazonPayWallet, { AmazonPayWalletOptions } from './amazon-pay-wallet';\nimport AmazonPayWindow from './amazon-pay-window';\n\nexport default class AmazonPayPaymentStrategy implements PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _walletOptions?: AmazonPayPaymentInitializeOptions;\n    private _window: AmazonPayWindow;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _scriptLoader: AmazonPayScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { amazon: amazonOptions, methodId } = options;\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n        if (!amazonOptions) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.amazon\" argument is not provided.');\n        }\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._walletOptions = amazonOptions;\n        this._paymentMethod = paymentMethod;\n\n        return new Promise((resolve, reject) => {\n            const onReady = () => {\n                this._createWallet(amazonOptions)\n                    .then(resolve)\n                    .catch(reject);\n            };\n\n            this._scriptLoader.loadWidget(paymentMethod, onReady)\n                .catch(reject);\n        })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._walletOptions = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const referenceId = this._getOrderReferenceId();\n\n        if (!referenceId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!payload.payment) {\n            throw new InvalidArgumentError('Unable to proceed because \"payload.payment.methodId\" argument is not provided.');\n        }\n\n        const { payment: { paymentData, ...paymentPayload }, useStoreCredit = false } = payload;\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.initializePayment(paymentPayload.methodId, { referenceId, useStoreCredit })\n        )\n            .then(() => this._store.dispatch(\n                this._orderActionCreator.submitOrder({\n                    ...payload,\n                    payment: paymentPayload,\n                }, options)\n            ))\n            .catch(error => {\n                if (error instanceof RequestError && error.body.type === 'provider_widget_error' && this._walletOptions) {\n                    return this._createWallet(this._walletOptions)\n                        .then(() => Promise.reject(error));\n                }\n\n                return Promise.reject(error);\n            });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _getMerchantId(): string | undefined {\n        return this._paymentMethod && this._paymentMethod.config.merchantId;\n    }\n\n    private _getOrderReferenceId(): string | undefined {\n        const state = this._store.getState();\n        const amazon = state.remoteCheckout.getCheckout('amazon');\n\n        return amazon ? amazon.referenceId : undefined;\n    }\n\n    private _createWallet(options: AmazonPayPaymentInitializeOptions): Promise<AmazonPayWallet> {\n        return new Promise((resolve, reject) => {\n            const { container, onError = noop, onPaymentSelect = noop, onReady = noop } = options;\n            const referenceId = this._getOrderReferenceId();\n            const merchantId = this._getMerchantId();\n\n            if (!document.getElementById(container)) {\n                return reject(new InvalidArgumentError('Unable to create AmazonPay Wallet widget without valid container ID.'));\n            }\n\n            if (!this._window.OffAmazonPayments) {\n                return reject(new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized));\n            }\n\n            if (!merchantId) {\n                return reject(new MissingDataError(MissingDataErrorType.MissingPaymentMethod));\n            }\n\n            const walletOptions: AmazonPayWalletOptions = {\n                amazonOrderReferenceId: referenceId,\n                design: { designMode: 'responsive' },\n                scope: 'payments:billing_address payments:shipping_address payments:widget profile',\n                sellerId: merchantId,\n                onError: error => {\n                    reject(error);\n                    onError(error);\n                },\n                onPaymentSelect: orderReference => {\n                    this._synchronizeBillingAddress()\n                        .then(() => onPaymentSelect(orderReference))\n                        .catch(onError);\n                },\n                onReady: orderReference => {\n                    resolve();\n                    onReady(orderReference);\n                },\n            };\n\n            if (!walletOptions.amazonOrderReferenceId) {\n                walletOptions.onReady = orderReference => {\n                    this._updateOrderReference(orderReference)\n                        .then(() => {\n                            resolve();\n                            onReady(orderReference);\n                        })\n                        .catch(onError);\n                };\n            }\n\n            const widget = new this._window.OffAmazonPayments.Widgets.Wallet(walletOptions);\n\n            widget.bind(container);\n\n            return widget;\n        });\n    }\n\n    private _synchronizeBillingAddress(): Promise<InternalCheckoutSelectors> {\n        const referenceId = this._getOrderReferenceId();\n        const methodId = this._paymentMethod && this._paymentMethod.id;\n\n        if (!methodId || !referenceId) {\n            throw new RemoteCheckoutSynchronizationError();\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.initializeBilling(methodId, { referenceId })\n        )\n            .then(state => {\n                const amazon = state.remoteCheckout.getCheckout('amazon');\n                const remoteAddress = amazon && amazon.billing && amazon.billing.address;\n                const billingAddress = state.billingAddress.getBillingAddress();\n                const internalBillingAddress = billingAddress && mapToInternalAddress(billingAddress);\n\n                if (remoteAddress === false) {\n                    throw new RemoteCheckoutSynchronizationError();\n                }\n\n                if (!remoteAddress || isInternalAddressEqual(remoteAddress, internalBillingAddress || {})) {\n                    return this._store.getState();\n                }\n\n                return this._store.dispatch(\n                    this._billingAddressActionCreator.updateAddress(mapFromInternalAddress(remoteAddress))\n                );\n            });\n    }\n\n    private _updateOrderReference(orderReference: AmazonPayOrderReference): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.updateCheckout('amazon', {\n                referenceId: orderReference.getAmazonOrderReferenceId(),\n            })\n        );\n    }\n}\n","export interface OverlayOptions {\n    background?: string;\n    id?: string;\n    transitionDuration?: number;\n}\n\nexport interface OverlayShowOptions {\n    onClick?(event: MouseEvent): void;\n}\n\nexport default class Overlay {\n    private _element: HTMLElement;\n    private _unregisterClick?: () => void;\n\n    constructor(options?: OverlayOptions) {\n        this._element = this._createElement(options);\n    }\n\n    show(options?: OverlayShowOptions): void {\n        if (this._element.parentElement) {\n            return;\n        }\n\n        this._registerClick(options);\n\n        document.body.appendChild(this._element);\n\n        // Fade In\n        setTimeout(() => this._element.style.opacity = '1');\n    }\n\n    remove(): void {\n        if (!this._element.parentElement) {\n            return;\n        }\n\n        if (this._unregisterClick) {\n            this._unregisterClick();\n        }\n\n        this._removeAfterTransition();\n\n        setTimeout(() => this._element.style.opacity = '0');\n    }\n\n    private _createElement(options?: OverlayOptions): HTMLElement {\n        const element = document.createElement('div');\n        const {\n            background = 'rgba(0, 0, 0, 0.8)',\n            id = null,\n            transitionDuration = 400,\n        } = options || {};\n\n        element.style.background = background;\n        element.style.display = 'block';\n        element.style.height = '100%';\n        element.style.left = '0px';\n        element.style.opacity = '0';\n        element.style.position = 'fixed';\n        element.style.top = '0px';\n        element.style.transition = `opacity ${transitionDuration}ms ease-out`;\n        element.style.width = '100%';\n        element.style.zIndex = '2147483647';\n\n        if (id) {\n            element.id = id;\n        }\n\n        return element;\n    }\n\n    private _registerClick(options?: OverlayShowOptions): void {\n        if (this._unregisterClick) {\n            this._unregisterClick();\n        }\n\n        if (options && options.onClick) {\n            const { onClick } = options;\n\n            this._element.addEventListener('click', onClick);\n\n            this._unregisterClick = () => {\n                this._element.removeEventListener('click', onClick);\n                this._unregisterClick = undefined;\n            };\n        }\n    }\n\n    private _removeAfterTransition(): void {\n        const handeTransition: (event: Event) => void = event => {\n            // NOTE: `event` is not correctly typed in this version of TS\n            if ((event as TransitionEvent).propertyName !== 'opacity') {\n                return;\n            }\n\n            if (this._element.parentElement) {\n                this._element.parentElement.removeChild(this._element);\n            }\n\n            this._element.removeEventListener('transitionend', handeTransition);\n        };\n\n        this._element.addEventListener('transitionend', handeTransition);\n    }\n}\n","import { Address } from '../../../address';\nimport { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { Overlay } from '../../../common/overlay';\nimport { CancellablePromise } from '../../../common/utility';\nimport { OrderPaymentRequestBody } from '../../../order';\nimport { PaymentMethodCancelledError } from '../../errors';\nimport { CreditCardInstrument, NonceInstrument } from '../../payment';\n\nimport { BraintreePaypal, BraintreeRequestData } from './braintree';\nimport { BraintreePaymentInitializeOptions, BraintreeThreeDSecureOptions } from './braintree-payment-options';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\n\nexport default class BraintreePaymentProcessor {\n    private _threeDSecureOptions?: BraintreeThreeDSecureOptions;\n\n    constructor(\n        private _braintreeSDKCreator: BraintreeSDKCreator,\n        private _overlay: Overlay\n    ) {}\n\n    initialize(clientToken: string, options?: BraintreePaymentInitializeOptions): void {\n        this._braintreeSDKCreator.initialize(clientToken);\n        this._threeDSecureOptions = options && options.threeDSecure;\n    }\n\n    preloadPaypal(): Promise<BraintreePaypal> {\n        return this._braintreeSDKCreator.getPaypal();\n    }\n\n    tokenizeCard(payment: OrderPaymentRequestBody, billingAddress: Address): Promise<NonceInstrument> {\n        const { paymentData } = payment;\n        const requestData = this._mapToCreditCard(paymentData as CreditCardInstrument, billingAddress);\n\n        return this._braintreeSDKCreator.getClient()\n            .then(client => client.request(requestData))\n            .then(({ creditCards }) => ({\n                nonce: creditCards[0].nonce,\n            }));\n    }\n\n    paypal(amount: number, storeLanguage: string, currency: string, offerCredit: boolean): Promise<NonceInstrument> {\n        return this._braintreeSDKCreator.getPaypal()\n            .then(paypal => {\n                this._overlay.show({\n                    onClick: () => paypal.focusWindow(),\n                });\n\n                return paypal.tokenize({\n                    amount,\n                    currency,\n                    enableShippingAddress: true,\n                    flow: 'checkout',\n                    locale: storeLanguage,\n                    offerCredit,\n                    useraction: 'commit',\n                });\n            })\n            .then(response => {\n                this._overlay.remove();\n\n                return response;\n            })\n            .catch(error => {\n                this._overlay.remove();\n\n                throw error;\n            });\n    }\n\n    verifyCard(payment: OrderPaymentRequestBody, billingAddress: Address, amount: number): Promise<NonceInstrument> {\n        if (!this._threeDSecureOptions) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const { addFrame, removeFrame } = this._threeDSecureOptions;\n\n        return Promise.all([\n            this.tokenizeCard(payment, billingAddress),\n            this._braintreeSDKCreator.get3DS(),\n        ]).then(([paymentData, threeDSecure]) => {\n            const { nonce } = paymentData;\n            const cancelVerifyCard = () => threeDSecure.cancelVerifyCard()\n                .then(response => {\n                    verification.cancel(new PaymentMethodCancelledError());\n\n                    return response;\n                });\n\n            const verification = new CancellablePromise(\n                threeDSecure.verifyCard({\n                    addFrame: (error, iframe) => {\n                        addFrame(error, iframe, cancelVerifyCard);\n                    },\n                    amount,\n                    nonce,\n                    removeFrame,\n                })\n            );\n\n            return verification.promise;\n        });\n    }\n\n    appendSessionId(processedPayment: Promise<NonceInstrument>): Promise<NonceInstrument> {\n        return processedPayment\n            .then(paymentData => Promise.all([paymentData, this._braintreeSDKCreator.getDataCollector()]))\n            .then(([paymentData, { deviceData }]) => ({ ...paymentData, deviceSessionId: deviceData }));\n    }\n\n    deinitialize(): Promise<void> {\n        return this._braintreeSDKCreator.teardown();\n    }\n\n    private _mapToCreditCard(creditCard: CreditCardInstrument, billingAddress: Address): BraintreeRequestData {\n        let streetAddress = billingAddress.address1;\n\n        if (billingAddress.address2) {\n            streetAddress = ` ${billingAddress.address2}`;\n        }\n\n        return {\n            data: {\n                creditCard: {\n                    cardholderName: creditCard.ccName,\n                    number: creditCard.ccNumber,\n                    cvv: creditCard.ccCvv,\n                    expirationDate: `${creditCard.ccExpiry.month}/${creditCard.ccExpiry.year}`,\n                    options: {\n                        validate: false,\n                    },\n                    billingAddress: {\n                        countryName: billingAddress.country,\n                        postalCode: billingAddress.postalCode,\n                        streetAddress,\n                    },\n                },\n            },\n            endpoint: 'payment_methods/credit_cards',\n            method: 'post',\n        };\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, StandardError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport isCreditCardLike from '../../is-credit-card-like';\nimport isVaultedInstrument from '../../is-vaulted-instrument';\nimport Payment, { PaymentInstrument } from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport BraintreePaymentProcessor from './braintree-payment-processor';\n\nexport default class BraintreeCreditCardPaymentStrategy implements PaymentStrategy {\n    private _is3dsEnabled?: boolean;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _braintreePaymentProcessor: BraintreePaymentProcessor\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(options.methodId))\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n                if (!paymentMethod || !paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                this._braintreePaymentProcessor.initialize(paymentMethod.clientToken, options.braintree);\n                this._is3dsEnabled = paymentMethod.config.is3dsEnabled;\n\n                return this._store.getState();\n            })\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        return this._store.dispatch(\n            this._orderActionCreator.submitOrder(order, options)\n        )\n            .then(state =>\n                state.payment.isPaymentDataRequired(order.useStoreCredit) && payment ?\n                    this._preparePaymentData(payment) :\n                    Promise.resolve(payment as Payment)\n            )\n            .then(payment =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment(payment))\n            )\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._braintreePaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    private _handleError(error: Error): never {\n        if (error.name === 'BraintreeError') {\n            throw new StandardError(error.message);\n        }\n\n        throw error;\n    }\n\n    private _isUsingVaulting(paymentData: PaymentInstrument): boolean {\n        if (isCreditCardLike(paymentData)) {\n            return Boolean(paymentData.shouldSaveInstrument);\n        }\n\n        return isVaultedInstrument(paymentData);\n    }\n\n    private _preparePaymentData(payment: OrderPaymentRequestBody): Promise<Payment> {\n        const { paymentData } = payment;\n        const state = this._store.getState();\n\n        if (paymentData && this._isUsingVaulting(paymentData)) {\n            return Promise.resolve(payment as Payment);\n        }\n\n        const order = state.order.getOrder();\n        const billingAddress = state.billingAddress.getBillingAddress();\n\n        if (!order) {\n            throw new MissingDataError(MissingDataErrorType.MissingOrder);\n        }\n\n        if (!billingAddress) {\n            throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n        }\n\n        const tokenizedCard = this._is3dsEnabled ?\n            this._braintreePaymentProcessor.verifyCard(payment, billingAddress, order.orderAmount) :\n            this._braintreePaymentProcessor.tokenizeCard(payment, billingAddress);\n\n        return this._braintreePaymentProcessor.appendSessionId(tokenizedCard)\n            .then(paymentData => ({ ...payment, paymentData }));\n    }\n}\n","import isVaultedInstrument from './is-vaulted-instrument';\nimport { CreditCardInstrument, PaymentInstrument } from './payment';\n\nexport default function isCreditCardLike(instrument: PaymentInstrument): instrument is CreditCardInstrument {\n    const card = instrument as CreditCardInstrument;\n\n    return !isVaultedInstrument(card) &&\n        typeof card.ccName === 'string' &&\n        typeof card.ccNumber === 'string' &&\n        typeof card.ccExpiry === 'object' &&\n        typeof card.ccExpiry.month === 'string' &&\n        typeof card.ccExpiry.year === 'string';\n    }\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, StandardError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError, PaymentMethodCancelledError } from '../../errors';\nimport Payment from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { BraintreeError } from './braintree';\nimport BraintreePaymentProcessor from './braintree-payment-processor';\nimport isBraintreeError from './is-braintree-error';\n\nexport default class BraintreePaypalPaymentStrategy implements PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _braintreePaymentProcessor: BraintreePaymentProcessor,\n        private _credit: boolean = false\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { braintree: braintreeOptions, methodId } = options;\n\n        this._paymentMethod = this._store.getState().paymentMethods.getPaymentMethod(methodId);\n\n        if (this._paymentMethod && this._paymentMethod.nonce) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                this._braintreePaymentProcessor.initialize(this._paymentMethod.clientToken, braintreeOptions);\n\n                return this._braintreePaymentProcessor.preloadPaypal();\n            })\n            .then(() => this._store.getState())\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        return (payment ? this._preparePaymentData(payment, order.useStoreCredit) : Promise.resolve(payment))\n            .then(payment => Promise.all([payment, this._store.dispatch(this._orderActionCreator.submitOrder(order, options))]))\n            .then(([payment]) => this._store.dispatch(this._paymentActionCreator.submitPayment(payment)))\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(options: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._braintreePaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    private _handleError(error: BraintreeError | Error): never {\n        if (!isBraintreeError(error)) {\n            throw error;\n        }\n\n        if (error.code === 'PAYPAL_POPUP_CLOSED') {\n            throw new PaymentMethodCancelledError(error.message);\n        }\n\n        throw new StandardError(error.message);\n    }\n\n    private _preparePaymentData(payment: OrderPaymentRequestBody, useStoreCredit?: boolean): Promise<Payment> {\n        const state = this._store.getState();\n        const grandTotal = state.checkout.getGrandTotal(useStoreCredit);\n        const config = state.config.getStoreConfig();\n\n        if (!grandTotal) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!this._paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const { currency, storeProfile: { storeLanguage } } = config;\n        const { method, nonce } = this._paymentMethod;\n\n        if (nonce) {\n            return Promise.resolve({ ...payment, paymentData: { nonce, method } });\n        }\n\n        const tokenizedCard = this._braintreePaymentProcessor\n            .paypal(grandTotal, storeLanguage, currency.code, this._credit);\n\n        return this._braintreePaymentProcessor.appendSessionId(tokenizedCard)\n            .then(paymentData => ({ ...payment, paymentData: { ...paymentData, method } }));\n    }\n}\n","export enum ChasePayEventType {\n    StartCheckout = 'startCheckout',\n    CompleteCheckout = 'completeCheckout',\n    CancelCheckout = 'cancelCheckout',\n}\n\nexport interface ChasePayEventMap {\n    [ChasePayEventType.StartCheckout](digitalSessionId: string): void;\n    [ChasePayEventType.CompleteCheckout](payload: ChasePaySuccessPayload): void;\n    [ChasePayEventType.CancelCheckout](): void;\n}\n\nexport interface ChasePayHostWindow extends Window {\n    JPMC?: JPMC;\n}\n\nexport interface JPMC {\n    ChasePay: ChasePay;\n}\n\nexport interface ChasePaySuccessPayload {\n    sessionToken: string;\n}\n\nexport interface ChasePayInsertOptions {\n    color?: string;\n    containers?: string[];\n    height?: number;\n    width?: number;\n}\n\nexport interface ChasePayConfigureOptions {\n    language?: string;\n    zindex?: number;\n    sessionWarningTime?: number;\n    sessionTimeoutTime?: number;\n}\n\nexport interface ChasePay {\n    EventType: {\n        START_CHECKOUT: ChasePayEventType.StartCheckout;\n        COMPLETE_CHECKOUT: ChasePayEventType.CompleteCheckout;\n        CANCEL_CHECKOUT: ChasePayEventType.CancelCheckout;\n    };\n    isChasePayUp(): boolean;\n    insertButtons(options: ChasePayInsertOptions): void;\n    insertBrandings(options: ChasePayInsertOptions): void;\n    startCheckout(digitalSessionId?: string): void;\n    showLoadingAnimation(): void;\n    configure(options: ChasePayConfigureOptions): void;\n    on<ChasePayEventType extends keyof ChasePayEventMap>(eventType: ChasePayEventType, callback: ChasePayEventMap[ChasePayEventType]): {};\n}\n\nexport interface ChasePayInitializeOptions {\n    /**\n     * This container is used to host the chasepay branding logo.\n     * It should be an HTML element.\n     */\n    logoContainer: string;\n\n    /**\n     * This walletButton is used to set an event listener, provide an element ID if you want\n     * users to be able to launch the ChasePay wallet modal by clicking on a button.\n     * It should be an HTML element.\n     */\n    walletButton?: string;\n\n    /**\n     * A callback that gets called when the customer selects a payment option.\n     */\n    onPaymentSelect?(): void;\n}\n","import { BraintreeError } from './braintree';\n\nexport default function isBraintreeError(error: BraintreeError | Error): error is BraintreeError {\n    return error.name === 'BraintreeError';\n}\n","import { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, StandardError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategyActionCreator from '../../payment-strategy-action-creator';\nimport PaymentStrategy from '../payment-strategy';\n\nimport BraintreeVisaCheckoutPaymentProcessor from './braintree-visacheckout-payment-processor';\nimport { VisaCheckoutPaymentSuccessPayload } from './visacheckout';\nimport VisaCheckoutScriptLoader from './visacheckout-script-loader';\n\nexport default class BraintreeVisaCheckoutPaymentStrategy implements PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _braintreeVisaCheckoutPaymentProcessor: BraintreeVisaCheckoutPaymentProcessor,\n        private _visaCheckoutScriptLoader: VisaCheckoutScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { braintreevisacheckout: visaCheckoutOptions, methodId } = options;\n\n        if (!visaCheckoutOptions) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.braintreevisacheckout\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                const checkout = state.checkout.getCheckout();\n                const storeConfig = state.config.getStoreConfig();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const {\n                    onError = () => {},\n                    onPaymentSelect = () => {},\n                } = visaCheckoutOptions;\n\n                const initOptions = {\n                    locale: storeConfig.storeProfile.storeLanguage,\n                    collectShipping: false,\n                    subtotal: checkout.subtotal,\n                    currencyCode: storeConfig.currency.code,\n                };\n\n                return Promise.all([\n                    this._visaCheckoutScriptLoader.load(this._paymentMethod.config.testMode),\n                    this._braintreeVisaCheckoutPaymentProcessor.initialize(this._paymentMethod.clientToken, initOptions),\n                ])\n                .then(([visaCheckout, visaInitOptions]) => {\n                    visaCheckout.init(visaInitOptions);\n                    visaCheckout.on('payment.success', (paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) =>\n                        this._paymentInstrumentSelected(paymentSuccessPayload)\n                            .then(() => onPaymentSelect())\n                            .catch(error => onError(error))\n                    );\n                    visaCheckout.on('payment.error', (payment, error) => onError(error));\n                });\n            })\n            .then(() => this._store.getState());\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new InvalidArgumentError('Unable to submit payment because \"payload.payment\" argument is not provided.');\n        }\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData || !this._paymentMethod.initializationData.nonce) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { nonce } = this._paymentMethod.initializationData;\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData: { nonce } }))\n            )\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._braintreeVisaCheckoutPaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    private _paymentInstrumentSelected(paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) {\n        const state = this._store.getState();\n\n        if (!this._paymentMethod) {\n            throw new Error('Payment method not initialized');\n        }\n\n        const { id: methodId } = this._paymentMethod;\n\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            return this._braintreeVisaCheckoutPaymentProcessor.handleSuccess(\n                paymentSuccessPayload,\n                state.shippingAddress.getShippingAddress(),\n                state.billingAddress.getBillingAddress()\n            )\n            .then(() => Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId)),\n            ]));\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _handleError(error: Error): never {\n        if (error.name === 'BraintreeError') {\n            throw new StandardError(error.message);\n        }\n\n        throw error;\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { Subject } from 'rxjs';\nimport { take } from 'rxjs/operators';\n\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { toFormUrlEncoded } from '../../../common/http-request';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentMethodCancelledError } from '../../errors';\nimport Payment from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategyActionCreator from '../../payment-strategy-action-creator';\nimport PaymentStrategy from '../payment-strategy';\nimport { WepayRiskClient } from '../wepay';\n\nimport { ChasePay, ChasePayEventType, ChasePaySuccessPayload } from './chasepay';\nimport ChasePayInitializeOptions from './chasepay-initialize-options';\nimport ChasePayScriptLoader from './chasepay-script-loader';\n\nexport default class ChasePayPaymentStrategy implements PaymentStrategy {\n    private _chasePayClient?: ChasePay;\n    private _methodId!: string;\n    private _walletButton?: HTMLElement;\n    private _walletEvent$: Subject<{ type: ChasePayEventType }>;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _requestSender: RequestSender,\n        private _chasePayScriptLoader: ChasePayScriptLoader,\n        private _wepayRiskClient: WepayRiskClient\n    ) {\n        this._walletEvent$ = new Subject();\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._methodId = options.methodId;\n\n        if (!options.chasepay) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.chasepay\" argument is not provided.');\n        }\n\n        const walletButton = options.chasepay.walletButton && document.getElementById(options.chasepay.walletButton);\n\n        if (walletButton) {\n            this._walletButton = walletButton;\n            this._walletButton.addEventListener('click', this._handleWalletButtonClick);\n        }\n\n        return this._configureWallet(options.chasepay)\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._walletButton) {\n            this._walletButton.removeEventListener('click', this._handleWalletButtonClick);\n        }\n\n        this._walletButton = undefined;\n        this._chasePayClient = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._getPayment()\n            .catch(error => {\n                if (error.subtype === MissingDataErrorType.MissingPayment) {\n                    return this._displayWallet()\n                        .then(() => this._getPayment());\n                }\n\n                throw error;\n            })\n            .then(payment =>\n                this._createOrder(payment, payload.useStoreCredit, options)\n            );\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _configureWallet(options: ChasePayInitializeOptions): Promise<void> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n        const storeConfig = state.config.getStoreConfig();\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (!storeConfig) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        return this._chasePayScriptLoader.load(paymentMethod.config.testMode)\n            .then(({ ChasePay }) => {\n                this._chasePayClient = ChasePay;\n\n                if (options.logoContainer && document.getElementById(options.logoContainer)) {\n                    this._chasePayClient.insertBrandings({\n                        color: 'white',\n                        containers: [options.logoContainer],\n                    });\n                }\n\n                this._chasePayClient.configure({\n                    language: storeConfig.storeProfile.storeLanguage,\n                });\n\n                this._chasePayClient.on(ChasePayEventType.CancelCheckout, () => {\n                    this._walletEvent$.next({ type: ChasePayEventType.CancelCheckout });\n\n                    if (options.onCancel) {\n                        options.onCancel();\n                    }\n                });\n\n                this._chasePayClient.on(ChasePayEventType.CompleteCheckout, (payload: ChasePaySuccessPayload) => {\n                    this._setSessionToken(payload.sessionToken)\n                        .then(() => {\n                            this._walletEvent$.next({ type: ChasePayEventType.CompleteCheckout });\n\n                            if (options.onPaymentSelect) {\n                                options.onPaymentSelect();\n                            }\n                        });\n                });\n            });\n    }\n\n    private _displayWallet(): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(this._methodId))\n                .then(state => {\n                    const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n\n                    if (!this._chasePayClient) {\n                        throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                    }\n\n                    if (!paymentMethod) {\n                        throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                    }\n\n                    this._chasePayClient.showLoadingAnimation();\n                    this._chasePayClient.startCheckout(paymentMethod.initializationData.digitalSessionId);\n                });\n\n            // Wait for payment selection\n            return new Promise((resolve, reject) => {\n                this._walletEvent$\n                    .pipe(take(1))\n                    .subscribe((event: { type: ChasePayEventType }) => {\n                        if (event.type === ChasePayEventType.CancelCheckout) {\n                            reject(new PaymentMethodCancelledError());\n                        } else if (event.type === ChasePayEventType.CompleteCheckout) {\n                            resolve();\n                        }\n                    });\n            });\n        }, { methodId: this._methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _setSessionToken(sessionToken: string): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n        const merchantRequestId = paymentMethod && paymentMethod.initializationData.merchantRequestId;\n\n        return this._requestSender.post('checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\n            },\n            body: toFormUrlEncoded({\n                action: 'set_external_checkout',\n                provider: this._methodId,\n                sessionToken,\n                merchantRequestId,\n            }),\n        })\n            // Re-hydrate checkout data\n            .then(() => Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(this._methodId)),\n            ]))\n            .then(() => this._store.getState());\n    }\n\n    private _getPayment(): Promise<Payment> {\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(this._methodId))\n            .then(() => {\n                if (this._methodId === 'wepay') {\n                    return this._wepayRiskClient.initialize()\n                        .then(client => client.getRiskToken());\n                }\n\n                return '';\n            })\n            .then(riskToken => {\n                const state = this._store.getState();\n                const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n\n                if (!paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                if (!paymentMethod.initializationData.paymentCryptogram) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPayment);\n                }\n\n                const paymentData = {\n                    method: this._methodId,\n                    cryptogramId: paymentMethod.initializationData.paymentCryptogram,\n                    eci: paymentMethod.initializationData.eci,\n                    transactionId: btoa(paymentMethod.initializationData.reqTokenId),\n                    ccExpiry: {\n                        month: paymentMethod.initializationData.expDate.toString().substr(0, 2),\n                        year: paymentMethod.initializationData.expDate.toString().substr(2, 2),\n                    },\n                    ccNumber: paymentMethod.initializationData.accountNum,\n                    accountMask: paymentMethod.initializationData.accountMask,\n                    extraData: riskToken ? { riskToken } : undefined,\n                };\n\n                return {\n                    methodId: this._methodId,\n                    paymentData,\n                };\n            });\n    }\n\n    private _createOrder(payment: Payment, useStoreCredit?: boolean, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._orderActionCreator.submitOrder({ useStoreCredit }, options))\n            .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment(payment)));\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): void {\n        event.preventDefault();\n\n        this._displayWallet();\n    }\n}\n","export default interface SquarePaymentForm {\n    build(): void;\n    requestCardNonce(): void;\n    setPostalCode(postalCode: string): void;\n}\n\nexport interface SquarePaymentFormConstructor {\n    new(options: SquareFormOptions): SquarePaymentForm;\n}\n\nexport interface SquareFormOptions {\n    applicationId: string;\n    env: string;\n    locationId: string;\n    inputClass?: string;\n    inputStyles?: string[];\n    callbacks?: SquareFormCallbacks;\n    cardNumber: SquareFormElement;\n    cvv: SquareFormElement;\n    expirationDate: SquareFormElement;\n    postalCode: SquareFormElement;\n    masterpass: SquareFormElement;\n}\nexport interface LineItem {\n    label: string;\n    amount: string;\n    pending: boolean;\n}\n\nexport interface SquarePaymentRequest {\n    requestShippingAddress: boolean;\n    requestBillingInfo: boolean;\n    shippingContact?: Contact;\n    countryCode: string;\n    currencyCode: string;\n    lineItems?: LineItem[];\n    total: LineItem;\n}\n\nexport interface NonceGenerationError {\n    type: string;\n    message: string;\n    field: string;\n}\n\nexport interface CardData {\n    card_brand: CardBrand;\n    last_4: number;\n    exp_month: number;\n    exp_year: number;\n    billing_postal_code: string;\n    digital_wallet_type: DigitalWalletType;\n}\n\nexport interface Contact {\n    familyName: string;\n    givenName: string;\n    email: string;\n    country: string;\n    countryName: string;\n    region: string;\n    city: string;\n    addressLines: string[];\n    postalCode: string;\n    phone: string;\n}\n\nexport enum CardBrand {\n    americanExpress = 'AMERICAN_EXPRESS',\n    discover = 'DISCOVER',\n    discoverDiners = 'DISCOVER_DINERS',\n    JCB = 'JCB',\n    masterCard = 'MASTERCARD',\n    unionPay = 'CHINA_UNIONPAY',\n    unknown = 'OTHER_BRAND',\n    visa = 'VISA',\n    squareGift = 'SQUARE_GIFT_CARD',\n}\n\nexport enum DigitalWalletType {\n    applePay = 'APPLEPAY',\n    masterpass = 'MASTERPASS',\n    none = 'NONE',\n}\n\n/**\n * Configures any form element provided by Square payment.\n */\nexport interface SquareFormElement {\n    /**\n     * The ID of the container which the form element should insert into.\n     */\n    elementId: string;\n\n    /**\n     * The placeholder text to use for the form element, if provided.\n     */\n    placeholder?: string;\n}\n\nexport interface SquareFormCallbacks {\n    paymentFormLoaded?(form: SquarePaymentForm): void;\n    unsupportedBrowserDetected?(): void;\n    cardNonceResponseReceived?(\n        errors?: NonceGenerationError[],\n        nonce?: string,\n        cardData?: CardData,\n        billingContact?: Contact,\n        shippingContact?: Contact): void;\n    methodsSupported?(methods: { [key: string]: boolean }): void;\n    createPaymentRequest?(): void;\n}\n\nexport type SquareFormFactory = (options: SquareFormOptions) => SquarePaymentForm;\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { some } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { RequestError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class ConvergePaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _formPoster: FormPoster\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n            )\n            .catch(error => {\n                if (!(error instanceof RequestError) || !some(error.body.errors, { code: 'three_d_secure_required' })) {\n                    return Promise.reject(error);\n                }\n\n                return new Promise(() => {\n                    this._formPoster.postForm(error.body.three_ds_result.acs_url, {\n                        PaReq: error.body.three_ds_result.payer_auth_request,\n                        TermUrl: error.body.three_ds_result.callback_url,\n                        MD: error.body.three_ds_result.merchant_data,\n                    });\n                });\n            });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n\n        if (order && state.payment.getPaymentStatus() === paymentStatusTypes.FINALIZE) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\n\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class CreditCardPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n            );\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n} from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategyActionCreator from '../../payment-strategy-action-creator';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { GooglePaymentData, PaymentMethodData } from './googlepay';\nimport GooglePayPaymentInitializeOptions from './googlepay-initialize-options';\nimport GooglePayPaymentProcessor from './googlepay-payment-processor';\n\nexport default class GooglePayPaymentStrategy implements PaymentStrategy {\n    private _googlePayOptions?: GooglePayPaymentInitializeOptions;\n    private _methodId?: string;\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _googlePayPaymentProcessor: GooglePayPaymentProcessor\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._methodId = options.methodId;\n\n        return this._googlePayPaymentProcessor.initialize(this._methodId)\n            .then(() => {\n                this._googlePayOptions = this._getGooglePayOptions(options);\n\n                if (!this._googlePayOptions) {\n                    throw new InvalidArgumentError('Unable to initialize payment because \"options.googlepay\" argument is not provided.');\n                }\n\n                const walletButton = this._googlePayOptions.walletButton && document.getElementById(this._googlePayOptions.walletButton);\n\n                if (walletButton) {\n                    this._walletButton = walletButton;\n                    this._walletButton.addEventListener('click', this._handleWalletButtonClick);\n                }\n\n                return this._store.getState();\n            });\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._walletButton) {\n            this._walletButton.removeEventListener('click', this._handleWalletButtonClick);\n        }\n\n        this._walletButton = undefined;\n\n        return this._googlePayPaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!this._googlePayOptions) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.googlepay\" argument is not provided.');\n        }\n\n        const {\n            onError = () => {},\n            onPaymentSelect = () => {},\n        } = this._googlePayOptions;\n\n        return Promise.resolve(this._getPayment())\n            .then(payment => {\n                if (!payment.paymentData.nonce || !payment.paymentData.cardInformation) {\n                    // TODO: Find a way to share the code with _handleWalletButtonClick method\n                    return this._googlePayPaymentProcessor.displayWallet()\n                        .then(paymentData => this._paymentInstrumentSelected(paymentData))\n                        .then(() => onPaymentSelect())\n                        .then(() => this._getPayment())\n                        .catch(error => {\n                            if (error.statusCode !== 'CANCELED') {\n                                onError(error);\n                            }\n                        });\n                }\n\n                return payment;\n            })\n            .then(payment =>\n                this._store.dispatch(this._orderActionCreator.submitOrder({ useStoreCredit: payload.useStoreCredit }, options))\n                    .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment(this._getPayment())))\n            );\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _paymentInstrumentSelected(paymentData: GooglePaymentData) {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const methodId = this._methodId;\n\n        // TODO: Revisit how we deal with GooglePaymentData after receiving it from Google\n        return this._googlePayPaymentProcessor.handleSuccess(paymentData)\n            .then(() => Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId)),\n            ]));\n    }\n\n    private _getGooglePayOptions(options: PaymentInitializeOptions): GooglePayPaymentInitializeOptions {\n        if (options.methodId === 'googlepaybraintree' && options.googlepaybraintree) {\n            return options.googlepaybraintree;\n        }\n\n        if (options.methodId === 'googlepaystripe' && options.googlepaystripe) {\n            return options.googlepaystripe;\n        }\n\n        throw new InvalidArgumentError();\n    }\n\n    private _getPayment(): PaymentMethodData {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (!paymentMethod.initializationData.nonce) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        const paymentData = {\n            method: this._methodId,\n            nonce: paymentMethod.initializationData.nonce,\n            cardInformation: paymentMethod.initializationData.card_information,\n        };\n\n        return {\n            methodId: this._methodId,\n            paymentData,\n        };\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): Promise<InternalCheckoutSelectors> {\n        event.preventDefault();\n\n        if (!this._methodId || !this._googlePayOptions) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const methodId = this._methodId;\n\n        const {\n            onError = () => {},\n            onPaymentSelect = () => {},\n        } = this._googlePayOptions;\n\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            return this._googlePayPaymentProcessor.displayWallet()\n                .then(paymentData => this._paymentInstrumentSelected(paymentData))\n                .then(() => onPaymentSelect())\n                .catch(error => {\n                    if (error.statusCode !== 'CANCELED') {\n                        onError(error);\n                    }\n                });\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n}\n","import { includes } from 'lodash';\n\nimport { Address } from '../../../address';\nimport BillingAddress from '../../../billing/billing-address';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType\n} from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { PaymentMethodCancelledError } from '../../errors';\nimport PaymentMethodInvalidError from '../../errors/payment-method-invalid-error';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport KlarnaCredit, { KlarnaAddress, KlarnaLoadResponse, KlarnaUpdateSessionParams } from './klarna-credit';\nimport KlarnaScriptLoader from './klarna-script-loader';\n\nexport default class KlarnaPaymentStrategy implements PaymentStrategy {\n    private _klarnaCredit?: KlarnaCredit;\n    private _unsubscribe?: (() => void);\n    private _supportedEUCountries = ['AT', 'DE', 'DK', 'FI', 'GB', 'NL', 'NO', 'SE', 'CH'];\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _klarnaScriptLoader: KlarnaScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return this._klarnaScriptLoader.load()\n            .then(klarnaCredit => { this._klarnaCredit = klarnaCredit; })\n            .then(() => {\n                this._unsubscribe = this._store.subscribe(\n                    state => {\n                        if (state.paymentStrategies.isInitialized(options.methodId)) {\n                            this._loadWidget(options);\n                        }\n                    },\n                    state => {\n                        const checkout = state.checkout.getCheckout();\n\n                        return checkout && checkout.grandTotal;\n                    }\n                );\n\n                return this._loadWidget(options);\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._unsubscribe) {\n            this._unsubscribe();\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!payload.payment) {\n            throw new InvalidArgumentError('Unable to proceed because \"payload.payment\" argument is not provided.');\n        }\n\n        const { payment: { paymentData, ...paymentPayload } } = payload;\n\n        return this._authorize()\n            .then(({ authorization_token: authorizationToken }) => this._store.dispatch(\n                this._remoteCheckoutActionCreator.initializePayment(paymentPayload.methodId, { authorizationToken })\n            ))\n            .then(() => this._store.dispatch(\n                this._orderActionCreator.submitOrder({\n                    ...payload,\n                    payment: paymentPayload,\n                    // Note: API currently doesn't support using Store Credit with Klarna.\n                    // To prevent deducting customer's store credit, set it as false.\n                    useStoreCredit: false,\n                }, options)\n            ));\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _loadWidget(options: PaymentInitializeOptions): Promise<KlarnaLoadResponse> {\n        if (!options.klarna) {\n            throw new InvalidArgumentError('Unable to load widget because \"options.klarna\" argument is not provided.');\n        }\n\n        const { methodId, klarna: { container, onLoad } } = options;\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => new Promise<KlarnaLoadResponse>((resolve, reject) => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n                const billingAddress = state.billingAddress.getBillingAddress();\n                const shippingAddress = state.shippingAddress.getShippingAddress();\n\n                if (!paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                if (!billingAddress) {\n                    throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n                }\n\n                if (!this._klarnaCredit || !paymentMethod.clientToken) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n\n                const updateSessionData = this._getUpdateSessionData(billingAddress, shippingAddress);\n\n                this._klarnaCredit.init({ client_token: paymentMethod.clientToken });\n\n                this._klarnaCredit.load({ container }, updateSessionData, response => {\n                    if (onLoad) {\n                        onLoad(response);\n                    }\n\n                    if (!response.show_form) {\n                        reject(new PaymentMethodInvalidError());\n                    } else {\n                        resolve(response);\n                    }\n                });\n            }));\n    }\n\n    private _getUpdateSessionData(billingAddress: BillingAddress, shippingAddress?: Address): KlarnaUpdateSessionParams {\n        if (!includes(this._supportedEUCountries, billingAddress.countryCode)) {\n            return {};\n        }\n\n        const data: KlarnaUpdateSessionParams = {\n            billing_address: this._mapToKlarnaAddress(billingAddress, billingAddress.email),\n        };\n\n        if (shippingAddress) {\n            data.shipping_address = this._mapToKlarnaAddress(shippingAddress, billingAddress.email);\n        }\n\n        return data;\n    }\n\n    private _mapToKlarnaAddress(address: Address, email?: string): KlarnaAddress {\n        const klarnaAddress: KlarnaAddress = {\n            street_address: address.address1,\n            city: address.city,\n            country: address.countryCode,\n            given_name: address.firstName,\n            family_name: address.lastName,\n            postal_code: address.postalCode,\n            region: address.stateOrProvince,\n            email,\n        };\n\n        if (address.address2) {\n            klarnaAddress.street_address2 = address.address2;\n        }\n\n        if (address.phone) {\n            klarnaAddress.phone = address.phone;\n        }\n\n        return klarnaAddress;\n    }\n\n    private _authorize(): Promise<any> {\n        return new Promise((resolve, reject) => {\n            if (!this._klarnaCredit) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            this._klarnaCredit.authorize({}, res => {\n                if (res.approved) {\n                    return resolve(res);\n                }\n\n                if (res.show_form) {\n                    return reject(new PaymentMethodCancelledError());\n                }\n\n                reject(new PaymentMethodInvalidError());\n            });\n        });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport KlarnaCredit from './klarna-credit';\nimport KlarnaWindow from './klarna-window';\n\nconst SDK_URL = '//credit.klarnacdn.net/lib/v1/api.js';\n\nexport default class KlarnaScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    load(): Promise<KlarnaCredit> {\n        return this._scriptLoader.loadScript(SDK_URL)\n            .then(() => (window as KlarnaWindow).Klarna.Credit);\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\n\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class LegacyPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options));\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport getCallbackUrl from './get-callback-url';\nimport { Masterpass, MasterpassCheckoutOptions } from './masterpass';\nimport MasterpassScriptLoader from './masterpass-script-loader';\n\nexport default class MasterpassPaymentStrategy implements PaymentStrategy {\n    private _masterpassClient?: Masterpass;\n    private _paymentMethod?: PaymentMethod;\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _masterpassScriptLoader: MasterpassScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId } = options;\n\n        this._paymentMethod = this._store.getState().paymentMethods.getPaymentMethod(methodId);\n\n        if (!this._paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._masterpassScriptLoader.load(this._paymentMethod.config.testMode)\n            .then(masterpass => {\n                this._masterpassClient = masterpass;\n\n                if (!options.masterpass) {\n                    throw new InvalidArgumentError('Unable to initialize payment because \"options.masterpass\" argument is not provided.');\n                }\n\n                const walletButton  = options.masterpass.walletButton && document.getElementById(options.masterpass.walletButton);\n\n                if (walletButton) {\n                    this._walletButton = walletButton;\n                    this._walletButton.addEventListener('click', this._handleWalletButtonClick);\n                }\n\n                return this._store.getState();\n            });\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        if (this._walletButton) {\n            this._walletButton.removeEventListener('click', this._handleWalletButtonClick);\n        }\n\n        this._walletButton = undefined;\n        this._masterpassClient = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment } = payload;\n        const order = { useStoreCredit: payload.useStoreCredit };\n\n        if (!payment) {\n            throw new InvalidArgumentError('Unable to submit payment because \"payload.payment\" argument is not provided.');\n        }\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData || !this._paymentMethod.initializationData.gateway) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        // TODO: Refactor the API endpoint to return nonce in the right place.\n        const paymentData = this._paymentMethod.initializationData.paymentData;\n\n        // TODO: Redirect to Masterpass if nonce has not been generated yet. And then finalise the order when the shopper is redirected back to the checkout page.\n        if (!paymentData) {\n            throw new InvalidArgumentError('Unable to proceed because \"paymentMethod.initializationData.paymentData\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData })));\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _createMasterpassPayload(): MasterpassCheckoutOptions {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const storeConfig = state.config.getStoreConfig();\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!storeConfig) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return {\n            checkoutId: this._paymentMethod.initializationData.checkoutId,\n            allowedCardTypes: this._paymentMethod.initializationData.allowedCardTypes,\n            amount: checkout.subtotal.toFixed(2),\n            currency: storeConfig.currency.code,\n            cartId: checkout.cart.id,\n            suppressShippingAddress: false,\n            callbackUrl: getCallbackUrl('checkout'),\n        };\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event) {\n        event.preventDefault();\n\n        if (!this._masterpassClient) {\n            return;\n        }\n\n        const payload = this._createMasterpassPayload();\n        this._masterpassClient.checkout(payload);\n    }\n}\n","import { omit } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\n\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class NoPaymentDataRequiredPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._orderActionCreator.submitOrder(omit(orderRequest, 'payment'), options)\n        );\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\n\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class OfflinePaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const action = this._orderActionCreator.submitOrder({\n            ...payload,\n            payment: payload.payment ? { methodId: payload.payment.methodId } : undefined,\n        }, options);\n\n        return this._store.dispatch(action);\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\n\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class OffsitePaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const orderPayload = this._shouldSubmitFullPayload(payment) ? payload : order;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(orderPayload, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.initializeOffsitePayment(payment.methodId, payment.gatewayId))\n            );\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n        const status = state.payment.getPaymentStatus();\n\n        if (order && (status === paymentStatusTypes.ACKNOWLEDGE || status === paymentStatusTypes.FINALIZE)) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _shouldSubmitFullPayload(payment?: OrderPaymentRequestBody): boolean {\n        // FIXME: A temporary workaround to support offsite payment methods\n        // where their return URL needs to be provided by the core app.\n        if (!payment) {\n            return false;\n        }\n\n        return payment.gatewayId === 'adyen' || payment.methodId === 'ccavenuemars';\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\n\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class PaypalProPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._isPaymentAcknowledged()) {\n            return this._store.dispatch(\n                this._orderActionCreator.submitOrder({\n                    ...payload,\n                    payment: payload.payment ? { methodId: payload.payment.methodId } : undefined,\n                }, options)\n            );\n        }\n\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n            );\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _isPaymentAcknowledged(): boolean {\n        const state = this._store.getState();\n\n        return state.payment.getPaymentStatus() === paymentStatusTypes.ACKNOWLEDGE;\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentMethod from '../../payment-method';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\nimport PaymentStrategy from '../payment-strategy';\n\nimport PaypalScriptLoader from './paypal-script-loader';\nimport { PaypalHostWindow, PaypalSDK } from './paypal-sdk';\n\nexport default class PaypalExpressPaymentStrategy implements PaymentStrategy {\n    private _paypalSdk?: PaypalSDK;\n    private _paymentMethod?: PaymentMethod;\n    private _useRedirectFlow: boolean = false;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _scriptLoader: PaypalScriptLoader,\n        private _window: PaypalHostWindow = window\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n\n        this._paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n        this._useRedirectFlow = (options.paypalexpress && options.paypalexpress.useRedirectFlow) === true;\n\n        if (!this._isInContextEnabled()) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._scriptLoader.loadPaypal()\n            .then(paypal => {\n                this._paypalSdk = paypal;\n\n                if (!this._paymentMethod || !this._paymentMethod.config.merchantId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                this._paypalSdk.checkout.setup(this._paymentMethod.config.merchantId, {\n                    button: 'paypal-button',\n                    environment: this._paymentMethod.config.testMode ? 'sandbox' : 'production',\n                });\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._isInContextEnabled() && this._paypalSdk) {\n            this._paypalSdk.checkout.closeFlow();\n            this._paypalSdk = undefined;\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const paypal = this._paypalSdk;\n\n        if (this._isAcknowledgedOrFinalized()) {\n            return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options));\n        }\n\n        if (!this._isInContextEnabled() || this._useRedirectFlow) {\n            return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options))\n                .then(state => {\n                    const redirectUrl = state.payment.getPaymentRedirectUrl();\n\n                    if (redirectUrl) {\n                        this._window.top.location.href = redirectUrl;\n                    }\n\n                    // We need to hold execution so the consumer does not redirect us somewhere else\n                    return new Promise<never>(() => {});\n                });\n        }\n\n        if (!paypal) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        paypal.checkout.initXO();\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options))\n            .then(state => {\n                const redirectUrl = state.payment.getPaymentRedirectUrl();\n\n                if (redirectUrl) {\n                    paypal.checkout.startFlow(redirectUrl);\n                }\n\n                // We need to hold execution so the consumer does not redirect us somewhere else\n                return new Promise<never>(() => {});\n            })\n            .catch(error => {\n                paypal.checkout.closeFlow();\n\n                return Promise.reject(error);\n            });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n\n        if (order && this._isAcknowledgedOrFinalized()) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _isAcknowledgedOrFinalized(): boolean {\n        const state = this._store.getState();\n\n        return state.payment.getPaymentStatus() === paymentStatusTypes.ACKNOWLEDGE\n            || state.payment.getPaymentStatus() === paymentStatusTypes.FINALIZE;\n    }\n\n    private _isInContextEnabled(): boolean {\n        return !!(this._paymentMethod && this._paymentMethod.config.merchantId);\n    }\n}\n","import { some } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { RequestError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\n\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class SagePayPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _formPoster: any\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n            )\n            .catch(error => {\n                if (!(error instanceof RequestError) || !some(error.body.errors, { code: 'three_d_secure_required' })) {\n                    return Promise.reject(error);\n                }\n\n                return new Promise(() => {\n                    this._formPoster.postForm(error.body.three_ds_result.acs_url, {\n                        PaReq: error.body.three_ds_result.payer_auth_request,\n                        TermUrl: error.body.three_ds_result.callback_url,\n                        MD: error.body.three_ds_result.merchant_data,\n                    });\n                });\n            });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n\n        if (order && state.payment.getPaymentStatus() === paymentStatusTypes.FINALIZE) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import StandardError from './standard-error';\n\nexport default class UnsupportedBrowserError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Unsupported browser error');\n\n        this.type = 'unsupported_browser';\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\nimport { omit } from 'lodash';\nimport { noop } from 'rxjs';\n\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    StandardError,\n    TimeoutError,\n    UnsupportedBrowserError,\n} from '../../../common/error/errors';\nimport { toFormUrlEncoded } from '../../../common/http-request';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { NonceInstrument } from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategyActionCreator from '../../payment-strategy-action-creator';\nimport PaymentStrategy from '../payment-strategy';\n\nimport SquarePaymentForm, {\n    CardData,\n    Contact,\n    DigitalWalletType,\n    NonceGenerationError,\n    SquareFormElement,\n    SquareFormOptions,\n    SquarePaymentRequest\n} from './square-form';\nimport SquarePaymentInitializeOptions from './square-payment-initialize-options';\nimport SquareScriptLoader from './square-script-loader';\n\nexport default class SquarePaymentStrategy implements PaymentStrategy {\n    private _deferredRequestNonce?: DeferredPromise;\n    private _paymentForm?: SquarePaymentForm;\n    private _paymentMethod?: PaymentMethod;\n    private _squareOptions?: SquarePaymentInitializeOptions;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _requestSender: RequestSender,\n        private _scriptLoader: SquareScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId } = options;\n\n        this._syncPaymentMethod(methodId);\n\n        return this._scriptLoader.load()\n            .then(createSquareForm =>\n                new Promise((resolve, reject) => {\n                    this._paymentForm = createSquareForm(\n                        this._getFormOptions(options, { resolve, reject })\n                    );\n                    this._paymentForm.build();\n                }))\n            .then(() => this._store.getState());\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment } = orderRequest;\n\n        if (!payment || !payment.methodId) {\n            throw new InvalidArgumentError('Unable to submit payment because \"payload.payment.methodId\" argument is not provided.');\n        }\n\n        this._syncPaymentMethod(payment.methodId);\n\n        return this._getNonceInstrument(payment.methodId)\n            .then(paymentData =>\n                this._store.dispatch(this._orderActionCreator.submitOrder(omit(orderRequest, 'payment'), options))\n                .then(() =>\n                    this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n                ));\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _syncPaymentMethod(methodId: string): void {\n        const state = this._store.getState();\n        this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n    }\n\n    private _getCountryCode(countryName: string) {\n        switch (countryName.toUpperCase()) {\n            case 'NEW ZELAND':\n                return 'NZ';\n            case 'AUSTRALIA':\n                return 'AU';\n            default:\n                return 'US';\n        }\n    }\n\n    private _getNonceInstrument(methodId: string): Promise<NonceInstrument> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n        if (paymentMethod) {\n            const { initializationData } = paymentMethod;\n            if (initializationData && initializationData.paymentData.nonce) {\n                return Promise.resolve({ nonce: paymentMethod.initializationData.paymentData.nonce });\n            }\n        }\n\n        return new Promise<NonceInstrument>((resolve, reject) => {\n            if (!this._paymentForm) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            if (this._deferredRequestNonce) {\n                this._deferredRequestNonce.reject(new TimeoutError());\n            }\n\n            this._deferredRequestNonce = { resolve, reject };\n            this._paymentForm.requestCardNonce();\n        });\n    }\n\n    private _getFormOptions(options: PaymentInitializeOptions, deferred: DeferredPromise): SquareFormOptions {\n        const { square: squareOptions } = options;\n\n        if (!squareOptions || !this._paymentMethod) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.square\" argument is not provided.');\n        }\n\n        this._squareOptions = squareOptions;\n\n        return {\n            ...this._squareOptions,\n            ...this._paymentMethod.initializationData,\n            callbacks: {\n                cardNonceResponseReceived: (errors, nonce, cardData, billingContact, shippingContact) => {\n                    if (cardData && cardData.digital_wallet_type !== DigitalWalletType.none) {\n                        this._handleWalletNonceResponse(errors, nonce, cardData, billingContact, shippingContact);\n                    } else {\n                        this._handleCardNonceResponse(errors, nonce);\n                    }\n                },\n                createPaymentRequest: () => this._paymentRequestPayload(),\n                methodsSupported: methods => {\n                    const { masterpass } = squareOptions;\n\n                    if (masterpass) {\n                        this._showPaymentMethods(methods, masterpass);\n                    }\n                },\n                paymentFormLoaded: () => {\n                    deferred.resolve();\n                    this._setPostalCode();\n                },\n                unsupportedBrowserDetected: () => deferred.reject(new UnsupportedBrowserError()),\n            },\n        };\n    }\n\n    private _handleWalletNonceResponse(\n        errors?: NonceGenerationError[],\n        nonce?: string,\n        cardData?: CardData,\n        billingContact?: Contact,\n        shippingContact?: Contact\n    ): void {\n        const onError = this._squareOptions && this._squareOptions.onError || noop;\n        const onPaymentSelect = this._squareOptions && this._squareOptions.onPaymentSelect || noop;\n\n        if (errors) {\n            onError(errors);\n        } else if (nonce && this._paymentMethod) {\n            this._paymentInstrumentSelected(\n                this._paymentMethod.id,\n                nonce,\n                cardData,\n                billingContact,\n                shippingContact\n            )\n                .then(onPaymentSelect)\n                .catch(onError);\n        }\n    }\n\n    private _handleCardNonceResponse(errors?: NonceGenerationError[], nonce?: string): void {\n        if (!this._deferredRequestNonce) {\n            throw new StandardError();\n        }\n\n        if (nonce && !errors) {\n            this._deferredRequestNonce.resolve({ nonce });\n\n            return;\n        }\n\n        const onError = this._squareOptions && this._squareOptions.onError || noop;\n\n        onError(errors);\n\n        this._deferredRequestNonce.reject(errors);\n    }\n\n    private _paymentInstrumentSelected(\n        methodId: string,\n        nonce?: string,\n        cardData?: CardData,\n        billingContact?: Contact,\n        shippingContact?: Contact): Promise<InternalCheckoutSelectors> {\n\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            return this._setExternalCheckoutData(nonce, cardData, billingContact, shippingContact)\n            .then(() =>\n                Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId)),\n            ]));\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _paymentRequestPayload(): SquarePaymentRequest {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const storeConfig = state.config.getStoreConfig();\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!storeConfig) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        return {\n            requestShippingAddress: true,\n            requestBillingInfo: true,\n            currencyCode: storeConfig.currency.code,\n            countryCode: this._getCountryCode(storeConfig.storeProfile.storeCountry),\n            total: {\n                label: storeConfig.storeProfile.storeName,\n                amount: String(checkout.subtotal),\n                pending: false,\n            },\n        };\n    }\n\n    private _setExternalCheckoutData(nonce?: string, cardData?: CardData, billingContact?: Contact, shippingContact?: Contact): Promise<Response<any>> {\n        return this._requestSender.post('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: toFormUrlEncoded({\n                nonce,\n                provider: 'squarev2',\n                action: 'set_external_checkout',\n                cardData: JSON.stringify(cardData),\n                billingContact: JSON.stringify(billingContact),\n                shippingContact: JSON.stringify(shippingContact),\n            }),\n        });\n    }\n\n    private _setPostalCode(): void {\n        const state = this._store.getState();\n        const billingAddress = state.billingAddress.getBillingAddress();\n\n        if (!this._paymentForm) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (billingAddress && billingAddress.postalCode) {\n            this._paymentForm.setPostalCode(billingAddress.postalCode);\n        }\n    }\n\n    private _showPaymentMethods(methods: { [key: string]: boolean }, element: SquareFormElement): void {\n        const masterpassBtn = document.getElementById(element.elementId);\n\n        if (masterpassBtn && methods.masterpass) {\n            masterpassBtn.style.display = 'inline-block';\n        }\n    }\n}\n\nexport interface DeferredPromise {\n    resolve(resolution?: NonceInstrument): void;\n    reject(reason?: any): void;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { SquareFormFactory, SquareFormOptions } from './square-form';\nimport SquareWindow from './square-window';\n\nexport default class SquareScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    load(): Promise<SquareFormFactory> {\n        const scriptURI = '//js.squareup.com/v2/paymentform';\n\n        return this._scriptLoader.loadScript(scriptURI)\n            .then(() => (options: SquareFormOptions) =>\n                new (window as SquareWindow).SqPaymentForm(options)\n            );\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\n\nimport WepayRisk from './wepay-risk';\nimport WepayWindow from './wepay-window';\n\nconst SCRIPT_SRC = '//static.wepay.com/min/js/risk.1.latest.js';\n\nexport default class WepayRiskClient {\n    private _riskClient?: WepayRisk;\n\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    initialize(): Promise<WepayRiskClient> {\n        return this._scriptLoader\n            .loadScript(SCRIPT_SRC)\n            .then(() => this._riskClient = (window as WepayWindow).WePay.risk)\n            .then(() => this);\n    }\n\n    getRiskToken(): string {\n        if (!this._riskClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        this._riskClient.generate_risk_token();\n\n        return this._riskClient.get_risk_token();\n    }\n}\n","import { merge } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport CreditCardPaymentStrategy from '../credit-card/credit-card-payment-strategy';\n\nimport WepayRiskClient from './wepay-risk-client';\n\nexport default class WepayPaymentStrategy extends CreditCardPaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        orderActionCreator: OrderActionCreator,\n        paymentActionCreator: PaymentActionCreator,\n        private _wepayRiskClient: WepayRiskClient\n    ) {\n        super(store, orderActionCreator, paymentActionCreator);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._wepayRiskClient.initialize();\n\n        return super.initialize(options);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const token = this._wepayRiskClient.getRiskToken();\n        const payloadWithToken = merge({}, payload, {\n            payment: {\n                paymentData: {\n                    deviceSessionId: token,\n                },\n            },\n        });\n\n        return super.execute(payloadWithToken, options);\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n} from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentMethodCancelledError } from '../../errors';\nimport PaymentMethodInvalidError from '../../errors/payment-method-invalid-error';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { Zip, ZipModalEvent } from './zip';\nimport ZipScriptLoader from './zip-script-loader';\n\nexport default class ZipPaymentStrategy implements PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _zipClient?: Zip;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _zipScriptLoader: ZipScriptLoader\n    ) { }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return this._zipScriptLoader.load()\n            .then(zip => {\n                this._zipClient = zip;\n\n                return this._store.getState();\n            });\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n        this._zipClient = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const { _zipClient: zipClient } = this;\n\n        if (!payment) {\n            throw new InvalidArgumentError('Unable to submit payment because \"payload.payment\" argument is not provided.');\n        }\n\n        if (!zipClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(payment.methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(payment.methodId);\n\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n            })\n            .then(()  => {\n                return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n                    .then(() => new Promise<string>((resolve, reject) => {\n                        zipClient.Checkout.init({\n                            onComplete: ({ checkoutId, state }) => {\n                                if (state === ZipModalEvent.CancelCheckout) {\n                                    return reject(new PaymentMethodCancelledError());\n                                }\n\n                                if (state === ZipModalEvent.CheckoutApproved && checkoutId) {\n                                    return resolve(checkoutId);\n                                }\n\n                                reject(new PaymentMethodInvalidError());\n                            },\n                            onCheckout: openModal => {\n                                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                                }\n\n                                openModal(JSON.parse(this._paymentMethod.clientToken));\n                            },\n                        });\n                    })\n                    .then(nonce =>\n                        this._store.dispatch(this._paymentActionCreator.submitPayment({\n                            methodId: payment.methodId,\n                            paymentData: { nonce },\n                        }))\n                    ));\n            });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { Zip, ZipHostWindow } from '../zip/zip';\n\nexport default class ZipScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        public _window: ZipHostWindow = window\n    ) {}\n\n    load(): Promise<Zip> {\n        return this._scriptLoader\n            .loadScript(`//static.zipmoney.com.au/checkout/checkout-v1.min.js`)\n            .then(() => {\n                if (!this._window.Zip) {\n                    throw new StandardError();\n                }\n\n                return this._window.Zip;\n            });\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../billing';\nimport { CheckoutActionCreator, CheckoutRequestSender, CheckoutStore, CheckoutValidator } from '../checkout';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { OrderActionCreator, OrderRequestSender } from '../order';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../remote-checkout';\n\nimport PaymentActionCreator from './payment-action-creator';\nimport PaymentMethodActionCreator from './payment-method-action-creator';\nimport PaymentMethodRequestSender from './payment-method-request-sender';\nimport PaymentRequestSender from './payment-request-sender';\nimport PaymentStrategyActionCreator from './payment-strategy-action-creator';\nimport PaymentStrategyRegistry from './payment-strategy-registry';\nimport PaymentStrategyType from './payment-strategy-type';\nimport { AffirmPaymentStrategy, AffirmScriptLoader } from './strategies/affirm';\nimport { AfterpayPaymentStrategy, AfterpayScriptLoader } from './strategies/afterpay';\nimport { AmazonPayPaymentStrategy, AmazonPayScriptLoader } from './strategies/amazon-pay';\nimport {\n    createBraintreePaymentProcessor,\n    createBraintreeVisaCheckoutPaymentProcessor,\n    BraintreeCreditCardPaymentStrategy,\n    BraintreePaypalPaymentStrategy,\n    BraintreeScriptLoader,\n    BraintreeSDKCreator,\n    BraintreeVisaCheckoutPaymentStrategy,\n    VisaCheckoutScriptLoader\n} from './strategies/braintree';\nimport { ChasePayPaymentStrategy, ChasePayScriptLoader } from './strategies/chasepay';\nimport { ConvergePaymentStrategy } from './strategies/converge';\nimport { CreditCardPaymentStrategy } from './strategies/credit-card';\nimport {\n    createGooglePayPaymentProcessor,\n    GooglePayBraintreeInitializer,\n    GooglePayPaymentStrategy,\n    GooglePayStripeInitializer\n} from './strategies/googlepay';\nimport { KlarnaPaymentStrategy, KlarnaScriptLoader } from './strategies/klarna';\nimport { LegacyPaymentStrategy } from './strategies/legacy';\nimport { MasterpassPaymentStrategy, MasterpassScriptLoader } from './strategies/masterpass';\nimport { NoPaymentDataRequiredPaymentStrategy } from './strategies/no-payment';\nimport { OfflinePaymentStrategy } from './strategies/offline';\nimport { OffsitePaymentStrategy } from './strategies/offsite';\nimport { PaypalExpressPaymentStrategy, PaypalProPaymentStrategy, PaypalScriptLoader } from './strategies/paypal';\nimport { SagePayPaymentStrategy } from './strategies/sage-pay';\nimport { SquarePaymentStrategy, SquareScriptLoader } from './strategies/square';\nimport { WepayPaymentStrategy, WepayRiskClient } from './strategies/wepay';\nimport { ZipPaymentStrategy, ZipScriptLoader } from './strategies/zip';\n\nexport default function createPaymentStrategyRegistry(\n    store: CheckoutStore,\n    paymentClient: any,\n    requestSender: RequestSender\n) {\n    const registry = new PaymentStrategyRegistry(store, { defaultToken: PaymentStrategyType.CREDIT_CARD });\n    const scriptLoader = getScriptLoader();\n    const billingAddressActionCreator = new BillingAddressActionCreator(new BillingAddressRequestSender(requestSender));\n    const braintreePaymentProcessor = createBraintreePaymentProcessor(scriptLoader);\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const checkoutValidator = new CheckoutValidator(checkoutRequestSender);\n    const orderActionCreator = new OrderActionCreator(new OrderRequestSender(requestSender), checkoutValidator);\n    const paymentActionCreator = new PaymentActionCreator(new PaymentRequestSender(paymentClient), orderActionCreator);\n    const paymentMethodActionCreator = new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender));\n    const remoteCheckoutActionCreator = new RemoteCheckoutActionCreator(new RemoteCheckoutRequestSender(requestSender));\n    const configActionCreator = new ConfigActionCreator(new ConfigRequestSender(requestSender));\n    const checkoutActionCreator = new CheckoutActionCreator(checkoutRequestSender, configActionCreator);\n    const paymentStrategyActionCreator = new PaymentStrategyActionCreator(registry, orderActionCreator);\n    const formPoster = createFormPoster();\n\n    registry.register(PaymentStrategyType.AFFIRM, () =>\n        new AffirmPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            new AffirmScriptLoader()\n        )\n    );\n\n    registry.register(PaymentStrategyType.AFTERPAY, () =>\n        new AfterpayPaymentStrategy(\n            store,\n            checkoutValidator,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new AfterpayScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.AMAZON, () =>\n        new AmazonPayPaymentStrategy(\n            store,\n            orderActionCreator,\n            billingAddressActionCreator,\n            remoteCheckoutActionCreator,\n            new AmazonPayScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.CREDIT_CARD, () =>\n        new CreditCardPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.KLARNA, () =>\n        new KlarnaPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new KlarnaScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.LEGACY, () =>\n        new LegacyPaymentStrategy(\n            store,\n            orderActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.OFFLINE, () =>\n        new OfflinePaymentStrategy(\n            store,\n            orderActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.OFFSITE, () =>\n        new OffsitePaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.PAYPAL, () =>\n        new PaypalProPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.PAYPAL_EXPRESS, () =>\n        new PaypalExpressPaymentStrategy(\n            store,\n            orderActionCreator,\n            new PaypalScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.PAYPAL_EXPRESS_CREDIT, () =>\n        new PaypalExpressPaymentStrategy(\n            store,\n            orderActionCreator,\n            new PaypalScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.SAGE_PAY, () =>\n        new SagePayPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            formPoster\n        )\n    );\n\n    registry.register(PaymentStrategyType.SQUARE, () =>\n        new SquarePaymentStrategy(\n            store,\n            checkoutActionCreator,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            requestSender,\n            new SquareScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.NO_PAYMENT_DATA_REQUIRED, () =>\n        new NoPaymentDataRequiredPaymentStrategy(\n            store,\n            orderActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.BRAINTREE, () =>\n        new BraintreeCreditCardPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            braintreePaymentProcessor\n        )\n    );\n\n    registry.register(PaymentStrategyType.BRAINTREE_PAYPAL, () =>\n        new BraintreePaypalPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            braintreePaymentProcessor\n        )\n    );\n\n    registry.register(PaymentStrategyType.BRAINTREE_PAYPAL_CREDIT, () =>\n        new BraintreePaypalPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            braintreePaymentProcessor,\n            true\n        )\n    );\n\n    registry.register(PaymentStrategyType.BRAINTREE_VISA_CHECKOUT, () =>\n        new BraintreeVisaCheckoutPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            paymentActionCreator,\n            orderActionCreator,\n            createBraintreeVisaCheckoutPaymentProcessor(scriptLoader, requestSender),\n            new VisaCheckoutScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.CHASE_PAY, () =>\n        new ChasePayPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            requestSender,\n            new ChasePayScriptLoader(scriptLoader),\n            new WepayRiskClient(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.BRAINTREE_GOOGLE_PAY, () =>\n        new GooglePayPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            paymentActionCreator,\n            orderActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayBraintreeInitializer(\n                    new BraintreeSDKCreator(\n                        new BraintreeScriptLoader(scriptLoader)\n                    )\n                )\n            )\n        )\n    );\n\n    registry.register(PaymentStrategyType.WE_PAY, () =>\n        new WepayPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            new WepayRiskClient(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.MASTERPASS, () =>\n        new MasterpassPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            new MasterpassScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.STRIPE_GOOGLE_PAY, () =>\n        new GooglePayPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            paymentActionCreator,\n            orderActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayStripeInitializer()\n            )\n        )\n    );\n\n    registry.register(PaymentStrategyType.ZIP, () =>\n        new ZipPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            new ZipScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.CONVERGE, () =>\n        new ConvergePaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            formPoster\n        )\n    );\n\n    return registry;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { Overlay } from '../../../common/overlay';\n\nimport BraintreePaymentProcessor from './braintree-payment-processor';\nimport BraintreeScriptLoader from './braintree-script-loader';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\n\nexport default function createBraintreePaymentProcessor(scriptLoader: ScriptLoader) {\n    const braintreeScriptLoader = new BraintreeScriptLoader(scriptLoader);\n    const braintreeSDKCreator = new BraintreeSDKCreator(braintreeScriptLoader);\n    const overlay = new Overlay();\n\n    return new BraintreePaymentProcessor(braintreeSDKCreator, overlay);\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { Address } from '../../address';\nimport { InternalCheckoutSelectors, ReadableCheckoutStore } from '../../checkout';\nimport { addMinutes, isFuture } from '../../common/date-time';\nimport { MissingDataError, MissingDataErrorType } from '../../common/error/errors';\n\nimport { SessionContext, VaultAccessToken } from './instrument';\nimport { DeleteInstrumentAction, InstrumentActionType, LoadInstrumentsAction } from './instrument-actions';\nimport InstrumentRequestSender from './instrument-request-sender';\n\nexport default class InstrumentActionCreator {\n    constructor(\n        private _instrumentRequestSender: InstrumentRequestSender\n    ) {}\n\n    loadInstruments(): ThunkAction<LoadInstrumentsAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<LoadInstrumentsAction>) => {\n            observer.next(createAction(InstrumentActionType.LoadInstrumentsRequested));\n\n            const session = this._getSessionContext(store);\n            const token = this._getCurrentAccessToken(store);\n            const shippingAddress = this._getShippingAddress(store);\n\n            return this._getValidAccessToken(token)\n                .then(currentToken =>\n                    this._instrumentRequestSender.loadInstruments({\n                            ...session,\n                            authToken: currentToken.vaultAccessToken,\n                        },\n                        shippingAddress\n                    )\n                        .then(({ body }) => {\n                            observer.next(createAction(\n                                InstrumentActionType.LoadInstrumentsSucceeded,\n                                body,\n                                currentToken\n                            ));\n                            observer.complete();\n                        })\n                )\n                .catch(response => {\n                    observer.error(createErrorAction(InstrumentActionType.LoadInstrumentsFailed, response));\n                });\n        });\n    }\n\n    deleteInstrument(instrumentId: string): ThunkAction<DeleteInstrumentAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<DeleteInstrumentAction>) => {\n            observer.next(createAction(InstrumentActionType.DeleteInstrumentRequested, undefined, { instrumentId }));\n\n            const session = this._getSessionContext(store);\n            const token = this._getCurrentAccessToken(store);\n\n            return this._getValidAccessToken(token)\n                .then(currentToken =>\n                    this._instrumentRequestSender.deleteInstrument({\n                        ...session,\n                        authToken: currentToken.vaultAccessToken,\n                    }, instrumentId)\n                        .then(({ body }) => {\n                            observer.next(createAction(InstrumentActionType.DeleteInstrumentSucceeded, body, {\n                                instrumentId,\n                                ...currentToken,\n                            }));\n                            observer.complete();\n                        })\n                )\n                .catch(response => {\n                    observer.error(createErrorAction(InstrumentActionType.DeleteInstrumentFailed, response, { instrumentId }));\n                });\n        });\n    }\n\n    private _isValidVaultAccessToken(token: VaultAccessToken): boolean {\n        if (!token || !token.vaultAccessToken) {\n            return false;\n        }\n\n        const expiryBuffer = 2;\n        const expiry = addMinutes(new Date(token.vaultAccessExpiry), expiryBuffer);\n\n        return isFuture(expiry);\n    }\n\n    private _getCurrentAccessToken(store: ReadableCheckoutStore): VaultAccessToken | undefined {\n        const { instruments } = store.getState();\n        const meta = instruments.getInstrumentsMeta();\n\n        if (!meta) {\n            return;\n        }\n\n        return {\n            vaultAccessToken: meta.vaultAccessToken,\n            vaultAccessExpiry: meta.vaultAccessExpiry,\n        };\n    }\n\n    private _getValidAccessToken(token?: VaultAccessToken): Promise<VaultAccessToken> {\n        return token && this._isValidVaultAccessToken(token) ?\n            Promise.resolve(token) :\n            this._instrumentRequestSender.getVaultAccessToken().then(({ body }) => body);\n    }\n\n    private _getShippingAddress(store: ReadableCheckoutStore): Address | undefined {\n        const state = store.getState();\n\n        return state.shippingAddress.getShippingAddress();\n    }\n\n    private _getSessionContext(store: ReadableCheckoutStore): SessionContext {\n        const state = store.getState();\n        const config = state.config.getStoreConfig();\n        const cart = state.cart.getCart();\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        const { customerId } = cart;\n        const { storeId } = config.storeProfile;\n\n        return {\n            customerId,\n            storeId,\n        };\n    }\n}\n","export default function addMinutes(date: Date, amount: number): Date {\n    const newDate = new Date(date.getTime());\n\n    newDate.setMinutes(date.getMinutes() + amount);\n\n    return newDate;\n}\n","export default function isFuture(date: Date): boolean {\n    return date.valueOf() > Date.now();\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport PaymentResponse from '../payment-response';\n\nimport Instrument, { VaultAccessToken } from './instrument';\nimport {\n    InstrumentsResponseBody,\n    InstrumentErrorResponseBody,\n    InternalInstrument,\n    InternalInstrumentsResponseBody,\n    InternalInstrumentErrorResponseBody,\n    InternalVaultAccessTokenResponseBody,\n} from './instrument-response-body';\n\nexport default class InstrumentResponseTransformer {\n    transformResponse(\n        response: PaymentResponse<InternalInstrumentsResponseBody>\n    ): Response<InstrumentsResponseBody> {\n        const { body, ...payload } = this._transformResponse(response);\n\n        return {\n            ...payload,\n            body: {\n                vaultedInstruments: this._transformVaultedInstruments(body.vaulted_instruments),\n            },\n        };\n    }\n\n    transformErrorResponse(\n        response: PaymentResponse<InternalInstrumentErrorResponseBody>\n    ): Response<InstrumentErrorResponseBody> {\n        return this._transformResponse(response);\n    }\n\n    transformVaultAccessResponse(\n        response: Response<InternalVaultAccessTokenResponseBody>\n    ): Response<VaultAccessToken> {\n        return {\n            ...response,\n            body: {\n                vaultAccessToken: response.body.data.token,\n                vaultAccessExpiry: response.body.data.expires_at,\n            },\n        };\n    }\n\n    private _transformVaultedInstruments(vaultedInstruments: InternalInstrument[] = []): Instrument[] {\n        return vaultedInstruments.map(instrument => ({\n            bigpayToken: instrument.bigpay_token,\n            defaultInstrument: instrument.default_instrument,\n            provider: instrument.provider,\n            iin: instrument.iin,\n            last4: instrument.last_4,\n            expiryMonth: instrument.expiry_month,\n            expiryYear: instrument.expiry_year,\n            brand: instrument.brand,\n            trustedShippingAddress: instrument.trusted_shipping_address,\n        }));\n    }\n\n    private _transformResponse<T>(response: PaymentResponse<T>): Response<T> {\n        const { data: body, ...payload } = response;\n\n        return {\n            ...payload,\n            body,\n        };\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { mapToInternalAddress, Address } from '../../address';\nimport { RequestOptions } from '../../common/http-request';\nimport PaymentResponse from '../payment-response';\n\nimport { InstrumentRequestContext, VaultAccessToken } from './instrument';\nimport {\n    InstrumentsResponseBody,\n    InternalInstrumentsResponseBody,\n    InternalInstrumentErrorResponseBody,\n} from './instrument-response-body';\nimport InstrumentResponseTransformer from './instrument-response-transformer';\n\nexport default class InstrumentRequestSender {\n    private _transformer: InstrumentResponseTransformer;\n\n    constructor(\n        private _client: any,\n        private _requestSender: RequestSender\n    ) {\n        this._transformer = new InstrumentResponseTransformer();\n    }\n\n    getVaultAccessToken(\n        { timeout }: RequestOptions = {}\n    ): Promise<Response<VaultAccessToken>> {\n        const url = '/internalapi/v1/checkout/payments/vault-access-token';\n\n        return this._requestSender.get(url, { timeout }).then(response => ({\n            ...response,\n            body: {\n                vaultAccessToken: response.body.data.token,\n                vaultAccessExpiry: response.body.data.expires_at,\n            },\n        }));\n    }\n\n    loadInstruments(\n        requestContext: InstrumentRequestContext,\n        shippingAddress?: Address\n    ): Promise<Response<InstrumentsResponseBody>> {\n        return (shippingAddress) ?\n            this._loadInstrumentsWithAddress(requestContext, shippingAddress) :\n            this._loadInstruments(requestContext);\n    }\n\n    deleteInstrument(\n        requestContext: InstrumentRequestContext,\n        instrumentId: string\n    ): Promise<Response<InstrumentsResponseBody>> {\n        const payload = {\n            ...requestContext,\n            instrumentId,\n        };\n\n        return new Promise((resolve, reject) => {\n            this._client.deleteShopperInstrument(\n                payload, (\n                    errorResponse: PaymentResponse<InternalInstrumentErrorResponseBody>,\n                    response: PaymentResponse<InternalInstrumentsResponseBody>\n                ) =>  errorResponse ?\n                    reject(this._transformer.transformErrorResponse(errorResponse)) :\n                    resolve(this._transformer.transformResponse(response))\n            );\n        });\n    }\n\n    private _loadInstruments(\n        requestContext: InstrumentRequestContext\n    ): Promise<Response<InstrumentsResponseBody>> {\n        return new Promise((resolve, reject) => {\n            this._client.loadInstruments(\n                requestContext, (\n                    errorResponse: PaymentResponse<InternalInstrumentErrorResponseBody>,\n                    response: PaymentResponse<InternalInstrumentsResponseBody>\n                ) => errorResponse ?\n                    reject(this._transformer.transformErrorResponse(errorResponse)) :\n                    resolve(this._transformer.transformResponse(response))\n            );\n        });\n    }\n\n    private _loadInstrumentsWithAddress(\n        requestContext: InstrumentRequestContext,\n        shippingAddress: Address\n    ): Promise<Response<InstrumentsResponseBody>> {\n        const payload = {\n            ...requestContext,\n            shippingAddress: mapToInternalAddress(shippingAddress),\n        };\n\n        return new Promise((resolve, reject) => {\n            this._client.loadInstrumentsWithAddress(\n                payload, (\n                    errorResponse: PaymentResponse<InternalInstrumentErrorResponseBody>,\n                    response: PaymentResponse<InternalInstrumentsResponseBody>\n                ) => errorResponse ?\n                    reject(this._transformer.transformErrorResponse(errorResponse)) :\n                    resolve(this._transformer.transformResponse(response))\n            );\n        });\n    }\n}\n","import { Address } from '../address';\nimport { BillingAddress, BillingAddressSelector } from '../billing';\nimport { Cart, CartSelector } from '../cart';\nimport { selector } from '../common/selector';\nimport { ConfigSelector } from '../config';\nimport { StoreConfig } from '../config/config';\nimport { Coupon, CouponSelector, GiftCertificate, GiftCertificateSelector } from '../coupon';\nimport { Customer, CustomerSelector } from '../customer';\nimport { FormField, FormSelector } from '../form';\nimport { Country, CountrySelector } from '../geography';\nimport { Order, OrderSelector } from '../order';\nimport { PaymentMethod, PaymentMethodSelector, PaymentSelector } from '../payment';\nimport { Instrument, InstrumentSelector } from '../payment/instrument';\nimport {\n    Consignment,\n    ConsignmentSelector,\n    ShippingAddressSelector,\n    ShippingCountrySelector,\n    ShippingOption,\n} from '../shipping';\n\nimport Checkout from './checkout';\nimport CheckoutSelector from './checkout-selector';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for getting the state of the current checkout.\n *\n * This object has a set of methods that allow you to get a specific piece of\n * checkout information, such as shipping and billing details.\n */\n@selector\nexport default class CheckoutStoreSelector {\n    private _billingAddress: BillingAddressSelector;\n    private _cart: CartSelector;\n    private _checkout: CheckoutSelector;\n    private _config: ConfigSelector;\n    private _consignments: ConsignmentSelector;\n    private _countries: CountrySelector;\n    private _coupons: CouponSelector;\n    private _customer: CustomerSelector;\n    private _form: FormSelector;\n    private _giftCertificates: GiftCertificateSelector;\n    private _instruments: InstrumentSelector;\n    private _order: OrderSelector;\n    private _payment: PaymentSelector;\n    private _paymentMethods: PaymentMethodSelector;\n    private _shippingAddress: ShippingAddressSelector;\n    private _shippingCountries: ShippingCountrySelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._billingAddress = selectors.billingAddress;\n        this._cart = selectors.cart;\n        this._checkout = selectors.checkout;\n        this._config = selectors.config;\n        this._consignments = selectors.consignments;\n        this._countries = selectors.countries;\n        this._coupons = selectors.coupons;\n        this._customer = selectors.customer;\n        this._form = selectors.form;\n        this._giftCertificates = selectors.giftCertificates;\n        this._instruments = selectors.instruments;\n        this._order = selectors.order;\n        this._payment = selectors.payment;\n        this._paymentMethods = selectors.paymentMethods;\n        this._shippingAddress = selectors.shippingAddress;\n        this._shippingCountries = selectors.shippingCountries;\n    }\n\n    /**\n     * Gets the current checkout.\n     *\n     * @returns The current checkout if it is loaded, otherwise undefined.\n     */\n    getCheckout(): Checkout | undefined {\n        return this._checkout.getCheckout();\n    }\n\n    /**\n     * Gets the current order.\n     *\n     * @returns The current order if it is loaded, otherwise undefined.\n     */\n    getOrder(): Order | undefined {\n        return this._order.getOrder();\n    }\n\n    /**\n     * Gets the checkout configuration of a store.\n     *\n     * @returns The configuration object if it is loaded, otherwise undefined.\n     */\n    getConfig(): StoreConfig | undefined {\n        return this._config.getStoreConfig();\n    }\n\n    /**\n     * Gets the shipping address of the current checkout.\n     *\n     * If the address is partially complete, it may not have shipping options\n     * associated with it.\n     *\n     * @returns The shipping address object if it is loaded, otherwise\n     * undefined.\n     */\n    getShippingAddress(): Address | undefined {\n        const shippingAddress = this._shippingAddress.getShippingAddress();\n        const context = this._config.getContextConfig();\n\n        if (!shippingAddress) {\n            if (!context || !context.geoCountryCode) {\n                return;\n            }\n\n            return {\n                firstName: '',\n                lastName: '',\n                company: '',\n                address1: '',\n                address2: '',\n                city: '',\n                stateOrProvince: '',\n                stateOrProvinceCode: '',\n                postalCode: '',\n                country: '',\n                phone: '',\n                customFields: [],\n                countryCode: context.geoCountryCode,\n            };\n        }\n\n        return shippingAddress;\n    }\n\n    /**\n     * Gets a list of shipping options available for the shipping address.\n     *\n     * If there is no shipping address assigned to the current checkout, the\n     * list of shipping options will be empty.\n     *\n     * @returns The list of shipping options if any, otherwise undefined.\n     */\n    getShippingOptions(): ShippingOption[] | undefined {\n        const consignments = this._consignments.getConsignments();\n\n        if (consignments && consignments.length) {\n            return consignments[0].availableShippingOptions;\n        }\n\n        return;\n    }\n\n    /**\n     * Gets a list of consignments.\n     *\n     * If there are no consignments created for to the current checkout, the\n     * list will be empty.\n     *\n     * @returns The list of consignments if any, otherwise undefined.\n     */\n    getConsignments(): Consignment[] | undefined {\n        return this._consignments.getConsignments();\n    }\n\n    /**\n     * Gets the selected shipping option for the current checkout.\n     *\n     * @returns The shipping option object if there is a selected option,\n     * otherwise undefined.\n     */\n    getSelectedShippingOption(): ShippingOption | undefined {\n        const consignments = this._consignments.getConsignments();\n\n        if (!consignments || !consignments.length) {\n            return;\n        }\n\n        return consignments[0].selectedShippingOption;\n    }\n\n    /**\n     * Gets a list of countries available for shipping.\n     *\n     * @returns The list of countries if it is loaded, otherwise undefined.\n     */\n    getShippingCountries(): Country[] | undefined {\n        return this._shippingCountries.getShippingCountries();\n    }\n\n    /**\n     * Gets the billing address of an order.\n     *\n     * @returns The billing address object if it is loaded, otherwise undefined.\n     */\n    getBillingAddress(): BillingAddress | undefined {\n        return this._billingAddress.getBillingAddress();\n    }\n\n    /**\n     * Gets a list of countries available for billing.\n     *\n     * @returns The list of countries if it is loaded, otherwise undefined.\n     */\n    getBillingCountries(): Country[] | undefined {\n        return this._countries.getCountries();\n    }\n\n    /**\n     * Gets a list of payment methods available for checkout.\n     *\n     * @returns The list of payment methods if it is loaded, otherwise undefined.\n     */\n    getPaymentMethods(): PaymentMethod[] | undefined {\n        return this._paymentMethods.getPaymentMethods();\n    }\n\n    /**\n     * Gets a payment method by an id.\n     *\n     * The method returns undefined if unable to find a payment method with the\n     * specified id, either because it is not available for the customer, or it\n     * is not loaded.\n     *\n     * @param methodId - The identifier of the payment method.\n     * @param gatewayId - The identifier of a payment provider providing the\n     * payment method.\n     * @returns The payment method object if loaded and available, otherwise,\n     * undefined.\n     */\n    getPaymentMethod(methodId: string, gatewayId?: string): PaymentMethod | undefined {\n        return this._paymentMethods.getPaymentMethod(methodId, gatewayId);\n    }\n\n    /**\n     * Gets the payment method that is selected for checkout.\n     *\n     * @returns The payment method object if there is a selected method;\n     * undefined if otherwise.\n     */\n    getSelectedPaymentMethod(): PaymentMethod | undefined {\n        const payment = this._payment.getPaymentId();\n\n        return payment && this._paymentMethods.getPaymentMethod(payment.providerId, payment.gatewayId);\n    }\n\n    /**\n     * Gets the current cart.\n     *\n     * @returns The current cart object if it is loaded, otherwise undefined.\n     */\n    getCart(): Cart | undefined {\n        return this._cart.getCart();\n    }\n\n    /**\n     * Gets a list of coupons that are applied to the current checkout.\n     *\n     * @returns The list of applied coupons if there is any, otherwise undefined.\n     */\n    getCoupons(): Coupon[] | undefined {\n        return this._coupons.getCoupons();\n    }\n\n    /**\n     * Gets a list of gift certificates that are applied to the current checkout.\n     *\n     * @returns The list of applied gift certificates if there is any, otherwise undefined.\n     */\n    getGiftCertificates(): GiftCertificate[] | undefined {\n        return this._giftCertificates.getGiftCertificates();\n    }\n\n    /**\n     * Gets the current customer.\n     *\n     * @returns The current customer object if it is loaded, otherwise\n     * undefined.\n     */\n    getCustomer(): Customer | undefined {\n        return this._customer.getCustomer();\n    }\n\n    /**\n     * Checks if payment data is required or not.\n     *\n     * If payment data is required, customers should be prompted to enter their\n     * payment details.\n     *\n     * ```js\n     * if (state.checkout.isPaymentDataRequired()) {\n     *     // Render payment form\n     * } else {\n     *     // Render \"Payment is not required for this order\" message\n     * }\n     * ```\n     *\n     * @param useStoreCredit - If true, check whether payment data is required\n     * with store credit applied; otherwise, check without store credit.\n     * @returns True if payment data is required, otherwise false.\n     */\n    isPaymentDataRequired(useStoreCredit?: boolean): boolean {\n        return this._payment.isPaymentDataRequired(useStoreCredit);\n    }\n\n    /**\n     * Checks if payment data is submitted or not.\n     *\n     * If payment data is already submitted using a payment method, customers\n     * should not be prompted to enter their payment details again.\n     *\n     * @param methodId - The identifier of the payment method.\n     * @param gatewayId - The identifier of a payment provider providing the\n     * payment method.\n     * @returns True if payment data is submitted, otherwise false.\n     */\n    isPaymentDataSubmitted(methodId: string, gatewayId?: string): boolean {\n        return this._payment.isPaymentDataSubmitted(this.getPaymentMethod(methodId, gatewayId));\n    }\n\n    /**\n     * Gets a list of payment instruments associated with the current customer.\n     *\n     * @returns The list of payment instruments if it is loaded, otherwise undefined.\n     */\n    getInstruments(): Instrument[] | undefined {\n        return this._instruments.getInstruments();\n    }\n\n    /**\n     * Gets a set of form fields that should be presented to customers in order\n     * to capture their billing address for a specific country.\n     *\n     * @param countryCode - A 2-letter country code (ISO 3166-1 alpha-2).\n     * @returns The set of billing address form fields if it is loaded,\n     * otherwise undefined.\n     */\n    getBillingAddressFields(countryCode: string): FormField[] {\n        return this._form.getBillingAddressFields(this.getBillingCountries(), countryCode);\n    }\n\n    /**\n     * Gets a set of form fields that should be presented to customers in order\n     * to capture their shipping address for a specific country.\n     *\n     * @param countryCode - A 2-letter country code (ISO 3166-1 alpha-2).\n     * @returns The set of shipping address form fields if it is loaded,\n     * otherwise undefined.\n     */\n    getShippingAddressFields(countryCode: string): FormField[] {\n        return this._form.getShippingAddressFields(this.getShippingCountries(), countryCode);\n    }\n}\n","import { BillingAddressSelector } from '../billing';\nimport { CartSelector } from '../cart';\nimport { RequestError } from '../common/error/errors';\nimport { selector } from '../common/selector';\nimport { ConfigSelector } from '../config';\nimport { CouponSelector, GiftCertificateSelector } from '../coupon';\nimport { CustomerStrategySelector } from '../customer';\nimport { CountrySelector } from '../geography';\nimport { OrderSelector } from '../order';\nimport { PaymentMethodSelector, PaymentStrategySelector } from '../payment';\nimport { InstrumentSelector } from '../payment/instrument';\nimport { ConsignmentSelector, ShippingCountrySelector, ShippingStrategySelector } from '../shipping';\n\nimport CheckoutSelector from './checkout-selector';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for getting the error of any asynchronous checkout action, if\n * there is any.\n *\n * This object has a set of getters that would return an error if an action is\n * not executed successfully. For example, if you are unable to submit an order,\n * you can use this object to retrieve the reason for the failure.\n */\n@selector\nexport default class CheckoutStoreErrorSelector {\n    private _billingAddress: BillingAddressSelector;\n    private _cart: CartSelector;\n    private _checkout: CheckoutSelector;\n    private _config: ConfigSelector;\n    private _consignments: ConsignmentSelector;\n    private _countries: CountrySelector;\n    private _coupons: CouponSelector;\n    private _customerStrategies: CustomerStrategySelector;\n    private _giftCertificates: GiftCertificateSelector;\n    private _instruments: InstrumentSelector;\n    private _order: OrderSelector;\n    private _paymentMethods: PaymentMethodSelector;\n    private _paymentStrategies: PaymentStrategySelector;\n    private _shippingCountries: ShippingCountrySelector;\n    private _shippingStrategies: ShippingStrategySelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._billingAddress = selectors.billingAddress;\n        this._cart = selectors.cart;\n        this._checkout = selectors.checkout;\n        this._config = selectors.config;\n        this._consignments = selectors.consignments;\n        this._countries = selectors.countries;\n        this._coupons = selectors.coupons;\n        this._customerStrategies = selectors.customerStrategies;\n        this._giftCertificates = selectors.giftCertificates;\n        this._instruments = selectors.instruments;\n        this._order = selectors.order;\n        this._paymentMethods = selectors.paymentMethods;\n        this._paymentStrategies = selectors.paymentStrategies;\n        this._shippingCountries = selectors.shippingCountries;\n        this._shippingStrategies = selectors.shippingStrategies;\n    }\n\n    /**\n     * Gets the error of any checkout action that has failed.\n     *\n     * @returns The error object if unable to perform any checkout action,\n     * otherwise undefined.\n     */\n    getError(): Error | undefined {\n        // tslint:disable-next-line:cyclomatic-complexity\n        return this.getLoadCheckoutError() ||\n            this.getSubmitOrderError() ||\n            this.getFinalizeOrderError() ||\n            this.getLoadOrderError() ||\n            this.getLoadCartError() ||\n            this.getLoadBillingCountriesError() ||\n            this.getLoadShippingCountriesError() ||\n            this.getLoadPaymentMethodsError() ||\n            this.getLoadPaymentMethodError() ||\n            this.getInitializePaymentError() ||\n            this.getLoadShippingOptionsError() ||\n            this.getSelectShippingOptionError() ||\n            this.getSignInError() ||\n            this.getSignOutError() ||\n            this.getInitializeCustomerError() ||\n            this.getUpdateShippingAddressError() ||\n            this.getUpdateBillingAddressError() ||\n            this.getContinueAsGuestError() ||\n            this.getUpdateConsignmentError() ||\n            this.getCreateConsignmentsError() ||\n            this.getDeleteConsignmentError() ||\n            this.getInitializeShippingError() ||\n            this.getApplyCouponError() ||\n            this.getRemoveCouponError() ||\n            this.getApplyGiftCertificateError() ||\n            this.getRemoveGiftCertificateError() ||\n            this.getLoadInstrumentsError() ||\n            this.getDeleteInstrumentError() ||\n            this.getLoadConfigError();\n    }\n\n    /**\n     * Returns an error if unable to load the current checkout.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadCheckoutError(): Error | undefined {\n        return this._checkout.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to update the current checkout.\n     *\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateCheckoutError(): Error | undefined {\n        return this._checkout.getUpdateError();\n    }\n\n    /**\n     * Returns an error if unable to submit the current order.\n     *\n     * @returns The error object if unable to submit, otherwise undefined.\n     */\n    getSubmitOrderError(): Error | undefined {\n        return this._paymentStrategies.getExecuteError();\n    }\n\n    /**\n     * Returns an error if unable to finalize the current order.\n     *\n     * @returns The error object if unable to finalize, otherwise undefined.\n     */\n    getFinalizeOrderError(): Error | undefined {\n        return this._paymentStrategies.getFinalizeError();\n    }\n\n    /**\n     * Returns an error if unable to load the current order.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadOrderError(): Error | undefined {\n        return this._order.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to load the current cart.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadCartError(): Error | undefined {\n        return this._cart.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to load billing countries.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadBillingCountriesError(): Error | undefined {\n        return this._countries.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to load shipping countries.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadShippingCountriesError(): Error | undefined {\n        return this._shippingCountries.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to load payment methods.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadPaymentMethodsError(): Error | undefined {\n        return this._paymentMethods.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to load a specific payment method.\n     *\n     * @param methodId - The identifier of the payment method to load.\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadPaymentMethodError(methodId?: string): Error | undefined {\n        return this._paymentMethods.getLoadMethodError(methodId);\n    }\n\n    /**\n     * Returns an error if unable to initialize a specific payment method.\n     *\n     * @param methodId - The identifier of the payment method to initialize.\n     * @returns The error object if unable to initialize, otherwise undefined.\n     */\n    getInitializePaymentError(methodId?: string): Error | undefined {\n        return this._paymentStrategies.getInitializeError(methodId);\n    }\n\n    /**\n     * Returns an error if unable to sign in.\n     *\n     * @returns The error object if unable to sign in, otherwise undefined.\n     */\n    getSignInError(): Error | undefined {\n        return this._customerStrategies.getSignInError();\n    }\n\n    /**\n     * Returns an error if unable to sign out.\n     *\n     * @returns The error object if unable to sign out, otherwise undefined.\n     */\n    getSignOutError(): Error | undefined {\n        return this._customerStrategies.getSignOutError();\n    }\n\n    /**\n     * Returns an error if unable to initialize the customer step of a checkout\n     * process.\n     *\n     * @param methodId - The identifer of the initialization method to execute.\n     * @returns The error object if unable to initialize, otherwise undefined.\n     */\n    getInitializeCustomerError(methodId?: string): Error | undefined {\n        return this._customerStrategies.getInitializeError(methodId);\n    }\n\n    /**\n     * Returns an error if unable to load shipping options.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadShippingOptionsError(): Error | undefined {\n        return this._consignments.getLoadShippingOptionsError();\n    }\n\n    /**\n     * Returns an error if unable to select a shipping option.\n     *\n     * A consignment ID should be provided when checking for an error for a\n     * specific consignment, otherwise it will check for all available consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns The error object if unable to select, otherwise undefined.\n     */\n    getSelectShippingOptionError(consignmentId?: string): Error | undefined {\n        return this._shippingStrategies.getSelectOptionError() ||\n            this._consignments.getUpdateShippingOptionError(consignmentId);\n    }\n\n    /**\n     * Returns an error if unable to continue as guest.\n     *\n     * @returns The error object if unable to continue, otherwise undefined.\n     */\n    getContinueAsGuestError(): Error | undefined {\n        return this._billingAddress.getContinueAsGuestError();\n    }\n\n    /**\n     * Returns an error if unable to update billing address.\n     *\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateBillingAddressError(): Error | undefined {\n        return this._billingAddress.getUpdateError();\n    }\n\n    /**\n     * Returns an error if unable to update shipping address.\n     *\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateShippingAddressError(): Error | undefined {\n        return this._shippingStrategies.getUpdateAddressError();\n    }\n\n    /**\n     * Returns an error if unable to delete a consignment.\n     *\n     * A consignment ID should be provided when checking for an error for a\n     * specific consignment, otherwise it will check for all available consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns The error object if unable to delete, otherwise undefined.\n     */\n    getDeleteConsignmentError(consignmentId?: string): Error | undefined {\n        return this._consignments.getDeleteError(consignmentId);\n    }\n\n    /**\n     * Returns an error if unable to update a consignment.\n     *\n     * A consignment ID should be provided when checking for an error for a\n     * specific consignment, otherwise it will check for all available consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateConsignmentError(consignmentId?: string): Error | undefined {\n        return this._consignments.getUpdateError(consignmentId);\n    }\n\n    /**\n     * Returns an error if unable to create consignments.\n     *\n     * @returns The error object if unable to create, otherwise undefined.\n     */\n    getCreateConsignmentsError(): Error | undefined {\n        return this._consignments.getCreateError();\n    }\n\n    /**\n     * Returns an error if unable to initialize the shipping step of a checkout\n     * process.\n     *\n     * @param methodId - The identifer of the initialization method to execute.\n     * @returns The error object if unable to initialize, otherwise undefined.\n     */\n    getInitializeShippingError(methodId?: string): Error | undefined {\n        return this._shippingStrategies.getInitializeError(methodId);\n    }\n\n    /**\n     * Returns an error if unable to apply a coupon code.\n     *\n     * @returns The error object if unable to apply, otherwise undefined.\n     */\n    getApplyCouponError(): RequestError | undefined {\n        return this._coupons.getApplyError();\n    }\n\n    /**\n     * Returns an error if unable to remove a coupon code.\n     *\n     * @returns The error object if unable to remove, otherwise undefined.\n     */\n    getRemoveCouponError(): RequestError | undefined {\n        return this._coupons.getRemoveError();\n    }\n\n    /**\n     * Returns an error if unable to apply a gift certificate.\n     *\n     * @returns The error object if unable to apply, otherwise undefined.\n     */\n    getApplyGiftCertificateError(): RequestError | undefined {\n        return this._giftCertificates.getApplyError();\n    }\n\n    /**\n     * Returns an error if unable to remove a gift certificate.\n     *\n     * @returns The error object if unable to remove, otherwise undefined.\n     */\n    getRemoveGiftCertificateError(): RequestError | undefined {\n        return this._giftCertificates.getRemoveError();\n    }\n\n    /**\n     * Returns an error if unable to load payment instruments.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadInstrumentsError(): Error | undefined {\n        return this._instruments.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to delete a payment instrument.\n     *\n     * @param instrumentId - The identifier of the payment instrument to delete.\n     * @returns The error object if unable to delete, otherwise undefined.\n     */\n    getDeleteInstrumentError(instrumentId?: string): Error | undefined {\n        return this._instruments.getDeleteError(instrumentId);\n    }\n\n    /**\n     * Returns an error if unable to load the checkout configuration of a store.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadConfigError(): Error | undefined {\n        return this._config.getLoadError();\n    }\n}\n","import { BillingAddressSelector } from '../billing';\nimport { CartSelector } from '../cart';\nimport { selector } from '../common/selector';\nimport { ConfigSelector } from '../config';\nimport { CouponSelector, GiftCertificateSelector } from '../coupon';\nimport { CustomerStrategySelector } from '../customer';\nimport { CountrySelector } from '../geography';\nimport { OrderSelector } from '../order';\nimport { PaymentMethodSelector, PaymentStrategySelector } from '../payment';\nimport { InstrumentSelector } from '../payment/instrument';\nimport { ConsignmentSelector, ShippingCountrySelector, ShippingStrategySelector } from '../shipping';\n\nimport CheckoutSelector from './checkout-selector';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for checking the statuses of various asynchronous actions related\n * to checkout.\n *\n * This object has a set of getters that return true if an action is in\n * progress. For example, you can check whether a customer is submitting an\n * order and waiting for the request to complete.\n */\n@selector\nexport default class CheckoutStoreStatusSelector {\n    private _billingAddress: BillingAddressSelector;\n    private _cart: CartSelector;\n    private _checkout: CheckoutSelector;\n    private _config: ConfigSelector;\n    private _consignments: ConsignmentSelector;\n    private _countries: CountrySelector;\n    private _coupons: CouponSelector;\n    private _customerStrategies: CustomerStrategySelector;\n    private _giftCertificates: GiftCertificateSelector;\n    private _instruments: InstrumentSelector;\n    private _order: OrderSelector;\n    private _paymentMethods: PaymentMethodSelector;\n    private _paymentStrategies: PaymentStrategySelector;\n    private _shippingCountries: ShippingCountrySelector;\n    private _shippingStrategies: ShippingStrategySelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._billingAddress = selectors.billingAddress;\n        this._cart = selectors.cart;\n        this._checkout = selectors.checkout;\n        this._config = selectors.config;\n        this._consignments = selectors.consignments;\n        this._countries = selectors.countries;\n        this._coupons = selectors.coupons;\n        this._customerStrategies = selectors.customerStrategies;\n        this._giftCertificates = selectors.giftCertificates;\n        this._instruments = selectors.instruments;\n        this._order = selectors.order;\n        this._paymentMethods = selectors.paymentMethods;\n        this._paymentStrategies = selectors.paymentStrategies;\n        this._shippingCountries = selectors.shippingCountries;\n        this._shippingStrategies = selectors.shippingStrategies;\n    }\n\n    /**\n     * Checks whether any checkout action is pending.\n     *\n     * @returns True if there is a pending action, otherwise false.\n     */\n    isPending(): boolean {\n        // tslint:disable-next-line:cyclomatic-complexity\n        return this.isLoadingCheckout() ||\n            this.isSubmittingOrder() ||\n            this.isFinalizingOrder() ||\n            this.isLoadingOrder() ||\n            this.isLoadingCart() ||\n            this.isLoadingBillingCountries() ||\n            this.isLoadingShippingCountries() ||\n            this.isLoadingPaymentMethods() ||\n            this.isLoadingPaymentMethod() ||\n            this.isInitializingPayment() ||\n            this.isLoadingShippingOptions() ||\n            this.isSelectingShippingOption() ||\n            this.isSigningIn() ||\n            this.isSigningOut() ||\n            this.isInitializingCustomer() ||\n            this.isUpdatingBillingAddress() ||\n            this.isContinuingAsGuest() ||\n            this.isUpdatingShippingAddress() ||\n            this.isUpdatingConsignment() ||\n            this.isCreatingConsignments() ||\n            this.isDeletingConsignment() ||\n            this.isInitializingShipping() ||\n            this.isApplyingCoupon() ||\n            this.isRemovingCoupon() ||\n            this.isApplyingGiftCertificate() ||\n            this.isRemovingGiftCertificate() ||\n            this.isLoadingInstruments() ||\n            this.isDeletingInstrument() ||\n            this.isLoadingConfig() ||\n            this.isCustomerStepPending() ||\n            this.isPaymentStepPending();\n    }\n\n    /**\n     * Checks whether the current checkout is loading.\n     *\n     * @returns True if the current checkout is loading, otherwise false.\n     */\n    isLoadingCheckout(): boolean {\n        return this._checkout.isLoading();\n    }\n\n    /**\n     * Checks whether the current checkout is being updated.\n     *\n     * @returns True if the current checkout is being updated, otherwise false.\n     */\n    isUpdatingCheckout(): boolean {\n        return this._checkout.isUpdating();\n    }\n\n    /**\n     * Checks whether the current order is submitting.\n     *\n     * @returns True if the current order is submitting, otherwise false.\n     */\n    isSubmittingOrder(): boolean {\n        return this._paymentStrategies.isExecuting();\n    }\n\n    /**\n     * Checks whether the current order is finalizing.\n     *\n     * @returns True if the current order is finalizing, otherwise false.\n     */\n    isFinalizingOrder(): boolean {\n        return this._paymentStrategies.isFinalizing();\n    }\n\n    /**\n     * Checks whether the current order is loading.\n     *\n     * @returns True if the current order is loading, otherwise false.\n     */\n    isLoadingOrder(): boolean {\n        return this._order.isLoading();\n    }\n\n    /**\n     * Checks whether the current cart is loading.\n     *\n     * @returns True if the current cart is loading, otherwise false.\n     */\n    isLoadingCart(): boolean {\n        return this._cart.isLoading();\n    }\n\n    /**\n     * Checks whether billing countries are loading.\n     *\n     * @returns True if billing countries are loading, otherwise false.\n     */\n    isLoadingBillingCountries(): boolean {\n        return this._countries.isLoading();\n    }\n\n    /**\n     * Checks whether shipping countries are loading.\n     *\n     * @returns True if shipping countries are loading, otherwise false.\n     */\n    isLoadingShippingCountries(): boolean {\n        return this._shippingCountries.isLoading();\n    }\n\n    /**\n     * Checks whether payment methods are loading.\n     *\n     * @returns True if payment methods are loading, otherwise false.\n     */\n    isLoadingPaymentMethods(): boolean {\n        return this._paymentMethods.isLoading();\n    }\n\n    /**\n     * Checks whether a specific or any payment method is loading.\n     *\n     * The method returns true if no ID is provided and at least one payment\n     * method is loading.\n     *\n     * @param methodId - The identifier of the payment method to check.\n     * @returns True if the payment method is loading, otherwise false.\n     */\n    isLoadingPaymentMethod(methodId?: string): boolean {\n        return this._paymentMethods.isLoadingMethod(methodId);\n    }\n\n    /**\n     * Checks whether a specific or any payment method is initializing.\n     *\n     * The method returns true if no ID is provided and at least one payment\n     * method is initializing.\n     *\n     * @param methodId - The identifier of the payment method to check.\n     * @returns True if the payment method is initializing, otherwise false.\n     */\n    isInitializingPayment(methodId?: string): boolean {\n        return this._paymentStrategies.isInitializing(methodId);\n    }\n\n    /**\n     * Checks whether the current customer is signing in.\n     *\n     * If an ID is provided, the method also checks whether the customer is\n     * signing in using a specific customer method with the same ID.\n     *\n     * @param methodId - The identifier of the method used for signing in the\n     * current customer.\n     * @returns True if the customer is signing in, otherwise false.\n     */\n    isSigningIn(methodId?: string): boolean {\n        return this._customerStrategies.isSigningIn(methodId);\n    }\n\n    /**\n     * Checks whether the current customer is signing out.\n     *\n     * If an ID is provided, the method also checks whether the customer is\n     * signing out using a specific customer method with the same ID.\n     *\n     * @param methodId - The identifier of the method used for signing out the\n     * current customer.\n     * @returns True if the customer is signing out, otherwise false.\n     */\n    isSigningOut(methodId?: string): boolean {\n        return this._customerStrategies.isSigningOut(methodId);\n    }\n\n    /**\n     * Checks whether the customer step is initializing.\n     *\n     * If an ID is provided, the method also checks whether the customer step is\n     * initializing using a specific customer method with the same ID.\n     *\n     * @param methodId - The identifier of the method used for initializing the\n     * customer step of checkout.\n     * @returns True if the customer step is initializing, otherwise false.\n     */\n    isInitializingCustomer(methodId?: string): boolean {\n        return this._customerStrategies.isInitializing(methodId);\n    }\n\n    /**\n     * Checks whether shipping options are loading.\n     *\n     * @returns True if shipping options are loading, otherwise false.\n     */\n    isLoadingShippingOptions(): boolean {\n        return this._consignments.isLoadingShippingOptions();\n    }\n\n    /**\n     * Checks whether a shipping option is being selected.\n     *\n     * A consignment ID should be provided when checking if a shipping option\n     * is being selected for a specific consignment, otherwise it will check\n     * for all consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns True if selecting a shipping option, otherwise false.\n     */\n    isSelectingShippingOption(consignmentId?: string): boolean {\n        return this._shippingStrategies.isSelectingOption() ||\n            this._consignments.isUpdatingShippingOption(consignmentId);\n    }\n\n    /**\n     * Checks whether the billing address is being updated.\n     *\n     * @returns True if updating their billing address, otherwise false.\n     */\n    isUpdatingBillingAddress(): boolean {\n        return this._billingAddress.isUpdating();\n    }\n\n    /**\n     * Checks whether the shopper is continuing out as a guest.\n     *\n     * @returns True if continuing as guest, otherwise false.\n     */\n    isContinuingAsGuest(): boolean {\n        return this._billingAddress.isContinuingAsGuest();\n    }\n\n    /**\n     * Checks the shipping address is being updated.\n     *\n     * @returns True if updating their shipping address, otherwise false.\n     */\n    isUpdatingShippingAddress(): boolean {\n        return this._shippingStrategies.isUpdatingAddress();\n    }\n\n    /**\n     * Checks whether a given/any consignment is being updated.\n     *\n     * A consignment ID should be provided when checking for a specific consignment,\n     * otherwise it will check for any consignment.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns True if updating consignment(s), otherwise false.\n     */\n    isUpdatingConsignment(consignmentId?: string): boolean {\n        return this._consignments.isUpdating(consignmentId);\n    }\n\n    /**\n     * Checks whether a given/any consignment is being deleted.\n     *\n     * A consignment ID should be provided when checking for a specific consignment,\n     * otherwise it will check for any consignment.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns True if deleting consignment(s), otherwise false.\n     */\n    isDeletingConsignment(consignmentId?: string): boolean {\n        return this._consignments.isDeleting(consignmentId);\n    }\n\n    /**\n     * Checks whether a given/any consignment is being updated.\n     *\n     * A consignment ID should be provided when checking for a specific consignment,\n     * otherwise it will check for any consignment.\n     *\n     * @returns True if creating consignments, otherwise false.\n     */\n    isCreatingConsignments(): boolean {\n        return this._consignments.isCreating();\n    }\n\n    /**\n     * Checks whether the shipping step of a checkout process is initializing.\n     *\n     * If an identifier is provided, the method also checks whether the shipping\n     * step is initializing using a specific shipping method with the same\n     * identifier.\n     *\n     * @param methodId - The identifer of the initialization method to check.\n     * @returns True if the shipping step is initializing, otherwise false.\n     */\n    isInitializingShipping(methodId?: string) {\n        return this._shippingStrategies.isInitializing(methodId);\n    }\n\n    /**\n     * Checks whether the current customer is applying a coupon code.\n     *\n     * @returns True if applying a coupon code, otherwise false.\n     */\n    isApplyingCoupon(): boolean {\n        return this._coupons.isApplying();\n    }\n\n    /**\n     * Checks whether the current customer is removing a coupon code.\n     *\n     * @returns True if removing a coupon code, otherwise false.\n     */\n    isRemovingCoupon(): boolean {\n        return this._coupons.isRemoving();\n    }\n\n    /**\n     * Checks whether the current customer is applying a gift certificate.\n     *\n     * @returns True if applying a gift certificate, otherwise false.\n     */\n    isApplyingGiftCertificate(): boolean {\n        return this._giftCertificates.isApplying();\n    }\n\n    /**\n     * Checks whether the current customer is removing a gift certificate.\n     *\n     * @returns True if removing a gift certificate, otherwise false.\n     */\n    isRemovingGiftCertificate(): boolean {\n        return this._giftCertificates.isRemoving();\n    }\n\n    /**\n     * Checks whether the current customer's payment instruments are loading.\n     *\n     * @returns True if payment instruments are loading, otherwise false.\n     */\n    isLoadingInstruments(): boolean {\n        return this._instruments.isLoading();\n    }\n\n    /**\n     * Checks whether the current customer is deleting a payment instrument.\n     *\n     * @returns True if deleting a payment instrument, otherwise false.\n     */\n    isDeletingInstrument(instrumentId?: string): boolean {\n        return this._instruments.isDeleting(instrumentId);\n    }\n\n    /**\n     * Checks whether the checkout configuration of a store is loading.\n     *\n     * @returns True if the configuration is loading, otherwise false.\n     */\n    isLoadingConfig(): boolean {\n        return this._config.isLoading();\n    }\n\n    /**\n     * Checks whether the customer step of a checkout is in a pending state.\n     *\n     * The customer step is considered to be pending if it is in the process of\n     * initializing, signing in, signing out, and/or interacting with a customer\n     * widget.\n     *\n     * @returns True if the customer step is pending, otherwise false.\n     */\n    isCustomerStepPending(): boolean {\n        return this._customerStrategies.isInitializing() ||\n            this._customerStrategies.isSigningIn() ||\n            this._customerStrategies.isSigningOut() ||\n            this._customerStrategies.isWidgetInteracting();\n    }\n\n    /**\n     * Checks whether the payment step of a checkout is in a pending state.\n     *\n     * The payment step is considered to be pending if it is in the process of\n     * initializing, submitting an order, finalizing an order, and/or\n     * interacting with a payment widget.\n     *\n     * @returns True if the payment step is pending, otherwise false.\n     */\n    isPaymentStepPending(): boolean {\n        return this._paymentStrategies.isInitializing() ||\n            this._paymentStrategies.isExecuting() ||\n            this._paymentStrategies.isFinalizing() ||\n            this._paymentStrategies.isWidgetInteracting();\n    }\n}\n","import {\n    CheckoutSelectors,\n    CheckoutStoreErrorSelector,\n    CheckoutStoreSelector,\n    CheckoutStoreStatusSelector,\n    InternalCheckoutSelectors,\n} from '../checkout';\n\nexport default function createCheckoutSelectors(selectors: InternalCheckoutSelectors): CheckoutSelectors {\n    const data = new CheckoutStoreSelector(selectors);\n    const errors = new CheckoutStoreErrorSelector(selectors);\n    const statuses = new CheckoutStoreStatusSelector(selectors);\n\n    return {\n        data,\n        errors,\n        statuses,\n    };\n}\n","import { toSingleLine } from '../utility';\n\nexport default class ErrorMessageTransformer<TError extends Error = Error> {\n    constructor(\n        private _messageCustomizer: (type: TError) => string\n    ) {}\n\n    transform(error: TError): TError {\n        error.message = toSingleLine(this._messageCustomizer(error));\n\n        return error;\n    }\n}\n","import { Action, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs';\n\nimport { AddressRequestBody } from '../address';\nimport { BillingAddressActionCreator, BillingAddressRequestBody } from '../billing';\nimport { ErrorActionCreator, ErrorMessageTransformer } from '../common/error';\nimport { RequestOptions } from '../common/http-request';\nimport { ConfigActionCreator } from '../config';\nimport { CouponActionCreator, GiftCertificateActionCreator } from '../coupon';\nimport { CustomerCredentials, CustomerInitializeOptions, CustomerRequestOptions, CustomerStrategyActionCreator, GuestCredentials } from '../customer';\nimport { CountryActionCreator } from '../geography';\nimport { OrderActionCreator, OrderRequestBody } from '../order';\nimport { PaymentInitializeOptions, PaymentMethodActionCreator, PaymentRequestOptions, PaymentStrategyActionCreator } from '../payment';\nimport { InstrumentActionCreator } from '../payment/instrument';\nimport { ConsignmentsRequestBody, ConsignmentActionCreator, ShippingCountryActionCreator, ShippingInitializeOptions, ShippingRequestOptions, ShippingStrategyActionCreator } from '../shipping';\nimport { ConsignmentAssignmentRequestBody, ConsignmentUpdateRequestBody } from '../shipping/consignment';\n\nimport { CheckoutRequestBody } from './checkout';\nimport CheckoutActionCreator from './checkout-action-creator';\nimport CheckoutParams from './checkout-params';\nimport CheckoutSelectors from './checkout-selectors';\nimport CheckoutStore from './checkout-store';\nimport createCheckoutSelectors from './create-checkout-selectors';\nimport createCheckoutServiceErrorTransformer from './create-checkout-service-error-transformer';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for completing the checkout process for the current customer.\n *\n * This object can be used to collect all information that is required for\n * checkout, such as shipping and billing information. It can also be used to\n * retrieve the current checkout state and subscribe to its changes.\n */\nexport default class CheckoutService {\n    private _state: CheckoutSelectors;\n    private _errorTransformer: ErrorMessageTransformer;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _store: CheckoutStore,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _configActionCreator: ConfigActionCreator,\n        private _consignmentActionCreator: ConsignmentActionCreator,\n        private _countryActionCreator: CountryActionCreator,\n        private _couponActionCreator: CouponActionCreator,\n        private _customerStrategyActionCreator: CustomerStrategyActionCreator,\n        private _errorActionCreator: ErrorActionCreator,\n        private _giftCertificateActionCreator: GiftCertificateActionCreator,\n        private _instrumentActionCreator: InstrumentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _shippingCountryActionCreator: ShippingCountryActionCreator,\n        private _shippingStrategyActionCreator: ShippingStrategyActionCreator\n    ) {\n        this._state = createCheckoutSelectors(this._store.getState());\n        this._errorTransformer = createCheckoutServiceErrorTransformer();\n\n        this._store.subscribe(state => {\n            this._state = createCheckoutSelectors(state);\n        });\n    }\n\n    /**\n     * Returns a snapshot of the current checkout state.\n     *\n     * The method returns a new instance every time there is a change in the\n     * checkout state. You can query the state by calling any of its getter\n     * methods.\n     *\n     * ```js\n     * const state = service.getState();\n     *\n     * console.log(state.data.getOrder());\n     * console.log(state.errors.getSubmitOrderError());\n     * console.log(state.statuses.isSubmittingOrder());\n     * ```\n     *\n     * @returns The current customer's checkout state\n     */\n    getState(): CheckoutSelectors {\n        return this._state;\n    }\n\n    /**\n     * Notifies all subscribers with the current state.\n     *\n     * When this method gets called, the subscribers get called regardless if\n     * they have any filters applied.\n     */\n    notifyState(): void {\n        this._store.notifyState();\n    }\n\n    /**\n     * Subscribes to any changes to the current state.\n     *\n     * The method registers a callback function and executes it every time there\n     * is a change in the checkout state.\n     *\n     * ```js\n     * service.subscribe(state => {\n     *     console.log(state.data.getCart());\n     * });\n     * ```\n     *\n     * The method can be configured to notify subscribers only regarding\n     * relevant changes, by providing a filter function.\n     *\n     * ```js\n     * const filter = state => state.data.getCart();\n     *\n     * // Only trigger the subscriber when the cart changes.\n     * service.subscribe(state => {\n     *     console.log(state.data.getCart())\n     * }, filter);\n     * ```\n     *\n     * @param subscriber - The function to subscribe to state changes.\n     * @param filters - One or more functions to filter out irrelevant state\n     * changes. If more than one function is provided, the subscriber will only\n     * be triggered if all conditions are met.\n     * @returns A function, if called, will unsubscribe the subscriber.\n     */\n    subscribe(\n        subscriber: (state: CheckoutSelectors) => void,\n        ...filters: Array<(state: CheckoutSelectors) => any>\n    ): () => void {\n        return this._store.subscribe(\n            () => subscriber(this.getState()),\n            ...filters.map(filter => (state: InternalCheckoutSelectors) => filter(createCheckoutSelectors(state)))\n        );\n    }\n\n    /**\n     * Loads the current checkout.\n     *\n     * This method can only be called if there is an active checkout. Also, it\n     * can only retrieve data that belongs to the current customer. When it is\n     * successfully executed, you can retrieve the data by calling\n     * `CheckoutStoreSelector#getCheckout`.\n     *\n     * ```js\n     * const state = await service.loadCheckout('0cfd6c06-57c3-4e29-8d7a-de55cc8a9052');\n     *\n     * console.log(state.data.getCheckout());\n     * ```\n     *\n     * @param id - The identifier of the checkout to load, or the default checkout if not provided.\n     * @param options - Options for loading the current checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    loadCheckout(id?: string, options?: RequestOptions<CheckoutParams>): Promise<CheckoutSelectors> {\n        return this._dispatch(id ?\n            this._checkoutActionCreator.loadCheckout(id, options) :\n            this._checkoutActionCreator.loadDefaultCheckout(options)\n        );\n    }\n\n    /**\n     * Updates specific properties of the current checkout.\n     *\n     * ```js\n     * const state = await service.updateCheckout(checkout);\n     *\n     * console.log(state.data.getCheckout());\n     * ```\n     *\n     * @param payload - The checkout properties to be updated.\n     * @param options - Options for loading the current checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    updateCheckout(payload: CheckoutRequestBody, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._checkoutActionCreator.updateCheckout(payload, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Loads an order by an id.\n     *\n     * The method can only retrieve an order if the order belongs to the current\n     * customer. If it is successfully executed, the data can be retrieved by\n     * calling `CheckoutStoreSelector#getOrder`.\n     *\n     * ```js\n     * const state = await service.loadOrder(123);\n     *\n     * console.log(state.data.getOrder());\n     * ```\n     *\n     * @param orderId - The identifier of the order to load.\n     * @param options - Options for loading the order.\n     * @returns A promise that resolves to the current state.\n     */\n    loadOrder(orderId: number, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const loadCheckoutAction = this._orderActionCreator.loadOrder(orderId, options);\n        const loadConfigAction = this._configActionCreator.loadConfig(options);\n\n        return Promise.all([\n            this._dispatch(loadCheckoutAction),\n            this._dispatch(loadConfigAction, { queueId: 'config' }),\n        ])\n            .then(() => this.getState());\n    }\n\n    /**\n     * Submits an order, thereby completing a checkout process.\n     *\n     * Before you can submit an order, you must initialize the payment method\n     * chosen by the customer by calling `CheckoutService#initializePayment`.\n     *\n     * ```js\n     * await service.initializePayment({ methodId: 'braintree' });\n     * await service.submitOrder({\n     *     payment: {\n     *         methodId: 'braintree',\n     *         paymentData: {\n     *             ccExpiry: { month: 10, year: 20 },\n     *             ccName: 'BigCommerce',\n     *             ccNumber: '4111111111111111',\n     *             ccCvv: 123,\n     *         },\n     *     },\n     * });\n     * ```\n     *\n     * You are not required to include `paymentData` if the order does not\n     * require additional payment details. For example, the customer has already\n     * entered their payment details on the cart page using one of the hosted\n     * payment methods, such as PayPal. Or the customer has applied a gift\n     * certificate that exceeds the grand total amount.\n     *\n     * If the order is submitted successfully, you can retrieve the newly\n     * created order by calling `CheckoutStoreSelector#getOrder`.\n     *\n     * ```js\n     * const state = await service.submitOrder(payload);\n     *\n     * console.log(state.data.getOrder());\n     * ```\n     *\n     * @param payload - The request payload to submit for the current order.\n     * @param options - Options for submitting the current order.\n     * @returns A promise that resolves to the current state.\n     */\n    submitOrder(payload: OrderRequestBody, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.execute(payload, options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * Finalizes the submission process for an order.\n     *\n     * This method is only required for certain hosted payment methods that\n     * require a customer to enter their credit card details on their website.\n     * You need to call this method once the customer has redirected back to\n     * checkout in order to complete the checkout process.\n     *\n     * If the method is called before order finalization is required or for a\n     * payment method that does not require order finalization, an error will be\n     * thrown. Conversely, if the method is called successfully, you should\n     * immediately redirect the customer to the order confirmation page.\n     *\n     * ```js\n     * try {\n     *     await service.finalizeOrderIfNeeded();\n     *\n     *     window.location.assign('/order-confirmation');\n     * } catch (error) {\n     *     if (error.type !== 'order_finalization_not_required') {\n     *         throw error;\n     *     }\n     * }\n     * ```\n     *\n     * @param options - Options for finalizing the current order.\n     * @returns A promise that resolves to the current state.\n     * @throws `OrderFinalizationNotRequiredError` error if order finalization\n     * is not required for the current order at the time of execution.\n     */\n    finalizeOrderIfNeeded(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.finalize(options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * Loads a list of payment methods available for checkout.\n     *\n     * If a customer enters their payment details before navigating to the\n     * checkout page (i.e.: using PayPal checkout button on the cart page), only\n     * one payment method will be available for the customer - the selected\n     * payment method. Otherwise, by default, all payment methods configured by\n     * the merchant will be available for the customer.\n     *\n     * Once the method is executed successfully, you can call\n     * `CheckoutStoreSelector#getPaymentMethods` to retrieve the list of payment\n     * methods.\n     *\n     * ```js\n     * const state = service.loadPaymentMethods();\n     *\n     * console.log(state.data.getPaymentMethods());\n     * ```\n     *\n     * @param options - Options for loading the payment methods that are\n     * available to the current customer.\n     * @returns A promise that resolves to the current state.\n     */\n    loadPaymentMethods(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentMethodActionCreator.loadPaymentMethods(options);\n\n        return this._dispatch(action, { queueId: 'paymentMethods' });\n    }\n\n    /**\n     * Loads a payment method by an id.\n     *\n     * This method does not work with multi-option payment providers. Due to its\n     * limitation, it is deprecated and will be removed in the future.\n     *\n     * @deprecated\n     * @internal\n     * @param methodId - The identifier for the payment method to load.\n     * @param options - Options for loading the payment method.\n     * @returns A promise that resolves to the current state.\n     */\n    loadPaymentMethod(methodId: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentMethodActionCreator.loadPaymentMethod(methodId, options);\n\n        return this._dispatch(action, { queueId: 'paymentMethods' });\n    }\n\n    /**\n     * Initializes the payment step of a checkout process.\n     *\n     * Before a payment method can accept payment details, it must first be\n     * initialized. Some payment methods require you to provide additional\n     * initialization options. For example, Amazon requires a container ID in\n     * order to initialize their payment widget.\n     *\n     * ```js\n     * await service.initializePayment({\n     *     methodId: 'amazon',\n     *     amazon: {\n     *         container: 'walletWidget',\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the payment step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    initializePayment(options: PaymentInitializeOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * De-initializes the payment step of a checkout process.\n     *\n     * The method should be called once you no longer require a payment method\n     * to be initialized. It can perform any necessary clean-up behind the\n     * scene, i.e.: remove DOM nodes or event handlers that are attached as a\n     * result of payment initialization.\n     *\n     * ```js\n     * await service.deinitializePayment({\n     *     methodId: 'amazon',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the payment step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializePayment(options: PaymentRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.deinitialize(options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * Loads a list of countries available for billing.\n     *\n     * Once you make a successful request, you will be able to retrieve the list\n     * of countries by calling `CheckoutStoreSelector#getBillingCountries`.\n     *\n     * ```js\n     * const state = await service.loadBillingCountries();\n     *\n     * console.log(state.data.getBillingCountries());\n     * ```\n     *\n     * @param options - Options for loading the available billing countries.\n     * @returns A promise that resolves to the current state.\n     */\n    loadBillingCountries(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._countryActionCreator.loadCountries(options);\n\n        return this._dispatch(action, { queueId: 'billingCountries' });\n    }\n\n    /**\n     * Loads a list of countries available for shipping.\n     *\n     * The list is determined based on the shipping zones configured by a\n     * merchant. Once you make a successful call, you will be able to retrieve\n     * the list of available shipping countries by calling\n     * `CheckoutStoreSelector#getShippingCountries`.\n     *\n     * ```js\n     * const state = await service.loadShippingCountries();\n     *\n     * console.log(state.data.getShippingCountries());\n     * ```\n     *\n     * @param options - Options for loading the available shipping countries.\n     * @returns A promise that resolves to the current state.\n     */\n    loadShippingCountries(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingCountryActionCreator.loadCountries(options);\n\n        return this._dispatch(action, { queueId: 'shippingCountries' });\n    }\n\n    /**\n     * Loads a set of form fields that should be presented to customers in order\n     * to capture their billing address.\n     *\n     * Once the method has been executed successfully, you can call\n     * `CheckoutStoreSelector#getBillingAddressFields` to retrieve the set of\n     * form fields.\n     *\n     * ```js\n     * const state = service.loadBillingAddressFields();\n     *\n     * console.log(state.data.getBillingAddressFields('US'));\n     * ```\n     *\n     * @param options - Options for loading the billing address form fields.\n     * @returns A promise that resolves to the current state.\n     */\n    loadBillingAddressFields(options?: RequestOptions): Promise<CheckoutSelectors> {\n        return this.loadBillingCountries(options);\n    }\n\n    /**\n     * Loads a set of form fields that should be presented to customers in order\n     * to capture their shipping address.\n     *\n     * Once the method has been executed successfully, you can call\n     * `CheckoutStoreSelector#getShippingAddressFields` to retrieve the set of\n     * form fields.\n     *\n     * ```js\n     * const state = service.loadShippingAddressFields();\n     *\n     * console.log(state.data.getShippingAddressFields('US'));\n     * ```\n     *\n     * @param options - Options for loading the shipping address form fields.\n     * @returns A promise that resolves to the current state.\n     */\n    loadShippingAddressFields(options?: RequestOptions): Promise<CheckoutSelectors> {\n        return this.loadShippingCountries(options);\n    }\n\n    /**\n     * Initializes the sign-in step of a checkout process.\n     *\n     * Some payment methods, such as Amazon, have their own sign-in flow. In\n     * order to support them, this method must be called.\n     *\n     * ```js\n     * await service.initializeCustomer({\n     *     methodId: 'amazon',\n     *     amazon: {\n     *         container: 'signInButton',\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the customer step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeCustomer(options?: CustomerInitializeOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * De-initializes the sign-in step of a checkout process.\n     *\n     * It should be called once you no longer want to prompt customers to sign\n     * in. It can perform any necessary clean-up behind the scene, i.e.: remove\n     * DOM nodes or event handlers that are attached as a result of customer\n     * initialization.\n     *\n     * ```js\n     * await service.deinitializeCustomer({\n     *     methodId: 'amazon',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the customer step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeCustomer(options?: CustomerRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.deinitialize(options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * Continues to check out as a guest.\n     *\n     * The customer is required to provide their email address in order to\n     * continue. Once they provide their email address, it will be stored as a\n     * part of their billing address.\n     *\n     * @param credentials - The guest credentials to use.\n     * @param options - Options for continuing as a guest.\n     * @returns A promise that resolves to the current state.\n     */\n    continueAsGuest(credentials: GuestCredentials, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._billingAddressActionCreator.continueAsGuest(credentials, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Signs into a customer's registered account.\n     *\n     * Once the customer is signed in successfully, the checkout state will be\n     * populated with information associated with the customer, such as their\n     * saved addresses. You can call `CheckoutStoreSelector#getCustomer` to\n     * retrieve the data.\n     *\n     * ```js\n     * const state = await service.signInCustomer({\n     *     email: 'foo@bar.com',\n     *     password: 'password123',\n     * });\n     *\n     * console.log(state.data.getCustomer());\n     * ```\n     *\n     * @param credentials - The credentials to be used for signing in the customer.\n     * @param options - Options for signing in the customer.\n     * @returns A promise that resolves to the current state.\n     */\n    signInCustomer(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.signIn(credentials, options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * Signs out the current customer if they are previously signed in.\n     *\n     * Once the customer is successfully signed out, the checkout state will be\n     * reset automatically.\n     *\n     * ```js\n     * const state = await service.signOutCustomer();\n     *\n     * // The returned object should not contain information about the previously signed-in customer.\n     * console.log(state.data.getCustomer());\n     * ```\n     *\n     * @param options - Options for signing out the customer.\n     * @returns A promise that resolves to the current state.\n     */\n    signOutCustomer(options?: CustomerRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.signOut(options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * Loads a list of shipping options available for checkout.\n     *\n     * Available shipping options can only be determined once a customer\n     * provides their shipping address. If the method is executed successfully,\n     * `CheckoutStoreSelector#getShippingOptions` can be called to retrieve the\n     * list of shipping options.\n     *\n     * ```js\n     * const state = await service.loadShippingOptions();\n     *\n     * console.log(state.data.getShippingOptions());\n     * ```\n     *\n     * @param options - Options for loading the available shipping options.\n     * @returns A promise that resolves to the current state.\n     */\n    loadShippingOptions(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.loadShippingOptions(options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Initializes the shipping step of a checkout process.\n     *\n     * Some payment methods, such as Amazon, can provide shipping information to\n     * be used for checkout. In order to support them, this method must be\n     * called.\n     *\n     * ```js\n     * await service.initializeShipping({\n     *     methodId: 'amazon',\n     *     amazon: {\n     *         container: 'addressBook',\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the shipping step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeShipping(options?: ShippingInitializeOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * De-initializes the shipping step of a checkout process.\n     *\n     * It should be called once you no longer need to collect shipping details.\n     * It can perform any necessary clean-up behind the scene, i.e.: remove DOM\n     * nodes or event handlers that are attached as a result of shipping\n     * initialization.\n     *\n     * ```js\n     * await service.deinitializeShipping({\n     *     methodId: 'amazon',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the shipping step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeShipping(options?: ShippingRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.deinitialize(options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Selects a shipping option for the current address.\n     *\n     * If a shipping option has an additional cost, the quote for the current\n     * order will be adjusted once the option is selected.\n     *\n     * ```js\n     * const state = await service.selectShippingOption('address-id', 'shipping-option-id');\n     *\n     * console.log(state.data.getSelectedShippingOption());\n     * ```\n     *\n     * @param shippingOptionId - The identifier of the shipping option to\n     * select.\n     * @param options - Options for selecting the shipping option.\n     * @returns A promise that resolves to the current state.\n     */\n    selectShippingOption(shippingOptionId: string, options?: ShippingRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.selectOption(shippingOptionId, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Updates the shipping address for the current checkout.\n     *\n     * When a customer updates their shipping address for an order, they will\n     * see an updated list of shipping options and the cost for each option,\n     * unless no options are available. If the update is successful, you can\n     * call `CheckoutStoreSelector#getShippingAddress` to retrieve the address.\n     *\n     * If the shipping address changes and the selected shipping option becomes\n     * unavailable for the updated address, the shipping option will be\n     * deselected.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.updateShippingAddress(address);\n     *\n     * console.log(state.data.getShippingAddress());\n     * ```\n     *\n     * @param address - The address to be used for shipping.\n     * @param options - Options for updating the shipping address.\n     * @returns A promise that resolves to the current state.\n     */\n    updateShippingAddress(address: AddressRequestBody, options?: ShippingRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.updateAddress(address, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Creates consignments given a list.\n     *\n     * Note: this is used when items need to be shipped to multiple addresses,\n     * for single shipping address, use `CheckoutService#updateShippingAddress`.\n     *\n     * When consignments are created, an updated list of shipping options will\n     * become available for each consignment, unless no options are available.\n     * If the update is successful, you can call\n     * `CheckoutStoreSelector#getConsignments` to retrieve the updated list of\n     * consignments.'\n     *\n     * Beware that if a consignment includes all line items from another\n     * consignment, that consignment will be deleted as a valid consignment must\n     * include at least one valid line item.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.createConsignments(consignments);\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignments - The list of consignments to be created.\n     * @param options - Options for updating the shipping address.\n     * @returns A promise that resolves to the current state.\n     */\n    createConsignments(\n        consignments: ConsignmentsRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.createConsignments(consignments, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Deletes a consignment\n     *\n     * ```js\n     * const state = await service.deleteConsignment('55c96cda6f04c');\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignmentId - The ID of the consignment to be deleted\n     * @param options - Options for the consignment delete request\n     * @returns A promise that resolves to the current state.\n     */\n    deleteConsignment(\n        consignmentId: string,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.deleteConsignment(consignmentId, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Updates a specific consignment.\n     *\n     * Note: this is used when items need to be shipped to multiple addresses,\n     * for single shipping address, use `CheckoutService#selectShippingOption`.\n     *\n     * When a shipping address for a consignment is updated, an updated list of\n     * shipping options will become available for the consignment, unless no\n     * options are available. If the update is successful, you can call\n     * `CheckoutStoreSelector#getConsignments` to retrieve updated list of\n     * consignments.\n     *\n     * Beware that if the updated consignment includes all line items from another\n     * consignment, that consignment will be deleted as a valid consignment must\n     * include at least one valid line item.\n     *\n     * If the shipping address changes and the selected shipping option becomes\n     * unavailable for the updated address, the shipping option will be\n     * deselected.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.updateConsignment(consignment);\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignment - The consignment data that will be used.\n     * @param options - Options for updating the shipping address.\n     * @returns A promise that resolves to the current state.\n     */\n    updateConsignment(\n        consignment: ConsignmentUpdateRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.updateConsignment(consignment, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Convenience method that assigns items to be shipped to a specific address.\n     *\n     * Note: this method finds an existing consignment that matches the provided address\n     * and assigns the provided items. If no consignment matches the address, a new one\n     * will be created.\n     *\n     * @param consignment - The consignment data that will be used.\n     * @param options - Options for the request\n     * @returns A promise that resolves to the current state.\n     */\n    assignItemsToAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.assignItemsByAddress(consignment, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Convenience method that unassigns items from a specific shipping address.\n     *\n     * Note: this method finds an existing consignment that matches the provided address\n     * and unassigns the specified items. If the consignment ends up with no line items\n     * after the unassignment, it will be deleted.\n     *\n     * @param consignment - The consignment data that will be used.\n     * @param options - Options for the request\n     * @returns A promise that resolves to the current state.\n     */\n    unassignItemsToAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.unassignItemsByAddress(consignment, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Selects a shipping option for a given consignment.\n     *\n     * Note: this is used when items need to be shipped to multiple addresses,\n     * for single shipping address, use `CheckoutService#updateShippingAddres`.\n     *\n     * If a shipping option has an additional cost, the quote for the current\n     * order will be adjusted once the option is selected.\n     *\n     * ```js\n     * const state = await service.selectConsignmentShippingOption(consignmentId, optionId);\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignmentId - The identified of the consignment to be updated.\n     * @param shippingOptionId - The identifier of the shipping option to\n     * select.\n     * @param options - Options for selecting the shipping option.\n     * @returns A promise that resolves to the current state.\n     */\n    selectConsignmentShippingOption(\n        consignmentId: string,\n        shippingOptionId: string,\n        options?: ShippingRequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.updateShippingOption({\n            id: consignmentId,\n            shippingOptionId,\n        }, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Updates the billing address for the current checkout.\n     *\n     * A customer must provide their billing address before they can proceed to\n     * pay for their order.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.updateBillingAddress(address);\n     *\n     * console.log(state.data.getBillingAddress());\n     * ```\n     *\n     * @param address - The address to be used for billing.\n     * @param options - Options for updating the billing address.\n     * @returns A promise that resolves to the current state.\n     */\n    updateBillingAddress(address: BillingAddressRequestBody, options: RequestOptions = {}): Promise<CheckoutSelectors> {\n        const action = this._billingAddressActionCreator.updateAddress(address, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Applies a coupon code to the current checkout.\n     *\n     * Once the coupon code gets applied, the quote for the current checkout will\n     * be adjusted accordingly. The same coupon code cannot be applied more than\n     * once.\n     *\n     * ```js\n     * await service.applyCoupon('COUPON');\n     * ```\n     *\n     * @param code - The coupon code to apply to the current checkout.\n     * @param options - Options for applying the coupon code.\n     * @returns A promise that resolves to the current state.\n     */\n    applyCoupon(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._couponActionCreator.applyCoupon(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Removes a coupon code from the current checkout.\n     *\n     * Once the coupon code gets removed, the quote for the current checkout will\n     * be adjusted accordingly.\n     *\n     * ```js\n     * await service.removeCoupon('COUPON');\n     * ```\n     *\n     * @param code - The coupon code to remove from the current checkout.\n     * @param options - Options for removing the coupon code.\n     * @returns A promise that resolves to the current state.\n     */\n    removeCoupon(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._couponActionCreator.removeCoupon(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Applies a gift certificate to the current checkout.\n     *\n     * Once the gift certificate gets applied, the quote for the current\n     * checkout will be adjusted accordingly.\n     *\n     * ```js\n     * await service.applyGiftCertificate('GIFT_CERTIFICATE');\n     * ```\n     *\n     * @param code - The gift certificate to apply to the current checkout.\n     * @param options - Options for applying the gift certificate.\n     * @returns A promise that resolves to the current state.\n     */\n    applyGiftCertificate(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._giftCertificateActionCreator.applyGiftCertificate(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Removes a gift certificate from an order.\n     *\n     * Once the gift certificate gets removed, the quote for the current\n     * checkout will be adjusted accordingly.\n     *\n     * ```js\n     * await service.removeGiftCertificate('GIFT_CERTIFICATE');\n     * ```\n     *\n     * @param code - The gift certificate to remove from the current checkout.\n     * @param options - Options for removing the gift certificate.\n     * @returns A promise that resolves to the current state.\n     */\n    removeGiftCertificate(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._giftCertificateActionCreator.removeGiftCertificate(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Loads a list of payment instruments associated with a customer.\n     *\n     * Once the method has been called successfully, you can retrieve the list\n     * of payment instruments by calling `CheckoutStoreSelector#getInstruments`.\n     * If the customer does not have any payment instruments on record, i.e.:\n     * credit card, you will get an empty list instead.\n     *\n     * ```js\n     * const state = service.loadInstruments();\n     *\n     * console.log(state.data.getInstruments());\n     * ```\n     *\n     * @returns A promise that resolves to the current state.\n     */\n    loadInstruments(): Promise<CheckoutSelectors> {\n        const action = this._instrumentActionCreator.loadInstruments();\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Deletes a payment instrument by an id.\n     *\n     * Once an instrument gets removed, it can no longer be retrieved using\n     * `CheckoutStoreSelector#getInstruments`.\n     *\n     * ```js\n     * const state = service.deleteInstrument('123');\n     *\n     * console.log(state.data.getInstruments());\n     * ```\n     *\n     * @param instrumentId - The identifier of the payment instrument to delete.\n     * @returns A promise that resolves to the current state.\n     */\n    deleteInstrument(instrumentId: string): Promise<CheckoutSelectors> {\n        const action = this._instrumentActionCreator.deleteInstrument(instrumentId);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Clear errors that have been collected from previous calls.\n     *\n     * ```js\n     * const state = await service.clearError(error);\n     *\n     * console.log(state.errors.getError());\n     * ```\n     *\n     * @param error - Specific error object to clear\n     * @returns A promise that resolves to the current state.\n     */\n    clearError(error: Error): Promise<CheckoutSelectors> {\n        const action = this._errorActionCreator.clearError(error);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Dispatches an action through the data store and returns the current state\n     * once the action is dispatched.\n     *\n     * @param action - The action to dispatch.\n     * @returns A promise that resolves to the current state.\n     */\n    private _dispatch(action: Action | Observable<Action> | ThunkAction<Action>, options?: { queueId?: string }): Promise<CheckoutSelectors> {\n        return this._store.dispatch(action, options)\n            .then(() => this.getState())\n            .catch(error => {\n                throw this._errorTransformer.transform(error);\n            });\n    }\n}\n","import { ErrorMessageTransformer } from '../common/error';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../common/error/errors';\nimport { getEnvironment } from '../common/utility';\n\nexport type CheckoutServiceErrorType = MissingDataError | NotInitializedError;\nexport type CheckoutServiceErrorTransformer = ErrorMessageTransformer<CheckoutServiceErrorType | Error>;\n\nexport default function createCheckoutServiceErrorTransformer(\n    isDevelopment: boolean = getEnvironment() === 'development'\n): CheckoutServiceErrorTransformer {\n    return new ErrorMessageTransformer(error => {\n        if (!isDevelopment || !isCheckoutServiceError(error)) {\n            return error.message;\n        }\n\n        switch (error.subtype || error.type) {\n        case MissingDataErrorType.MissingConsignments:\n            return `\n                ${error.message}\n                The data could be unavailable because no shipping address has been provided.\n                To fix this, create a consignment or update the shipping address before performing\n                the same action again.\n            `;\n\n        case MissingDataErrorType.MissingCart:\n        case MissingDataErrorType.MissingCheckout:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server yet.\n                To fix this issue, you can try calling \\`CheckoutService#loadCheckout\\`\n                before performing the same action again.\n            `;\n\n        case MissingDataErrorType.MissingCheckoutConfig:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server yet.\n                To fix this issue, you need to make sure \\`CheckoutService\\` is initialized\n                properly by calling \\`CheckoutService#loadCheckout\\` before performing any\n                other actions.\n            `;\n\n        case MissingDataErrorType.MissingOrder:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server yet.\n                To fix this issue, you can try calling \\`CheckoutService#loadOrder\\`\n                before performing the same action again.\n            `;\n\n        case MissingDataErrorType.MissingOrderId:\n            return `\n                ${error.message}\n                The data could be unavailable because no order has been created yet. You have\n                to first create the order before you can perform the action.\n            `;\n\n        case MissingDataErrorType.MissingPaymentMethod:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server, or\n                configured by the merchant yet. To fix the former issue, you can try calling\n                \\`CheckoutService#loadPaymentMethods\\` before performing the same action again.\n            `;\n\n        case NotInitializedErrorType.CustomerNotInitialized:\n            return `\n                In order to initialize the customer step of checkout, you need to call\n                \\`CheckoutService#initializeCustomer\\`. Afterwards, you should be able to\n                submit customer details.\n            `;\n\n        case NotInitializedErrorType.PaymentNotInitialized:\n            return `\n                ${error.message}\n                In order to initialize the payment step of checkout, you need to call\n                \\`CheckoutService#initializePayment\\`. Afterwards, you should be able to\n                submit payment details.\n            `;\n\n        case NotInitializedErrorType.ShippingNotInitialized:\n            return `\n                ${error.message}\n                In order to initialize the shipping step of checkout, you need to call\n                \\`CheckoutService#initializeShipping\\`. Afterwards, you should be able to\n                submit shipping details.\n            `;\n\n        default:\n            return error.message;\n        }\n    });\n}\n\nfunction isCheckoutServiceError(error: any): error is CheckoutServiceErrorType {\n    return !!(error.subtype || error.type);\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../billing';\nimport { ErrorActionCreator } from '../common/error';\nimport { getDefaultLogger } from '../common/log';\nimport { getEnvironment } from '../common/utility';\nimport { ConfigActionCreator, ConfigRequestSender, ConfigState } from '../config';\nimport { CouponActionCreator, CouponRequestSender, GiftCertificateActionCreator, GiftCertificateRequestSender } from '../coupon';\nimport { createCustomerStrategyRegistry, CustomerStrategyActionCreator } from '../customer';\nimport { CountryActionCreator, CountryRequestSender } from '../geography';\nimport { OrderActionCreator, OrderRequestSender } from '../order';\nimport { createPaymentClient, createPaymentStrategyRegistry, PaymentMethodActionCreator, PaymentMethodRequestSender, PaymentStrategyActionCreator } from '../payment';\nimport { InstrumentActionCreator, InstrumentRequestSender } from '../payment/instrument';\nimport { createShippingStrategyRegistry, ConsignmentActionCreator, ConsignmentRequestSender, ShippingCountryActionCreator, ShippingCountryRequestSender, ShippingStrategyActionCreator } from '../shipping';\n\nimport CheckoutActionCreator from './checkout-action-creator';\nimport CheckoutRequestSender from './checkout-request-sender';\nimport CheckoutService from './checkout-service';\nimport CheckoutValidator from './checkout-validator';\nimport createCheckoutStore from './create-checkout-store';\n\n/**\n * Creates an instance of `CheckoutService`.\n *\n * @remarks\n * ```js\n * const service = createCheckoutService();\n *\n * service.subscribe(state => {\n *     console.log(state);\n * });\n *\n * service.loadCheckout();\n * ```\n *\n * @param options - A set of construction options.\n * @returns an instance of `CheckoutService`.\n */\nexport default function createCheckoutService(options?: CheckoutServiceOptions): CheckoutService {\n    if (document.location.protocol !== 'https:') {\n        getDefaultLogger().warn('The BigCommerce Checkout SDK should not be used on a non-HTTPS page');\n    }\n\n    if (getEnvironment() !== 'production') {\n        getDefaultLogger().warn('Note that the development build is not optimized. To create a production build, set process.env.NODE_ENV to `production`.');\n    }\n\n    const config: ConfigState = {\n        meta: {\n            externalSource: options && options.externalSource,\n        },\n        errors: {},\n        statuses: {},\n    };\n    const { locale = '', shouldWarnMutation = true } = options || {};\n    const requestSender = createRequestSender({ host: options && options.host });\n    const store = createCheckoutStore({ config }, { shouldWarnMutation });\n    const paymentClient = createPaymentClient(store);\n    const orderRequestSender = new OrderRequestSender(requestSender);\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const configActionCreator = new ConfigActionCreator(new ConfigRequestSender(requestSender));\n    const orderActionCreator = new OrderActionCreator(orderRequestSender, new CheckoutValidator(checkoutRequestSender));\n\n    return new CheckoutService(\n        store,\n        new BillingAddressActionCreator(new BillingAddressRequestSender(requestSender)),\n        new CheckoutActionCreator(checkoutRequestSender, configActionCreator),\n        configActionCreator,\n        new ConsignmentActionCreator(new ConsignmentRequestSender(requestSender), checkoutRequestSender),\n        new CountryActionCreator(new CountryRequestSender(requestSender, { locale })),\n        new CouponActionCreator(new CouponRequestSender(requestSender)),\n        new CustomerStrategyActionCreator(createCustomerStrategyRegistry(store, requestSender)),\n        new ErrorActionCreator(),\n        new GiftCertificateActionCreator(new GiftCertificateRequestSender(requestSender)),\n        new InstrumentActionCreator(new InstrumentRequestSender(paymentClient, requestSender)),\n        orderActionCreator,\n        new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender)),\n        new PaymentStrategyActionCreator(\n            createPaymentStrategyRegistry(store, paymentClient, requestSender),\n            orderActionCreator\n        ),\n        new ShippingCountryActionCreator(new ShippingCountryRequestSender(requestSender, { locale })),\n        new ShippingStrategyActionCreator(createShippingStrategyRegistry(store, requestSender))\n    );\n}\n\nexport interface CheckoutServiceOptions {\n    locale?: string;\n    host?: string;\n    shouldWarnMutation?: boolean;\n    externalSource?: string;\n}\n","// tslint:disable-next-line:no-reference\n/// <reference path=\"../payment/bigpay-client.d.ts\" />\nimport { createClient as createBigpayClient } from '@bigcommerce/bigpay-client';\n\nimport { CheckoutStore } from '../checkout';\n\nexport default function createPaymentClient(store: CheckoutStore) {\n    const paymentClient = createBigpayClient();\n\n    store.subscribe(\n        state => {\n            const config = state.config.getStoreConfig();\n\n            if (config) {\n                paymentClient.setHost(config.paymentSettings.bigpayBaseUrl);\n            }\n        },\n        state => state.config.getStoreConfig()\n    );\n\n    return paymentClient;\n}\n","export * from './checkout-actions';\n\nexport { default as Checkout, CheckoutPayment } from './checkout';\nexport { default as CHECKOUT_DEFAULT_INCLUDES } from './checkout-default-includes';\nexport { default as CheckoutActionCreator } from './checkout-action-creator';\nexport { default as CheckoutParams, CheckoutIncludes } from './checkout-params';\nexport { default as checkoutReducer } from './checkout-reducer';\nexport { default as CheckoutRequestSender } from './checkout-request-sender';\nexport { default as CheckoutSelector } from './checkout-selector';\nexport { default as CheckoutSelectors } from './checkout-selectors';\nexport { default as CheckoutService } from './checkout-service';\nexport { default as CheckoutState } from './checkout-state';\nexport { default as CheckoutStoreErrorSelector } from './checkout-store-error-selector';\nexport { default as CheckoutStoreSelector } from './checkout-store-selector';\nexport { default as CheckoutStoreState } from './checkout-store-state';\nexport { default as CheckoutStoreStatusSelector } from './checkout-store-status-selector';\nexport { default as CheckoutStore, CheckoutStoreOptions, ReadableCheckoutStore } from './checkout-store';\nexport { default as CheckoutValidator } from './checkout-validator';\nexport { default as InternalCheckoutSelectors } from './internal-checkout-selectors';\n\nexport { default as createActionTransformer } from './create-action-transformer';\nexport { default as createCheckoutService } from './create-checkout-service';\nexport { default as createCheckoutStore } from './create-checkout-store';\nexport { default as createCheckoutSelectors } from './create-checkout-selectors';\nexport { default as createInternalCheckoutSelectors } from './create-internal-checkout-selectors';\n","import { Response } from '@bigcommerce/request-sender';\n\nimport StandardError from './standard-error';\n\nconst DEFAULT_RESPONSE = {\n    body: {},\n    headers: {},\n    status: 0,\n};\n\nexport default class RequestError<TBody = any> extends StandardError {\n    body: TBody | {};\n    headers: { [key: string]: any; };\n    errors: Array<{ code: string, message?: string }>;\n    status: number;\n\n    constructor(\n        response?: Response<TBody | {}>,\n        { message, errors }: {\n            message?: string;\n            errors?: Array<{ code: string, message?: string }>,\n        } = {}\n    ) {\n        const { body, headers, status } = response || DEFAULT_RESPONSE;\n\n        super(message || 'An unexpected error has occurred.');\n\n        this.type = 'request';\n        this.body = body;\n        this.headers = headers;\n        this.status = status;\n        this.errors = errors || [];\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport Config from './config';\n\nexport enum ConfigActionType {\n    LoadConfigRequested = 'LOAD_CONFIG_REQUESTED',\n    LoadConfigSucceeded = 'LOAD_CONFIG_SUCCEEDED',\n    LoadConfigFailed = 'LOAD_CONFIG_FAILED',\n}\n\nexport type LoadConfigAction =\n    LoadConfigRequestedAction |\n    LoadConfigSucceededAction |\n    LoadConfigFailedAction;\n\nexport interface LoadConfigRequestedAction extends Action {\n    type: ConfigActionType.LoadConfigRequested;\n}\n\nexport interface LoadConfigSucceededAction extends Action<Config> {\n    type: ConfigActionType.LoadConfigSucceeded;\n}\n\nexport interface LoadConfigFailedAction extends Action<Error> {\n    type: ConfigActionType.LoadConfigFailed;\n}\n","import { memoize } from 'lodash';\n\nimport { bindDecorator, isEqual, isPrivate, CacheKeyResolver } from '../utility';\n\n/**\n * Decorates a class by patching all of its methods to cache their return values\n * and return them if they are called again with the same set of parameters. The\n * decorator also binds all the methods to the calling instance so it can be\n * destructed.\n */\nexport default function selectorDecorator<T extends Constructor<object>>(target: T): T {\n    const decoratedTarget = class extends target {};\n\n    Object.getOwnPropertyNames(target.prototype)\n        .forEach(key => {\n            const descriptor = Object.getOwnPropertyDescriptor(target.prototype, key);\n\n            if (!descriptor || key === 'constructor') {\n                return;\n            }\n\n            Object.defineProperty(\n                decoratedTarget.prototype,\n                key,\n                selectorMethodDecorator(target.prototype, key, descriptor)\n            );\n        });\n\n    return decoratedTarget;\n}\n\nfunction selectorMethodDecorator<T extends Method>(target: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T> {\n    if (typeof descriptor.value !== 'function') {\n        return descriptor;\n    }\n\n    let resolver = new CacheKeyResolver();\n    let method = descriptor.value;\n    let memoizedMethod = memoize(method, (...args) => resolver.getKey(...args));\n\n    return bindDecorator(target, key, {\n        get() {\n            const value = ((...args: any[]) => {\n                const cachedValue = memoizedMethod.call(this, ...args);\n\n                if (resolver.getUsedCount(...args) === 1) {\n                    return cachedValue;\n                }\n\n                const newValue = method.call(this, ...args);\n\n                if (isEqual(newValue, cachedValue, { keyFilter: key => !isPrivate(key) })) {\n                    return cachedValue;\n                }\n\n                memoizedMethod.cache.set(resolver.getKey(...args), newValue);\n\n                return newValue;\n            }) as T;\n\n            Object.defineProperty(this, key, { ...descriptor, value });\n\n            return value;\n        },\n        set(value) {\n            resolver = new CacheKeyResolver();\n            method = value;\n            memoizedMethod = memoize(method, (...args) => resolver.getKey(...args));\n        },\n    });\n}\n\nexport type Constructor<T> = new (...args: any[]) => T;\ntype Method = (...args: any[]) => any;\n","enum ContentType {\n    Json = 'application/json',\n    JsonV1 = 'application/vnd.bc.v1+json',\n}\n\nexport default ContentType;\n","import { Action } from '@bigcommerce/data-store';\n\nimport Country from './country';\n\nexport enum CountryActionType {\n    LoadCountriesRequested = 'LOAD_COUNTRIES_REQUESTED',\n    LoadCountriesSucceeded = 'LOAD_COUNTRIES_SUCCEEDED',\n    LoadCountriesFailed = 'LOAD_COUNTRIES_FAILED',\n}\n\nexport type LoadCountriesAction =\n    LoadCountriesRequestedAction |\n    LoadCountriesSucceededAction |\n    LoadCountriesFailedAction;\n\nexport interface LoadCountriesRequestedAction extends Action {\n    type: CountryActionType.LoadCountriesRequested;\n}\n\nexport interface LoadCountriesSucceededAction extends Action<Country[]> {\n    type: CountryActionType.LoadCountriesSucceeded;\n}\n\nexport interface LoadCountriesFailedAction extends Action<Error> {\n    type: CountryActionType.LoadCountriesFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Country } from '../geography';\n\nexport enum ShippingCountryActionType {\n    LoadShippingCountriesRequested = 'LOAD_SHIPPING_COUNTRIES_REQUESTED',\n    LoadShippingCountriesSucceeded = 'LOAD_SHIPPING_COUNTRIES_SUCCEEDED',\n    LoadShippingCountriesFailed = 'LOAD_SHIPPING_COUNTRIES_FAILED',\n}\n\nexport type LoadShippingCountriesAction = LoadShippingCountriesRequestedAction |\n    LoadShippingCountriesSucceededAction |\n    LoadShippingCountriesFailedAction;\n\nexport interface LoadShippingCountriesRequestedAction extends Action {\n    type: ShippingCountryActionType.LoadShippingCountriesRequested;\n}\n\nexport interface LoadShippingCountriesSucceededAction extends Action<Country[]> {\n    type: ShippingCountryActionType.LoadShippingCountriesSucceeded;\n}\n\nexport interface LoadShippingCountriesFailedAction extends Action<Error> {\n    type: ShippingCountryActionType.LoadShippingCountriesFailed;\n}\n","module.exports = require(\"@bigcommerce/request-sender\");","export const ACKNOWLEDGE = 'ACKNOWLEDGE';\nexport const FINALIZE = 'FINALIZE';\nexport const INITIALIZE = 'INITIALIZE';\n","module.exports = require(\"@bigcommerce/script-loader\");","export default interface PaymentStrategyState {\n    data: PaymentStrategyDataState;\n    errors: PaymentStrategyErrorsState;\n    statuses: PaymentStrategyStatusesState;\n}\n\nexport interface PaymentStrategyDataState {\n    [key: string]: {\n        isInitialized: boolean,\n    };\n}\n\nexport interface PaymentStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    executeError?: Error;\n    executeMethodId?: string;\n    finalizeError?: Error;\n    finalizeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    widgetInteractionError?: Error;\n    widgetInteractionMethodId?: string;\n}\n\nexport interface PaymentStrategyStatusesState {\n    deinitializeMethodId?: string;\n    executeMethodId?: string;\n    finalizeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isExecuting?: boolean;\n    isFinalizing?: boolean;\n    isInitializing?: boolean;\n    isWidgetInteracting?: boolean;\n    widgetInteractionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: PaymentStrategyState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { Action } from '@bigcommerce/data-store';\n\nimport { omitDeep } from '../utility';\n\nimport { ClearErrorAction, ErrorActionType } from './error-actions';\n\nexport default function clearErrorReducer<TState extends { [key: string]: any }, TAction extends Action>(\n    state: TState,\n    action: TAction\n): TState | undefined {\n    if (isClearErrorAction(action)) {\n        return omitDeep(state, value => value === action.payload);\n    }\n\n    return state;\n}\n\nfunction isClearErrorAction(action: Action): action is ClearErrorAction {\n    return action.type === ErrorActionType.ClearError;\n}\n","const CHECKOUT_DEFAULT_INCLUDES = [\n    'cart.lineItems.physicalItems.options',\n    'cart.lineItems.digitalItems.options',\n    'customer',\n    'payments',\n    'promotions.banners',\n];\n\nexport default CHECKOUT_DEFAULT_INCLUDES;\n","export interface CompareOptions {\n    keyFilter?(key: string): boolean;\n}\n\nexport default function isEqual(objectA: any, objectB: any, options?: CompareOptions): boolean {\n    if (objectA === objectB) {\n        return true;\n    }\n\n    if (objectA && objectB && typeof objectA === 'object' && typeof objectB === 'object') {\n        if (Array.isArray(objectA) && Array.isArray(objectB)) {\n            return isArrayEqual(objectA, objectB, options);\n        }\n\n        if (Array.isArray(objectA) || Array.isArray(objectB)) {\n            return false;\n        }\n\n        if ((objectA instanceof Date) && (objectB instanceof Date)) {\n            return isDateEqual(objectA, objectB);\n        }\n\n        if ((objectA instanceof Date) || (objectB instanceof Date)) {\n            return false;\n        }\n\n        if ((objectA instanceof RegExp) && (objectB instanceof RegExp)) {\n            return isRegExpEqual(objectA, objectB);\n        }\n\n        if ((objectA instanceof RegExp) || (objectB instanceof RegExp)) {\n            return false;\n        }\n\n        return isObjectEqual(objectA, objectB, options);\n    }\n\n    return objectA === objectB;\n}\n\nfunction isRegExpEqual(objectA: RegExp, objectB: RegExp): boolean {\n    return objectA.toString() === objectB.toString();\n}\n\nfunction isDateEqual(objectA: Date, objectB: Date): boolean {\n    return objectA.getTime() === objectB.getTime();\n}\n\nfunction isArrayEqual(objectA: any[], objectB: any[], options?: CompareOptions): boolean {\n    if (objectA.length !== objectB.length) {\n        return false;\n    }\n\n    for (let index = 0, length = objectA.length; index < length; index++) {\n        if (!isEqual(objectA[index], objectB[index], options)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nfunction isObjectEqual(\n    objectA: { [key: string]: any },\n    objectB: { [key: string]: any },\n    options?: CompareOptions\n): boolean {\n    const filter = options && options.keyFilter;\n    const keysA = filter ? Object.keys(objectA).filter(filter) : Object.keys(objectA);\n    const keysB = filter ? Object.keys(objectB).filter(filter) : Object.keys(objectB);\n\n    if (keysA.length !== keysB.length) {\n        return false;\n    }\n\n    for (let index = 0, length = keysA.length; index < length; index++) {\n        const key = keysA[index];\n\n        if (!objectB.hasOwnProperty(key)) {\n            return false;\n        }\n\n        if (!isEqual(objectA[key], objectB[key], options)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadCheckoutAction } from '../checkout';\n\nimport { InternalCustomerResponseData } from './internal-customer-responses';\n\nexport enum CustomerActionType {\n    SignInCustomerRequested = 'SIGN_IN_CUSTOMER_REQUESTED',\n    SignInCustomerSucceeded = 'SIGN_IN_CUSTOMER_SUCCEEDED',\n    SignInCustomerFailed = 'SIGN_IN_CUSTOMER_FAILED',\n\n    SignOutCustomerRequested = 'SIGN_OUT_CUSTOMER_REQUESTED',\n    SignOutCustomerSucceeded = 'SIGN_OUT_CUSTOMER_SUCCEEDED',\n    SignOutCustomerFailed = 'SIGN_OUT_CUSTOMER_FAILED',\n}\n\nexport type CustomerAction =\n    SignInCustomerAction |\n    SignOutCustomerAction;\n\nexport type SignInCustomerAction =\n    SignInCustomerRequestedAction |\n    SignInCustomerSucceededAction |\n    SignInCustomerFailedAction |\n    LoadCheckoutAction;\n\nexport type SignOutCustomerAction =\n    SignOutCustomerRequestedAction |\n    SignOutCustomerSucceededAction |\n    SignOutCustomerFailedAction |\n    LoadCheckoutAction;\n\nexport interface SignInCustomerRequestedAction extends Action {\n    type: CustomerActionType.SignInCustomerRequested;\n}\n\nexport interface SignInCustomerSucceededAction extends Action<InternalCustomerResponseData> {\n    type: CustomerActionType.SignInCustomerSucceeded;\n}\n\nexport interface SignInCustomerFailedAction extends Action<Error> {\n    type: CustomerActionType.SignInCustomerFailed;\n}\n\nexport interface SignOutCustomerRequestedAction extends Action {\n    type: CustomerActionType.SignOutCustomerRequested;\n}\n\nexport interface SignOutCustomerSucceededAction extends Action<InternalCustomerResponseData> {\n    type: CustomerActionType.SignOutCustomerSucceeded;\n}\n\nexport interface SignOutCustomerFailedAction extends Action<Error> {\n    type: CustomerActionType.SignOutCustomerFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadOrderAction } from '../order';\n\nimport PaymentResponseBody from './payment-response-body';\n\nexport enum PaymentActionType {\n    SubmitPaymentRequested = 'SUBMIT_PAYMENT_REQUESTED',\n    SubmitPaymentSucceeded = 'SUBMIT_PAYMENT_SUCCEEDED',\n    SubmitPaymentFailed = 'SUBMIT_PAYMENT_FAILED',\n\n    InitializeOffsitePaymentRequested = 'INITIALIZE_OFFSITE_PAYMENT_REQUESTED',\n    InitializeOffsitePaymentSucceeded = 'INITIALIZE_OFFSITE_PAYMENT_SUCCEEDED',\n    InitializeOffsitePaymentFailed = 'INITIALIZE_OFFSITE_PAYMENT_FAILED',\n}\n\nexport type PaymentAction = SubmitPaymentAction |\n    InitializeOffsitePaymentAction;\n\nexport type SubmitPaymentAction =\n    SubmitPaymentRequestedAction |\n    SubmitPaymentSucceededAction |\n    SubmitPaymentFailedAction |\n    LoadOrderAction;\n\nexport type InitializeOffsitePaymentAction =\n    InitializeOffsitePaymentRequestedAction |\n    InitializeOffsitePaymentSucceededAction |\n    InitializeOffsitePaymentFailedAction;\n\nexport interface SubmitPaymentRequestedAction extends Action {\n    type: PaymentActionType.SubmitPaymentRequested;\n}\n\nexport interface SubmitPaymentSucceededAction extends Action<PaymentResponseBody> {\n    type: PaymentActionType.SubmitPaymentSucceeded;\n}\n\nexport interface SubmitPaymentFailedAction extends Action<Error> {\n    type: PaymentActionType.SubmitPaymentFailed;\n}\n\nexport interface InitializeOffsitePaymentRequestedAction extends Action {\n    type: PaymentActionType.InitializeOffsitePaymentRequested;\n}\n\nexport interface InitializeOffsitePaymentSucceededAction extends Action {\n    type: PaymentActionType.InitializeOffsitePaymentSucceeded;\n}\n\nexport interface InitializeOffsitePaymentFailedAction extends Action<Error> {\n    type: PaymentActionType.InitializeOffsitePaymentFailed;\n}\n","import StandardError from './standard-error';\n\nexport default class InvalidArgumentError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Invalid arguments have been provided.');\n\n        this.type = 'invalid_argument';\n    }\n}\n","export const HOSTED = 'PAYMENT_TYPE_HOSTED';\nexport const OFFLINE = 'PAYMENT_TYPE_OFFLINE';\n","import IframeEvent from './iframe-event';\n\nexport default function isIframeEvent<TEvent extends IframeEvent<TType>, TType extends string>(\n    object: any,\n    type: TType\n): object is TEvent {\n    return object.type === type;\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { RequestError } from '../../common/error/errors';\n\nexport default class PaymentMethodInvalidError extends RequestError {\n    constructor(response?: Response) {\n        super(response, { message: 'There is a problem processing your payment. Please try again later.' });\n\n        this.type = 'payment_method_invalid';\n    }\n}\n","import { InternalCheckoutSelectors } from '../checkout';\nimport { selector } from '../common/selector';\n\nimport CheckoutButtonSelector from './checkout-button-selector';\nimport { CheckoutButtonMethodType } from './strategies';\n\n@selector\nexport default class CheckoutButtonErrorSelector {\n    private _checkoutButton: CheckoutButtonSelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._checkoutButton = selectors.checkoutButton;\n    }\n\n    getInitializeButtonError(methodId?: CheckoutButtonMethodType): Error | undefined {\n        return this._checkoutButton.getInitializeError(methodId);\n    }\n\n    getDeinitializeButtonError(methodId?: CheckoutButtonMethodType): Error | undefined {\n        return this._checkoutButton.getDeinitializeError(methodId);\n    }\n}\n","import { InternalCheckoutSelectors } from '../checkout';\nimport { selector } from '../common/selector';\n\nimport CheckoutButtonSelector from './checkout-button-selector';\nimport { CheckoutButtonMethodType } from './strategies';\n\n@selector\nexport default class CheckoutButtonStatusSelector {\n    private _checkoutButton: CheckoutButtonSelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._checkoutButton = selectors.checkoutButton;\n    }\n\n    isInitializingButton(methodId?: CheckoutButtonMethodType): boolean {\n        return this._checkoutButton.isInitializing(methodId);\n    }\n\n    isDeinitializingButton(methodId?: CheckoutButtonMethodType): boolean {\n        return this._checkoutButton.isDeinitializing(methodId);\n    }\n}\n","import { InternalCheckoutSelectors } from '../checkout';\n\nimport CheckoutButtonErrorSelector from './checkout-button-error-selector';\nimport CheckoutButtonSelectors from './checkout-button-selectors';\nimport CheckoutButtonStatusSelector from './checkout-button-status-selector';\n\nexport default function createCheckoutButtonSelectors(selectors: InternalCheckoutSelectors): CheckoutButtonSelectors {\n    const errors = new CheckoutButtonErrorSelector(selectors);\n    const statuses = new CheckoutButtonStatusSelector(selectors);\n\n    return {\n        errors,\n        statuses,\n    };\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../checkout';\nimport { isElementId, setUniqueElementId } from '../common/dom';\n\nimport { CheckoutButtonInitializeOptions, CheckoutButtonOptions } from './checkout-button-options';\nimport CheckoutButtonSelectors from './checkout-button-selectors';\nimport CheckoutButtonStrategyActionCreator from './checkout-button-strategy-action-creator';\nimport createCheckoutButtonSelectors from './create-checkout-button-selectors';\n\nexport default class CheckoutButtonInitializer {\n    private _state: CheckoutButtonSelectors;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _store: CheckoutStore,\n        private _buttonStrategyActionCreator: CheckoutButtonStrategyActionCreator\n    ) {\n        this._state = createCheckoutButtonSelectors(this._store.getState());\n\n        this._store.subscribe(state => {\n            this._state = createCheckoutButtonSelectors(state);\n        });\n    }\n\n    /**\n     * Returns a snapshot of the current state.\n     *\n     * The method returns a new instance every time there is a change in the\n     * state. You can query the state by calling any of its getter methods.\n     *\n     * ```js\n     * const state = service.getState();\n     *\n     * console.log(state.errors.getInitializeButtonError());\n     * console.log(state.statuses.isInitializingButton());\n     * ```\n     *\n     * @returns The current customer's checkout state\n     */\n    getState(): CheckoutButtonSelectors {\n        return this._state;\n    }\n\n    /**\n     * Subscribes to any changes to the current state.\n     *\n     * The method registers a callback function and executes it every time there\n     * is a change in the current state.\n     *\n     * ```js\n     * service.subscribe(state => {\n     *     console.log(state.statuses.isInitializingButton());\n     * });\n     * ```\n     *\n     * The method can be configured to notify subscribers only regarding\n     * relevant changes, by providing a filter function.\n     *\n     * ```js\n     * const filter = state => state.errors.getInitializeButtonError();\n     *\n     * // Only trigger the subscriber when the cart changes.\n     * service.subscribe(state => {\n     *     console.log(state.errors.getInitializeButtonError())\n     * }, filter);\n     * ```\n     *\n     * @param subscriber - The function to subscribe to state changes.\n     * @param filters - One or more functions to filter out irrelevant state\n     * changes. If more than one function is provided, the subscriber will only\n     * be triggered if all conditions are met.\n     * @returns A function, if called, will unsubscribe the subscriber.\n     */\n    subscribe(\n        subscriber: (state: CheckoutButtonSelectors) => void,\n        ...filters: Array<(state: CheckoutButtonSelectors) => any>\n    ): () => void {\n        return this._store.subscribe(\n            () => subscriber(this.getState()),\n            state => state.checkoutButton.getState(),\n            ...filters.map(filter => (state: InternalCheckoutSelectors) => filter(createCheckoutButtonSelectors(state)))\n        );\n    }\n\n    /**\n     * Initializes the checkout button of a payment method.\n     *\n     * When the checkout button is initialized, it will be inserted into the DOM,\n     * ready to be interacted with by the customer.\n     *\n     * ```js\n     * initializer.initializeButton({\n     *     methodId: 'braintreepaypal',\n     *     containerId: 'checkoutButton',\n     *     braintreepaypal: {\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the checkout button.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeButton(options: CheckoutButtonInitializeOptions): Promise<CheckoutButtonSelectors> {\n        const containerIds = isElementId(options.containerId) ?\n            [options.containerId] :\n            setUniqueElementId(options.containerId, `${options.methodId}-container`);\n\n        return Promise.all(\n            containerIds.map(containerId => {\n                const action = this._buttonStrategyActionCreator.initialize({ ...options, containerId });\n                const queueId = `checkoutButtonStrategy:${options.methodId}:${containerId}`;\n\n                return this._store.dispatch(action, { queueId });\n            })\n        )\n            .then(() => this.getState());\n    }\n\n    /**\n     * De-initializes the checkout button by performing any necessary clean-ups.\n     *\n     * ```js\n     * await service.deinitializeButton({\n     *     methodId: 'braintreepaypal',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the checkout button.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeButton(options: CheckoutButtonOptions): Promise<CheckoutButtonSelectors> {\n        const action = this._buttonStrategyActionCreator.deinitialize(options);\n        const queueId = `checkoutButtonStrategy:${options.methodId}`;\n\n        return this._store.dispatch(action, { queueId })\n            .then(() => this.getState());\n    }\n}\n","enum CheckoutButtonMethodType {\n    BRAINTREE_PAYPAL = 'braintreepaypal',\n    BRAINTREE_PAYPAL_CREDIT = 'braintreepaypalcredit',\n    GOOGLEPAY_BRAINTREE = 'googlepaybraintree',\n    GOOGLEPAY_STRIPE = 'googlepaystripe',\n    MASTERPASS = 'masterpass',\n    PAYPALEXPRESS = 'paypalexpress',\n}\n\nexport default CheckoutButtonMethodType;\n","export default function isElementId(id: string): boolean {\n    return /^\\w[\\w\\-\\:\\.]*$/.test(id);\n}\n","import { uniqueId } from 'lodash';\n\nimport { InvalidArgumentError } from '../error/errors';\n\nexport default function setUniqueElementId(selector: string, idPrefix: string): string[] {\n    const containers = document.querySelectorAll(selector);\n\n    if (!containers.length) {\n        throw new InvalidArgumentError(`Unable to find any element with the specified selector: ${selector}`);\n    }\n\n    return Array.prototype.slice.call(containers)\n        .map((container: HTMLElement) => {\n            if (!container.id) {\n                container.id = uniqueId(idPrefix);\n            }\n\n            return container.id;\n        });\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, empty, of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { Registry } from '../common/registry';\nimport { PaymentMethodActionCreator } from '../payment';\n\nimport { CheckoutButtonActionType, DeinitializeButtonAction, InitializeButtonAction } from './checkout-button-actions';\nimport { CheckoutButtonInitializeOptions, CheckoutButtonOptions } from './checkout-button-options';\nimport { CheckoutButtonStrategy } from './strategies';\n\nexport default class CheckoutButtonStrategyActionCreator {\n    constructor(\n        private _registry: Registry<CheckoutButtonStrategy>,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): ThunkAction<InitializeButtonAction, InternalCheckoutSelectors> {\n        return store => {\n            const meta = { methodId: options.methodId, containerId: options.containerId };\n\n            if (store.getState().checkoutButton.isInitialized(options.methodId, options.containerId)) {\n                return empty();\n            }\n\n            return concat(\n                of(createAction(CheckoutButtonActionType.InitializeButtonRequested, undefined, meta)),\n                this._paymentMethodActionCreator.loadPaymentMethod(options.methodId, { timeout: options.timeout, useCache: true }),\n                defer(() => this._registry.get(options.methodId).initialize(options)\n                    .then(() => createAction(CheckoutButtonActionType.InitializeButtonSucceeded, undefined, meta)))\n            ).pipe(\n                catchError(error => throwErrorAction(CheckoutButtonActionType.InitializeButtonFailed, error, meta))\n            );\n        };\n    }\n\n    deinitialize(options: CheckoutButtonOptions): ThunkAction<DeinitializeButtonAction, InternalCheckoutSelectors> {\n        return store => {\n            const meta = { methodId: options.methodId };\n\n            if (!store.getState().checkoutButton.isInitialized(options.methodId)) {\n                return empty();\n            }\n\n            return concat(\n                of(createAction(CheckoutButtonActionType.DeinitializeButtonRequested, undefined, meta)),\n                defer(() => this._registry.get(options.methodId).deinitialize()\n                    .then(() => createAction(CheckoutButtonActionType.DeinitializeButtonSucceeded, undefined, meta)))\n            ).pipe(\n                catchError(error => throwErrorAction(CheckoutButtonActionType.DeinitializeButtonFailed, error, meta))\n            );\n        };\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { pick } from 'lodash';\n\nimport { Address, LegacyAddress } from '../../../address';\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, StandardError } from '../../../common/error/errors';\nimport { PaymentMethod } from '../../../payment';\nimport { BraintreeAddress, BraintreeError, BraintreePaypalCheckout, BraintreeSDKCreator, BraintreeTokenizePayload } from '../../../payment/strategies/braintree';\nimport { PaypalAuthorizeData, PaypalScriptLoader } from '../../../payment/strategies/paypal';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\n\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class BraintreePaypalButtonStrategy implements CheckoutButtonStrategy {\n    private _paypalCheckout?: BraintreePaypalCheckout;\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _braintreeSDKCreator: BraintreeSDKCreator,\n        private _paypalScriptLoader: PaypalScriptLoader,\n        private _formPoster: FormPoster,\n        private _offerCredit: boolean = false\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const paypalOptions = (this._offerCredit ? options.braintreepaypalcredit : options.braintreepaypal) || {};\n        const state = this._store.getState();\n        const paymentMethod = this._paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n        if (!paymentMethod || !paymentMethod.clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._braintreeSDKCreator.initialize(paymentMethod.clientToken);\n\n        return Promise.all([\n            this._braintreeSDKCreator.getPaypalCheckout(),\n            this._paypalScriptLoader.loadPaypal(),\n        ])\n            .then(([paypalCheckout, paypal]) => {\n                this._paypalCheckout = paypalCheckout;\n\n                const allowedSources = [];\n                const disallowedSources = [];\n\n                if (paypalOptions.allowCredit) {\n                    allowedSources.push(paypal.FUNDING.CREDIT);\n                } else {\n                    disallowedSources.push(paypal.FUNDING.CREDIT);\n                }\n\n                return paypal.Button.render({\n                    env: paymentMethod.config.testMode ? 'sandbox' : 'production',\n                    commit: paypalOptions.shouldProcessPayment ? true : false,\n                    funding: {\n                        allowed: allowedSources,\n                        disallowed: disallowedSources,\n                    },\n                    style: {\n                        shape: 'rect',\n                        label: this._offerCredit ? 'credit' : undefined,\n                        ...pick(paypalOptions.style, 'layout', 'size', 'color', 'label', 'shape', 'tagline', 'fundingicons'),\n                    },\n                    payment: () => this._setupPayment(paypalOptions.onPaymentError),\n                    onAuthorize: data => this._tokenizePayment(data, paypalOptions.shouldProcessPayment, paypalOptions.onAuthorizeError),\n                }, options.containerId);\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        this._paypalCheckout = undefined;\n        this._paymentMethod = undefined;\n\n        this._braintreeSDKCreator.teardown();\n\n        return Promise.resolve();\n    }\n\n    private _setupPayment(onError?: (error: BraintreeError | StandardError) => void): Promise<string> {\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(state => {\n                const checkout = state.checkout.getCheckout();\n                const config = state.config.getStoreConfig();\n                const customer = state.customer.getCustomer();\n                const address = customer && customer.addresses && customer.addresses[0];\n\n                if (!this._paypalCheckout) {\n                    throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n                }\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!config) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                return this._paypalCheckout.createPayment({\n                    flow: 'checkout',\n                    enableShippingAddress: true,\n                    shippingAddressEditable: false,\n                    shippingAddressOverride: address ? this._mapToBraintreeAddress(address) : undefined,\n                    amount: checkout.grandTotal,\n                    currency: config.currency.code,\n                    offerCredit: this._offerCredit,\n                });\n            })\n            .catch(error => {\n                if (onError) {\n                    onError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    private _tokenizePayment(\n        data: PaypalAuthorizeData,\n        shouldProcessPayment?: boolean,\n        onError?: (error: BraintreeError | StandardError) => void\n    ): Promise<BraintreeTokenizePayload> {\n        if (!this._paypalCheckout || !this._paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        const methodId = this._paymentMethod.id;\n\n        return Promise.all([\n            this._paypalCheckout.tokenizePayment(data),\n            this._braintreeSDKCreator.getDataCollector({ paypal: true }),\n        ])\n            .then(([payload, { deviceData }]) => {\n                this._formPoster.postForm('/checkout.php', {\n                    payment_type: 'paypal',\n                    provider: methodId,\n                    action: shouldProcessPayment ? 'process_payment' : 'set_external_checkout',\n                    nonce: payload.nonce,\n                    device_data: deviceData,\n                    shipping_address: JSON.stringify(this._mapToLegacyShippingAddress(payload)),\n                    billing_address: JSON.stringify(this._mapToLegacyBillingAddress(payload)),\n                });\n\n                return payload;\n            })\n            .catch(error => {\n                if (onError) {\n                    onError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    private _mapToLegacyShippingAddress(payload: BraintreeTokenizePayload): Partial<LegacyAddress> {\n        const shippingAddress = payload.details.shippingAddress;\n        const recipientName = shippingAddress && shippingAddress.recipientName || '';\n        const [firstName, lastName] = recipientName.split(' ');\n\n        return {\n            email: payload.details.email,\n            first_name: firstName,\n            last_name: lastName,\n            phone_number: shippingAddress && shippingAddress.phone || payload.details.phone,\n            address_line_1: shippingAddress && shippingAddress.line1,\n            address_line_2: shippingAddress && shippingAddress.line2,\n            city: shippingAddress && shippingAddress.city,\n            state: shippingAddress && shippingAddress.state,\n            country_code: shippingAddress && shippingAddress.countryCode,\n            postal_code: shippingAddress && shippingAddress.postalCode,\n        };\n    }\n\n    private _mapToLegacyBillingAddress(payload: BraintreeTokenizePayload): Partial<LegacyAddress> {\n        const billingAddress = payload.details.billingAddress;\n        const shippingAddress = payload.details.shippingAddress;\n\n        if (billingAddress) {\n            return {\n                email: payload.details.email,\n                first_name: billingAddress.firstName || payload.details.firstName,\n                last_name: billingAddress.lastName || payload.details.lastName,\n                phone_number: billingAddress.phone || payload.details.phone,\n                address_line_1: billingAddress.line1,\n                address_line_2: billingAddress.line2,\n                city: billingAddress.city,\n                state: billingAddress.state,\n                country_code: billingAddress.countryCode,\n                postal_code: billingAddress.postalCode,\n            };\n        }\n\n        return {\n            email: payload.details.email,\n            first_name: payload.details.firstName,\n            last_name: payload.details.lastName,\n            phone_number: payload.details.phone,\n            address_line_1: shippingAddress && shippingAddress.line1,\n            address_line_2: shippingAddress && shippingAddress.line2,\n            city: shippingAddress && shippingAddress.city,\n            state: shippingAddress && shippingAddress.state,\n            country_code: shippingAddress && shippingAddress.countryCode,\n            postal_code: shippingAddress && shippingAddress.postalCode,\n        };\n    }\n\n    private _mapToBraintreeAddress(address: Address): BraintreeAddress {\n        return {\n            line1: address.address1,\n            line2: address.address2,\n            city: address.city,\n            state: address.stateOrProvinceCode,\n            postalCode: address.postalCode,\n            countryCode: address.countryCode,\n            phone: address.phone,\n            recipientName: `${address.firstName} ${address.lastName}`,\n        };\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { InvalidArgumentError, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { GooglePayPaymentProcessor } from '../../../payment/strategies/googlepay';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class GooglePayButtonStrategy implements CheckoutButtonStrategy {\n    private _methodId?: string;\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _formPoster: FormPoster,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _googlePayPaymentProcessor: GooglePayPaymentProcessor\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { containerId, methodId } = options;\n\n        if (!containerId || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"containerId\" argument is not provided.');\n        }\n\n        this._methodId = methodId;\n\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(() => this._googlePayPaymentProcessor.initialize(this._getMethodId()))\n            .then(() => {\n                this._walletButton = this._createSignInButton(containerId);\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        if (this._walletButton && this._walletButton.parentNode) {\n            this._walletButton.parentNode.removeChild(this._walletButton);\n            this._walletButton = undefined;\n        }\n\n        return this._googlePayPaymentProcessor.deinitialize();\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const container = document.getElementById(containerId);\n\n        if (!container) {\n            throw new InvalidArgumentError('Unable to create sign-in button without valid container ID.');\n        }\n\n        const googlePayButton = this._googlePayPaymentProcessor.createButton(this._handleWalletButtonClick);\n\n        container.appendChild(googlePayButton);\n\n        return googlePayButton;\n    }\n\n    private _getMethodId(): string {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._methodId;\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): Promise<void> {\n        event.preventDefault();\n\n        return this._googlePayPaymentProcessor.displayWallet()\n            .then(paymentData => this._googlePayPaymentProcessor.handleSuccess(paymentData)\n            .then(() => {\n                if (paymentData.shippingAddress) {\n                    this._googlePayPaymentProcessor.updateShippingAddress(paymentData.shippingAddress);\n                }\n            }))\n            .then(() => this._onPaymentSelectComplete())\n            .catch(error => this._onError(error));\n    }\n\n    private _onPaymentSelectComplete(): void {\n        this._formPoster.postForm('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n        });\n    }\n\n    private _onError(error?: Error): void {\n        if (error && error.message !== 'CANCELED') {\n            throw error;\n        }\n    }\n}\n","import { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType\n} from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { getCallbackUrl, Masterpass, MasterpassCheckoutOptions, MasterpassScriptLoader } from '../../../payment/strategies/masterpass';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\n\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class MasterpassButtonStrategy implements CheckoutButtonStrategy {\n    private _masterpassClient?: Masterpass;\n    private _methodId?: string;\n    private _signInButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _masterpassScriptLoader: MasterpassScriptLoader\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { containerId, methodId } = options;\n\n        if (!containerId || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"containerId\" argument is not provided.');\n        }\n\n        this._methodId = methodId;\n\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!paymentMethod || !paymentMethod.initializationData.checkoutId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                return this._masterpassScriptLoader.load(paymentMethod.config.testMode);\n            })\n            .then(masterpass => {\n                this._masterpassClient = masterpass;\n                this._signInButton = this._createSignInButton(containerId);\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        if (this._signInButton && this._signInButton.parentNode) {\n            this._signInButton.removeEventListener('click', this._handleWalletButtonClick);\n            this._signInButton.parentNode.removeChild(this._signInButton);\n            this._signInButton = undefined;\n        }\n\n        return Promise.resolve();\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const buttonContainer = document.getElementById(containerId);\n\n        if (!buttonContainer) {\n            throw new Error('Need a container to place the button');\n        }\n\n        const button = document.createElement('input');\n\n        button.type = 'image';\n        button.src = 'https://static.masterpass.com/dyn/img/btn/global/mp_chk_btn_160x037px.svg';\n        buttonContainer.appendChild(button);\n\n        button.addEventListener('click', this._handleWalletButtonClick);\n\n        return button;\n    }\n\n    private _createMasterpassPayload(): MasterpassCheckoutOptions {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const paymentMethod = this._methodId ? state.paymentMethods.getPaymentMethod(this._methodId) : null;\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return {\n            checkoutId: paymentMethod.initializationData.checkoutId,\n            allowedCardTypes: paymentMethod.initializationData.allowedCardTypes,\n            amount: checkout.cart.cartAmount.toString(),\n            currency: checkout.cart.currency.code,\n            cartId: checkout.cart.id,\n            suppressShippingAddress: false,\n            callbackUrl: getCallbackUrl('cart'),\n        };\n    }\n\n    @bind\n    private _handleWalletButtonClick(): void {\n        if (!this._masterpassClient) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        this._masterpassClient.checkout(this._createMasterpassPayload());\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { pick } from 'lodash';\n\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, StandardError } from '../../../common/error/errors';\nimport { INTERNAL_USE_ONLY } from '../../../common/http-request';\nimport { PaymentMethod } from '../../../payment';\nimport { PaypalActions, PaypalAuthorizeData, PaypalClientToken } from '../../../payment/strategies/paypal';\nimport { PaypalScriptLoader } from '../../../payment/strategies/paypal';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class PaypalButtonStrategy implements CheckoutButtonStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paypalScriptLoader: PaypalScriptLoader,\n        private _formPoster: FormPoster,\n        private _host: string = ''\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const paypalOptions = options.paypal;\n        const state = this._store.getState();\n        const paymentMethod = this._paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n        if (!paypalOptions) {\n            throw new InvalidArgumentError();\n        }\n\n        return this._paypalScriptLoader.loadPaypal()\n            .then(paypal => {\n                if (!paymentMethod || !paymentMethod.config.merchantId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const merchantId = paymentMethod.config.merchantId;\n                const env = paymentMethod.config.testMode ? 'sandbox' : 'production';\n                const clientToken: PaypalClientToken = { [env]: paypalOptions.clientId };\n\n                const allowedSources = [];\n                const disallowedSources = [];\n\n                if (paypalOptions.allowCredit) {\n                    allowedSources.push(paypal.FUNDING.CREDIT);\n                } else {\n                    disallowedSources.push(paypal.FUNDING.CREDIT);\n                }\n\n                return paypal.Button.render({\n                    env,\n                    client: clientToken,\n                    commit: paypalOptions.shouldProcessPayment,\n                    funding: {\n                        allowed: allowedSources,\n                        disallowed: disallowedSources,\n                    },\n                    style: {\n                        shape: 'rect',\n                        ...pick(paypalOptions.style, 'layout', 'size', 'color', 'label', 'shape', 'tagline', 'fundingicons'),\n                    },\n                    payment: (data, actions) => this._setupPayment(merchantId, actions, paypalOptions.onPaymentError),\n                    onAuthorize: (data, actions) => this._tokenizePayment(data, actions, paypalOptions.shouldProcessPayment, paypalOptions.onAuthorizeError),\n                }, options.containerId);\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        this._paymentMethod = undefined;\n\n        return Promise.resolve();\n    }\n\n    private _setupPayment(merchantId: string, actions?: PaypalActions, onError?: (error: StandardError) => void): Promise<string> {\n        if (!actions) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(state => {\n                const cart = state.cart.getCart();\n                const cartId = cart ? cart.id : '';\n\n                return actions.request.post(`${this._host}/api/storefront/payment/paypalexpress`, { merchantId, cartId }, {\n                    headers: {\n                        'X-API-INTERNAL': INTERNAL_USE_ONLY,\n                    },\n                });\n            })\n            .then(res => res.id)\n            .catch(error => {\n                if (onError) {\n                    onError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    private _tokenizePayment(\n        data: PaypalAuthorizeData,\n        actions?: PaypalActions,\n        shouldProcessPayment?: boolean,\n        onError?: (error: StandardError) => void\n    ): Promise<void> {\n        if (!this._paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        if (!actions) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        if (!data.paymentID || !data.payerID) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        const methodId = this._paymentMethod.id;\n\n        return actions.payment.get(data.paymentID).then(payload => {\n            this._formPoster.postForm('/checkout.php', {\n                payment_type: 'paypal',\n                provider: methodId,\n                action: shouldProcessPayment ? 'process_payment' : 'set_external_checkout',\n                paymentId: data.paymentID,\n                payerId: data.payerID,\n                payerInfo: JSON.stringify(payload.payer.payer_info),\n            });\n        });\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport { createCheckoutStore } from '../checkout';\nimport { PaymentMethodActionCreator, PaymentMethodRequestSender } from '../payment';\n\nimport CheckoutButtonInitializer from './checkout-button-initializer';\nimport CheckoutButtonInitializerOptions from './checkout-button-initializer-options';\nimport CheckoutButtonStrategyActionCreator from './checkout-button-strategy-action-creator';\nimport createCheckoutButtonRegistry from './create-checkout-button-registry';\n\n/**\n * Creates an instance of `CheckoutButtonInitializer`.\n *\n * @remarks\n * ```js\n * const initializer = createCheckoutButtonInitializer();\n *\n * initializer.initializeButton({\n *     methodId: 'braintreepaypal',\n *     braintreepaypal: {\n *         container: '#checkoutButton',\n *     },\n * });\n * ```\n *\n * @alpha\n * Please note that `CheckoutButtonInitializer` is currently in an early stage\n * of development. Therefore the API is unstable and not ready for public\n * consumption.\n *\n * @param options - A set of construction options.\n * @returns an instance of `CheckoutButtonInitializer`.\n */\nexport default function createCheckoutButtonInitializer(\n    options?: CheckoutButtonInitializerOptions\n): CheckoutButtonInitializer {\n    const host = options && options.host;\n    const store = createCheckoutStore();\n    const requestSender = createRequestSender({ host });\n    const formPoster = createFormPoster({ host });\n\n    return new CheckoutButtonInitializer(\n        store,\n        new CheckoutButtonStrategyActionCreator(\n            createCheckoutButtonRegistry(store, requestSender, formPoster, host),\n            new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender))\n        )\n    );\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { CheckoutActionCreator, CheckoutRequestSender, CheckoutStore } from '../checkout';\nimport { Registry } from '../common/registry';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { BraintreeScriptLoader, BraintreeSDKCreator } from '../payment/strategies/braintree';\nimport { createGooglePayPaymentProcessor, GooglePayBraintreeInitializer, GooglePayStripeInitializer } from '../payment/strategies/googlepay';\nimport { MasterpassScriptLoader } from '../payment/strategies/masterpass';\nimport { PaypalScriptLoader } from '../payment/strategies/paypal';\n\nimport { CheckoutButtonMethodType, CheckoutButtonStrategy } from './strategies';\nimport { BraintreePaypalButtonStrategy } from './strategies/braintree';\nimport { GooglePayButtonStrategy } from './strategies/googlepay';\nimport { MasterpassButtonStrategy } from './strategies/masterpass';\nimport { PaypalButtonStrategy } from './strategies/paypal';\n\nexport default function createCheckoutButtonRegistry(\n    store: CheckoutStore,\n    requestSender: RequestSender,\n    formPoster: FormPoster,\n    host?: string\n): Registry<CheckoutButtonStrategy, CheckoutButtonMethodType> {\n    const registry = new Registry<CheckoutButtonStrategy, CheckoutButtonMethodType>();\n    const scriptLoader = getScriptLoader();\n    const checkoutActionCreator = new CheckoutActionCreator(\n        new CheckoutRequestSender(requestSender),\n        new ConfigActionCreator(new ConfigRequestSender(requestSender))\n    );\n\n    registry.register(CheckoutButtonMethodType.BRAINTREE_PAYPAL, () =>\n        new BraintreePaypalButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new BraintreeSDKCreator(new BraintreeScriptLoader(scriptLoader)),\n            new PaypalScriptLoader(scriptLoader),\n            formPoster\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.BRAINTREE_PAYPAL_CREDIT, () =>\n        new BraintreePaypalButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new BraintreeSDKCreator(new BraintreeScriptLoader(scriptLoader)),\n            new PaypalScriptLoader(scriptLoader),\n            formPoster,\n            true\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.MASTERPASS, () =>\n        new MasterpassButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new MasterpassScriptLoader(scriptLoader)\n        ));\n\n    registry.register(CheckoutButtonMethodType.GOOGLEPAY_BRAINTREE, () =>\n        new GooglePayButtonStrategy(\n            store,\n            formPoster,\n            checkoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayBraintreeInitializer(\n                    new BraintreeSDKCreator(\n                        new BraintreeScriptLoader(scriptLoader)\n                    )\n                )\n            )\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.GOOGLEPAY_STRIPE, () =>\n        new GooglePayButtonStrategy(\n            store,\n            formPoster,\n            checkoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayStripeInitializer()\n            )\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.PAYPALEXPRESS, () =>\n        new PaypalButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new PaypalScriptLoader(scriptLoader),\n            formPoster,\n            host\n        )\n    );\n\n    return registry;\n}\n","export { default as createCheckoutButtonInitializer } from './create-checkout-button-initializer';\nexport { default as checkoutButtonReducer } from './checkout-button-reducer';\nexport { default as CheckoutButtonSelector } from './checkout-button-selector';\nexport { default as CheckoutButtonState } from './checkout-button-state';\n\nexport { CheckoutButtonOptions, CheckoutButtonInitializeOptions } from './checkout-button-options';\n","export enum CheckoutIncludes {\n    AvailableShippingOptions = 'consignments.availableShippingOptions',\n    PhysicalItemsCategoryNames = 'cart.lineItems.physicalItems.categoryNames',\n    DigitalItemsCategoryNames = 'cart.lineItems.digitalItems.categoryNames',\n}\n\nexport default interface CheckoutParams {\n    include?: CheckoutIncludes[];\n}\n","module.exports = require(\"@bigcommerce/form-poster\");","import InternalLineItem from './internal-line-item';\nimport { LineItem } from './line-item';\nimport LineItemMap from './line-item-map';\nimport mapGiftCertificateToInternalLineItem from './map-gift-certificate-to-internal-line-item';\nimport mapToInternalLineItem from './map-to-internal-line-item';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalLineItems(\n    itemMap: LineItemMap,\n    decimalPlaces: number,\n    idKey: keyof LineItem = 'id'\n): InternalLineItem[] {\n    return (Object.keys(itemMap) as Array<keyof LineItemMap>)\n        .reduce((result, key) => [\n            ...result,\n            ...(itemMap[key] as LineItem[]).map((item: any) => {\n                if (key === 'giftCertificates') {\n                    return mapGiftCertificateToInternalLineItem(item, decimalPlaces);\n                }\n\n                return mapToInternalLineItem(\n                    item,\n                    mapToInternalLineItemType(key),\n                    decimalPlaces,\n                    idKey\n                );\n            }),\n        ], [] as InternalLineItem[]);\n}\n\nfunction mapToInternalLineItemType(type: string): string {\n    switch (type) {\n        case 'physicalItems':\n            return 'ItemPhysicalEntity';\n\n        case 'digitalItems':\n            return 'ItemDigitalEntity';\n\n        case 'giftCertificates':\n            return 'ItemGiftCertificateEntity';\n\n        default:\n            return '';\n    }\n}\n","export default class AmountTransformer {\n    constructor(private _decimalPlaces: number) {}\n\n    toInteger(amount: number): number {\n        return Math.round(amount * Math.pow(10, this._decimalPlaces));\n    }\n}\n","module.exports = require(\"local-storage-fallback\");","import { createErrorAction, Action } from '@bigcommerce/data-store';\nimport { concat, of, throwError, Observable } from 'rxjs';\n\nexport default function throwErrorAction<TPayload, TMeta, TType extends string>(\n    type: TType,\n    error?: TPayload,\n    meta?: TMeta\n): Observable<Action<TPayload, TMeta, TType>> {\n    if (isErrorAction(error)) {\n        return concat(of(error), throwError(createErrorAction(type, error.payload, meta)));\n    }\n\n    return throwError(createErrorAction(type, error, meta));\n}\n\nfunction isErrorAction(action: any): action is Action {\n    return action && action.type && action.error;\n}\n","import isEqual from './is-equal';\n\nexport default class CacheKeyResolver {\n    private _lastId = 0;\n    private _maps: CacheKeyMap[] = [];\n\n    getKey(...args: any[]): string {\n        const { index, map, parentMaps } = this._resolveMap(...args);\n\n        if (map && map.cacheKey) {\n            map.usedCount++;\n\n            return map.cacheKey;\n        }\n\n        return this._generateKey(parentMaps, args.slice(index));\n    }\n\n    getUsedCount(...args: any[]): number {\n        const { map } = this._resolveMap(...args);\n\n        return map ? map.usedCount : 0;\n    }\n\n    private _resolveMap(...args: any[]): ResolveResult {\n        let index = 0;\n        let parentMaps = this._maps;\n\n        while (parentMaps.length) {\n            let isMatched = false;\n\n            for (const map of parentMaps) {\n                if (!isEqual(map.value, args[index])) {\n                    continue;\n                }\n\n                if ((args.length === 0 || index === args.length - 1) && map.cacheKey) {\n                    return { index, map, parentMaps };\n                }\n\n                isMatched = true;\n                parentMaps = map.maps;\n                index++;\n\n                break;\n            }\n\n            if (!isMatched) {\n                break;\n            }\n        }\n\n        return { index, parentMaps };\n    }\n\n    private _generateKey(maps: CacheKeyMap[], args: any[]): string {\n        let index = 0;\n        let parentMaps = maps;\n        let map!: CacheKeyMap;\n\n        do {\n            map = {\n                usedCount: 1,\n                value: args[index],\n                maps: [],\n            };\n\n            parentMaps.push(map);\n\n            parentMaps = map.maps;\n            index++;\n        } while (index < args.length);\n\n        map.cacheKey = `${++this._lastId}`;\n\n        return map.cacheKey;\n    }\n}\n\ninterface CacheKeyMap {\n    maps: CacheKeyMap[];\n    value: any;\n    usedCount: number;\n    cacheKey?: string;\n}\n\ninterface ResolveResult {\n    index: number;\n    parentMaps: CacheKeyMap[];\n    map?: CacheKeyMap;\n}\n","/**\n * Decorates a class or a method by binding all its prototype methods or itself\n * to the calling instance respectively.\n */\nexport default function bindDecorator<T extends Method>(target: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T>;\nexport default function bindDecorator<T extends Constructor<object>>(target: T): T;\nexport default function bindDecorator(target: any, key?: any, descriptor?: any): any {\n    if (!key || !descriptor) {\n        return bindClassDecorator(target);\n    }\n\n    return bindMethodDecorator(target, key, descriptor);\n}\n\n/**\n * Decorates a class by binding all its prototype methods to the calling\n * instance.\n */\nexport function bindClassDecorator<T extends Constructor<object>>(target: T): T {\n    const decoratedTarget = class extends target {};\n\n    Object.getOwnPropertyNames(target.prototype)\n        .forEach(key => {\n            const descriptor = Object.getOwnPropertyDescriptor(target.prototype, key);\n\n            if (!descriptor || key === 'constructor') {\n                return;\n            }\n\n            Object.defineProperty(\n                decoratedTarget.prototype,\n                key,\n                bindMethodDecorator(target.prototype, key, descriptor)\n            );\n        });\n\n    return decoratedTarget;\n}\n\n/**\n * Decorates a method by binding it to the calling instance.\n */\nexport function bindMethodDecorator<T extends Method>(target: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T> {\n    if (typeof descriptor.value !== 'function') {\n        return descriptor;\n    }\n\n    let method: T = descriptor.value;\n\n    return {\n        get() {\n            const boundMethod = method.bind(this);\n\n            Object.defineProperty(this, key, {\n                ...descriptor,\n                value: boundMethod,\n            });\n\n            return boundMethod;\n        },\n        set(value) {\n            method = value;\n        },\n    };\n}\n\nexport type Constructor<T> = new (...args: any[]) => T;\nexport type Method = (...args: any[]) => any;\n","import { parseUrl } from '../common/url';\n\nexport default class IframeEventPoster<TEvent> {\n    private _targetOrigin: string;\n\n    constructor(\n        targetOrigin: string,\n        private _targetWindow?: Window\n    ) {\n        this._targetOrigin = targetOrigin === '*' ? '*' : parseUrl(targetOrigin).origin;\n    }\n\n    post(event: TEvent): void {\n        if (window === this._targetWindow) {\n            return;\n        }\n\n        if (!this._targetWindow) {\n            throw new Error('Unable to post message becauset target window is not set.');\n        }\n\n        this._targetWindow.postMessage(event, this._targetOrigin);\n    }\n\n    setTarget(window: Window) {\n        this._targetWindow = window;\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\nimport { from, Observable, Subscribable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { RequestErrorFactory } from '../common/error';\n\nexport default function createActionTransformer(\n    requestErrorFactory: RequestErrorFactory\n): (action: Subscribable<Action>) => Observable<Action> {\n    return action$ => from(action$).pipe(catchError<Action, never>(action => {\n        if (action instanceof Error || action.payload instanceof Error) {\n            throw action;\n        }\n\n        if (isResponse(action.payload)) {\n            const message = action.payload.body && action.payload.body.detail;\n\n            throw { ...action, payload: requestErrorFactory.createError(action.payload, message) };\n        }\n\n        throw action;\n    }));\n}\n\nfunction isResponse(object: any) {\n    if (!object || typeof object !== 'object') {\n        return false;\n    }\n\n    return ['body', 'headers', 'status', 'statusText'].every(key =>\n        object.hasOwnProperty(key)\n    );\n}\n","import { BillingAddressSelector } from '../billing';\nimport { CartSelector } from '../cart';\nimport { selector } from '../common/selector';\nimport { CouponSelector, GiftCertificateSelector } from '../coupon';\nimport { CustomerSelector } from '../customer';\nimport { ConsignmentSelector } from '../shipping';\n\nimport Checkout from './checkout';\nimport CheckoutState from './checkout-state';\n\n@selector\nexport default class CheckoutSelector {\n    constructor(\n        private _checkout: CheckoutState,\n        private _billingAddress: BillingAddressSelector,\n        private _cart: CartSelector,\n        private _consignments: ConsignmentSelector,\n        private _coupons: CouponSelector,\n        private _customer: CustomerSelector,\n        private _giftCertificates: GiftCertificateSelector\n    ) {}\n\n    getCheckout(): Checkout | undefined {\n        const { data } = this._checkout;\n        const billingAddress = this._billingAddress.getBillingAddress();\n        const cart = this._cart.getCart();\n        const customer = this._customer.getCustomer();\n        const consignments = this._consignments.getConsignments() || [];\n        const coupons = this._coupons.getCoupons() || [];\n        const giftCertificates = this._giftCertificates.getGiftCertificates() || [];\n\n        if (!data || !cart || !customer) {\n            return;\n        }\n\n        return {\n            ...data,\n            billingAddress,\n            cart,\n            customer,\n            consignments,\n            coupons,\n            giftCertificates,\n        };\n    }\n\n    getGrandTotal(useStoreCredit?: boolean): number | undefined {\n        const checkout = this.getCheckout();\n\n        if (!checkout) {\n            return;\n        }\n\n        const grandTotal = checkout.grandTotal || 0;\n        const storeCredit = checkout.customer.storeCredit || 0;\n\n        return useStoreCredit ? Math.max(grandTotal - storeCredit, 0) : grandTotal;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._checkout.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return this._checkout.statuses.isLoading === true;\n    }\n\n    getUpdateError(): Error | undefined {\n        return this._checkout.errors.updateError;\n    }\n\n    isUpdating(): boolean {\n        return this._checkout.statuses.isUpdating === true;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\nimport { omit } from 'lodash';\n\nimport { BillingAddressAction, BillingAddressActionType } from '../billing';\nimport { clearErrorReducer } from '../common/error';\nimport { CouponAction, CouponActionType, GiftCertificateAction, GiftCertificateActionType } from '../coupon';\nimport { OrderAction, OrderActionType } from '../order';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping';\n\nimport { CheckoutAction, CheckoutActionType } from './checkout-actions';\nimport CheckoutState, { CheckoutDataState, CheckoutErrorsState, CheckoutStatusesState } from './checkout-state';\n\nconst DEFAULT_STATE: CheckoutState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function checkoutReducer(\n    state: CheckoutState = DEFAULT_STATE,\n    action: Action\n): CheckoutState {\n    const reducer = combineReducers<CheckoutState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: CheckoutDataState | undefined,\n    action: CheckoutAction | BillingAddressAction | ConsignmentAction | CouponAction | GiftCertificateAction | OrderAction\n): CheckoutDataState | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return action.payload\n            ? omit({ ...data, ...action.payload }, ['billingAddress', 'cart', 'consignments', 'customer', 'coupons', 'giftCertifcates'])\n            : data;\n\n    case OrderActionType.SubmitOrderSucceeded:\n        return action.payload && data\n            ? { ...data, orderId: action.payload.order.orderId }\n            : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CheckoutErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction | OrderAction\n): CheckoutErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return {\n            ...errors,\n            loadError: undefined,\n        };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return {\n            ...errors,\n            loadError: action.payload,\n        };\n\n    case CheckoutActionType.UpdateCheckoutRequested:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n        return {\n            ...errors,\n            updateError: undefined,\n        };\n\n    case CheckoutActionType.UpdateCheckoutFailed:\n        return {\n            ...errors,\n            updateError: action.payload,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CheckoutStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction | OrderAction\n): CheckoutStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return {\n            ...statuses,\n            isLoading: true,\n        };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return {\n            ...statuses,\n            isLoading: false,\n        };\n\n    case CheckoutActionType.UpdateCheckoutRequested:\n        return {\n            ...statuses,\n            isUpdating: true,\n        };\n\n    case CheckoutActionType.UpdateCheckoutFailed:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n        return {\n            ...statuses,\n            isUpdating: false,\n        };\n\n    default:\n        return statuses;\n    }\n}\n","import { AmountTransformer } from '../common/utility';\n\nimport InternalLineItem from './internal-line-item';\nimport { GiftCertificateItem } from './line-item';\n\nexport default function mapGiftCertificateToInternalLineItem(\n    item: GiftCertificateItem,\n    decimalPlaces: number\n): InternalLineItem {\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: item.id,\n        imageUrl: '',\n        name: item.name,\n        amount: item.amount,\n        amountAfterDiscount: item.amount,\n        discount: 0,\n        integerAmount: amountTransformer.toInteger(item.amount),\n        integerAmountAfterDiscount: amountTransformer.toInteger(item.amount),\n        integerDiscount: 0,\n        quantity: 1,\n        sender: item.sender,\n        recipient: item.recipient,\n        type: 'ItemGiftCertificateEntity',\n        attributes: [],\n        variantId: null,\n    };\n}\n","import { AmountTransformer } from '../common/utility';\n\nimport InternalLineItem from './internal-line-item';\nimport { DigitalItem, LineItem } from './line-item';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalLineItem(\n    item: LineItem,\n    type: string,\n    decimalPlaces: number,\n    idKey: keyof LineItem = 'id'\n): InternalLineItem {\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: (item[idKey] as string | number),\n        imageUrl: item.imageUrl,\n        amount: item.extendedListPrice,\n        amountAfterDiscount: item.extendedSalePrice,\n        discount: item.discountAmount,\n        integerAmount: amountTransformer.toInteger(item.extendedListPrice),\n        integerAmountAfterDiscount: amountTransformer.toInteger(item.extendedSalePrice),\n        integerDiscount: amountTransformer.toInteger(item.discountAmount),\n        downloadsPageUrl: (item as DigitalItem).downloadPageUrl,\n        name: item.name,\n        quantity: item.quantity,\n        brand: item.brand,\n        categoryNames: item.categoryNames,\n        variantId: item.variantId,\n        productId: item.productId,\n        attributes: (item.options || []).map(option => ({\n            name: option.name,\n            value: option.value,\n        })),\n        addedByPromotion: item.addedByPromotion,\n        type,\n    };\n}\n","import { selector } from '../common/selector';\n\nimport BillingAddress from './billing-address';\nimport BillingAddressState from './billing-address-state';\n\n@selector\nexport default class BillingAddressSelector {\n    constructor(\n        private _billingAddress: BillingAddressState\n    ) {}\n\n    getBillingAddress(): BillingAddress | undefined {\n        return this._billingAddress.data;\n    }\n\n    getUpdateError(): Error | undefined {\n        return this._billingAddress.errors.updateError;\n    }\n\n    getContinueAsGuestError(): Error | undefined {\n        return this._billingAddress.errors.continueAsGuestError;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._billingAddress.errors.loadError;\n    }\n\n    isUpdating(): boolean {\n        return !!this._billingAddress.statuses.isUpdating;\n    }\n\n    isContinuingAsGuest(): boolean {\n        return !!this._billingAddress.statuses.isContinuingAsGuest;\n    }\n\n    isLoading(): boolean {\n        return !!this._billingAddress.statuses.isLoading;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport Config, { ContextConfig, StoreConfig } from './config';\nimport ConfigState from './config-state';\n\n@selector\nexport default class ConfigSelector {\n    constructor(\n        private _config: ConfigState\n    ) {}\n\n    getConfig(): Config | undefined {\n        return this._config.data;\n    }\n\n    getStoreConfig(): StoreConfig | undefined {\n        return this._config.data && this._config.data.storeConfig;\n    }\n\n    getContextConfig(): ContextConfig | undefined {\n        return this._config.data && this._config.data.context;\n    }\n\n    getExternalSource(): string | undefined {\n        return this._config.meta && this._config.meta.externalSource;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._config.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return !!this._config.statuses.isLoading;\n    }\n}\n","import { find } from 'lodash';\n\nimport { selector } from '../common/selector';\nimport { ConfigState } from '../config';\nimport { Country } from '../geography';\n\nimport FormField from './form-field';\n\n@selector\nexport default class FormSelector {\n    constructor(\n        private _config: ConfigState\n    ) {}\n\n    getShippingAddressFields(countries: Country[] = [], countryCode: string): FormField[] {\n        const selectedCountry = find(countries, { code: countryCode });\n        const fields = this._config.data ? this._config.data.storeConfig.formFields.shippingAddressFields : [];\n\n        return fields.map((field: any) => this._processField(field, countries, selectedCountry));\n    }\n\n    getBillingAddressFields(countries: Country[] = [], countryCode: string): FormField[] {\n        const selectedCountry = find(countries, { code: countryCode });\n        const fields = this._config.data ? this._config.data.storeConfig.formFields.billingAddressFields : [];\n\n        return fields.map((field: any) => this._processField(field, countries, selectedCountry));\n    }\n\n    private _processField(field: FormField, countries: Country[], selectedCountry?: Country): FormField {\n        if (field.name === 'countryCode') {\n            return this._processCountry(field, countries, selectedCountry);\n        }\n\n        if (field.name === 'stateOrProvince') {\n            return this._processProvince(field, selectedCountry);\n        }\n\n        if (field.name === 'postalCode') {\n            return this._processsPostCode(field, selectedCountry);\n        }\n\n        return field;\n    }\n\n    private _processCountry(field: FormField, countries: Country[] = [], country?: Country): FormField {\n        if (!countries.length) {\n            return field;\n        }\n\n        const { code = '' } = country || {};\n        const items = countries.map(({ code, name }: any) => ({\n            value: code,\n            label: name,\n        }));\n\n        return {\n            ...field,\n            options: { items },\n            default: code,\n            type: 'array',\n            fieldType: 'dropdown',\n            itemtype: 'string',\n        };\n    }\n\n    private _processProvince(field: FormField, country?: Country): FormField {\n        const { subdivisions = [] } = country || {};\n\n        if (!subdivisions.length) {\n            return {\n                ...field,\n                required: false,\n            };\n        }\n\n        const items = subdivisions.map(({ code, name }: any) => ({\n            value: code,\n            label: name,\n        }));\n\n        return {\n            ...field,\n            name: 'stateOrProvinceCode',\n            options: { items },\n            required: true,\n            type: 'array',\n            fieldType: 'dropdown',\n            itemtype: 'string',\n        };\n    }\n\n    private _processsPostCode(field: FormField, country?: Country): FormField {\n        const { hasPostalCodes = [] } = country || {};\n\n        if (hasPostalCodes === undefined) {\n            return field;\n        }\n\n        return { ...field, required: Boolean(hasPostalCodes) };\n    }\n}\n","import { selector } from '../common/selector';\n\nimport Country from './country';\nimport CountryState from './country-state';\n\n@selector\nexport default class CountrySelector {\n    constructor(\n        private _countries: CountryState\n    ) {}\n\n    getCountries(): Country[] | undefined {\n        return this._countries.data;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._countries.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return !!this._countries.statuses.isLoading;\n    }\n}\n","import { find } from 'lodash';\n\nimport { CheckoutPayment, CheckoutSelector } from '../checkout';\nimport { selector } from '../common/selector';\nimport { GatewayOrderPayment, InternalOrderPayment, OrderSelector } from '../order';\n\nimport PaymentMethod from './payment-method';\nimport { HOSTED } from './payment-method-types';\nimport { ACKNOWLEDGE, FINALIZE } from './payment-status-types';\n\n@selector\nexport default class PaymentSelector {\n    constructor(\n        private _checkout: CheckoutSelector,\n        private _order: OrderSelector\n    ) {}\n\n    getPaymentId(): { providerId: string, gatewayId?: string } | undefined {\n        const internalPayment = this._getInternalPayment();\n\n        if (internalPayment && internalPayment.id) {\n            return {\n                providerId: internalPayment.id,\n                gatewayId: internalPayment.gateway,\n            };\n        }\n\n        const payment = this._getHostedPayment() || this._getGatewayPayment();\n\n        if (payment && payment.providerId) {\n            return {\n                providerId: payment.providerId,\n                gatewayId: payment.gatewayId,\n            };\n        }\n    }\n\n    getPaymentStatus(): string | undefined {\n        const internalPayment = this._getInternalPayment();\n\n        if (internalPayment && internalPayment.status) {\n            return internalPayment.status.replace('PAYMENT_STATUS_', '');\n        }\n\n        const payment = this._getHostedPayment() || this._getGatewayPayment();\n\n        if (payment) {\n            return payment.detail.step;\n        }\n    }\n\n    getPaymentToken(): string | undefined {\n        const meta = this._order.getOrderMeta();\n\n        return meta && meta.token;\n    }\n\n    getPaymentRedirectUrl(): string | undefined {\n        const payment = this._getInternalPayment();\n\n        return payment && payment.redirectUrl;\n    }\n\n    isPaymentDataRequired(useStoreCredit: boolean = false): boolean {\n        const grandTotal = this._checkout.getGrandTotal(useStoreCredit);\n\n        return grandTotal ? grandTotal > 0 : false;\n    }\n\n    isPaymentDataSubmitted(paymentMethod?: PaymentMethod): boolean {\n        if (paymentMethod && paymentMethod.nonce) {\n            return true;\n        }\n\n        return this.getPaymentStatus() === ACKNOWLEDGE || this.getPaymentStatus() === FINALIZE;\n    }\n\n    private _getInternalPayment(): InternalOrderPayment | undefined {\n        const meta = this._order.getOrderMeta();\n\n        return meta && meta.payment;\n    }\n\n    private _getGatewayPayment(): GatewayOrderPayment | undefined {\n        const order = this._order.getOrder();\n\n        return find(order && order.payments, ({ providerId }) =>\n            providerId !== 'giftcertificate' && providerId !== 'storecredit'\n        ) as GatewayOrderPayment;\n    }\n\n    private _getHostedPayment(): CheckoutPayment | undefined {\n        const checkout = this._checkout.getCheckout();\n\n        return find(checkout && checkout.payments, ({ providerType }) =>\n            providerType === HOSTED\n        );\n    }\n}\n","import { find } from 'lodash';\n\nimport { selector } from '../common/selector';\n\nimport PaymentMethod from './payment-method';\nimport PaymentMethodMeta from './payment-method-meta';\nimport PaymentMethodState from './payment-method-state';\n\n@selector\nexport default class PaymentMethodSelector {\n    constructor(\n        private _paymentMethods: PaymentMethodState\n    ) {}\n\n    getPaymentMethods(): PaymentMethod[] | undefined {\n        return this._paymentMethods.data;\n    }\n\n    getPaymentMethodsMeta(): PaymentMethodMeta | undefined {\n        return this._paymentMethods.meta;\n    }\n\n    getPaymentMethod(methodId: string, gatewayId?: string): PaymentMethod | undefined {\n        return gatewayId ?\n            find(this._paymentMethods.data, { id: methodId, gateway: gatewayId }) :\n            find(this._paymentMethods.data, { id: methodId });\n    }\n\n    getLoadError(): Error | undefined {\n        return this._paymentMethods.errors && this._paymentMethods.errors.loadError;\n    }\n\n    getLoadMethodError(methodId?: string): Error | undefined {\n        if (methodId && this._paymentMethods.errors.loadMethodId !== methodId) {\n            return;\n        }\n\n        return this._paymentMethods.errors.loadMethodError;\n    }\n\n    isLoading(): boolean {\n        return !!this._paymentMethods.statuses.isLoading;\n    }\n\n    isLoadingMethod(methodId?: string): boolean {\n        if (methodId && this._paymentMethods.statuses.loadMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._paymentMethods.statuses.isLoadingMethod;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport PaymentStrategyState, { DEFAULT_STATE } from './payment-strategy-state';\n\n@selector\nexport default class PaymentStrategySelector {\n    constructor(\n        private _paymentStrategies: PaymentStrategyState = DEFAULT_STATE\n    ) {}\n\n    getInitializeError(methodId?: string): Error | undefined {\n        if (methodId && this._paymentStrategies.errors.initializeMethodId !== methodId) {\n            return;\n        }\n\n        return this._paymentStrategies.errors.initializeError;\n    }\n\n    getExecuteError(methodId?: string): Error | undefined {\n        if (methodId && this._paymentStrategies.errors.executeMethodId !== methodId) {\n            return;\n        }\n\n        return this._paymentStrategies.errors.executeError;\n    }\n\n    getFinalizeError(methodId?: string): Error | undefined {\n        if (methodId && this._paymentStrategies.errors.finalizeMethodId !== methodId) {\n            return;\n        }\n\n        return this._paymentStrategies.errors.finalizeError;\n    }\n\n    getWidgetInteractingError(methodId?: string): Error | undefined {\n        if (methodId && this._paymentStrategies.errors.widgetInteractionMethodId !== methodId) {\n            return;\n        }\n\n        return this._paymentStrategies.errors.widgetInteractionError;\n    }\n\n    isInitializing(methodId?: string): boolean {\n        if (methodId && this._paymentStrategies.statuses.initializeMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._paymentStrategies.statuses.isInitializing;\n    }\n\n    isInitialized(methodId: string): boolean {\n        return !!(\n            this._paymentStrategies.data[methodId] &&\n            this._paymentStrategies.data[methodId].isInitialized\n        );\n    }\n\n    isExecuting(methodId?: string): boolean {\n        if (methodId && this._paymentStrategies.statuses.executeMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._paymentStrategies.statuses.isExecuting;\n    }\n\n    isFinalizing(methodId?: string): boolean {\n        if (methodId && this._paymentStrategies.statuses.finalizeMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._paymentStrategies.statuses.isFinalizing;\n    }\n\n    isWidgetInteracting(methodId?: string): boolean {\n        if (methodId && this._paymentStrategies.statuses.widgetInteractionMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._paymentStrategies.statuses.isWidgetInteracting;\n    }\n}\n","import Instrument from './instrument';\nimport InstrumentState, { InstrumentMeta } from './instrument-state';\n\nexport default class InstrumentSelector {\n    constructor(\n        private _instruments: InstrumentState\n    ) {}\n\n    getInstruments(): Instrument[] | undefined {\n        return this._instruments.data;\n    }\n\n    getInstrumentsMeta(): InstrumentMeta | undefined {\n        return this._instruments.meta;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._instruments.errors && this._instruments.errors.loadError;\n    }\n\n    getDeleteError(instrumentId?: string): Error | undefined {\n        if (!this._instruments.errors || (instrumentId && this._instruments.errors.failedInstrument !== instrumentId)) {\n            return;\n        }\n\n        return this._instruments.errors.deleteError;\n    }\n\n    isLoading(): boolean {\n        return !!(this._instruments.statuses && this._instruments.statuses.isLoading);\n    }\n\n    isDeleting(instrumentId?: string): boolean {\n        if (!this._instruments.statuses || (instrumentId && this._instruments.statuses.deletingInstrument !== instrumentId)) {\n            return false;\n        }\n\n        return !!this._instruments.statuses.isDeleting;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport RemoteCheckoutState, { RemoteCheckoutStateData } from './remote-checkout-state';\n\n@selector\nexport default class RemoteCheckoutSelector {\n    constructor(\n        private _remoteCheckout: RemoteCheckoutState\n    ) {}\n\n    getCheckout<TMethodId extends keyof RemoteCheckoutStateData>(\n        methodId: TMethodId\n    ): RemoteCheckoutStateData[TMethodId] | undefined {\n        return this._remoteCheckout.data[methodId];\n    }\n}\n","import { BillingAddressSelector } from '../billing';\nimport { CartSelector } from '../cart';\nimport { CheckoutButtonSelector } from '../checkout-buttons';\nimport { createFreezeProxies } from '../common/utility';\nimport { ConfigSelector } from '../config';\nimport { CouponSelector, GiftCertificateSelector } from '../coupon';\nimport { CustomerSelector, CustomerStrategySelector } from '../customer';\nimport { FormSelector } from '../form';\nimport { CountrySelector } from '../geography';\nimport { OrderSelector } from '../order';\nimport { PaymentSelector } from '../payment';\nimport { PaymentMethodSelector, PaymentStrategySelector } from '../payment';\nimport { InstrumentSelector } from '../payment/instrument';\nimport { RemoteCheckoutSelector } from '../remote-checkout';\nimport { ConsignmentSelector, ShippingAddressSelector, ShippingCountrySelector, ShippingStrategySelector } from '../shipping';\n\nimport CheckoutSelector from './checkout-selector';\nimport { CheckoutStoreOptions } from './checkout-store';\nimport CheckoutStoreState from './checkout-store-state';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\nexport default function createInternalCheckoutSelectors(state: CheckoutStoreState, options: CheckoutStoreOptions = {}): InternalCheckoutSelectors {\n    const billingAddress = new BillingAddressSelector(state.billingAddress);\n    const cart = new CartSelector(state.cart);\n    const checkoutButton = new CheckoutButtonSelector(state.checkoutButton);\n    const config = new ConfigSelector(state.config);\n    const countries = new CountrySelector(state.countries);\n    const coupons = new CouponSelector(state.coupons);\n    const customer = new CustomerSelector(state.customer);\n    const customerStrategies = new CustomerStrategySelector(state.customerStrategies);\n    const form = new FormSelector(state.config);\n    const giftCertificates = new GiftCertificateSelector(state.giftCertificates);\n    const instruments = new InstrumentSelector(state.instruments);\n    const paymentMethods = new PaymentMethodSelector(state.paymentMethods);\n    const paymentStrategies = new PaymentStrategySelector(state.paymentStrategies);\n    const shippingAddress = new ShippingAddressSelector(state.consignments);\n    const remoteCheckout = new RemoteCheckoutSelector(state.remoteCheckout);\n    const shippingCountries = new ShippingCountrySelector(state.shippingCountries);\n    const shippingStrategies = new ShippingStrategySelector(state.shippingStrategies);\n\n    // Compose selectors\n    const consignments = new ConsignmentSelector(state.consignments, cart);\n    const checkout = new CheckoutSelector(state.checkout, billingAddress, cart, consignments, coupons, customer, giftCertificates);\n    const order = new OrderSelector(state.order, billingAddress, coupons);\n    const payment = new PaymentSelector(checkout, order);\n\n    const selectors = {\n        billingAddress,\n        cart,\n        checkout,\n        checkoutButton,\n        config,\n        consignments,\n        countries,\n        coupons,\n        customer,\n        customerStrategies,\n        form,\n        giftCertificates,\n        instruments,\n        order,\n        payment,\n        paymentMethods,\n        paymentStrategies,\n        remoteCheckout,\n        shippingAddress,\n        shippingCountries,\n        shippingStrategies,\n    };\n\n    return options.shouldWarnMutation ? createFreezeProxies(selectors) : selectors;\n}\n","export default function setPrototypeOf(object: any, prototype: object) {\n    if (Object.setPrototypeOf) {\n        Object.setPrototypeOf(object, prototype);\n    } else {\n        object.__proto__ = prototype;\n    }\n\n    return object;\n}\n","export default function isPrivate(key: string): boolean {\n    return `${key}`.indexOf('$$') === 0 || `${key}`.indexOf('_') === 0;\n}\n","import { isPlainObject, omitBy, transform } from 'lodash';\n\nexport default function omitDeep(object: any, predicate: (value: any, key: string) => boolean): any {\n    if (Array.isArray(object)) {\n        return object.map(value => omitDeep(value, predicate));\n    }\n\n    if (isPlainObject(object)) {\n        return transform(omitBy(object, predicate), (result, value, key) => {\n            result[key] = omitDeep(value, predicate);\n        }, {});\n    }\n\n    return object;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum ErrorActionType {\n    ClearError = 'CLEAR_ERROR',\n}\n\nexport type ErrorAction = ClearErrorAction;\n\nexport interface ClearErrorAction extends Action {\n    type: ErrorActionType.ClearError;\n    payload: Error;\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { cachableAction, ActionOptions } from '../common/action';\nimport { RequestOptions } from '../common/http-request';\n\nimport { LoadPaymentMethodsAction, LoadPaymentMethodAction, PaymentMethodActionType } from './payment-method-actions';\nimport PaymentMethodRequestSender from './payment-method-request-sender';\n\nexport default class PaymentMethodActionCreator {\n    constructor(\n        private _requestSender: PaymentMethodRequestSender\n    ) {}\n\n    loadPaymentMethods(options?: RequestOptions): Observable<LoadPaymentMethodsAction> {\n        return Observable.create((observer: Observer<LoadPaymentMethodsAction>) => {\n            observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodsRequested));\n\n            this._requestSender.loadPaymentMethods(options)\n                .then(response => {\n                    const meta = {\n                        deviceSessionId: response.headers['x-device-session-id'],\n                        sessionHash: response.headers['x-session-hash'],\n                    };\n\n                    observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodsSucceeded, response.body, meta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(PaymentMethodActionType.LoadPaymentMethodsFailed, response));\n                });\n        });\n    }\n\n    @cachableAction\n    loadPaymentMethod(methodId: string, options?: RequestOptions & ActionOptions): Observable<LoadPaymentMethodAction> {\n        return Observable.create((observer: Observer<LoadPaymentMethodAction>) => {\n            observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodRequested, undefined, { methodId }));\n\n            this._requestSender.loadPaymentMethod(methodId, options)\n                .then(response => {\n                    observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodSucceeded, response.body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(PaymentMethodActionType.LoadPaymentMethodFailed, response, { methodId }));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, INTERNAL_USE_ONLY, RequestOptions } from '../common/http-request';\n\nimport PaymentMethod from './payment-method';\n\nexport default class PaymentMethodRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadPaymentMethods({ timeout }: RequestOptions = {}): Promise<Response<PaymentMethod[]>> {\n        const url = '/api/storefront/payments';\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n        });\n    }\n\n    loadPaymentMethod(methodId: string, { timeout }: RequestOptions = {}): Promise<Response<PaymentMethod>> {\n        const url = `/api/storefront/payments/${methodId}`;\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n        });\n    }\n}\n","import EmbeddedCheckoutStyles from '../embedded-checkout-styles';\n\nexport enum EmbeddedContentEventType {\n    StyleConfigured = 'STYLE_CONFIGURED',\n}\n\nexport interface EmbeddedContentEventMap {\n    [EmbeddedContentEventType.StyleConfigured]: EmbeddedContentStyleConfiguredEvent;\n}\n\nexport type EmbeddedContentEvent = (\n    EmbeddedContentStyleConfiguredEvent\n);\n\nexport interface EmbeddedContentStyleConfiguredEvent {\n    type: EmbeddedContentEventType.StyleConfigured;\n    payload: EmbeddedCheckoutStyles;\n}\n","import { parseUrl } from '../common/url';\nimport { bindDecorator as bind } from '../common/utility';\n\nimport { IframeEventMap } from './iframe-event';\nimport isIframeEvent from './is-iframe-event';\n\nexport default class IframeEventListener<TEventMap extends IframeEventMap<keyof TEventMap>> {\n    private _isListening: boolean;\n    private _listeners: EventListeners<TEventMap>;\n    private _sourceOrigin: string;\n\n    constructor(\n        sourceOrigin: string\n    ) {\n        this._sourceOrigin = parseUrl(sourceOrigin).origin;\n        this._isListening = false;\n        this._listeners = {};\n    }\n\n    listen(): void {\n        if (this._isListening) {\n            return;\n        }\n\n        this._isListening = true;\n\n        window.addEventListener('message', this._handleMessage);\n    }\n\n    stopListen(): void {\n        if (!this._isListening) {\n            return;\n        }\n\n        this._isListening = false;\n\n        window.removeEventListener('message', this._handleMessage);\n    }\n\n    addListener<TType extends keyof TEventMap>(type: TType, listener: (event: TEventMap[TType]) => void): void {\n        let listeners = this._listeners[type];\n\n        if (!listeners) {\n            this._listeners[type] = listeners = [];\n        }\n\n        listeners.push(listener);\n    }\n\n    removeListener<TType extends keyof TEventMap>(type: TType, listener: (event: TEventMap[TType]) => void): void {\n        const listeners = this._listeners[type];\n\n        if (!listeners) {\n            return;\n        }\n\n        const index = listeners.indexOf(listener);\n\n        if (index >= 0) {\n            listeners.splice(index, 1);\n        }\n    }\n\n    trigger<TType extends keyof TEventMap>(event: TEventMap[TType]): void {\n        const listeners = this._listeners[event.type];\n\n        if (!listeners) {\n            return;\n        }\n\n        listeners.forEach(listener => listener(event));\n    }\n\n    @bind\n    private _handleMessage(event: MessageEvent): void {\n        if ((event.origin !== this._sourceOrigin) || !isIframeEvent(event.data, event.data.type)) {\n            return;\n        }\n\n        this.trigger(event.data);\n    }\n}\n\ntype EventListeners<TEventMap> = {\n    [key in keyof TEventMap]?: Array<(event: TEventMap[keyof TEventMap]) => void>;\n};\n","export const INTERNAL_USE_ONLY = 'This API endpoint is for internal use only and may change in the future';\n","import { find, some, values } from 'lodash';\n\nimport { selector } from '../common/selector';\n\nimport CheckoutButtonState from './checkout-button-state';\nimport { CheckoutButtonMethodType } from './strategies';\n\n@selector\nexport default class CheckoutButtonSelector {\n    constructor(\n        private _checkoutButton: CheckoutButtonState\n    ) {}\n\n    getState(): CheckoutButtonState {\n        return this._checkoutButton;\n    }\n\n    isInitializing(methodId?: CheckoutButtonMethodType): boolean {\n        if (methodId) {\n            const method = this._checkoutButton.statuses[methodId];\n\n            return (method && method.isInitializing) === true;\n        }\n\n        return some(this._checkoutButton.statuses, { isInitializing: true });\n    }\n\n    isInitialized(methodId: CheckoutButtonMethodType, containerId?: string): boolean {\n        const method = this._checkoutButton.data[methodId];\n\n        if (!method) {\n            return false;\n        }\n\n        if (!containerId) {\n            return some(method.initializedContainers, isInitialized => isInitialized === true);\n        }\n\n        return method.initializedContainers[containerId] === true;\n    }\n\n    isDeinitializing(methodId?: CheckoutButtonMethodType): boolean {\n        if (methodId) {\n            const method = this._checkoutButton.statuses[methodId];\n\n            return (method && method.isDeinitializing) === true;\n        }\n\n        return some(this._checkoutButton.statuses, { isDeinitializing: true });\n    }\n\n    getInitializeError(methodId?: CheckoutButtonMethodType): Error | undefined {\n        const method = methodId ?\n            this._checkoutButton.errors[methodId] :\n            find(values(this._checkoutButton.errors), method => !!(method && method.initializeError));\n\n        return method && method.initializeError;\n    }\n\n    getDeinitializeError(methodId?: CheckoutButtonMethodType): Error | undefined {\n        const method = methodId ?\n            this._checkoutButton.errors[methodId] :\n            find(values(this._checkoutButton.errors), method => !!(method && method.deinitializeError));\n\n        return method && method.deinitializeError;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutButtonAction, CheckoutButtonActionType } from './checkout-button-actions';\nimport CheckoutButtonState, { CheckoutButtonDataState, CheckoutButtonErrorsState, CheckoutButtonStatusesState } from './checkout-button-state';\n\nconst DEFAULT_STATE: CheckoutButtonState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n\nconst DEFAULT_DATA_STATE: CheckoutButtonDataState = { initializedContainers: {} };\nconst DEFAULT_ERROR_STATE: CheckoutButtonErrorsState = {};\nconst DEFAULT_STATUS_STATE: CheckoutButtonStatusesState = {};\n\nexport default function checkoutButtonReducer(\n    state: CheckoutButtonState = DEFAULT_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonState {\n    if (!action.meta || !action.meta.methodId) {\n        return state;\n    }\n\n    const reducer = combineReducers<CheckoutButtonState>({\n        data: combineReducers({\n            [action.meta.methodId]: dataReducer,\n        }),\n        errors: combineReducers({\n            [action.meta.methodId]: errorsReducer,\n        }),\n        statuses: combineReducers({\n            [action.meta.methodId]: statusesReducer,\n        }),\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: CheckoutButtonDataState = DEFAULT_DATA_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonDataState {\n    switch (action.type) {\n    case CheckoutButtonActionType.InitializeButtonSucceeded:\n        if (!action.meta || !action.meta.containerId) {\n            return data;\n        }\n\n        return {\n            ...data,\n            initializedContainers: {\n                ...data.initializedContainers,\n                [action.meta.containerId]: true,\n            },\n        };\n\n    case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n        return {\n            ...data,\n            initializedContainers: {},\n        };\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: CheckoutButtonErrorsState = DEFAULT_ERROR_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonErrorsState {\n    switch (action.type) {\n    case CheckoutButtonActionType.InitializeButtonRequested:\n    case CheckoutButtonActionType.InitializeButtonSucceeded:\n        return {\n            ...errors,\n            initializeError: undefined,\n        };\n\n    case CheckoutButtonActionType.InitializeButtonFailed:\n        return {\n            ...errors,\n            initializeError: action.payload,\n        };\n\n    case CheckoutButtonActionType.DeinitializeButtonRequested:\n    case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n        return {\n            ...errors,\n            deinitializeError: undefined,\n        };\n\n    case CheckoutButtonActionType.DeinitializeButtonFailed:\n        return {\n            ...errors,\n            deinitializeError: action.payload,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CheckoutButtonStatusesState = DEFAULT_STATUS_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonStatusesState {\n    switch (action.type) {\n    case CheckoutButtonActionType.InitializeButtonRequested:\n        return {\n            ...statuses,\n            isInitializing: true,\n        };\n\n    case CheckoutButtonActionType.InitializeButtonFailed:\n    case CheckoutButtonActionType.InitializeButtonSucceeded:\n        return {\n            ...statuses,\n            isInitializing: false,\n        };\n\n    case CheckoutButtonActionType.DeinitializeButtonRequested:\n        return {\n            ...statuses,\n            isDeinitializing: true,\n        };\n\n    case CheckoutButtonActionType.DeinitializeButtonFailed:\n    case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n        return {\n            ...statuses,\n            isDeinitializing: false,\n        };\n\n    default:\n        return statuses;\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport enum NotEmbeddableErrorType {\n    MissingContainer = 'missing_container',\n    MissingContent = 'missing_content',\n    UnknownError = 'unknown_error',\n}\n\nexport default class NotEmbeddableError extends StandardError {\n    constructor(\n        message?: string,\n        public subtype: NotEmbeddableErrorType = NotEmbeddableErrorType.UnknownError\n    ) {\n        super(message || 'Unable to embed the checkout form.');\n\n        this.type = 'not_embeddable';\n    }\n}\n","import { default as storage } from 'local-storage-fallback';\n\nexport default class BrowserStorage {\n    constructor(\n        private _namespace: string\n    ) {}\n\n    getItem<TValue = any>(key: string): TValue | null {\n        const rawValue = storage.getItem(this.withNamespace(key));\n\n        if (rawValue === null) {\n            return null;\n        }\n\n        try {\n            return JSON.parse(rawValue);\n        } catch (error) {\n            // Clean up invalid values\n            this.removeItem(this.withNamespace(key));\n\n            return null;\n        }\n    }\n\n    getItemOnce<TValue = any>(key: string): TValue | null {\n        const value = this.getItem(key);\n\n        this.removeItem(key);\n\n        return value;\n    }\n\n    setItem<TValue = any>(key: string, value: TValue): void {\n        return storage.setItem(this.withNamespace(key), JSON.stringify(value));\n    }\n\n    removeItem(key: string): void {\n        return storage.removeItem(this.withNamespace(key));\n    }\n\n    private withNamespace(key: string): string {\n        return `${this._namespace}.${key}`;\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { InternalErrorResponseBody } from '../../common/error';\nimport { RequestError } from '../../common/error/errors';\n\nexport default class InvalidLoginTokenError extends RequestError {\n    constructor(response: Response<InternalErrorResponseBody>) {\n        super(response, { message: response.body.title });\n\n        this.type = 'invalid_login_token';\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { IFrameComponent } from 'iframe-resizer';\n\nimport { BrowserStorage } from '../common/storage';\nimport { parseUrl } from '../common/url';\n\nimport EmbeddedCheckoutError from './embedded-checkout-error';\nimport { EmbeddedCheckoutEventMap, EmbeddedCheckoutEventType } from './embedded-checkout-events';\nimport EmbeddedCheckoutOptions from './embedded-checkout-options';\nimport { InvalidLoginTokenError, NotEmbeddableError, NotEmbeddableErrorType } from './errors';\nimport { EmbeddedContentEvent, EmbeddedContentEventType } from './iframe-content/embedded-content-events';\nimport IframeEventListener from './iframe-event-listener';\nimport IframeEventPoster from './iframe-event-poster';\nimport LoadingIndicator from './loading-indicator';\nimport ResizableIframeCreator from './resizable-iframe-creator';\n\nconst CAN_RETRY_ALLOW_COOKIE = 'canRetryAllowCookie';\nconst IS_COOKIE_ALLOWED_KEY = 'isCookieAllowed';\n\nexport default class EmbeddedCheckout {\n    private _iframe?: IFrameComponent;\n    private _isAttached: boolean;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _iframeCreator: ResizableIframeCreator,\n        private _messageListener: IframeEventListener<EmbeddedCheckoutEventMap>,\n        private _messagePoster: IframeEventPoster<EmbeddedContentEvent>,\n        private _loadingIndicator: LoadingIndicator,\n        private _requestSender: RequestSender,\n        private _storage: BrowserStorage,\n        private _location: Location,\n        private _options: EmbeddedCheckoutOptions\n    ) {\n        this._isAttached = false;\n\n        if (this._options.onComplete) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.CheckoutComplete, this._options.onComplete);\n        }\n\n        if (this._options.onError) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.CheckoutError, this._options.onError);\n        }\n\n        if (this._options.onLoad) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.CheckoutLoaded, this._options.onLoad);\n        }\n\n        if (this._options.onFrameLoad) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.FrameLoaded, this._options.onFrameLoad);\n        }\n\n        if (this._options.onSignOut) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.SignedOut, this._options.onSignOut);\n        }\n\n        this._messageListener.addListener(EmbeddedCheckoutEventType.FrameLoaded, () => this._configureStyles());\n    }\n\n    attach(): Promise<this> {\n        if (this._isAttached) {\n            return Promise.resolve(this);\n        }\n\n        this._isAttached = true;\n        this._messageListener.listen();\n        this._loadingIndicator.show(this._options.containerId);\n\n        return this._allowCookie()\n            .then(() => this._attemptLogin())\n            .then(url => this._iframeCreator.createFrame(url, this._options.containerId))\n            .then(iframe => {\n                this._iframe = iframe;\n\n                this._configureStyles();\n                this._loadingIndicator.hide();\n            })\n            .catch(error => {\n                this._isAttached = false;\n\n                return this._retryAllowCookie(error)\n                    .catch(() => {\n                        this._messageListener.trigger({\n                            type: EmbeddedCheckoutEventType.FrameError,\n                            payload: error,\n                        });\n\n                        this._loadingIndicator.hide();\n\n                        throw error;\n                    });\n            })\n            .then(() => this);\n    }\n\n    detach(): void {\n        if (!this._isAttached) {\n            return;\n        }\n\n        this._isAttached = false;\n        this._messageListener.stopListen();\n\n        if (this._iframe && this._iframe.parentNode) {\n            this._iframe.parentNode.removeChild(this._iframe);\n            this._iframe.iFrameResizer.close();\n        }\n    }\n\n    private _configureStyles(): void {\n        if (!this._iframe || !this._iframe.contentWindow || !this._options.styles) {\n            return;\n        }\n\n        this._messagePoster.setTarget(this._iframe.contentWindow);\n\n        this._messagePoster.post({\n            type: EmbeddedContentEventType.StyleConfigured,\n            payload: this._options.styles,\n        });\n    }\n\n    private _attemptLogin(): Promise<string> {\n        if (!/^\\/login\\/token/.test(parseUrl(this._options.url).pathname)) {\n            return Promise.resolve(this._options.url);\n        }\n\n        return this._requestSender.post(this._options.url)\n            .then(({ body: { redirectUrl } }) => redirectUrl)\n            .catch(response => Promise.reject(new InvalidLoginTokenError(response)));\n    }\n\n    /**\n     * This workaround is required for certain browsers (namely Safari) that\n     * prevent session cookies to be set for a third party website unless the\n     * user has recently visited such website. Therefore, before we attempt to\n     * login or set an active cart in the session, we need to first redirect the\n     * user to the domain of Embedded Checkout.\n     */\n    private _allowCookie(): Promise<void> {\n        if (this._storage.getItem(IS_COOKIE_ALLOWED_KEY)) {\n            // It could be possible that the flag is set to true but the browser\n            // has already removed the permission to store cookie. In that case,\n            // we should try to redirect the user again.\n            this._storage.setItem(CAN_RETRY_ALLOW_COOKIE, true);\n\n            return Promise.resolve();\n        }\n\n        this._storage.removeItem(CAN_RETRY_ALLOW_COOKIE);\n        this._storage.setItem(IS_COOKIE_ALLOWED_KEY, true);\n\n        const { origin } = parseUrl(this._options.url);\n        const redirectUrl = `${origin}/embedded-checkout/allow-cookie?returnUrl=${encodeURIComponent(this._location.href)}`;\n\n        document.body.style.visibility = 'hidden';\n        this._location.replace(redirectUrl);\n\n        return new Promise<never>(() => {});\n    }\n\n    private _retryAllowCookie(error: EmbeddedCheckoutError): Promise<void> {\n        const canRetry = (\n            this._storage.getItem(CAN_RETRY_ALLOW_COOKIE) &&\n            error instanceof NotEmbeddableError &&\n            error.subtype === NotEmbeddableErrorType.MissingContent\n        );\n\n        if (!canRetry) {\n            return Promise.reject();\n        }\n\n        this._storage.removeItem(CAN_RETRY_ALLOW_COOKIE);\n        this._storage.removeItem(IS_COOKIE_ALLOWED_KEY);\n\n        return this._allowCookie();\n    }\n}\n","import { LoadingIndicatorStyles } from './embedded-checkout-styles';\n\nconst DEFAULT_STYLES: LoadingIndicatorStyles = {\n    size: 70,\n    color: '#d9d9d9',\n    backgroundColor: '#ffffff',\n};\n\nconst ROTATION_ANIMATION = 'embedded-checkout-loading-indicator-rotation';\n\nexport default class LoadingIndicator {\n    private _container: HTMLElement;\n    private _indicator: HTMLElement;\n    private _styles: LoadingIndicatorStyles;\n\n    constructor(\n        options?: { styles?: LoadingIndicatorStyles }\n    ) {\n        this._styles = { ...DEFAULT_STYLES, ...options && options.styles };\n\n        this._defineAnimation();\n\n        this._container = this._buildContainer();\n        this._indicator = this._buildIndicator();\n\n        this._container.appendChild(this._indicator);\n    }\n\n    show(parentId?: string): void {\n        if (parentId) {\n            const parent = document.getElementById(parentId);\n\n            if (!parent) {\n                throw new Error('Unable to attach the loading indicator because the parent ID is not valid.');\n            }\n\n            parent.appendChild(this._container);\n        }\n\n        this._container.style.visibility = 'visible';\n        this._container.style.opacity = '1';\n    }\n\n    hide(): void {\n        const handleTransitionEnd = () => {\n            this._container.style.visibility = 'hidden';\n\n            this._container.removeEventListener('transitionend', handleTransitionEnd);\n        };\n\n        this._container.addEventListener('transitionend', handleTransitionEnd);\n\n        this._container.style.opacity = '0';\n    }\n\n    private _buildContainer(): HTMLElement {\n        const container = document.createElement('div');\n\n        container.style.display = 'block';\n        container.style.bottom = '0';\n        container.style.left = '0';\n        container.style.height = '100%';\n        container.style.width = '100%';\n        container.style.position = 'absolute';\n        container.style.right = '0';\n        container.style.top = '0';\n        container.style.transition = 'all 250ms ease-out';\n        container.style.opacity = '0';\n\n        return container;\n    }\n\n    private _buildIndicator(): HTMLElement {\n        const indicator = document.createElement('div');\n\n        indicator.style.display = 'block';\n        indicator.style.width = `${this._styles.size}px`;\n        indicator.style.height = `${this._styles.size}px`;\n        indicator.style.borderRadius = `${this._styles.size}px`;\n        indicator.style.border = 'solid 1px';\n        indicator.style.borderColor = `${this._styles.backgroundColor} ${this._styles.backgroundColor} ${this._styles.color} ${this._styles.color}`;\n        indicator.style.margin = '0 auto';\n        indicator.style.position = 'absolute';\n        indicator.style.left = '0';\n        indicator.style.right = '0';\n        indicator.style.top = '50%';\n        indicator.style.transform = 'translateY(-50%) rotate(0deg)';\n        indicator.style.transformStyle = 'preserve-3d';\n        indicator.style.animation = `${ROTATION_ANIMATION} 500ms infinite cubic-bezier(0.69, 0.31, 0.56, 0.83)`;\n\n        return indicator;\n    }\n\n    private _defineAnimation(): void {\n        // In order to define CSS animation, we need to insert a stylesheet into the host frame.\n        // We only have to do it once.\n        if (document.getElementById(ROTATION_ANIMATION)) {\n            return;\n        }\n\n        const style = document.createElement('style');\n\n        style.id = ROTATION_ANIMATION;\n\n        document.head.appendChild(style);\n\n        if (style.sheet instanceof CSSStyleSheet) {\n            style.sheet.insertRule(`\n                @keyframes ${ROTATION_ANIMATION} {\n                    0% { transform: translateY(-50%) rotate(0deg); }\n                    100% { transform: translateY(-50%) rotate(360deg); }\n                }\n            `);\n        }\n    }\n}\n","import { iframeResizer, IFrameComponent } from 'iframe-resizer';\n\nimport { parseUrl } from '../common/url';\n\nimport { EmbeddedCheckoutEventType } from './embedded-checkout-events';\nimport { NotEmbeddableError, NotEmbeddableErrorType } from './errors';\nimport isIframeEvent from './is-iframe-event';\n\nexport default class ResizableIframeCreator {\n    constructor(\n        private _options?: { timeout: number }\n    ) {}\n\n    createFrame(src: string, containerId: string): Promise<IFrameComponent> {\n        const container = document.getElementById(containerId);\n        const { timeout = 60000 } = this._options || {};\n\n        if (!container) {\n            throw new NotEmbeddableError(\n                'Unable to embed the iframe because the container element could not be found.',\n                NotEmbeddableErrorType.MissingContainer\n            );\n        }\n\n        const iframe = document.createElement('iframe');\n\n        iframe.src = src;\n        iframe.style.border = 'none';\n        iframe.style.display = 'none';\n        iframe.style.width = '100%';\n        iframe.allowPaymentRequest = true;\n\n        container.appendChild(iframe);\n\n        return this._toResizableFrame(iframe, timeout)\n            .catch(error => {\n                container.removeChild(iframe);\n\n                throw error;\n            });\n    }\n\n    private _toResizableFrame(iframe: HTMLIFrameElement, timeoutInterval: number): Promise<IFrameComponent> {\n        // Can't simply listen to `load` event because it always gets triggered even if there's an error.\n        // Instead, listen to the `load` inside the iframe and let the parent frame know when it happens.\n        return new Promise((resolve, reject) => {\n            const timeout = window.setTimeout(() => {\n                reject(new NotEmbeddableError('Unable to embed the iframe because the content could not be loaded.'));\n            }, timeoutInterval);\n\n            const handleMessage = (event: MessageEvent) => {\n                if (event.origin !== parseUrl(iframe.src).origin) {\n                    return;\n                }\n\n                if (isIframeEvent(event.data, EmbeddedCheckoutEventType.FrameError)) {\n                    teardown();\n                    reject(new NotEmbeddableError(event.data.payload.message, NotEmbeddableErrorType.MissingContent));\n                }\n\n                if (isIframeEvent(event.data, EmbeddedCheckoutEventType.FrameLoaded)) {\n                    iframe.style.display = '';\n\n                    const contentId = event.data.payload && event.data.payload.contentId;\n                    const iframes = iframeResizer({\n                        scrolling: false,\n                        sizeWidth: false,\n                        heightCalculationMethod: contentId ? 'taggedElement' : 'lowestElement',\n                    }, iframe);\n\n                    teardown();\n                    resolve(iframes[iframes.length - 1]);\n                }\n            };\n\n            const teardown = () => {\n                window.removeEventListener('message', handleMessage);\n                window.clearTimeout(timeout);\n            };\n\n            window.addEventListener('message', handleMessage);\n        });\n    }\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\n\nimport { BrowserStorage } from '../common/storage';\nimport { parseUrl } from '../common/url';\n\nimport EmbeddedCheckout from './embedded-checkout';\nimport { EmbeddedCheckoutEventMap } from './embedded-checkout-events';\nimport EmbeddedCheckoutOptions from './embedded-checkout-options';\nimport { EmbeddedContentEvent } from './iframe-content/embedded-content-events';\nimport IframeEventListener from './iframe-event-listener';\nimport IframeEventPoster from './iframe-event-poster';\nimport LoadingIndicator from './loading-indicator';\nimport ResizableIframeCreator from './resizable-iframe-creator';\n\nconst STORAGE_PREFIX = 'BigCommerce.EmbeddedCheckout';\n\n/**\n * Embed the checkout form in an iframe.\n *\n * @remarks\n * Once the iframe is embedded, it will automatically resize according to the\n * size of the checkout form. It will also notify the parent window when certain\n * events have occurred. i.e.: when the form is loaded and ready to be used.\n *\n * ```js\n * embedCheckout({\n *     url: 'https://checkout/url',\n *     containerId: 'container-id',\n * });\n * ```\n *\n * @param options - Options for embedding the checkout form.\n * @returns A promise that resolves to an instance of `EmbeddedCheckout`.\n */\nexport default function embedCheckout(options: EmbeddedCheckoutOptions): Promise<EmbeddedCheckout> {\n    const origin = parseUrl(options.url).origin;\n    const embeddedCheckout = new EmbeddedCheckout(\n        new ResizableIframeCreator(),\n        new IframeEventListener<EmbeddedCheckoutEventMap>(origin),\n        new IframeEventPoster<EmbeddedContentEvent>(origin),\n        new LoadingIndicator({ styles: options.styles && options.styles.loadingIndicator }),\n        createRequestSender(),\n        new BrowserStorage(STORAGE_PREFIX),\n        window.location,\n        options\n    );\n\n    return embeddedCheckout.attach();\n}\n","export { default as embedCheckout } from './embed-checkout';\n","import { keyBy, reduce, some } from 'lodash';\n\nimport { Checkout } from '../checkout';\nimport { AmountTransformer } from '../common/utility';\nimport { mapToInternalCoupon, mapToInternalGiftCertificate } from '../coupon';\nimport { mapToDiscountNotifications } from '../promotion';\n\nimport InternalCart from './internal-cart';\nimport mapToInternalLineItems from './map-to-internal-line-items';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalCart(checkout: Checkout): InternalCart {\n    const decimalPlaces = checkout.cart.currency.decimalPlaces;\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: checkout.cart.id,\n        items: mapToInternalLineItems(checkout.cart.lineItems, decimalPlaces),\n        currency: checkout.cart.currency.code,\n        coupon: {\n            discountedAmount: reduce(checkout.cart.coupons, (sum, coupon) => {\n                return sum + coupon.discountedAmount;\n            }, 0),\n            coupons: checkout.cart.coupons.map(mapToInternalCoupon),\n        },\n        discount: {\n            amount: checkout.cart.discountAmount,\n            integerAmount: amountTransformer.toInteger(checkout.cart.discountAmount),\n        },\n        discountNotifications: mapToDiscountNotifications(checkout.promotions),\n        giftCertificate: {\n            totalDiscountedAmount: reduce(checkout.giftCertificates, (sum, certificate) => {\n                return sum + certificate.used;\n            }, 0),\n            appliedGiftCertificates: keyBy(checkout.giftCertificates.map(mapToInternalGiftCertificate), 'code'),\n        },\n        shipping: {\n            amount: checkout.shippingCostTotal,\n            integerAmount: amountTransformer.toInteger(checkout.shippingCostTotal),\n            amountBeforeDiscount: checkout.shippingCostBeforeDiscount,\n            integerAmountBeforeDiscount: amountTransformer.toInteger(checkout.shippingCostBeforeDiscount),\n            required: some(checkout.cart.lineItems.physicalItems, lineItem => lineItem.isShippingRequired),\n        },\n        subtotal: {\n            amount: checkout.subtotal,\n            integerAmount: amountTransformer.toInteger(checkout.subtotal),\n        },\n        storeCredit: {\n            amount: checkout.customer ? checkout.customer.storeCredit : 0,\n        },\n        taxSubtotal: {\n            amount: checkout.taxTotal,\n            integerAmount: amountTransformer.toInteger(checkout.taxTotal),\n        },\n        taxes: checkout.taxes,\n        taxTotal: {\n            amount: checkout.taxTotal,\n            integerAmount: amountTransformer.toInteger(checkout.taxTotal),\n        },\n        handling: {\n            amount: checkout.handlingCostTotal,\n            integerAmount: amountTransformer.toInteger(checkout.handlingCostTotal),\n        },\n        grandTotal: {\n            amount: checkout.grandTotal,\n            integerAmount: amountTransformer.toInteger(checkout.grandTotal),\n        },\n    };\n}\n","import { DiscountNotification } from '../discount';\n\nimport { Promotion } from '.';\n\nexport default function mapToDiscountNotifications(promotions?: Promotion[]): DiscountNotification[] {\n    const notifications: DiscountNotification[] = [];\n\n    (promotions || []).forEach(promotion => {\n        (promotion.banners || []).forEach(banner => {\n            notifications.push({\n                placeholders: [],\n                discountType: null,\n                message: '',\n                messageHtml: banner.text,\n            });\n        });\n    });\n\n    return notifications;\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, merge, of, Observable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType, StandardError } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { ConfigActionCreator } from '../config';\n\nimport { CheckoutRequestBody } from './checkout';\nimport { CheckoutActionType, LoadCheckoutAction, UpdateCheckoutAction } from './checkout-actions';\nimport CheckoutRequestSender from './checkout-request-sender';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\nexport default class CheckoutActionCreator {\n    constructor(\n        private _checkoutRequestSender: CheckoutRequestSender,\n        private _configActionCreator: ConfigActionCreator\n    ) {}\n\n    loadCheckout(id: string, options?: RequestOptions): Observable<LoadCheckoutAction> {\n        return concat(\n            of(createAction(CheckoutActionType.LoadCheckoutRequested)),\n            merge(\n                this._configActionCreator.loadConfig({ ...options, useCache: true }),\n                defer(() => this._checkoutRequestSender.loadCheckout(id, options)\n                    .then(({ body }) => createAction(CheckoutActionType.LoadCheckoutSucceeded, body)))\n            )\n        ).pipe(\n            catchError(error => throwErrorAction(CheckoutActionType.LoadCheckoutFailed, error))\n        );\n    }\n\n    loadDefaultCheckout(options?: RequestOptions): ThunkAction<LoadCheckoutAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(CheckoutActionType.LoadCheckoutRequested)),\n            this._configActionCreator.loadConfig(),\n            defer(() => {\n                const state = store.getState();\n                const context = state.config.getContextConfig();\n\n                if (!context || !context.checkoutId) {\n                    throw new StandardError('Unable to load checkout: no cart is available');\n                }\n\n                return this._checkoutRequestSender.loadCheckout(context.checkoutId, options)\n                    .then(({ body }) => createAction(CheckoutActionType.LoadCheckoutSucceeded, body));\n            })\n        ).pipe(\n            catchError(error => throwErrorAction(CheckoutActionType.LoadCheckoutFailed, error))\n        );\n    }\n\n    updateCheckout(\n        body: CheckoutRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateCheckoutAction, InternalCheckoutSelectors> {\n        return store => new Observable(observer => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(CheckoutActionType.UpdateCheckoutRequested));\n\n            this._checkoutRequestSender.updateCheckout(checkout.id, body, options)\n                .then(({ body }) => {\n                    observer.next(createAction(CheckoutActionType.UpdateCheckoutSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CheckoutActionType.UpdateCheckoutFailed, response));\n                });\n        });\n    }\n\n    loadCurrentCheckout(options?: RequestOptions): ThunkAction<LoadCheckoutAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            return this.loadCheckout(checkout.id, options);\n        };\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { AddressRequestBody } from '../address';\nimport { Cart } from '../cart';\nimport { InternalCheckoutSelectors, ReadableCheckoutStore } from '../checkout';\nimport { CheckoutIncludes } from '../checkout/checkout-params';\nimport CheckoutRequestSender from '../checkout/checkout-request-sender';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport Consignment, {\n    ConsignmentsRequestBody,\n    ConsignmentAssignmentRequestBody,\n    ConsignmentCreateRequestBody,\n    ConsignmentLineItem,\n    ConsignmentRequestBody,\n    ConsignmentShippingOptionRequestBody,\n    ConsignmentUpdateRequestBody\n} from './consignment';\nimport {\n    ConsignmentActionType,\n    CreateConsignmentsAction,\n    DeleteConsignmentAction,\n    LoadShippingOptionsAction,\n    UpdateConsignmentAction,\n    UpdateShippingOptionAction,\n} from './consignment-actions';\nimport ConsignmentRequestSender from './consignment-request-sender';\n\nexport default class ConsignmentActionCreator {\n    constructor(\n        private _consignmentRequestSender: ConsignmentRequestSender,\n        private _checkoutRequestSender: CheckoutRequestSender\n    ) {}\n\n    unassignItemsByAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<DeleteConsignmentAction | UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const existingConsignment = state.consignments.getConsignmentByAddress(consignment.shippingAddress);\n\n            if (!existingConsignment) {\n                throw new InvalidArgumentError('No consignment found for the specified address');\n            }\n\n            const lineItems = this._removeLineItems(\n                consignment.lineItems,\n                existingConsignment,\n                state.cart.getCart()\n            );\n\n            if (!lineItems.length) {\n                return this.deleteConsignment(existingConsignment.id, options)(store);\n            }\n\n            return this.updateConsignment({\n                id: existingConsignment.id,\n                shippingAddress: consignment.shippingAddress,\n                lineItems,\n            }, options)(store);\n        };\n    }\n\n    assignItemsByAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateConsignmentAction | CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const existingConsignment = state.consignments.getConsignmentByAddress(consignment.shippingAddress);\n\n            return this._createOrUpdateConsignment({\n                id: existingConsignment && existingConsignment.id,\n                shippingAddress: consignment.shippingAddress,\n                lineItems: this._addLineItems(\n                    consignment.lineItems,\n                    existingConsignment,\n                    state.cart.getCart()\n                ),\n            }, options)(store);\n        };\n    }\n\n    selectShippingOption(\n        id: string,\n        options?: RequestOptions\n    ): ThunkAction<UpdateShippingOptionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateShippingOptionAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n            const consignments = state.consignments.getConsignments();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            if (!consignments || !consignments.length) {\n                throw new MissingDataError(MissingDataErrorType.MissingConsignments);\n            }\n\n            const consignmentUpdateBody = {\n                id: consignments[0].id,\n                shippingOptionId: id,\n            };\n\n            const consignmentMeta = {\n                id: consignments[0].id,\n            };\n\n            observer.next(createAction(ConsignmentActionType.UpdateShippingOptionRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignmentUpdateBody, options)\n                .then(({ body }) => {\n                    observer.next(createAction(\n                        ConsignmentActionType.UpdateShippingOptionSucceeded,\n                        body,\n                        consignmentMeta\n                    ));\n\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(\n                        ConsignmentActionType.UpdateShippingOptionFailed,\n                        response,\n                        consignmentMeta\n                    ));\n                });\n        });\n    }\n\n    loadShippingOptions(options?: RequestOptions): ThunkAction<LoadShippingOptionsAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<LoadShippingOptionsAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.LoadShippingOptionsRequested));\n\n            this._checkoutRequestSender.loadCheckout(checkout.id, {\n                ...options,\n                params: {\n                    include: [CheckoutIncludes.AvailableShippingOptions],\n                },\n            })\n            .then(({ body }) => {\n                observer.next(createAction(ConsignmentActionType.LoadShippingOptionsSucceeded, body));\n                observer.complete();\n            })\n            .catch(response => {\n                observer.error(createErrorAction(ConsignmentActionType.LoadShippingOptionsFailed, response));\n            });\n        });\n    }\n\n    updateAddress(\n        address: AddressRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<CreateConsignmentsAction | UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return store => {\n            const consignment = this._getConsignmentRequestBody(address, store);\n            const consignments = store.getState().consignments.getConsignments();\n\n            if (consignments && consignments.length) {\n                (consignment as ConsignmentUpdateRequestBody).id = consignments[0].id;\n            }\n\n            return this._createOrUpdateConsignment(consignment, options)(store);\n        };\n    }\n\n    createConsignments(\n        consignments: ConsignmentsRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<CreateConsignmentsAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.CreateConsignmentsRequested));\n\n            this._consignmentRequestSender.createConsignments(checkout.id, consignments, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.CreateConsignmentsSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.CreateConsignmentsFailed, response));\n                });\n        });\n    }\n\n    updateConsignment(\n        consignment: ConsignmentUpdateRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateConsignmentAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const consignmentMeta = { id: consignment.id };\n\n            observer.next(createAction(ConsignmentActionType.UpdateConsignmentRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignment, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.UpdateConsignmentSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.UpdateConsignmentFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    deleteConsignment(\n        consignmentId: string,\n        options?: RequestOptions\n    ): ThunkAction<DeleteConsignmentAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<DeleteConsignmentAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n            const consignmentMeta = { id: consignmentId };\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.DeleteConsignmentRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.deleteConsignment(checkout.id, consignmentId, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.DeleteConsignmentSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.DeleteConsignmentFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    updateShippingOption(\n        consignment: ConsignmentShippingOptionRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateShippingOptionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateShippingOptionAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const consignmentMeta = { id: consignment.id };\n\n            observer.next(createAction(ConsignmentActionType.UpdateShippingOptionRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignment, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.UpdateShippingOptionSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.UpdateShippingOptionFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    private _createOrUpdateConsignment(\n        consignment: ConsignmentCreateRequestBody | ConsignmentUpdateRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateConsignmentAction | CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return store => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            if (this._isUpdateConsignmentRequest(consignment)) {\n                return this.updateConsignment(consignment, options)(store);\n            }\n\n            return this.createConsignments([consignment], options)(store);\n        };\n    }\n\n    private _getConsignmentRequestBody(\n        shippingAddress: AddressRequestBody,\n        store: ReadableCheckoutStore\n    ): ConsignmentRequestBody {\n        const state = store.getState();\n        const cart = state.cart.getCart();\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        return {\n            shippingAddress,\n            lineItems: (cart.lineItems && cart.lineItems.physicalItems || [])\n                .map(item => ({\n                    itemId: item.id,\n                    quantity: item.quantity,\n                })\n            ),\n        };\n    }\n\n    private _removeLineItems(\n        lineItems: ConsignmentLineItem[],\n        consignment: Consignment,\n        cart?: Cart\n    ): ConsignmentLineItem[] {\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        return this._hydrateLineItems(consignment.lineItemIds, cart).map(existingItem => {\n            const sharedItem = lineItems.find(lineItem => lineItem.itemId === existingItem.itemId);\n\n            return {\n                ...existingItem,\n                quantity: sharedItem ? (existingItem.quantity - sharedItem.quantity) : existingItem.quantity,\n            };\n        }).filter(lineItem => lineItem.quantity > 0);\n    }\n\n    private _addLineItems(\n        lineItems: ConsignmentLineItem[],\n        consignment?: Consignment,\n        cart?: Cart\n    ): ConsignmentLineItem[] {\n        if (!consignment) {\n            return lineItems;\n        }\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        return lineItems\n            .concat(this._hydrateLineItems(consignment.lineItemIds, cart))\n            .filter(lineItem => lineItem.quantity > 0);\n    }\n\n    private _hydrateLineItems(lineItemIds: string[], cart: Cart): ConsignmentLineItem[] {\n        return lineItemIds.map(itemId => {\n            const item = cart.lineItems.physicalItems.find(lineItem => lineItem.id === itemId );\n\n            return {\n                itemId,\n                quantity: item ? item.quantity : 0,\n            };\n        });\n    }\n\n    private _isUpdateConsignmentRequest(\n        request: ConsignmentRequestBody\n    ): request is ConsignmentUpdateRequestBody {\n        const updateRequest = request as ConsignmentUpdateRequestBody;\n\n        return !!updateRequest.id;\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout } from '../checkout';\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nimport { ConsignmentsRequestBody, ConsignmentUpdateRequestBody } from './consignment';\n\nconst DEFAULT_PARAMS = {\n    include: [\n        'consignments.availableShippingOptions',\n        'cart.lineItems.physicalItems.options',\n        'cart.lineItems.digitalItems.options',\n        'customer',\n        'promotions.banners',\n    ].join(','),\n};\n\nexport default class ConsignmentRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    createConsignments(checkoutId: string, consignments: ConsignmentsRequestBody, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, { body: consignments, params: DEFAULT_PARAMS, headers, timeout });\n    }\n\n    updateConsignment(checkoutId: string, consignment: ConsignmentUpdateRequestBody, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const { id, ...body } = consignment;\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.put(url, { params: DEFAULT_PARAMS, body, headers, timeout });\n    }\n\n    deleteConsignment(checkoutId: string, consignmentId: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments/${consignmentId}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.delete(url, { params: DEFAULT_PARAMS, headers, timeout });\n    }\n}\n","import InternalShippingOption from './internal-shipping-option';\nimport ShippingOption from './shipping-option';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalShippingOption(option: ShippingOption, isSelected: boolean): InternalShippingOption {\n    return {\n        description: option.description,\n        module: option.type,\n        price: option.cost,\n        id: option.id,\n        selected: isSelected,\n        isRecommended: option.isRecommended,\n        imageUrl: option.imageUrl,\n        transitTime: option.transitTime,\n    };\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport RequestError from './request-error';\n\nexport default class UnrecoverableError extends RequestError {\n    constructor(response: Response, message?: string) {\n        super(response, {\n            message: message || 'An unexpected error has occurred. The checkout process cannot continue as a result.',\n        });\n\n        this.type = 'unrecoverable';\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { InternalErrorResponseBody } from '../error-response-body';\n\nimport RequestError from './request-error';\n\nexport default function mapFromInternalErrorResponse(\n    response: Response<InternalErrorResponseBody>,\n    message?: string\n): RequestError {\n    const { body } = response;\n    const { errors = [] } = body;\n\n    return new RequestError(response, {\n        message: joinErrors(errors) || body.detail || body.title || message,\n        errors: errors.length ?\n            errors.map(message => ({ code: body.type, message })) :\n            [{ code: body.type, message: body.detail || body.title }],\n    });\n}\n\nfunction joinErrors(errors: string[]): string | undefined {\n    return errors.reduce((result: string[], error) => {\n        if (error) {\n            return [...result, error];\n        }\n\n        return result;\n    }, []).join(' ');\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { PaymentErrorResponseBody } from '../error-response-body';\n\nimport RequestError from './request-error';\n\nexport default function mapFromPaymentErrorResponse(\n    response: Response<PaymentErrorResponseBody>,\n    message?: string\n): RequestError {\n    const { body } = response;\n    const { errors = [] } = body;\n\n    return new RequestError(response, {\n        message: joinErrors(errors) || message,\n        errors,\n    });\n}\n\nfunction joinErrors(errors: Array<{ code: string, message?: string }>): string | undefined {\n    if (!Array.isArray(errors)) {\n        return;\n    }\n\n    return errors.reduce((result: string[], error) => {\n        if (error && error.message) {\n            return [...result, error.message];\n        }\n\n        return result;\n    }, []).join(' ');\n}\n","import { Response } from '@bigcommerce/request-sender';\nimport { last } from 'lodash';\n\nimport ErrorResponseBody, {\n    InternalErrorResponseBody,\n    StorefrontErrorResponseBody\n} from './error-response-body';\nimport { RequestError, TimeoutError } from './errors';\nimport mapFromInternalErrorResponse from './errors/map-from-internal-error-response';\nimport mapFromPaymentErrorResponse from './errors/map-from-payment-error-response';\nimport mapFromStorefrontErrorResponse from './errors/map-from-storefront-error-response';\n\nexport default class RequestErrorFactory {\n    private _factoryMethods: { [key: string]: ErrorFactoryMethod } = {};\n\n    constructor() {\n        this.register('default', (response, message) => new RequestError(response, { message }));\n        this.register('internal', (response, message) => mapFromInternalErrorResponse(response, message));\n        this.register('storefront', (response, message) => mapFromStorefrontErrorResponse(response, message));\n        this.register('payment', (response, message) => mapFromPaymentErrorResponse(response, message));\n        this.register('timeout', response => new TimeoutError(response));\n    }\n\n    register(type: string, factoryMethod: ErrorFactoryMethod): void {\n        this._factoryMethods[type] = factoryMethod;\n    }\n\n    createError(response: Response, message?: string): RequestError {\n        const factoryMethod = this._factoryMethods[this._getType(response)] || this._factoryMethods.default;\n\n        return factoryMethod(response, message);\n    }\n\n    private _getType(response: Response<ErrorResponseBody>): string {\n        if (response.status === 0) {\n            return 'timeout';\n        }\n\n        if (this._isStorefrontErrorResponseBody(response.body)) {\n            return 'storefront';\n        }\n\n        if (this._isInternalErrorResponseBody(response.body)) {\n            const internalType = last(response.body.type.split('/'));\n\n            return internalType && this._factoryMethods[internalType] ?\n                internalType :\n                'internal';\n        }\n\n        const error = last(response.body && response.body.errors);\n\n        if (error && error.code && this._factoryMethods[error.code]) {\n            return error.code;\n        }\n\n        return 'payment';\n    }\n\n    private _isStorefrontErrorResponseBody(\n        errorResponse: ErrorResponseBody\n    ): errorResponse is StorefrontErrorResponseBody {\n        const storefrontErrorResponse = errorResponse as StorefrontErrorResponseBody;\n\n        return !this._isInternalErrorResponseBody(errorResponse) &&\n            typeof storefrontErrorResponse.title === 'string' &&\n            typeof storefrontErrorResponse.type === 'string' &&\n            typeof storefrontErrorResponse.status === 'number' &&\n            typeof storefrontErrorResponse.detail === 'string';\n    }\n\n    private _isInternalErrorResponseBody(\n        errorResponse: ErrorResponseBody\n    ): errorResponse is InternalErrorResponseBody {\n        const internalErrorResponse = errorResponse as InternalErrorResponseBody;\n\n        return typeof internalErrorResponse.errors === 'object' &&\n            typeof internalErrorResponse.title === 'string' &&\n            typeof internalErrorResponse.type === 'string' &&\n            typeof internalErrorResponse.status === 'number';\n    }\n}\n\nexport type ErrorFactoryMethod = (response: Response, message?: string) => RequestError;\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { StorefrontErrorResponseBody } from '../error-response-body';\n\nimport RequestError from './request-error';\n\nexport default function mapFromStorefrontErrorResponse(\n    response: Response<StorefrontErrorResponseBody>,\n    message?: string\n): RequestError<StorefrontErrorResponseBody> {\n    const { body } = response;\n\n    return new RequestError(response, {\n        message: message || body.detail || body.title,\n        errors: [{\n            code: body.code || body.type,\n            message: body.detail || body.title,\n        }],\n    });\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { OrderAction, OrderActionType } from '../order';\n\nimport BillingAddress from './billing-address';\nimport { BillingAddressAction, BillingAddressActionType } from './billing-address-actions';\nimport BillingAddressState, { BillingAddressErrorsState, BillingAddressStatusesState } from './billing-address-state';\n\nconst DEFAULT_STATE: BillingAddressState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function billingAddressReducer(\n    state: BillingAddressState = DEFAULT_STATE,\n    action: Action\n): BillingAddressState {\n    const reducer = combineReducers<BillingAddressState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: BillingAddress | undefined,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddress | undefined {\n    switch (action.type) {\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case OrderActionType.LoadOrderSucceeded:\n        return action.payload ? action.payload.billingAddress : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: BillingAddressErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddressErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return { ...errors, loadError: action.payload };\n\n    case BillingAddressActionType.UpdateBillingAddressRequested:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n        return { ...errors, updateError: undefined };\n\n    case BillingAddressActionType.UpdateBillingAddressFailed:\n        return { ...errors, updateError: action.payload };\n\n    case BillingAddressActionType.ContinueAsGuestRequested:\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n        return { ...errors, continueAsGuestError: undefined };\n\n    case BillingAddressActionType.ContinueAsGuestFailed:\n        return { ...errors, continueAsGuestError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: BillingAddressStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddressStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return { ...statuses, isLoading: true };\n\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.LoadCheckoutFailed:\n        return { ...statuses, isLoading: false };\n\n    case BillingAddressActionType.UpdateBillingAddressRequested:\n        return { ...statuses, isUpdating: true };\n\n    case BillingAddressActionType.UpdateBillingAddressFailed:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n        return { ...statuses, isUpdating: false };\n\n    case BillingAddressActionType.ContinueAsGuestRequested:\n        return { ...statuses, isContinuingAsGuest: true };\n\n    case BillingAddressActionType.ContinueAsGuestFailed:\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n        return { ...statuses, isContinuingAsGuest: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\n\nimport Config from './config';\nimport { ConfigActionType, LoadConfigAction } from './config-actions';\nimport ConfigState, { ConfigErrorsState, ConfigStatusesState } from './config-state';\n\nconst DEFAULT_STATE: ConfigState = {\n    meta: {},\n    errors: {},\n    statuses: {},\n};\n\nexport default function configReducer(\n    state: ConfigState = DEFAULT_STATE,\n    action: Action\n): ConfigState {\n    const reducer = combineReducers<ConfigState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Config | undefined,\n    action: LoadConfigAction\n): Config | undefined {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigSucceeded:\n        return action.payload ? action.payload : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ConfigErrorsState = DEFAULT_STATE.errors,\n    action: LoadConfigAction\n): ConfigErrorsState {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case ConfigActionType.LoadConfigFailed:\n        return { ...errors, loadError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ConfigStatusesState = DEFAULT_STATE.statuses,\n    action: LoadConfigAction\n): ConfigStatusesState {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigRequested:\n        return { ...statuses, isLoading: true };\n\n    case ConfigActionType.LoadConfigSucceeded:\n    case ConfigActionType.LoadConfigFailed:\n        return { ...statuses, isLoading: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\n\nimport Country from './country';\nimport { CountryActionType, LoadCountriesAction } from './country-actions';\nimport CountryState, { CountryErrorsState, CountryStatusesState } from './country-state';\n\nconst DEFAULT_STATE: CountryState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function countryReducer(\n    state: CountryState = DEFAULT_STATE,\n    action: Action\n): CountryState {\n    const reducer = combineReducers<CountryState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Country[] | undefined,\n    action: LoadCountriesAction\n): Country[] | undefined {\n    switch (action.type) {\n    case CountryActionType.LoadCountriesSucceeded:\n        return action.payload || [];\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CountryErrorsState = DEFAULT_STATE.errors,\n    action: LoadCountriesAction\n): CountryErrorsState {\n    switch (action.type) {\n    case CountryActionType.LoadCountriesRequested:\n    case CountryActionType.LoadCountriesSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case CountryActionType.LoadCountriesFailed:\n        return { ...errors, loadError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CountryStatusesState = DEFAULT_STATE.statuses,\n    action: LoadCountriesAction\n): CountryStatusesState {\n    switch (action.type) {\n    case CountryActionType.LoadCountriesRequested:\n        return { ...statuses, isLoading: true };\n\n    case CountryActionType.LoadCountriesSucceeded:\n    case CountryActionType.LoadCountriesFailed:\n        return { ...statuses, isLoading: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { PaymentAction, PaymentActionType } from './payment-actions';\nimport PaymentResponseBody from './payment-response-body';\nimport PaymentState from './payment-state';\n\nexport default function paymentReducer(state: PaymentState = {}, action: PaymentAction): PaymentState {\n    const reducer = combineReducers<PaymentState, PaymentAction>({\n        data: dataReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(data: PaymentResponseBody | undefined, action: PaymentAction): PaymentResponseBody | undefined {\n    switch (action.type) {\n    case PaymentActionType.SubmitPaymentSucceeded:\n        return action.payload;\n\n    default:\n        return data;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { mergeOrPush } from '../common/utility';\n\nimport PaymentMethod from './payment-method';\nimport { PaymentMethodAction, PaymentMethodActionType } from './payment-method-actions';\nimport PaymentMethodMeta from './payment-method-meta';\nimport PaymentMethodState, { PaymentMethodErrorsState, PaymentMethodStatusesState } from './payment-method-state';\n\nconst DEFAULT_STATE: PaymentMethodState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function paymentMethodReducer(\n    state: PaymentMethodState = DEFAULT_STATE,\n    action: Action\n): PaymentMethodState {\n    const reducer = combineReducers<PaymentMethodState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: PaymentMethod[] | undefined,\n    action: PaymentMethodAction\n): PaymentMethod[] | undefined {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n        return action.payload ?\n            mergeOrPush(data || [], action.payload, {\n                id: action.payload.id,\n                gateway: action.payload.gateway,\n            }) :\n            data;\n\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        return action.payload ? action.payload : [];\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(\n    meta: PaymentMethodMeta | undefined,\n    action: PaymentMethodAction\n): PaymentMethodMeta | undefined {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        return action.meta ? { ...meta, ...action.meta } : meta;\n\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: PaymentMethodErrorsState = DEFAULT_STATE.errors,\n    action: PaymentMethodAction\n): PaymentMethodErrorsState {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodsRequested:\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case PaymentMethodActionType.LoadPaymentMethodsFailed:\n        return { ...errors, loadError: action.payload };\n\n    case PaymentMethodActionType.LoadPaymentMethodRequested:\n    case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n        return {\n            ...errors,\n            loadMethodId: undefined,\n            loadMethodError: undefined,\n        };\n\n    case PaymentMethodActionType.LoadPaymentMethodFailed:\n        return {\n            ...errors,\n            loadMethodId: action.meta.methodId,\n            loadMethodError: action.payload,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: PaymentMethodStatusesState = DEFAULT_STATE.statuses,\n    action: PaymentMethodAction\n): PaymentMethodStatusesState {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodsRequested:\n        return { ...statuses, isLoading: true };\n\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n    case PaymentMethodActionType.LoadPaymentMethodsFailed:\n        return { ...statuses, isLoading: false };\n\n    case PaymentMethodActionType.LoadPaymentMethodRequested:\n        return {\n            ...statuses,\n            isLoadingMethod: true,\n            loadMethodId: action.meta.methodId,\n        };\n\n    case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n    case PaymentMethodActionType.LoadPaymentMethodFailed:\n        return {\n            ...statuses,\n            isLoadingMethod: false,\n            loadMethodId: undefined,\n        };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\n\nimport { PaymentStrategyAction, PaymentStrategyActionType } from './payment-strategy-actions';\nimport PaymentStrategyState, { DEFAULT_STATE, PaymentStrategyDataState, PaymentStrategyErrorsState, PaymentStrategyStatusesState } from './payment-strategy-state';\n\nexport default function paymentStrategyReducer(\n    state: PaymentStrategyState = DEFAULT_STATE,\n    action: Action\n): PaymentStrategyState {\n    const reducer = combineReducers<PaymentStrategyState, PaymentStrategyAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: PaymentStrategyDataState = DEFAULT_STATE.data,\n    action: PaymentStrategyAction\n): PaymentStrategyDataState {\n    switch (action.type) {\n    case PaymentStrategyActionType.InitializeSucceeded:\n        return {\n            ...data,\n            [action.meta && action.meta.methodId]: {\n                isInitialized: true,\n            },\n        };\n\n    case PaymentStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...data,\n            [action.meta && action.meta.methodId]: {\n                isInitialized: false,\n            },\n        };\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: PaymentStrategyErrorsState = DEFAULT_STATE.errors,\n    action: PaymentStrategyAction\n): PaymentStrategyErrorsState {\n    switch (action.type) {\n    case PaymentStrategyActionType.InitializeRequested:\n    case PaymentStrategyActionType.InitializeSucceeded:\n        return {\n            ...errors,\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.InitializeFailed:\n        return {\n            ...errors,\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.DeinitializeRequested:\n    case PaymentStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...errors,\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.DeinitializeFailed:\n        return {\n            ...errors,\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.ExecuteRequested:\n    case PaymentStrategyActionType.ExecuteSucceeded:\n        return {\n            ...errors,\n            executeError: undefined,\n            executeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.ExecuteFailed:\n        return {\n            ...errors,\n            executeError: action.payload,\n            executeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.FinalizeRequested:\n    case PaymentStrategyActionType.FinalizeSucceeded:\n        return {\n            ...errors,\n            finalizeError: undefined,\n            finalizeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.FinalizeFailed:\n        return {\n            ...errors,\n            finalizeError: action.payload,\n            finalizeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.WidgetInteractionStarted:\n    case PaymentStrategyActionType.WidgetInteractionFinished:\n        return {\n            ...errors,\n            widgetInteractionError: undefined,\n            widgetInteractionMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.WidgetInteractionFailed:\n        return {\n            ...errors,\n            widgetInteractionError: action.payload,\n            widgetInteractionMethodId: action.meta.methodId,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: PaymentStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: PaymentStrategyAction\n): PaymentStrategyStatusesState {\n    switch (action.type) {\n    case PaymentStrategyActionType.InitializeRequested:\n        return {\n            ...statuses,\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.InitializeFailed:\n    case PaymentStrategyActionType.InitializeSucceeded:\n        return {\n            ...statuses,\n            isInitializing: false,\n            initializeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.DeinitializeRequested:\n        return {\n            ...statuses,\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.DeinitializeFailed:\n    case PaymentStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...statuses,\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.ExecuteRequested:\n        return {\n            ...statuses,\n            isExecuting: true,\n            executeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.ExecuteFailed:\n    case PaymentStrategyActionType.ExecuteSucceeded:\n        return {\n            ...statuses,\n            isExecuting: false,\n            executeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.FinalizeRequested:\n        return {\n            ...statuses,\n            isFinalizing: true,\n            finalizeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.FinalizeFailed:\n    case PaymentStrategyActionType.FinalizeSucceeded:\n        return {\n            ...statuses,\n            isFinalizing: false,\n            finalizeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.WidgetInteractionStarted:\n    return {\n        ...statuses,\n        isWidgetInteracting: true,\n        widgetInteractionMethodId: action.meta.methodId,\n     };\n\n    case PaymentStrategyActionType.WidgetInteractionFinished:\n    case PaymentStrategyActionType.WidgetInteractionFailed:\n     return {\n        ...statuses,\n        isWidgetInteracting: false,\n        widgetInteractionMethodId: undefined,\n     };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../../common/error';\n\nimport Instrument from './instrument';\nimport { InstrumentAction, InstrumentActionType } from './instrument-actions';\nimport InstrumentState, { InstrumentErrorState, InstrumentMeta, InstrumentStatusState } from './instrument-state';\n\nconst DEFAULT_STATE = {\n    data: [],\n    errors: {},\n    statuses: {},\n};\n\nexport default function instrumentReducer(\n    state: InstrumentState = DEFAULT_STATE,\n    action: Action\n): InstrumentState {\n    const reducer = combineReducers<InstrumentState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Instrument[] = DEFAULT_STATE.data,\n    action: InstrumentAction\n): Instrument[] {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n        return action.payload ? action.payload.vaultedInstruments : [];\n\n    case InstrumentActionType.DeleteInstrumentSucceeded:\n        return data.filter(instrument =>\n            instrument.bigpayToken !== action.meta.instrumentId\n        );\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(\n    meta: InstrumentMeta | undefined,\n    action: InstrumentAction\n): InstrumentMeta | undefined {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n    case InstrumentActionType.DeleteInstrumentSucceeded:\n        return { ...meta, ...action.meta };\n\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: InstrumentErrorState = DEFAULT_STATE.errors,\n    action: InstrumentAction\n): InstrumentErrorState {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsRequested:\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case InstrumentActionType.DeleteInstrumentRequested:\n    case InstrumentActionType.DeleteInstrumentSucceeded:\n        return {\n            ...errors,\n            deleteError: undefined,\n            failedInstrument: undefined,\n        };\n\n    case InstrumentActionType.LoadInstrumentsFailed:\n        return { ...errors, loadError: action.payload };\n\n    case InstrumentActionType.DeleteInstrumentFailed:\n        return {\n            ...errors,\n            deleteError: action.payload,\n            failedInstrument: action.meta.instrumentId,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: InstrumentStatusState = DEFAULT_STATE.statuses,\n    action: InstrumentAction\n): InstrumentStatusState {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsRequested:\n        return { ...statuses, isLoading: true };\n\n    case InstrumentActionType.DeleteInstrumentRequested:\n        return {\n            ...statuses,\n            isDeleting: true,\n            deletingInstrument: action.meta.instrumentId,\n        };\n\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n    case InstrumentActionType.LoadInstrumentsFailed:\n        return { ...statuses, isLoading: false };\n\n    case InstrumentActionType.DeleteInstrumentSucceeded:\n    case InstrumentActionType.DeleteInstrumentFailed:\n        return {\n            ...statuses,\n            isDeleting: false,\n            deletingInstrument: undefined,\n        };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport RemoteCheckout from './remote-checkout';\nimport { RemoteCheckoutAction, RemoteCheckoutActionType } from './remote-checkout-actions';\nimport RemoteCheckoutState, { RemoteCheckoutStateData } from './remote-checkout-state';\n\nconst DEFAULT_STATE: RemoteCheckoutState = {\n    data: {},\n};\n\nexport default function remoteCheckoutReducer(\n    state: RemoteCheckoutState = DEFAULT_STATE,\n    action: RemoteCheckoutAction\n): RemoteCheckoutState {\n    if (!action.meta || !action.meta.methodId) {\n        return state;\n    }\n\n    const reducer = combineReducers<RemoteCheckoutState>({\n        data: combineReducers<RemoteCheckoutStateData>({\n            [action.meta.methodId]: dataReducer,\n        }),\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: RemoteCheckout = DEFAULT_STATE.data,\n    action: RemoteCheckoutAction\n): RemoteCheckout {\n    switch (action.type) {\n    case RemoteCheckoutActionType.InitializeRemoteBillingSucceeded:\n        return action.payload ? { ...data, billing: action.payload.billing } : data;\n\n    case RemoteCheckoutActionType.InitializeRemoteShippingSucceeded:\n        return action.payload ? { ...data, shipping: action.payload.shipping } : data;\n\n    case RemoteCheckoutActionType.LoadRemoteSettingsSucceeded:\n        return { ...data, settings: action.payload };\n\n    case RemoteCheckoutActionType.UpdateRemoteCheckout:\n        return { ...data, ...action.payload };\n\n    default:\n        return data;\n    }\n}\n","import { createDataStore } from '@bigcommerce/data-store';\n\nimport { createRequestErrorFactory } from '../common/error';\n\nimport CheckoutStore, { CheckoutStoreOptions } from './checkout-store';\nimport CheckoutStoreState from './checkout-store-state';\nimport createActionTransformer from './create-action-transformer';\nimport createCheckoutStoreReducer from './create-checkout-store-reducer';\nimport createInternalCheckoutSelectors from './create-internal-checkout-selectors';\n\nexport default function createCheckoutStore(\n    initialState: Partial<CheckoutStoreState> = {},\n    options?: CheckoutStoreOptions\n): CheckoutStore {\n    const actionTransformer = createActionTransformer(createRequestErrorFactory());\n    const stateTransformer = (state: CheckoutStoreState) => createInternalCheckoutSelectors(state);\n\n    return createDataStore(\n        createCheckoutStoreReducer(),\n        initialState,\n        { actionTransformer, stateTransformer, ...options }\n    );\n}\n","import { PaymentMethodInvalidError } from '../../payment/errors';\n\nimport { UnrecoverableError } from './errors';\nimport RequestErrorFactory from './request-error-factory';\n\nexport default function createRequestErrorFactory(): RequestErrorFactory {\n    const factory = new RequestErrorFactory();\n\n    const unrecoverableErrorTypes = [\n        'catalog_only',\n        'empty_cart',\n        'invalid_order_id',\n        'invalid_order_token',\n        'missing_order_token',\n        'missing_provider_token',\n        'missing_shipping_method',\n        'order_completion_error',\n        'order_could_not_be_finalized_error',\n        'order_create_failed',\n        'provider_fatal_error',\n        'provider_setup_error',\n        'stock_too_low',\n    ];\n\n    unrecoverableErrorTypes.forEach(type => {\n        factory.register(type, (response, message) => new UnrecoverableError(response, message));\n    });\n\n    factory.register('invalid_payment_provider', response => new PaymentMethodInvalidError(response));\n    factory.register('payment_config_not_found', response => new PaymentMethodInvalidError(response));\n\n    return factory;\n}\n","import { combineReducers, Action, Reducer } from '@bigcommerce/data-store';\n\nimport { billingAddressReducer } from '../billing';\nimport { cartReducer } from '../cart';\nimport { checkoutButtonReducer } from '../checkout-buttons';\nimport { configReducer } from '../config';\nimport { couponReducer, giftCertificateReducer } from '../coupon';\nimport { customerReducer, customerStrategyReducer } from '../customer';\nimport { countryReducer } from '../geography';\nimport { orderReducer } from '../order';\nimport { paymentMethodReducer, paymentReducer, paymentStrategyReducer } from '../payment';\nimport { instrumentReducer } from '../payment/instrument';\nimport { remoteCheckoutReducer } from '../remote-checkout';\nimport { consignmentReducer, shippingCountryReducer, shippingStrategyReducer } from '../shipping';\n\nimport checkoutReducer from './checkout-reducer';\nimport CheckoutStoreState from './checkout-store-state';\n\nexport default function createCheckoutStoreReducer(): Reducer<CheckoutStoreState, Action> {\n    return combineReducers({\n        billingAddress: billingAddressReducer,\n        cart: cartReducer,\n        checkout: checkoutReducer,\n        checkoutButton: checkoutButtonReducer,\n        config: configReducer,\n        consignments: consignmentReducer,\n        countries: countryReducer,\n        coupons: couponReducer,\n        customer: customerReducer,\n        customerStrategies: customerStrategyReducer,\n        giftCertificates: giftCertificateReducer,\n        instruments: instrumentReducer,\n        order: orderReducer,\n        payment: paymentReducer,\n        paymentMethods: paymentMethodReducer,\n        paymentStrategies: paymentStrategyReducer,\n        remoteCheckout: remoteCheckoutReducer,\n        shippingCountries: shippingCountryReducer,\n        shippingStrategies: shippingStrategyReducer,\n    });\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { InternalErrorResponseBody } from '../../common/error';\nimport { RequestError } from '../../common/error/errors';\n\nexport default class CheckoutNotAvailableError extends RequestError {\n    constructor(response: Response<InternalErrorResponseBody>) {\n        super(response, { message: response.body.title });\n\n        this.type = 'checkout_not_available';\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { joinIncludes, ContentType, RequestOptions } from '../common/http-request';\n\nimport Checkout, { CheckoutRequestBody } from './checkout';\nimport CHECKOUT_DEFAULT_INCLUDES from './checkout-default-includes';\nimport CheckoutParams from './checkout-params';\nimport { CheckoutNotAvailableError } from './errors';\n\nexport default class CheckoutRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadCheckout(id: string, { params, timeout }: RequestOptions<CheckoutParams> = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkout/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.get(url, {\n            params: {\n                include: joinIncludes([\n                    ...CHECKOUT_DEFAULT_INCLUDES,\n                    ...(params && params.include || []),\n                ]),\n            },\n            headers,\n            timeout,\n        }).catch(error => {\n            if (error.status >= 400 && error.status < 500) {\n                throw new CheckoutNotAvailableError(error);\n            }\n\n            throw error;\n        });\n    }\n\n    updateCheckout(id: string, body: CheckoutRequestBody, { params, timeout }: RequestOptions<CheckoutParams> = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkout/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.put(url, {\n            params: {\n                include: joinIncludes([\n                    ...CHECKOUT_DEFAULT_INCLUDES,\n                    ...(params && params.include || []),\n                ]),\n            },\n            body,\n            headers,\n            timeout,\n        });\n    }\n}\n","import { identity, isEqual, pickBy } from 'lodash';\n\nimport Address from './address';\n\nexport default function isAddressEqual(addressA: Partial<Address>, addressB: Partial<Address>): boolean {\n    return isEqual(normalize(addressA), normalize(addressB));\n}\n\nfunction normalize(address: Partial<Address>): Partial<Address> {\n    return pickBy({\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        address1: address.address1,\n        address2: address.address2,\n        city: address.city,\n        stateOrProvince: address.stateOrProvince,\n        countryCode: address.countryCode,\n        postalCode: address.postalCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    }, identity);\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { GooglePayCreator } from '../googlepay';\n\nimport {\n    BraintreeClientCreator,\n    BraintreeDataCollectorCreator,\n    BraintreeHostWindow,\n    BraintreePaypalCheckoutCreator,\n    BraintreePaypalCreator,\n    BraintreeThreeDSecureCreator,\n    BraintreeVisaCheckoutCreator,\n} from './braintree';\n\nexport default class BraintreeScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: BraintreeHostWindow = window\n    ) {}\n\n    loadClient(): Promise<BraintreeClientCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/client.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.client) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.client;\n            });\n    }\n\n    load3DS(): Promise<BraintreeThreeDSecureCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/three-d-secure.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.threeDSecure) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.threeDSecure;\n            });\n    }\n\n    loadDataCollector(): Promise<BraintreeDataCollectorCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/data-collector.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.dataCollector) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.dataCollector;\n            });\n    }\n\n    loadPaypal(): Promise<BraintreePaypalCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/paypal.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.paypal) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.paypal;\n            });\n    }\n\n    loadPaypalCheckout(): Promise<BraintreePaypalCheckoutCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/paypal-checkout.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.paypalCheckout) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.paypalCheckout;\n            });\n    }\n\n    loadVisaCheckout(): Promise<BraintreeVisaCheckoutCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/visa-checkout.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.visaCheckout) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.visaCheckout;\n            });\n    }\n\n    loadGooglePayment(): Promise<GooglePayCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/google-payment.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.googlePayment) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.googlePayment;\n            });\n    }\n}\n","import { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\n\nimport {\n    BraintreeClient,\n    BraintreeDataCollector,\n    BraintreeModule,\n    BraintreePaypal,\n    BraintreePaypalCheckout,\n    BraintreeThreeDSecure,\n    BraintreeVisaCheckout,\n    GooglePayBraintreeSDK,\n} from './braintree';\nimport BraintreeScriptLoader from './braintree-script-loader';\n\nexport default class BraintreeSDKCreator {\n    private _client?: Promise<BraintreeClient>;\n    private _3ds?: Promise<BraintreeThreeDSecure>;\n    private _paypal?: Promise<BraintreePaypal>;\n    private _paypalCheckout?: Promise<BraintreePaypalCheckout>;\n    private _clientToken?: string;\n    private _visaCheckout?: Promise<BraintreeVisaCheckout>;\n    private _dataCollectors: {\n        default?: Promise<BraintreeDataCollector>,\n        paypal?: Promise<BraintreeDataCollector>,\n    } = {};\n    private _googlePay?: Promise<GooglePayBraintreeSDK>;\n\n    constructor(\n        private _braintreeScriptLoader: BraintreeScriptLoader\n    ) {}\n\n    initialize(clientToken: string) {\n        this._clientToken = clientToken;\n    }\n\n    getClient(): Promise<BraintreeClient> {\n        if (!this._clientToken) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!this._client) {\n            this._client = this._braintreeScriptLoader.loadClient()\n                .then(client => client.create({ authorization: this._clientToken }));\n        }\n\n        return this._client;\n    }\n\n    getPaypal(): Promise<BraintreePaypal> {\n        if (!this._paypal) {\n            this._paypal = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadPaypal(),\n            ])\n            .then(([client, paypal]) => paypal.create({ client }));\n        }\n\n        return this._paypal;\n    }\n\n    getPaypalCheckout(): Promise<BraintreePaypalCheckout> {\n        if (!this._paypalCheckout) {\n            this._paypalCheckout = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadPaypalCheckout(),\n            ])\n                .then(([client, paypalCheckout]) => paypalCheckout.create({ client }));\n        }\n\n        return this._paypalCheckout;\n    }\n\n    get3DS(): Promise<BraintreeThreeDSecure> {\n        if (!this._3ds) {\n            this._3ds = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.load3DS(),\n            ])\n            .then(([client, threeDSecure]) => threeDSecure.create({ client }));\n        }\n\n        return this._3ds;\n    }\n\n    getDataCollector(options?: { paypal: boolean }): Promise<BraintreeDataCollector> {\n        const cacheKey = options && options.paypal ? 'paypal' : 'default';\n        let cached = this._dataCollectors[cacheKey];\n\n        if (!cached) {\n            cached = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadDataCollector(),\n            ])\n            .then(([client, dataCollector]) => dataCollector.create({ client, kount: true, ...options }))\n            .catch(error => {\n                if (error && error.code === 'DATA_COLLECTOR_KOUNT_NOT_ENABLED') {\n                    return { deviceData: undefined, teardown: () => Promise.resolve() };\n                }\n\n                throw error;\n            });\n\n            this._dataCollectors[cacheKey] = cached;\n        }\n\n        return cached;\n    }\n\n    getVisaCheckout(): Promise<BraintreeVisaCheckout> {\n        if (!this._visaCheckout) {\n            this._visaCheckout = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadVisaCheckout(),\n            ])\n            .then(([client, visaCheckout]) => visaCheckout.create({ client }));\n        }\n\n        return this._visaCheckout;\n    }\n\n    getGooglePaymentComponent(): Promise<GooglePayBraintreeSDK> {\n        if (!this._googlePay) {\n            this._googlePay = Promise.all ([\n                this.getClient(),\n                this._braintreeScriptLoader.loadGooglePayment(),\n            ])\n                .then(([client, googlePay]) => googlePay.create({ client }));\n        }\n\n        return this._googlePay;\n    }\n\n    teardown(): Promise<void> {\n        return Promise.all([\n            this._teardown(this._3ds),\n            this._teardown(this._dataCollectors.default),\n            this._teardown(this._dataCollectors.paypal),\n            this._teardown(this._visaCheckout),\n            this._teardown(this._googlePay),\n        ]).then(() => {\n            this._3ds = undefined;\n            this._visaCheckout = undefined;\n            this._dataCollectors = {};\n            this._googlePay = undefined;\n        });\n    }\n\n    private _teardown(module?: Promise<BraintreeModule>) {\n        return module ?\n            module.then(mod => mod.teardown()) :\n            Promise.resolve();\n    }\n}\n","import Coupon from './coupon';\nimport InternalCoupon from './internal-coupon';\n\nconst couponTypes = [\n    'per_item_discount',\n    'percentage_discount',\n    'per_total_discount',\n    'shipping_discount',\n    'free_shipping',\n];\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalCoupon(coupon: Coupon): InternalCoupon {\n    return {\n        code: coupon.code,\n        discount: coupon.displayName,\n        discountType: couponTypes.indexOf(coupon.couponType),\n    };\n}\n","module.exports = require(\"iframe-resizer\");","import { isBillingAddressLike } from '../billing';\nimport BillingAddress from '../billing/billing-address';\nimport { Consignment } from '../shipping';\n\nimport Address from './address';\nimport InternalAddress from './internal-address';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalAddress(address: Address | BillingAddress, consignments?: Consignment[]): InternalAddress {\n    let addressId;\n\n    if (isBillingAddressLike(address)) {\n        addressId = address.id;\n    } else if (consignments && consignments.length) {\n        addressId = consignments[0].id;\n    }\n\n    return {\n        id: addressId,\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        addressLine1: address.address1,\n        addressLine2: address.address2,\n        city: address.city,\n        province: address.stateOrProvince,\n        provinceCode: address.stateOrProvinceCode,\n        postCode: address.postalCode,\n        country: address.country,\n        countryCode: address.countryCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    };\n}\n","import Address from '../address/address';\n\nimport BillingAddress from './billing-address';\n\nexport default function isBillingAddressLike(address: Address): address is BillingAddress {\n    const billingAddress = address as BillingAddress;\n\n    return typeof billingAddress.id !== 'undefined';\n}\n","import { uniq } from 'lodash';\n\nexport default function joinIncludes(includes: string[]): string {\n    return uniq(includes).join(',');\n}\n","import StandardError from './standard-error';\n\nexport enum NotInitializedErrorType {\n    CheckoutButtonNotInitialized,\n    CustomerNotInitialized,\n    PaymentNotInitialized,\n    ShippingNotInitialized,\n}\n\nexport default class NotInitializedError extends StandardError {\n    constructor(\n        public subtype: NotInitializedErrorType\n    ) {\n        super(getErrorMessage(subtype));\n\n        this.type = 'not_initialized';\n    }\n}\n\nfunction getErrorMessage(type: NotInitializedErrorType): string {\n    switch (type) {\n    case NotInitializedErrorType.CustomerNotInitialized:\n        return 'Unable to proceed because the customer step of checkout has not been initialized.';\n\n    case NotInitializedErrorType.PaymentNotInitialized:\n        return 'Unable to proceed because the payment step of checkout has not been initialized.';\n\n    case NotInitializedErrorType.ShippingNotInitialized:\n        return 'Unable to proceed because the shipping step of checkout has not been initialized.';\n\n    default:\n        return 'Unable to proceed because the required component has not been initialized.';\n    }\n}\n","import { InvalidArgumentError } from '../error/errors';\n\nimport Url from './url';\n\nexport default function parseUrl(url: string): Url {\n    if (!/^(https?:)?\\/\\//.test(url)) {\n        throw new InvalidArgumentError('The provided URL must be absolute.');\n    }\n\n    // new URL() is not supported in IE11, use anchor tag instead\n    const anchor = document.createElement('a');\n\n    anchor.href = url;\n\n    return {\n        hash: anchor.hash,\n        hostname: anchor.hostname,\n        href: anchor.href,\n        origin: anchor.origin,\n        pathname: anchor.pathname,\n        port: anchor.port,\n        protocol: anchor.protocol,\n        search: anchor.search,\n    };\n}\n","import cacheAction from './cache-action';\nimport isActionOptions from './is-action-options';\n\nexport default function cachableActionDecorator<TMethod extends (...args: any[]) => any>(\n    target: object,\n    key: string,\n    descriptor: TypedPropertyDescriptor<TMethod>\n): TypedPropertyDescriptor<TMethod> {\n    const memoizedMethods = new WeakMap<object, { [key: string]: TMethod }>();\n\n    function decorateMethod(this: object, method: TMethod): TMethod {\n        return ((...args: any[]) => {\n            const lastArg = args[args.length - 1];\n            const { useCache } = isActionOptions(lastArg) ? lastArg : { useCache: false };\n\n            if (!useCache) {\n                return method.call(this, ...args);\n            }\n\n            const instanceMethods = memoizedMethods.get(this) || {};\n\n            if (!memoizedMethods.get(this)) {\n                memoizedMethods.set(this, instanceMethods);\n            }\n\n            if (!instanceMethods[key]) {\n                instanceMethods[key] = cacheAction(method);\n            }\n\n            return instanceMethods[key].call(this, ...args);\n        }) as TMethod;\n    }\n\n    return {\n        get() {\n            if (typeof descriptor.value !== 'function') {\n                return descriptor.value;\n            }\n\n            const value = decorateMethod.call(this, descriptor.value);\n\n            Object.defineProperty(this, key, { ...descriptor, value });\n\n            return value;\n        },\n    };\n}\n","import ActionOptions from './action-options';\n\nexport default function isActionOptions(param: any): param is ActionOptions {\n    return param && typeof param.useCache === 'boolean';\n}\n","import { Action, ThunkAction } from '@bigcommerce/data-store';\nimport { memoize } from 'lodash';\nimport { from, Observable } from 'rxjs';\nimport { shareReplay } from 'rxjs/operators';\n\nimport { CacheKeyResolver } from '../utility';\n\nexport default function cacheAction<TFunction extends CreateActionFn>(\n    fn: TFunction\n): TFunction {\n    const resolver = new CacheKeyResolver();\n\n    function decoratedFn(this: any, ...args: any[]) {\n        const action = fn.call(this, ...args);\n\n        if (action instanceof Observable) {\n            return from(action).pipe(shareReplay());\n        }\n\n        if (typeof action === 'function') {\n            return memoize(store => from(action(store)).pipe(shareReplay()));\n        }\n\n        return action;\n    }\n\n    return memoize(\n        decoratedFn as TFunction,\n        (...args) => resolver.getKey(...args)\n    );\n}\n\ntype CreateActionFn = (...args: any[]) => Observable<Action> | ThunkAction<Action> | Action;\n","import { deepFreeze } from '@bigcommerce/data-store';\n\n// tslint:disable-next-line:ban-types\ntype FunctionProperties<T> = { [K in keyof T]: T[K] extends Function ? T[K] : never };\n\nexport default function createFreezeProxy<T extends object>(target: T): T {\n    return createProxy(target, (target, name) =>\n        (...args: any[]) => deepFreeze(target[name].call(target, ...args))\n    );\n}\n\nexport function createFreezeProxies<T extends { [key: string]: object }>(map: T): T {\n    return Object.keys(map)\n        .reduce((result, key) => {\n            result[key] = createFreezeProxy(map[key]);\n\n            return result;\n        }, {} as T);\n}\n\nfunction createProxy<T extends object>(target: T, trap: (target: FunctionProperties<T>, name: keyof FunctionProperties<T>, proxy: T) => any): T {\n    const proxy = Object.create(target);\n\n    traversePrototypeOf(target, prototype => {\n        Object.getOwnPropertyNames(prototype)\n            .forEach(name => {\n                if (name === 'constructor' || typeof proxy[name] !== 'function' || name.charAt(0) === '_') {\n                    return;\n                }\n\n                proxy[name] = trap(target as FunctionProperties<T>, name as keyof T, proxy);\n            });\n    });\n\n    return proxy;\n}\n\nfunction traversePrototypeOf(target: object, iteratee: (prototype: object) => void): void {\n    let prototype = Object.getPrototypeOf(target);\n\n    while (prototype) {\n        iteratee(prototype);\n\n        prototype = Object.getPrototypeOf(prototype);\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { Registry } from '../common/registry';\n\nimport CustomerCredentials from './customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from './customer-request-options';\nimport {\n    CustomerStrategyActionType,\n    CustomerStrategyDeinitializeAction,\n    CustomerStrategyInitializeAction,\n    CustomerStrategySignInAction,\n    CustomerStrategySignOutAction,\n    CustomerStrategyWidgetAction,\n} from './customer-strategy-actions';\nimport { CustomerStrategy } from './strategies';\n\nexport default class CustomerStrategyActionCreator {\n    constructor(\n        private _strategyRegistry: Registry<CustomerStrategy>\n    ) {}\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Observable<CustomerStrategySignInAction> {\n        return Observable.create((observer: Observer<CustomerStrategySignInAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.SignInRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .signIn(credentials, options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.SignInSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.SignInFailed, error, meta));\n                });\n        });\n    }\n\n    signOut(options?: CustomerRequestOptions): Observable<CustomerStrategySignOutAction> {\n        return Observable.create((observer: Observer<CustomerStrategySignOutAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.SignOutRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .signOut(options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.SignOutSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.SignOutFailed, error, meta));\n                });\n        });\n    }\n\n    initialize(options?: CustomerInitializeOptions): ThunkAction<CustomerStrategyInitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<CustomerStrategyInitializeAction>) => {\n            const state = store.getState();\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            if (methodId && state.customerStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(CustomerStrategyActionType.InitializeRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .initialize(options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.InitializeSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.InitializeFailed, error, meta));\n                });\n        });\n    }\n\n    deinitialize(options?: CustomerRequestOptions): ThunkAction<CustomerStrategyDeinitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<CustomerStrategyDeinitializeAction>) => {\n            const state = store.getState();\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            if (methodId && !state.customerStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(CustomerStrategyActionType.DeinitializeRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .deinitialize(options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.DeinitializeSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.DeinitializeFailed, error, meta));\n                });\n        });\n    }\n\n    widgetInteraction(method: () => Promise<any>, options?: CustomerRequestOptions): Observable<CustomerStrategyWidgetAction> {\n        return Observable.create((observer: Observer<CustomerStrategyWidgetAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.WidgetInteractionStarted, undefined, meta));\n\n            method().then(() => {\n                observer.next(createAction(CustomerStrategyActionType.WidgetInteractionFinished, undefined, meta));\n                observer.complete();\n            })\n            .catch(error => {\n                observer.error(createErrorAction(CustomerStrategyActionType.WidgetInteractionFailed, error, meta));\n            });\n        });\n    }\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, from, of } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\n\nimport { CheckoutActionCreator, InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { RequestOptions } from '../common/http-request';\n\nimport { CustomerActionType, SignInCustomerAction, SignOutCustomerAction } from './customer-actions';\nimport CustomerCredentials from './customer-credentials';\nimport CustomerRequestSender from './customer-request-sender';\n\nexport default class CustomerActionCreator {\n    constructor(\n        private _customerRequestSender: CustomerRequestSender,\n        private _checkoutActionCreator: CheckoutActionCreator\n    ) {}\n\n    signInCustomer(\n        credentials: CustomerCredentials,\n        options?: RequestOptions\n    ): ThunkAction<SignInCustomerAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(CustomerActionType.SignInCustomerRequested)),\n            from(this._customerRequestSender.signInCustomer(credentials, options))\n                .pipe(\n                    switchMap(({ body }) => concat(\n                        this._checkoutActionCreator.loadCurrentCheckout(options)(store),\n                        of(createAction(CustomerActionType.SignInCustomerSucceeded, body.data))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(CustomerActionType.SignInCustomerFailed, error))\n        );\n    }\n\n    signOutCustomer(\n        options?: RequestOptions\n    ): ThunkAction<SignOutCustomerAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(CustomerActionType.SignOutCustomerRequested)),\n            from(this._customerRequestSender.signOutCustomer(options))\n                .pipe(\n                    switchMap(({ body }) => concat(\n                        this._checkoutActionCreator.loadCurrentCheckout(options)(store),\n                        of(createAction(CustomerActionType.SignOutCustomerSucceeded, body.data))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(CustomerActionType.SignOutCustomerFailed, error))\n        );\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport CustomerCredentials from './customer-credentials';\nimport { InternalCustomerResponseBody } from './internal-customer-responses';\n\nexport default class CustomerRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    signInCustomer(credentials: CustomerCredentials, { timeout }: RequestOptions = {}): Promise<Response<InternalCustomerResponseBody>> {\n        const url = '/internalapi/v1/checkout/customer';\n\n        return this._requestSender.post(url, { timeout, body: credentials });\n    }\n\n    signOutCustomer({ timeout }: RequestOptions = {}): Promise<Response<InternalCustomerResponseBody>> {\n        const url = '/internalapi/v1/checkout/customer';\n\n        return this._requestSender.delete(url, { timeout });\n    }\n}\n","import { selector } from '../common/selector';\n\nimport Cart from './cart';\nimport CartState from './cart-state';\n\n@selector\nexport default class CartSelector {\n    constructor(\n        private _cart: CartState\n    ) {}\n\n    getCart(): Cart | undefined {\n        return this._cart.data;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._cart.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return !!this._cart.statuses.isLoading;\n    }\n}\n","import { RequestError } from '../common/error/errors';\nimport { selector } from '../common/selector';\n\nimport Coupon from './coupon';\nimport CouponState from './coupon-state';\n\n@selector\nexport default class CouponSelector {\n    constructor(\n        private _coupon: CouponState\n    ) {}\n\n    getCoupons(): Coupon[] | undefined {\n        return this._coupon.data;\n    }\n\n    getRemoveError(): RequestError | undefined {\n        return this._coupon.errors.removeCouponError;\n    }\n\n    getApplyError(): RequestError | undefined {\n        return this._coupon.errors.applyCouponError;\n    }\n\n    isApplying(): boolean {\n        return !!this._coupon.statuses.isApplyingCoupon;\n    }\n\n    isRemoving(): boolean {\n        return !!this._coupon.statuses.isRemovingCoupon;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport Customer from './customer';\nimport CustomerState from './customer-state';\n\n@selector\nexport default class CustomerSelector {\n    constructor(\n        private _customer: CustomerState\n    ) {}\n\n    getCustomer(): Customer | undefined {\n        return this._customer.data;\n    }\n}\n","import CustomerStrategyState from './customer-strategy-state';\n\nexport default class CustomerStrategySelector {\n    constructor(\n        private _customerStrategies: CustomerStrategyState\n    ) {}\n\n    getSignInError(methodId?: string): Error | undefined {\n        if (methodId && this._customerStrategies.errors.signInMethodId !== methodId) {\n            return;\n        }\n\n        return this._customerStrategies.errors.signInError;\n    }\n\n    getSignOutError(methodId?: string): Error | undefined {\n        if (methodId && this._customerStrategies.errors.signOutMethodId !== methodId) {\n            return;\n        }\n\n        return this._customerStrategies.errors.signOutError;\n    }\n\n    getInitializeError(methodId?: string): Error | undefined {\n        if (methodId && this._customerStrategies.errors.initializeMethodId !== methodId) {\n            return;\n        }\n\n        return this._customerStrategies.errors.initializeError;\n    }\n\n    getWidgetInteractionError(methodId?: string): Error | undefined {\n        if (methodId && this._customerStrategies.errors.widgetInteractionMethodId !== methodId) {\n            return;\n        }\n\n        return this._customerStrategies.errors.widgetInteractionError;\n    }\n\n    isSigningIn(methodId?: string): boolean {\n        if (methodId && this._customerStrategies.statuses.signInMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._customerStrategies.statuses.isSigningIn;\n    }\n\n    isSigningOut(methodId?: string): boolean {\n        if (methodId && this._customerStrategies.statuses.signOutMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._customerStrategies.statuses.isSigningOut;\n    }\n\n    isInitializing(methodId?: string): boolean {\n        if (methodId && this._customerStrategies.statuses.initializeMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._customerStrategies.statuses.isInitializing;\n    }\n\n    isInitialized(methodId: string): boolean {\n        return !!(\n            this._customerStrategies.data[methodId] &&\n            this._customerStrategies.data[methodId].isInitialized\n        );\n    }\n\n    isWidgetInteracting(methodId?: string): boolean {\n        if (methodId && this._customerStrategies.statuses.widgetInteractionMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._customerStrategies.statuses.isWidgetInteracting;\n    }}\n","import { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\nimport { selector } from '../common/selector';\n\nimport GiftCertificate from './gift-certificate';\nimport GiftCertificateState from './gift-certificate-state';\n\n@selector\nexport default class GiftCertificateSelector {\n    constructor(\n        private _giftCertificate: GiftCertificateState\n    ) {}\n\n    getGiftCertificates(): GiftCertificate[] | undefined {\n        return this._giftCertificate.data;\n    }\n\n    getRemoveError(): RequestError<StorefrontErrorResponseBody> | undefined {\n        return this._giftCertificate.errors.removeGiftCertificateError;\n    }\n\n    getApplyError(): RequestError<StorefrontErrorResponseBody> | undefined {\n        return this._giftCertificate.errors.applyGiftCertificateError;\n    }\n\n    isApplying(): boolean {\n        return !!this._giftCertificate.statuses.isApplyingGiftCertificate;\n    }\n\n    isRemoving(): boolean {\n        return !!this._giftCertificate.statuses.isRemovingGiftCertificate;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport { Address } from '../address';\n\nimport ConsignmentState from './consignment-state';\n\n@selector\nexport default class ShippingAddressSelector {\n    constructor(\n        private _consignments: ConsignmentState\n    ) {}\n\n    getShippingAddress(): Address | undefined {\n        const consignments = this._consignments.data;\n\n        if (!consignments || !consignments[0]) {\n            return;\n        }\n\n        return consignments[0].shippingAddress;\n    }\n}\n","import { selector } from '../common/selector';\nimport { Country } from '../geography';\n\nimport ShippingCountryState from './shipping-country-state';\n\n@selector\nexport default class ShippingCountrySelector {\n    constructor(\n        private _shippingCountries: ShippingCountryState\n    ) {}\n\n    getShippingCountries(): Country[] | undefined {\n        return this._shippingCountries.data;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._shippingCountries.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return !!this._shippingCountries.statuses.isLoading;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport ShippingStrategyState from './shipping-strategy-state';\n\n@selector\nexport default class ShippingStrategySelector {\n    constructor(\n        private _shippingStrategies: ShippingStrategyState\n    ) {}\n\n    getUpdateAddressError(methodId?: string): Error | undefined {\n        if (methodId && this._shippingStrategies.errors.updateAddressMethodId !== methodId) {\n            return;\n        }\n\n        return this._shippingStrategies.errors.updateAddressError;\n    }\n\n    getSelectOptionError(methodId?: string): Error | undefined {\n        if (methodId && this._shippingStrategies.errors.selectOptionMethodId !== methodId) {\n            return;\n        }\n\n        return this._shippingStrategies.errors.selectOptionError;\n    }\n\n    getInitializeError(methodId?: string): Error | undefined {\n        if (methodId && this._shippingStrategies.errors.initializeMethodId !== methodId) {\n            return;\n        }\n\n        return this._shippingStrategies.errors.initializeError;\n    }\n\n    isUpdatingAddress(methodId?: string): boolean {\n        if (methodId && this._shippingStrategies.statuses.updateAddressMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._shippingStrategies.statuses.isUpdatingAddress;\n    }\n\n    isSelectingOption(methodId?: string): boolean {\n        if (methodId && this._shippingStrategies.statuses.selectOptionMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._shippingStrategies.statuses.isSelectingOption;\n    }\n\n    isInitializing(methodId?: string): boolean {\n        if (methodId && this._shippingStrategies.statuses.initializeMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._shippingStrategies.statuses.isInitializing;\n    }\n\n    isInitialized(methodId: string): boolean {\n        return !!(\n            this._shippingStrategies.data[methodId] &&\n            this._shippingStrategies.data[methodId].isInitialized\n        );\n    }\n}\n","import { find } from 'lodash';\n\nimport { isAddressEqual, AddressRequestBody } from '../address';\nimport { CartSelector, PhysicalItem } from '../cart';\nimport { selector } from '../common/selector';\n\nimport Consignment from './consignment';\nimport ConsignmentState from './consignment-state';\nimport ShippingOption from './shipping-option';\n\n@selector\nexport default class ConsignmentSelector {\n    constructor(\n        private _consignments: ConsignmentState,\n        private _cart: CartSelector\n    ) {}\n\n    getConsignments(): Consignment[] | undefined {\n        return this._consignments.data;\n    }\n\n    getConsignmentById(id: string): Consignment | undefined {\n        const consignments = this._consignments.data;\n\n        if (!consignments || !consignments.length) {\n            return;\n        }\n\n        return find(consignments, { id });\n    }\n\n    getConsignmentByAddress(address: AddressRequestBody): Consignment | undefined {\n        const consignments = this._consignments.data;\n\n        if (!consignments || !consignments.length) {\n            return;\n        }\n\n        return find(consignments, consignment =>\n            isAddressEqual(consignment.shippingAddress, address)\n        );\n    }\n\n    getShippingOption(): ShippingOption | undefined {\n        const consignments = this._consignments.data;\n\n        if (consignments && consignments.length) {\n            return consignments[0].selectedShippingOption;\n        }\n    }\n\n    getLoadError(): Error | undefined {\n        return this._consignments.errors.loadError;\n    }\n\n    getCreateError(): Error | undefined {\n        return this._consignments.errors.createError;\n    }\n\n    getLoadShippingOptionsError(): Error | undefined {\n        return this._consignments.errors.loadShippingOptionsError;\n    }\n\n    getUnassignedItems(): PhysicalItem[] {\n        const cart = this._cart.getCart();\n\n        if (!cart) {\n            return [];\n        }\n\n        const assignedLineItemIds = (this.getConsignments() || []).reduce(\n            (itemIds, consignment) => itemIds.concat(consignment.lineItemIds),\n            [] as string[]\n        );\n\n        return (cart.lineItems.physicalItems || []).filter(\n            item => assignedLineItemIds.indexOf(item.id as string) < 0\n        );\n    }\n\n    getUpdateError(consignmentId?: string): Error | undefined {\n        if (consignmentId) {\n            return this._consignments.errors.updateError[consignmentId];\n        }\n\n        return find(this._consignments.errors.updateError);\n    }\n\n    getDeleteError(consignmentId?: string): Error | undefined {\n        if (consignmentId) {\n            return this._consignments.errors.deleteError[consignmentId];\n        }\n\n        return find(this._consignments.errors.deleteError);\n    }\n\n    getItemAssignmentError(address: AddressRequestBody): Error | undefined {\n        const consignment = this.getConsignmentByAddress(address);\n\n        return consignment ? this.getUpdateError(consignment.id) : this.getCreateError();\n    }\n\n    getUpdateShippingOptionError(consignmentId?: string): Error | undefined {\n        if (consignmentId) {\n            return this._consignments.errors.updateShippingOptionError[consignmentId];\n        }\n\n        return find(this._consignments.errors.updateShippingOptionError);\n    }\n\n    isLoading(): boolean {\n        return this._consignments.statuses.isLoading === true;\n    }\n\n    isLoadingShippingOptions(): boolean {\n        return this._consignments.statuses.isLoadingShippingOptions === true;\n    }\n\n    isCreating(): boolean {\n        return this._consignments.statuses.isCreating === true;\n    }\n\n    isUpdating(consignmentId?: string): boolean {\n        if (consignmentId) {\n            return this._consignments.statuses.isUpdating[consignmentId] === true;\n        }\n\n        return find(this._consignments.statuses.isUpdating) === true;\n    }\n\n    isDeleting(consignmentId?: string): boolean {\n        if (consignmentId) {\n            return this._consignments.statuses.isDeleting[consignmentId] === true;\n        }\n\n        return find(this._consignments.statuses.isDeleting) === true;\n    }\n\n    isAssigningItems(address: AddressRequestBody): boolean {\n        const consignment = this.getConsignmentByAddress(address);\n\n        return consignment ? this.isUpdating(consignment.id) : this.isCreating();\n    }\n\n    isUpdatingShippingOption(consignmentId?: string): boolean {\n        if (consignmentId) {\n            return this._consignments.statuses.isUpdatingShippingOption[consignmentId] === true;\n        }\n\n        return find(this._consignments.statuses.isUpdatingShippingOption) === true;\n    }\n}\n","import { BillingAddressSelector } from '../billing';\nimport { selector } from '../common/selector';\nimport { CouponSelector } from '../coupon';\n\nimport Order from './order';\nimport OrderState, { OrderMetaState } from './order-state';\n\n@selector\nexport default class OrderSelector {\n    constructor(\n        private _order: OrderState,\n        private _billingAddress: BillingAddressSelector,\n        private _coupons: CouponSelector\n    ) {}\n\n    getOrder(): Order | undefined {\n        const { data } = this._order;\n        const billingAddress = this._billingAddress.getBillingAddress();\n        const coupons = this._coupons.getCoupons() || [];\n\n        if (!data || !billingAddress) {\n            return;\n        }\n\n        return {\n            ...data,\n            billingAddress,\n            coupons,\n        };\n    }\n\n    getOrderMeta(): OrderMetaState | undefined {\n        return this._order.meta;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._order.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return !!this._order.statuses.isLoading;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { BillingAddressAction, BillingAddressActionType } from '../billing/billing-address-actions';\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { CouponAction, CouponActionType } from '../coupon/coupon-actions';\nimport { GiftCertificateAction, GiftCertificateActionType } from '../coupon/gift-certificate-actions';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping/consignment-actions';\n\nimport Cart from './cart';\nimport CartState, { CartErrorsState, CartStatusesState } from './cart-state';\n\nconst DEFAULT_STATE: CartState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function cartReducer(\n    state: CartState = DEFAULT_STATE,\n    action: Action\n): CartState {\n    const reducer = combineReducers<CartState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Cart | undefined,\n    action: BillingAddressAction | CheckoutAction | ConsignmentAction | CouponAction | GiftCertificateAction\n): Cart | undefined {\n    switch (action.type) {\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return action.payload ? { ...data, ...action.payload.cart } : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CartStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction\n): CartStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return { ...statuses, isLoading: true };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return { ...statuses, isLoading: false };\n\n    default:\n        return statuses;\n    }\n}\n\nfunction errorsReducer(\n    errors: CartErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction\n): CartErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return { ...errors, loadError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { CouponAction, CouponActionType } from '../coupon';\nimport { CustomerAction, CustomerActionType } from '../customer';\n\nimport Consignment from './consignment';\nimport { ConsignmentAction, ConsignmentActionType } from './consignment-actions';\nimport ConsignmentState, { ConsignmentErrorsState, ConsignmentStatusesState } from './consignment-state';\n\nconst DEFAULT_STATE: ConsignmentState = {\n    errors: {\n        updateShippingOptionError: {},\n        updateError: {},\n        deleteError: {},\n    },\n    statuses: {\n        isUpdating: {},\n        isUpdatingShippingOption: {},\n        isDeleting: {},\n    },\n};\n\nexport default function consignmentReducer(\n    state: ConsignmentState = DEFAULT_STATE,\n    action: Action\n): ConsignmentState {\n    const reducer = combineReducers<ConsignmentState, ConsignmentAction | CheckoutAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Consignment[] | undefined,\n    action: ConsignmentAction | CheckoutAction | CouponAction | CustomerAction\n): Consignment[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n        return action.payload ? action.payload.consignments : data;\n\n    case CustomerActionType.SignOutCustomerSucceeded:\n        return [];\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ConsignmentErrorsState = DEFAULT_STATE.errors,\n    action: ConsignmentAction | CheckoutAction\n): ConsignmentErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsRequested:\n        return { ...errors, loadError: undefined };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case ConsignmentActionType.LoadShippingOptionsFailed:\n        return { ...errors, loadError: action.payload };\n\n    case ConsignmentActionType.CreateConsignmentsRequested:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n        return { ...errors, createError: undefined };\n\n    case ConsignmentActionType.CreateConsignmentsFailed:\n        return { ...errors, createError: action.payload };\n\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentRequested:\n        if (action.meta) {\n            errors.updateError[action.meta.id] = undefined;\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateConsignmentFailed:\n        if (action.meta) {\n            errors.updateError[action.meta.id] = action.payload;\n        }\n\n        return errors;\n\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentRequested:\n        if (action.meta) {\n            errors.deleteError[action.meta.id] = undefined;\n        }\n\n        return errors;\n\n    case ConsignmentActionType.DeleteConsignmentFailed:\n        if (action.meta) {\n            errors.deleteError[action.meta.id] = action.payload;\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateShippingOptionRequested:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n        if (action.meta) {\n            errors.updateShippingOptionError[action.meta.id] = undefined;\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateShippingOptionFailed:\n        if (action.meta) {\n            errors.updateShippingOptionError[action.meta.id] = action.payload;\n        }\n\n        return errors;\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ConsignmentStatusesState = DEFAULT_STATE.statuses,\n    action: ConsignmentAction | CheckoutAction\n): ConsignmentStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return { ...statuses, isLoading: true };\n\n    case ConsignmentActionType.LoadShippingOptionsRequested:\n        return { ...statuses, isLoadingShippingOptions: true };\n\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.LoadCheckoutFailed:\n        return { ...statuses, isLoading: false };\n\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsFailed:\n        return { ...statuses, isLoadingShippingOptions: false };\n\n    case ConsignmentActionType.CreateConsignmentsRequested:\n        return { ...statuses, isCreating: true };\n\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.CreateConsignmentsFailed:\n        return { ...statuses, isCreating: false };\n\n    case ConsignmentActionType.UpdateConsignmentRequested:\n        if (action.meta) {\n            statuses.isUpdating[action.meta.id] = true;\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentFailed:\n        if (action.meta) {\n            statuses.isUpdating[action.meta.id] = false;\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.DeleteConsignmentRequested:\n        if (action.meta) {\n            statuses.isDeleting[action.meta.id] = true;\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentFailed:\n        if (action.meta) {\n            statuses.isDeleting[action.meta.id] = false;\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateShippingOptionRequested:\n        if (action.meta) {\n            statuses.isUpdatingShippingOption[action.meta.id] = true;\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionFailed:\n        if (action.meta) {\n            statuses.isUpdatingShippingOption[action.meta.id] = false;\n        }\n\n        return statuses;\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { OrderAction, OrderActionType } from '../order';\n\nimport Coupon from './coupon';\nimport { CouponAction, CouponActionType } from './coupon-actions';\nimport CouponState, { CouponErrorsState, CouponStatusesState } from './coupon-state';\n\nconst DEFAULT_STATE: CouponState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function couponReducer(\n    state: CouponState = DEFAULT_STATE,\n    action: Action\n): CouponState {\n    const reducer = combineReducers<CouponState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Coupon[] | undefined,\n    action: CouponAction | CheckoutAction | OrderAction\n): Coupon[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case OrderActionType.LoadOrderSucceeded:\n        return action.payload ? action.payload.coupons : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CouponErrorsState = {},\n    action: CouponAction\n): CouponErrorsState {\n    switch (action.type) {\n    case CouponActionType.ApplyCouponRequested:\n    case CouponActionType.ApplyCouponSucceeded:\n        return { ...errors, applyCouponError: undefined };\n\n    case CouponActionType.ApplyCouponFailed:\n        return { ...errors, applyCouponError: action.payload };\n\n    case CouponActionType.RemoveCouponRequested:\n    case CouponActionType.RemoveCouponSucceeded:\n        return { ...errors, removeCouponError: undefined };\n\n    case CouponActionType.RemoveCouponFailed:\n        return { ...errors, removeCouponError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CouponStatusesState = {},\n    action: CouponAction\n): CouponStatusesState {\n    switch (action.type) {\n    case CouponActionType.ApplyCouponRequested:\n        return { ...statuses, isApplyingCoupon: true };\n\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.ApplyCouponFailed:\n        return { ...statuses, isApplyingCoupon: false };\n\n    case CouponActionType.RemoveCouponRequested:\n        return { ...statuses, isRemovingCoupon: true };\n\n    case CouponActionType.RemoveCouponSucceeded:\n    case CouponActionType.RemoveCouponFailed:\n        return { ...statuses, isRemovingCoupon: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\n\nimport Customer from './customer';\nimport CustomerState from './customer-state';\n\nconst DEFAULT_STATE: CustomerState = {};\n\nexport default function customerReducer(\n    state: CustomerState = DEFAULT_STATE,\n    action: CheckoutAction\n): CustomerState {\n    const reducer = combineReducers<CustomerState, CheckoutAction>({\n        data: dataReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Customer | undefined,\n    action: CheckoutAction\n): Customer | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return action.payload ? { ...data, ...action.payload.customer } : data;\n\n    default:\n        return data;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping/consignment-actions';\n\nimport { CouponAction, CouponActionType } from './coupon-actions';\nimport GiftCertificate from './gift-certificate';\nimport { GiftCertificateAction, GiftCertificateActionType } from './gift-certificate-actions';\nimport GiftCertificateState, { GiftCertificateErrorsState, GiftCertificateStatusesState } from './gift-certificate-state';\n\nconst DEFAULT_STATE: GiftCertificateState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function giftCertificateReducer(\n    state: GiftCertificateState = DEFAULT_STATE,\n    action: Action\n): GiftCertificateState {\n    const reducer = combineReducers<GiftCertificateState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: GiftCertificate[] | undefined,\n    action: CheckoutAction | GiftCertificateAction | ConsignmentAction | CouponAction\n): GiftCertificate[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return action.payload ? action.payload.giftCertificates : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: GiftCertificateErrorsState = DEFAULT_STATE.errors,\n    action: GiftCertificateAction\n): GiftCertificateErrorsState {\n    switch (action.type) {\n    case GiftCertificateActionType.ApplyGiftCertificateRequested:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n        return { ...errors, applyGiftCertificateError: undefined };\n\n    case GiftCertificateActionType.ApplyGiftCertificateFailed:\n        return { ...errors, applyGiftCertificateError: action.payload };\n\n    case GiftCertificateActionType.RemoveGiftCertificateRequested:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return { ...errors, removeGiftCertificateError: undefined };\n\n    case GiftCertificateActionType.RemoveGiftCertificateFailed:\n        return { ...errors, removeGiftCertificateError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: GiftCertificateStatusesState = DEFAULT_STATE.statuses,\n    action: GiftCertificateAction\n): GiftCertificateStatusesState {\n    switch (action.type) {\n    case GiftCertificateActionType.ApplyGiftCertificateRequested:\n        return { ...statuses, isApplyingGiftCertificate: true };\n\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateFailed:\n        return { ...statuses, isApplyingGiftCertificate: false };\n\n    case GiftCertificateActionType.RemoveGiftCertificateRequested:\n        return { ...statuses, isRemovingGiftCertificate: true };\n\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateFailed:\n        return { ...statuses, isRemovingGiftCertificate: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\nimport { omit } from 'lodash';\n\nimport { clearErrorReducer } from '../common/error';\n\nimport { OrderAction, OrderActionType } from './order-actions';\nimport OrderState, { OrderDataState, OrderErrorsState, OrderMetaState, OrderStatusesState } from './order-state';\n\nconst DEFAULT_STATE: OrderState = {\n    errors: {},\n    meta: {},\n    statuses: {},\n};\n\nexport default function orderReducer(\n    state: OrderState = DEFAULT_STATE,\n    action: Action\n): OrderState {\n    const reducer = combineReducers<OrderState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: OrderDataState | undefined,\n    action: OrderAction\n): OrderDataState | undefined {\n    switch (action.type) {\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n        return action.payload\n            ? omit({ ...data, ...action.payload }, ['billingAddress', 'coupons'])\n            : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(\n    meta: OrderMetaState | undefined,\n    action: OrderAction\n): OrderMetaState | undefined {\n    switch (action.type) {\n    case OrderActionType.FinalizeOrderSucceeded:\n    case OrderActionType.SubmitOrderSucceeded:\n        return action.payload ? {\n            ...meta,\n            ...action.meta,\n            callbackUrl: action.payload.order.callbackUrl,\n            orderToken: action.payload.order.token,\n            payment: action.payload.order && action.payload.order.payment,\n        } : meta;\n\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: OrderErrorsState = DEFAULT_STATE.errors,\n    action: OrderAction\n): OrderErrorsState {\n    switch (action.type) {\n    case OrderActionType.LoadOrderRequested:\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n    case OrderActionType.LoadOrderPaymentsRequested:\n        return { ...errors, loadError: undefined };\n\n    case OrderActionType.LoadOrderFailed:\n    case OrderActionType.LoadOrderPaymentsFailed:\n        return { ...errors, loadError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: OrderStatusesState = DEFAULT_STATE.statuses,\n    action: OrderAction\n): OrderStatusesState {\n    switch (action.type) {\n    case OrderActionType.LoadOrderRequested:\n    case OrderActionType.LoadOrderPaymentsRequested:\n        return { ...statuses, isLoading: true };\n\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderFailed:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n    case OrderActionType.LoadOrderPaymentsFailed:\n        return { ...statuses, isLoading: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { assign, findIndex, isPlainObject, pickBy } from 'lodash';\n\nimport { PartialDeep } from '../types';\n\n/**\n * Push an item to an array if it doesn't exist in the array. Otherwise, merge\n * with the existing item in the array. This function always returns a new array.\n */\nexport default function mergeOrPush<T>(\n    array: T[],\n    item: T,\n    predicate: ((item: T) => boolean) | PartialDeep<T>\n): T[] {\n    const index = findIndex(array, typeof predicate === 'object' ? pickBy(predicate) : predicate);\n    const newArray = [...array];\n\n    if (index === -1) {\n        newArray.push(item);\n    } else {\n        newArray[index] = isPlainObject(item) ? assign({}, array[index], item) : item;\n    }\n\n    return newArray;\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { Country } from '../geography';\n\nimport { LoadShippingCountriesAction, ShippingCountryActionType } from './shipping-country-actions';\nimport ShippingCountryState, { ShippingCountryErrorsState, ShippingCountryStatusesState } from './shipping-country-state';\n\nconst DEFAULT_STATE: ShippingCountryState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function shippingCountryReducer(\n    state: ShippingCountryState = DEFAULT_STATE,\n    action: Action\n): ShippingCountryState {\n    const reducer = combineReducers<ShippingCountryState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Country[] | undefined,\n    action: LoadShippingCountriesAction\n): Country[] | undefined {\n    switch (action.type) {\n    case ShippingCountryActionType.LoadShippingCountriesSucceeded:\n        return action.payload || [];\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ShippingCountryErrorsState = DEFAULT_STATE.errors,\n    action: LoadShippingCountriesAction\n): ShippingCountryErrorsState {\n    switch (action.type) {\n    case ShippingCountryActionType.LoadShippingCountriesRequested:\n    case ShippingCountryActionType.LoadShippingCountriesSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case ShippingCountryActionType.LoadShippingCountriesFailed:\n        return { ...errors, loadError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ShippingCountryStatusesState = DEFAULT_STATE.statuses,\n    action: LoadShippingCountriesAction\n): ShippingCountryStatusesState {\n    switch (action.type) {\n    case ShippingCountryActionType.LoadShippingCountriesRequested:\n        return { ...statuses, isLoading: true };\n\n    case ShippingCountryActionType.LoadShippingCountriesSucceeded:\n    case ShippingCountryActionType.LoadShippingCountriesFailed:\n        return { ...statuses, isLoading: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { mapToInternalAddress } from '../address';\nimport { BillingAddress } from '../billing';\n\nimport { Customer } from '.';\nimport InternalCustomer from './internal-customer';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalCustomer(customer: Customer, billingAddress: BillingAddress): InternalCustomer {\n    const firstName = customer.firstName || billingAddress.firstName || '';\n    const lastName = customer.lastName || billingAddress.lastName || '';\n\n    return {\n        addresses: (customer.addresses || []).map(address => mapToInternalAddress(address)),\n        customerId: customer.id,\n        isGuest: customer.isGuest,\n        storeCredit: customer.storeCredit,\n        email: customer.email || billingAddress.email || '',\n        firstName,\n        lastName,\n        name: customer.fullName || [firstName, lastName].join(' '),\n    };\n}\n","import GiftCertificate from './gift-certificate';\nimport InternalGiftCertificate from './internal-gift-certificate';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalGiftCertificate(giftCertificate: GiftCertificate): InternalGiftCertificate {\n    return {\n        code: giftCertificate.code,\n        discountedAmount: giftCertificate.used,\n        remainingBalance: giftCertificate.remaining,\n        giftCertificate: {\n            balance: giftCertificate.balance,\n            code: giftCertificate.code,\n            purchaseDate: giftCertificate.purchaseDate,\n        },\n    };\n}\n","import { filter, find, keyBy, reduce } from 'lodash';\n\nimport { LineItem } from '../cart';\nimport { mapToInternalLineItems } from '../cart';\nimport { Checkout } from '../checkout';\nimport { AmountTransformer } from '../common/utility';\nimport { mapToInternalCoupon } from '../coupon';\nimport { HOSTED } from '../payment';\n\nimport InternalOrder, { InternalGiftCertificateList, InternalIncompleteOrder, InternalOrderPayment, InternalSocialDataList } from './internal-order';\nimport Order, { GatewayOrderPayment, GiftCertificateOrderPayment, OrderPayment, OrderPayments } from './order';\nimport { OrderMetaState } from './order-state';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalOrder(order: Order, orderMeta: OrderMetaState = {}): InternalOrder {\n    const decimalPlaces = order.currency.decimalPlaces;\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: order.orderId,\n        items: mapToInternalLineItems(order.lineItems, order.currency.decimalPlaces, 'productId'),\n        orderId: order.orderId,\n        currency: order.currency.code,\n        customerCanBeCreated: order.customerCanBeCreated,\n        payment: mapToInteralOrderPayment(order.payments, orderMeta.payment),\n        subtotal: {\n            amount: order.baseAmount,\n            integerAmount: amountTransformer.toInteger(order.baseAmount),\n        },\n        coupon: {\n            discountedAmount: reduce(order.coupons, (sum, coupon) => {\n                return sum + coupon.discountedAmount;\n            }, 0),\n            coupons: order.coupons.map(mapToInternalCoupon),\n        },\n        discount: {\n            amount: order.discountAmount,\n            integerAmount: amountTransformer.toInteger(order.discountAmount),\n        },\n        token: orderMeta.orderToken,\n        callbackUrl: orderMeta.callbackUrl,\n        discountNotifications: [],\n        giftCertificate: mapToGiftCertificates(order.payments),\n        socialData: mapToInternalSocialDataList(order),\n        status: order.status,\n        hasDigitalItems: order.hasDigitalItems,\n        isDownloadable: order.isDownloadable,\n        isComplete: order.isComplete,\n        shipping: {\n            amount: order.shippingCostTotal,\n            integerAmount: amountTransformer.toInteger(order.shippingCostTotal),\n            amountBeforeDiscount: order.shippingCostBeforeDiscount,\n            integerAmountBeforeDiscount: amountTransformer.toInteger(order.shippingCostBeforeDiscount),\n        },\n        storeCredit: {\n            amount: mapToStoreCredit(order.payments),\n        },\n        taxes: order.taxes,\n        taxTotal: {\n            amount: order.taxTotal,\n            integerAmount: amountTransformer.toInteger(order.taxTotal),\n        },\n        handling: {\n            amount: order.handlingCostTotal,\n            integerAmount: amountTransformer.toInteger(order.handlingCostTotal),\n        },\n        grandTotal: {\n            amount: order.orderAmount,\n            integerAmount: order.orderAmountAsInteger,\n        },\n    };\n}\n\nexport function mapToInternalIncompleteOrder(checkout: Checkout): InternalIncompleteOrder {\n    const payment = find(checkout.payments, { providerType: HOSTED });\n\n    return {\n        orderId: null,\n        isComplete: false,\n        payment: !payment ? {} : {\n            id: payment.providerId,\n            gateway: payment.gatewayId,\n            status: mapToInternalPaymentStatus(payment.detail.step),\n        },\n    };\n}\n\nfunction mapToInternalPaymentStatus(status: string): string {\n    return `PAYMENT_STATUS_${status}`;\n}\n\nfunction mapToStoreCredit(payments?: OrderPayments): number {\n    const item = find(payments, { providerId: 'storecredit' });\n\n    return item ? item.amount : 0;\n}\n\nfunction mapToGiftCertificates(payments?: OrderPayments): InternalGiftCertificateList {\n    const items = filter(payments, { providerId: 'giftcertificate' }) as GiftCertificateOrderPayment[];\n\n    return {\n        totalDiscountedAmount: reduce(items, (sum, item) => item.amount + sum, 0),\n        appliedGiftCertificates: keyBy(items.map(item => ({\n            code: item.detail.code,\n            discountedAmount: item.amount,\n            remainingBalance: item.detail.remaining,\n            giftCertificate: {\n                balance: item.amount + item.detail.remaining,\n                code: item.detail.code,\n                purchaseDate: '',\n            },\n        })), 'code'),\n    };\n}\n\nfunction mapToInteralOrderPayment(payments?: OrderPayments, payment: InternalOrderPayment = {}): InternalOrderPayment {\n    const item = find(payments, isDefaultOrderPayment) as GatewayOrderPayment;\n\n    if (!item) {\n        return {};\n    }\n\n    return {\n        id: item.providerId,\n        status: mapToInternalPaymentStatus(item.detail.step),\n        helpText: item.detail.instructions,\n        returnUrl: payment.returnUrl,\n    };\n}\n\nfunction isDefaultOrderPayment(payment: OrderPayment): payment is GatewayOrderPayment {\n    return payment.providerId !== 'giftcertificate' && payment.providerId !== 'storecredit';\n}\n\nfunction mapToInternalSocialDataList(order: Order): { [itemId: string]: InternalSocialDataList } | undefined {\n    const socialDataObject: { [itemId: string]: InternalSocialDataList } = {};\n    const items = [\n        ...order.lineItems.physicalItems,\n        ...order.lineItems.digitalItems,\n    ];\n\n    items.forEach(item => {\n        socialDataObject[item.id] = mapToInternalSocialData(item);\n    });\n\n    return socialDataObject;\n}\n\nfunction mapToInternalSocialData(lineItem: LineItem): InternalSocialDataList {\n    const codes = ['fb', 'tw', 'gp'];\n\n    return codes.reduce((socialData, code) => {\n        const item = lineItem.socialMedia && lineItem.socialMedia.find(item => item.code === code);\n\n        if (!item) {\n            return socialData;\n        }\n\n        socialData[code] = {\n            name: lineItem.name,\n            description: lineItem.name,\n            image: lineItem.imageUrl,\n            url: item.link,\n            shareText: item.text,\n            sharingLink: item.link,\n            channelName: item.channel,\n            channelCode: item.code,\n        };\n\n        return socialData;\n    }, {} as InternalSocialDataList);\n}\n","export default interface CustomerStrategyState {\n    data: CustomerStrategyDataState;\n    errors: CustomerStrategyErrorsState;\n    statuses: CustomerStrategyStatusesState;\n}\n\nexport interface CustomerStrategyDataState {\n    [key: string]: {\n        isInitialized: boolean,\n    };\n}\n\nexport interface CustomerStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    signInError?: Error;\n    signInMethodId?: string;\n    signOutError?: Error;\n    signOutMethodId?: string;\n    widgetInteractionError?: Error;\n    widgetInteractionMethodId?: string;\n}\n\nexport interface CustomerStrategyStatusesState {\n    deinitializeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isInitializing?: boolean;\n    isSigningIn?: boolean;\n    isSigningOut?: boolean;\n    signInMethodId?: string;\n    signOutMethodId?: string;\n    isWidgetInteracting?: boolean;\n    widgetInteractionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: CustomerStrategyState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\n\nimport { CustomerStrategyAction, CustomerStrategyActionType } from './customer-strategy-actions';\nimport CustomerStrategyState, { CustomerStrategyDataState, CustomerStrategyErrorsState, CustomerStrategyStatusesState, DEFAULT_STATE } from './customer-strategy-state';\n\nexport default function customerStrategyReducer(\n    state: CustomerStrategyState = DEFAULT_STATE,\n    action: Action\n): CustomerStrategyState {\n    const reducer = combineReducers<CustomerStrategyState, CustomerStrategyAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: CustomerStrategyDataState = DEFAULT_STATE.data,\n    action: CustomerStrategyAction\n): CustomerStrategyDataState {\n    switch (action.type) {\n    case CustomerStrategyActionType.InitializeSucceeded:\n        return {\n            ...data,\n            [action.meta && action.meta.methodId]: {\n                isInitialized: true,\n            },\n        };\n\n    case CustomerStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...data,\n            [action.meta && action.meta.methodId]: {\n                isInitialized: false,\n            },\n        };\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: CustomerStrategyErrorsState = DEFAULT_STATE.errors,\n    action: CustomerStrategyAction\n): CustomerStrategyErrorsState {\n    switch (action.type) {\n    case CustomerStrategyActionType.InitializeRequested:\n    case CustomerStrategyActionType.InitializeSucceeded:\n        return {\n            ...errors,\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.InitializeFailed:\n        return {\n            ...errors,\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.DeinitializeRequested:\n    case CustomerStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...errors,\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.DeinitializeFailed:\n        return {\n            ...errors,\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.SignInRequested:\n    case CustomerStrategyActionType.SignInSucceeded:\n        return {\n            ...errors,\n            signInError: undefined,\n            signInMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.SignInFailed:\n        return {\n            ...errors,\n            signInError: action.payload,\n            signInMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.SignOutRequested:\n    case CustomerStrategyActionType.SignOutSucceeded:\n        return {\n            ...errors,\n            signOutError: undefined,\n            signOutMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.SignOutFailed:\n        return {\n            ...errors,\n            signOutError: action.payload,\n            signOutMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.WidgetInteractionStarted:\n    case CustomerStrategyActionType.WidgetInteractionFinished:\n        return {\n            ...errors,\n            widgetInteractionError: undefined,\n            widgetInteractionMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.WidgetInteractionFailed:\n        return {\n            ...errors,\n            widgetInteractionError: action.payload,\n            widgetInteractionMethodId: action.meta.methodId,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CustomerStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: CustomerStrategyAction\n): CustomerStrategyStatusesState {\n    switch (action.type) {\n    case CustomerStrategyActionType.InitializeRequested:\n        return {\n            ...statuses,\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.InitializeFailed:\n    case CustomerStrategyActionType.InitializeSucceeded:\n        return {\n            ...statuses,\n            isInitializing: false,\n            initializeMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.DeinitializeRequested:\n        return {\n            ...statuses,\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.DeinitializeFailed:\n    case CustomerStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...statuses,\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.SignInRequested:\n        return {\n            ...statuses,\n            isSigningIn: true,\n            signInMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.SignInFailed:\n    case CustomerStrategyActionType.SignInSucceeded:\n        return {\n            ...statuses,\n            isSigningIn: false,\n            signInMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.SignOutRequested:\n        return {\n            ...statuses,\n            isSigningOut: true,\n            signOutMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.SignOutFailed:\n    case CustomerStrategyActionType.SignOutSucceeded:\n        return {\n            ...statuses,\n            isSigningOut: false,\n            signOutMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.WidgetInteractionStarted:\n        return {\n            ...statuses,\n            isWidgetInteracting: true,\n            widgetInteractionMethodId: action.meta.methodId,\n         };\n\n    case CustomerStrategyActionType.WidgetInteractionFinished:\n    case CustomerStrategyActionType.WidgetInteractionFailed:\n         return {\n            ...statuses,\n            isWidgetInteracting: false,\n            widgetInteractionMethodId: undefined,\n         };\n\n    default:\n        return statuses;\n    }\n}\n","export default interface ShippingStrategyState {\n    data: ShippingStrategyDataState;\n    errors: ShippingStrategyErrorsState;\n    statuses: ShippingStrategyStatusesState;\n}\n\nexport interface ShippingStrategyDataState {\n    [key: string]: {\n        isInitialized: boolean,\n    };\n}\n\nexport interface ShippingStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    updateAddressError?: Error;\n    updateAddressMethodId?: string;\n    selectOptionError?: Error;\n    selectOptionMethodId?: string;\n}\n\nexport interface ShippingStrategyStatusesState {\n    deinitializeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isInitializing?: boolean;\n    isUpdatingAddress?: boolean;\n    isSelectingOption?: boolean;\n    updateAddressMethodId?: string;\n    selectOptionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: ShippingStrategyState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\n\nimport { ShippingStrategyAction, ShippingStrategyActionType } from './shipping-strategy-actions';\nimport ShippingStrategyState, { DEFAULT_STATE, ShippingStrategyDataState, ShippingStrategyErrorsState, ShippingStrategyStatusesState } from './shipping-strategy-state';\n\nexport default function shippingStrategyReducer(\n    state: ShippingStrategyState = DEFAULT_STATE,\n    action: Action\n): ShippingStrategyState {\n    const reducer = combineReducers<ShippingStrategyState, ShippingStrategyAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: ShippingStrategyDataState = DEFAULT_STATE.data,\n    action: ShippingStrategyAction\n): ShippingStrategyDataState {\n    switch (action.type) {\n    case ShippingStrategyActionType.InitializeSucceeded:\n        return {\n            ...data,\n            [action.meta && action.meta.methodId]: {\n                isInitialized: true,\n            },\n        };\n\n    case ShippingStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...data,\n            [action.meta && action.meta.methodId]: {\n                isInitialized: false,\n            },\n        };\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: ShippingStrategyErrorsState = DEFAULT_STATE.errors,\n    action: ShippingStrategyAction\n): ShippingStrategyErrorsState {\n    switch (action.type) {\n    case ShippingStrategyActionType.InitializeRequested:\n    case ShippingStrategyActionType.InitializeSucceeded:\n        return {\n            ...errors,\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.InitializeFailed:\n        return {\n            ...errors,\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.DeinitializeRequested:\n    case ShippingStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...errors,\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.DeinitializeFailed:\n        return {\n            ...errors,\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.UpdateAddressRequested:\n    case ShippingStrategyActionType.UpdateAddressSucceeded:\n        return {\n            ...errors,\n            updateAddressError: undefined,\n            updateAddressMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.UpdateAddressFailed:\n        return {\n            ...errors,\n            updateAddressError: action.payload,\n            updateAddressMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.SelectOptionRequested:\n    case ShippingStrategyActionType.SelectOptionSucceeded:\n        return {\n            ...errors,\n            selectOptionError: undefined,\n            selectOptionMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.SelectOptionFailed:\n        return {\n            ...errors,\n            selectOptionError: action.payload,\n            selectOptionMethodId: action.meta && action.meta.methodId,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ShippingStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: ShippingStrategyAction\n): ShippingStrategyStatusesState {\n    switch (action.type) {\n    case ShippingStrategyActionType.InitializeRequested:\n        return {\n            ...statuses,\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.InitializeFailed:\n    case ShippingStrategyActionType.InitializeSucceeded:\n        return {\n            ...statuses,\n            isInitializing: false,\n            initializeMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.DeinitializeRequested:\n        return {\n            ...statuses,\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.DeinitializeFailed:\n    case ShippingStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...statuses,\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.UpdateAddressRequested:\n        return {\n            ...statuses,\n            isUpdatingAddress: true,\n            updateAddressMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.UpdateAddressFailed:\n    case ShippingStrategyActionType.UpdateAddressSucceeded:\n        return {\n            ...statuses,\n            isUpdatingAddress: false,\n            updateAddressMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.SelectOptionRequested:\n        return {\n            ...statuses,\n            isSelectingOption: true,\n            selectOptionMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.SelectOptionFailed:\n    case ShippingStrategyActionType.SelectOptionSucceeded:\n        return {\n            ...statuses,\n            isSelectingOption: false,\n            selectOptionMethodId: undefined,\n        };\n\n    default:\n        return statuses;\n    }\n}\n","export default function getCallbackUrl(origin: string): string {\n    return `${window.location.origin}/checkout.php?action=set_external_checkout&provider=masterpass&gateway=stripe&origin=${origin}`;\n}\n","import isPrivate from './is-private';\nimport omitDeep from './omit-deep';\n\nexport default function omitPrivate(object: any): any {\n    return omitDeep(object, (value: any, key: string) => isPrivate(key));\n}\n","export default function getEnvironment(): string {\n    try {\n        return process.env.NODE_ENV || 'development';\n    } catch (e) {\n        return 'development';\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nimport InternalOrderRequestBody from './internal-order-request-body';\nimport { InternalOrderResponseBody } from './internal-order-responses';\nimport Order from './order';\n\nexport default class OrderRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadOrder(orderId: number, { timeout }: RequestOptions = {}): Promise<Response<Order>> {\n        const url = `/api/storefront/orders/${orderId}`;\n        const headers = { Accept: ContentType.JsonV1 };\n        const params = {\n            include: [\n                'payments',\n                'lineItems.physicalItems.socialMedia',\n                'lineItems.physicalItems.options',\n                'lineItems.digitalItems.socialMedia',\n                'lineItems.digitalItems.options',\n            ].join(','),\n        };\n\n        return this._requestSender.get(url, {\n            params,\n            headers,\n            timeout,\n        });\n    }\n\n    submitOrder(body: InternalOrderRequestBody, { timeout }: RequestOptions = {}): Promise<Response<InternalOrderResponseBody>> {\n        const url = '/internalapi/v1/checkout/order';\n\n        return this._requestSender.post(url, { body, timeout });\n    }\n\n    finalizeOrder(orderId: number, { timeout }: RequestOptions = {}): Promise<Response<InternalOrderResponseBody>> {\n        const url = `/internalapi/v1/checkout/order/${orderId}`;\n\n        return this._requestSender.post(url, { timeout });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, from, of, Observable, Observer } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\n\nimport { CheckoutValidator, InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport InternalOrderRequestBody from './internal-order-request-body';\nimport { FinalizeOrderAction, LoadOrderAction, LoadOrderPaymentsAction, OrderActionType, SubmitOrderAction } from './order-actions';\nimport OrderRequestBody from './order-request-body';\nimport OrderRequestSender from './order-request-sender';\n\nexport default class OrderActionCreator {\n    constructor(\n        private _orderRequestSender: OrderRequestSender,\n        private _checkoutValidator: CheckoutValidator\n    ) {}\n\n    loadOrder(orderId: number, options?: RequestOptions): Observable<LoadOrderAction> {\n        return new Observable((observer: Observer<LoadOrderAction>) => {\n            observer.next(createAction(OrderActionType.LoadOrderRequested));\n\n            this._orderRequestSender.loadOrder(orderId, options)\n                .then(response => {\n                    observer.next(createAction(OrderActionType.LoadOrderSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(OrderActionType.LoadOrderFailed, response));\n                });\n        });\n    }\n\n    // TODO: Remove when checkout does not contain unrelated order data.\n    loadOrderPayments(orderId: number, options?: RequestOptions): Observable<LoadOrderPaymentsAction> {\n        return new Observable((observer: Observer<LoadOrderPaymentsAction>) => {\n            observer.next(createAction(OrderActionType.LoadOrderPaymentsRequested));\n\n            this._orderRequestSender.loadOrder(orderId, options)\n                .then(response => {\n                    observer.next(createAction(OrderActionType.LoadOrderPaymentsSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(OrderActionType.LoadOrderPaymentsFailed, response));\n                });\n        });\n    }\n\n    loadCurrentOrder(options?: RequestOptions): ThunkAction<LoadOrderAction, InternalCheckoutSelectors> {\n        return store => defer(() => {\n            const orderId = this._getCurrentOrderId(store.getState());\n\n            if (!orderId) {\n                throw new MissingDataError(MissingDataErrorType.MissingOrderId);\n            }\n\n            return this.loadOrder(orderId, options);\n        });\n    }\n\n    submitOrder(payload: OrderRequestBody, options?: RequestOptions): ThunkAction<SubmitOrderAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(OrderActionType.SubmitOrderRequested)),\n            defer(() => {\n                const state = store.getState();\n                const externalSource = state.config.getExternalSource();\n                const checkout = state.checkout.getCheckout();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                return from(\n                    this._checkoutValidator.validate(checkout, options)\n                        .then(() => this._orderRequestSender.submitOrder(this._mapToOrderRequestBody(payload, checkout.customerMessage, externalSource), options))\n                ).pipe(\n                    switchMap(response => concat(\n                        // TODO: Remove once we can submit orders using storefront API\n                        this.loadOrder(response.body.data.order.orderId, options),\n                        of(createAction(OrderActionType.SubmitOrderSucceeded, response.body.data, { ...response.body.meta, token: response.headers.token }))\n                    ))\n                );\n            }).pipe(\n                catchError(error => throwErrorAction(OrderActionType.SubmitOrderFailed, error))\n            )\n        );\n    }\n\n    finalizeOrder(orderId: number, options?: RequestOptions): Observable<FinalizeOrderAction | LoadOrderAction> {\n        return concat(\n            of(createAction(OrderActionType.FinalizeOrderRequested)),\n            from(this._orderRequestSender.finalizeOrder(orderId, options))\n                .pipe(\n                    switchMap(response => concat(\n                        this.loadOrder(orderId, options),\n                        of(createAction(OrderActionType.FinalizeOrderSucceeded, response.body.data))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(OrderActionType.FinalizeOrderFailed, error))\n        );\n    }\n\n    private _getCurrentOrderId(state: InternalCheckoutSelectors): number | undefined {\n        const order = state.order.getOrder();\n        const checkout = state.checkout.getCheckout();\n\n        return (order && order.orderId) || (checkout && checkout.orderId);\n    }\n\n    private _mapToOrderRequestBody(payload: OrderRequestBody, customerMessage: string, externalSource?: string): InternalOrderRequestBody {\n        const { payment, ...order } = payload;\n\n        if (!payment) {\n            return {\n                ...order,\n                customerMessage,\n                externalSource,\n            };\n        }\n\n        return {\n            ...order,\n            customerMessage,\n            externalSource,\n            payment: {\n                paymentData: payment.paymentData,\n                name: payment.methodId,\n                gateway: payment.gatewayId,\n            },\n        };\n    }\n}\n","import { isEqual } from 'lodash';\n\nimport { PartialDeep } from '../common/types';\n\nimport Cart from './cart';\n\nexport default class CartComparator {\n    isEqual(cartA: Cart, cartB: Cart): boolean {\n        return isEqual(\n            this._normalize(cartA),\n            this._normalize(cartB)\n        );\n    }\n\n    private _normalize(cart: Cart): PartialDeep<Cart> {\n        return {\n            cartAmount: cart.cartAmount,\n            currency: cart.currency,\n            id: cart.id,\n            lineItems: {\n                digitalItems: cart.lineItems.digitalItems\n                    .slice()\n                    .sort((itemA, itemB) =>\n                        `${itemA.productId}${itemA.variantId}`.localeCompare(`${itemB.productId}${itemB.variantId}`)\n                    )\n                    .map(item => ({\n                        extendedSalePrice: item.extendedSalePrice,\n                        productId: item.productId,\n                        quantity: item.quantity,\n                        variantId: item.variantId,\n                    })),\n                giftCertificates: cart.lineItems.giftCertificates\n                    .slice()\n                    .sort((itemA, itemB) => `${itemA.id}`.localeCompare(`${itemB.id}`))\n                    .map(item => ({\n                        amount: item.amount,\n                        recipient: item.recipient,\n                    })),\n                physicalItems: cart.lineItems.physicalItems\n                    .slice()\n                    .sort((itemA, itemB) =>\n                        `${itemA.productId}${itemA.variantId}`.localeCompare(`${itemB.productId}${itemB.variantId}`)\n                    )\n                    .map(item => ({\n                        extendedSalePrice: item.extendedSalePrice,\n                        productId: item.productId,\n                        quantity: item.quantity,\n                        variantId: item.variantId,\n                        giftWrapping: item.giftWrapping,\n                    })),\n            },\n        };\n    }\n}\n","export default function toSingleLine(input?: string) {\n    if (!input) {\n        return '';\n    }\n\n    return input.split(/(?:\\r\\n|\\n|\\r)/)\n        .map(line => line.replace(/^\\s+/gm, ''))\n        .join(' ')\n        .trim();\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport { ApplyCouponAction, CouponAction, CouponActionType, RemoveCouponAction } from './coupon-actions';\nimport CouponRequestSender from './coupon-request-sender';\n\nexport default class CouponActionCreator {\n    constructor(\n        private _couponRequestSender: CouponRequestSender\n    ) {}\n\n    applyCoupon(code: string, options?: RequestOptions): ThunkAction<CouponAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ApplyCouponAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(CouponActionType.ApplyCouponRequested));\n\n            this._couponRequestSender.applyCoupon(checkout.id, code, options)\n                .then(({ body }) => {\n                    observer.next(createAction(CouponActionType.ApplyCouponSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CouponActionType.ApplyCouponFailed, response));\n                });\n        });\n    }\n\n    removeCoupon(code: string, options?: RequestOptions): ThunkAction<CouponAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<RemoveCouponAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(CouponActionType.RemoveCouponRequested));\n\n            this._couponRequestSender.removeCoupon(checkout.id, code, options)\n                .then(({ body }) => {\n                    observer.next(createAction(CouponActionType.RemoveCouponSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CouponActionType.RemoveCouponFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout, CheckoutIncludes, CHECKOUT_DEFAULT_INCLUDES } from '../checkout';\nimport { joinIncludes, ContentType, RequestOptions } from '../common/http-request';\n\nexport default class CouponRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    applyCoupon(checkoutId: string, couponCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/coupons`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes([\n                    ...CHECKOUT_DEFAULT_INCLUDES,\n                    CheckoutIncludes.AvailableShippingOptions,\n                ]),\n            },\n            body: { couponCode },\n        });\n    }\n\n    removeCoupon(checkoutId: string, couponCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/coupons/${couponCode}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.delete(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes([\n                    ...CHECKOUT_DEFAULT_INCLUDES,\n                    CheckoutIncludes.AvailableShippingOptions,\n                ]),\n            },\n        });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable ,  Observer } from 'rxjs';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport { GiftCertificateRequestSender } from '.';\nimport { ApplyGiftCertificateAction, GiftCertificateActionType, RemoveGiftCertificateAction } from './gift-certificate-actions';\n\nexport default class GiftCertificateActionCreator {\n    constructor(\n        private _giftCertificateRequestSender: GiftCertificateRequestSender\n    ) {}\n\n    applyGiftCertificate(giftCertificate: string, options?: RequestOptions): ThunkAction<ApplyGiftCertificateAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ApplyGiftCertificateAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(GiftCertificateActionType.ApplyGiftCertificateRequested));\n\n            this._giftCertificateRequestSender.applyGiftCertificate(checkout.id, giftCertificate, options)\n                .then(({ body }) => {\n                    observer.next(createAction(GiftCertificateActionType.ApplyGiftCertificateSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(GiftCertificateActionType.ApplyGiftCertificateFailed, response));\n                });\n        });\n    }\n\n    removeGiftCertificate(giftCertificate: string, options?: RequestOptions): ThunkAction<RemoveGiftCertificateAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<RemoveGiftCertificateAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(GiftCertificateActionType.RemoveGiftCertificateRequested));\n\n            this._giftCertificateRequestSender.removeGiftCertificate(checkout.id, giftCertificate, options)\n                .then(({ body }) => {\n                    observer.next(createAction(GiftCertificateActionType.RemoveGiftCertificateSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(GiftCertificateActionType.RemoveGiftCertificateFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout, CHECKOUT_DEFAULT_INCLUDES } from '../checkout';\nimport { joinIncludes, ContentType, RequestOptions } from '../common/http-request';\n\nexport default class GiftCertificateRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    applyGiftCertificate(checkoutId: string, giftCertificateCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/gift-certificates`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes(CHECKOUT_DEFAULT_INCLUDES),\n            },\n            body: { giftCertificateCode },\n        });\n    }\n\n    removeGiftCertificate(checkoutId: string, giftCertificateCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/gift-certificates/${giftCertificateCode}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.delete(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes(CHECKOUT_DEFAULT_INCLUDES),\n            },\n        });\n    }\n}\n","export default class CancellablePromise<T> {\n    promise: Promise<T>;\n    cancel!: (reason?: any) => void;\n\n    constructor(promise: Promise<T>) {\n        const cancellable = new Promise<T>((resolve, reject) => {\n            this.cancel = reject;\n        });\n\n        this.promise = Promise.race([promise, cancellable]);\n    }\n}\n","import { isEqual } from 'lodash';\n\nimport { omitPrivate } from '../common/utility';\n\nimport InternalAddress from './internal-address';\n\nexport default function isInternalAddressEqual(addressA: Partial<InternalAddress>, addressB: Partial<InternalAddress>): boolean {\n    return isEqual(normalize(addressA), normalize(addressB));\n}\n\nfunction normalize(address: Partial<InternalAddress>): Partial<InternalAddress> {\n    const ignoredKeys = ['id', 'provinceCode'];\n\n    return (Object.keys(omitPrivate(address) || {}) as Array<keyof InternalAddress>)\n        .reduce(\n            (result, key) => ignoredKeys.indexOf(key) === -1 && address[key] ?\n                { ...result, [key]: address[key] } :\n                result,\n            {}\n        );\n}\n","import { BillingAddress } from '../billing';\n\nimport Address from './address';\nimport InternalAddress from './internal-address';\n\nexport default function mapFromInternalAddress(address: InternalAddress): Address | BillingAddress {\n    return {\n        id: address.id,\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        address1: address.addressLine1,\n        address2: address.addressLine2,\n        city: address.city,\n        stateOrProvince: address.province,\n        stateOrProvinceCode: address.provinceCode,\n        postalCode: address.postCode,\n        country: address.country,\n        countryCode: address.countryCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    };\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport { LoadShippingCountriesAction, ShippingCountryActionType } from './shipping-country-actions';\nimport ShippingCountryRequestSender from './shipping-country-request-sender';\n\nexport default class ShippingCountryActionCreator {\n    constructor(\n        private _shippingCountryRequestSender: ShippingCountryRequestSender\n    ) {}\n\n    loadCountries(options?: RequestOptions): Observable<LoadShippingCountriesAction> {\n        return Observable.create((observer: Observer<LoadShippingCountriesAction>) => {\n            observer.next(createAction(ShippingCountryActionType.LoadShippingCountriesRequested));\n\n            this._shippingCountryRequestSender.loadCountries(options)\n                .then(response => {\n                    observer.next(createAction(ShippingCountryActionType.LoadShippingCountriesSucceeded, response.body.data));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ShippingCountryActionType.LoadShippingCountriesFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\nimport { CountryResponseBody } from '../geography';\n\nexport default class ShippingCountryRequestSender {\n    constructor(\n        private _requestSender: RequestSender,\n        private _config: { locale?: string }\n    ) {}\n\n    loadCountries({ timeout }: RequestOptions = {}): Promise<Response<CountryResponseBody>> {\n        const url = '/internalapi/v1/shipping/countries';\n        const headers = {\n            'Accept-Language': this._config.locale,\n        };\n\n        return this._requestSender.get(url, { headers, timeout });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { AddressRequestBody } from '../address';\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { Registry } from '../common/registry';\n\nimport { ShippingInitializeOptions, ShippingRequestOptions } from './shipping-request-options';\nimport {\n    ShippingStrategyActionType,\n    ShippingStrategyDeinitializeAction,\n    ShippingStrategyInitializeAction,\n    ShippingStrategySelectOptionAction,\n    ShippingStrategyUpdateAddressAction,\n} from './shipping-strategy-actions';\nimport { ShippingStrategy } from './strategies';\n\nexport default class ShippingStrategyActionCreator {\n    constructor(\n        private _strategyRegistry: Registry<ShippingStrategy>\n    ) {}\n\n    updateAddress(address: AddressRequestBody, options?: ShippingRequestOptions): ThunkAction<ShippingStrategyUpdateAddressAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategyUpdateAddressAction>) => {\n            const payment = store.getState().payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n\n            observer.next(createAction(ShippingStrategyActionType.UpdateAddressRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .updateAddress(address, { ...options, methodId })\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.UpdateAddressSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.UpdateAddressFailed, error, { methodId }));\n                });\n        });\n    }\n\n    selectOption(shippingOptionId: string, options?: ShippingRequestOptions): ThunkAction<ShippingStrategySelectOptionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategySelectOptionAction>) => {\n            const payment = store.getState().payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n\n            observer.next(createAction(ShippingStrategyActionType.SelectOptionRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .selectOption(shippingOptionId, { ...options, methodId })\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.SelectOptionSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.SelectOptionFailed, error, { methodId }));\n                });\n        });\n    }\n\n    initialize(options?: ShippingInitializeOptions): ThunkAction<ShippingStrategyInitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategyInitializeAction>) => {\n            const state = store.getState();\n            const payment = state.payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n            const mergedOptions = { ...options, methodId };\n\n            if (methodId && state.shippingStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(ShippingStrategyActionType.InitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .initialize(mergedOptions)\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.InitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.InitializeFailed, error, { methodId }));\n                });\n        });\n    }\n\n    deinitialize(options?: ShippingRequestOptions): ThunkAction<ShippingStrategyDeinitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategyDeinitializeAction>) => {\n            const state = store.getState();\n            const payment = state.payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n\n            if (methodId && !state.shippingStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(ShippingStrategyActionType.DeinitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .deinitialize({ ...options, methodId })\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.DeinitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.DeinitializeFailed, error, { methodId }));\n                });\n        });\n    }\n}\n","import StandardError from './standard-error';\n\nexport default class NotImplementedError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Not implemented.');\n\n        this.type = 'not_implemented';\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors} from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { AmazonPayLoginButton, AmazonPayScriptLoader, AmazonPayWindow } from '../../../payment/strategies/amazon-pay';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../../../remote-checkout';\nimport CustomerCredentials from '../../customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nimport AmazonPayCustomerInitializeOptions from './amazon-pay-customer-initialize-options';\n\nexport default class AmazonPayCustomerStrategy implements CustomerStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _window: AmazonPayWindow;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _remoteCheckoutRequestSender: RemoteCheckoutRequestSender,\n        private _scriptLoader: AmazonPayScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { amazon: amazonOptions, methodId } = options;\n\n        if (!amazonOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.amazon\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => new Promise((resolve, reject) => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const { onError = () => {} } = amazonOptions;\n                const onReady = () => {\n                    this._createSignInButton({\n                        ...amazonOptions,\n                        onError: error => {\n                            reject(error);\n                            onError(error);\n                        },\n                    });\n\n                    resolve();\n                };\n\n                this._scriptLoader.loadWidget(this._paymentMethod, onReady)\n                    .catch(reject);\n            }))\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via AmazonPay, the shopper must click on \"Login with Amazon\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _createSignInButton(options: AmazonPayCustomerInitializeOptions): AmazonPayLoginButton {\n        if (!this._paymentMethod || !this._window.OffAmazonPayments) {\n            throw new NotInitializedError(NotInitializedErrorType.CustomerNotInitialized);\n        }\n\n        if (!this._paymentMethod.config.merchantId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { initializationData } = this._paymentMethod;\n\n        return new this._window.OffAmazonPayments.Button(options.container, this._paymentMethod.config.merchantId, {\n            color: options.color || 'Gold',\n            size: options.size || 'small',\n            type: 'PwA',\n            useAmazonAddressBook: true,\n            onError: options.onError,\n            authorization: () => {\n                this._handleAuthorization(initializationData);\n            },\n        });\n    }\n\n    private _handleAuthorization(options: AuthorizationOptions): void {\n        this._remoteCheckoutRequestSender.generateToken()\n            .then(({ body }) => {\n                if (!this._window.amazon) {\n                    throw new NotInitializedError(NotInitializedErrorType.ShippingNotInitialized);\n                }\n\n                this._window.amazon.Login.authorize({\n                    popup: false,\n                    scope: 'payments:shipping_address payments:billing_address payments:widget profile',\n                    state: `${options.tokenPrefix}${body.token}`,\n                }, options.redirectUrl);\n\n                this._remoteCheckoutRequestSender.trackAuthorizationEvent();\n            });\n    }\n}\n\ninterface AuthorizationOptions {\n    redirectUrl: string;\n    tokenPrefix: string;\n}\n","import { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError } from '../../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { BraintreeVisaCheckoutPaymentProcessor } from '../../../payment/strategies/braintree';\nimport { VisaCheckoutScriptLoader } from '../../../payment/strategies/braintree';\nimport { VisaCheckoutPaymentSuccessPayload } from '../../../payment/strategies/braintree/visacheckout';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport CustomerCredentials from '../../customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategyActionCreator from '../../customer-strategy-action-creator';\n\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class BraintreeVisaCheckoutCustomerStrategy implements CustomerStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _buttonClassName: string = 'visa-checkout-wrapper';\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _customerStrategyActionCreator: CustomerStrategyActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _braintreeVisaCheckoutPaymentProcessor: BraintreeVisaCheckoutPaymentProcessor,\n        private _visaCheckoutScriptLoader: VisaCheckoutScriptLoader\n    ) {}\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { braintreevisacheckout: visaCheckoutOptions, methodId } = options;\n\n        if (!visaCheckoutOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.braintreevisacheckout\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                const checkout = state.checkout.getCheckout();\n                const storeConfig = state.config.getStoreConfig();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const {\n                    container,\n                    onError = () => {},\n                } = visaCheckoutOptions;\n\n                const initOptions = {\n                    locale: storeConfig.storeProfile.storeLanguage,\n                    collectShipping: true,\n                    subtotal: checkout.subtotal,\n                    currencyCode: storeConfig.currency.code,\n                };\n\n                return Promise.all([\n                    this._visaCheckoutScriptLoader.load(this._paymentMethod.config.testMode),\n                    this._braintreeVisaCheckoutPaymentProcessor.initialize(this._paymentMethod.clientToken, initOptions),\n                ])\n                .then(([visaCheckout, initOptions]) => {\n                    const signInButton = this._createSignInButton(container, this._buttonClassName);\n\n                    visaCheckout.init(initOptions);\n                    visaCheckout.on('payment.success', (paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) =>\n                        this._paymentInstrumentSelected(paymentSuccessPayload)\n                            .catch(error => onError(error))\n                    );\n                    visaCheckout.on('payment.error', (payment, error) => onError(error));\n\n                    return signInButton;\n                })\n                .then(signInButton => { signInButton.style.visibility = 'visible'; });\n            })\n            .then(() => this._store.getState());\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via VisaCheckout, the shopper must click on \"Visa Checkout\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut('braintreevisacheckout', options)\n        );\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        return this._braintreeVisaCheckoutPaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    private _paymentInstrumentSelected(paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) {\n        const state = this._store.getState();\n\n        if (!this._paymentMethod) {\n            throw new Error('Payment method not initialized');\n        }\n\n        const { id: methodId } = this._paymentMethod;\n\n        return this._store.dispatch(\n            this._customerStrategyActionCreator.widgetInteraction(() => {\n                return this._braintreeVisaCheckoutPaymentProcessor.handleSuccess(\n                    paymentSuccessPayload,\n                    state.shippingAddress.getShippingAddress(),\n                    state.billingAddress.getBillingAddress()\n                )\n                .then(() => this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()));\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _createSignInButton(containerId: string, buttonClass: string): HTMLElement {\n        const container = document.querySelector(`#${containerId}`);\n\n        if (!container) {\n            throw new Error('Need a container to place the button');\n        }\n\n        return (container.querySelector('.' + buttonClass) as HTMLElement) ||\n            this._insertVisaCheckoutButton(container, buttonClass);\n    }\n\n    private _insertVisaCheckoutButton(container: Element, buttonClass: string): HTMLElement {\n        const buttonSource = 'https://secure.checkout.visa.com/wallet-services-web/xo/button.png?acceptCanadianVisaDebit=false&cobrand=true&size=154';\n        const buttonTemplate = `\n            <img\n                alt=\"Visa Checkout\"\n                class=\"v-button\"\n                role=\"button\"\n                src=\"${buttonSource}\"\n                />\n            <a class=\"v-learn v-learn-default\" style=\"text-align: right; display: block; font-size: 10px; color: #003366;\" href=\"#\" data-locale=\"en_US\">Tell Me More</a>`;\n\n        const visaCheckoutButton = document.createElement('div');\n        visaCheckoutButton.style.visibility = 'hidden';\n        visaCheckoutButton.className = buttonClass;\n        visaCheckoutButton.innerHTML = buttonTemplate;\n\n        container.appendChild(visaCheckoutButton);\n\n        return visaCheckoutButton;\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { toFormUrlEncoded } from '../../../common/http-request';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { ChasePayScriptLoader, ChasePaySuccessPayload } from '../../../payment/strategies/chasepay';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport CustomerCredentials from '../../customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\n\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class ChasePayCustomerStrategy implements CustomerStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _chasePayScriptLoader: ChasePayScriptLoader,\n        private _requestSender: RequestSender,\n        private _formPoster: FormPoster\n    ) {}\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { chasepay: chasePayOptions, methodId } = options;\n\n        if (!chasePayOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.chasepay\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                const cart = state.cart.getCart();\n                const storeConfig = state.config.getStoreConfig();\n\n                if (!cart) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCart);\n                }\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!this._paymentMethod || !this._paymentMethod.initializationData.digitalSessionId) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n\n                const { container } = chasePayOptions;\n\n                return this._chasePayScriptLoader.load(this._paymentMethod.config.testMode)\n                    .then(JPMC => {\n                        const ChasePay = JPMC.ChasePay;\n\n                        ChasePay.configure({\n                            language: storeConfig.storeProfile.storeLanguage,\n                        });\n\n                        if (ChasePay.isChasePayUp) {\n                            ChasePay.insertButtons({\n                                containers: [container],\n                            });\n                        }\n\n                        ChasePay.on(ChasePay.EventType.START_CHECKOUT, () => {\n                            this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n                                .then(() => {\n                                    const state = this._store.getState();\n                                    const method = state.paymentMethods.getPaymentMethod(methodId);\n                                    const sessionId = method && method.initializationData && method.initializationData.digitalSessionId;\n\n                                    if (sessionId) {\n                                        ChasePay.startCheckout(sessionId);\n                                    }\n                                });\n                        });\n\n                        ChasePay.on(ChasePay.EventType.COMPLETE_CHECKOUT, (payload: ChasePaySuccessPayload) => {\n                            const state = this._store.getState();\n                            const method = state.paymentMethods.getPaymentMethod(methodId);\n                            const requestId = method && method.initializationData && method.initializationData.merchantRequestId;\n\n                            if (requestId) {\n                                this._setExternalCheckoutData(payload, requestId)\n                                    .then(() => {\n                                        this._reloadPage();\n                                });\n                            }\n                        });\n                    });\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Chase Pay®, the shopper must click on \"Chase Pay®\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _setExternalCheckoutData(payload: ChasePaySuccessPayload, requestId: string): Promise<Response> {\n        const url = `checkout.php?provider=chasepay&action=set_external_checkout`;\n        const options = {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\n            },\n            body: toFormUrlEncoded({\n                sessionToken: payload.sessionToken,\n                merchantRequestId: requestId,\n            }),\n            method: 'post',\n        };\n\n        return this._requestSender.sendRequest(url, options);\n    }\n\n    private _reloadPage() {\n        this._formPoster.postForm('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            params: {\n                fromChasePay: true,\n            },\n        });\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport CustomerActionCreator from '../../customer-action-creator';\nimport CustomerCredentials from '../../customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\n\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class DefaultCustomerStrategy implements CustomerStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _customerActionCreator: CustomerActionCreator\n    ) {}\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._customerActionCreator.signInCustomer(credentials, options)\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._customerActionCreator.signOutCustomer(options)\n        );\n    }\n\n    initialize(options?: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError } from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { GooglePayPaymentProcessor } from '../../../payment/strategies/googlepay';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport CustomerCredentials from '../../customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nimport GooglePayCustomerInitializeOptions from './googlepay-customer-initialize-options';\n\nexport default class GooglePayCustomerStrategy implements CustomerStrategy {\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _googlePayPaymentProcessor: GooglePayPaymentProcessor,\n        private _formPoster: FormPoster\n    ) {}\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId }  = options;\n\n        const googlePayOptions = this._getGooglePayOptions(options);\n\n        if (!methodId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._googlePayPaymentProcessor.initialize(methodId)\n            .then(() => {\n                this._walletButton = this._createSignInButton(googlePayOptions.container);\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._walletButton && this._walletButton.parentNode) {\n            this._walletButton.parentNode.removeChild(this._walletButton);\n            this._walletButton = undefined;\n        }\n\n        return this._googlePayPaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Google Pay, the shopper must click on \"Google Pay\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const container = document.querySelector(`#${containerId}`);\n\n        if (!container) {\n            throw new InvalidArgumentError('Unable to create sign-in button without valid container ID.');\n        }\n\n        const button = this._googlePayPaymentProcessor.createButton(this._handleWalletButtonClick);\n\n        container.appendChild(button);\n\n        return button;\n    }\n\n    private _getGooglePayOptions(options: CustomerInitializeOptions): GooglePayCustomerInitializeOptions {\n        if (options.methodId === 'googlepaybraintree' && options.googlepaybraintree) {\n            return options.googlepaybraintree;\n        }\n\n        if (options.methodId === 'googlepaystripe' && options.googlepaystripe) {\n            return options.googlepaystripe;\n        }\n\n        throw new InvalidArgumentError();\n    }\n\n    private _onPaymentSelectComplete(): void {\n        this._formPoster.postForm('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n        });\n    }\n\n    private _onError(error?: Error): void {\n        if (error && error.message !== 'CANCELED') {\n            throw error;\n        }\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): Promise<void> {\n        event.preventDefault();\n\n        return this._googlePayPaymentProcessor.displayWallet()\n            .then(paymentData => this._googlePayPaymentProcessor.handleSuccess(paymentData)\n            .then(() => {\n                if (paymentData.shippingAddress) {\n                    this._googlePayPaymentProcessor.updateShippingAddress(paymentData.shippingAddress);\n                }\n            }))\n            .then(() => this._onPaymentSelectComplete())\n            .catch(error => this._onError(error));\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotImplementedError\n} from '../../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { getCallbackUrl, MasterpassScriptLoader } from '../../../payment/strategies/masterpass';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport CustomerCredentials from '../../customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\n\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class MasterpassCustomerStrategy implements CustomerStrategy {\n    private _signInButton?: HTMLElement;\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _masterpassScriptLoader: MasterpassScriptLoader\n    ) {}\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { masterpass: masterpassOptions, methodId } = options;\n\n        if (!masterpassOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.masterpass\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n                if (!this._paymentMethod || !this._paymentMethod.initializationData.checkoutId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const cart = state.cart.getCart();\n                if (!cart) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCart);\n                }\n\n                const { container } = masterpassOptions;\n\n                const payload = {\n                    checkoutId: this._paymentMethod.initializationData.checkoutId,\n                    allowedCardTypes: this._paymentMethod.initializationData.allowedCardTypes,\n                    amount: cart.cartAmount.toString(),\n                    currency: cart.currency.code,\n                    cartId: cart.id,\n                    suppressShippingAddress: false,\n                    callbackUrl: getCallbackUrl('checkout'),\n                };\n\n                return this._masterpassScriptLoader.load(this._paymentMethod.config.testMode)\n                    .then(Masterpass => {\n                        this._signInButton = this._createSignInButton(container);\n\n                        this._signInButton.addEventListener('click', () => {\n                            Masterpass.checkout(payload);\n                        });\n                    });\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        if (this._signInButton && this._signInButton.parentNode) {\n            this._signInButton.parentNode.removeChild(this._signInButton);\n            this._signInButton = undefined;\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Masterpass, the shopper must click on \"Masterpass\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const container = document.querySelector(`#${containerId}`);\n\n        if (!container) {\n            throw new InvalidArgumentError('Unable to create sign-in button without valid container ID.');\n        }\n\n        const button = document.createElement('input');\n\n        button.type = 'image';\n        button.src = 'https://static.masterpass.com/dyn/img/btn/global/mp_chk_btn_160x037px.svg';\n        container.appendChild(button);\n\n        return button;\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { NotImplementedError} from '../../../common/error/errors';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport CustomerCredentials from '../../customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\n\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class SquareCustomerStrategy implements CustomerStrategy {\n\n    constructor(\n        private _store: CheckoutStore,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator\n    ) {}\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Masterpass, the shopper must click on \"Masterpass\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    initialize(options?: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { CheckoutActionCreator, CheckoutRequestSender, CheckoutStore } from '../checkout';\nimport { Registry } from '../common/registry';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { PaymentMethodActionCreator, PaymentMethodRequestSender } from '../payment';\nimport { AmazonPayScriptLoader } from '../payment/strategies/amazon-pay';\nimport {\n    createBraintreeVisaCheckoutPaymentProcessor,\n    BraintreeScriptLoader,\n    BraintreeSDKCreator,\n    VisaCheckoutScriptLoader\n} from '../payment/strategies/braintree';\nimport { ChasePayScriptLoader } from '../payment/strategies/chasepay';\nimport { createGooglePayPaymentProcessor, GooglePayBraintreeInitializer, GooglePayStripeInitializer } from '../payment/strategies/googlepay';\nimport { MasterpassScriptLoader } from '../payment/strategies/masterpass';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../remote-checkout';\n\nimport CustomerActionCreator from './customer-action-creator';\nimport CustomerRequestSender from './customer-request-sender';\nimport CustomerStrategyActionCreator from './customer-strategy-action-creator';\nimport { CustomerStrategy } from './strategies';\nimport { AmazonPayCustomerStrategy } from './strategies/amazon';\nimport { BraintreeVisaCheckoutCustomerStrategy } from './strategies/braintree';\nimport { ChasePayCustomerStrategy } from './strategies/chasepay';\nimport { DefaultCustomerStrategy } from './strategies/default';\nimport { GooglePayCustomerStrategy } from './strategies/googlepay';\nimport { MasterpassCustomerStrategy } from './strategies/masterpass';\nimport { SquareCustomerStrategy } from './strategies/square';\n\nexport default function createCustomerStrategyRegistry(\n    store: CheckoutStore,\n    requestSender: RequestSender\n): Registry<CustomerStrategy> {\n    const registry = new Registry<CustomerStrategy>();\n    const scriptLoader = getScriptLoader();\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const checkoutActionCreator = new CheckoutActionCreator(\n        checkoutRequestSender,\n        new ConfigActionCreator(new ConfigRequestSender(requestSender))\n    );\n    const formPoster = createFormPoster();\n    const paymentMethodActionCreator = new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender));\n    const remoteCheckoutRequestSender = new RemoteCheckoutRequestSender(requestSender);\n    const remoteCheckoutActionCreator = new RemoteCheckoutActionCreator(remoteCheckoutRequestSender);\n\n    registry.register('amazon', () =>\n        new AmazonPayCustomerStrategy(\n            store,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            remoteCheckoutRequestSender,\n            new AmazonPayScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('braintreevisacheckout', () =>\n        new BraintreeVisaCheckoutCustomerStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            new CustomerStrategyActionCreator(registry),\n            remoteCheckoutActionCreator,\n            createBraintreeVisaCheckoutPaymentProcessor(scriptLoader, requestSender),\n            new VisaCheckoutScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('chasepay', () =>\n        new ChasePayCustomerStrategy(\n            store,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new ChasePayScriptLoader(scriptLoader),\n            requestSender,\n            formPoster\n        )\n    );\n\n    registry.register('squarev2', () =>\n        new SquareCustomerStrategy(\n            store,\n            new RemoteCheckoutActionCreator(remoteCheckoutRequestSender)\n        )\n    );\n\n    registry.register('masterpass', () =>\n        new MasterpassCustomerStrategy(\n            store,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new MasterpassScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('googlepaybraintree', () =>\n        new GooglePayCustomerStrategy(\n            store,\n            remoteCheckoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayBraintreeInitializer(\n                    new BraintreeSDKCreator(\n                        new BraintreeScriptLoader(scriptLoader)\n                    )\n                )\n            ),\n            formPoster\n        )\n    );\n\n    registry.register('googlepaystripe', () =>\n        new GooglePayCustomerStrategy(\n            store,\n            remoteCheckoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayStripeInitializer()\n            ),\n            formPoster\n    )\n);\n\n    registry.register('default', () =>\n        new DefaultCustomerStrategy(\n            store,\n            new CustomerActionCreator(\n                new CustomerRequestSender(requestSender),\n                checkoutActionCreator\n            )\n        )\n    );\n\n    return registry;\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\n\nimport { isInternalAddressEqual, mapFromInternalAddress, AddressRequestBody } from '../../../address';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { AmazonPayAddressBook, AmazonPayOrderReference, AmazonPayScriptLoader, AmazonPayWindow } from '../../../payment/strategies/amazon-pay';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { RemoteCheckoutSynchronizationError } from '../../../remote-checkout/errors';\nimport ConsignmentActionCreator from '../../consignment-action-creator';\nimport { ShippingInitializeOptions, ShippingRequestOptions } from '../../shipping-request-options';\nimport { ShippingStrategyActionType } from '../../shipping-strategy-actions';\nimport ShippingStrategy from '../shipping-strategy';\n\nimport AmazonPayShippingInitializeOptions from './amazon-pay-shipping-initialize-options';\n\nexport default class AmazonPayShippingStrategy implements ShippingStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _window: AmazonPayWindow;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _consignmentActionCreator: ConsignmentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _scriptLoader: AmazonPayScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    initialize(options: ShippingInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { amazon: amazonOptions, methodId } = options;\n\n        if (!amazonOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.amazon\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => new Promise((resolve, reject) => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const onReady = () => {\n                    this._createAddressBook(amazonOptions)\n                        .then(resolve)\n                        .catch(reject);\n                };\n\n                this._scriptLoader.loadWidget(this._paymentMethod, onReady)\n                    .catch(reject);\n            }))\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    updateAddress(address: AddressRequestBody, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    selectOption(optionId: string, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.selectShippingOption(optionId, options)\n        );\n    }\n\n    private _createAddressBook(options: AmazonPayShippingInitializeOptions): Promise<AmazonPayAddressBook> {\n        return new Promise((resolve, reject) => {\n            const { container, onAddressSelect = () => {}, onError = () => {}, onReady = () => {} } = options;\n            const merchantId = this._paymentMethod && this._paymentMethod.config.merchantId;\n\n            if (!document.getElementById(container)) {\n                return reject(new InvalidArgumentError('Unable to create AmazonPay AddressBook widget without valid container ID.'));\n            }\n\n            if (!this._window.OffAmazonPayments) {\n                return reject(new NotInitializedError(NotInitializedErrorType.ShippingNotInitialized));\n            }\n\n            if (!merchantId) {\n                return reject(new MissingDataError(MissingDataErrorType.MissingPaymentMethod));\n            }\n\n            const widget = new this._window.OffAmazonPayments.Widgets.AddressBook({\n                design: {\n                    designMode: 'responsive',\n                },\n                scope: 'payments:billing_address payments:shipping_address payments:widget profile',\n                sellerId: merchantId,\n                onAddressSelect: orderReference => {\n                    this._synchronizeShippingAddress()\n                        .then(() => onAddressSelect(orderReference))\n                        .catch(onError);\n                },\n                onError: error => {\n                    reject(error);\n                    onError(error);\n                },\n                onReady: orderReference => {\n                    this._updateOrderReference(orderReference)\n                        .then(() => {\n                            resolve();\n                            onReady(orderReference);\n                        })\n                        .catch(onError);\n                },\n            });\n\n            widget.bind(container);\n\n            return widget;\n        });\n    }\n\n    private _synchronizeShippingAddress(): Promise<InternalCheckoutSelectors> {\n        const methodId = this._paymentMethod && this._paymentMethod.id;\n        const amazon = this._store.getState().remoteCheckout.getCheckout('amazon');\n        const referenceId = amazon ? amazon.referenceId : undefined;\n\n        if (!methodId || !referenceId) {\n            throw new RemoteCheckoutSynchronizationError();\n        }\n\n        return this._store.dispatch(\n            createAction(ShippingStrategyActionType.UpdateAddressRequested, undefined, { methodId })\n        )\n            .then(() => this._store.dispatch(\n                this._remoteCheckoutActionCreator.initializeShipping(methodId, { referenceId })\n            ))\n            .then(state => {\n                const amazon = state.remoteCheckout.getCheckout('amazon');\n                const remoteAddress = amazon && amazon.shipping && amazon.shipping.address;\n                const address = state.shippingAddress.getShippingAddress();\n\n                if (remoteAddress === false) {\n                    throw new RemoteCheckoutSynchronizationError();\n                }\n\n                if (!remoteAddress || isInternalAddressEqual(remoteAddress, address || {})) {\n                    return this._store.getState();\n                }\n\n                return this._store.dispatch(\n                    this._consignmentActionCreator.updateAddress(mapFromInternalAddress(remoteAddress))\n                );\n            })\n            .then(() => this._store.dispatch(\n                createAction(ShippingStrategyActionType.UpdateAddressSucceeded, undefined, { methodId })\n            ))\n            .catch(error => this._store.dispatch(\n                createErrorAction(ShippingStrategyActionType.UpdateAddressFailed, error, { methodId })\n            ));\n    }\n\n    private _updateOrderReference(orderReference: AmazonPayOrderReference): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.updateCheckout('amazon', {\n                referenceId: orderReference.getAmazonOrderReferenceId(),\n            })\n        );\n    }\n}\n","import { AddressRequestBody } from '../../../address';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport ConsignmentActionCreator from '../../consignment-action-creator';\nimport { ShippingRequestOptions } from '../../shipping-request-options';\n\nimport ShippingStrategy from '../shipping-strategy';\n\nexport default class DefaultShippingStrategy implements ShippingStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _consignmentActionCreator: ConsignmentActionCreator\n    ) {}\n\n    updateAddress(address: AddressRequestBody, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.updateAddress(address, options)\n        );\n    }\n\n    selectOption(optionId: string, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.selectShippingOption(optionId, options)\n        );\n    }\n\n    initialize(options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { CheckoutRequestSender, CheckoutStore } from '../checkout';\nimport { Registry } from '../common/registry';\nimport { PaymentMethodActionCreator, PaymentMethodRequestSender } from '../payment';\nimport { AmazonPayScriptLoader } from '../payment/strategies/amazon-pay';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../remote-checkout';\n\nimport ConsignmentActionCreator from './consignment-action-creator';\nimport ConsignmentRequestSender from './consignment-request-sender';\nimport { ShippingStrategy } from './strategies';\nimport { AmazonPayShippingStrategy } from './strategies/amazon';\nimport { DefaultShippingStrategy } from './strategies/default';\n\nexport default function createShippingStrategyRegistry(\n    store: CheckoutStore,\n    requestSender: RequestSender\n): Registry<ShippingStrategy> {\n    const registry = new Registry<ShippingStrategy>();\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const consignmentRequestSender = new ConsignmentRequestSender(requestSender);\n    const consignmentActionCreator = new ConsignmentActionCreator(consignmentRequestSender, checkoutRequestSender);\n\n    registry.register('amazon', () =>\n        new AmazonPayShippingStrategy(\n            store,\n            consignmentActionCreator,\n            new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender)),\n            new RemoteCheckoutActionCreator(new RemoteCheckoutRequestSender(requestSender)),\n            new AmazonPayScriptLoader(getScriptLoader())\n        )\n    );\n\n    registry.register('default', () =>\n        new DefaultShippingStrategy(\n            store,\n            consignmentActionCreator\n        )\n    );\n\n    return registry;\n}\n","module.exports = require(\"@bigcommerce/bigpay-client\");","module.exports = require(\"messageformat\");","import { Response } from '@bigcommerce/request-sender';\n\nimport RequestError from './request-error';\n\nexport default class TimeoutError extends RequestError<{}> {\n    constructor(response?: Response) {\n        super(response, {\n            message: 'The request has timed out or aborted.',\n        });\n\n        this.type = 'timeout';\n    }\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { cachableAction, ActionOptions } from '../common/action';\nimport { RequestOptions } from '../common/http-request';\n\nimport { ConfigRequestSender } from '.';\nimport { ConfigActionType, LoadConfigAction } from './config-actions';\n\nexport default class ConfigActionCreator {\n    constructor(\n        private _configRequestSender: ConfigRequestSender\n    ) {}\n\n    @cachableAction\n    loadConfig(options?: RequestOptions & ActionOptions): Observable<LoadConfigAction> {\n        return Observable.create((observer: Observer<LoadConfigAction>) => {\n            observer.next(createAction(ConfigActionType.LoadConfigRequested));\n\n            this._configRequestSender.loadConfig(options)\n                .then(response => {\n                    observer.next(createAction(ConfigActionType.LoadConfigSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConfigActionType.LoadConfigFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, INTERNAL_USE_ONLY, RequestOptions } from '../common/http-request';\n\nimport Config from './config';\n\nexport default class ConfigRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadConfig({ timeout }: RequestOptions = {}): Promise<Response<Config>> {\n        const url = '/api/storefront/checkout-settings';\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n        });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Response } from '@bigcommerce/request-sender';\nimport { Observable, Observer } from 'rxjs';\n\nimport { Checkout, InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType, StandardError } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { GuestCredentials } from '../customer';\n\nimport { BillingAddressRequestSender } from '.';\nimport { BillingAddressUpdateRequestBody } from './billing-address';\nimport { BillingAddressActionType, ContinueAsGuestAction, UpdateBillingAddressAction } from './billing-address-actions';\n\nexport default class BillingAddressActionCreator {\n    constructor(\n        private _requestSender: BillingAddressRequestSender\n    ) {}\n\n    continueAsGuest(\n        credentials: GuestCredentials,\n        options?: RequestOptions\n    ): ThunkAction<ContinueAsGuestAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ContinueAsGuestAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const customer = state.customer.getCustomer();\n\n            if (customer && !customer.isGuest) {\n                throw new StandardError('Cannot continue as guest: customer is logged in.');\n            }\n\n            const billingAddress = state.billingAddress.getBillingAddress();\n\n            let billingAddressRequestBody;\n\n            if (!billingAddress) {\n                billingAddressRequestBody = credentials;\n            } else {\n                const { country, ...existingBillingAddressRequestBody } = billingAddress;\n\n                billingAddressRequestBody = {\n                    ...existingBillingAddressRequestBody,\n                    ...credentials,\n                };\n            }\n\n            observer.next(createAction(BillingAddressActionType.ContinueAsGuestRequested));\n\n            this._createOrUpdateBillingAddress(checkout.id, billingAddressRequestBody, options)\n                .then(({ body }) => {\n                    observer.next(createAction(BillingAddressActionType.ContinueAsGuestSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(BillingAddressActionType.ContinueAsGuestFailed, response));\n                });\n        });\n    }\n\n    updateAddress(\n        address: Partial<BillingAddressUpdateRequestBody>,\n        options?: RequestOptions\n    ): ThunkAction<UpdateBillingAddressAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateBillingAddressAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(BillingAddressActionType.UpdateBillingAddressRequested));\n\n            const billingAddress = state.billingAddress.getBillingAddress();\n\n            // If email is not present in the address provided by the client, then\n            // fall back to the stored email as it could have been set separately\n            // using a convenience method. We can't rely on billingAddress having\n            // an ID to consider that there's a preexisting email, as billingAddress\n            // object from Order doesn't have an ID.\n            const billingAddressRequestBody = {\n                ...address,\n                email: typeof address.email === 'undefined' && billingAddress ? billingAddress.email : address.email,\n            };\n\n            if (billingAddress && billingAddress.id) {\n                billingAddressRequestBody.id = billingAddress.id;\n            }\n\n            this._createOrUpdateBillingAddress(checkout.id, billingAddressRequestBody, options)\n                .then(({ body }) => {\n                    observer.next(createAction(BillingAddressActionType.UpdateBillingAddressSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(BillingAddressActionType.UpdateBillingAddressFailed, response));\n                });\n        });\n    }\n\n    private _createOrUpdateBillingAddress(\n        checkoutId: string,\n        address: Partial<BillingAddressUpdateRequestBody>,\n        options?: RequestOptions\n    ): Promise<Response<Checkout>> {\n        if (!address.id) {\n            return this._requestSender.createAddress(checkoutId, address, options);\n        }\n\n        return this._requestSender.updateAddress(checkoutId, address, options);\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { AddressRequestBody } from '../address';\nimport { Checkout } from '../checkout';\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nimport { BillingAddressUpdateRequestBody } from './billing-address';\n\nconst DEFAULT_PARAMS = {\n    include: [\n        'cart.lineItems.physicalItems.options',\n        'cart.lineItems.digitalItems.options',\n        'customer',\n        'promotions.banners',\n    ].join(','),\n};\n\nexport default class BillingAddressRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    createAddress(checkoutId: string, address: Partial<AddressRequestBody>, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/billing-address`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, { body: address, params: DEFAULT_PARAMS, headers, timeout });\n    }\n\n    updateAddress(checkoutId: string, address: Partial<BillingAddressUpdateRequestBody>, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const { id, ...body } = address;\n        const url = `/api/storefront/checkouts/${checkoutId}/billing-address/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.put(url, { params: DEFAULT_PARAMS, body, headers, timeout });\n    }\n}\n","import { InvalidArgumentError } from '../error/errors';\n\nexport default class Registry<T, K extends string = string> {\n    private _factories: { [key: string]: Factory<T> };\n    private _instances: { [key: string]: T };\n    private _options: RegistryOptions;\n\n    constructor(options?: RegistryOptions) {\n        this._factories = {};\n        this._instances = {};\n        this._options = { defaultToken: 'default', ...options };\n    }\n\n    get(token?: K, cacheToken?: string): T {\n        try {\n            return this._getInstance(\n                token || this._options.defaultToken,\n                cacheToken || token || this._options.defaultToken\n            );\n        } catch (error) {\n            return this._getInstance(\n                this._options.defaultToken,\n                cacheToken || this._options.defaultToken\n            );\n        }\n    }\n\n    register(token: K, factory: Factory<T>): void {\n        if (this._hasFactory(token)) {\n            throw new InvalidArgumentError(`'${token}' is already registered.`);\n        }\n\n        this._factories[token] = factory;\n    }\n\n    protected _hasFactory(token: string): boolean {\n        return !!this._factories[token];\n    }\n\n    private _hasInstance(token: string): boolean {\n        return !!this._instances[token];\n    }\n\n    private _getInstance(token: string, cacheToken: string): T {\n        if (!this._hasInstance(cacheToken)) {\n            const factory = this._factories[token];\n\n            if (!factory) {\n                throw new InvalidArgumentError(`'${token}' is not registered.`);\n            }\n\n            this._instances[cacheToken] = factory();\n        }\n\n        return this._instances[cacheToken];\n    }\n}\n\nexport type Factory<T> = () => T;\n\nexport interface RegistryOptions {\n    defaultToken: string;\n}\n","export default function toFormUrlEncoded(data: { [key: string]: object | string | undefined }): string {\n    return Object.keys(data)\n        .filter(key => data[key] !== undefined)\n        .map(key => {\n            const value = data[key];\n\n            if (typeof value === 'string') {\n                return `${key}=${encodeURIComponent(value)}`;\n            }\n\n            return `${key}=${encodeURIComponent(JSON.stringify(value) || '')}`;\n        })\n        .join('&');\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { Masterpass, MasterpassHostWindow } from './masterpass';\n\nexport default class MasterpassScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        public _window: MasterpassHostWindow = window\n    ) {}\n\n    load(testMode?: boolean): Promise<Masterpass> {\n        return this._scriptLoader\n            .loadScript(`//${testMode ? 'sandbox.' : ''}masterpass.com/integration/merchant.js`)\n            .then(() => {\n                if (!this._window.masterpass) {\n                    throw new StandardError();\n                }\n\n                return this._window.masterpass;\n            });\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class RemoteCheckoutSynchronizationError extends StandardError {\n    constructor(\n        public error?: Error\n    ) {\n        super('Unable to synchronize your checkout details with a third party provider. Please try again later.');\n\n        this.type = 'remote_checkout_synchronization';\n    }\n}\n","import { round } from 'lodash';\n\nimport { Checkout } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport PaymentMethod from '../../payment-method';\nimport { BraintreeSDKCreator, GooglePayBraintreeSDK } from '../braintree';\n\nimport {\n    GooglePaymentData,\n    GooglePayInitializer,\n    GooglePayPaymentDataRequestV2,\n    TokenizePayload\n} from './googlepay';\nimport { GooglePayBraintreeDataRequest, GooglePayBraintreePaymentDataRequestV1 } from './googlepay-braintree';\n\nexport default class GooglePayBraintreeInitializer implements GooglePayInitializer {\n    private _googlePaymentInstance!: GooglePayBraintreeSDK;\n\n    constructor(\n        private _braintreeSDKCreator: BraintreeSDKCreator\n    ) {}\n\n    initialize(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        if (!paymentMethod.clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._braintreeSDKCreator.initialize(paymentMethod.clientToken);\n\n        return this._braintreeSDKCreator.getGooglePaymentComponent()\n            .then(googleBraintreePaymentInstance => {\n                this._googlePaymentInstance = googleBraintreePaymentInstance;\n\n                return this._createGooglePayPayload(\n                    checkout,\n                    paymentMethod.initializationData,\n                    hasShippingAddress\n                );\n            });\n    }\n\n    teardown(): Promise<void> {\n        return this._braintreeSDKCreator.teardown();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): TokenizePayload {\n        const payload = JSON.parse(paymentData.paymentMethodData.tokenizationData.token).androidPayCards[0];\n\n        return {\n            nonce: payload.nonce,\n            type: payload.type,\n            description: payload.description,\n            details: {\n                cardType: payload.details.cardType,\n                lastFour: payload.details.lastFour,\n                lastTwo: payload.details.lastTwo,\n            },\n            binData: payload.binData,\n        };\n    }\n\n    private _createGooglePayPayload(\n        checkout: Checkout,\n        initializationData: any,\n        hasShippingAddress: boolean\n    ): GooglePayPaymentDataRequestV2 {\n        if (!initializationData.platformToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const googlePayBraintreePaymentDataRequest: GooglePayBraintreeDataRequest = {\n            merchantInfo: {\n                authJwt: initializationData.platformToken,\n                merchantName: initializationData.googleMerchantName,\n                merchantId: initializationData.googleMerchantId,\n            },\n            transactionInfo: {\n                currencyCode: checkout.cart.currency.code,\n                totalPriceStatus: 'FINAL',\n                totalPrice: round(checkout.grandTotal, 2).toFixed(2),\n            },\n            cardRequirements: {\n                billingAddressRequired: true,\n                billingAddressFormat: 'FULL',\n            },\n            shippingAddressRequired: !hasShippingAddress,\n            emailRequired: true,\n            phoneNumberRequired: true,\n        };\n\n        return this._mapGooglePayBraintreeDataRequestToGooglePayDataRequestV2(\n            this._googlePaymentInstance.createPaymentDataRequest(googlePayBraintreePaymentDataRequest)\n        );\n    }\n\n    private _mapGooglePayBraintreeDataRequestToGooglePayDataRequestV2(googlePayBraintreeDataRequestV1: GooglePayBraintreePaymentDataRequestV1): GooglePayPaymentDataRequestV2 {\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt: googlePayBraintreeDataRequestV1.merchantInfo.authJwt,\n                merchantId: googlePayBraintreeDataRequestV1.merchantInfo.merchantId,\n                merchantName: googlePayBraintreeDataRequestV1.merchantInfo.merchantName,\n            },\n            allowedPaymentMethods: [{\n                type: 'CARD',\n                parameters: {\n                    allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                    allowedCardNetworks: googlePayBraintreeDataRequestV1.cardRequirements.allowedCardNetworks,\n                    billingAddressRequired: true,\n                    billingAddressParameters: {\n                        format: 'FULL',\n                        phoneNumberRequired: true,\n                    },\n                },\n                tokenizationSpecification: {\n                    type: 'PAYMENT_GATEWAY',\n                    parameters: {\n                        gateway: 'braintree',\n                        'braintree:apiVersion': 'v1',\n                        'braintree:authorizationFingerprint': googlePayBraintreeDataRequestV1.paymentMethodTokenizationParameters.parameters['braintree:authorizationFingerprint'],\n                        'braintree:merchantId': googlePayBraintreeDataRequestV1.paymentMethodTokenizationParameters.parameters['braintree:merchantId'],\n                        'braintree:sdkVersion': googlePayBraintreeDataRequestV1.paymentMethodTokenizationParameters.parameters['braintree:sdkVersion'],\n                    },\n                },\n            }],\n            transactionInfo: googlePayBraintreeDataRequestV1.transactionInfo,\n            emailRequired: true,\n            shippingAddressRequired: googlePayBraintreeDataRequestV1.shippingAddressRequired,\n            shippingAddressParameters: {\n                phoneNumberRequired: googlePayBraintreeDataRequestV1.phoneNumberRequired,\n            },\n        };\n    }\n}\n","import { round } from 'lodash';\n\nimport { Checkout } from '../../../checkout';\nimport { InvalidArgumentError } from '../../../common/error/errors';\nimport PaymentMethod from '../../payment-method';\n\nimport {\n    GooglePaymentData,\n    GooglePayInitializer,\n    GooglePayPaymentDataRequestV2,\n    TokenizePayload\n} from './googlepay';\n\nexport default class GooglePayStripeInitializer implements GooglePayInitializer {\n    initialize(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        return Promise.resolve(this._mapGooglePayStripeDataRequestToGooglePayDataRequestV2(\n            checkout,\n            paymentMethod.initializationData,\n            hasShippingAddress\n        ));\n    }\n\n    teardown(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): TokenizePayload {\n        try {\n            const payload = JSON.parse(paymentData.paymentMethodData.tokenizationData.token);\n\n            return {\n                nonce: payload.id,\n                type: payload.type,\n                details: {\n                    cardType: payload.card.brand,\n                    lastFour: payload.card.last4,\n                },\n            };\n        } catch (err) {\n            throw new InvalidArgumentError('Unable to parse response from Google Pay.');\n        }\n    }\n\n    private _mapGooglePayStripeDataRequestToGooglePayDataRequestV2(\n        checkout: Checkout,\n        initializationData: any,\n        hasShippingAddress: boolean\n    ): GooglePayPaymentDataRequestV2 {\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt: initializationData.platformToken,\n                merchantId: initializationData.googleMerchantId,\n                merchantName: initializationData.googleMerchantName,\n            },\n            allowedPaymentMethods: [{\n                type: 'CARD',\n                parameters: {\n                    allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                    allowedCardNetworks: ['AMEX', 'DISCOVER', 'JCB', 'MASTERCARD', 'VISA'],\n                    billingAddressRequired: true,\n                    billingAddressParameters: {\n                        format: 'FULL',\n                        phoneNumberRequired: true,\n                    },\n                },\n                tokenizationSpecification: {\n                    type: 'PAYMENT_GATEWAY',\n                    parameters: {\n                        gateway: 'stripe',\n                        'stripe:version': initializationData.stripeVersion,\n                        'stripe:publishableKey': initializationData.stripePublishableKey,\n                    },\n                },\n            }],\n            transactionInfo: {\n                currencyCode: checkout.cart.currency.code,\n                totalPriceStatus: 'FINAL',\n                totalPrice: round(checkout.grandTotal, 2).toFixed(2),\n            },\n            emailRequired: true,\n            shippingAddressRequired: !hasShippingAddress,\n            shippingAddressParameters: {\n                phoneNumberRequired: true,\n            },\n        };\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { PaypalHostWindow, PaypalSDK } from './paypal-sdk';\n\nexport default class PaypalScriptLoader {\n    private _window: PaypalHostWindow;\n\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    loadPaypal(): Promise<PaypalSDK> {\n        return this._scriptLoader\n            .loadScript('//www.paypalobjects.com/api/checkout.min.js')\n            .then(() => {\n                if (!this._window.paypal) {\n                    throw new StandardError();\n                }\n\n                return this._window.paypal;\n            });\n    }\n}\n","module.exports = require(\"iframe-resizer/js/iframeResizer.contentWindow\");","import { EmbeddedCheckoutFrameLoadedEvent } from '../embedded-checkout-events';\n\nexport default function handleFrameLoadedEvent(message: EmbeddedCheckoutFrameLoadedEvent): void {\n    if (!message.payload || !message.payload.contentId) {\n        return;\n    }\n\n    const body = document.getElementById(message.payload.contentId);\n\n    if (!body || body.hasAttribute('data-iframe-height')) {\n        return;\n    }\n\n    body.setAttribute('data-iframe-height', '');\n}\n","export default interface CustomError extends Error {\n    message: string;\n    type: string;\n    subtype?: string;\n}\n\nexport function isCustomError(error: any): error is CustomError {\n    return (\n        typeof error.message === 'string' &&\n        typeof error.type === 'string' &&\n        (typeof error.subtype === 'string' || !error.subtype) &&\n        error instanceof Error\n    );\n}\n","import { isCustomError, CustomError } from '../../common/error/errors';\nimport EmbeddedCheckoutError from '../embedded-checkout-error';\nimport {\n    EmbeddedCheckoutCompleteEvent,\n    EmbeddedCheckoutErrorEvent,\n    EmbeddedCheckoutEvent,\n    EmbeddedCheckoutEventMap,\n    EmbeddedCheckoutEventType,\n    EmbeddedCheckoutFrameErrorEvent,\n    EmbeddedCheckoutFrameLoadedEvent,\n    EmbeddedCheckoutLoadedEvent,\n    EmbeddedCheckoutSignedOutEvent,\n} from '../embedded-checkout-events';\nimport EmbeddedCheckoutStyles from '../embedded-checkout-styles';\nimport IframeEventListener from '../iframe-event-listener';\nimport IframeEventPoster from '../iframe-event-poster';\n\nimport EmbeddedCheckoutMessenger from './embedded-checkout-messenger';\nimport { EmbeddedContentEventMap, EmbeddedContentEventType } from './embedded-content-events';\nimport EmbeddedContentOptions from './embedded-content-options';\n\nexport default class IframeEmbeddedCheckoutMessenger implements EmbeddedCheckoutMessenger {\n    /**\n     * @internal\n     */\n    constructor(\n        private _messageListener: IframeEventListener<EmbeddedContentEventMap>,\n        private _messagePoster: IframeEventPoster<EmbeddedCheckoutEvent>,\n        private _untargetedMessagePoster: IframeEventPoster<EmbeddedCheckoutEvent>,\n        private _messageHandlers: EventCallbacks<EmbeddedCheckoutEventMap> = {}\n    ) {\n        this._messageListener.listen();\n    }\n\n    postComplete(): void {\n        const message: EmbeddedCheckoutCompleteEvent = {\n            type: EmbeddedCheckoutEventType.CheckoutComplete,\n        };\n\n        this._postMessage(message);\n    }\n\n    postError(payload: Error | CustomError): void {\n        const message: EmbeddedCheckoutErrorEvent = {\n            type: EmbeddedCheckoutEventType.CheckoutError,\n            payload: this._transformError(payload),\n        };\n\n        this._postMessage(message);\n    }\n\n    postFrameError(payload: Error | CustomError): void {\n        const message: EmbeddedCheckoutFrameErrorEvent = {\n            type: EmbeddedCheckoutEventType.FrameError,\n            payload: this._transformError(payload),\n        };\n\n        // Ideally, all messages should be targeted at a specific origin.\n        // However, for `FrameError` message, we have to post it in an\n        // untargeted fashion. This is because the error could be caused by a\n        // missing cart. That makes it not possible to determine of site origin\n        // of the parent window. Nevertheless, we still want to notify the\n        // parent window about the error.\n        this._postMessage(message, { untargeted: true });\n    }\n\n    postFrameLoaded(payload?: EmbeddedContentOptions): void {\n        const message: EmbeddedCheckoutFrameLoadedEvent = {\n            type: EmbeddedCheckoutEventType.FrameLoaded,\n            payload,\n        };\n\n        this._postMessage(message);\n    }\n\n    postLoaded(): void {\n        const message: EmbeddedCheckoutLoadedEvent = {\n            type: EmbeddedCheckoutEventType.CheckoutLoaded,\n        };\n\n        this._postMessage(message);\n    }\n\n    postSignedOut(): void {\n        const message: EmbeddedCheckoutSignedOutEvent = {\n            type: EmbeddedCheckoutEventType.SignedOut,\n        };\n\n        this._postMessage(message);\n    }\n\n    receiveStyles(handler: (styles: EmbeddedCheckoutStyles) => void): void {\n        this._messageListener.addListener(EmbeddedContentEventType.StyleConfigured, ({ payload }) => {\n            handler(payload);\n        });\n    }\n\n    private _postMessage(message: EmbeddedCheckoutEvent, options?: { untargeted?: boolean }): void {\n        this._notifyMessageHandlers(message);\n\n        if (options && options.untargeted) {\n            return this._untargetedMessagePoster.post(message);\n        }\n\n        this._messagePoster.post(message);\n    }\n\n    private _notifyMessageHandlers(message: EmbeddedCheckoutEvent): void {\n        Object.keys(this._messageHandlers)\n            .forEach(key => {\n                const handler = this._messageHandlers[key as keyof EmbeddedCheckoutEventMap];\n\n                if (handler) {\n                    handler.call(null, message);\n                }\n            });\n    }\n\n    private _transformError(error: Error | CustomError): EmbeddedCheckoutError {\n        return {\n            message: error.message,\n            type: isCustomError(error) ? error.type : undefined,\n            subtype: isCustomError(error) ? error.subtype : undefined,\n        };\n    }\n}\n\nexport type EventCallbacks<TEventMap> = {\n    [key in keyof TEventMap]?: (event: TEventMap[key]) => void;\n};\n","import EmbeddedCheckoutMessenger from './embedded-checkout-messenger';\n\nexport default class NoopEmbeddedCheckoutMessenger implements EmbeddedCheckoutMessenger {\n    postComplete(): void {}\n\n    postError(): void {}\n\n    postFrameError(): void {}\n\n    postFrameLoaded(): void {}\n\n    postLoaded(): void {}\n\n    postSignedOut(): void {}\n\n    receiveStyles(): void {}\n}\n","import { EmbeddedCheckoutEvent, EmbeddedCheckoutEventType } from '../embedded-checkout-events';\nimport IframeEventListener from '../iframe-event-listener';\nimport IframeEventPoster from '../iframe-event-poster';\n\nimport EmbeddedCheckoutMessenger from './embedded-checkout-messenger';\nimport EmbeddedCheckoutMessengerOptions from './embedded-checkout-messenger-options';\nimport { EmbeddedContentEventMap } from './embedded-content-events';\nimport handleFrameLoadedEvent from './handle-frame-loaded-event';\nimport IframeEmbeddedCheckoutMessenger from './iframe-embedded-checkout-messenger';\nimport NoopEmbeddedCheckoutMessenger from './noop-embedded-checkout-messenger';\n\n/**\n * Create an instance of `EmbeddedCheckoutMessenger`.\n *\n * @remarks\n * The object is responsible for posting messages to the parent window from the\n * iframe when certain events have occurred. For example, when the checkout\n * form is first loaded, you should notify the parent window about it.\n *\n * The iframe can only be embedded in domains that are allowed by the store.\n *\n * ```ts\n * const messenger = createEmbeddedCheckoutMessenger({\n *     parentOrigin: 'https://some/website',\n * });\n *\n * messenger.postFrameLoaded();\n * ```\n *\n * @alpha\n * Please note that this feature is currently in an early stage of development.\n * Therefore the API is unstable and not ready for public consumption.\n *\n * @param options - Options for creating `EmbeddedCheckoutMessenger`\n * @returns - An instance of `EmbeddedCheckoutMessenger`\n */\nexport default function createEmbeddedCheckoutMessenger(options: EmbeddedCheckoutMessengerOptions): EmbeddedCheckoutMessenger {\n    const parentWindow = options.parentWindow || window.parent;\n\n    // Return a No-op messenger if it is not called inside an iframe\n    if (window === parentWindow) {\n        return new NoopEmbeddedCheckoutMessenger();\n    }\n\n    return new IframeEmbeddedCheckoutMessenger(\n        new IframeEventListener<EmbeddedContentEventMap>(options.parentOrigin),\n        new IframeEventPoster<EmbeddedCheckoutEvent>(options.parentOrigin, parentWindow),\n        new IframeEventPoster<EmbeddedCheckoutEvent>('*', parentWindow),\n        { [EmbeddedCheckoutEventType.FrameLoaded]: handleFrameLoadedEvent }\n    );\n}\n","import { isObject, union } from 'lodash';\nimport * as MessageFormat from 'messageformat';\n\nimport Logger from '../common/log/logger';\n\nimport LanguageConfig, { Locales, Translations } from './language-config';\n\nconst DEFAULT_LOCALE = 'en';\nconst KEY_PREFIX = 'optimized_checkout';\n\n/**\n * Responsible for getting language strings.\n *\n * This object can be used to retrieve language strings that are most\n * appropriate for a given locale.\n *\n * The language strings provided to the object should follow [ICU\n * MessageFormat](http://userguide.icu-project.org/formatparse/messages) syntax.\n */\nexport default class LanguageService {\n    private _locale: string;\n    private _locales: Locales;\n    private _translations: Translations;\n    private _formatters: { [key: string]: any };\n\n    /**\n     * @internal\n     */\n    constructor(\n        config: Partial<LanguageConfig>,\n        private _logger: Logger\n    ) {\n        const { locale, locales, translations } = this._transformConfig(config);\n\n        this._locale = locale;\n        this._locales = locales;\n        this._translations = translations;\n        this._formatters = {};\n    }\n\n    /**\n     * Remaps a set of language strings with a different set of keys.\n     *\n     * ```js\n     * service.mapKeys({\n     *     'new_key': 'existing_key',\n     * });\n     *\n     * console.log(service.translate('new_key'));\n     * ```\n     *\n     * @param maps - The set of language strings.\n     */\n    mapKeys(maps: { [key: string]: string }): void {\n        Object.keys(maps).forEach(key => {\n            const translationKey = `${KEY_PREFIX}.${maps[key]}`;\n\n            this._translations[`${KEY_PREFIX}.${key}`] = this._translations[translationKey];\n        });\n    }\n\n    /**\n     * Gets the preferred locale of the current customer.\n     *\n     * @returns The preferred locale code.\n     */\n    getLocale(): string {\n        return this._hasTranslations() ? this._locale : DEFAULT_LOCALE;\n    }\n\n    /**\n     * Gets a language string by a key.\n     *\n     * ```js\n     * service.translate('language_key');\n     * ```\n     *\n     * If the language string contains a placeholder, you can replace it by\n     * providing a second argument.\n     *\n     * ```js\n     * service.translate('language_key', { placeholder: 'Hello' });\n     * ```\n     *\n     * @param key - The language key.\n     * @param data - Data for replacing placeholders in the language string.\n     * @returns The translated language string.\n     */\n    translate(key: string, data: TranslationData = {}): string {\n        const prefixedKey = `${KEY_PREFIX}.${key}`;\n\n        if (typeof this._translations[prefixedKey] !== 'string') {\n            this._logger.warn(`Translation key \"${prefixedKey}\" is missing`);\n\n            return prefixedKey;\n        }\n\n        if (!this._formatters[prefixedKey]) {\n            const messageFormat = new MessageFormat(this._locales[prefixedKey]);\n\n            this._formatters[prefixedKey] = messageFormat.compile(this._translations[prefixedKey] || '');\n        }\n\n        return this._formatters[prefixedKey](this._transformData(data));\n    }\n\n    private _transformConfig(config: Partial<LanguageConfig> = {}): LanguageConfig {\n        const output: LanguageConfig = {\n            defaultTranslations: {},\n            translations: {},\n            locales: {},\n            locale: config.locale || DEFAULT_LOCALE,\n        };\n\n        const locales = config.locales || {};\n        const translations = this._flattenObject(config.translations || {});\n        const defaultTranslations = this._flattenObject(config.defaultTranslations || {});\n        const translationKeys = union(Object.keys(defaultTranslations), Object.keys(translations));\n\n        translationKeys.forEach(key => {\n            if (translations && translations[key]) {\n                output.translations[key] = translations[key];\n                output.locales[key] = locales[key] || output.locale;\n            } else {\n                output.translations[key] = defaultTranslations[key];\n                output.locales[key] = DEFAULT_LOCALE;\n            }\n        });\n\n        return output;\n    }\n\n    private _flattenObject(object: Translations, result: Translations = {}, parentKey: string = ''): Translations {\n        try {\n            Object.keys(object).forEach(key => {\n                const value = object[key];\n                const resultKey = parentKey ? `${parentKey}.${key}` : key;\n\n                if (isObject(value)) {\n                    return this._flattenObject(value as Translations, result, resultKey);\n                }\n\n                result[resultKey] = value;\n            });\n        } catch (err) {\n            this._logger.warn(`Unable to parse object: ${err}`);\n        }\n\n        return result;\n    }\n\n    private _transformData(data: TranslationData): TranslationData {\n        return Object.keys(data).reduce((result, key) => {\n            const value = data[key];\n\n            result[key] = value === null || value === undefined ? '' : value;\n\n            return result;\n        }, {} as TranslationData);\n    }\n\n    private _hasTranslations(): boolean {\n        return Object.keys(this._locales).map(key => this._locales[key])\n            .filter(code => code.split('-')[0] === this._locale.split('-')[0])\n            .length > 0;\n    }\n}\n\nexport interface TranslationData {\n    [key: string]: string | number;\n}\n","import { getDefaultLogger } from '../common/log';\n\nimport LanguageConfig from './language-config';\nimport LanguageService from './language-service';\n\n/**\n * Creates an instance of `LanguageService`.\n *\n * @remarks\n * ```js\n * const language = {{{langJson 'optimized_checkout'}}}; // `langJson` is a Handlebars helper provided by BigCommerce's Stencil template engine.\n * const service = createLanguageService(language);\n *\n * console.log(service.translate('address.city_label'));\n * ```\n *\n * @param config - A configuration object.\n * @returns An instance of `LanguageService`.\n */\nexport default function createLanguageService(config: Partial<LanguageConfig> = {}): LanguageService {\n    return new LanguageService(\n        config,\n        getDefaultLogger()\n    );\n}\n","import { InvalidArgumentError } from '../common/error/errors';\n\nimport { CurrencyConfig } from './currency';\n\nexport default class CurrencyFormatter {\n    private _decimalPlaces: number;\n    private _symbolLocation: string;\n    private _symbol: string;\n    private _thousandsSeparator: string;\n    private _decimalSeparator: string;\n\n    constructor(\n        currencySettings: CurrencyConfig\n    ) {\n        if (!currencySettings) {\n            throw new Error('Currency settings missing');\n        }\n\n        const {\n            decimalPlaces,\n            symbolLocation,\n            symbol,\n            thousandsSeparator,\n            decimalSeparator,\n        } = currencySettings;\n\n        if (\n            typeof symbolLocation !== 'string' ||\n            typeof symbol !== 'string' ||\n            typeof thousandsSeparator !== 'string' ||\n            typeof decimalSeparator !== 'string' ||\n            typeof decimalPlaces !== 'string'\n        ) {\n            throw new InvalidArgumentError('Invalid currency settings provided');\n        }\n\n        this._decimalPlaces = parseInt(decimalPlaces, 10);\n        this._symbolLocation = symbolLocation;\n        this._symbol = symbol;\n        this._thousandsSeparator = thousandsSeparator;\n        this._decimalSeparator = decimalSeparator;\n    }\n\n    format(amount?: number): string {\n        if (typeof amount !== 'number') {\n            throw new InvalidArgumentError('Invalid amount provided');\n        }\n\n        const formattedNumber = this._formatNumber(amount);\n\n        const formattedCurrency = this._formatCurrency(formattedNumber);\n\n        return amount < 0 ?\n            `-${formattedCurrency}` :\n            formattedCurrency;\n    }\n\n    private _formatNumber(amount: number): string {\n        const positiveAmount = Math.abs(amount);\n        const [ integerAmount, decimalAmount = '' ] = (this._toFixed(positiveAmount, this._decimalPlaces)).split('.');\n        const parsedIntegerAmount = integerAmount.replace(/\\B(?=(\\d{3})+(?!\\d))/g, this._thousandsSeparator);\n\n        if (this._decimalPlaces < 1) {\n            return parsedIntegerAmount;\n        }\n\n        return [\n            parsedIntegerAmount,\n            decimalAmount,\n        ].join(this._decimalSeparator);\n    }\n\n    private _formatCurrency(formattedNumber: string): string {\n        return (this._symbolLocation.toLowerCase() === 'left') ?\n            `${this._symbol}${formattedNumber}` :\n            `${formattedNumber}${this._symbol}`;\n    }\n\n    private _toFixed(value: number, precision: number): string {\n        return (+(Math.round(+(value + 'e' + precision)) + 'e' + -precision)).toFixed(precision);\n    }\n}\n","import { StoreConfig } from '../config';\n\nimport CurrencyFormatter from './currency-formatter';\n\n/**\n * Responsible for formatting and converting currencies.\n */\nexport default class CurrencyService {\n    private _customerFormatter: CurrencyFormatter;\n    private _storeFormatter: CurrencyFormatter;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _storeConfig: StoreConfig\n    ) {\n        this._customerFormatter = new CurrencyFormatter(this._storeConfig.shopperCurrency);\n        this._storeFormatter = new CurrencyFormatter(this._storeConfig.currency);\n    }\n\n    toCustomerCurrency(amount: number): string {\n        const exchangeRate = this._storeConfig.shopperCurrency.exchangeRate;\n\n        return this._customerFormatter.format(amount * exchangeRate);\n    }\n\n    toStoreCurrency(amount: number): string {\n        return this._storeFormatter.format(amount);\n    }\n}\n","import { StoreConfig } from '../config';\n\nimport CurrencyService from './currency-service';\n\n/**\n * Creates an instance of `CurrencyService`.\n *\n * @remarks\n * ```js\n * const { data } = checkoutService.getState();\n * const config = data.getConfig();\n * const checkout = data.getCheckout();\n * const currencyService = createCurrencyService(config);\n *\n * currencyService.toStoreCurrency(checkout.grandTotal);\n * currencyService.toCustomerCurrency(checkout.grandTotal);\n * ```\n *\n * @alpha\n * Please note that `CurrencyService` is currently in an early stage\n * of development. Therefore the API is unstable and not ready for public\n * consumption.\n *\n * @param config - The config object containing the currency configuration\n * @returns an instance of `CurrencyService`.\n */\nexport default function createCurrencyService(\n    config: StoreConfig\n): CurrencyService {\n    return new CurrencyService(config);\n}\n","export { createTimeout } from '@bigcommerce/request-sender';\n\nexport { createCheckoutService } from './checkout';\nexport { createCheckoutButtonInitializer } from './checkout-buttons';\nexport { embedCheckout } from './embedded-checkout';\nexport { createEmbeddedCheckoutMessenger } from './embedded-checkout/iframe-content';\nexport { createLanguageService } from './locale';\nexport { createCurrencyService } from './currency';\n","import { Checkout } from '../../../checkout';\nimport PaymentMethod from '../../payment-method';\nimport { BraintreeModuleCreator, GooglePayBraintreeSDK } from '../braintree';\n\nexport type EnvironmentType = 'PRODUCTION' | 'TEST';\ntype TokenizeType = 'AndroidPayCard' | 'CreditCard';\n\nexport interface GooglePayInitializer {\n    initialize(checkout: Checkout, paymentMethod: PaymentMethod, hasShippingAddress: boolean, publishableKey?: string): Promise<GooglePayPaymentDataRequestV2>;\n    teardown(): Promise<void>;\n    parseResponse(paymentData: GooglePaymentData): TokenizePayload;\n}\n\nexport interface GooglePayCreator extends BraintreeModuleCreator<GooglePayBraintreeSDK> {}\n\nexport interface GooglePayPaymentOptions {\n    environment: EnvironmentType;\n}\n\nexport interface GooglePayIsReadyToPayResponse {\n    result: boolean;\n    paymentMethodPresend?: boolean;\n}\n\nexport interface GooglePaySDK {\n    payments: {\n        api: {\n            PaymentsClient: {\n                new(options: GooglePayPaymentOptions): GooglePayClient;\n            },\n        },\n    };\n}\n\nexport interface GooglePayClient {\n    isReadyToPay(options: object): Promise<GooglePayIsReadyToPayResponse>;\n    loadPaymentData(paymentDataRequest: GooglePayPaymentDataRequestV2): Promise<GooglePaymentData>;\n    createButton(options: { [key: string]: string | object }): HTMLElement;\n}\n\nexport interface GooglePayHostWindow extends Window {\n    google?: GooglePaySDK;\n}\n\nexport interface TokenizePayload {\n    nonce: string;\n    details: {\n        cardType: string;\n        lastFour: string;\n        lastTwo?: string;\n    };\n    description?: string;\n    type: TokenizeType;\n    binData?: {\n        commercial: string;\n        countryOfIssuance: string;\n        debit: string;\n        durbinRegulated: string;\n        healthcare: string;\n        issuingBank: string;\n        payroll: string;\n        prepaid: string;\n        productId: string;\n    };\n}\n\nexport interface GooglePaymentData {\n    apiVersion: number;\n    apiVersionMinor: number;\n    paymentMethodData: {\n        description: string;\n        info: {\n            cardDetails: string;\n            cardNetwork: string;\n            billingAddress: GooglePayAddress;\n        };\n        tokenizationData: {\n            token: string;\n            type: string;\n        }\n        type: string;\n    };\n    shippingAddress: GooglePayAddress;\n    email: string;\n}\n\nexport interface GooglePayAddress {\n    address1: string;\n    address2: string;\n    address3: string;\n    administrativeArea: string;\n    companyName: string;\n    countryCode: string;\n    locality: string;\n    name: string;\n    postalCode: string;\n    sortingCode: string;\n    phoneNumber: string;\n}\n\nexport interface GooglePaymentsError {\n    statusCode: string;\n    statusMessage?: string;\n}\n\nexport interface PaymentMethodData {\n    methodId: string;\n    paymentData: {\n        method: string,\n        nonce: string,\n        cardInformation: {\n            type: string,\n            number: string,\n        },\n    };\n}\n\nexport enum ButtonType {\n    Long = 'long',\n    Short = 'short',\n}\nexport enum ButtonColor {\n    Default = 'default',\n    Black = 'black',\n    White = 'white',\n}\n\nexport interface GooglePayPaymentDataRequestV2 {\n    apiVersion: number;\n    apiVersionMinor: number;\n    merchantInfo: {\n        authJwt?: string;\n        merchantId?: string;\n        merchantName?: string;\n    };\n    allowedPaymentMethods: [{\n        type: string;\n        parameters: {\n            allowedAuthMethods: string[];\n            allowedCardNetworks: string[];\n            allowPrepaidCards?: boolean;\n            billingAddressRequired?: boolean;\n            billingAddressParameters?: {\n                format?: string;\n                phoneNumberRequired?: boolean;\n            };\n        },\n        tokenizationSpecification?: {\n            type: string;\n            parameters: {\n                gateway: string;\n                gatewayMerchantId?: string;\n                'braintree:apiVersion'?: string;\n                'braintree:clientKey'?: string;\n                'braintree:merchantId'?: string;\n                'braintree:sdkVersion'?: string;\n                'braintree:authorizationFingerprint'?: string;\n                'stripe:version'?: string;\n                'stripe:publishableKey'?: string;\n            };\n        };\n    }];\n    transactionInfo: {\n        currencyCode: string;\n        totalPriceStatus: string;\n        totalPrice?: string;\n        checkoutOption?: string;\n    };\n    emailRequired?: boolean;\n    shippingAddressRequired?: boolean;\n    shippingAddressParameters?: {\n        allowedCountryCodes?: string[];\n        phoneNumberRequired?: boolean;\n    };\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { AddressRequestBody } from '../../../address';\nimport { BillingAddressActionCreator, BillingAddressUpdateRequestBody } from '../../../billing';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n} from '../../../common/error/errors';\nimport { toFormUrlEncoded } from '../../../common/http-request/';\nimport { RemoteCheckoutSynchronizationError } from '../../../remote-checkout/errors';\nimport { ConsignmentActionCreator } from '../../../shipping';\nimport PaymentMethodInvalidError from '../../errors/payment-method-invalid-error';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\n\nimport {\n    ButtonColor,\n    ButtonType,\n    EnvironmentType,\n    GooglePaymentData,\n    GooglePayAddress,\n    GooglePayClient,\n    GooglePayInitializer,\n    GooglePayPaymentDataRequestV2,\n    GooglePaySDK,\n    TokenizePayload\n} from './googlepay';\nimport GooglePayScriptLoader from './googlepay-script-loader';\n\nexport default class GooglePayPaymentProcessor {\n    private _googlePayClient?: GooglePayClient;\n    private _methodId?: string;\n    private _paymentDataRequest?: GooglePayPaymentDataRequestV2;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _googlePayScriptLoader: GooglePayScriptLoader,\n        private _googlePayInitializer: GooglePayInitializer,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _consigmentActionCreator: ConsignmentActionCreator,\n        private _requestSender: RequestSender\n    ) {}\n\n    initialize(methodId: string): Promise<void> {\n        this._methodId = methodId;\n\n        return this._configureWallet();\n    }\n\n    deinitialize(): Promise<void> {\n        return this._googlePayInitializer.teardown();\n    }\n\n    createButton(\n        onClick: (event: Event) => Promise<void>,\n        buttonType: ButtonType = ButtonType.Short,\n        buttonColor: ButtonColor = ButtonColor.Default\n    ): HTMLElement {\n        if (!this._googlePayClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._googlePayClient.createButton({\n            buttonColor,\n            buttonType,\n            onClick,\n        });\n    }\n\n    displayWallet(): Promise<GooglePaymentData> {\n        if (!this._googlePayClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._googlePayClient.loadPaymentData(this._getPaymentDataRequest());\n    }\n\n    handleSuccess(paymentData: GooglePaymentData): Promise<InternalCheckoutSelectors> {\n        return this._postForm(this._googlePayInitializer.parseResponse(paymentData))\n            .then(() => this._updateBillingAddress(paymentData));\n    }\n\n    updateShippingAddress(shippingAddress: GooglePayAddress): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consigmentActionCreator.updateAddress(this._mapGooglePayAddressToShippingAddress(shippingAddress))\n        );\n    }\n\n    private _configureWallet(): Promise<void> {\n        const methodId = this._getMethodId();\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n                const checkout = state.checkout.getCheckout();\n                const hasShippingAddress = !!state.shippingAddress.getShippingAddress();\n\n                if (!paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                const { testMode } = paymentMethod.config;\n\n                return Promise.all([\n                    this._googlePayScriptLoader.load(),\n                    this._googlePayInitializer.initialize(checkout, paymentMethod, hasShippingAddress),\n                ]).then(([googlePay, paymentDataRequest]) => {\n                    this._googlePayClient = this._getGooglePayClient(googlePay, testMode);\n                    this._paymentDataRequest = paymentDataRequest;\n\n                    return this._googlePayClient.isReadyToPay({\n                        allowedPaymentMethods: [\n                            {\n                                type: paymentDataRequest.allowedPaymentMethods[0].type,\n                                parameters: {\n                                    allowedAuthMethods: paymentDataRequest.allowedPaymentMethods[0].parameters.allowedAuthMethods,\n                                    allowedCardNetworks: paymentDataRequest.allowedPaymentMethods[0].parameters.allowedCardNetworks,\n                                },\n                            },\n                        ],\n                        apiVersion: paymentDataRequest.apiVersion,\n                        apiVersionMinor: paymentDataRequest.apiVersionMinor,\n                    }).then(response => {\n                        if (response.result) {\n                            return;\n                        }\n\n                        throw new PaymentMethodInvalidError();\n                    });\n                });\n            });\n    }\n\n    private _getCardInformation(cardInformation: { cardType: string, lastFour: string }) {\n        return {\n            type: cardInformation.cardType,\n            number: cardInformation.lastFour,\n        };\n    }\n\n    private _getPaymentDataRequest(): GooglePayPaymentDataRequestV2 {\n        if (!this._paymentDataRequest) {\n            throw new RemoteCheckoutSynchronizationError();\n        }\n\n        return this._paymentDataRequest;\n    }\n\n    private _getGooglePayClient(google: GooglePaySDK, testMode?: boolean): GooglePayClient {\n        if (testMode === undefined) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const environment: EnvironmentType = testMode ? 'TEST' : 'PRODUCTION';\n\n        return new google.payments.api.PaymentsClient({ environment });\n    }\n\n    private _getMethodId(): string {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._methodId;\n    }\n\n    private _mapGooglePayAddressToBillingAddress(paymentData: GooglePaymentData, id: string): BillingAddressUpdateRequestBody {\n        return {\n            id,\n            firstName: paymentData.paymentMethodData.info.billingAddress.name.split(' ').slice(0, -1).join(' '),\n            lastName: paymentData.paymentMethodData.info.billingAddress.name.split(' ').slice(-1).join(' '),\n            company: paymentData.paymentMethodData.info.billingAddress.companyName,\n            address1: paymentData.paymentMethodData.info.billingAddress.address1,\n            address2: paymentData.paymentMethodData.info.billingAddress.address2 + paymentData.paymentMethodData.info.billingAddress.address3,\n            city: paymentData.paymentMethodData.info.billingAddress.locality,\n            stateOrProvince: paymentData.paymentMethodData.info.billingAddress.administrativeArea,\n            stateOrProvinceCode: paymentData.paymentMethodData.info.billingAddress.administrativeArea,\n            postalCode: paymentData.paymentMethodData.info.billingAddress.postalCode,\n            countryCode: paymentData.paymentMethodData.info.billingAddress.countryCode,\n            phone: paymentData.paymentMethodData.info.billingAddress.phoneNumber,\n            customFields: [],\n            email: paymentData.email,\n        };\n    }\n\n    private _mapGooglePayAddressToShippingAddress(address: GooglePayAddress): AddressRequestBody {\n        return {\n            firstName: address.name.split(' ').slice(0, -1).join(' '),\n            lastName: address.name.split(' ').slice(-1).join(' '),\n            company: address.companyName,\n            address1: address.address1,\n            address2: address.address2 + address.address3,\n            city: address.locality,\n            stateOrProvince: address.administrativeArea,\n            stateOrProvinceCode: address.administrativeArea,\n            postalCode: address.postalCode,\n            countryCode: address.countryCode,\n            phone: address.phoneNumber,\n            customFields: [],\n        };\n    }\n\n    private _postForm(postPaymentData: TokenizePayload): Promise<Response<void>> {\n        const cardInformation = postPaymentData.details;\n\n        return this._requestSender.post('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: toFormUrlEncoded({\n                payment_type: postPaymentData.type,\n                nonce: postPaymentData.nonce,\n                provider: this._getMethodId(),\n                action: 'set_external_checkout',\n                card_information: this._getCardInformation(cardInformation),\n            }),\n        });\n    }\n\n    private _updateBillingAddress(paymentData: GooglePaymentData): Promise<InternalCheckoutSelectors> {\n        const remoteBillingAddress = this._store.getState().billingAddress.getBillingAddress();\n\n        if (!remoteBillingAddress) {\n            throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n        }\n\n        const googlePayAddressMapped = this._mapGooglePayAddressToBillingAddress(paymentData, remoteBillingAddress.id);\n\n        return this._store.dispatch(\n            this._billingAddressActionCreator.updateAddress(googlePayAddressMapped)\n        );\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { GooglePayHostWindow, GooglePaySDK } from './googlepay';\n\nexport default class GooglePayScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: GooglePayHostWindow = window\n    ) {}\n\n    load(): Promise<GooglePaySDK> {\n        return this._scriptLoader\n            .loadScript('https://pay.google.com/gp/p/js/pay.js')\n            .then(() => {\n                if (!this._window.google) {\n                    throw new StandardError();\n                }\n\n                return this._window.google;\n            });\n    }\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../../../billing';\nimport { CheckoutRequestSender, CheckoutStore } from '../../../checkout';\nimport { ConsignmentActionCreator, ConsignmentRequestSender } from '../../../shipping';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport PaymentMethodRequestSender from '../../payment-method-request-sender';\n\nimport { GooglePayInitializer } from './googlepay';\nimport GooglePayPaymentProcessor from './googlepay-payment-processor';\nimport GooglePayScriptLoader from './googlepay-script-loader';\n\nexport default function createGooglePayPaymentProcessor(store: CheckoutStore, initializer: GooglePayInitializer): GooglePayPaymentProcessor {\n    const requestSender = createRequestSender();\n    const scriptLoader = getScriptLoader();\n\n    return new GooglePayPaymentProcessor(\n        store,\n        new PaymentMethodActionCreator(\n            new PaymentMethodRequestSender(requestSender)\n        ),\n        new GooglePayScriptLoader(scriptLoader),\n        initializer,\n        new BillingAddressActionCreator(\n            new BillingAddressRequestSender(requestSender)\n        ),\n        new ConsignmentActionCreator(\n            new ConsignmentRequestSender(requestSender),\n            new CheckoutRequestSender(requestSender)\n        ),\n        requestSender\n    );\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\n\n/**\n * @todo Convert this file into TypeScript properly\n */\nexport default class RemoteCheckoutRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    initializeBilling(methodName: string, params?: { referenceId: string }, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/billing`;\n\n        return this._requestSender.get(url, { params, timeout });\n    }\n\n    initializeShipping(methodName: string, params?: { referenceId: string }, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/shipping`;\n\n        return this._requestSender.get(url, { params, timeout });\n    }\n\n    initializePayment(methodName: string, params?: InitializePaymentOptions, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/payment`;\n\n        return this._requestSender.get(url, { params, timeout });\n    }\n\n    loadSettings(methodName: string, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/settings`;\n\n        return this._requestSender.get(url, { timeout });\n    }\n\n    signOut(methodName: string, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/signout`;\n\n        return this._requestSender.get(url, { timeout });\n    }\n\n    generateToken({ timeout }: RequestOptions = {}): Promise<Response> {\n        const url = '/remote-checkout-token';\n\n        return this._requestSender.get(url, { timeout });\n    }\n\n    trackAuthorizationEvent({ timeout }: RequestOptions = {}): Promise<Response> {\n        const url = '/remote-checkout/events/shopper-checkout-service-provider-authorization-requested';\n\n        return this._requestSender.post(url, { timeout });\n    }\n}\n\nexport interface InitializePaymentOptions {\n    authorizationToken?: string;\n    customerMessage?: string;\n    referenceId?: string;\n    useStoreCredit?: boolean;\n}\n","import { createAction, createErrorAction, Action } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport { RemoteCheckoutActionType } from './remote-checkout-actions';\nimport RemoteCheckoutRequestSender, { InitializePaymentOptions } from './remote-checkout-request-sender';\nimport { RemoteCheckoutStateData } from './remote-checkout-state';\n\n/**\n * @todo Convert this file into TypeScript properly\n * i.e.: Action<T>\n */\nexport default class RemoteCheckoutActionCreator {\n    constructor(\n        private _remoteCheckoutRequestSender: RemoteCheckoutRequestSender\n    ) {}\n\n    initializeBilling(methodId: string, params?: { referenceId: string }, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.InitializeRemoteBillingRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.initializeBilling(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(createAction(RemoteCheckoutActionType.InitializeRemoteBillingSucceeded, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.InitializeRemoteBillingFailed, response, { methodId }));\n                });\n        });\n    }\n\n    initializeShipping(methodId: string, params?: { referenceId: string }, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.InitializeRemoteShippingRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.initializeShipping(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(createAction(RemoteCheckoutActionType.InitializeRemoteShippingSucceeded, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.InitializeRemoteShippingFailed, response, { methodId }));\n                });\n        });\n    }\n\n    initializePayment(methodId: string, params?: InitializePaymentOptions, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.InitializeRemotePaymentRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.initializePayment(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(createAction(RemoteCheckoutActionType.InitializeRemotePaymentSucceeded, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.InitializeRemotePaymentFailed, response, { methodId }));\n                });\n        });\n    }\n\n    loadSettings(methodId: string, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.LoadRemoteSettingsRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.loadSettings(methodId, options)\n                .then(({ body }) => {\n                    observer.next(createAction(RemoteCheckoutActionType.LoadRemoteSettingsSucceeded, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.LoadRemoteSettingsFailed, response, { methodId }));\n                });\n        });\n    }\n\n    signOut(methodId: string, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.SignOutRemoteCustomerRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.signOut(methodId, options)\n                .then(() => {\n                    observer.next(createAction(RemoteCheckoutActionType.SignOutRemoteCustomerSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.SignOutRemoteCustomerFailed, response, { methodId }));\n                });\n        });\n    }\n\n    updateCheckout<K extends keyof RemoteCheckoutStateData>(methodId: K, data: Partial<RemoteCheckoutStateData[K]>): Action {\n        return createAction(RemoteCheckoutActionType.UpdateRemoteCheckout, data, { methodId });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport PaymentMethod from '../../payment-method';\n\nimport AmazonPayWindow from './amazon-pay-window';\n\nexport default class AmazonPayScriptLoader {\n    private _window: AmazonPayWindow;\n\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    loadWidget(method: PaymentMethod, onPaymentReady?: () => void): Promise<Event> {\n        const {\n            config: { merchantId, testMode },\n            initializationData: { region = 'us' } = {},\n        } = method;\n\n        const url = 'https://' +\n            (region.toLowerCase() !== 'us' ? 'static-eu.' : 'static-na.') +\n            'payments-amazon.com/OffAmazonPayments/' +\n            `${region.toLowerCase()}/` +\n            (testMode ? 'sandbox/' : '') +\n            (region.toLowerCase() !== 'us' ? 'lpa/' : '') +\n            `js/Widgets.js?sellerId=${merchantId}`;\n\n        this._configureWidget(method, onPaymentReady);\n\n        return this._scriptLoader.loadScript(url);\n    }\n\n    private _configureWidget(method: PaymentMethod, onPaymentReady?: () => void): void {\n        const onLoginReady = () => {\n            if (!this._window.amazon) {\n                return;\n            }\n\n            this._window.amazon.Login.setClientId(method.initializationData.clientId);\n            this._window.amazon.Login.setUseCookie(true);\n        };\n\n        if (this._window.amazon && this._window.amazon.Login) {\n            onLoginReady();\n        } else {\n            this._window.onAmazonLoginReady = onLoginReady;\n        }\n\n        if (this._window.OffAmazonPayments && onPaymentReady) {\n            onPaymentReady();\n        } else {\n            this._window.onAmazonPaymentsReady = onPaymentReady;\n        }\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { VisaCheckoutHostWindow, VisaCheckoutSDK } from './visacheckout';\n\nexport default class VisaCheckoutScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: VisaCheckoutHostWindow = window\n    ) {}\n\n    load(testMode?: boolean): Promise<VisaCheckoutSDK> {\n        return this._scriptLoader\n            .loadScript(`//${testMode ? 'sandbox-' : ''}assets.secure.checkout.visa.com/checkout-widget/resources/js/integration/v1/sdk.js`)\n            .then(() => {\n                if (!this._window.V) {\n                    throw new StandardError();\n                }\n\n                return this._window.V;\n            });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { ChasePayHostWindow, JPMC } from '../chasepay/chasepay';\n\nexport default class ChasePayScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        public _window: ChasePayHostWindow = window\n    ) {}\n\n    load(testMode?: boolean): Promise<JPMC> {\n        return this._scriptLoader\n            .loadScript(`//pwc${testMode ? 'psb' : ''}.chase.com/pwc/checkout/js/v20170521/list.action?type=raw&applId=PWC&channelId=CWC&version=1`)\n            .then(() => {\n                if (!this._window.JPMC) {\n                    throw new StandardError();\n                }\n\n                return this._window.JPMC;\n            });\n    }\n}\n","import Logger from './logger';\n\nexport default class ConsoleLogger implements Logger {\n    constructor(\n        private _console?: Console\n    ) {}\n\n    log(...messages: any[]): void {\n        this._logToConsole('log', ...messages);\n    }\n\n    info(...messages: any[]): void {\n        this._logToConsole('info', ...messages);\n    }\n\n    warn(...messages: any[]): void {\n        this._logToConsole('warn', ...messages);\n    }\n\n    error(...messages: any[]): void {\n        this._logToConsole('error', ...messages);\n    }\n\n    debug(...messages: any[]): void {\n        this._logToConsole('debug', ...messages);\n    }\n\n    private _logToConsole(type: keyof Console, ...messages: any[]): void {\n        if (!this._console || !this._console[type]) {\n            return;\n        }\n\n        this._console[type].call(this._console, ...messages);\n    }\n}\n","import Logger from './logger';\n\nexport default class NoopLogger implements Logger {\n    log(): void {}\n\n    info(): void {}\n\n    warn(): void {}\n\n    error(): void {}\n\n    debug(): void {}\n}\n","import { getEnvironment } from '../utility';\n\nimport createLogger from './create-logger';\nimport Logger from './logger';\n\nconst logger = createLogger(getEnvironment() !== 'test');\n\nexport default function getDefaultLogger(): Logger {\n    return logger;\n}\n","import ConsoleLogger from './console-logger';\nimport Logger from './logger';\nimport NoopLogger from './noop-logger';\n\nexport default function createLogger(isEnabled = true): Logger {\n    if (!isEnabled) {\n        return new NoopLogger();\n    }\n\n    return new ConsoleLogger(console);\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\n\nimport { Address, LegacyAddress } from '../../../address';\nimport { toFormUrlEncoded } from '../../../common/http-request';\n\nimport { BraintreeDataCollector } from './braintree';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\nimport {\n    VisaCheckoutAddress,\n    VisaCheckoutInitOptions,\n    VisaCheckoutPaymentSuccessPayload,\n    VisaCheckoutTokenizedPayload,\n} from './visacheckout';\n\nexport default class BraintreeVisaCheckoutPaymentProcessor {\n    constructor(\n        private _braintreeSDKCreator: BraintreeSDKCreator,\n        private _requestSender: RequestSender\n    ) {}\n\n    initialize(clientToken: string, options: VisaCheckoutInitializeOptions): Promise<VisaCheckoutInitOptions> {\n        this._braintreeSDKCreator.initialize(clientToken);\n\n        return this._braintreeSDKCreator.getVisaCheckout()\n            .then(visaCheckout => visaCheckout.createInitOptions({\n                settings: {\n                    locale: options.locale,\n                    shipping: {\n                        collectShipping: options.collectShipping,\n                    },\n                },\n                paymentRequest: {\n                    currencyCode: options.currencyCode,\n                    subtotal: String(options.subtotal),\n                },\n            }));\n    }\n\n    deinitialize(): Promise<void> {\n        return this._braintreeSDKCreator.teardown();\n    }\n\n    handleSuccess(payment: VisaCheckoutPaymentSuccessPayload, shipping?: Address, billing?: Address): Promise<any> {\n        return this._braintreeSDKCreator.getVisaCheckout()\n            .then(braintreeVisaCheckout => Promise.all([\n                braintreeVisaCheckout.tokenize(payment),\n                this._braintreeSDKCreator.getDataCollector(),\n            ])\n            .then(([tokenizedPayload, dataCollector]) => {\n                const {\n                    shippingAddress = this._toVisaCheckoutAddress(shipping),\n                    billingAddress = this._toVisaCheckoutAddress(billing),\n                } = tokenizedPayload;\n\n                return this._postForm({\n                    ...tokenizedPayload,\n                    shippingAddress,\n                    billingAddress,\n                }, dataCollector);\n            }));\n    }\n\n    private _postForm(paymentData: VisaCheckoutTokenizedPayload, dataCollector: BraintreeDataCollector) {\n        const {\n            userData,\n            billingAddress,\n            shippingAddress,\n            details: cardInformation,\n        } = paymentData;\n        const { userEmail } = userData;\n        const { deviceData } = dataCollector;\n\n        return this._requestSender.post('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: toFormUrlEncoded({\n                payment_type: paymentData.type,\n                nonce: paymentData.nonce,\n                provider: 'braintreevisacheckout',\n                action: 'set_external_checkout',\n                device_data: deviceData,\n                card_information: this._getCardInformation(cardInformation),\n                billing_address: this._getAddress(userEmail, billingAddress),\n                shipping_address: this._getAddress(userEmail, shippingAddress),\n            }),\n        });\n    }\n\n    private _toVisaCheckoutAddress(address?: Address): VisaCheckoutAddress {\n        if (!address) {\n            return {};\n        }\n\n        return {\n            firstName: address.firstName,\n            lastName: address.lastName,\n            phoneNumber: address.phone,\n            streetAddress: address.address1,\n            extendedAddress: address.address2,\n            locality: address.city,\n            region: address.stateOrProvinceCode,\n            countryCode: address.countryCode,\n            postalCode: address.postalCode,\n        };\n    }\n\n    private _getAddress(email: string, address: VisaCheckoutAddress = {}): Partial<LegacyAddress> {\n        return {\n            email,\n            first_name: address.firstName,\n            last_name: address.lastName,\n            phone_number: address.phoneNumber,\n            address_line_1: address.streetAddress,\n            address_line_2: address.extendedAddress,\n            city: address.locality,\n            state: address.region,\n            country_code: address.countryCode,\n            postal_code: address.postalCode,\n        };\n    }\n\n    private _getCardInformation(cardInformation: { cardType: string, lastTwo: string }) {\n        return {\n            type: cardInformation.cardType,\n            number: cardInformation.lastTwo,\n        };\n    }\n}\n\nexport interface VisaCheckoutInitializeOptions {\n    locale?: string;\n    collectShipping?: boolean;\n    subtotal?: number;\n    currencyCode?: string;\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport BraintreeScriptLoader from './braintree-script-loader';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\nimport BraintreeVisaCheckoutPaymentProcessor from './braintree-visacheckout-payment-processor';\n\nexport default function createBraintreeVisaCheckoutPaymentProcessor(\n    scriptLoader: ScriptLoader,\n    requestSender: RequestSender\n) {\n    const braintreeScriptLoader = new BraintreeScriptLoader(scriptLoader);\n    const braintreeSDKCreator = new BraintreeSDKCreator(braintreeScriptLoader);\n\n    return new BraintreeVisaCheckoutPaymentProcessor(braintreeSDKCreator, requestSender);\n}\n"],"sourceRoot":""}