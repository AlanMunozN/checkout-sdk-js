{"version":3,"sources":["webpack://checkoutKit/webpack/bootstrap","webpack://checkoutKit/external \"tslib\"","webpack://checkoutKit/external \"@bigcommerce/data-store\"","webpack://checkoutKit/external \"lodash\"","webpack://checkoutKit/external \"rxjs\"","webpack://checkoutKit/./src/shipping/consignment-actions.ts","webpack://checkoutKit/./src/checkout/checkout-actions.ts","webpack://checkoutKit/./src/common/error/errors/missing-data-error.ts","webpack://checkoutKit/./src/customer/customer-strategy-actions.ts","webpack://checkoutKit/./src/payment/payment-strategy-actions.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-actions.ts","webpack://checkoutKit/./src/coupon/coupon-actions.ts","webpack://checkoutKit/./src/order/order-actions.ts","webpack://checkoutKit/./src/common/error/errors/standard-error.ts","webpack://checkoutKit/./src/billing/billing-address-actions.ts","webpack://checkoutKit/./src/coupon/gift-certificate-actions.ts","webpack://checkoutKit/./src/payment/payment-method-actions.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-actions.ts","webpack://checkoutKit/./src/payment/instrument/instrument-actions.ts","webpack://checkoutKit/external \"rxjs/operators\"","webpack://checkoutKit/./src/embedded-checkout/embedded-checkout-events.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-actions.ts","webpack://checkoutKit/./src/common/error/error-action-creator.ts","webpack://checkoutKit/./src/geography/country-action-creator.ts","webpack://checkoutKit/./src/geography/country-request-sender.ts","webpack://checkoutKit/./src/payment/payment-strategy-type.ts","webpack://checkoutKit/./src/order/errors/order-finalization-not-required-error.ts","webpack://checkoutKit/./src/payment/payment-strategy-action-creator.ts","webpack://checkoutKit/./src/cart/errors/cart-changed-error.ts","webpack://checkoutKit/./src/checkout/checkout-validator.ts","webpack://checkoutKit/./src/payment/is-vaulted-instrument.ts","webpack://checkoutKit/./src/payment/payment-action-creator.ts","webpack://checkoutKit/./src/payment/payment-request-sender.ts","webpack://checkoutKit/./src/payment/payment-strategy-registry.ts","webpack://checkoutKit/./src/payment/errors/payment-argument-invalid-error.ts","webpack://checkoutKit/./src/payment/strategies/afterpay/afterpay-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/afterpay/afterpay-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/amazon-pay/amazon-pay-payment-strategy.ts","webpack://checkoutKit/./src/payment/errors/payment-method-cancelled-error.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-payment-processor.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-credit-card-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/chasepay/chasepay.ts","webpack://checkoutKit/./src/payment/is-credit-card-like.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-paypal-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-visacheckout-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/chasepay/chasepay-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/square/square-form.ts","webpack://checkoutKit/./src/payment/strategies/credit-card/credit-card-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/klarna/klarna-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/klarna/klarna-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/legacy/legacy-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/masterpass/masterpass-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/no-payment/no-payment-data-required-strategy.ts","webpack://checkoutKit/./src/payment/strategies/offline/offline-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/offsite/offsite-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/paypal/paypal-pro-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/paypal/paypal-express-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/sage-pay/sage-pay-payment-strategy.ts","webpack://checkoutKit/./src/common/error/errors/unsupported-browser-error.ts","webpack://checkoutKit/./src/payment/strategies/square/square-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/square/square-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/wepay/wepay-risk-client.ts","webpack://checkoutKit/./src/payment/strategies/wepay/wepay-payment-strategy.ts","webpack://checkoutKit/./src/payment/create-payment-strategy-registry.ts","webpack://checkoutKit/./src/payment/strategies/braintree/create-braintree-payment-processor.ts","webpack://checkoutKit/./src/payment/instrument/instrument-action-creator.ts","webpack://checkoutKit/./src/common/date-time/add-minutes.ts","webpack://checkoutKit/./src/common/date-time/is-future.ts","webpack://checkoutKit/./src/payment/instrument/instrument-response-transformer.ts","webpack://checkoutKit/./src/payment/instrument/instrument-request-sender.ts","webpack://checkoutKit/./src/checkout/checkout-store-selector.ts","webpack://checkoutKit/./src/checkout/checkout-store-error-selector.ts","webpack://checkoutKit/./src/checkout/checkout-store-status-selector.ts","webpack://checkoutKit/./src/checkout/create-checkout-selectors.ts","webpack://checkoutKit/./src/common/error/error-message-transformer.ts","webpack://checkoutKit/./src/checkout/checkout-service.ts","webpack://checkoutKit/./src/checkout/create-checkout-service-error-transformer.ts","webpack://checkoutKit/./src/checkout/create-checkout-service.ts","webpack://checkoutKit/./src/payment/create-payment-client.ts","webpack://checkoutKit/./src/checkout/index.ts","webpack://checkoutKit/./src/common/error/errors/request-error.ts","webpack://checkoutKit/./src/config/config-actions.ts","webpack://checkoutKit/./src/common/selector/selector-decorator.ts","webpack://checkoutKit/./src/common/http-request/content-type.ts","webpack://checkoutKit/./src/geography/country-actions.ts","webpack://checkoutKit/./src/shipping/shipping-country-actions.ts","webpack://checkoutKit/external \"@bigcommerce/request-sender\"","webpack://checkoutKit/./src/payment/payment-status-types.ts","webpack://checkoutKit/external \"@bigcommerce/script-loader\"","webpack://checkoutKit/./src/payment/payment-strategy-state.ts","webpack://checkoutKit/./src/common/error/clear-error-reducer.ts","webpack://checkoutKit/./src/checkout/checkout-default-includes.ts","webpack://checkoutKit/./src/common/utility/is-equal.ts","webpack://checkoutKit/./src/customer/customer-actions.ts","webpack://checkoutKit/./src/payment/payment-actions.ts","webpack://checkoutKit/./src/common/error/errors/invalid-argument-error.ts","webpack://checkoutKit/./src/payment/payment-method-types.ts","webpack://checkoutKit/./src/cart/amount-transformer.ts","webpack://checkoutKit/./src/embedded-checkout/is-iframe-event.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-error-selector.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-status-selector.ts","webpack://checkoutKit/./src/checkout-buttons/create-checkout-button-selectors.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-initializer.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/checkout-button-method-type.ts","webpack://checkoutKit/./src/common/dom/is-element-id.ts","webpack://checkoutKit/./src/common/dom/set-unique-element-id.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-strategy-action-creator.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/braintree/braintree-paypal-button-strategy.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/googlepay/googlepay-button-strategy.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/masterpass/masterpass-button-strategy.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/paypal/paypal-button-strategy.ts","webpack://checkoutKit/./src/checkout-buttons/create-checkout-button-initializer.ts","webpack://checkoutKit/./src/checkout-buttons/create-checkout-button-registry.ts","webpack://checkoutKit/./src/checkout-buttons/index.ts","webpack://checkoutKit/./src/checkout/checkout-params.ts","webpack://checkoutKit/external \"@bigcommerce/form-poster\"","webpack://checkoutKit/./src/cart/map-to-internal-line-items.ts","webpack://checkoutKit/external \"local-storage-fallback\"","webpack://checkoutKit/./src/common/error/throw-error-action.ts","webpack://checkoutKit/./src/payment/errors/payment-method-invalid-error.ts","webpack://checkoutKit/./src/common/utility/cache-key-resolver.ts","webpack://checkoutKit/./src/common/utility/bind-decorator.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-event-poster.ts","webpack://checkoutKit/./src/checkout/create-action-transformer.ts","webpack://checkoutKit/./src/checkout/checkout-selector.ts","webpack://checkoutKit/./src/checkout/checkout-reducer.ts","webpack://checkoutKit/./src/cart/map-gift-certificate-to-internal-line-item.ts","webpack://checkoutKit/./src/cart/map-to-internal-line-item.ts","webpack://checkoutKit/./src/billing/billing-address-selector.ts","webpack://checkoutKit/./src/config/config-selector.ts","webpack://checkoutKit/./src/form/form-selector.ts","webpack://checkoutKit/./src/geography/country-selector.ts","webpack://checkoutKit/./src/payment/payment-selector.ts","webpack://checkoutKit/./src/payment/payment-method-selector.ts","webpack://checkoutKit/./src/payment/payment-strategy-selector.ts","webpack://checkoutKit/./src/payment/instrument/instrument-selector.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-selector.ts","webpack://checkoutKit/./src/checkout/create-internal-checkout-selectors.ts","webpack://checkoutKit/./src/common/utility/set-prototype-of.ts","webpack://checkoutKit/./src/common/utility/is-private.ts","webpack://checkoutKit/./src/common/utility/omit-deep.ts","webpack://checkoutKit/./src/common/error/error-actions.ts","webpack://checkoutKit/./src/payment/payment-method-action-creator.ts","webpack://checkoutKit/./src/payment/payment-method-request-sender.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-content/embedded-content-events.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-event-listener.ts","webpack://checkoutKit/./src/common/http-request/internal-api-headers.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-selector.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-reducer.ts","webpack://checkoutKit/./src/embedded-checkout/errors/not-embeddable-error.ts","webpack://checkoutKit/./src/common/storage/browser-storage.ts","webpack://checkoutKit/./src/embedded-checkout/errors/invalid-login-token-error.ts","webpack://checkoutKit/./src/embedded-checkout/embedded-checkout.ts","webpack://checkoutKit/./src/embedded-checkout/loading-indicator.ts","webpack://checkoutKit/./src/embedded-checkout/resizable-iframe-creator.ts","webpack://checkoutKit/./src/embedded-checkout/embed-checkout.ts","webpack://checkoutKit/./src/embedded-checkout/index.ts","webpack://checkoutKit/./src/cart/map-to-internal-cart.ts","webpack://checkoutKit/./src/promotion/map-to-discount-notifications.ts","webpack://checkoutKit/./src/checkout/checkout-action-creator.ts","webpack://checkoutKit/./src/shipping/consignment-action-creator.ts","webpack://checkoutKit/./src/shipping/consignment-request-sender.ts","webpack://checkoutKit/./src/shipping/map-to-internal-shipping-option.ts","webpack://checkoutKit/./src/common/error/errors/unrecoverable-error.ts","webpack://checkoutKit/./src/common/error/errors/map-from-internal-error-response.ts","webpack://checkoutKit/./src/common/error/errors/map-from-payment-error-response.ts","webpack://checkoutKit/./src/common/error/request-error-factory.ts","webpack://checkoutKit/./src/common/error/errors/map-from-storefront-error-response.ts","webpack://checkoutKit/./src/billing/billing-address-reducer.ts","webpack://checkoutKit/./src/config/config-reducer.ts","webpack://checkoutKit/./src/geography/country-reducer.ts","webpack://checkoutKit/./src/payment/payment-reducer.ts","webpack://checkoutKit/./src/payment/payment-method-reducer.ts","webpack://checkoutKit/./src/payment/payment-strategy-reducer.ts","webpack://checkoutKit/./src/payment/instrument/instrument-reducer.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-reducer.ts","webpack://checkoutKit/./src/checkout/create-checkout-store.ts","webpack://checkoutKit/./src/common/error/create-request-error-factory.ts","webpack://checkoutKit/./src/checkout/create-checkout-store-reducer.ts","webpack://checkoutKit/./src/checkout/errors/checkout-not-available-error.ts","webpack://checkoutKit/./src/checkout/checkout-request-sender.ts","webpack://checkoutKit/./src/address/is-address-equal.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-sdk-creator.ts","webpack://checkoutKit/./src/coupon/map-to-internal-coupon.ts","webpack://checkoutKit/external \"iframe-resizer\"","webpack://checkoutKit/./src/address/map-to-internal-address.ts","webpack://checkoutKit/./src/billing/is-billing-address-like.ts","webpack://checkoutKit/./src/common/http-request/join-includes.ts","webpack://checkoutKit/./src/common/error/errors/not-initialized-error.ts","webpack://checkoutKit/./src/common/url/parse-url.ts","webpack://checkoutKit/./src/common/action/cachable-action-decorator.ts","webpack://checkoutKit/./src/common/action/is-action-options.ts","webpack://checkoutKit/./src/common/action/cache-action.ts","webpack://checkoutKit/./src/common/utility/create-freeze-proxy.ts","webpack://checkoutKit/./src/customer/customer-strategy-action-creator.ts","webpack://checkoutKit/./src/customer/customer-action-creator.ts","webpack://checkoutKit/./src/customer/customer-request-sender.ts","webpack://checkoutKit/./src/cart/cart-selector.ts","webpack://checkoutKit/./src/coupon/coupon-selector.ts","webpack://checkoutKit/./src/customer/customer-selector.ts","webpack://checkoutKit/./src/customer/customer-strategy-selector.ts","webpack://checkoutKit/./src/coupon/gift-certificate-selector.ts","webpack://checkoutKit/./src/shipping/shipping-address-selector.ts","webpack://checkoutKit/./src/shipping/shipping-country-selector.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-selector.ts","webpack://checkoutKit/./src/shipping/consignment-selector.ts","webpack://checkoutKit/./src/order/order-selector.ts","webpack://checkoutKit/./src/cart/cart-reducer.ts","webpack://checkoutKit/./src/shipping/consignment-reducer.ts","webpack://checkoutKit/./src/coupon/coupon-reducer.ts","webpack://checkoutKit/./src/customer/customer-reducer.ts","webpack://checkoutKit/./src/coupon/gift-certificate-reducer.ts","webpack://checkoutKit/./src/order/order-reducer.ts","webpack://checkoutKit/./src/common/utility/merge-or-push.ts","webpack://checkoutKit/./src/shipping/shipping-country-reducer.ts","webpack://checkoutKit/./src/customer/map-to-internal-customer.ts","webpack://checkoutKit/./src/coupon/map-to-internal-gift-certificate.ts","webpack://checkoutKit/./src/order/map-to-internal-order.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-state.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-reducer.ts","webpack://checkoutKit/./src/customer/customer-strategy-state.ts","webpack://checkoutKit/./src/customer/customer-strategy-reducer.ts","webpack://checkoutKit/./src/payment/strategies/masterpass/get-callback-url.ts","webpack://checkoutKit/./src/common/utility/omit-private.ts","webpack://checkoutKit/./src/common/utility/get-environment.ts","webpack://checkoutKit/./src/order/order-request-sender.ts","webpack://checkoutKit/./src/order/order-action-creator.ts","webpack://checkoutKit/./src/cart/cart-comparator.ts","webpack://checkoutKit/./src/common/utility/to-single-line.ts","webpack://checkoutKit/./src/coupon/coupon-action-creator.ts","webpack://checkoutKit/./src/coupon/coupon-request-sender.ts","webpack://checkoutKit/./src/coupon/gift-certificate-action-creator.ts","webpack://checkoutKit/./src/coupon/gift-certificate-request-sender.ts","webpack://checkoutKit/./src/common/utility/cancellable-promise.ts","webpack://checkoutKit/./src/address/is-internal-address-equal.ts","webpack://checkoutKit/./src/address/map-from-internal-address.ts","webpack://checkoutKit/./src/shipping/shipping-country-action-creator.ts","webpack://checkoutKit/./src/shipping/shipping-country-request-sender.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-action-creator.ts","webpack://checkoutKit/./src/common/error/errors/not-implemented-error.ts","webpack://checkoutKit/./src/customer/strategies/amazon/amazon-pay-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/braintree/braintree-visacheckout-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/chasepay/chasepay-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/default/default-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/googlepay/googlepay-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/masterpass/masterpass-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/square/square-customer-strategy.ts","webpack://checkoutKit/./src/customer/create-customer-strategy-registry.ts","webpack://checkoutKit/./src/shipping/strategies/amazon/amazon-pay-shipping-strategy.ts","webpack://checkoutKit/./src/shipping/strategies/default/default-shipping-strategy.ts","webpack://checkoutKit/./src/shipping/create-shipping-strategy-registry.ts","webpack://checkoutKit/external \"@bigcommerce/bigpay-client\"","webpack://checkoutKit/external \"messageformat\"","webpack://checkoutKit/./src/common/error/errors/timeout-error.ts","webpack://checkoutKit/./src/config/config-action-creator.ts","webpack://checkoutKit/./src/config/config-request-sender.ts","webpack://checkoutKit/./src/billing/billing-address-action-creator.ts","webpack://checkoutKit/./src/billing/billing-address-request-sender.ts","webpack://checkoutKit/./src/common/registry/registry.ts","webpack://checkoutKit/./src/common/http-request/to-form-url-encoded.ts","webpack://checkoutKit/./src/payment/strategies/masterpass/masterpass-script-loader.ts","webpack://checkoutKit/./src/remote-checkout/errors/remote-checkout-synchronization-error.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-braintree-initializer.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-stripe-initializer.ts","webpack://checkoutKit/./src/payment/strategies/paypal/paypal-script-loader.ts","webpack://checkoutKit/external \"iframe-resizer/js/iframeResizer.contentWindow\"","webpack://checkoutKit/./src/embedded-checkout/iframe-content/handle-frame-loaded-event.ts","webpack://checkoutKit/./src/common/error/errors/custom-error.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-content/iframe-embedded-checkout-messenger.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-content/noop-embedded-checkout-messenger.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-content/create-embedded-checkout-messenger.ts","webpack://checkoutKit/./src/locale/language-service.ts","webpack://checkoutKit/./src/locale/create-language-service.ts","webpack://checkoutKit/./src/currency/currency-formatter.ts","webpack://checkoutKit/./src/currency/currency-service.ts","webpack://checkoutKit/./src/currency/create-currency-service.ts","webpack://checkoutKit/./src/index.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-payment-processor.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/create-googlepay-payment-processor.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-request-sender.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-action-creator.ts","webpack://checkoutKit/./src/payment/strategies/amazon-pay/amazon-pay-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/braintree/visacheckout-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/chasepay/chasepay-script-loader.ts","webpack://checkoutKit/./src/common/log/console-logger.ts","webpack://checkoutKit/./src/common/log/noop-logger.ts","webpack://checkoutKit/./src/common/log/get-default-logger.ts","webpack://checkoutKit/./src/common/log/create-logger.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-visacheckout-payment-processor.ts","webpack://checkoutKit/./src/payment/strategies/braintree/create-braintree-visacheckout-payment-processor.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","ConsignmentActionType","__webpack_exports__","CheckoutActionType","MissingDataErrorType","MissingDataError","_super","subtype","_this","this","type","MissingBillingAddress","MissingCart","MissingConsignments","MissingCheckout","MissingCheckoutConfig","MissingOrderConfig","MissingOrder","MissingOrderId","MissingPayment","MissingPaymentMethod","getErrorMessage","tslib__WEBPACK_IMPORTED_MODULE_0__","_standard_error__WEBPACK_IMPORTED_MODULE_1__","CustomerStrategyActionType","PaymentStrategyActionType","ShippingStrategyActionType","CouponActionType","OrderActionType","StandardError","message","_utility__WEBPACK_IMPORTED_MODULE_1__","_newTarget","Error","captureStackTrace","stack","BillingAddressActionType","GiftCertificateActionType","PaymentMethodActionType","CheckoutButtonActionType","InstrumentActionType","EmbeddedCheckoutEventType","RemoteCheckoutActionType","ErrorActionCreator","clearError","error","error_actions","ClearError","payload","CountryActionCreator","_countryRequestSender","loadCountries","options","external_rxjs_","observer","next","data_store_","country_actions","LoadCountriesRequested","then","response","LoadCountriesSucceeded","body","data","complete","catch","LoadCountriesFailed","CountryRequestSender","_requestSender","_config","_a","timeout","headers","Accept-Language","locale","PaymentStrategyType","OrderFinalizationNotRequiredError","external_tslib_","standard_error","payment_strategy_type","PaymentStrategyActionCreator","_strategyRegistry","_orderActionCreator","execute","store","strategy","state","getState","payment","useStoreCredit","meta","methodId","isPaymentDataRequired","method","paymentMethods","getPaymentMethod","gatewayId","missing_data_error","getByMethod","NO_PAYMENT_DATA_REQUIRED","payment_strategy_actions","ExecuteRequested","undefined","ExecuteSucceeded","ExecuteFailed","finalize","FinalizeRequested","_loadOrderPaymentsIfNeeded","getPaymentId","order_finalization_not_required_error","providerId","id","gateway","FinalizeSucceeded","pipe","operators_","throw_error_action","FinalizeFailed","initialize","paymentStrategies","isInitialized","InitializeRequested","InitializeSucceeded","InitializeFailed","deinitialize","DeinitializeRequested","DeinitializeSucceeded","DeinitializeFailed","widgetInteraction","WidgetInteractionStarted","WidgetInteractionFinished","WidgetInteractionFailed","checkout","getCheckout","orderId","loadOrderPayments","CartChangedError","CheckoutValidator","_checkoutRequestSender","validate","loadCheckout","comparator","cart_comparator","grandTotal","_compareCoupons","coupons","_compareGiftCertificates","giftCertificates","isEqual","cart","cart_changed_error","couponsA","couponsB","external_lodash_","giftCertificatesA","giftCertificatesB","isVaultedInstrument","instrument","Boolean","instrumentId","PaymentActionCreator","_paymentRequestSender","submitPayment","payment_actions","SubmitPaymentRequested","_getPaymentRequestBody","loadCurrentOrder","SubmitPaymentSucceeded","SubmitPaymentFailed","initializeOffsitePayment","InitializeOffsitePaymentRequested","InitializeOffsitePaymentSucceeded","InitializeOffsitePaymentFailed","paymentData","invalid_argument_error","billingAddress","getBillingAddress","customer","getCustomer","order","getOrder","paymentMethod","_getPaymentMethod","shippingAddress","getShippingAddress","consignments","getConsignments","shippingOption","getShippingOption","storeConfig","config","getStoreConfig","contextConfig","getContextConfig","instrumentMeta","instruments","getInstrumentsMeta","paymentMeta","getPaymentMethodsMeta","orderMeta","getOrderMeta","internalCustomer","map_to_internal_customer","authToken","getPaymentToken","vaultAccessToken","map_to_internal_address","map_to_internal_shipping_option","map_to_internal_cart","map_to_internal_order","quoteMeta","request","geoCountryCode","source","storeProfile","paymentMethodSelector","initializationData","PaymentRequestSender","_client","Promise","resolve","reject","_transformResponse","status","statusText","PaymentStrategyRegistry","_store","token","_getToken","cacheToken","_hasFactoryForMethod","payment_method_types","OFFLINE","_isLegacyMethod","LEGACY","OFFSITE","CREDIT_CARD","_hasFactory","clientSidePaymentProviders","paymentSettings","registry_registry","PaymentArgumentInvalidError","invalidFields","join","AfterpayPaymentStrategy","_checkoutValidator","_paymentActionCreator","_paymentMethodActionCreator","_remoteCheckoutActionCreator","_afterpayScriptLoader","storeCountryName","storeCountry","load","_mapCountryToISO2","afterpaySdk","_afterpaySdk","paymentId","payment_argument_invalid_error","dispatch","initializePayment","loadPaymentMethod","_displayModal","loadSettings","afterpay","remoteCheckout","settings","not_initialized_error","PaymentNotInitialized","orderPayload","paymentPayload","nonce","submitOrder","countryName","clientToken","countryCode","display","SCRIPTS_DEFAULT","SCRIPTS_US","AfterpayScriptLoader","_scriptLoader","testMode","scriptURI","_getScriptURI","loadScript","window","AfterPay","AmazonPayPaymentStrategy","_billingAddressActionCreator","_window","amazonOptions","amazon","_walletOptions","_paymentMethod","loadWidget","_createWallet","referenceId","_getOrderReferenceId","_b","request_error","_getMerchantId","merchantId","container","onError","onPaymentSelect","_c","onReady","document","getElementById","OffAmazonPayments","walletOptions","amazonOrderReferenceId","design","designMode","scope","sellerId","orderReference","_synchronizeBillingAddress","_updateOrderReference","widget","Widgets","Wallet","remote_checkout_synchronization_error","initializeBilling","remoteAddress","billing","address","internalBillingAddress","is_internal_address_equal","updateAddress","map_from_internal_address","updateCheckout","getAmazonOrderReferenceId","PaymentMethodCancelledError","BraintreePaymentProcessor","_braintreeSDKCreator","_threeDSecureOptions","threeDSecure","preloadPaypal","getPaypal","tokenizeCard","requestData","_mapToCreditCard","getClient","client","creditCards","paypal","amount","storeLanguage","currency","offerCredit","tokenize","enableShippingAddress","flow","useraction","verifyCard","addFrame","removeFrame","all","get3DS","cancelVerifyCard","verification","cancel","payment_method_cancelled_error","cancellable_promise","iframe","promise","appendSessionId","processedPayment","getDataCollector","deviceData","deviceSessionId","teardown","creditCard","streetAddress","address1","address2","cardholderName","ccName","number","ccNumber","cvv","ccCvv","expirationDate","ccExpiry","month","year","country","postalCode","endpoint","ChasePayEventType","BraintreeCreditCardPaymentStrategy","_braintreePaymentProcessor","braintree","_is3dsEnabled","is3dsEnabled","_handleError","orderRequest","_preparePaymentData","_isUsingVaulting","card","shouldSaveInstrument","tokenizedCard","BraintreePaypalPaymentStrategy","_credit","braintreeOptions","code","BraintreeVisaCheckoutPaymentStrategy","_checkoutActionCreator","_paymentStrategyActionCreator","_braintreeVisaCheckoutPaymentProcessor","_visaCheckoutScriptLoader","visaCheckoutOptions","braintreevisacheckout","initOptions","collectShipping","subtotal","currencyCode","visaCheckout","visaInitOptions","init","on","paymentSuccessPayload","_paymentInstrumentSelected","handleSuccess","loadCurrentCheckout","queueId","CardBrand","DigitalWalletType","chasepay_payment_strategy","ChasePayPaymentStrategy","_chasePayScriptLoader","_wepayRiskClient","_walletEvent$","_methodId","chasepay","walletButton","_walletButton","addEventListener","_handleWalletButtonClick","_configureWallet","removeEventListener","_chasePayClient","_getPayment","_displayWallet","_createOrder","ChasePay","logoContainer","insertBrandings","color","containers","configure","language","CancelCheckout","onCancel","CompleteCheckout","_setSessionToken","sessionToken","showLoadingAnimation","startCheckout","digitalSessionId","subscribe","event","merchantRequestId","post","Accept","Content-Type","to_form_url_encoded","action","provider","getRiskToken","riskToken","paymentCryptogram","cryptogramId","eci","transactionId","btoa","reqTokenId","expDate","toString","substr","accountNum","accountMask","extraData","preventDefault","bind_decorator","CreditCardPaymentStrategy","googlepay_payment_strategy","GooglePayPaymentStrategy","_googlePayPaymentProcessor","_googlePayOptions","_getGooglePayOptions","cardInformation","displayWallet","statusCode","googlepaybraintree","googlepaystripe","card_information","KlarnaPaymentStrategy","_klarnaScriptLoader","klarnaCredit","_klarnaCredit","_unsubscribe","_loadWidget","_authorize","authorizationToken","authorization_token","klarna","onLoad","client_token","show_form","payment_method_invalid_error","authorize","res","approved","KlarnaScriptLoader","Klarna","Credit","LegacyPaymentStrategy","masterpass_payment_strategy","MasterpassPaymentStrategy","_masterpassScriptLoader","masterpass","_masterpassClient","_createMasterpassPayload","checkoutId","allowedCardTypes","toFixed","cartId","suppressShippingAddress","callbackUrl","get_callback_url","NoPaymentDataRequiredPaymentStrategy","OfflinePaymentStrategy","OffsitePaymentStrategy","_shouldSubmitFullPayload","getPaymentStatus","payment_status_types","finalizeOrder","PaypalProPaymentStrategy","_isPaymentAcknowledged","PaypalExpressPaymentStrategy","_useRedirectFlow","paypalexpress","useRedirectFlow","_isInContextEnabled","loadPaypal","_paypalSdk","setup","button","environment","closeFlow","_isAcknowledgedOrFinalized","redirectUrl","getPaymentRedirectUrl","top","location","href","initXO","startFlow","SagePayPaymentStrategy","_formPoster","errors","postForm","three_ds_result","acs_url","PaReq","payer_auth_request","TermUrl","callback_url","MD","merchant_data","UnsupportedBrowserError","SquarePaymentStrategy","_syncPaymentMethod","createSquareForm","_paymentForm","_getFormOptions","build","_getNonceInstrument","_getCountryCode","toUpperCase","_deferredRequestNonce","timeout_error","requestCardNonce","deferred","squareOptions","square","_squareOptions","callbacks","cardNonceResponseReceived","cardData","billingContact","shippingContact","digital_wallet_type","none","_handleWalletNonceResponse","_handleCardNonceResponse","createPaymentRequest","_paymentRequestPayload","methodsSupported","methods","_showPaymentMethods","paymentFormLoaded","_setPostalCode","unsupportedBrowserDetected","unsupported_browser_error","_setExternalCheckoutData","requestShippingAddress","requestBillingInfo","total","label","storeName","String","pending","JSON","stringify","setPostalCode","element","masterpassBtn","elementId","style","SquareScriptLoader","SqPaymentForm","WepayRiskClient","_riskClient","WePay","risk","generate_risk_token","get_risk_token","WepayPaymentStrategy","orderActionCreator","paymentActionCreator","payloadWithToken","credit_card_payment_strategy","createPaymentStrategyRegistry","paymentClient","requestSender","registry","payment_strategy_registry","defaultToken","scriptLoader","script_loader_","billingAddressActionCreator","billing_address_action_creator","billing_address_request_sender","braintreePaymentProcessor","braintreeScriptLoader","braintree_script_loader","braintreeSDKCreator","braintree_sdk_creator","braintree_payment_processor","createBraintreePaymentProcessor","checkoutRequestSender","checkout_request_sender","checkoutValidator","checkout_validator","order_action_creator","order_request_sender","payment_action_creator","payment_request_sender","paymentMethodActionCreator","payment_method_action_creator","payment_method_request_sender","remoteCheckoutActionCreator","remote_checkout_action_creator","remote_checkout_request_sender","configActionCreator","config_action_creator","config_request_sender","checkoutActionCreator","checkout_action_creator","paymentStrategyActionCreator","payment_strategy_action_creator","register","AFTERPAY","afterpay_payment_strategy","afterpay_script_loader","AMAZON","amazon_pay_payment_strategy","amazon_pay_script_loader","KLARNA","klarna_payment_strategy","klarna_script_loader","legacy_payment_strategy","offline_payment_strategy","offsite_payment_strategy","PAYPAL","paypal_pro_payment_strategy","PAYPAL_EXPRESS","paypal_express_payment_strategy","paypal_script_loader","PAYPAL_EXPRESS_CREDIT","SAGE_PAY","sage_pay_payment_strategy","form_poster_","SQUARE","square_payment_strategy","square_script_loader","no_payment_data_required_strategy","BRAINTREE","braintree_credit_card_payment_strategy","BRAINTREE_PAYPAL","braintree_paypal_payment_strategy","BRAINTREE_PAYPAL_CREDIT","BRAINTREE_VISA_CHECKOUT","braintree_visacheckout_payment_strategy","create_braintree_visacheckout_payment_processor","visacheckout_script_loader","CHASE_PAY","chasepay_script_loader","wepay_risk_client","BRAINTREE_GOOGLE_PAY","create_googlepay_payment_processor","googlepay_braintree_initializer","WE_PAY","wepay_payment_strategy","MASTERPASS","masterpass_script_loader","STRIPE_GOOGLE_PAY","googlepay_stripe_initializer","InstrumentActionCreator","_instrumentRequestSender","loadInstruments","instrument_actions","LoadInstrumentsRequested","session","_getSessionContext","_getCurrentAccessToken","_getShippingAddress","_getValidAccessToken","currentToken","LoadInstrumentsSucceeded","LoadInstrumentsFailed","deleteInstrument","DeleteInstrumentRequested","DeleteInstrumentSucceeded","DeleteInstrumentFailed","_isValidVaultAccessToken","date","newDate","valueOf","Date","now","isFuture","vaultAccessExpiry","getTime","setMinutes","getMinutes","getVaultAccessToken","getCart","customerId","storeId","InstrumentResponseTransformer","transformResponse","vaultedInstruments","_transformVaultedInstruments","vaulted_instruments","transformErrorResponse","transformVaultAccessResponse","expires_at","map","bigpayToken","bigpay_token","defaultInstrument","default_instrument","iin","last4","last_4","expiryMonth","expiry_month","expiryYear","expiry_year","brand","trustedShippingAddress","trusted_shipping_address","InstrumentRequestSender","_transformer","instrument_response_transformer","requestContext","_loadInstrumentsWithAddress","_loadInstruments","deleteShopperInstrument","errorResponse","loadInstrumentsWithAddress","checkout_store_selector","CheckoutStoreSelector","selectors","_billingAddress","_cart","_checkout","_consignments","_countries","countries","_coupons","_customer","_form","form","_giftCertificates","_instruments","_order","_payment","_paymentMethods","_shippingAddress","_shippingCountries","shippingCountries","getConfig","context","firstName","lastName","company","city","stateOrProvince","stateOrProvinceCode","phone","customFields","getShippingOptions","length","availableShippingOptions","getSelectedShippingOption","selectedShippingOption","getShippingCountries","getBillingCountries","getCountries","getPaymentMethods","getSelectedPaymentMethod","getCoupons","getGiftCertificates","isPaymentDataSubmitted","getInstruments","getBillingAddressFields","getShippingAddressFields","selector_decorator","checkout_store_error_selector","CheckoutStoreErrorSelector","_customerStrategies","customerStrategies","_paymentStrategies","_shippingStrategies","shippingStrategies","getError","getLoadCheckoutError","getSubmitOrderError","getFinalizeOrderError","getLoadOrderError","getLoadCartError","getLoadBillingCountriesError","getLoadShippingCountriesError","getLoadPaymentMethodsError","getLoadPaymentMethodError","getInitializePaymentError","getLoadShippingOptionsError","getSelectShippingOptionError","getSignInError","getSignOutError","getInitializeCustomerError","getUpdateShippingAddressError","getUpdateBillingAddressError","getContinueAsGuestError","getUpdateConsignmentError","getCreateConsignmentsError","getDeleteConsignmentError","getInitializeShippingError","getApplyCouponError","getRemoveCouponError","getApplyGiftCertificateError","getRemoveGiftCertificateError","getLoadInstrumentsError","getDeleteInstrumentError","getLoadConfigError","getLoadError","getUpdateCheckoutError","getUpdateError","getExecuteError","getFinalizeError","getLoadMethodError","getInitializeError","consignmentId","getSelectOptionError","getUpdateShippingOptionError","getUpdateAddressError","getDeleteError","getCreateError","getApplyError","getRemoveError","checkout_store_status_selector","CheckoutStoreStatusSelector","isPending","isLoadingCheckout","isSubmittingOrder","isFinalizingOrder","isLoadingOrder","isLoadingCart","isLoadingBillingCountries","isLoadingShippingCountries","isLoadingPaymentMethods","isLoadingPaymentMethod","isInitializingPayment","isLoadingShippingOptions","isSelectingShippingOption","isSigningIn","isSigningOut","isInitializingCustomer","isUpdatingBillingAddress","isContinuingAsGuest","isUpdatingShippingAddress","isUpdatingConsignment","isCreatingConsignments","isDeletingConsignment","isInitializingShipping","isApplyingCoupon","isRemovingCoupon","isApplyingGiftCertificate","isRemovingGiftCertificate","isLoadingInstruments","isDeletingInstrument","isLoadingConfig","isCustomerStepPending","isPaymentStepPending","isLoading","isUpdatingCheckout","isUpdating","isExecuting","isFinalizing","isLoadingMethod","isInitializing","isSelectingOption","isUpdatingShippingOption","isUpdatingAddress","isDeleting","isCreating","isApplying","isRemoving","isWidgetInteracting","createCheckoutSelectors","statuses","ErrorMessageTransformer","_messageCustomizer","transform","to_single_line","CheckoutService","_configActionCreator","_consignmentActionCreator","_countryActionCreator","_couponActionCreator","_customerStrategyActionCreator","_errorActionCreator","_giftCertificateActionCreator","_instrumentActionCreator","_shippingCountryActionCreator","_shippingStrategyActionCreator","isDevelopment","_state","_errorTransformer","get_environment","error_message_transformer","isCheckoutServiceError","CustomerNotInitialized","ShippingNotInitialized","notifyState","subscriber","filters","_i","arguments","apply","concat","filter","_dispatch","loadDefaultCheckout","loadOrder","loadCheckoutAction","loadConfigAction","loadConfig","finalizeOrderIfNeeded","loadPaymentMethods","deinitializePayment","loadBillingCountries","loadShippingCountries","loadBillingAddressFields","loadShippingAddressFields","initializeCustomer","deinitializeCustomer","continueAsGuest","credentials","signInCustomer","signIn","signOutCustomer","signOut","loadShippingOptions","initializeShipping","deinitializeShipping","selectShippingOption","shippingOptionId","selectOption","updateShippingAddress","createConsignments","deleteConsignment","updateConsignment","consignment","assignItemsToAddress","assignItemsByAddress","unassignItemsToAddress","unassignItemsByAddress","selectConsignmentShippingOption","updateShippingOption","updateBillingAddress","applyCoupon","removeCoupon","applyGiftCertificate","removeGiftCertificate","createCheckoutService","protocol","get_default_logger","warn","externalSource","shouldWarnMutation","request_sender_","host","create_checkout_store","bigpay_client_","setHost","bigpayBaseUrl","createPaymentClient","orderRequestSender","checkout_service","consignment_action_creator","consignment_request_sender","country_action_creator","country_request_sender","coupon_action_creator","coupon_request_sender","customer_strategy_action_creator","create_customer_strategy_registry","error_action_creator","gift_certificate_action_creator","gift_certificate_request_sender","instrument_action_creator","instrument_request_sender","shipping_country_action_creator","shipping_country_request_sender","shipping_strategy_action_creator","create_shipping_strategy_registry","DEFAULT_RESPONSE","RequestError","ConfigActionType","selectorDecorator","target","decoratedTarget","class_1","getOwnPropertyNames","forEach","descriptor","getOwnPropertyDescriptor","resolver","_utility__WEBPACK_IMPORTED_MODULE_2__","memoizedMethod","lodash__WEBPACK_IMPORTED_MODULE_1__","args","getKey","_utility__WEBPACK_IMPORTED_MODULE_3__","cachedValue","getUsedCount","newValue","_utility__WEBPACK_IMPORTED_MODULE_4__","keyFilter","_utility__WEBPACK_IMPORTED_MODULE_5__","cache","set","selectorMethodDecorator","ContentType","CountryActionType","ShippingCountryActionType","ACKNOWLEDGE","FINALIZE","DEFAULT_STATE","clearErrorReducer","_utility__WEBPACK_IMPORTED_MODULE_0__","_error_actions__WEBPACK_IMPORTED_MODULE_1__","isClearErrorAction","objectA","objectB","Array","isArray","index","length_1","isArrayEqual","isDateEqual","RegExp","isRegExpEqual","keysA","keys","keysB","length_2","isObjectEqual","CustomerActionType","PaymentActionType","InvalidArgumentError","HOSTED","AmountTransformer","_dp","toInteger","Math","floor","pow","isIframeEvent","checkout_button_error_selector","CheckoutButtonErrorSelector","_checkoutButton","checkoutButton","getInitializeButtonError","getDeinitializeButtonError","getDeinitializeError","checkout_button_status_selector","CheckoutButtonStatusSelector","isInitializingButton","isDeinitializingButton","isDeinitializing","createCheckoutButtonSelectors","CheckoutButtonMethodType","CheckoutButtonInitializer","_buttonStrategyActionCreator","initializeButton","containerIds","containerId","test","selector","idPrefix","querySelectorAll","slice","setUniqueElementId","deinitializeButton","CheckoutButtonStrategyActionCreator","_registry","checkout_button_actions","InitializeButtonRequested","useCache","InitializeButtonSucceeded","InitializeButtonFailed","DeinitializeButtonRequested","DeinitializeButtonSucceeded","DeinitializeButtonFailed","checkout_button_method_type","BraintreePaypalButtonStrategy","_paypalScriptLoader","_offerCredit","paypalOptions","braintreepaypalcredit","braintreepaypal","getPaypalCheckout","paypalCheckout","_paypalCheckout","allowedSources","disallowedSources","allowCredit","push","FUNDING","CREDIT","Button","render","env","commit","shouldProcessPayment","funding","allowed","disallowed","shape","_setupPayment","onPaymentError","onAuthorize","_tokenizePayment","onAuthorizeError","addresses","CheckoutButtonNotInitialized","createPayment","shippingAddressEditable","shippingAddressOverride","_mapToBraintreeAddress","tokenizePayment","payment_type","device_data","shipping_address","_mapToLegacyShippingAddress","billing_address","_mapToLegacyBillingAddress","details","recipientName","split","email","first_name","last_name","phone_number","address_line_1","line1","address_line_2","line2","country_code","postal_code","googlepay_button_strategy","GooglePayButtonStrategy","_getMethodId","_createSignInButton","parentNode","removeChild","googlePayButton","createButton","appendChild","_onPaymentSelectComplete","_onError","masterpass_button_strategy","MasterpassButtonStrategy","_signInButton","buttonContainer","createElement","src","cartAmount","PaypalButtonStrategy","_host","clientId","actions","X-API-INTERNAL","internal_api_headers","paymentID","payerID","payerId","payerInfo","payer","payer_info","createCheckoutButtonInitializer","formPoster","checkout_button_initializer","checkout_button_strategy_action_creator","braintree_paypal_button_strategy","GOOGLEPAY_BRAINTREE","GOOGLEPAY_STRIPE","PAYPALEXPRESS","paypal_button_strategy","createCheckoutButtonRegistry","CheckoutIncludes","mapToInternalLineItems","_map_gift_certificate_to_internal_line_item__WEBPACK_IMPORTED_MODULE_0__","_map_to_internal_line_item__WEBPACK_IMPORTED_MODULE_1__","itemMap","decimalPlaces","idKey","reduce","result","item","mapToInternalLineItemType","throwErrorAction","_bigcommerce_data_store__WEBPACK_IMPORTED_MODULE_0__","rxjs__WEBPACK_IMPORTED_MODULE_1__","PaymentMethodInvalidError","_is_equal__WEBPACK_IMPORTED_MODULE_0__","CacheKeyResolver","_lastId","_maps","_resolveMap","parentMaps","cacheKey","usedCount","_generateKey","isMatched","parentMaps_1","maps","bindDecorator","bindMethodDecorator","bindClassDecorator","boundMethod","_common_url__WEBPACK_IMPORTED_MODULE_0__","IframeEventPoster","targetOrigin","_targetWindow","_targetOrigin","origin","postMessage","setTarget","createActionTransformer","requestErrorFactory","action$","rxjs_operators__WEBPACK_IMPORTED_MODULE_2__","every","isResponse","detail","createError","CheckoutSelector","loadError","updateError","_common_selector__WEBPACK_IMPORTED_MODULE_1__","checkoutReducer","_bigcommerce_data_store__WEBPACK_IMPORTED_MODULE_1__","dataReducer","errorsReducer","_common_error__WEBPACK_IMPORTED_MODULE_4__","statusesReducer","reducer","_checkout_actions__WEBPACK_IMPORTED_MODULE_9__","LoadCheckoutSucceeded","UpdateCheckoutSucceeded","_billing__WEBPACK_IMPORTED_MODULE_3__","UpdateBillingAddressSucceeded","_coupon__WEBPACK_IMPORTED_MODULE_5__","ApplyCouponSucceeded","RemoveCouponSucceeded","_shipping__WEBPACK_IMPORTED_MODULE_8__","CreateConsignmentsSucceeded","UpdateConsignmentSucceeded","DeleteConsignmentSucceeded","UpdateShippingOptionSucceeded","_coupon__WEBPACK_IMPORTED_MODULE_6__","ApplyGiftCertificateSucceeded","RemoveGiftCertificateSucceeded","lodash__WEBPACK_IMPORTED_MODULE_2__","_order__WEBPACK_IMPORTED_MODULE_7__","SubmitOrderSucceeded","LoadCheckoutRequested","LoadCheckoutFailed","UpdateCheckoutRequested","UpdateCheckoutFailed","mapGiftCertificateToInternalLineItem","___WEBPACK_IMPORTED_MODULE_0__","amountTransformer","imageUrl","amountAfterDiscount","discount","integerAmount","integerAmountAfterDiscount","integerDiscount","quantity","sender","recipient","attributes","variantId","mapToInternalLineItem","_amount_transformer__WEBPACK_IMPORTED_MODULE_0__","extendedListPrice","extendedSalePrice","discountAmount","downloadsPageUrl","downloadPageUrl","categoryNames","productId","option","addedByPromotion","billing_address_selector","BillingAddressSelector","continueAsGuestError","config_selector","ConfigSelector","getExternalSource","form_selector","FormSelector","selectedCountry","formFields","shippingAddressFields","field","_processField","billingAddressFields","_processCountry","_processProvince","_processsPostCode","items","default","fieldType","itemtype","subdivisions","required","hasPostalCodes","country_selector","CountrySelector","payment_selector","PaymentSelector","internalPayment","_getInternalPayment","_getHostedPayment","_getGatewayPayment","replace","step","storeCredit","payments","providerType","payment_method_selector","PaymentMethodSelector","loadMethodId","loadMethodError","payment_strategy_selector","PaymentStrategySelector","payment_strategy_state","initializeMethodId","initializeError","executeMethodId","executeError","finalizeMethodId","finalizeError","getWidgetInteractingError","widgetInteractionMethodId","widgetInteractionError","InstrumentSelector","failedInstrument","deleteError","deletingInstrument","remote_checkout_selector","RemoteCheckoutSelector","_remoteCheckout","createInternalCheckoutSelectors","cart_selector","checkout_button_selector","coupon_selector","customer_selector","customer_strategy_selector","gift_certificate_selector","instrument_selector","shipping_address_selector","shipping_country_selector","shipping_strategy_selector","consignment_selector","checkout_selector","order_selector","create_freeze_proxy","setPrototypeOf","__proto__","isPrivate","indexOf","omitDeep","lodash__WEBPACK_IMPORTED_MODULE_0__","predicate","ErrorActionType","PaymentMethodActionCreator","rxjs__WEBPACK_IMPORTED_MODULE_2__","_payment_method_actions__WEBPACK_IMPORTED_MODULE_4__","LoadPaymentMethodsRequested","sessionHash","LoadPaymentMethodsSucceeded","LoadPaymentMethodsFailed","LoadPaymentMethodRequested","LoadPaymentMethodSucceeded","LoadPaymentMethodFailed","_common_action__WEBPACK_IMPORTED_MODULE_3__","_common_http_request__WEBPACK_IMPORTED_MODULE_0__","_common_http_request__WEBPACK_IMPORTED_MODULE_1__","PaymentMethodRequestSender","JsonV1","url","EmbeddedContentEventType","IframeEventListener","sourceOrigin","_sourceOrigin","_common_url__WEBPACK_IMPORTED_MODULE_1__","_isListening","_listeners","listen","_handleMessage","stopListen","addListener","listener","listeners","removeListener","splice","trigger","_is_iframe_event__WEBPACK_IMPORTED_MODULE_3__","_common_utility__WEBPACK_IMPORTED_MODULE_2__","INTERNAL_USE_ONLY","CheckoutButtonSelector","initializedContainers","deinitializeError","_common_selector__WEBPACK_IMPORTED_MODULE_2__","DEFAULT_DATA_STATE","DEFAULT_ERROR_STATE","DEFAULT_STATUS_STATE","checkoutButtonReducer","_checkout_button_actions__WEBPACK_IMPORTED_MODULE_2__","NotEmbeddableErrorType","BrowserStorage","_namespace","getItem","rawValue","external_local_storage_fallback_default","a","withNamespace","parse","removeItem","getItemOnce","setItem","InvalidLoginTokenError","title","NotEmbeddableError","UnknownError","EmbeddedCheckout","_iframeCreator","_messageListener","_messagePoster","_loadingIndicator","_storage","_location","_options","_isAttached","onComplete","embedded_checkout_events","CheckoutComplete","CheckoutError","CheckoutLoaded","onFrameLoad","FrameLoaded","onSignOut","SignedOut","_configureStyles","attach","show","_allowCookie","_attemptLogin","createFrame","_iframe","hide","_retryAllowCookie","FrameError","detach","iFrameResizer","close","contentWindow","styles","embedded_content_events","StyleConfigured","parse_url","pathname","invalid_login_token_error","encodeURIComponent","visibility","not_embeddable_error","MissingContent","DEFAULT_STYLES","size","backgroundColor","ROTATION_ANIMATION","LoadingIndicator","_styles","_defineAnimation","_container","_buildContainer","_indicator","_buildIndicator","parentId","parent_1","opacity","handleTransitionEnd","bottom","left","height","width","position","right","transition","indicator","borderRadius","border","borderColor","margin","transformStyle","animation","head","sheet","CSSStyleSheet","insertRule","ResizableIframeCreator","MissingContainer","allowPaymentRequest","_toResizableFrame","timeoutInterval","setTimeout","handleMessage","is_iframe_event","contentId","iframes","external_iframe_resizer_","scrolling","sizeWidth","heightCalculationMethod","clearTimeout","STORAGE_PREFIX","embedCheckout","embedded_checkout","resizable_iframe_creator","iframe_event_listener","iframe_event_poster","loading_indicator","loadingIndicator","browser_storage","mapToInternalCart","promotions","notifications","amount_transformer","map_to_internal_line_items","lineItems","coupon","discountedAmount","sum","map_to_internal_coupon","discountNotifications","promotion","banners","banner","placeholders","discountType","messageHtml","text","giftCertificate","totalDiscountedAmount","certificate","used","appliedGiftCertificates","map_to_internal_gift_certificate","shipping","shippingCostTotal","amountBeforeDiscount","shippingCostBeforeDiscount","integerAmountBeforeDiscount","physicalItems","lineItem","isShippingRequired","taxSubtotal","taxTotal","taxes","handling","handlingCostTotal","CheckoutActionCreator","_checkout_actions__WEBPACK_IMPORTED_MODULE_7__","rxjs_operators__WEBPACK_IMPORTED_MODULE_3__","_common_error_errors__WEBPACK_IMPORTED_MODULE_5__","_common_error_errors__WEBPACK_IMPORTED_MODULE_6__","ConsignmentActionCreator","_consignmentRequestSender","_common_error_errors__WEBPACK_IMPORTED_MODULE_4__","existingConsignment","getConsignmentByAddress","_removeLineItems","_createOrUpdateConsignment","_addLineItems","consignmentUpdateBody","consignmentMeta","_consignment_actions__WEBPACK_IMPORTED_MODULE_6__","UpdateShippingOptionRequested","UpdateShippingOptionFailed","LoadShippingOptionsRequested","params","include","_checkout_checkout_params__WEBPACK_IMPORTED_MODULE_3__","AvailableShippingOptions","LoadShippingOptionsSucceeded","LoadShippingOptionsFailed","_getConsignmentRequestBody","CreateConsignmentsRequested","CreateConsignmentsFailed","UpdateConsignmentRequested","UpdateConsignmentFailed","DeleteConsignmentRequested","DeleteConsignmentFailed","_isUpdateConsignmentRequest","itemId","_hydrateLineItems","lineItemIds","existingItem","sharedItem","find","DEFAULT_PARAMS","ConsignmentRequestSender","put","delete","mapToInternalShippingOption","isSelected","description","price","cost","selected","isRecommended","transitTime","UnrecoverableError","joinErrors","map_from_payment_error_response_joinErrors","PAYMENT_ERROR_CODES","RequestErrorFactory","_factoryMethods","mapFromInternalErrorResponse","mapFromStorefrontErrorResponse","mapFromPaymentErrorResponse","factoryMethod","_getType","_isStorefrontErrorResponseBody","_isInternalErrorResponseBody","internalType","storefrontErrorResponse","internalErrorResponse","billingAddressReducer","clear_error_reducer","billing_address_actions","ContinueAsGuestSucceeded","checkout_actions","order_actions","LoadOrderSucceeded","UpdateBillingAddressRequested","UpdateBillingAddressFailed","ContinueAsGuestRequested","ContinueAsGuestFailed","config_reducer_DEFAULT_STATE","configReducer","config_reducer_dataReducer","config_reducer_errorsReducer","config_reducer_statusesReducer","config_actions","LoadConfigSucceeded","LoadConfigFailed","LoadConfigRequested","country_reducer_DEFAULT_STATE","countryReducer","country_reducer_dataReducer","country_reducer_errorsReducer","country_reducer_statusesReducer","paymentReducer","payment_reducer_dataReducer","payment_method_reducer_DEFAULT_STATE","paymentMethodReducer","payment_method_reducer_dataReducer","payment_method_reducer_errorsReducer","metaReducer","payment_method_reducer_statusesReducer","payment_method_actions","merge_or_push","paymentStrategyReducer","payment_strategy_reducer_dataReducer","payment_strategy_reducer_errorsReducer","payment_strategy_reducer_statusesReducer","deinitializeMethodId","instrument_reducer_DEFAULT_STATE","instrumentReducer","instrument_reducer_dataReducer","instrument_reducer_errorsReducer","instrument_reducer_metaReducer","instrument_reducer_statusesReducer","remote_checkout_reducer_DEFAULT_STATE","remoteCheckoutReducer","remote_checkout_reducer_dataReducer","remote_checkout_actions","InitializeRemoteBillingSucceeded","InitializeRemoteShippingSucceeded","LoadRemoteSettingsSucceeded","UpdateRemoteCheckout","createCheckoutStore","initialState","factory","actionTransformer","create_action_transformer","request_error_factory","unrecoverable_error","cart_reducer","checkout_reducer","checkout_button_reducer","consignment_reducer","coupon_reducer","customer_reducer","customer_strategy_reducer","gift_certificate_reducer","order_reducer","shipping_country_reducer","shipping_strategy_reducer","stateTransformer","create_internal_checkout_selectors","CheckoutNotAvailableError","checkout_request_sender_CheckoutRequestSender","CheckoutRequestSender","content_type","join_includes","checkout_default_includes","checkout_not_available_error","isAddressEqual","addressA","addressB","normalize","_common_error_errors__WEBPACK_IMPORTED_MODULE_0__","BraintreeScriptLoader","loadClient","load3DS","loadDataCollector","dataCollector","loadPaypalCheckout","loadVisaCheckout","loadGooglePayment","googlePayment","BraintreeSDKCreator","_braintreeScriptLoader","_dataCollectors","_clientToken","_common_error_errors__WEBPACK_IMPORTED_MODULE_1__","authorization","_paypal","_3ds","cached","kount","getVisaCheckout","_visaCheckout","getGooglePaymentComponent","_googlePay","_teardown","mod","mapToInternalCoupon","couponTypes","displayName","couponType","mapToInternalAddress","addressId","isBillingAddressLike","addressLine1","addressLine2","province","provinceCode","postCode","joinIncludes","includes","NotInitializedErrorType","NotInitializedError","parseUrl","_error_errors__WEBPACK_IMPORTED_MODULE_0__","anchor","hash","hostname","port","search","cachableActionDecorator","memoizedMethods","WeakMap","decorateMethod","param","lastArg","fn","instanceMethods","cache_key_resolver","createFreezeProxies","createFreezeProxy","trap","proxy","iteratee","getPrototypeOf","traversePrototypeOf","charAt","createProxy","_customer_strategy_actions__WEBPACK_IMPORTED_MODULE_2__","CustomerStrategyActionCreator","SignInRequested","SignInSucceeded","SignInFailed","SignOutRequested","SignOutSucceeded","SignOutFailed","_common_error__WEBPACK_IMPORTED_MODULE_3__","_customer_actions__WEBPACK_IMPORTED_MODULE_4__","CustomerActionCreator","_customerRequestSender","SignInCustomerRequested","SignInCustomerSucceeded","SignInCustomerFailed","SignOutCustomerRequested","SignOutCustomerSucceeded","SignOutCustomerFailed","CustomerRequestSender","CartSelector","CouponSelector","_coupon","removeCouponError","applyCouponError","CustomerSelector","CustomerStrategySelector","signInMethodId","signInError","signOutMethodId","signOutError","getWidgetInteractionError","GiftCertificateSelector","_giftCertificate","removeGiftCertificateError","applyGiftCertificateError","ShippingAddressSelector","ShippingCountrySelector","ShippingStrategySelector","updateAddressMethodId","updateAddressError","selectOptionMethodId","selectOptionError","ConsignmentSelector","getConsignmentById","_address__WEBPACK_IMPORTED_MODULE_2__","loadShippingOptionsError","getUnassignedItems","assignedLineItemIds","itemIds","getItemAssignmentError","updateShippingOptionError","isAssigningItems","_common_selector__WEBPACK_IMPORTED_MODULE_3__","OrderSelector","cartReducer","_billing_billing_address_actions__WEBPACK_IMPORTED_MODULE_2__","_checkout__WEBPACK_IMPORTED_MODULE_3__","_shipping_consignment_actions__WEBPACK_IMPORTED_MODULE_7__","_coupon_coupon_actions__WEBPACK_IMPORTED_MODULE_5__","_coupon_gift_certificate_actions__WEBPACK_IMPORTED_MODULE_6__","consignmentReducer","_checkout__WEBPACK_IMPORTED_MODULE_2__","_coupon__WEBPACK_IMPORTED_MODULE_4__","_customer__WEBPACK_IMPORTED_MODULE_5__","couponReducer","_coupon_actions__WEBPACK_IMPORTED_MODULE_5__","_order__WEBPACK_IMPORTED_MODULE_4__","ApplyCouponRequested","ApplyCouponFailed","RemoveCouponRequested","RemoveCouponFailed","customerReducer","giftCertificateReducer","_shipping_consignment_actions__WEBPACK_IMPORTED_MODULE_4__","_gift_certificate_actions__WEBPACK_IMPORTED_MODULE_6__","ApplyGiftCertificateRequested","ApplyGiftCertificateFailed","RemoveGiftCertificateRequested","RemoveGiftCertificateFailed","orderReducer","_order_actions__WEBPACK_IMPORTED_MODULE_4__","LoadOrderPaymentsSucceeded","FinalizeOrderSucceeded","orderToken","LoadOrderRequested","LoadOrderPaymentsRequested","LoadOrderFailed","LoadOrderPaymentsFailed","mergeOrPush","array","newArray","shippingCountryReducer","_common_error__WEBPACK_IMPORTED_MODULE_2__","_shipping_country_actions__WEBPACK_IMPORTED_MODULE_3__","LoadShippingCountriesSucceeded","LoadShippingCountriesRequested","LoadShippingCountriesFailed","mapToInternalCustomer","_address__WEBPACK_IMPORTED_MODULE_0__","isGuest","fullName","mapToInternalGiftCertificate","remainingBalance","remaining","balance","purchaseDate","mapToInternalOrder","_cart__WEBPACK_IMPORTED_MODULE_1__","_cart__WEBPACK_IMPORTED_MODULE_2__","_coupon__WEBPACK_IMPORTED_MODULE_3__","customerCanBeCreated","mapToInteralOrderPayment","baseAmount","socialData","mapToInternalSocialDataList","hasDigitalItems","isDownloadable","isComplete","mapToStoreCredit","orderAmount","orderAmountAsInteger","mapToInternalPaymentStatus","isDefaultOrderPayment","helpText","instructions","returnUrl","socialDataObject","digitalItems","socialMedia","image","link","shareText","sharingLink","channelName","channel","channelCode","shippingStrategyReducer","shipping_strategy_actions","UpdateAddressRequested","UpdateAddressSucceeded","UpdateAddressFailed","SelectOptionRequested","SelectOptionSucceeded","SelectOptionFailed","customerStrategyReducer","customer_strategy_actions","getCallbackUrl","omitPrivate","_is_private__WEBPACK_IMPORTED_MODULE_0__","_omit_deep__WEBPACK_IMPORTED_MODULE_1__","getEnvironment","process","NODE_ENV","e","OrderRequestSender","OrderActionCreator","_orderRequestSender","_order_actions__WEBPACK_IMPORTED_MODULE_6__","_getCurrentOrderId","SubmitOrderRequested","_mapToOrderRequestBody","customerMessage","SubmitOrderFailed","FinalizeOrderRequested","FinalizeOrderFailed","CartComparator","cartA","cartB","_normalize","giftWrapping","toSingleLine","input","line","trim","_common_error_errors__WEBPACK_IMPORTED_MODULE_2__","_coupon_actions__WEBPACK_IMPORTED_MODULE_3__","CouponActionCreator","_couponRequestSender","_checkout__WEBPACK_IMPORTED_MODULE_0__","_checkout__WEBPACK_IMPORTED_MODULE_1__","_common_http_request__WEBPACK_IMPORTED_MODULE_2__","_common_http_request__WEBPACK_IMPORTED_MODULE_3__","CouponRequestSender","couponCode","_gift_certificate_actions__WEBPACK_IMPORTED_MODULE_3__","GiftCertificateActionCreator","_giftCertificateRequestSender","GiftCertificateRequestSender","giftCertificateCode","CancellablePromise","cancellable","race","isInternalAddressEqual","ignoredKeys","mapFromInternalAddress","_shipping_country_actions__WEBPACK_IMPORTED_MODULE_2__","ShippingCountryActionCreator","_shippingCountryRequestSender","ShippingCountryRequestSender","ShippingStrategyActionCreator","_shipping_strategy_actions__WEBPACK_IMPORTED_MODULE_3__","mergedOptions","NotImplementedError","AmazonPayCustomerStrategy","_remoteCheckoutRequestSender","not_implemented_error","useAmazonAddressBook","_handleAuthorization","generateToken","Login","popup","tokenPrefix","trackAuthorizationEvent","BraintreeVisaCheckoutCustomerStrategy","_buttonClassName","signInButton","buttonClass","querySelector","_insertVisaCheckoutButton","visaCheckoutButton","className","innerHTML","ChasePayCustomerStrategy","chasePayOptions","JPMC","isChasePayUp","insertButtons","EventType","START_CHECKOUT","sessionId","COMPLETE_CHECKOUT","requestId","_reloadPage","sendRequest","fromChasePay","DefaultCustomerStrategy","_customerActionCreator","googlepay_customer_strategy","GooglePayCustomerStrategy","googlePayOptions","MasterpassCustomerStrategy","masterpassOptions","Masterpass","SquareCustomerStrategy","createCustomerStrategyRegistry","remoteCheckoutRequestSender","amazon_pay_customer_strategy","braintree_visacheckout_customer_strategy","chasepay_customer_strategy","square_customer_strategy","masterpass_customer_strategy","default_customer_strategy","customer_action_creator","customer_request_sender","AmazonPayShippingStrategy","_createAddressBook","optionId","onAddressSelect","AddressBook","_synchronizeShippingAddress","DefaultShippingStrategy","createShippingStrategyRegistry","consignmentRequestSender","consignmentActionCreator","amazon_pay_shipping_strategy","default_shipping_strategy","TimeoutError","ConfigActionCreator","_configRequestSender","_config_actions__WEBPACK_IMPORTED_MODULE_4__","ConfigRequestSender","BillingAddressActionCreator","_common_error_errors__WEBPACK_IMPORTED_MODULE_3__","billingAddressRequestBody","existingBillingAddressRequestBody","_billing_address_actions__WEBPACK_IMPORTED_MODULE_5__","_createOrUpdateBillingAddress","createAddress","BillingAddressRequestSender","Registry","_factories","_instances","_getInstance","_error_errors__WEBPACK_IMPORTED_MODULE_1__","_hasInstance","toFormUrlEncoded","MasterpassScriptLoader","RemoteCheckoutSynchronizationError","GooglePayBraintreeInitializer","hasShippingAddress","googleBraintreePaymentInstance","_googlePaymentInstance","_createGooglePayPayload","parseResponse","paymentMethodData","tokenizationData","androidPayCards","cardType","lastFour","lastTwo","binData","platformToken","googlePayBraintreePaymentDataRequest","merchantInfo","authJwt","merchantName","googleMerchantName","googleMerchantId","transactionInfo","totalPriceStatus","totalPrice","cardRequirements","billingAddressRequired","billingAddressFormat","shippingAddressRequired","emailRequired","phoneNumberRequired","_mapGooglePayBraintreeDataRequestToGooglePayDataRequestV2","createPaymentDataRequest","googlePayBraintreeDataRequestV1","apiVersion","apiVersionMinor","allowedPaymentMethods","parameters","allowedAuthMethods","allowedCardNetworks","billingAddressParameters","format","tokenizationSpecification","braintree:apiVersion","braintree:authorizationFingerprint","paymentMethodTokenizationParameters","braintree:merchantId","braintree:sdkVersion","shippingAddressParameters","GooglePayStripeInitializer","_mapGooglePayStripeDataRequestToGooglePayDataRequestV2","err","stripe:version","stripeVersion","stripe:publishableKey","stripePublishableKey","PaypalScriptLoader","handleFrameLoadedEvent","hasAttribute","setAttribute","isCustomError","IframeEmbeddedCheckoutMessenger","_untargetedMessagePoster","_messageHandlers","postComplete","_postMessage","postError","_transformError","postFrameError","untargeted","postFrameLoaded","postLoaded","postSignedOut","receiveStyles","handler","_notifyMessageHandlers","NoopEmbeddedCheckoutMessenger","createEmbeddedCheckoutMessenger","parentWindow","parent","noop_embedded_checkout_messenger","iframe_embedded_checkout_messenger","parentOrigin","LanguageService","_logger","_transformConfig","locales","translations","_locale","_locales","_translations","_formatters","mapKeys","translationKey","KEY_PREFIX","getLocale","_hasTranslations","translate","prefixedKey","messageFormat","external_messageformat_","compile","_transformData","output","defaultTranslations","_flattenObject","parentKey","resultKey","createLanguageService","language_service","CurrencyFormatter","currencySettings","symbolLocation","symbol","thousandsSeparator","decimalSeparator","_decimalPlaces","parseInt","_symbolLocation","_symbol","_thousandsSeparator","_decimalSeparator","formattedNumber","_formatNumber","formattedCurrency","_formatCurrency","abs","decimalAmount","parsedIntegerAmount","decimalPadding","toLowerCase","CurrencyService","_storeConfig","_customerFormatter","currency_formatter","shopperCurrency","_storeFormatter","toCustomerCurrency","exchangeRate","toStoreCurrency","createCurrencyService","currency_service","checkout_buttons","ButtonType","ButtonColor","GooglePayPaymentProcessor","_googlePayScriptLoader","_googlePayInitializer","_consigmentActionCreator","onClick","buttonType","buttonColor","Short","Default","_googlePayClient","loadPaymentData","_getPaymentDataRequest","_postForm","_updateBillingAddress","_mapGooglePayAddressToShippingAddress","googlePay","paymentDataRequest","_getGooglePayClient","_paymentDataRequest","isReadyToPay","_getCardInformation","google","api","PaymentsClient","_mapGooglePayAddressToBillingAddress","info","companyName","address3","locality","administrativeArea","phoneNumber","postPaymentData","remoteBillingAddress","googlePayAddressMapped","GooglePayScriptLoader","createGooglePayPaymentProcessor","initializer","googlepay_payment_processor","googlepay_script_loader","RemoteCheckoutRequestSender","methodName","_remote_checkout_actions__WEBPACK_IMPORTED_MODULE_2__","RemoteCheckoutActionCreator","InitializeRemoteBillingRequested","InitializeRemoteBillingFailed","InitializeRemoteShippingRequested","InitializeRemoteShippingFailed","InitializeRemotePaymentRequested","InitializeRemotePaymentSucceeded","InitializeRemotePaymentFailed","LoadRemoteSettingsRequested","LoadRemoteSettingsFailed","SignOutRemoteCustomerRequested","SignOutRemoteCustomerSucceeded","SignOutRemoteCustomerFailed","AmazonPayScriptLoader","onPaymentReady","region","_configureWidget","onLoginReady","setClientId","setUseCookie","onAmazonLoginReady","onAmazonPaymentsReady","VisaCheckoutScriptLoader","V","ChasePayScriptLoader","ConsoleLogger","_console","log","messages","_logToConsole","debug","NoopLogger","getDefaultLogger","isEnabled","logger","console_logger","console","noop_logger","BraintreeVisaCheckoutPaymentProcessor","createInitOptions","paymentRequest","braintreeVisaCheckout","tokenizedPayload","_toVisaCheckoutAddress","userData","userEmail","_getAddress","extendedAddress","createBraintreeVisaCheckoutPaymentProcessor","braintree_visacheckout_payment_processor"],"mappings":"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","file":"checkout-sdk.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 191);\n","module.exports = require(\"tslib\");","module.exports = require(\"@bigcommerce/data-store\");","module.exports = require(\"lodash\");","module.exports = require(\"rxjs\");","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nimport { ConsignmentMeta } from './consignment';\n\nexport enum ConsignmentActionType {\n    CreateConsignmentsRequested = 'CREATE_CONSIGNMENTS_REQUESTED',\n    CreateConsignmentsSucceeded = 'CREATE_CONSIGNMENTS_SUCCEEDED',\n    CreateConsignmentsFailed = 'CREATE_CONSIGNMENTS_FAILED',\n\n    UpdateConsignmentRequested = 'UPDATE_CONSIGNMENT_REQUESTED',\n    UpdateConsignmentSucceeded = 'UPDATE_CONSIGNMENT_SUCCEEDED',\n    UpdateConsignmentFailed = 'UPDATE_CONSIGNMENT_FAILED',\n\n    DeleteConsignmentRequested = 'DELETE_CONSIGNMENT_REQUESTED',\n    DeleteConsignmentSucceeded = 'DELETE_CONSIGNMENT_SUCCEEDED',\n    DeleteConsignmentFailed = 'DELETE_CONSIGNMENT_FAILED',\n\n    UpdateShippingOptionRequested = 'UPDATE_SHIPPING_OPTION_REQUESTED',\n    UpdateShippingOptionSucceeded = 'UPDATE_SHIPPING_OPTION_SUCCEEDED',\n    UpdateShippingOptionFailed = 'UPDATE_SHIPPING_OPTION_FAILED',\n\n    LoadShippingOptionsRequested = 'LOAD_SHIPPING_OPTIONS_REQUESTED',\n    LoadShippingOptionsSucceeded = 'LOAD_SHIPPING_OPTIONS_SUCCEEDED',\n    LoadShippingOptionsFailed = 'LOAD_SHIPPING_OPTIONS_FAILED',\n}\n\nexport type ConsignmentAction =\n    CreateConsignmentsAction |\n    UpdateConsignmentAction |\n    DeleteConsignmentAction |\n    UpdateShippingOptionAction |\n    LoadShippingOptionsAction;\n\nexport type CreateConsignmentsAction =\n    CreateConsignmentsRequestedAction |\n    CreateConsignmentsSucceededAction |\n    CreateConsignmentsFailedAction;\n\nexport type UpdateConsignmentAction =\n    UpdateConsignmentRequestedAction |\n    UpdateConsignmentSucceededAction |\n    UpdateConsignmentFailedAction;\n\nexport type DeleteConsignmentAction =\n    DeleteConsignmentRequestedAction |\n    DeleteConsignmentSucceededAction |\n    DeleteConsignmentFailedAction;\n\nexport type UpdateShippingOptionAction =\n    UpdateShippingOptionRequestedAction |\n    UpdateShippingOptionSucceededAction |\n    UpdateShippingOptionFailedAction;\n\nexport type LoadShippingOptionsAction =\n    LoadShippingOptionsRequestedAction |\n    LoadShippingOptionsSucceededAction |\n    LoadShippingOptionsFailedAction;\n\nexport interface CreateConsignmentsRequestedAction extends Action {\n    type: ConsignmentActionType.CreateConsignmentsRequested;\n}\n\nexport interface CreateConsignmentsSucceededAction extends Action<Checkout> {\n    type: ConsignmentActionType.CreateConsignmentsSucceeded;\n}\n\nexport interface CreateConsignmentsFailedAction extends Action<Error> {\n    type: ConsignmentActionType.CreateConsignmentsFailed;\n}\n\nexport interface UpdateConsignmentRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentRequested;\n}\n\nexport interface UpdateConsignmentSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentSucceeded;\n}\n\nexport interface UpdateConsignmentFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentFailed;\n}\n\nexport interface DeleteConsignmentRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentRequested;\n}\n\nexport interface DeleteConsignmentSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentSucceeded;\n}\n\nexport interface DeleteConsignmentFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentFailed;\n}\n\nexport interface UpdateShippingOptionRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionRequested;\n}\n\nexport interface UpdateShippingOptionSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionSucceeded;\n}\n\nexport interface UpdateShippingOptionFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionFailed;\n}\n\nexport interface LoadShippingOptionsRequestedAction extends Action {\n    type: ConsignmentActionType.LoadShippingOptionsRequested;\n}\n\nexport interface LoadShippingOptionsSucceededAction extends Action<Checkout> {\n    type: ConsignmentActionType.LoadShippingOptionsSucceeded;\n}\n\nexport interface LoadShippingOptionsFailedAction extends Action<Error> {\n    type: ConsignmentActionType.LoadShippingOptionsFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadConfigAction } from '../config/config-actions';\n\nimport Checkout from './checkout';\n\nexport enum CheckoutActionType {\n    LoadCheckoutRequested = 'LOAD_CHECKOUT_REQUESTED',\n    LoadCheckoutSucceeded = 'LOAD_CHECKOUT_SUCCEEDED',\n    LoadCheckoutFailed = 'LOAD_CHECKOUT_FAILED',\n\n    UpdateCheckoutRequested = 'UPDATE_CHECKOUT_REQUESTED',\n    UpdateCheckoutSucceeded = 'UPDATE_CHECKOUT_SUCCEEDED',\n    UpdateCheckoutFailed = 'UPDATE_CHECKOUT_FAILED',\n}\n\nexport type CheckoutAction = LoadCheckoutAction | UpdateCheckoutAction;\n\nexport type LoadCheckoutAction =\n    LoadCheckoutRequestedAction |\n    LoadCheckoutSucceededAction |\n    LoadCheckoutFailedAction |\n    LoadConfigAction;\n\nexport type UpdateCheckoutAction =\n    UpdateCheckoutRequestedAction |\n    UpdateCheckoutSucceededAction |\n    UpdateCheckoutFailedAction;\n\nexport interface LoadCheckoutRequestedAction extends Action {\n    type: CheckoutActionType.LoadCheckoutRequested;\n}\n\nexport interface LoadCheckoutSucceededAction extends Action<Checkout> {\n    type: CheckoutActionType.LoadCheckoutSucceeded;\n}\n\nexport interface LoadCheckoutFailedAction extends Action<Error> {\n    type: CheckoutActionType.LoadCheckoutFailed;\n}\n\nexport interface UpdateCheckoutRequestedAction extends Action {\n    type: CheckoutActionType.UpdateCheckoutRequested;\n}\n\nexport interface UpdateCheckoutSucceededAction extends Action<Checkout> {\n    type: CheckoutActionType.UpdateCheckoutSucceeded;\n}\n\nexport interface UpdateCheckoutFailedAction extends Action<Error> {\n    type: CheckoutActionType.UpdateCheckoutFailed;\n}\n","import StandardError from './standard-error';\n\nexport enum MissingDataErrorType {\n    MissingBillingAddress,\n    MissingCart,\n    MissingCheckout,\n    MissingConsignments,\n    MissingCheckoutConfig,\n    MissingOrder,\n    MissingOrderConfig,\n    MissingOrderId,\n    MissingPayment,\n    MissingPaymentMethod,\n}\n\nexport default class MissingDataError extends StandardError {\n    constructor(\n        public subtype: MissingDataErrorType\n    ) {\n        super(getErrorMessage(subtype));\n\n        this.type = 'missing_data';\n    }\n}\n\nfunction getErrorMessage(type: MissingDataErrorType): string {\n    switch (type) {\n    case MissingDataErrorType.MissingBillingAddress:\n        return 'Unable to proceed because billing address data is unavailable.';\n\n    case MissingDataErrorType.MissingCart:\n        return 'Unable to proceed because cart data is unavailable.';\n\n    case MissingDataErrorType.MissingConsignments:\n        return 'Unable to proceed because consignments data is unavailable.';\n\n    case MissingDataErrorType.MissingCheckout:\n        return 'Unable to proceed because checkout data is unavailable.';\n\n    case MissingDataErrorType.MissingCheckoutConfig:\n    case MissingDataErrorType.MissingOrderConfig:\n        return 'Unable to proceed because configuration data is unavailable.';\n\n    case MissingDataErrorType.MissingOrder:\n        return 'Unable to proceed because order data is unavailable.';\n\n    case MissingDataErrorType.MissingOrderId:\n        return 'Unable to proceed because order ID is unavailable or not generated yet.';\n\n    case MissingDataErrorType.MissingPayment:\n        return 'Unable to proceed because payment data is unavailable.';\n\n    case MissingDataErrorType.MissingPaymentMethod:\n        return 'Unable to proceed because payment method data is unavailable or not properly configured.';\n\n    default:\n        return 'Unable to proceed because the required data is unavailable.';\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum CustomerStrategyActionType {\n    SignInFailed = 'CUSTOMER_STRATEGY_SIGN_IN_FAILED',\n    SignInRequested = 'CUSTOMER_STRATEGY_SIGN_IN_REQUESTED',\n    SignInSucceeded = 'CUSTOMER_STRATEGY_SIGN_IN_SUCCEEDED',\n    SignOutFailed = 'CUSTOMER_STRATEGY_SIGN_OUT_FAILED',\n    SignOutRequested = 'CUSTOMER_STRATEGY_SIGN_OUT_REQUESTED',\n    SignOutSucceeded = 'CUSTOMER_STRATEGY_SIGN_OUT_SUCCEEDED',\n    InitializeFailed = 'CUSTOMER_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'CUSTOMER_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'CUSTOMER_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'CUSTOMER_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'CUSTOMER_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'CUSTOMER_STRATEGY_DEINITIALIZE_SUCCEEDED',\n    WidgetInteractionStarted = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_STARTED',\n    WidgetInteractionFinished = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_FINISHED',\n    WidgetInteractionFailed = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_FAILED',\n}\n\nexport type CustomerStrategyAction =\n    CustomerStrategySignInAction |\n    CustomerStrategySignOutAction |\n    CustomerStrategyInitializeAction |\n    CustomerStrategyDeinitializeAction |\n    CustomerStrategyWidgetAction;\n\nexport type CustomerStrategySignInAction =\n    SignInRequestedAction |\n    SignInSucceededAction |\n    SignInFailedAction;\n\nexport type CustomerStrategySignOutAction =\n    SignOutRequestedAction |\n    SignOutSucceededAction |\n    SignOutFailedAction;\n\nexport type CustomerStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type CustomerStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport type CustomerStrategyWidgetAction =\n    WidgetInteractionStartedAction |\n    WidgetInteractionFinishedAction |\n    WidgetInteractionFailedAction;\n\nexport interface SignInRequestedAction extends Action {\n    type: CustomerStrategyActionType.SignInRequested;\n}\n\nexport interface SignInSucceededAction extends Action {\n    type: CustomerStrategyActionType.SignInSucceeded;\n}\n\nexport interface SignInFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.SignInFailed;\n}\n\nexport interface SignOutRequestedAction extends Action {\n    type: CustomerStrategyActionType.SignOutRequested;\n}\n\nexport interface SignOutSucceededAction extends Action {\n    type: CustomerStrategyActionType.SignOutSucceeded;\n}\n\nexport interface SignOutFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.SignOutFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: CustomerStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: CustomerStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: CustomerStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: CustomerStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.DeinitializeFailed;\n}\n\nexport interface WidgetInteractionStartedAction extends Action {\n    type: CustomerStrategyActionType.WidgetInteractionStarted;\n}\n\nexport interface WidgetInteractionFinishedAction extends Action {\n    type: CustomerStrategyActionType.WidgetInteractionFinished;\n}\n\nexport interface WidgetInteractionFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.WidgetInteractionFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadOrderPaymentsAction } from '../order';\n\nexport enum PaymentStrategyActionType {\n    ExecuteFailed = 'PAYMENT_STRATEGY_EXECUTE_FAILED',\n    ExecuteRequested = 'PAYMENT_STRATEGY_EXECUTE_REQUESTED',\n    ExecuteSucceeded = 'PAYMENT_STRATEGY_EXECUTE_SUCCEEDED',\n    FinalizeFailed = 'PAYMENT_STRATEGY_FINALIZE_FAILED',\n    FinalizeRequested = 'PAYMENT_STRATEGY_FINALIZE_REQUESTED',\n    FinalizeSucceeded = 'PAYMENT_STRATEGY_FINALIZE_SUCCEEDED',\n    InitializeFailed = 'PAYMENT_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'PAYMENT_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'PAYMENT_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'PAYMENT_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'PAYMENT_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'PAYMENT_STRATEGY_DEINITIALIZE_SUCCEEDED',\n    WidgetInteractionStarted = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_STARTED',\n    WidgetInteractionFinished = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_FINISHED',\n    WidgetInteractionFailed = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_FAILED',\n}\n\nexport type PaymentStrategyAction =\n    PaymentStrategyExecuteAction |\n    PaymentStrategyFinalizeAction |\n    PaymentStrategyInitializeAction |\n    PaymentStrategyDeinitializeAction |\n    PaymentStrategyWidgetAction;\n\nexport type PaymentStrategyExecuteAction =\n    ExecuteRequestedAction |\n    ExecuteSucceededAction |\n    ExecuteFailedAction |\n    LoadOrderPaymentsAction;\n\nexport type PaymentStrategyFinalizeAction =\n    FinalizeRequestedAction |\n    FinalizeSucceededAction |\n    FinalizeFailedAction |\n    LoadOrderPaymentsAction;\n\nexport type PaymentStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type PaymentStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport type PaymentStrategyWidgetAction =\n    WidgetInteractionStartedAction |\n    WidgetInteractionFinishedAction |\n    WidgetInteractionFailedAction;\n\nexport interface ExecuteRequestedAction extends Action {\n    type: PaymentStrategyActionType.ExecuteRequested;\n}\n\nexport interface ExecuteSucceededAction extends Action {\n    type: PaymentStrategyActionType.ExecuteSucceeded;\n}\n\nexport interface ExecuteFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.ExecuteFailed;\n}\n\nexport interface FinalizeRequestedAction extends Action {\n    type: PaymentStrategyActionType.FinalizeRequested;\n}\n\nexport interface FinalizeSucceededAction extends Action {\n    type: PaymentStrategyActionType.FinalizeSucceeded;\n}\n\nexport interface FinalizeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.FinalizeFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: PaymentStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: PaymentStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: PaymentStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: PaymentStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.DeinitializeFailed;\n}\n\nexport interface WidgetInteractionStartedAction extends Action {\n    type: PaymentStrategyActionType.WidgetInteractionStarted;\n}\n\nexport interface WidgetInteractionFinishedAction extends Action {\n    type: PaymentStrategyActionType.WidgetInteractionFinished;\n}\n\nexport interface WidgetInteractionFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.WidgetInteractionFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum ShippingStrategyActionType {\n    UpdateAddressFailed = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_FAILED',\n    UpdateAddressRequested = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_REQUESTED',\n    UpdateAddressSucceeded = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_SUCCEEDED',\n    SelectOptionFailed = 'SHIPPING_STRATEGY_SELECT_OPTION_FAILED',\n    SelectOptionRequested = 'SHIPPING_STRATEGY_SELECT_OPTION_REQUESTED',\n    SelectOptionSucceeded = 'SHIPPING_STRATEGY_SELECT_OPTION_SUCCEEDED',\n    InitializeFailed = 'SHIPPING_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'SHIPPING_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'SHIPPING_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'SHIPPING_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'SHIPPING_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'SHIPPING_STRATEGY_DEINITIALIZE_SUCCEEDED',\n}\n\nexport type ShippingStrategyAction =\n    ShippingStrategyUpdateAddressAction |\n    ShippingStrategySelectOptionAction |\n    ShippingStrategyInitializeAction |\n    ShippingStrategyDeinitializeAction;\n\nexport type ShippingStrategyUpdateAddressAction =\n    UpdateAddressRequestedAction |\n    UpdateAddressSucceededAction |\n    UpdateAddressFailedAction;\n\nexport type ShippingStrategySelectOptionAction =\n    SelectOptionRequestedAction |\n    SelectOptionSucceededAction |\n    SelectOptionFailedAction;\n\nexport type ShippingStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type ShippingStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport interface UpdateAddressRequestedAction extends Action {\n    type: ShippingStrategyActionType.UpdateAddressRequested;\n}\n\nexport interface UpdateAddressSucceededAction extends Action {\n    type: ShippingStrategyActionType.UpdateAddressSucceeded;\n}\n\nexport interface UpdateAddressFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.UpdateAddressFailed;\n}\n\nexport interface SelectOptionRequestedAction extends Action {\n    type: ShippingStrategyActionType.SelectOptionRequested;\n}\n\nexport interface SelectOptionSucceededAction extends Action {\n    type: ShippingStrategyActionType.SelectOptionSucceeded;\n}\n\nexport interface SelectOptionFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.SelectOptionFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: ShippingStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: ShippingStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: ShippingStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: ShippingStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.DeinitializeFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\nimport { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nexport enum CouponActionType {\n    ApplyCouponRequested = 'APPLY_COUPON_REQUESTED',\n    ApplyCouponSucceeded = 'APPLY_COUPON_SUCCEEDED',\n    ApplyCouponFailed = 'APPLY_COUPON_FAILED',\n\n    RemoveCouponRequested = 'REMOVE_COUPON_REQUESTED',\n    RemoveCouponSucceeded = 'REMOVE_COUPON_SUCCEEDED',\n    RemoveCouponFailed = 'REMOVE_COUPON_FAILED',\n}\n\nexport type CouponAction =\n    ApplyCouponAction |\n    RemoveCouponAction;\n\nexport type ApplyCouponAction =\n    ApplyCouponRequestedAction |\n    ApplyCouponSucceededAction |\n    ApplyCouponFailedAction;\n\nexport type RemoveCouponAction =\n    RemoveCouponRequestedAction |\n    RemoveCouponSucceededAction |\n    RemoveCouponFailedAction;\n\nexport interface ApplyCouponRequestedAction extends Action {\n    type: CouponActionType.ApplyCouponRequested;\n}\n\nexport interface ApplyCouponSucceededAction extends Action<Checkout> {\n    type: CouponActionType.ApplyCouponSucceeded;\n}\n\nexport interface ApplyCouponFailedAction extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: CouponActionType.ApplyCouponFailed;\n}\n\nexport interface RemoveCouponRequestedAction extends Action {\n    type: CouponActionType.RemoveCouponRequested;\n}\n\nexport interface RemoveCouponSucceededAction extends Action<Checkout> {\n    type: CouponActionType.RemoveCouponSucceeded;\n}\n\nexport interface RemoveCouponFailedAction extends Action<RequestError> {\n    type: CouponActionType.RemoveCouponFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { InternalOrderResponseData } from './internal-order-responses';\nimport Order from './order';\n\nexport enum OrderActionType {\n    LoadOrderRequested = 'LOAD_ORDER_REQUESTED',\n    LoadOrderSucceeded = 'LOAD_ORDER_SUCCEEDED',\n    LoadOrderFailed = 'LOAD_ORDER_FAILED',\n\n    LoadOrderPaymentsRequested = 'LOAD_ORDER_PAYMENTS_REQUESTED',\n    LoadOrderPaymentsSucceeded = 'LOAD_ORDER_PAYMENTS_SUCCEEDED',\n    LoadOrderPaymentsFailed = 'LOAD_ORDER_PAYMENTS_FAILED',\n\n    SubmitOrderRequested = 'SUBMIT_ORDER_REQUESTED',\n    SubmitOrderSucceeded = 'SUBMIT_ORDER_SUCCEEDED',\n    SubmitOrderFailed = 'SUBMIT_ORDER_FAILED',\n\n    FinalizeOrderRequested = 'FINALIZE_ORDER_REQUESTED',\n    FinalizeOrderSucceeded = 'FINALIZE_ORDER_SUCCEEDED',\n    FinalizeOrderFailed = 'FINALIZE_ORDER_FAILED',\n}\n\nexport type OrderAction = LoadOrderAction |\n    LoadOrderPaymentsAction |\n    SubmitOrderAction |\n    FinalizeOrderAction;\n\nexport type LoadOrderPaymentsAction = LoadOrderPaymentsRequestedAction |\n    LoadOrderPaymentsSucceededAction |\n    LoadOrderPaymentsFailedAction;\n\nexport type LoadOrderAction =\n    LoadOrderRequestedAction |\n    LoadOrderSucceededAction |\n    LoadOrderFailedAction;\n\nexport type SubmitOrderAction =\n    SubmitOrderRequestedAction |\n    SubmitOrderSucceededAction |\n    SubmitOrderFailedAction |\n    LoadOrderAction;\n\nexport type FinalizeOrderAction =\n    FinalizeOrderRequestedAction |\n    FinalizeOrderSucceededAction |\n    FinalizeOrderFailedAction |\n    LoadOrderAction;\n\nexport interface LoadOrderRequestedAction extends Action {\n    type: OrderActionType.LoadOrderRequested;\n}\n\nexport interface LoadOrderSucceededAction extends Action<Order> {\n    type: OrderActionType.LoadOrderSucceeded;\n}\n\nexport interface LoadOrderFailedAction extends Action<Error> {\n    type: OrderActionType.LoadOrderFailed;\n}\n\nexport interface LoadOrderPaymentsRequestedAction extends Action {\n    type: OrderActionType.LoadOrderPaymentsRequested;\n}\n\nexport interface LoadOrderPaymentsSucceededAction extends Action<Order> {\n    type: OrderActionType.LoadOrderPaymentsSucceeded;\n}\n\nexport interface LoadOrderPaymentsFailedAction extends Action<Error> {\n    type: OrderActionType.LoadOrderPaymentsFailed;\n}\n\nexport interface SubmitOrderRequestedAction extends Action {\n    type: OrderActionType.SubmitOrderRequested;\n}\n\nexport interface SubmitOrderSucceededAction extends Action<InternalOrderResponseData> {\n    type: OrderActionType.SubmitOrderSucceeded;\n}\n\nexport interface SubmitOrderFailedAction extends Action<Error> {\n    type: OrderActionType.SubmitOrderFailed;\n}\n\nexport interface FinalizeOrderRequestedAction extends Action {\n    type: OrderActionType.FinalizeOrderRequested;\n}\n\nexport interface FinalizeOrderSucceededAction extends Action<InternalOrderResponseData> {\n    type: OrderActionType.FinalizeOrderSucceeded;\n}\n\nexport interface FinalizeOrderFailedAction extends Action<Error> {\n    type: OrderActionType.FinalizeOrderFailed;\n}\n","import { setPrototypeOf } from '../../utility';\n\nimport CustomError from './custom-error';\n\nexport default class StandardError extends Error implements CustomError {\n    type = 'standard';\n\n    constructor(message?: string) {\n        super(message || 'An unexpected error has occurred.');\n\n        setPrototypeOf(this, new.target.prototype);\n\n        if (typeof Error.captureStackTrace === 'function') {\n            Error.captureStackTrace(this, new.target);\n        } else {\n            this.stack = (new Error(this.message)).stack;\n        }\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nexport enum BillingAddressActionType {\n    UpdateBillingAddressRequested = 'UPDATE_BILLING_ADDRESS_REQUESTED',\n    UpdateBillingAddressSucceeded = 'UPDATE_BILLING_ADDRESS_SUCCEEDED',\n    UpdateBillingAddressFailed = 'UPDATE_BILLING_ADDRESS_FAILED',\n\n    ContinueAsGuestRequested = 'CONTINUE_AS_GUEST_REQUESTED',\n    ContinueAsGuestSucceeded = 'CONTINUE_AS_GUEST_SUCCEEDED',\n    ContinueAsGuestFailed = 'CONTINUE_AS_GUEST_FAILED',\n}\n\nexport type BillingAddressAction =\n    ContinueAsGuestAction |\n    UpdateBillingAddressAction;\n\nexport type UpdateBillingAddressAction =\n    UpdateBillingAddressRequested |\n    UpdateBillingAddressSucceeded |\n    UpdateBillingAddressFailed;\n\nexport type ContinueAsGuestAction =\n    ContinueAsGuestRequested |\n    ContinueAsGuestSucceeded |\n    ContinueAsGuestFailed;\n\nexport interface UpdateBillingAddressRequested extends Action {\n    type: BillingAddressActionType.UpdateBillingAddressRequested;\n}\n\nexport interface UpdateBillingAddressSucceeded extends Action<Checkout> {\n    type: BillingAddressActionType.UpdateBillingAddressSucceeded;\n}\n\nexport interface UpdateBillingAddressFailed extends Action<Error> {\n    type: BillingAddressActionType.UpdateBillingAddressFailed;\n}\n\nexport interface ContinueAsGuestRequested extends Action {\n    type: BillingAddressActionType.ContinueAsGuestRequested;\n}\n\nexport interface ContinueAsGuestSucceeded extends Action<Checkout> {\n    type: BillingAddressActionType.ContinueAsGuestSucceeded;\n}\n\nexport interface ContinueAsGuestFailed extends Action<Error> {\n    type: BillingAddressActionType.ContinueAsGuestFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\nimport { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nexport enum GiftCertificateActionType {\n    ApplyGiftCertificateRequested = 'APPLY_GIFT_CERTIFICATE_REQUESTED',\n    ApplyGiftCertificateSucceeded = 'APPLY_GIFT_CERTIFICATE_SUCCEEDED',\n    ApplyGiftCertificateFailed = 'APPLY_GIFT_CERTIFICATE_FAILED',\n\n    RemoveGiftCertificateRequested = 'REMOVE_GIFT_CERTIFICATE_REQUESTED',\n    RemoveGiftCertificateSucceeded = 'REMOVE_GIFT_CERTIFICATE_SUCCEEDED',\n    RemoveGiftCertificateFailed = 'REMOVE_GIFT_CERTIFICATE_FAILED',\n}\n\nexport type GiftCertificateAction =\n    ApplyGiftCertificateAction |\n    RemoveGiftCertificateAction;\n\nexport type ApplyGiftCertificateAction =\n    ApplyGiftCertificateRequestedAction |\n    ApplyGiftCertificateSucceededAction |\n    ApplyGiftCertificateFailedAction;\n\nexport type RemoveGiftCertificateAction =\n    RemoveGiftCertificateRequestedAction |\n    RemoveGiftCertificateSucceededAction |\n    RemoveGiftCertificateFailedAction;\n\nexport interface ApplyGiftCertificateRequestedAction extends Action {\n    type: GiftCertificateActionType.ApplyGiftCertificateRequested;\n}\n\nexport interface ApplyGiftCertificateSucceededAction extends Action<Checkout> {\n    type: GiftCertificateActionType.ApplyGiftCertificateSucceeded;\n}\n\nexport interface ApplyGiftCertificateFailedAction extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: GiftCertificateActionType.ApplyGiftCertificateFailed;\n}\n\nexport interface RemoveGiftCertificateRequestedAction extends Action {\n    type: GiftCertificateActionType.RemoveGiftCertificateRequested;\n}\n\nexport interface RemoveGiftCertificateSucceededAction extends Action<Checkout> {\n    type: GiftCertificateActionType.RemoveGiftCertificateSucceeded;\n}\n\nexport interface RemoveGiftCertificateFailedAction extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: GiftCertificateActionType.RemoveGiftCertificateFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport PaymentMethod from './payment-method';\nimport PaymentMethodMeta from './payment-method-meta';\n\nexport enum PaymentMethodActionType {\n    LoadPaymentMethodRequested = 'LOAD_PAYMENT_METHOD_REQUESTED',\n    LoadPaymentMethodSucceeded = 'LOAD_PAYMENT_METHOD_SUCCEEDED',\n    LoadPaymentMethodFailed = 'LOAD_PAYMENT_METHOD_FAILED',\n\n    LoadPaymentMethodsRequested = 'LOAD_PAYMENT_METHODS_REQUESTED',\n    LoadPaymentMethodsSucceeded = 'LOAD_PAYMENT_METHODS_SUCCEEDED',\n    LoadPaymentMethodsFailed = 'LOAD_PAYMENT_METHODS_FAILED',\n}\n\nexport type PaymentMethodAction = LoadPaymentMethodAction | LoadPaymentMethodsAction;\n\nexport type LoadPaymentMethodAction =\n    LoadPaymentMethodRequestedAction |\n    LoadPaymentMethodSucceededAction |\n    LoadPaymentMethodFailedAction;\n\nexport type LoadPaymentMethodsAction =\n    LoadPaymentMethodsRequestedAction |\n    LoadPaymentMethodsSucceededAction |\n    LoadPaymentMethodsFailedAction;\n\nexport interface LoadPaymentMethodRequestedAction extends Action {\n    type: PaymentMethodActionType.LoadPaymentMethodRequested;\n}\n\nexport interface LoadPaymentMethodSucceededAction extends Action<PaymentMethod> {\n    type: PaymentMethodActionType.LoadPaymentMethodSucceeded;\n}\n\nexport interface LoadPaymentMethodFailedAction extends Action<Error> {\n    type: PaymentMethodActionType.LoadPaymentMethodFailed;\n}\n\nexport interface LoadPaymentMethodsRequestedAction extends Action {\n    type: PaymentMethodActionType.LoadPaymentMethodsRequested;\n}\n\nexport interface LoadPaymentMethodsSucceededAction extends Action<PaymentMethod[], PaymentMethodMeta> {\n    type: PaymentMethodActionType.LoadPaymentMethodsSucceeded;\n}\n\nexport interface LoadPaymentMethodsFailedAction extends Action<Error> {\n    type: PaymentMethodActionType.LoadPaymentMethodsFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadPaymentMethodAction } from '../payment';\n\nimport { CheckoutButtonMethodType } from './strategies';\n\nexport enum CheckoutButtonActionType {\n    InitializeButtonFailed = 'INITIALIZE_BUTTON_FAILED',\n    InitializeButtonRequested = 'INITIALIZE_BUTTON_REQUESTED',\n    InitializeButtonSucceeded = 'INITIALIZE_BUTTON_SUCCEEDED',\n\n    DeinitializeButtonFailed = 'DEINITIALIZE_BUTTON_FAILED',\n    DeinitializeButtonRequested = 'DEINITIALIZE_BUTTON_REQUESTED',\n    DeinitializeButtonSucceeded = 'DEINITIALIZE_BUTTON_SUCCEEDED',\n}\n\nexport type CheckoutButtonAction = InitializeButtonAction | DeinitializeButtonAction;\n\nexport type InitializeButtonAction =\n    InitializeButtonRequestedAction |\n    InitializeButtonSucceededAction |\n    InitializeButtonFailedAction |\n    LoadPaymentMethodAction;\n\nexport type DeinitializeButtonAction =\n    DeinitializeButtonRequestedAction |\n    DeinitializeButtonSucceededAction |\n    DeinitializeButtonFailedAction;\n\nexport interface CheckoutButtonActionMeta {\n    methodId: CheckoutButtonMethodType;\n}\n\nexport interface InitializeButtonActionMeta extends CheckoutButtonActionMeta {\n    containerId: string;\n}\n\nexport interface InitializeButtonRequestedAction extends Action<undefined, InitializeButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonRequested;\n}\n\nexport interface InitializeButtonSucceededAction extends Action<undefined, InitializeButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonSucceeded;\n}\n\nexport interface InitializeButtonFailedAction extends Action<Error, InitializeButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonFailed;\n}\n\nexport interface DeinitializeButtonRequestedAction extends Action<undefined, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonRequested;\n}\n\nexport interface DeinitializeButtonSucceededAction extends Action<undefined, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonSucceeded;\n}\n\nexport interface DeinitializeButtonFailedAction extends Action<Error, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { InstrumentsResponseBody } from './instrument-response-body';\n\nexport enum InstrumentActionType {\n    LoadInstrumentsRequested = 'LOAD_INSTRUMENTS_REQUESTED',\n    LoadInstrumentsSucceeded = 'LOAD_INSTRUMENTS_SUCCEEDED',\n    LoadInstrumentsFailed = 'LOAD_INSTRUMENTS_FAILED',\n\n    DeleteInstrumentRequested = 'DELETE_INSTRUMENT_REQUESTED',\n    DeleteInstrumentSucceeded = 'DELETE_INSTRUMENT_SUCCEEDED',\n    DeleteInstrumentFailed = 'DELETE_INSTRUMENT_FAILED',\n}\n\nexport type InstrumentAction =\n    LoadInstrumentsAction |\n    DeleteInstrumentAction;\n\nexport type LoadInstrumentsAction =\n    LoadInstrumentsRequestedAction |\n    LoadInstrumentsSucceededAction |\n    LoadInstrumentsFailedAction;\n\nexport type DeleteInstrumentAction =\n    DeleteInstrumentRequestedAction |\n    DeleteInstrumentSucceededAction |\n    DeleteInstrumentFailedAction;\n\nexport interface LoadInstrumentsRequestedAction extends Action {\n    type: InstrumentActionType.LoadInstrumentsRequested;\n}\n\nexport interface LoadInstrumentsSucceededAction extends Action<InstrumentsResponseBody> {\n    type: InstrumentActionType.LoadInstrumentsSucceeded;\n}\n\nexport interface LoadInstrumentsFailedAction extends Action<Error> {\n    type: InstrumentActionType.LoadInstrumentsFailed;\n}\n\nexport interface DeleteInstrumentRequestedAction extends Action {\n    type: InstrumentActionType.DeleteInstrumentRequested;\n}\n\nexport interface DeleteInstrumentSucceededAction extends Action<InstrumentsResponseBody> {\n    type: InstrumentActionType.DeleteInstrumentSucceeded;\n}\n\nexport interface DeleteInstrumentFailedAction extends Action<Error> {\n    type: InstrumentActionType.DeleteInstrumentFailed;\n}\n","module.exports = require(\"rxjs/operators\");","import EmbeddedCheckoutError from './embedded-checkout-error';\nimport EmbeddedContentOptions from './iframe-content/embedded-content-options';\n\nexport enum EmbeddedCheckoutEventType {\n    CheckoutComplete = 'CHECKOUT_COMPLETE',\n    CheckoutError = 'CHECKOUT_ERROR',\n    CheckoutLoaded = 'CHECKOUT_LOADED',\n    FrameError = 'FRAME_ERROR',\n    FrameLoaded = 'FRAME_LOADED',\n    SignedOut = 'SIGNED_OUT',\n}\n\nexport interface EmbeddedCheckoutEventMap {\n    [EmbeddedCheckoutEventType.CheckoutComplete]: EmbeddedCheckoutCompleteEvent;\n    [EmbeddedCheckoutEventType.CheckoutError]: EmbeddedCheckoutErrorEvent;\n    [EmbeddedCheckoutEventType.CheckoutLoaded]: EmbeddedCheckoutLoadedEvent;\n    [EmbeddedCheckoutEventType.FrameError]: EmbeddedCheckoutFrameErrorEvent;\n    [EmbeddedCheckoutEventType.FrameLoaded]: EmbeddedCheckoutFrameLoadedEvent;\n    [EmbeddedCheckoutEventType.SignedOut]: EmbeddedCheckoutSignedOutEvent;\n}\n\nexport type EmbeddedCheckoutEvent = (\n    EmbeddedCheckoutCompleteEvent |\n    EmbeddedCheckoutErrorEvent |\n    EmbeddedCheckoutFrameErrorEvent |\n    EmbeddedCheckoutFrameLoadedEvent |\n    EmbeddedCheckoutLoadedEvent |\n    EmbeddedCheckoutSignedOutEvent\n);\n\nexport interface EmbeddedCheckoutCompleteEvent {\n    type: EmbeddedCheckoutEventType.CheckoutComplete;\n}\n\nexport interface EmbeddedCheckoutErrorEvent {\n    type: EmbeddedCheckoutEventType.CheckoutError;\n    payload: EmbeddedCheckoutError;\n}\n\nexport interface EmbeddedCheckoutLoadedEvent {\n    type: EmbeddedCheckoutEventType.CheckoutLoaded;\n}\n\nexport interface EmbeddedCheckoutFrameErrorEvent {\n    type: EmbeddedCheckoutEventType.FrameError;\n    payload: EmbeddedCheckoutError;\n}\n\nexport interface EmbeddedCheckoutFrameLoadedEvent {\n    type: EmbeddedCheckoutEventType.FrameLoaded;\n    payload?: EmbeddedContentOptions;\n}\n\nexport interface EmbeddedCheckoutSignedOutEvent {\n    type: EmbeddedCheckoutEventType.SignedOut;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { AmazonPayRemoteCheckout } from './methods';\n\nexport enum RemoteCheckoutActionType {\n    InitializeRemoteBillingRequested = 'INITIALIZE_REMOTE_BILLING_REQUESTED',\n    InitializeRemoteBillingSucceeded = 'INITIALIZE_REMOTE_BILLING_SUCCEEDED',\n    InitializeRemoteBillingFailed = 'INITIALIZE_REMOTE_BILLING_FAILED',\n\n    InitializeRemoteShippingRequested = 'INITIALIZE_REMOTE_SHIPPING_REQUESTED',\n    InitializeRemoteShippingSucceeded = 'INITIALIZE_REMOTE_SHIPPING_SUCCEEDED',\n    InitializeRemoteShippingFailed = 'INITIALIZE_REMOTE_SHIPPING_FAILED',\n\n    InitializeRemotePaymentRequested = 'INITIALIZE_REMOTE_PAYMENT_REQUESTED',\n    InitializeRemotePaymentSucceeded = 'INITIALIZE_REMOTE_PAYMENT_SUCCEEDED',\n    InitializeRemotePaymentFailed = 'INITIALIZE_REMOTE_PAYMENT_FAILED',\n\n    LoadRemoteSettingsRequested = 'LOAD_REMOTE_SETTINGS_REQUESTED',\n    LoadRemoteSettingsSucceeded = 'LOAD_REMOTE_SETTINGS_SUCCEEDED',\n    LoadRemoteSettingsFailed = 'LOAD_REMOTE_SETTINGS_FAILED',\n\n    SignOutRemoteCustomerRequested = 'SIGN_OUT_REMOTE_CUSTOMER_REQUESTED',\n    SignOutRemoteCustomerSucceeded = 'SIGN_OUT_REMOTE_CUSTOMER_SUCCEEDED',\n    SignOutRemoteCustomerFailed = 'SIGN_OUT_REMOTE_CUSTOMER_FAILED',\n\n    UpdateRemoteCheckout = 'UPDATE_REMOTE_CHECKOUT',\n}\n\nexport type RemoteCheckoutAction = InitializeRemoteBillingAction |\n    InitializeRemoteShippingAction |\n    InitializeRemotePaymentAction |\n    SignOutRemoteCustomerAction |\n    LoadRemoteSettingsAction |\n    UpdateRemoteCheckoutAction;\n\nexport type InitializeRemoteBillingAction = InitializeRemoteBillingSucceededAction |\n    InitializeRemoteBillingFailedAction |\n    InitializeRemoteBillingRequestedAction;\n\nexport interface InitializeRemoteBillingSucceededAction extends Action<AmazonPayRemoteCheckout> {\n    type: RemoteCheckoutActionType.InitializeRemoteBillingSucceeded;\n}\n\nexport interface InitializeRemoteBillingFailedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteBillingFailed;\n}\n\nexport interface InitializeRemoteBillingRequestedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteBillingRequested;\n}\n\nexport type InitializeRemoteShippingAction = InitializeRemoteShippingSucceededAction |\n    InitializeRemoteShippingFailedAction |\n    InitializeRemoteShippingRequestedAction;\n\nexport interface InitializeRemoteShippingSucceededAction extends Action<AmazonPayRemoteCheckout> {\n    type: RemoteCheckoutActionType.InitializeRemoteShippingSucceeded;\n}\n\nexport interface InitializeRemoteShippingFailedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteShippingFailed;\n}\n\nexport interface InitializeRemoteShippingRequestedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteShippingRequested;\n}\n\nexport type InitializeRemotePaymentAction = InitializeRemotePaymentSucceededAction |\n    InitializeRemotePaymentFailedAction |\n    InitializeRemotePaymentRequestedAction;\n\nexport interface InitializeRemotePaymentSucceededAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemotePaymentSucceeded;\n}\n\nexport interface InitializeRemotePaymentFailedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemotePaymentFailed;\n}\n\nexport interface InitializeRemotePaymentRequestedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemotePaymentRequested;\n}\n\nexport type SignOutRemoteCustomerAction = SignOutRemoteCustomerSucceededAction |\n    SignOutRemoteCustomerFailedAction |\n    SignOutRemoteCustomerRequestedAction;\n\nexport interface SignOutRemoteCustomerSucceededAction extends Action {\n    type: RemoteCheckoutActionType.SignOutRemoteCustomerSucceeded;\n}\n\nexport interface SignOutRemoteCustomerFailedAction extends Action {\n    type: RemoteCheckoutActionType.SignOutRemoteCustomerFailed;\n}\n\nexport interface SignOutRemoteCustomerRequestedAction extends Action {\n    type: RemoteCheckoutActionType.SignOutRemoteCustomerRequested;\n}\n\nexport type LoadRemoteSettingsAction = LoadRemoteSettingsSucceededAction |\n    LoadRemoteSettingsRequestedAction |\n    LoadRemoteSettingsFailedAction;\n\nexport interface LoadRemoteSettingsSucceededAction extends Action {\n    type: RemoteCheckoutActionType.LoadRemoteSettingsSucceeded;\n}\n\nexport interface LoadRemoteSettingsRequestedAction extends Action {\n    type: RemoteCheckoutActionType.LoadRemoteSettingsRequested;\n}\n\nexport interface LoadRemoteSettingsFailedAction extends Action {\n    type: RemoteCheckoutActionType.LoadRemoteSettingsFailed;\n}\n\nexport interface UpdateRemoteCheckoutAction extends Action {\n    type: RemoteCheckoutActionType.UpdateRemoteCheckout;\n}\n","import { ClearErrorAction, ErrorActionType } from './error-actions';\n\nexport default class ErrorActionCreator {\n    clearError(error: Error): ClearErrorAction {\n        return {\n            type: ErrorActionType.ClearError,\n            payload: error,\n        };\n    }\n}\n","import { createAction, createErrorAction, Action } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport Country from './country';\nimport { CountryActionType } from './country-actions';\nimport CountryRequestSender from './country-request-sender';\n\nexport default class CountryActionCreator {\n    constructor(\n        private _countryRequestSender: CountryRequestSender\n    ) {}\n\n    loadCountries(options?: RequestOptions): Observable<Action<Country[]>> {\n        return Observable.create((observer: Observer<Action<Country[]>>) => {\n            observer.next(createAction(CountryActionType.LoadCountriesRequested));\n\n            this._countryRequestSender.loadCountries(options)\n                .then(response => {\n                    observer.next(createAction(CountryActionType.LoadCountriesSucceeded, response.body.data));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CountryActionType.LoadCountriesFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport { CountryResponseBody } from './country-responses';\n\nexport default class CountryRequestSender {\n    constructor(\n        private _requestSender: RequestSender,\n        private _config: { locale?: string }\n    ) {}\n\n    loadCountries({ timeout }: RequestOptions = {}): Promise<Response<CountryResponseBody>> {\n        const url = '/internalapi/v1/store/countries';\n        const headers = {\n            'Accept-Language': this._config.locale,\n        };\n\n        return this._requestSender.get(url, { headers, timeout });\n    }\n}\n","enum PaymentStrategyType {\n    AFTERPAY = 'afterpay',\n    AMAZON = 'amazon',\n    CREDIT_CARD = 'creditcard',\n    KLARNA = 'klarna',\n    LEGACY = 'legacy',\n    OFFLINE = 'offline',\n    OFFSITE = 'offsite',\n    PAYPAL = 'paypal',\n    PAYPAL_EXPRESS = 'paypalexpress',\n    PAYPAL_EXPRESS_CREDIT = 'paypalexpresscredit',\n    SAGE_PAY = 'sagepay',\n    SQUARE = 'squarev2',\n    NO_PAYMENT_DATA_REQUIRED = 'nopaymentdatarequired',\n    BRAINTREE = 'braintree',\n    BRAINTREE_PAYPAL = 'braintreepaypal',\n    BRAINTREE_PAYPAL_CREDIT = 'braintreepaypalcredit',\n    BRAINTREE_VISA_CHECKOUT = 'braintreevisacheckout',\n    BRAINTREE_GOOGLE_PAY = 'googlepaybraintree',\n    CHASE_PAY = 'chasepay',\n    WE_PAY = 'wepay',\n    MASTERPASS = 'masterpass',\n    STRIPE_GOOGLE_PAY = 'googlepaystripe',\n}\n\nexport default PaymentStrategyType;\n","import { StandardError } from '../../common/error/errors';\n\nexport default class OrderFinalizationNotRequiredError extends StandardError {\n    constructor() {\n        super('The current order does not need to be finalized at this stage.');\n\n        this.type = 'order_finalization_not_required';\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, empty, of, Observable, Observer } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { InternalCheckoutSelectors, ReadableCheckoutStore } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { LoadOrderPaymentsAction, OrderActionCreator, OrderRequestBody } from '../order';\nimport { OrderFinalizationNotRequiredError } from '../order/errors';\n\nimport Payment from './payment';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from './payment-request-options';\nimport {\n    PaymentStrategyActionType,\n    PaymentStrategyDeinitializeAction,\n    PaymentStrategyExecuteAction,\n    PaymentStrategyFinalizeAction,\n    PaymentStrategyInitializeAction,\n    PaymentStrategyWidgetAction,\n} from './payment-strategy-actions';\nimport PaymentStrategyRegistry from './payment-strategy-registry';\nimport PaymentStrategyType from './payment-strategy-type';\nimport { PaymentStrategy } from './strategies';\n\nexport default class PaymentStrategyActionCreator {\n    constructor(\n        private _strategyRegistry: PaymentStrategyRegistry,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: RequestOptions): ThunkAction<PaymentStrategyExecuteAction, InternalCheckoutSelectors> {\n        return store => new Observable((observer: Observer<PaymentStrategyExecuteAction>) => {\n            const state = store.getState();\n            const { payment = {} as Payment, useStoreCredit } = payload;\n            const meta = { methodId: payment.methodId };\n\n            let strategy: PaymentStrategy;\n\n            if (state.payment.isPaymentDataRequired(useStoreCredit)) {\n                const method = state.paymentMethods.getPaymentMethod(payment.methodId, payment.gatewayId);\n\n                if (!method) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                strategy = this._strategyRegistry.getByMethod(method);\n            } else {\n                strategy = this._strategyRegistry.get(PaymentStrategyType.NO_PAYMENT_DATA_REQUIRED);\n            }\n\n            observer.next(createAction(PaymentStrategyActionType.ExecuteRequested, undefined, meta));\n\n            strategy\n                .execute(payload, { ...options, methodId: payment.methodId, gatewayId: payment.gatewayId })\n                .then(() => {\n                    observer.next(createAction(PaymentStrategyActionType.ExecuteSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(PaymentStrategyActionType.ExecuteFailed, error, meta));\n                });\n        });\n    }\n\n    finalize(options?: RequestOptions): ThunkAction<PaymentStrategyFinalizeAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(PaymentStrategyActionType.FinalizeRequested)),\n            this._loadOrderPaymentsIfNeeded(store, options),\n            defer(() => {\n                const state = store.getState();\n                const payment = state.payment.getPaymentId();\n\n                if (!payment) {\n                    throw new OrderFinalizationNotRequiredError();\n                }\n\n                const method = state.paymentMethods.getPaymentMethod(payment.providerId, payment.gatewayId);\n\n                if (!method) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                return this._strategyRegistry.getByMethod(method)\n                    .finalize({ ...options, methodId: method.id, gatewayId: method.gateway })\n                    .then(() => createAction(PaymentStrategyActionType.FinalizeSucceeded, undefined, { methodId: payment.providerId }));\n            })\n        ).pipe(\n            catchError(error => {\n                const state = store.getState();\n                const payment = state.payment.getPaymentId();\n\n                return throwErrorAction(PaymentStrategyActionType.FinalizeFailed, error, { methodId: payment && payment.providerId });\n            })\n        );\n    }\n\n    initialize(options: PaymentInitializeOptions): ThunkAction<PaymentStrategyInitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<PaymentStrategyInitializeAction>) => {\n            const state = store.getState();\n            const { methodId, gatewayId } = options;\n            const method = state.paymentMethods.getPaymentMethod(methodId, gatewayId);\n\n            if (!method) {\n                throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n            }\n\n            if (methodId && state.paymentStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(PaymentStrategyActionType.InitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.getByMethod(method)\n                .initialize({ ...options, methodId, gatewayId })\n                .then(() => {\n                    observer.next(createAction(PaymentStrategyActionType.InitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(PaymentStrategyActionType.InitializeFailed, error, { methodId }));\n                });\n        });\n    }\n\n    deinitialize(options: PaymentRequestOptions): ThunkAction<PaymentStrategyDeinitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<PaymentStrategyDeinitializeAction>) => {\n            const state = store.getState();\n            const { methodId, gatewayId } = options;\n            const method = state.paymentMethods.getPaymentMethod(methodId, gatewayId);\n\n            if (!method) {\n                throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n            }\n\n            if (methodId && !state.paymentStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(PaymentStrategyActionType.DeinitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.getByMethod(method)\n                .deinitialize({ ...options, methodId, gatewayId })\n                .then(() => {\n                    observer.next(createAction(PaymentStrategyActionType.DeinitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(PaymentStrategyActionType.DeinitializeFailed, error, { methodId }));\n                });\n        });\n    }\n\n    widgetInteraction(method: () => Promise<any>, options?: PaymentRequestOptions): ThunkAction<PaymentStrategyWidgetAction> {\n        return store => Observable.create((observer: Observer<PaymentStrategyWidgetAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(PaymentStrategyActionType.WidgetInteractionStarted, undefined, meta));\n\n            method().then(() => {\n                observer.next(createAction(PaymentStrategyActionType.WidgetInteractionFinished, undefined, meta));\n                observer.complete();\n            })\n            .catch(error => {\n                observer.error(createErrorAction(PaymentStrategyActionType.WidgetInteractionFailed, error, meta));\n            });\n        });\n    }\n\n    private _loadOrderPaymentsIfNeeded(store: ReadableCheckoutStore, options?: RequestOptions): Observable<LoadOrderPaymentsAction> {\n        const state = store.getState();\n        const checkout = state.checkout.getCheckout();\n\n        if (checkout && checkout.orderId) {\n            return this._orderActionCreator.loadOrderPayments(checkout.orderId, options);\n        }\n\n        return empty();\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class CartChangedError extends StandardError {\n    constructor() {\n        super('An update to your shopping cart has been detected and your available shipping costs have been updated.');\n\n        this.type = 'cart_changed';\n    }\n}\n","import { isEqual, map } from 'lodash';\n\nimport { CartComparator } from '../cart';\nimport { CartChangedError } from '../cart/errors';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { Coupon, GiftCertificate } from '../coupon';\n\nimport Checkout from './checkout';\nimport CheckoutRequestSender from './checkout-request-sender';\n\nexport default class CheckoutValidator {\n    constructor(\n        private _checkoutRequestSender: CheckoutRequestSender\n    ) {}\n\n    validate(checkout?: Checkout, options?: RequestOptions): Promise<void> {\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        return this._checkoutRequestSender.loadCheckout(checkout.id, options)\n            .then(response => {\n                const comparator = new CartComparator();\n\n                if (checkout.grandTotal === response.body.grandTotal\n                    && this._compareCoupons(checkout.coupons, response.body.coupons)\n                    && this._compareGiftCertificates(checkout.giftCertificates, response.body.giftCertificates)\n                    && comparator.isEqual(checkout.cart, response.body.cart)\n                ) {\n                    return;\n                }\n\n                throw new CartChangedError();\n            });\n    }\n\n    private _compareCoupons(couponsA: Coupon[], couponsB: Coupon[]): boolean {\n        return isEqual(map(couponsA, 'code'), map(couponsB, 'code'));\n    }\n\n    private _compareGiftCertificates(giftCertificatesA: GiftCertificate[], giftCertificatesB: GiftCertificate[]): boolean {\n        return isEqual(map(giftCertificatesA, 'code'), map(giftCertificatesB, 'code'));\n    }\n}\n","import { PaymentInstrument, VaultedInstrument } from './payment';\n\nexport default function isVaultedInstrument(instrument: PaymentInstrument): instrument is VaultedInstrument {\n    return Boolean((instrument as VaultedInstrument).instrumentId);\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { pick } from 'lodash';\nimport { concat, from, of, Observable, Observer } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\n\nimport { mapToInternalAddress } from '../address';\nimport { mapToInternalCart } from '../cart';\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { InvalidArgumentError, StandardError } from '../common/error/errors';\nimport { mapToInternalCustomer } from '../customer';\nimport { mapToInternalOrder, OrderActionCreator } from '../order';\nimport { mapToInternalShippingOption } from '../shipping';\n\nimport isVaultedInstrument from './is-vaulted-instrument';\nimport Payment from './payment';\nimport { InitializeOffsitePaymentAction, PaymentActionType, SubmitPaymentAction } from './payment-actions';\nimport PaymentMethod from './payment-method';\nimport PaymentMethodSelector from './payment-method-selector';\nimport PaymentRequestBody from './payment-request-body';\nimport PaymentRequestSender from './payment-request-sender';\n\nexport default class PaymentActionCreator {\n    constructor(\n        private _paymentRequestSender: PaymentRequestSender,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    submitPayment(payment: Payment): ThunkAction<SubmitPaymentAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(PaymentActionType.SubmitPaymentRequested)),\n            from(this._paymentRequestSender.submitPayment(\n                this._getPaymentRequestBody(payment, store.getState())\n            ))\n                .pipe(\n                    switchMap(({ body }) => concat(\n                        this._orderActionCreator.loadCurrentOrder()(store),\n                        of(createAction(PaymentActionType.SubmitPaymentSucceeded, body))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(PaymentActionType.SubmitPaymentFailed, error))\n        );\n    }\n\n    initializeOffsitePayment(payment: Payment): ThunkAction<InitializeOffsitePaymentAction, InternalCheckoutSelectors> {\n        return store =>\n            Observable.create((observer: Observer<InitializeOffsitePaymentAction>) => {\n                observer.next(createAction(PaymentActionType.InitializeOffsitePaymentRequested));\n\n                return this._paymentRequestSender.initializeOffsitePayment(\n                    this._getPaymentRequestBody(payment, store.getState())\n                )\n                    .then(() => {\n                        observer.next(createAction(PaymentActionType.InitializeOffsitePaymentSucceeded));\n                        observer.complete();\n                    })\n                    .catch(() => {\n                        observer.error(createErrorAction(PaymentActionType.InitializeOffsitePaymentFailed));\n                    });\n            });\n    }\n\n    private _getPaymentRequestBody(payment: Payment, state: InternalCheckoutSelectors): PaymentRequestBody {\n        if (!payment.paymentData) {\n            throw new InvalidArgumentError('Unable to construct payment request because `payment.paymentData` is not provided.');\n        }\n\n        const billingAddress = state.billingAddress.getBillingAddress();\n        const checkout = state.checkout.getCheckout();\n        const customer = state.customer.getCustomer();\n        const order = state.order.getOrder();\n        const paymentMethod = this._getPaymentMethod(payment, state.paymentMethods);\n        const shippingAddress = state.shippingAddress.getShippingAddress();\n        const consignments = state.consignments.getConsignments();\n        const shippingOption = state.consignments.getShippingOption();\n        const storeConfig = state.config.getStoreConfig();\n        const contextConfig = state.config.getContextConfig();\n        const instrumentMeta = state.instruments.getInstrumentsMeta();\n        const paymentMeta = state.paymentMethods.getPaymentMethodsMeta();\n        const orderMeta = state.order.getOrderMeta();\n        const internalCustomer = customer && billingAddress && mapToInternalCustomer(customer, billingAddress);\n\n        const authToken = instrumentMeta && isVaultedInstrument(payment.paymentData) ?\n            `${state.payment.getPaymentToken()}, ${instrumentMeta.vaultAccessToken}` :\n            state.payment.getPaymentToken();\n\n        if (!authToken) {\n            throw new StandardError();\n        }\n\n        return {\n            authToken,\n            paymentMethod,\n            customer: internalCustomer,\n            billingAddress: billingAddress && mapToInternalAddress(billingAddress),\n            shippingAddress: shippingAddress && mapToInternalAddress(shippingAddress, consignments),\n            shippingOption: shippingOption && mapToInternalShippingOption(shippingOption, true),\n            cart: checkout && mapToInternalCart(checkout),\n            order: order && mapToInternalOrder(order, orderMeta),\n            orderMeta,\n            payment: payment.paymentData,\n            quoteMeta: {\n                request: {\n                    ...paymentMeta,\n                    geoCountryCode: contextConfig && contextConfig.geoCountryCode,\n                },\n            },\n            source: 'bigcommerce-checkout-js-sdk',\n            store: pick(storeConfig && storeConfig.storeProfile, [\n                'storeHash',\n                'storeId',\n                'storeLanguage',\n                'storeName',\n            ]),\n        };\n    }\n\n    private _getPaymentMethod(payment: Payment, paymentMethodSelector: PaymentMethodSelector): PaymentMethod | undefined {\n        const paymentMethod = paymentMethodSelector.getPaymentMethod(payment.methodId, payment.gatewayId);\n\n        if (!paymentMethod) {\n            return;\n        }\n\n        if (paymentMethod.method === 'multi-option' && !paymentMethod.gateway) {\n            return { ...paymentMethod, gateway: paymentMethod.id };\n        }\n\n        if (paymentMethod.initializationData && paymentMethod.initializationData.gateway) {\n            return { ...paymentMethod, id: paymentMethod.initializationData.gateway };\n        }\n\n        return paymentMethod;\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport PaymentRequestBody from './payment-request-body';\n\n/**\n * @todo Convert this file into TypeScript properly\n */\nexport default class PaymentRequestSender {\n    /**\n     * @constructor\n     * @param {BigpayClient} client\n     */\n    constructor(\n        private _client: any\n    ) {}\n\n    submitPayment(payload: PaymentRequestBody): Promise<Response> {\n        return new Promise((resolve, reject) => {\n            this._client.submitPayment(payload, (error: any, response: any) => {\n                if (error) {\n                    reject(this._transformResponse(error));\n                } else {\n                    resolve(this._transformResponse(response));\n                }\n            });\n        });\n    }\n\n    initializeOffsitePayment(payload: PaymentRequestBody): Promise<void> {\n        return new Promise(() => {\n            this._client.initializeOffsitePayment(payload);\n        });\n    }\n\n    private _transformResponse(response: any): Response {\n        return {\n            headers: {},\n            body: response.data,\n            status: response.status,\n            statusText: response.statusText,\n        };\n    }\n}\n","import { ReadableDataStore } from '@bigcommerce/data-store';\nimport { some } from 'lodash';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { Registry } from '../common/registry';\nimport { RegistryOptions } from '../common/registry/registry';\n\nimport PaymentMethod from './payment-method';\nimport * as paymentMethodTypes from './payment-method-types';\nimport PaymentStrategyType from './payment-strategy-type';\nimport PaymentStrategy from './strategies/payment-strategy';\n\nexport default class PaymentStrategyRegistry extends Registry<PaymentStrategy, PaymentStrategyType> {\n    constructor(\n        private _store: ReadableDataStore<InternalCheckoutSelectors>,\n        options?: PaymentStrategyRegistryOptions\n    ) {\n        super(options);\n    }\n\n    getByMethod(paymentMethod?: PaymentMethod): PaymentStrategy {\n        if (!paymentMethod) {\n            return this.get();\n        }\n\n        const token = this._getToken(paymentMethod);\n        const cacheToken = paymentMethod.gateway || paymentMethod.id;\n\n        return this.get(token, cacheToken);\n    }\n\n    private _getToken(paymentMethod: PaymentMethod): PaymentStrategyType {\n        const methodId = paymentMethod.gateway || paymentMethod.id;\n\n        if (this._hasFactoryForMethod(methodId)) {\n            return methodId;\n        }\n\n        if (paymentMethod.type === paymentMethodTypes.OFFLINE) {\n            return PaymentStrategyType.OFFLINE;\n        }\n\n        if (this._isLegacyMethod(paymentMethod)) {\n            return PaymentStrategyType.LEGACY;\n        }\n\n        if (paymentMethod.type === paymentMethodTypes.HOSTED) {\n            return PaymentStrategyType.OFFSITE;\n        }\n\n        return PaymentStrategyType.CREDIT_CARD;\n    }\n\n    private _hasFactoryForMethod(\n        methodId: string\n    ): methodId is PaymentStrategyType {\n        return this._hasFactory(methodId);\n    }\n\n    private _isLegacyMethod(paymentMethod: PaymentMethod): boolean {\n        const config = this._store.getState().config.getStoreConfig();\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        const { clientSidePaymentProviders } = config.paymentSettings;\n\n        if (!clientSidePaymentProviders || paymentMethod.gateway === 'adyen') {\n            return false;\n        }\n\n        return !some(clientSidePaymentProviders, id =>\n            paymentMethod.id === id || paymentMethod.gateway === id\n        );\n    }\n}\n\nexport interface PaymentStrategyRegistryOptions extends RegistryOptions {\n    clientSidePaymentProviders?: string[];\n}\n","import { InvalidArgumentError } from '../../common/error/errors';\n\nexport default class PaymentArgumentInvalidError extends InvalidArgumentError {\n    constructor(invalidFields?: string[]) {\n        let message = 'Unable to submit payment for the order because the payload is invalid.';\n\n        if (invalidFields) {\n            message = `${message} Make sure the following fields are provided correctly: ${invalidFields.join(', ')}.`;\n        }\n\n        super(message);\n    }\n}\n","import { CheckoutStore, CheckoutValidator, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport AfterpayScriptLoader from './afterpay-script-loader';\nimport AfterpaySdk from './afterpay-sdk';\n\nexport default class AfterpayPaymentStrategy implements PaymentStrategy {\n    private _afterpaySdk?: AfterpaySdk;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutValidator: CheckoutValidator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _afterpayScriptLoader: AfterpayScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId, options.gatewayId);\n        const config = state.config.getStoreConfig();\n        const storeCountryName = config ? config.storeProfile.storeCountry : '';\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._afterpayScriptLoader.load(paymentMethod, this._mapCountryToISO2(storeCountryName))\n            .then(afterpaySdk => {\n                this._afterpaySdk = afterpaySdk;\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._afterpaySdk) {\n            this._afterpaySdk = undefined;\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const paymentId = payload.payment && payload.payment.gatewayId;\n\n        if (!paymentId) {\n            throw new PaymentArgumentInvalidError(['payment.gatewayId']);\n        }\n\n        const useStoreCredit = !!payload.useStoreCredit;\n        const state = this._store.getState();\n        const config = state.config.getStoreConfig();\n        const storeCountryName = config ? config.storeProfile.storeCountry : '';\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.initializePayment(paymentId, { useStoreCredit })\n        )\n            .then(state => this._checkoutValidator.validate(state.checkout.getCheckout(), options))\n            .then(() => this._store.dispatch(\n                this._paymentMethodActionCreator.loadPaymentMethod(paymentId, options)\n            ))\n            .then(state => this._displayModal(storeCountryName, state.paymentMethods.getPaymentMethod(paymentId)))\n            // Afterpay will handle the rest of the flow so return a promise that doesn't really resolve\n            .then(() => new Promise<never>(() => {}));\n    }\n\n    finalize(options: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._remoteCheckoutActionCreator.loadSettings(options.methodId))\n            .then(state => {\n                const payment = state.payment.getPaymentId();\n                const config = state.config.getContextConfig();\n                const afterpay = state.remoteCheckout.getCheckout('afterpay');\n\n                if (!payment) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!config || !config.payment.token) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!afterpay || !afterpay.settings) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n\n                const orderPayload = {\n                    useStoreCredit: afterpay.settings.useStoreCredit,\n                };\n\n                const paymentPayload = {\n                    methodId: payment.providerId,\n                    paymentData: { nonce: config.payment.token },\n                };\n\n                return this._store.dispatch(this._orderActionCreator.submitOrder(orderPayload, options))\n                    .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment(paymentPayload)));\n            });\n    }\n\n    private _displayModal(countryName: string, paymentMethod?: PaymentMethod): void {\n        if (!this._afterpaySdk || !paymentMethod || !paymentMethod.clientToken) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        this._afterpaySdk.initialize({ countryCode: this._mapCountryToISO2(countryName)});\n        this._afterpaySdk.display({ token: paymentMethod.clientToken });\n    }\n\n    private _mapCountryToISO2(countryName: string): string {\n        switch (countryName) {\n        case 'Australia':\n            return 'AU';\n\n        case 'New Zealand':\n            return 'NZ';\n\n        case 'United States':\n            return 'US';\n\n        default:\n            return 'AU';\n        }\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport PaymentMethod from '../../payment-method';\n\nimport AfterpaySdk from './afterpay-sdk';\nimport AfterpayWindow from './afterpay-window';\n\ninterface AfterpayScripts {\n    PROD: string;\n    SANDBOX: string;\n}\n\nconst SCRIPTS_DEFAULT: AfterpayScripts = {\n    PROD: '//portal.afterpay.com/afterpay-async.js',\n    SANDBOX: '//portal-sandbox.afterpay.com/afterpay-async.js',\n};\n\nconst SCRIPTS_US: AfterpayScripts = {\n    PROD: '//portal.afterpay.com/afterpay-async.js',\n    SANDBOX: '//portal.us-sandbox.afterpay.com/afterpay-async.js',\n};\n\n/** Class responsible for loading the Afterpay SDK */\nexport default class AfterpayScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    /**\n     * Loads the appropriate Afterpay SDK depending on the payment method data.\n     * @param method the payment method data\n     */\n    load(method: PaymentMethod, countryCode: string): Promise<AfterpaySdk> {\n        const testMode = method.config.testMode || false;\n        const scriptURI = this._getScriptURI(countryCode, testMode);\n\n        return this._scriptLoader.loadScript(scriptURI)\n            .then(() => (window as AfterpayWindow).AfterPay);\n    }\n\n    private _getScriptURI(countryCode: string, testMode: boolean): string {\n        if (countryCode === 'US') {\n            return testMode ? SCRIPTS_US.SANDBOX : SCRIPTS_US.PROD;\n        }\n\n        return testMode ? SCRIPTS_DEFAULT.SANDBOX : SCRIPTS_DEFAULT.PROD;\n    }\n\n}\n","import { noop } from 'lodash';\n\nimport { isInternalAddressEqual, mapFromInternalAddress, mapToInternalAddress } from '../../../address';\nimport { BillingAddressActionCreator } from '../../../billing';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, RequestError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { RemoteCheckoutSynchronizationError } from '../../../remote-checkout/errors';\nimport PaymentMethod from '../../payment-method';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport AmazonPayOrderReference from './amazon-pay-order-reference';\nimport AmazonPayPaymentInitializeOptions from './amazon-pay-payment-initialize-options';\nimport AmazonPayScriptLoader from './amazon-pay-script-loader';\nimport AmazonPayWallet, { AmazonPayWalletOptions } from './amazon-pay-wallet';\nimport AmazonPayWindow from './amazon-pay-window';\n\nexport default class AmazonPayPaymentStrategy implements PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _walletOptions?: AmazonPayPaymentInitializeOptions;\n    private _window: AmazonPayWindow;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _scriptLoader: AmazonPayScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { amazon: amazonOptions, methodId } = options;\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n        if (!amazonOptions) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.amazon\" argument is not provided.');\n        }\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._walletOptions = amazonOptions;\n        this._paymentMethod = paymentMethod;\n\n        return new Promise((resolve, reject) => {\n            const onReady = () => {\n                this._createWallet(amazonOptions)\n                    .then(resolve)\n                    .catch(reject);\n            };\n\n            this._scriptLoader.loadWidget(paymentMethod, onReady)\n                .catch(reject);\n        })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._walletOptions = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const referenceId = this._getOrderReferenceId();\n\n        if (!referenceId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!payload.payment) {\n            throw new InvalidArgumentError('Unable to proceed because \"payload.payment.methodId\" argument is not provided.');\n        }\n\n        const { payment: { paymentData, ...paymentPayload }, useStoreCredit = false } = payload;\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.initializePayment(paymentPayload.methodId, { referenceId, useStoreCredit })\n        )\n            .then(() => this._store.dispatch(\n                this._orderActionCreator.submitOrder({\n                    ...payload,\n                    payment: paymentPayload,\n                }, options)\n            ))\n            .catch(error => {\n                if (error instanceof RequestError && error.body.type === 'provider_widget_error' && this._walletOptions) {\n                    return this._createWallet(this._walletOptions)\n                        .then(() => Promise.reject(error));\n                }\n\n                return Promise.reject(error);\n            });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _getMerchantId(): string | undefined {\n        return this._paymentMethod && this._paymentMethod.config.merchantId;\n    }\n\n    private _getOrderReferenceId(): string | undefined {\n        const state = this._store.getState();\n        const amazon = state.remoteCheckout.getCheckout('amazon');\n\n        return amazon ? amazon.referenceId : undefined;\n    }\n\n    private _createWallet(options: AmazonPayPaymentInitializeOptions): Promise<AmazonPayWallet> {\n        return new Promise((resolve, reject) => {\n            const { container, onError = noop, onPaymentSelect = noop, onReady = noop } = options;\n            const referenceId = this._getOrderReferenceId();\n            const merchantId = this._getMerchantId();\n\n            if (!document.getElementById(container)) {\n                return reject(new InvalidArgumentError('Unable to create AmazonPay Wallet widget without valid container ID.'));\n            }\n\n            if (!this._window.OffAmazonPayments) {\n                return reject(new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized));\n            }\n\n            if (!merchantId) {\n                return reject(new MissingDataError(MissingDataErrorType.MissingPaymentMethod));\n            }\n\n            const walletOptions: AmazonPayWalletOptions = {\n                amazonOrderReferenceId: referenceId,\n                design: { designMode: 'responsive' },\n                scope: 'payments:billing_address payments:shipping_address payments:widget profile',\n                sellerId: merchantId,\n                onError: error => {\n                    reject(error);\n                    onError(error);\n                },\n                onPaymentSelect: orderReference => {\n                    this._synchronizeBillingAddress()\n                        .then(() => onPaymentSelect(orderReference))\n                        .catch(onError);\n                },\n                onReady: orderReference => {\n                    resolve();\n                    onReady(orderReference);\n                },\n            };\n\n            if (!walletOptions.amazonOrderReferenceId) {\n                walletOptions.onReady = orderReference => {\n                    this._updateOrderReference(orderReference)\n                        .then(() => {\n                            resolve();\n                            onReady(orderReference);\n                        })\n                        .catch(onError);\n                };\n            }\n\n            const widget = new this._window.OffAmazonPayments.Widgets.Wallet(walletOptions);\n\n            widget.bind(container);\n\n            return widget;\n        });\n    }\n\n    private _synchronizeBillingAddress(): Promise<InternalCheckoutSelectors> {\n        const referenceId = this._getOrderReferenceId();\n        const methodId = this._paymentMethod && this._paymentMethod.id;\n\n        if (!methodId || !referenceId) {\n            throw new RemoteCheckoutSynchronizationError();\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.initializeBilling(methodId, { referenceId })\n        )\n            .then(state => {\n                const amazon = state.remoteCheckout.getCheckout('amazon');\n                const remoteAddress = amazon && amazon.billing && amazon.billing.address;\n                const billingAddress = state.billingAddress.getBillingAddress();\n                const internalBillingAddress = billingAddress && mapToInternalAddress(billingAddress);\n\n                if (remoteAddress === false) {\n                    throw new RemoteCheckoutSynchronizationError();\n                }\n\n                if (!remoteAddress || isInternalAddressEqual(remoteAddress, internalBillingAddress || {})) {\n                    return this._store.getState();\n                }\n\n                return this._store.dispatch(\n                    this._billingAddressActionCreator.updateAddress(mapFromInternalAddress(remoteAddress))\n                );\n            });\n    }\n\n    private _updateOrderReference(orderReference: AmazonPayOrderReference): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.updateCheckout('amazon', {\n                referenceId: orderReference.getAmazonOrderReferenceId(),\n            })\n        );\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class PaymentMethodCancelledError extends StandardError {\n    constructor() {\n        super('Payment process was cancelled.');\n\n        this.type = 'payment_cancelled';\n    }\n}\n","import { Address } from '../../../address';\nimport { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { CancellablePromise } from '../../../common/utility';\nimport { OrderPaymentRequestBody } from '../../../order';\nimport { PaymentMethodCancelledError } from '../../errors';\nimport { CreditCardInstrument, NonceInstrument } from '../../payment';\n\nimport { BraintreePaypal, BraintreeRequestData } from './braintree';\nimport { BraintreePaymentInitializeOptions, BraintreeThreeDSecureOptions } from './braintree-payment-options';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\n\nexport default class BraintreePaymentProcessor {\n    private _threeDSecureOptions?: BraintreeThreeDSecureOptions;\n\n    constructor(\n        private _braintreeSDKCreator: BraintreeSDKCreator\n    ) {}\n\n    initialize(clientToken: string, options?: BraintreePaymentInitializeOptions): void {\n        this._braintreeSDKCreator.initialize(clientToken);\n        this._threeDSecureOptions = options && options.threeDSecure;\n    }\n\n    preloadPaypal(): Promise<BraintreePaypal> {\n        return this._braintreeSDKCreator.getPaypal();\n    }\n\n    tokenizeCard(payment: OrderPaymentRequestBody, billingAddress: Address): Promise<NonceInstrument> {\n        const { paymentData } = payment;\n        const requestData = this._mapToCreditCard(paymentData as CreditCardInstrument, billingAddress);\n\n        return this._braintreeSDKCreator.getClient()\n            .then(client => client.request(requestData))\n            .then(({ creditCards }) => ({\n                nonce: creditCards[0].nonce,\n            }));\n    }\n\n    paypal(amount: number, storeLanguage: string, currency: string, offerCredit: boolean): Promise<NonceInstrument> {\n        return this._braintreeSDKCreator.getPaypal()\n            .then(paypal => paypal.tokenize({\n                amount,\n                currency,\n                enableShippingAddress: true,\n                flow: 'checkout',\n                locale: storeLanguage,\n                offerCredit,\n                useraction: 'commit',\n            }));\n    }\n\n    verifyCard(payment: OrderPaymentRequestBody, billingAddress: Address, amount: number): Promise<NonceInstrument> {\n        if (!this._threeDSecureOptions) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const { addFrame, removeFrame } = this._threeDSecureOptions;\n\n        return Promise.all([\n            this.tokenizeCard(payment, billingAddress),\n            this._braintreeSDKCreator.get3DS(),\n        ]).then(([paymentData, threeDSecure]) => {\n            const { nonce } = paymentData;\n            const cancelVerifyCard = () => threeDSecure.cancelVerifyCard()\n                .then(response => {\n                    verification.cancel(new PaymentMethodCancelledError());\n\n                    return response;\n                });\n\n            const verification = new CancellablePromise(\n                threeDSecure.verifyCard({\n                    addFrame: (error, iframe) => {\n                        addFrame(error, iframe, cancelVerifyCard);\n                    },\n                    amount,\n                    nonce,\n                    removeFrame,\n                })\n            );\n\n            return verification.promise;\n        });\n    }\n\n    appendSessionId(processedPayment: Promise<NonceInstrument>): Promise<NonceInstrument> {\n        return processedPayment\n            .then(paymentData => Promise.all([paymentData, this._braintreeSDKCreator.getDataCollector()]))\n            .then(([paymentData, { deviceData }]) => ({ ...paymentData, deviceSessionId: deviceData }));\n    }\n\n    deinitialize(): Promise<void> {\n        return this._braintreeSDKCreator.teardown();\n    }\n\n    private _mapToCreditCard(creditCard: CreditCardInstrument, billingAddress: Address): BraintreeRequestData {\n        let streetAddress = billingAddress.address1;\n\n        if (billingAddress.address2) {\n            streetAddress = ` ${billingAddress.address2}`;\n        }\n\n        return {\n            data: {\n                creditCard: {\n                    cardholderName: creditCard.ccName,\n                    number: creditCard.ccNumber,\n                    cvv: creditCard.ccCvv,\n                    expirationDate: `${creditCard.ccExpiry.month}/${creditCard.ccExpiry.year}`,\n                    options: {\n                        validate: false,\n                    },\n                    billingAddress: {\n                        countryName: billingAddress.country,\n                        postalCode: billingAddress.postalCode,\n                        streetAddress,\n                    },\n                },\n            },\n            endpoint: 'payment_methods/credit_cards',\n            method: 'post',\n        };\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, StandardError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport isCreditCardLike from '../../is-credit-card-like';\nimport isVaultedInstrument from '../../is-vaulted-instrument';\nimport Payment, { PaymentInstrument } from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport BraintreePaymentProcessor from './braintree-payment-processor';\n\nexport default class BraintreeCreditCardPaymentStrategy implements PaymentStrategy {\n    private _is3dsEnabled?: boolean;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _braintreePaymentProcessor: BraintreePaymentProcessor\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(options.methodId))\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n                if (!paymentMethod || !paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                this._braintreePaymentProcessor.initialize(paymentMethod.clientToken, options.braintree);\n                this._is3dsEnabled = paymentMethod.config.is3dsEnabled;\n\n                return this._store.getState();\n            })\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        return this._store.dispatch(\n            this._orderActionCreator.submitOrder(order, options)\n        )\n            .then(state =>\n                state.payment.isPaymentDataRequired(order.useStoreCredit) && payment ?\n                    this._preparePaymentData(payment) :\n                    Promise.resolve(payment as Payment)\n            )\n            .then(payment =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment(payment))\n            )\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._braintreePaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    private _handleError(error: Error): never {\n        if (error.name === 'BraintreeError') {\n            throw new StandardError(error.message);\n        }\n\n        throw error;\n    }\n\n    private _isUsingVaulting(paymentData: PaymentInstrument): boolean {\n        if (isCreditCardLike(paymentData)) {\n            return Boolean(paymentData.shouldSaveInstrument);\n        }\n\n        return isVaultedInstrument(paymentData);\n    }\n\n    private _preparePaymentData(payment: OrderPaymentRequestBody): Promise<Payment> {\n        const { paymentData } = payment;\n        const state = this._store.getState();\n\n        if (paymentData && this._isUsingVaulting(paymentData)) {\n            return Promise.resolve(payment as Payment);\n        }\n\n        const checkout = state.checkout.getCheckout();\n        const billingAddress = state.billingAddress.getBillingAddress();\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!billingAddress) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        const tokenizedCard = this._is3dsEnabled ?\n            this._braintreePaymentProcessor.verifyCard(payment, billingAddress, checkout.grandTotal) :\n            this._braintreePaymentProcessor.tokenizeCard(payment, billingAddress);\n\n        return this._braintreePaymentProcessor.appendSessionId(tokenizedCard)\n            .then(paymentData => ({ ...payment, paymentData }));\n    }\n}\n","export enum ChasePayEventType {\n    StartCheckout = 'startCheckout',\n    CompleteCheckout = 'completeCheckout',\n    CancelCheckout = 'cancelCheckout',\n}\n\nexport interface ChasePayEventMap {\n    [ChasePayEventType.StartCheckout](digitalSessionId: string): void;\n    [ChasePayEventType.CompleteCheckout](payload: ChasePaySuccessPayload): void;\n    [ChasePayEventType.CancelCheckout](): void;\n}\n\nexport interface ChasePayHostWindow extends Window {\n    JPMC?: JPMC;\n}\n\nexport interface JPMC {\n    ChasePay: ChasePay;\n}\n\nexport interface ChasePaySuccessPayload {\n    sessionToken: string;\n}\n\nexport interface ChasePayInsertOptions {\n    color?: string;\n    containers?: string[];\n    height?: number;\n    width?: number;\n}\n\nexport interface ChasePayConfigureOptions {\n    language?: string;\n    zindex?: number;\n    sessionWarningTime?: number;\n    sessionTimeoutTime?: number;\n}\n\nexport interface ChasePay {\n    EventType: {\n        START_CHECKOUT: ChasePayEventType.StartCheckout;\n        COMPLETE_CHECKOUT: ChasePayEventType.CompleteCheckout;\n        CANCEL_CHECKOUT: ChasePayEventType.CancelCheckout;\n    };\n    isChasePayUp(): boolean;\n    insertButtons(options: ChasePayInsertOptions): void;\n    insertBrandings(options: ChasePayInsertOptions): void;\n    startCheckout(digitalSessionId?: string): void;\n    showLoadingAnimation(): void;\n    configure(options: ChasePayConfigureOptions): void;\n    on<ChasePayEventType extends keyof ChasePayEventMap>(eventType: ChasePayEventType, callback: ChasePayEventMap[ChasePayEventType]): {};\n}\n\nexport interface ChasePayInitializeOptions {\n    /**\n     * This container is used to host the chasepay branding logo.\n     * It should be an HTML element.\n     */\n    logoContainer: string;\n\n    /**\n     * This walletButton is used to set an event listener, provide an element ID if you want\n     * users to be able to launch the ChasePay wallet modal by clicking on a button.\n     * It should be an HTML element.\n     */\n    walletButton?: string;\n\n    /**\n     * A callback that gets called when the customer selects a payment option.\n     */\n    onPaymentSelect?(): void;\n}\n","import isVaultedInstrument from './is-vaulted-instrument';\nimport { CreditCardInstrument, PaymentInstrument } from './payment';\n\nexport default function isCreditCardLike(instrument: PaymentInstrument): instrument is CreditCardInstrument {\n    const card = instrument as CreditCardInstrument;\n\n    return !isVaultedInstrument(card) &&\n        typeof card.ccName === 'string' &&\n        typeof card.ccNumber === 'string' &&\n        typeof card.ccExpiry === 'object' &&\n        typeof card.ccExpiry.month === 'string' &&\n        typeof card.ccExpiry.year === 'string';\n    }\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, StandardError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport Payment from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport BraintreePaymentProcessor from './braintree-payment-processor';\n\nexport default class BraintreePaypalPaymentStrategy implements PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _braintreePaymentProcessor: BraintreePaymentProcessor,\n        private _credit: boolean = false\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { braintree: braintreeOptions, methodId } = options;\n\n        this._paymentMethod = this._store.getState().paymentMethods.getPaymentMethod(methodId);\n\n        if (this._paymentMethod && this._paymentMethod.nonce) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                this._braintreePaymentProcessor.initialize(this._paymentMethod.clientToken, braintreeOptions);\n\n                return this._braintreePaymentProcessor.preloadPaypal();\n            })\n            .then(() => this._store.getState())\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        return (payment ? this._preparePaymentData(payment) : Promise.resolve(payment))\n            .then(payment => Promise.all([payment, this._store.dispatch(this._orderActionCreator.submitOrder(order, options))]))\n            .then(([payment]) => this._store.dispatch(this._paymentActionCreator.submitPayment(payment)))\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(options: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._braintreePaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    private _handleError(error: Error): never {\n        if (error.name === 'BraintreeError') {\n            throw new StandardError(error.message);\n        }\n\n        throw error;\n    }\n\n    private _preparePaymentData(payment: OrderPaymentRequestBody): Promise<Payment> {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const config = state.config.getStoreConfig();\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!this._paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const { currency, storeProfile: { storeLanguage } } = config;\n        const { method, nonce } = this._paymentMethod;\n\n        if (nonce) {\n            return Promise.resolve({ ...payment, paymentData: { nonce, method } });\n        }\n\n        const tokenizedCard = this._braintreePaymentProcessor\n            .paypal(checkout.grandTotal, storeLanguage, currency.code, this._credit);\n\n        return this._braintreePaymentProcessor.appendSessionId(tokenizedCard)\n            .then(paymentData => ({ ...payment, paymentData: { ...paymentData, method } }));\n    }\n}\n","import { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, StandardError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategyActionCreator from '../../payment-strategy-action-creator';\nimport PaymentStrategy from '../payment-strategy';\n\nimport BraintreeVisaCheckoutPaymentProcessor from './braintree-visacheckout-payment-processor';\nimport { VisaCheckoutPaymentSuccessPayload } from './visacheckout';\nimport VisaCheckoutScriptLoader from './visacheckout-script-loader';\n\nexport default class BraintreeVisaCheckoutPaymentStrategy implements PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _braintreeVisaCheckoutPaymentProcessor: BraintreeVisaCheckoutPaymentProcessor,\n        private _visaCheckoutScriptLoader: VisaCheckoutScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { braintreevisacheckout: visaCheckoutOptions, methodId } = options;\n\n        if (!visaCheckoutOptions) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.braintreevisacheckout\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                const checkout = state.checkout.getCheckout();\n                const storeConfig = state.config.getStoreConfig();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const {\n                    onError = () => {},\n                    onPaymentSelect = () => {},\n                } = visaCheckoutOptions;\n\n                const initOptions = {\n                    locale: storeConfig.storeProfile.storeLanguage,\n                    collectShipping: false,\n                    subtotal: checkout.subtotal,\n                    currencyCode: storeConfig.currency.code,\n                };\n\n                return Promise.all([\n                    this._visaCheckoutScriptLoader.load(this._paymentMethod.config.testMode),\n                    this._braintreeVisaCheckoutPaymentProcessor.initialize(this._paymentMethod.clientToken, initOptions),\n                ])\n                .then(([visaCheckout, visaInitOptions]) => {\n                    visaCheckout.init(visaInitOptions);\n                    visaCheckout.on('payment.success', (paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) =>\n                        this._paymentInstrumentSelected(paymentSuccessPayload)\n                            .then(() => onPaymentSelect())\n                            .catch(error => onError(error))\n                    );\n                    visaCheckout.on('payment.error', (payment, error) => onError(error));\n                });\n            })\n            .then(() => this._store.getState());\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new InvalidArgumentError('Unable to submit payment because \"payload.payment\" argument is not provided.');\n        }\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData || !this._paymentMethod.initializationData.nonce) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { nonce } = this._paymentMethod.initializationData;\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData: { nonce } }))\n            )\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._braintreeVisaCheckoutPaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    private _paymentInstrumentSelected(paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) {\n        const state = this._store.getState();\n\n        if (!this._paymentMethod) {\n            throw new Error('Payment method not initialized');\n        }\n\n        const { id: methodId } = this._paymentMethod;\n\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            return this._braintreeVisaCheckoutPaymentProcessor.handleSuccess(\n                paymentSuccessPayload,\n                state.shippingAddress.getShippingAddress(),\n                state.billingAddress.getBillingAddress()\n            )\n            .then(() => Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId)),\n            ]));\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _handleError(error: Error): never {\n        if (error.name === 'BraintreeError') {\n            throw new StandardError(error.message);\n        }\n\n        throw error;\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { Subject } from 'rxjs';\nimport { take } from 'rxjs/operators';\n\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { toFormUrlEncoded } from '../../../common/http-request';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentMethodCancelledError } from '../../errors';\nimport Payment from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategyActionCreator from '../../payment-strategy-action-creator';\nimport PaymentStrategy from '../payment-strategy';\nimport { WepayRiskClient } from '../wepay';\n\nimport { ChasePay, ChasePayEventType, ChasePaySuccessPayload } from './chasepay';\nimport ChasePayInitializeOptions from './chasepay-initialize-options';\nimport ChasePayScriptLoader from './chasepay-script-loader';\n\nexport default class ChasePayPaymentStrategy implements PaymentStrategy {\n    private _chasePayClient?: ChasePay;\n    private _methodId!: string;\n    private _walletButton?: HTMLElement;\n    private _walletEvent$: Subject<{ type: ChasePayEventType }>;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _requestSender: RequestSender,\n        private _chasePayScriptLoader: ChasePayScriptLoader,\n        private _wepayRiskClient: WepayRiskClient\n    ) {\n        this._walletEvent$ = new Subject();\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._methodId = options.methodId;\n\n        if (!options.chasepay) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.chasepay\" argument is not provided.');\n        }\n\n        const walletButton = options.chasepay.walletButton && document.getElementById(options.chasepay.walletButton);\n\n        if (walletButton) {\n            this._walletButton = walletButton;\n            this._walletButton.addEventListener('click', this._handleWalletButtonClick);\n        }\n\n        return this._configureWallet(options.chasepay)\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._walletButton) {\n            this._walletButton.removeEventListener('click', this._handleWalletButtonClick);\n        }\n\n        this._walletButton = undefined;\n        this._chasePayClient = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._getPayment()\n            .catch(error => {\n                if (error.subtype === MissingDataErrorType.MissingPayment) {\n                    return this._displayWallet()\n                        .then(() => this._getPayment());\n                }\n\n                throw error;\n            })\n            .then(payment =>\n                this._createOrder(payment, payload.useStoreCredit, options)\n            );\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _configureWallet(options: ChasePayInitializeOptions): Promise<void> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n        const storeConfig = state.config.getStoreConfig();\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (!storeConfig) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        return this._chasePayScriptLoader.load(paymentMethod.config.testMode)\n            .then(({ ChasePay }) => {\n                this._chasePayClient = ChasePay;\n\n                if (options.logoContainer && document.getElementById(options.logoContainer)) {\n                    this._chasePayClient.insertBrandings({\n                        color: 'white',\n                        containers: [options.logoContainer],\n                    });\n                }\n\n                this._chasePayClient.configure({\n                    language: storeConfig.storeProfile.storeLanguage,\n                });\n\n                this._chasePayClient.on(ChasePayEventType.CancelCheckout, () => {\n                    this._walletEvent$.next({ type: ChasePayEventType.CancelCheckout });\n\n                    if (options.onCancel) {\n                        options.onCancel();\n                    }\n                });\n\n                this._chasePayClient.on(ChasePayEventType.CompleteCheckout, (payload: ChasePaySuccessPayload) => {\n                    this._setSessionToken(payload.sessionToken)\n                        .then(() => {\n                            this._walletEvent$.next({ type: ChasePayEventType.CompleteCheckout });\n\n                            if (options.onPaymentSelect) {\n                                options.onPaymentSelect();\n                            }\n                        });\n                });\n            });\n    }\n\n    private _displayWallet(): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(this._methodId))\n                .then(state => {\n                    const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n\n                    if (!this._chasePayClient) {\n                        throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                    }\n\n                    if (!paymentMethod) {\n                        throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                    }\n\n                    this._chasePayClient.showLoadingAnimation();\n                    this._chasePayClient.startCheckout(paymentMethod.initializationData.digitalSessionId);\n                });\n\n            // Wait for payment selection\n            return new Promise((resolve, reject) => {\n                this._walletEvent$\n                    .pipe(take(1))\n                    .subscribe((event: { type: ChasePayEventType }) => {\n                        if (event.type === ChasePayEventType.CancelCheckout) {\n                            reject(new PaymentMethodCancelledError());\n                        } else if (event.type === ChasePayEventType.CompleteCheckout) {\n                            resolve();\n                        }\n                    });\n            });\n        }, { methodId: this._methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _setSessionToken(sessionToken: string): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n        const merchantRequestId = paymentMethod && paymentMethod.initializationData.merchantRequestId;\n\n        return this._requestSender.post('checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\n            },\n            body: toFormUrlEncoded({\n                action: 'set_external_checkout',\n                provider: this._methodId,\n                sessionToken,\n                merchantRequestId,\n            }),\n        })\n            // Re-hydrate checkout data\n            .then(() => Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(this._methodId)),\n            ]))\n            .then(() => this._store.getState());\n    }\n\n    private _getPayment(): Promise<Payment> {\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(this._methodId))\n            .then(() => {\n                if (this._methodId === 'wepay') {\n                    return this._wepayRiskClient.initialize()\n                        .then(client => client.getRiskToken());\n                }\n\n                return '';\n            })\n            .then(riskToken => {\n                const state = this._store.getState();\n                const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n\n                if (!paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                if (!paymentMethod.initializationData.paymentCryptogram) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPayment);\n                }\n\n                const paymentData = {\n                    method: this._methodId,\n                    cryptogramId: paymentMethod.initializationData.paymentCryptogram,\n                    eci: paymentMethod.initializationData.eci,\n                    transactionId: btoa(paymentMethod.initializationData.reqTokenId),\n                    ccExpiry: {\n                        month: paymentMethod.initializationData.expDate.toString().substr(0, 2),\n                        year: paymentMethod.initializationData.expDate.toString().substr(2, 2),\n                    },\n                    ccNumber: paymentMethod.initializationData.accountNum,\n                    accountMask: paymentMethod.initializationData.accountMask,\n                    extraData: riskToken ? { riskToken } : undefined,\n                };\n\n                return {\n                    methodId: this._methodId,\n                    paymentData,\n                };\n            });\n    }\n\n    private _createOrder(payment: Payment, useStoreCredit?: boolean, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._orderActionCreator.submitOrder({ useStoreCredit }, options))\n            .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment(payment)));\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): void {\n        event.preventDefault();\n\n        this._displayWallet();\n    }\n}\n","export default interface SquarePaymentForm {\n    build(): void;\n    requestCardNonce(): void;\n    setPostalCode(postalCode: string): void;\n}\n\nexport interface SquarePaymentFormConstructor {\n    new(options: SquareFormOptions): SquarePaymentForm;\n}\n\nexport interface SquareFormOptions {\n    applicationId: string;\n    env: string;\n    locationId: string;\n    inputClass?: string;\n    inputStyles?: string[];\n    callbacks?: SquareFormCallbacks;\n    cardNumber: SquareFormElement;\n    cvv: SquareFormElement;\n    expirationDate: SquareFormElement;\n    postalCode: SquareFormElement;\n    masterpass: SquareFormElement;\n}\nexport interface LineItem {\n    label: string;\n    amount: string;\n    pending: boolean;\n}\n\nexport interface SquarePaymentRequest {\n    requestShippingAddress: boolean;\n    requestBillingInfo: boolean;\n    shippingContact?: Contact;\n    countryCode: string;\n    currencyCode: string;\n    lineItems?: LineItem[];\n    total: LineItem;\n}\n\nexport interface NonceGenerationError {\n    type: string;\n    message: string;\n    field: string;\n}\n\nexport interface CardData {\n    card_brand: CardBrand;\n    last_4: number;\n    exp_month: number;\n    exp_year: number;\n    billing_postal_code: string;\n    digital_wallet_type: DigitalWalletType;\n}\n\nexport interface Contact {\n    familyName: string;\n    givenName: string;\n    email: string;\n    country: string;\n    countryName: string;\n    region: string;\n    city: string;\n    addressLines: string[];\n    postalCode: string;\n    phone: string;\n}\n\nexport enum CardBrand {\n    americanExpress = 'AMERICAN_EXPRESS',\n    discover = 'DISCOVER',\n    discoverDiners = 'DISCOVER_DINERS',\n    JCB = 'JCB',\n    masterCard = 'MASTERCARD',\n    unionPay = 'CHINA_UNIONPAY',\n    unknown = 'OTHER_BRAND',\n    visa = 'VISA',\n    squareGift = 'SQUARE_GIFT_CARD',\n}\n\nexport enum DigitalWalletType {\n    applePay = 'APPLEPAY',\n    masterpass = 'MASTERPASS',\n    none = 'NONE',\n}\n\n/**\n * Configures any form element provided by Square payment.\n */\nexport interface SquareFormElement {\n    /**\n     * The ID of the container which the form element should insert into.\n     */\n    elementId: string;\n\n    /**\n     * The placeholder text to use for the form element, if provided.\n     */\n    placeholder?: string;\n}\n\nexport interface SquareFormCallbacks {\n    paymentFormLoaded?(form: SquarePaymentForm): void;\n    unsupportedBrowserDetected?(): void;\n    cardNonceResponseReceived?(\n        errors?: NonceGenerationError[],\n        nonce?: string,\n        cardData?: CardData,\n        billingContact?: Contact,\n        shippingContact?: Contact): void;\n    methodsSupported?(methods: { [key: string]: boolean }): void;\n    createPaymentRequest?(): void;\n}\n\nexport type SquareFormFactory = (options: SquareFormOptions) => SquarePaymentForm;\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\n\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class CreditCardPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n            );\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n} from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategyActionCreator from '../../payment-strategy-action-creator';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { GooglePaymentData, PaymentMethodData } from './googlepay';\nimport GooglePayPaymentInitializeOptions from './googlepay-initialize-options';\nimport GooglePayPaymentProcessor from './googlepay-payment-processor';\n\nexport default class GooglePayPaymentStrategy implements PaymentStrategy {\n    private _googlePayOptions?: GooglePayPaymentInitializeOptions;\n    private _methodId?: string;\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _googlePayPaymentProcessor: GooglePayPaymentProcessor\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._methodId = options.methodId;\n\n        return this._googlePayPaymentProcessor.initialize(this._methodId)\n            .then(() => {\n                this._googlePayOptions = this._getGooglePayOptions(options);\n\n                if (!this._googlePayOptions) {\n                    throw new InvalidArgumentError('Unable to initialize payment because \"options.googlepay\" argument is not provided.');\n                }\n\n                const walletButton = this._googlePayOptions.walletButton && document.getElementById(this._googlePayOptions.walletButton);\n\n                if (walletButton) {\n                    this._walletButton = walletButton;\n                    this._walletButton.addEventListener('click', this._handleWalletButtonClick);\n                }\n\n                return this._store.getState();\n            });\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._walletButton) {\n            this._walletButton.removeEventListener('click', this._handleWalletButtonClick);\n        }\n\n        this._walletButton = undefined;\n\n        return this._googlePayPaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!this._googlePayOptions) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.googlepay\" argument is not provided.');\n        }\n\n        const {\n            onError = () => {},\n            onPaymentSelect = () => {},\n        } = this._googlePayOptions;\n\n        return Promise.resolve(this._getPayment())\n            .then(payment => {\n                if (!payment.paymentData.nonce || !payment.paymentData.cardInformation) {\n                    // TODO: Find a way to share the code with _handleWalletButtonClick method\n                    return this._googlePayPaymentProcessor.displayWallet()\n                        .then(paymentData => this._paymentInstrumentSelected(paymentData))\n                        .then(() => onPaymentSelect())\n                        .then(() => this._getPayment())\n                        .catch(error => {\n                            if (error.statusCode !== 'CANCELED') {\n                                onError(error);\n                            }\n                        });\n                }\n\n                return payment;\n            })\n            .then(payment =>\n                this._store.dispatch(this._orderActionCreator.submitOrder({ useStoreCredit: payload.useStoreCredit }, options))\n                    .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment(this._getPayment())))\n            );\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _paymentInstrumentSelected(paymentData: GooglePaymentData) {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const methodId = this._methodId;\n\n        // TODO: Revisit how we deal with GooglePaymentData after receiving it from Google\n        return this._googlePayPaymentProcessor.handleSuccess(paymentData)\n            .then(() => Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId)),\n            ]));\n    }\n\n    private _getGooglePayOptions(options: PaymentInitializeOptions): GooglePayPaymentInitializeOptions {\n        if (options.methodId === 'googlepaybraintree' && options.googlepaybraintree) {\n            return options.googlepaybraintree;\n        }\n\n        if (options.methodId === 'googlepaystripe' && options.googlepaystripe) {\n            return options.googlepaystripe;\n        }\n\n        throw new InvalidArgumentError();\n    }\n\n    private _getPayment(): PaymentMethodData {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (!paymentMethod.initializationData.nonce) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        const paymentData = {\n            method: this._methodId,\n            nonce: paymentMethod.initializationData.nonce,\n            cardInformation: paymentMethod.initializationData.card_information,\n        };\n\n        return {\n            methodId: this._methodId,\n            paymentData,\n        };\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): Promise<InternalCheckoutSelectors> {\n        event.preventDefault();\n\n        if (!this._methodId || !this._googlePayOptions) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const methodId = this._methodId;\n\n        const {\n            onError = () => {},\n            onPaymentSelect = () => {},\n        } = this._googlePayOptions;\n\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            return this._googlePayPaymentProcessor.displayWallet()\n                .then(paymentData => this._paymentInstrumentSelected(paymentData))\n                .then(() => onPaymentSelect())\n                .catch(error => {\n                    if (error.statusCode !== 'CANCELED') {\n                        onError(error);\n                    }\n                });\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType\n} from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { PaymentMethodCancelledError } from '../../errors';\nimport PaymentMethodInvalidError from '../../errors/payment-method-invalid-error';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport KlarnaCredit, { KlarnaLoadResponse } from './klarna-credit';\nimport KlarnaScriptLoader from './klarna-script-loader';\n\nexport default class KlarnaPaymentStrategy implements PaymentStrategy {\n    private _klarnaCredit?: KlarnaCredit;\n    private _unsubscribe?: (() => void);\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _klarnaScriptLoader: KlarnaScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return this._klarnaScriptLoader.load()\n            .then(klarnaCredit => { this._klarnaCredit = klarnaCredit; })\n            .then(() => {\n                this._unsubscribe = this._store.subscribe(\n                    state => {\n                        if (state.paymentStrategies.isInitialized(options.methodId)) {\n                            this._loadWidget(options);\n                        }\n                    },\n                    state => {\n                        const checkout = state.checkout.getCheckout();\n\n                        return checkout && checkout.grandTotal;\n                    }\n                );\n\n                return this._loadWidget(options);\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._unsubscribe) {\n            this._unsubscribe();\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!payload.payment) {\n            throw new InvalidArgumentError('Unable to proceed because \"payload.payment\" argument is not provided.');\n        }\n\n        const { payment: { paymentData, ...paymentPayload } } = payload;\n\n        return this._authorize()\n            .then(({ authorization_token: authorizationToken }) => this._store.dispatch(\n                this._remoteCheckoutActionCreator.initializePayment(paymentPayload.methodId, { authorizationToken })\n            ))\n            .then(() => this._store.dispatch(\n                this._orderActionCreator.submitOrder({\n                    ...payload,\n                    payment: paymentPayload,\n                    // Note: API currently doesn't support using Store Credit with Klarna.\n                    // To prevent deducting customer's store credit, set it as false.\n                    useStoreCredit: false,\n                }, options)\n            ));\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _loadWidget(options: PaymentInitializeOptions): Promise<KlarnaLoadResponse> {\n        if (!options.klarna) {\n            throw new InvalidArgumentError('Unable to load widget because \"options.klarna\" argument is not provided.');\n        }\n\n        const { methodId, klarna: { container, onLoad } } = options;\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => new Promise<KlarnaLoadResponse>((resolve, reject) => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                if (!this._klarnaCredit || !paymentMethod.clientToken) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n\n                this._klarnaCredit.init({ client_token: paymentMethod.clientToken });\n\n                this._klarnaCredit.load({ container }, response => {\n                    if (onLoad) {\n                        onLoad(response);\n                    }\n\n                    if (!response.show_form) {\n                        reject(new PaymentMethodInvalidError());\n                    } else {\n                        resolve(response);\n                    }\n                });\n            }));\n    }\n\n    private _authorize(): Promise<any> {\n        return new Promise((resolve, reject) => {\n            if (!this._klarnaCredit) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            this._klarnaCredit.authorize({}, res => {\n                if (res.approved) {\n                    return resolve(res);\n                }\n\n                if (res.show_form) {\n                    return reject(new PaymentMethodCancelledError());\n                }\n\n                reject(new PaymentMethodInvalidError());\n            });\n        });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport KlarnaCredit from './klarna-credit';\nimport KlarnaWindow from './klarna-window';\n\nconst SDK_URL = '//credit.klarnacdn.net/lib/v1/api.js';\n\nexport default class KlarnaScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    load(): Promise<KlarnaCredit> {\n        return this._scriptLoader.loadScript(SDK_URL)\n            .then(() => (window as KlarnaWindow).Klarna.Credit);\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\n\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class LegacyPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options));\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport getCallbackUrl from './get-callback-url';\nimport { Masterpass, MasterpassCheckoutOptions } from './masterpass';\nimport MasterpassScriptLoader from './masterpass-script-loader';\n\nexport default class MasterpassPaymentStrategy implements PaymentStrategy {\n    private _masterpassClient?: Masterpass;\n    private _paymentMethod?: PaymentMethod;\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _masterpassScriptLoader: MasterpassScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId } = options;\n\n        this._paymentMethod = this._store.getState().paymentMethods.getPaymentMethod(methodId);\n\n        if (!this._paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._masterpassScriptLoader.load(this._paymentMethod.config.testMode)\n            .then(masterpass => {\n                this._masterpassClient = masterpass;\n\n                if (!options.masterpass) {\n                    throw new InvalidArgumentError('Unable to initialize payment because \"options.masterpass\" argument is not provided.');\n                }\n\n                const walletButton  = options.masterpass.walletButton && document.getElementById(options.masterpass.walletButton);\n\n                if (walletButton) {\n                    this._walletButton = walletButton;\n                    this._walletButton.addEventListener('click', this._handleWalletButtonClick);\n                }\n\n                return this._store.getState();\n            });\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        if (this._walletButton) {\n            this._walletButton.removeEventListener('click', this._handleWalletButtonClick);\n        }\n\n        this._walletButton = undefined;\n        this._masterpassClient = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const order = { useStoreCredit: payload.useStoreCredit };\n\n        if (!this._paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const gateway = this._paymentMethod.initializationData.gateway;\n\n        // TODO: Refactor the API endpoint to return nonce in the right place.\n        const paymentData = this._paymentMethod.initializationData.paymentData;\n\n        if (!gateway) {\n            throw new InvalidArgumentError('Unable to proceed because \"paymentMethod.initializationData.gateway\" argument is not provided.');\n        }\n\n        // TODO: Redirect to Masterpass if nonce has not been generated yet. And then finalise the order when the shopper is redirected back to the checkout page.\n        if (!paymentData) {\n            throw new InvalidArgumentError('Unable to proceed because \"paymentMethod.initializationData.paymentData\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() => this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(gateway)))\n            .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment({ methodId: gateway, paymentData })));\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _createMasterpassPayload(): MasterpassCheckoutOptions {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const storeConfig = state.config.getStoreConfig();\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!storeConfig) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return {\n            checkoutId: this._paymentMethod.initializationData.checkoutId,\n            allowedCardTypes: this._paymentMethod.initializationData.allowedCardTypes,\n            amount: checkout.subtotal.toFixed(2),\n            currency: storeConfig.currency.code,\n            cartId: checkout.cart.id,\n            suppressShippingAddress: false,\n            callbackUrl: getCallbackUrl('checkout'),\n        };\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event) {\n        event.preventDefault();\n\n        if (!this._masterpassClient) {\n            return;\n        }\n\n        const payload = this._createMasterpassPayload();\n        this._masterpassClient.checkout(payload);\n    }\n}\n","import { omit } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\n\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class NoPaymentDataRequiredPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._orderActionCreator.submitOrder(omit(orderRequest, 'payment'), options)\n        );\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\n\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class OfflinePaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const action = this._orderActionCreator.submitOrder({\n            ...payload,\n            payment: payload.payment ? { methodId: payload.payment.methodId } : undefined,\n        }, options);\n\n        return this._store.dispatch(action);\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\n\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class OffsitePaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n        const orderPayload = this._shouldSubmitFullPayload(payment) ? payload : order;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(orderPayload, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.initializeOffsitePayment({ ...payment, paymentData }))\n            );\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n        const status = state.payment.getPaymentStatus();\n\n        if (order && (status === paymentStatusTypes.ACKNOWLEDGE || status === paymentStatusTypes.FINALIZE)) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _shouldSubmitFullPayload(payment?: OrderPaymentRequestBody): boolean {\n        // FIXME: A temporary workaround to support offsite payment methods\n        // where their return URL needs to be provided by the core app.\n        if (!payment) {\n            return false;\n        }\n\n        return payment.gatewayId === 'adyen' || payment.methodId === 'ccavenuemars';\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\n\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class PaypalProPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._isPaymentAcknowledged()) {\n            return this._store.dispatch(\n                this._orderActionCreator.submitOrder({\n                    ...payload,\n                    payment: payload.payment ? { methodId: payload.payment.methodId } : undefined,\n                }, options)\n            );\n        }\n\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n            );\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _isPaymentAcknowledged(): boolean {\n        const state = this._store.getState();\n\n        return state.payment.getPaymentStatus() === paymentStatusTypes.ACKNOWLEDGE;\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentMethod from '../../payment-method';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\nimport PaymentStrategy from '../payment-strategy';\n\nimport PaypalScriptLoader from './paypal-script-loader';\nimport { PaypalHostWindow, PaypalSDK } from './paypal-sdk';\n\nexport default class PaypalExpressPaymentStrategy implements PaymentStrategy {\n    private _paypalSdk?: PaypalSDK;\n    private _paymentMethod?: PaymentMethod;\n    private _useRedirectFlow: boolean = false;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _scriptLoader: PaypalScriptLoader,\n        private _window: PaypalHostWindow = window\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n\n        this._paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n        this._useRedirectFlow = (options.paypalexpress && options.paypalexpress.useRedirectFlow) === true;\n\n        if (!this._isInContextEnabled()) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._scriptLoader.loadPaypal()\n            .then(paypal => {\n                this._paypalSdk = paypal;\n\n                if (!this._paymentMethod || !this._paymentMethod.config.merchantId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                this._paypalSdk.checkout.setup(this._paymentMethod.config.merchantId, {\n                    button: 'paypal-button',\n                    environment: this._paymentMethod.config.testMode ? 'sandbox' : 'production',\n                });\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._isInContextEnabled() && this._paypalSdk) {\n            this._paypalSdk.checkout.closeFlow();\n            this._paypalSdk = undefined;\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const paypal = this._paypalSdk;\n\n        if (this._isAcknowledgedOrFinalized()) {\n            return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options));\n        }\n\n        if (!this._isInContextEnabled() || this._useRedirectFlow) {\n            return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options))\n                .then(state => {\n                    const redirectUrl = state.payment.getPaymentRedirectUrl();\n\n                    if (redirectUrl) {\n                        this._window.top.location.href = redirectUrl;\n                    }\n\n                    // We need to hold execution so the consumer does not redirect us somewhere else\n                    return new Promise<never>(() => {});\n                });\n        }\n\n        if (!paypal) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        paypal.checkout.initXO();\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options))\n            .then(state => {\n                const redirectUrl = state.payment.getPaymentRedirectUrl();\n\n                if (redirectUrl) {\n                    paypal.checkout.startFlow(redirectUrl);\n                }\n\n                // We need to hold execution so the consumer does not redirect us somewhere else\n                return new Promise<never>(() => {});\n            })\n            .catch(error => {\n                paypal.checkout.closeFlow();\n\n                return Promise.reject(error);\n            });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n\n        if (order && this._isAcknowledgedOrFinalized()) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _isAcknowledgedOrFinalized(): boolean {\n        const state = this._store.getState();\n\n        return state.payment.getPaymentStatus() === paymentStatusTypes.ACKNOWLEDGE\n            || state.payment.getPaymentStatus() === paymentStatusTypes.FINALIZE;\n    }\n\n    private _isInContextEnabled(): boolean {\n        return !!(this._paymentMethod && this._paymentMethod.config.merchantId);\n    }\n}\n","import { some } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { RequestError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\n\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class SagePayPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _formPoster: any\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n            )\n            .catch(error => {\n                if (!(error instanceof RequestError) || !some(error.body.errors, { code: 'three_d_secure_required' })) {\n                    return Promise.reject(error);\n                }\n\n                return new Promise(() => {\n                    this._formPoster.postForm(error.body.three_ds_result.acs_url, {\n                        PaReq: error.body.three_ds_result.payer_auth_request,\n                        TermUrl: error.body.three_ds_result.callback_url,\n                        MD: error.body.three_ds_result.merchant_data,\n                    });\n                });\n            });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n\n        if (order && state.payment.getPaymentStatus() === paymentStatusTypes.FINALIZE) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import StandardError from './standard-error';\n\nexport default class UnsupportedBrowserError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Unsupported browser error');\n\n        this.type = 'unsupported_browser';\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\nimport { omit } from 'lodash';\nimport { noop } from 'rxjs';\n\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    StandardError,\n    TimeoutError,\n    UnsupportedBrowserError,\n} from '../../../common/error/errors';\nimport { toFormUrlEncoded } from '../../../common/http-request';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { NonceInstrument } from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategyActionCreator from '../../payment-strategy-action-creator';\nimport PaymentStrategy from '../payment-strategy';\n\nimport SquarePaymentForm, {\n    CardData,\n    Contact,\n    DigitalWalletType,\n    NonceGenerationError,\n    SquareFormElement,\n    SquareFormOptions,\n    SquarePaymentRequest\n} from './square-form';\nimport SquarePaymentInitializeOptions from './square-payment-initialize-options';\nimport SquareScriptLoader from './square-script-loader';\n\nexport default class SquarePaymentStrategy implements PaymentStrategy {\n    private _deferredRequestNonce?: DeferredPromise;\n    private _paymentForm?: SquarePaymentForm;\n    private _paymentMethod?: PaymentMethod;\n    private _squareOptions?: SquarePaymentInitializeOptions;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _requestSender: RequestSender,\n        private _scriptLoader: SquareScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId } = options;\n\n        this._syncPaymentMethod(methodId);\n\n        return this._scriptLoader.load()\n            .then(createSquareForm =>\n                new Promise((resolve, reject) => {\n                    this._paymentForm = createSquareForm(\n                        this._getFormOptions(options, { resolve, reject })\n                    );\n                    this._paymentForm.build();\n                }))\n            .then(() => this._store.getState());\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment } = orderRequest;\n\n        if (!payment || !payment.methodId) {\n            throw new InvalidArgumentError('Unable to submit payment because \"payload.payment.methodId\" argument is not provided.');\n        }\n\n        this._syncPaymentMethod(payment.methodId);\n\n        return this._getNonceInstrument(payment.methodId)\n            .then(paymentData =>\n                this._store.dispatch(this._orderActionCreator.submitOrder(omit(orderRequest, 'payment'), options))\n                .then(() =>\n                    this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n                ));\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _syncPaymentMethod(methodId: string): void {\n        const state = this._store.getState();\n        this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n    }\n\n    private _getCountryCode(countryName: string) {\n        switch (countryName.toUpperCase()) {\n            case 'NEW ZELAND':\n                return 'NZ';\n            case 'AUSTRALIA':\n                return 'AU';\n            default:\n                return 'US';\n        }\n    }\n\n    private _getNonceInstrument(methodId: string): Promise<NonceInstrument> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n        if (paymentMethod) {\n            const { initializationData } = paymentMethod;\n            if (initializationData && initializationData.paymentData.nonce) {\n                return Promise.resolve({ nonce: paymentMethod.initializationData.paymentData.nonce });\n            }\n        }\n\n        return new Promise<NonceInstrument>((resolve, reject) => {\n            if (!this._paymentForm) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            if (this._deferredRequestNonce) {\n                this._deferredRequestNonce.reject(new TimeoutError());\n            }\n\n            this._deferredRequestNonce = { resolve, reject };\n            this._paymentForm.requestCardNonce();\n        });\n    }\n\n    private _getFormOptions(options: PaymentInitializeOptions, deferred: DeferredPromise): SquareFormOptions {\n        const { square: squareOptions } = options;\n\n        if (!squareOptions || !this._paymentMethod) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.square\" argument is not provided.');\n        }\n\n        this._squareOptions = squareOptions;\n\n        return {\n            ...this._squareOptions,\n            ...this._paymentMethod.initializationData,\n            callbacks: {\n                cardNonceResponseReceived: (errors, nonce, cardData, billingContact, shippingContact) => {\n                    if (cardData && cardData.digital_wallet_type !== DigitalWalletType.none) {\n                        this._handleWalletNonceResponse(errors, nonce, cardData, billingContact, shippingContact);\n                    } else {\n                        this._handleCardNonceResponse(errors, nonce);\n                    }\n                },\n                createPaymentRequest: () => this._paymentRequestPayload(),\n                methodsSupported: methods => {\n                    const { masterpass } = squareOptions;\n\n                    if (masterpass) {\n                        this._showPaymentMethods(methods, masterpass);\n                    }\n                },\n                paymentFormLoaded: () => {\n                    deferred.resolve();\n                    this._setPostalCode();\n                },\n                unsupportedBrowserDetected: () => deferred.reject(new UnsupportedBrowserError()),\n            },\n        };\n    }\n\n    private _handleWalletNonceResponse(\n        errors?: NonceGenerationError[],\n        nonce?: string,\n        cardData?: CardData,\n        billingContact?: Contact,\n        shippingContact?: Contact\n    ): void {\n        const onError = this._squareOptions && this._squareOptions.onError || noop;\n        const onPaymentSelect = this._squareOptions && this._squareOptions.onPaymentSelect || noop;\n\n        if (errors) {\n            onError(errors);\n        } else if (nonce && this._paymentMethod) {\n            this._paymentInstrumentSelected(\n                this._paymentMethod.id,\n                nonce,\n                cardData,\n                billingContact,\n                shippingContact\n            )\n                .then(onPaymentSelect)\n                .catch(onError);\n        }\n    }\n\n    private _handleCardNonceResponse(errors?: NonceGenerationError[], nonce?: string): void {\n        if (!this._deferredRequestNonce) {\n            throw new StandardError();\n        }\n\n        if (nonce && !errors) {\n            this._deferredRequestNonce.resolve({ nonce });\n\n            return;\n        }\n\n        const onError = this._squareOptions && this._squareOptions.onError || noop;\n\n        onError(errors);\n\n        this._deferredRequestNonce.reject(errors);\n    }\n\n    private _paymentInstrumentSelected(\n        methodId: string,\n        nonce?: string,\n        cardData?: CardData,\n        billingContact?: Contact,\n        shippingContact?: Contact): Promise<InternalCheckoutSelectors> {\n\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            return this._setExternalCheckoutData(nonce, cardData, billingContact, shippingContact)\n            .then(() =>\n                Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId)),\n            ]));\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _paymentRequestPayload(): SquarePaymentRequest {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const storeConfig = state.config.getStoreConfig();\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!storeConfig) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        return {\n            requestShippingAddress: true,\n            requestBillingInfo: true,\n            currencyCode: storeConfig.currency.code,\n            countryCode: this._getCountryCode(storeConfig.storeProfile.storeCountry),\n            total: {\n                label: storeConfig.storeProfile.storeName,\n                amount: String(checkout.subtotal),\n                pending: false,\n            },\n        };\n    }\n\n    private _setExternalCheckoutData(nonce?: string, cardData?: CardData, billingContact?: Contact, shippingContact?: Contact): Promise<Response<any>> {\n        return this._requestSender.post('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: toFormUrlEncoded({\n                nonce,\n                provider: 'squarev2',\n                action: 'set_external_checkout',\n                cardData: JSON.stringify(cardData),\n                billingContact: JSON.stringify(billingContact),\n                shippingContact: JSON.stringify(shippingContact),\n            }),\n        });\n    }\n\n    private _setPostalCode(): void {\n        const state = this._store.getState();\n        const billingAddress = state.billingAddress.getBillingAddress();\n\n        if (!this._paymentForm) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (billingAddress && billingAddress.postalCode) {\n            this._paymentForm.setPostalCode(billingAddress.postalCode);\n        }\n    }\n\n    private _showPaymentMethods(methods: { [key: string]: boolean }, element: SquareFormElement): void {\n        const masterpassBtn = document.getElementById(element.elementId);\n\n        if (masterpassBtn && methods.masterpass) {\n            masterpassBtn.style.display = 'inline-block';\n        }\n    }\n}\n\nexport interface DeferredPromise {\n    resolve(resolution?: NonceInstrument): void;\n    reject(reason?: any): void;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { SquareFormFactory, SquareFormOptions } from './square-form';\nimport SquareWindow from './square-window';\n\nexport default class SquareScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    load(): Promise<SquareFormFactory> {\n        const scriptURI = '//js.squareup.com/v2/paymentform';\n\n        return this._scriptLoader.loadScript(scriptURI)\n            .then(() => (options: SquareFormOptions) =>\n                new (window as SquareWindow).SqPaymentForm(options)\n            );\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\n\nimport WepayRisk from './wepay-risk';\nimport WepayWindow from './wepay-window';\n\nconst SCRIPT_SRC = '//static.wepay.com/min/js/risk.1.latest.js';\n\nexport default class WepayRiskClient {\n    private _riskClient?: WepayRisk;\n\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    initialize(): Promise<WepayRiskClient> {\n        return this._scriptLoader\n            .loadScript(SCRIPT_SRC)\n            .then(() => this._riskClient = (window as WepayWindow).WePay.risk)\n            .then(() => this);\n    }\n\n    getRiskToken(): string {\n        if (!this._riskClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        this._riskClient.generate_risk_token();\n\n        return this._riskClient.get_risk_token();\n    }\n}\n","import { merge } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport CreditCardPaymentStrategy from '../credit-card/credit-card-payment-strategy';\n\nimport WepayRiskClient from './wepay-risk-client';\n\nexport default class WepayPaymentStrategy extends CreditCardPaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        orderActionCreator: OrderActionCreator,\n        paymentActionCreator: PaymentActionCreator,\n        private _wepayRiskClient: WepayRiskClient\n    ) {\n        super(store, orderActionCreator, paymentActionCreator);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._wepayRiskClient.initialize();\n\n        return super.initialize(options);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const token = this._wepayRiskClient.getRiskToken();\n        const payloadWithToken = merge({}, payload, {\n            payment: {\n                paymentData: {\n                    deviceSessionId: token,\n                },\n            },\n        });\n\n        return super.execute(payloadWithToken, options);\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../billing';\nimport { CheckoutActionCreator, CheckoutRequestSender, CheckoutStore, CheckoutValidator } from '../checkout';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { OrderActionCreator, OrderRequestSender } from '../order';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../remote-checkout';\n\nimport PaymentActionCreator from './payment-action-creator';\nimport PaymentMethodActionCreator from './payment-method-action-creator';\nimport PaymentMethodRequestSender from './payment-method-request-sender';\nimport PaymentRequestSender from './payment-request-sender';\nimport PaymentStrategyActionCreator from './payment-strategy-action-creator';\nimport PaymentStrategyRegistry from './payment-strategy-registry';\nimport PaymentStrategyType from './payment-strategy-type';\nimport { AfterpayPaymentStrategy, AfterpayScriptLoader } from './strategies/afterpay';\nimport { AmazonPayPaymentStrategy, AmazonPayScriptLoader } from './strategies/amazon-pay';\nimport {\n    createBraintreePaymentProcessor,\n    createBraintreeVisaCheckoutPaymentProcessor,\n    BraintreeCreditCardPaymentStrategy,\n    BraintreePaypalPaymentStrategy,\n    BraintreeScriptLoader,\n    BraintreeSDKCreator,\n    BraintreeVisaCheckoutPaymentStrategy,\n    VisaCheckoutScriptLoader\n} from './strategies/braintree';\nimport { ChasePayPaymentStrategy, ChasePayScriptLoader } from './strategies/chasepay';\nimport { CreditCardPaymentStrategy } from './strategies/credit-card';\nimport {\n    createGooglePayPaymentProcessor,\n    GooglePayBraintreeInitializer,\n    GooglePayPaymentStrategy,\n    GooglePayStripeInitializer\n} from './strategies/googlepay';\nimport { KlarnaPaymentStrategy, KlarnaScriptLoader } from './strategies/klarna';\nimport { LegacyPaymentStrategy } from './strategies/legacy';\nimport { MasterpassPaymentStrategy, MasterpassScriptLoader } from './strategies/masterpass';\nimport { NoPaymentDataRequiredPaymentStrategy } from './strategies/no-payment';\nimport { OfflinePaymentStrategy } from './strategies/offline';\nimport { OffsitePaymentStrategy } from './strategies/offsite';\nimport { PaypalExpressPaymentStrategy, PaypalProPaymentStrategy, PaypalScriptLoader } from './strategies/paypal';\nimport { SagePayPaymentStrategy } from './strategies/sage-pay';\nimport { SquarePaymentStrategy, SquareScriptLoader } from './strategies/square';\nimport { WepayPaymentStrategy, WepayRiskClient } from './strategies/wepay';\n\nexport default function createPaymentStrategyRegistry(\n    store: CheckoutStore,\n    paymentClient: any,\n    requestSender: RequestSender\n) {\n    const registry = new PaymentStrategyRegistry(store, { defaultToken: PaymentStrategyType.CREDIT_CARD });\n    const scriptLoader = getScriptLoader();\n    const billingAddressActionCreator = new BillingAddressActionCreator(new BillingAddressRequestSender(requestSender));\n    const braintreePaymentProcessor = createBraintreePaymentProcessor(scriptLoader);\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const checkoutValidator = new CheckoutValidator(checkoutRequestSender);\n    const orderActionCreator = new OrderActionCreator(new OrderRequestSender(requestSender), checkoutValidator);\n    const paymentActionCreator = new PaymentActionCreator(new PaymentRequestSender(paymentClient), orderActionCreator);\n    const paymentMethodActionCreator = new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender));\n    const remoteCheckoutActionCreator = new RemoteCheckoutActionCreator(new RemoteCheckoutRequestSender(requestSender));\n    const configActionCreator = new ConfigActionCreator(new ConfigRequestSender(requestSender));\n    const checkoutActionCreator = new CheckoutActionCreator(checkoutRequestSender, configActionCreator);\n    const paymentStrategyActionCreator = new PaymentStrategyActionCreator(registry, orderActionCreator);\n\n    registry.register(PaymentStrategyType.AFTERPAY, () =>\n        new AfterpayPaymentStrategy(\n            store,\n            checkoutValidator,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new AfterpayScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.AMAZON, () =>\n        new AmazonPayPaymentStrategy(\n            store,\n            orderActionCreator,\n            billingAddressActionCreator,\n            remoteCheckoutActionCreator,\n            new AmazonPayScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.CREDIT_CARD, () =>\n        new CreditCardPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.KLARNA, () =>\n        new KlarnaPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new KlarnaScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.LEGACY, () =>\n        new LegacyPaymentStrategy(\n            store,\n            orderActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.OFFLINE, () =>\n        new OfflinePaymentStrategy(\n            store,\n            orderActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.OFFSITE, () =>\n        new OffsitePaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.PAYPAL, () =>\n        new PaypalProPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.PAYPAL_EXPRESS, () =>\n        new PaypalExpressPaymentStrategy(\n            store,\n            orderActionCreator,\n            new PaypalScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.PAYPAL_EXPRESS_CREDIT, () =>\n        new PaypalExpressPaymentStrategy(\n            store,\n            orderActionCreator,\n            new PaypalScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.SAGE_PAY, () =>\n        new SagePayPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            createFormPoster()\n        )\n    );\n\n    registry.register(PaymentStrategyType.SQUARE, () =>\n        new SquarePaymentStrategy(\n            store,\n            checkoutActionCreator,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            requestSender,\n            new SquareScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.NO_PAYMENT_DATA_REQUIRED, () =>\n        new NoPaymentDataRequiredPaymentStrategy(\n            store,\n            orderActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.BRAINTREE, () =>\n        new BraintreeCreditCardPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            braintreePaymentProcessor\n        )\n    );\n\n    registry.register(PaymentStrategyType.BRAINTREE_PAYPAL, () =>\n        new BraintreePaypalPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            braintreePaymentProcessor\n        )\n    );\n\n    registry.register(PaymentStrategyType.BRAINTREE_PAYPAL_CREDIT, () =>\n        new BraintreePaypalPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            braintreePaymentProcessor,\n            true\n        )\n    );\n\n    registry.register(PaymentStrategyType.BRAINTREE_VISA_CHECKOUT, () =>\n        new BraintreeVisaCheckoutPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            paymentActionCreator,\n            orderActionCreator,\n            createBraintreeVisaCheckoutPaymentProcessor(scriptLoader, requestSender),\n            new VisaCheckoutScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.CHASE_PAY, () =>\n        new ChasePayPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            requestSender,\n            new ChasePayScriptLoader(scriptLoader),\n            new WepayRiskClient(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.BRAINTREE_GOOGLE_PAY, () =>\n        new GooglePayPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            paymentActionCreator,\n            orderActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayBraintreeInitializer(\n                    new BraintreeSDKCreator(\n                        new BraintreeScriptLoader(scriptLoader)\n                    )\n                )\n            )\n        )\n    );\n\n    registry.register(PaymentStrategyType.WE_PAY, () =>\n        new WepayPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            new WepayRiskClient(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.MASTERPASS, () =>\n        new MasterpassPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            new MasterpassScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.STRIPE_GOOGLE_PAY, () =>\n        new GooglePayPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            paymentActionCreator,\n            orderActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayStripeInitializer()\n            )\n        )\n    );\n\n    return registry;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport BraintreePaymentProcessor from './braintree-payment-processor';\nimport BraintreeScriptLoader from './braintree-script-loader';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\n\nexport default function createBraintreePaymentProcessor(scriptLoader: ScriptLoader) {\n    const braintreeScriptLoader = new BraintreeScriptLoader(scriptLoader);\n    const braintreeSDKCreator = new BraintreeSDKCreator(braintreeScriptLoader);\n\n    return new BraintreePaymentProcessor(braintreeSDKCreator);\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { Address } from '../../address';\nimport { InternalCheckoutSelectors, ReadableCheckoutStore } from '../../checkout';\nimport { addMinutes, isFuture } from '../../common/date-time';\nimport { MissingDataError, MissingDataErrorType } from '../../common/error/errors';\n\nimport { SessionContext, VaultAccessToken } from './instrument';\nimport { DeleteInstrumentAction, InstrumentActionType, LoadInstrumentsAction } from './instrument-actions';\nimport InstrumentRequestSender from './instrument-request-sender';\n\nexport default class InstrumentActionCreator {\n    constructor(\n        private _instrumentRequestSender: InstrumentRequestSender\n    ) {}\n\n    loadInstruments(): ThunkAction<LoadInstrumentsAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<LoadInstrumentsAction>) => {\n            observer.next(createAction(InstrumentActionType.LoadInstrumentsRequested));\n\n            const session = this._getSessionContext(store);\n            const token = this._getCurrentAccessToken(store);\n            const shippingAddress = this._getShippingAddress(store);\n\n            return this._getValidAccessToken(token)\n                .then(currentToken =>\n                    this._instrumentRequestSender.loadInstruments({\n                            ...session,\n                            authToken: currentToken.vaultAccessToken,\n                        },\n                        shippingAddress\n                    )\n                        .then(({ body }) => {\n                            observer.next(createAction(\n                                InstrumentActionType.LoadInstrumentsSucceeded,\n                                body,\n                                currentToken\n                            ));\n                            observer.complete();\n                        })\n                )\n                .catch(response => {\n                    observer.error(createErrorAction(InstrumentActionType.LoadInstrumentsFailed, response));\n                });\n        });\n    }\n\n    deleteInstrument(instrumentId: string): ThunkAction<DeleteInstrumentAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<DeleteInstrumentAction>) => {\n            observer.next(createAction(InstrumentActionType.DeleteInstrumentRequested, undefined, { instrumentId }));\n\n            const session = this._getSessionContext(store);\n            const token = this._getCurrentAccessToken(store);\n\n            return this._getValidAccessToken(token)\n                .then(currentToken =>\n                    this._instrumentRequestSender.deleteInstrument({\n                        ...session,\n                        authToken: currentToken.vaultAccessToken,\n                    }, instrumentId)\n                        .then(({ body }) => {\n                            observer.next(createAction(InstrumentActionType.DeleteInstrumentSucceeded, body, {\n                                instrumentId,\n                                ...currentToken,\n                            }));\n                            observer.complete();\n                        })\n                )\n                .catch(response => {\n                    observer.error(createErrorAction(InstrumentActionType.DeleteInstrumentFailed, response, { instrumentId }));\n                });\n        });\n    }\n\n    private _isValidVaultAccessToken(token: VaultAccessToken): boolean {\n        if (!token || !token.vaultAccessToken) {\n            return false;\n        }\n\n        const expiryBuffer = 2;\n        const expiry = addMinutes(new Date(token.vaultAccessExpiry), expiryBuffer);\n\n        return isFuture(expiry);\n    }\n\n    private _getCurrentAccessToken(store: ReadableCheckoutStore): VaultAccessToken | undefined {\n        const { instruments } = store.getState();\n        const meta = instruments.getInstrumentsMeta();\n\n        if (!meta) {\n            return;\n        }\n\n        return {\n            vaultAccessToken: meta.vaultAccessToken,\n            vaultAccessExpiry: meta.vaultAccessExpiry,\n        };\n    }\n\n    private _getValidAccessToken(token?: VaultAccessToken): Promise<VaultAccessToken> {\n        return token && this._isValidVaultAccessToken(token) ?\n            Promise.resolve(token) :\n            this._instrumentRequestSender.getVaultAccessToken().then(({ body }) => body);\n    }\n\n    private _getShippingAddress(store: ReadableCheckoutStore): Address | undefined {\n        const state = store.getState();\n\n        return state.shippingAddress.getShippingAddress();\n    }\n\n    private _getSessionContext(store: ReadableCheckoutStore): SessionContext {\n        const state = store.getState();\n        const config = state.config.getStoreConfig();\n        const cart = state.cart.getCart();\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        const { customerId } = cart;\n        const { storeId } = config.storeProfile;\n\n        return {\n            customerId,\n            storeId,\n        };\n    }\n}\n","export default function addMinutes(date: Date, amount: number): Date {\n    const newDate = new Date(date.getTime());\n\n    newDate.setMinutes(date.getMinutes() + amount);\n\n    return newDate;\n}\n","export default function isFuture(date: Date): boolean {\n    return date.valueOf() > Date.now();\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport PaymentResponse from '../payment-response';\n\nimport Instrument, { VaultAccessToken } from './instrument';\nimport {\n    InstrumentsResponseBody,\n    InstrumentErrorResponseBody,\n    InternalInstrument,\n    InternalInstrumentsResponseBody,\n    InternalInstrumentErrorResponseBody,\n    InternalVaultAccessTokenResponseBody,\n} from './instrument-response-body';\n\nexport default class InstrumentResponseTransformer {\n    transformResponse(\n        response: PaymentResponse<InternalInstrumentsResponseBody>\n    ): Response<InstrumentsResponseBody> {\n        const { body, ...payload } = this._transformResponse(response);\n\n        return {\n            ...payload,\n            body: {\n                vaultedInstruments: this._transformVaultedInstruments(body.vaulted_instruments),\n            },\n        };\n    }\n\n    transformErrorResponse(\n        response: PaymentResponse<InternalInstrumentErrorResponseBody>\n    ): Response<InstrumentErrorResponseBody> {\n        return this._transformResponse(response);\n    }\n\n    transformVaultAccessResponse(\n        response: Response<InternalVaultAccessTokenResponseBody>\n    ): Response<VaultAccessToken> {\n        return {\n            ...response,\n            body: {\n                vaultAccessToken: response.body.data.token,\n                vaultAccessExpiry: response.body.data.expires_at,\n            },\n        };\n    }\n\n    private _transformVaultedInstruments(vaultedInstruments: InternalInstrument[] = []): Instrument[] {\n        return vaultedInstruments.map(instrument => ({\n            bigpayToken: instrument.bigpay_token,\n            defaultInstrument: instrument.default_instrument,\n            provider: instrument.provider,\n            iin: instrument.iin,\n            last4: instrument.last_4,\n            expiryMonth: instrument.expiry_month,\n            expiryYear: instrument.expiry_year,\n            brand: instrument.brand,\n            trustedShippingAddress: instrument.trusted_shipping_address,\n        }));\n    }\n\n    private _transformResponse<T>(response: PaymentResponse<T>): Response<T> {\n        const { data: body, ...payload } = response;\n\n        return {\n            ...payload,\n            body,\n        };\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { mapToInternalAddress, Address } from '../../address';\nimport { RequestOptions } from '../../common/http-request';\nimport PaymentResponse from '../payment-response';\n\nimport { InstrumentRequestContext, VaultAccessToken } from './instrument';\nimport {\n    InstrumentsResponseBody,\n    InternalInstrumentsResponseBody,\n    InternalInstrumentErrorResponseBody,\n} from './instrument-response-body';\nimport InstrumentResponseTransformer from './instrument-response-transformer';\n\nexport default class InstrumentRequestSender {\n    private _transformer: InstrumentResponseTransformer;\n\n    constructor(\n        private _client: any,\n        private _requestSender: RequestSender\n    ) {\n        this._transformer = new InstrumentResponseTransformer();\n    }\n\n    getVaultAccessToken(\n        { timeout }: RequestOptions = {}\n    ): Promise<Response<VaultAccessToken>> {\n        const url = '/internalapi/v1/checkout/payments/vault-access-token';\n\n        return this._requestSender.get(url, { timeout }).then(response => ({\n            ...response,\n            body: {\n                vaultAccessToken: response.body.data.token,\n                vaultAccessExpiry: response.body.data.expires_at,\n            },\n        }));\n    }\n\n    loadInstruments(\n        requestContext: InstrumentRequestContext,\n        shippingAddress?: Address\n    ): Promise<Response<InstrumentsResponseBody>> {\n        return (shippingAddress) ?\n            this._loadInstrumentsWithAddress(requestContext, shippingAddress) :\n            this._loadInstruments(requestContext);\n    }\n\n    deleteInstrument(\n        requestContext: InstrumentRequestContext,\n        instrumentId: string\n    ): Promise<Response<InstrumentsResponseBody>> {\n        const payload = {\n            ...requestContext,\n            instrumentId,\n        };\n\n        return new Promise((resolve, reject) => {\n            this._client.deleteShopperInstrument(\n                payload, (\n                    errorResponse: PaymentResponse<InternalInstrumentErrorResponseBody>,\n                    response: PaymentResponse<InternalInstrumentsResponseBody>\n                ) =>  errorResponse ?\n                    reject(this._transformer.transformErrorResponse(errorResponse)) :\n                    resolve(this._transformer.transformResponse(response))\n            );\n        });\n    }\n\n    private _loadInstruments(\n        requestContext: InstrumentRequestContext\n    ): Promise<Response<InstrumentsResponseBody>> {\n        return new Promise((resolve, reject) => {\n            this._client.loadInstruments(\n                requestContext, (\n                    errorResponse: PaymentResponse<InternalInstrumentErrorResponseBody>,\n                    response: PaymentResponse<InternalInstrumentsResponseBody>\n                ) => errorResponse ?\n                    reject(this._transformer.transformErrorResponse(errorResponse)) :\n                    resolve(this._transformer.transformResponse(response))\n            );\n        });\n    }\n\n    private _loadInstrumentsWithAddress(\n        requestContext: InstrumentRequestContext,\n        shippingAddress: Address\n    ): Promise<Response<InstrumentsResponseBody>> {\n        const payload = {\n            ...requestContext,\n            shippingAddress: mapToInternalAddress(shippingAddress),\n        };\n\n        return new Promise((resolve, reject) => {\n            this._client.loadInstrumentsWithAddress(\n                payload, (\n                    errorResponse: PaymentResponse<InternalInstrumentErrorResponseBody>,\n                    response: PaymentResponse<InternalInstrumentsResponseBody>\n                ) => errorResponse ?\n                    reject(this._transformer.transformErrorResponse(errorResponse)) :\n                    resolve(this._transformer.transformResponse(response))\n            );\n        });\n    }\n}\n","import { Address } from '../address';\nimport { BillingAddress, BillingAddressSelector } from '../billing';\nimport { Cart, CartSelector } from '../cart';\nimport { selector } from '../common/selector';\nimport { ConfigSelector } from '../config';\nimport { StoreConfig } from '../config/config';\nimport { Coupon, CouponSelector, GiftCertificate, GiftCertificateSelector } from '../coupon';\nimport { Customer, CustomerSelector } from '../customer';\nimport { FormField, FormSelector } from '../form';\nimport { Country, CountrySelector } from '../geography';\nimport { Order, OrderSelector } from '../order';\nimport { PaymentMethod, PaymentMethodSelector, PaymentSelector } from '../payment';\nimport { Instrument, InstrumentSelector } from '../payment/instrument';\nimport {\n    Consignment,\n    ConsignmentSelector,\n    ShippingAddressSelector,\n    ShippingCountrySelector,\n    ShippingOption,\n} from '../shipping';\n\nimport Checkout from './checkout';\nimport CheckoutSelector from './checkout-selector';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for getting the state of the current checkout.\n *\n * This object has a set of methods that allow you to get a specific piece of\n * checkout information, such as shipping and billing details.\n */\n@selector\nexport default class CheckoutStoreSelector {\n    private _billingAddress: BillingAddressSelector;\n    private _cart: CartSelector;\n    private _checkout: CheckoutSelector;\n    private _config: ConfigSelector;\n    private _consignments: ConsignmentSelector;\n    private _countries: CountrySelector;\n    private _coupons: CouponSelector;\n    private _customer: CustomerSelector;\n    private _form: FormSelector;\n    private _giftCertificates: GiftCertificateSelector;\n    private _instruments: InstrumentSelector;\n    private _order: OrderSelector;\n    private _payment: PaymentSelector;\n    private _paymentMethods: PaymentMethodSelector;\n    private _shippingAddress: ShippingAddressSelector;\n    private _shippingCountries: ShippingCountrySelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._billingAddress = selectors.billingAddress;\n        this._cart = selectors.cart;\n        this._checkout = selectors.checkout;\n        this._config = selectors.config;\n        this._consignments = selectors.consignments;\n        this._countries = selectors.countries;\n        this._coupons = selectors.coupons;\n        this._customer = selectors.customer;\n        this._form = selectors.form;\n        this._giftCertificates = selectors.giftCertificates;\n        this._instruments = selectors.instruments;\n        this._order = selectors.order;\n        this._payment = selectors.payment;\n        this._paymentMethods = selectors.paymentMethods;\n        this._shippingAddress = selectors.shippingAddress;\n        this._shippingCountries = selectors.shippingCountries;\n    }\n\n    /**\n     * Gets the current checkout.\n     *\n     * @returns The current checkout if it is loaded, otherwise undefined.\n     */\n    getCheckout(): Checkout | undefined {\n        return this._checkout.getCheckout();\n    }\n\n    /**\n     * Gets the current order.\n     *\n     * @returns The current order if it is loaded, otherwise undefined.\n     */\n    getOrder(): Order | undefined {\n        return this._order.getOrder();\n    }\n\n    /**\n     * Gets the checkout configuration of a store.\n     *\n     * @returns The configuration object if it is loaded, otherwise undefined.\n     */\n    getConfig(): StoreConfig | undefined {\n        return this._config.getStoreConfig();\n    }\n\n    /**\n     * Gets the shipping address of the current checkout.\n     *\n     * If the address is partially complete, it may not have shipping options\n     * associated with it.\n     *\n     * @returns The shipping address object if it is loaded, otherwise\n     * undefined.\n     */\n    getShippingAddress(): Address | undefined {\n        const shippingAddress = this._shippingAddress.getShippingAddress();\n        const context = this._config.getContextConfig();\n\n        if (!shippingAddress) {\n            if (!context || !context.geoCountryCode) {\n                return;\n            }\n\n            return {\n                firstName: '',\n                lastName: '',\n                company: '',\n                address1: '',\n                address2: '',\n                city: '',\n                stateOrProvince: '',\n                stateOrProvinceCode: '',\n                postalCode: '',\n                country: '',\n                phone: '',\n                customFields: [],\n                countryCode: context.geoCountryCode,\n            };\n        }\n\n        return shippingAddress;\n    }\n\n    /**\n     * Gets a list of shipping options available for the shipping address.\n     *\n     * If there is no shipping address assigned to the current checkout, the\n     * list of shipping options will be empty.\n     *\n     * @returns The list of shipping options if any, otherwise undefined.\n     */\n    getShippingOptions(): ShippingOption[] | undefined {\n        const consignments = this._consignments.getConsignments();\n\n        if (consignments && consignments.length) {\n            return consignments[0].availableShippingOptions;\n        }\n\n        return;\n    }\n\n    /**\n     * Gets a list of consignments.\n     *\n     * If there are no consignments created for to the current checkout, the\n     * list will be empty.\n     *\n     * @returns The list of consignments if any, otherwise undefined.\n     */\n    getConsignments(): Consignment[] | undefined {\n        return this._consignments.getConsignments();\n    }\n\n    /**\n     * Gets the selected shipping option for the current checkout.\n     *\n     * @returns The shipping option object if there is a selected option,\n     * otherwise undefined.\n     */\n    getSelectedShippingOption(): ShippingOption | undefined {\n        const consignments = this._consignments.getConsignments();\n\n        if (!consignments || !consignments.length) {\n            return;\n        }\n\n        return consignments[0].selectedShippingOption;\n    }\n\n    /**\n     * Gets a list of countries available for shipping.\n     *\n     * @returns The list of countries if it is loaded, otherwise undefined.\n     */\n    getShippingCountries(): Country[] | undefined {\n        return this._shippingCountries.getShippingCountries();\n    }\n\n    /**\n     * Gets the billing address of an order.\n     *\n     * @returns The billing address object if it is loaded, otherwise undefined.\n     */\n    getBillingAddress(): BillingAddress | undefined {\n        return this._billingAddress.getBillingAddress();\n    }\n\n    /**\n     * Gets a list of countries available for billing.\n     *\n     * @returns The list of countries if it is loaded, otherwise undefined.\n     */\n    getBillingCountries(): Country[] | undefined {\n        return this._countries.getCountries();\n    }\n\n    /**\n     * Gets a list of payment methods available for checkout.\n     *\n     * @returns The list of payment methods if it is loaded, otherwise undefined.\n     */\n    getPaymentMethods(): PaymentMethod[] | undefined {\n        return this._paymentMethods.getPaymentMethods();\n    }\n\n    /**\n     * Gets a payment method by an id.\n     *\n     * The method returns undefined if unable to find a payment method with the\n     * specified id, either because it is not available for the customer, or it\n     * is not loaded.\n     *\n     * @param methodId - The identifier of the payment method.\n     * @param gatewayId - The identifier of a payment provider providing the\n     * payment method.\n     * @returns The payment method object if loaded and available, otherwise,\n     * undefined.\n     */\n    getPaymentMethod(methodId: string, gatewayId?: string): PaymentMethod | undefined {\n        return this._paymentMethods.getPaymentMethod(methodId, gatewayId);\n    }\n\n    /**\n     * Gets the payment method that is selected for checkout.\n     *\n     * @returns The payment method object if there is a selected method;\n     * undefined if otherwise.\n     */\n    getSelectedPaymentMethod(): PaymentMethod | undefined {\n        const payment = this._payment.getPaymentId();\n\n        return payment && this._paymentMethods.getPaymentMethod(payment.providerId, payment.gatewayId);\n    }\n\n    /**\n     * Gets the current cart.\n     *\n     * @returns The current cart object if it is loaded, otherwise undefined.\n     */\n    getCart(): Cart | undefined {\n        return this._cart.getCart();\n    }\n\n    /**\n     * Gets a list of coupons that are applied to the current checkout.\n     *\n     * @returns The list of applied coupons if there is any, otherwise undefined.\n     */\n    getCoupons(): Coupon[] | undefined {\n        return this._coupons.getCoupons();\n    }\n\n    /**\n     * Gets a list of gift certificates that are applied to the current checkout.\n     *\n     * @returns The list of applied gift certificates if there is any, otherwise undefined.\n     */\n    getGiftCertificates(): GiftCertificate[] | undefined {\n        return this._giftCertificates.getGiftCertificates();\n    }\n\n    /**\n     * Gets the current customer.\n     *\n     * @returns The current customer object if it is loaded, otherwise\n     * undefined.\n     */\n    getCustomer(): Customer | undefined {\n        return this._customer.getCustomer();\n    }\n\n    /**\n     * Checks if payment data is required or not.\n     *\n     * If payment data is required, customers should be prompted to enter their\n     * payment details.\n     *\n     * ```js\n     * if (state.checkout.isPaymentDataRequired()) {\n     *     // Render payment form\n     * } else {\n     *     // Render \"Payment is not required for this order\" message\n     * }\n     * ```\n     *\n     * @param useStoreCredit - If true, check whether payment data is required\n     * with store credit applied; otherwise, check without store credit.\n     * @returns True if payment data is required, otherwise false.\n     */\n    isPaymentDataRequired(useStoreCredit?: boolean): boolean {\n        return this._payment.isPaymentDataRequired(useStoreCredit);\n    }\n\n    /**\n     * Checks if payment data is submitted or not.\n     *\n     * If payment data is already submitted using a payment method, customers\n     * should not be prompted to enter their payment details again.\n     *\n     * @param methodId - The identifier of the payment method.\n     * @param gatewayId - The identifier of a payment provider providing the\n     * payment method.\n     * @returns True if payment data is submitted, otherwise false.\n     */\n    isPaymentDataSubmitted(methodId: string, gatewayId?: string): boolean {\n        return this._payment.isPaymentDataSubmitted(this.getPaymentMethod(methodId, gatewayId));\n    }\n\n    /**\n     * Gets a list of payment instruments associated with the current customer.\n     *\n     * @returns The list of payment instruments if it is loaded, otherwise undefined.\n     */\n    getInstruments(): Instrument[] | undefined {\n        return this._instruments.getInstruments();\n    }\n\n    /**\n     * Gets a set of form fields that should be presented to customers in order\n     * to capture their billing address for a specific country.\n     *\n     * @param countryCode - A 2-letter country code (ISO 3166-1 alpha-2).\n     * @returns The set of billing address form fields if it is loaded,\n     * otherwise undefined.\n     */\n    getBillingAddressFields(countryCode: string): FormField[] {\n        return this._form.getBillingAddressFields(this.getBillingCountries(), countryCode);\n    }\n\n    /**\n     * Gets a set of form fields that should be presented to customers in order\n     * to capture their shipping address for a specific country.\n     *\n     * @param countryCode - A 2-letter country code (ISO 3166-1 alpha-2).\n     * @returns The set of shipping address form fields if it is loaded,\n     * otherwise undefined.\n     */\n    getShippingAddressFields(countryCode: string): FormField[] {\n        return this._form.getShippingAddressFields(this.getShippingCountries(), countryCode);\n    }\n}\n","import { BillingAddressSelector } from '../billing';\nimport { CartSelector } from '../cart';\nimport { RequestError } from '../common/error/errors';\nimport { selector } from '../common/selector';\nimport { ConfigSelector } from '../config';\nimport { CouponSelector, GiftCertificateSelector } from '../coupon';\nimport { CustomerStrategySelector } from '../customer';\nimport { CountrySelector } from '../geography';\nimport { OrderSelector } from '../order';\nimport { PaymentMethodSelector, PaymentStrategySelector } from '../payment';\nimport { InstrumentSelector } from '../payment/instrument';\nimport { ConsignmentSelector, ShippingCountrySelector, ShippingStrategySelector } from '../shipping';\n\nimport CheckoutSelector from './checkout-selector';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for getting the error of any asynchronous checkout action, if\n * there is any.\n *\n * This object has a set of getters that would return an error if an action is\n * not executed successfully. For example, if you are unable to submit an order,\n * you can use this object to retrieve the reason for the failure.\n */\n@selector\nexport default class CheckoutStoreErrorSelector {\n    private _billingAddress: BillingAddressSelector;\n    private _cart: CartSelector;\n    private _checkout: CheckoutSelector;\n    private _config: ConfigSelector;\n    private _consignments: ConsignmentSelector;\n    private _countries: CountrySelector;\n    private _coupons: CouponSelector;\n    private _customerStrategies: CustomerStrategySelector;\n    private _giftCertificates: GiftCertificateSelector;\n    private _instruments: InstrumentSelector;\n    private _order: OrderSelector;\n    private _paymentMethods: PaymentMethodSelector;\n    private _paymentStrategies: PaymentStrategySelector;\n    private _shippingCountries: ShippingCountrySelector;\n    private _shippingStrategies: ShippingStrategySelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._billingAddress = selectors.billingAddress;\n        this._cart = selectors.cart;\n        this._checkout = selectors.checkout;\n        this._config = selectors.config;\n        this._consignments = selectors.consignments;\n        this._countries = selectors.countries;\n        this._coupons = selectors.coupons;\n        this._customerStrategies = selectors.customerStrategies;\n        this._giftCertificates = selectors.giftCertificates;\n        this._instruments = selectors.instruments;\n        this._order = selectors.order;\n        this._paymentMethods = selectors.paymentMethods;\n        this._paymentStrategies = selectors.paymentStrategies;\n        this._shippingCountries = selectors.shippingCountries;\n        this._shippingStrategies = selectors.shippingStrategies;\n    }\n\n    /**\n     * Gets the error of any checkout action that has failed.\n     *\n     * @returns The error object if unable to perform any checkout action,\n     * otherwise undefined.\n     */\n    getError(): Error | undefined {\n        // tslint:disable-next-line:cyclomatic-complexity\n        return this.getLoadCheckoutError() ||\n            this.getSubmitOrderError() ||\n            this.getFinalizeOrderError() ||\n            this.getLoadOrderError() ||\n            this.getLoadCartError() ||\n            this.getLoadBillingCountriesError() ||\n            this.getLoadShippingCountriesError() ||\n            this.getLoadPaymentMethodsError() ||\n            this.getLoadPaymentMethodError() ||\n            this.getInitializePaymentError() ||\n            this.getLoadShippingOptionsError() ||\n            this.getSelectShippingOptionError() ||\n            this.getSignInError() ||\n            this.getSignOutError() ||\n            this.getInitializeCustomerError() ||\n            this.getUpdateShippingAddressError() ||\n            this.getUpdateBillingAddressError() ||\n            this.getContinueAsGuestError() ||\n            this.getUpdateConsignmentError() ||\n            this.getCreateConsignmentsError() ||\n            this.getDeleteConsignmentError() ||\n            this.getInitializeShippingError() ||\n            this.getApplyCouponError() ||\n            this.getRemoveCouponError() ||\n            this.getApplyGiftCertificateError() ||\n            this.getRemoveGiftCertificateError() ||\n            this.getLoadInstrumentsError() ||\n            this.getDeleteInstrumentError() ||\n            this.getLoadConfigError();\n    }\n\n    /**\n     * Returns an error if unable to load the current checkout.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadCheckoutError(): Error | undefined {\n        return this._checkout.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to update the current checkout.\n     *\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateCheckoutError(): Error | undefined {\n        return this._checkout.getUpdateError();\n    }\n\n    /**\n     * Returns an error if unable to submit the current order.\n     *\n     * @returns The error object if unable to submit, otherwise undefined.\n     */\n    getSubmitOrderError(): Error | undefined {\n        return this._paymentStrategies.getExecuteError();\n    }\n\n    /**\n     * Returns an error if unable to finalize the current order.\n     *\n     * @returns The error object if unable to finalize, otherwise undefined.\n     */\n    getFinalizeOrderError(): Error | undefined {\n        return this._paymentStrategies.getFinalizeError();\n    }\n\n    /**\n     * Returns an error if unable to load the current order.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadOrderError(): Error | undefined {\n        return this._order.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to load the current cart.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadCartError(): Error | undefined {\n        return this._cart.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to load billing countries.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadBillingCountriesError(): Error | undefined {\n        return this._countries.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to load shipping countries.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadShippingCountriesError(): Error | undefined {\n        return this._shippingCountries.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to load payment methods.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadPaymentMethodsError(): Error | undefined {\n        return this._paymentMethods.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to load a specific payment method.\n     *\n     * @param methodId - The identifier of the payment method to load.\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadPaymentMethodError(methodId?: string): Error | undefined {\n        return this._paymentMethods.getLoadMethodError(methodId);\n    }\n\n    /**\n     * Returns an error if unable to initialize a specific payment method.\n     *\n     * @param methodId - The identifier of the payment method to initialize.\n     * @returns The error object if unable to initialize, otherwise undefined.\n     */\n    getInitializePaymentError(methodId?: string): Error | undefined {\n        return this._paymentStrategies.getInitializeError(methodId);\n    }\n\n    /**\n     * Returns an error if unable to sign in.\n     *\n     * @returns The error object if unable to sign in, otherwise undefined.\n     */\n    getSignInError(): Error | undefined {\n        return this._customerStrategies.getSignInError();\n    }\n\n    /**\n     * Returns an error if unable to sign out.\n     *\n     * @returns The error object if unable to sign out, otherwise undefined.\n     */\n    getSignOutError(): Error | undefined {\n        return this._customerStrategies.getSignOutError();\n    }\n\n    /**\n     * Returns an error if unable to initialize the customer step of a checkout\n     * process.\n     *\n     * @param methodId - The identifer of the initialization method to execute.\n     * @returns The error object if unable to initialize, otherwise undefined.\n     */\n    getInitializeCustomerError(methodId?: string): Error | undefined {\n        return this._customerStrategies.getInitializeError(methodId);\n    }\n\n    /**\n     * Returns an error if unable to load shipping options.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadShippingOptionsError(): Error | undefined {\n        return this._consignments.getLoadShippingOptionsError();\n    }\n\n    /**\n     * Returns an error if unable to select a shipping option.\n     *\n     * A consignment ID should be provided when checking for an error for a\n     * specific consignment, otherwise it will check for all available consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns The error object if unable to select, otherwise undefined.\n     */\n    getSelectShippingOptionError(consignmentId?: string): Error | undefined {\n        return this._shippingStrategies.getSelectOptionError() ||\n            this._consignments.getUpdateShippingOptionError(consignmentId);\n    }\n\n    /**\n     * Returns an error if unable to continue as guest.\n     *\n     * @returns The error object if unable to continue, otherwise undefined.\n     */\n    getContinueAsGuestError(): Error | undefined {\n        return this._billingAddress.getContinueAsGuestError();\n    }\n\n    /**\n     * Returns an error if unable to update billing address.\n     *\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateBillingAddressError(): Error | undefined {\n        return this._billingAddress.getUpdateError();\n    }\n\n    /**\n     * Returns an error if unable to update shipping address.\n     *\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateShippingAddressError(): Error | undefined {\n        return this._shippingStrategies.getUpdateAddressError();\n    }\n\n    /**\n     * Returns an error if unable to delete a consignment.\n     *\n     * A consignment ID should be provided when checking for an error for a\n     * specific consignment, otherwise it will check for all available consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns The error object if unable to delete, otherwise undefined.\n     */\n    getDeleteConsignmentError(consignmentId?: string): Error | undefined {\n        return this._consignments.getDeleteError(consignmentId);\n    }\n\n    /**\n     * Returns an error if unable to update a consignment.\n     *\n     * A consignment ID should be provided when checking for an error for a\n     * specific consignment, otherwise it will check for all available consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateConsignmentError(consignmentId?: string): Error | undefined {\n        return this._consignments.getUpdateError(consignmentId);\n    }\n\n    /**\n     * Returns an error if unable to create consignments.\n     *\n     * @returns The error object if unable to create, otherwise undefined.\n     */\n    getCreateConsignmentsError(): Error | undefined {\n        return this._consignments.getCreateError();\n    }\n\n    /**\n     * Returns an error if unable to initialize the shipping step of a checkout\n     * process.\n     *\n     * @param methodId - The identifer of the initialization method to execute.\n     * @returns The error object if unable to initialize, otherwise undefined.\n     */\n    getInitializeShippingError(methodId?: string): Error | undefined {\n        return this._shippingStrategies.getInitializeError(methodId);\n    }\n\n    /**\n     * Returns an error if unable to apply a coupon code.\n     *\n     * @returns The error object if unable to apply, otherwise undefined.\n     */\n    getApplyCouponError(): RequestError | undefined {\n        return this._coupons.getApplyError();\n    }\n\n    /**\n     * Returns an error if unable to remove a coupon code.\n     *\n     * @returns The error object if unable to remove, otherwise undefined.\n     */\n    getRemoveCouponError(): RequestError | undefined {\n        return this._coupons.getRemoveError();\n    }\n\n    /**\n     * Returns an error if unable to apply a gift certificate.\n     *\n     * @returns The error object if unable to apply, otherwise undefined.\n     */\n    getApplyGiftCertificateError(): RequestError | undefined {\n        return this._giftCertificates.getApplyError();\n    }\n\n    /**\n     * Returns an error if unable to remove a gift certificate.\n     *\n     * @returns The error object if unable to remove, otherwise undefined.\n     */\n    getRemoveGiftCertificateError(): RequestError | undefined {\n        return this._giftCertificates.getRemoveError();\n    }\n\n    /**\n     * Returns an error if unable to load payment instruments.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadInstrumentsError(): Error | undefined {\n        return this._instruments.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to delete a payment instrument.\n     *\n     * @param instrumentId - The identifier of the payment instrument to delete.\n     * @returns The error object if unable to delete, otherwise undefined.\n     */\n    getDeleteInstrumentError(instrumentId?: string): Error | undefined {\n        return this._instruments.getDeleteError(instrumentId);\n    }\n\n    /**\n     * Returns an error if unable to load the checkout configuration of a store.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadConfigError(): Error | undefined {\n        return this._config.getLoadError();\n    }\n}\n","import { BillingAddressSelector } from '../billing';\nimport { CartSelector } from '../cart';\nimport { selector } from '../common/selector';\nimport { ConfigSelector } from '../config';\nimport { CouponSelector, GiftCertificateSelector } from '../coupon';\nimport { CustomerStrategySelector } from '../customer';\nimport { CountrySelector } from '../geography';\nimport { OrderSelector } from '../order';\nimport { PaymentMethodSelector, PaymentStrategySelector } from '../payment';\nimport { InstrumentSelector } from '../payment/instrument';\nimport { ConsignmentSelector, ShippingCountrySelector, ShippingStrategySelector } from '../shipping';\n\nimport CheckoutSelector from './checkout-selector';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for checking the statuses of various asynchronous actions related\n * to checkout.\n *\n * This object has a set of getters that return true if an action is in\n * progress. For example, you can check whether a customer is submitting an\n * order and waiting for the request to complete.\n */\n@selector\nexport default class CheckoutStoreStatusSelector {\n    private _billingAddress: BillingAddressSelector;\n    private _cart: CartSelector;\n    private _checkout: CheckoutSelector;\n    private _config: ConfigSelector;\n    private _consignments: ConsignmentSelector;\n    private _countries: CountrySelector;\n    private _coupons: CouponSelector;\n    private _customerStrategies: CustomerStrategySelector;\n    private _giftCertificates: GiftCertificateSelector;\n    private _instruments: InstrumentSelector;\n    private _order: OrderSelector;\n    private _paymentMethods: PaymentMethodSelector;\n    private _paymentStrategies: PaymentStrategySelector;\n    private _shippingCountries: ShippingCountrySelector;\n    private _shippingStrategies: ShippingStrategySelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._billingAddress = selectors.billingAddress;\n        this._cart = selectors.cart;\n        this._checkout = selectors.checkout;\n        this._config = selectors.config;\n        this._consignments = selectors.consignments;\n        this._countries = selectors.countries;\n        this._coupons = selectors.coupons;\n        this._customerStrategies = selectors.customerStrategies;\n        this._giftCertificates = selectors.giftCertificates;\n        this._instruments = selectors.instruments;\n        this._order = selectors.order;\n        this._paymentMethods = selectors.paymentMethods;\n        this._paymentStrategies = selectors.paymentStrategies;\n        this._shippingCountries = selectors.shippingCountries;\n        this._shippingStrategies = selectors.shippingStrategies;\n    }\n\n    /**\n     * Checks whether any checkout action is pending.\n     *\n     * @returns True if there is a pending action, otherwise false.\n     */\n    isPending(): boolean {\n        // tslint:disable-next-line:cyclomatic-complexity\n        return this.isLoadingCheckout() ||\n            this.isSubmittingOrder() ||\n            this.isFinalizingOrder() ||\n            this.isLoadingOrder() ||\n            this.isLoadingCart() ||\n            this.isLoadingBillingCountries() ||\n            this.isLoadingShippingCountries() ||\n            this.isLoadingPaymentMethods() ||\n            this.isLoadingPaymentMethod() ||\n            this.isInitializingPayment() ||\n            this.isLoadingShippingOptions() ||\n            this.isSelectingShippingOption() ||\n            this.isSigningIn() ||\n            this.isSigningOut() ||\n            this.isInitializingCustomer() ||\n            this.isUpdatingBillingAddress() ||\n            this.isContinuingAsGuest() ||\n            this.isUpdatingShippingAddress() ||\n            this.isUpdatingConsignment() ||\n            this.isCreatingConsignments() ||\n            this.isDeletingConsignment() ||\n            this.isInitializingShipping() ||\n            this.isApplyingCoupon() ||\n            this.isRemovingCoupon() ||\n            this.isApplyingGiftCertificate() ||\n            this.isRemovingGiftCertificate() ||\n            this.isLoadingInstruments() ||\n            this.isDeletingInstrument() ||\n            this.isLoadingConfig() ||\n            this.isCustomerStepPending() ||\n            this.isPaymentStepPending();\n    }\n\n    /**\n     * Checks whether the current checkout is loading.\n     *\n     * @returns True if the current checkout is loading, otherwise false.\n     */\n    isLoadingCheckout(): boolean {\n        return this._checkout.isLoading();\n    }\n\n    /**\n     * Checks whether the current checkout is being updated.\n     *\n     * @returns True if the current checkout is being updated, otherwise false.\n     */\n    isUpdatingCheckout(): boolean {\n        return this._checkout.isUpdating();\n    }\n\n    /**\n     * Checks whether the current order is submitting.\n     *\n     * @returns True if the current order is submitting, otherwise false.\n     */\n    isSubmittingOrder(): boolean {\n        return this._paymentStrategies.isExecuting();\n    }\n\n    /**\n     * Checks whether the current order is finalizing.\n     *\n     * @returns True if the current order is finalizing, otherwise false.\n     */\n    isFinalizingOrder(): boolean {\n        return this._paymentStrategies.isFinalizing();\n    }\n\n    /**\n     * Checks whether the current order is loading.\n     *\n     * @returns True if the current order is loading, otherwise false.\n     */\n    isLoadingOrder(): boolean {\n        return this._order.isLoading();\n    }\n\n    /**\n     * Checks whether the current cart is loading.\n     *\n     * @returns True if the current cart is loading, otherwise false.\n     */\n    isLoadingCart(): boolean {\n        return this._cart.isLoading();\n    }\n\n    /**\n     * Checks whether billing countries are loading.\n     *\n     * @returns True if billing countries are loading, otherwise false.\n     */\n    isLoadingBillingCountries(): boolean {\n        return this._countries.isLoading();\n    }\n\n    /**\n     * Checks whether shipping countries are loading.\n     *\n     * @returns True if shipping countries are loading, otherwise false.\n     */\n    isLoadingShippingCountries(): boolean {\n        return this._shippingCountries.isLoading();\n    }\n\n    /**\n     * Checks whether payment methods are loading.\n     *\n     * @returns True if payment methods are loading, otherwise false.\n     */\n    isLoadingPaymentMethods(): boolean {\n        return this._paymentMethods.isLoading();\n    }\n\n    /**\n     * Checks whether a specific or any payment method is loading.\n     *\n     * The method returns true if no ID is provided and at least one payment\n     * method is loading.\n     *\n     * @param methodId - The identifier of the payment method to check.\n     * @returns True if the payment method is loading, otherwise false.\n     */\n    isLoadingPaymentMethod(methodId?: string): boolean {\n        return this._paymentMethods.isLoadingMethod(methodId);\n    }\n\n    /**\n     * Checks whether a specific or any payment method is initializing.\n     *\n     * The method returns true if no ID is provided and at least one payment\n     * method is initializing.\n     *\n     * @param methodId - The identifier of the payment method to check.\n     * @returns True if the payment method is initializing, otherwise false.\n     */\n    isInitializingPayment(methodId?: string): boolean {\n        return this._paymentStrategies.isInitializing(methodId);\n    }\n\n    /**\n     * Checks whether the current customer is signing in.\n     *\n     * If an ID is provided, the method also checks whether the customer is\n     * signing in using a specific customer method with the same ID.\n     *\n     * @param methodId - The identifier of the method used for signing in the\n     * current customer.\n     * @returns True if the customer is signing in, otherwise false.\n     */\n    isSigningIn(methodId?: string): boolean {\n        return this._customerStrategies.isSigningIn(methodId);\n    }\n\n    /**\n     * Checks whether the current customer is signing out.\n     *\n     * If an ID is provided, the method also checks whether the customer is\n     * signing out using a specific customer method with the same ID.\n     *\n     * @param methodId - The identifier of the method used for signing out the\n     * current customer.\n     * @returns True if the customer is signing out, otherwise false.\n     */\n    isSigningOut(methodId?: string): boolean {\n        return this._customerStrategies.isSigningOut(methodId);\n    }\n\n    /**\n     * Checks whether the customer step is initializing.\n     *\n     * If an ID is provided, the method also checks whether the customer step is\n     * initializing using a specific customer method with the same ID.\n     *\n     * @param methodId - The identifier of the method used for initializing the\n     * customer step of checkout.\n     * @returns True if the customer step is initializing, otherwise false.\n     */\n    isInitializingCustomer(methodId?: string): boolean {\n        return this._customerStrategies.isInitializing(methodId);\n    }\n\n    /**\n     * Checks whether shipping options are loading.\n     *\n     * @returns True if shipping options are loading, otherwise false.\n     */\n    isLoadingShippingOptions(): boolean {\n        return this._consignments.isLoadingShippingOptions();\n    }\n\n    /**\n     * Checks whether a shipping option is being selected.\n     *\n     * A consignment ID should be provided when checking if a shipping option\n     * is being selected for a specific consignment, otherwise it will check\n     * for all consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns True if selecting a shipping option, otherwise false.\n     */\n    isSelectingShippingOption(consignmentId?: string): boolean {\n        return this._shippingStrategies.isSelectingOption() ||\n            this._consignments.isUpdatingShippingOption(consignmentId);\n    }\n\n    /**\n     * Checks whether the billing address is being updated.\n     *\n     * @returns True if updating their billing address, otherwise false.\n     */\n    isUpdatingBillingAddress(): boolean {\n        return this._billingAddress.isUpdating();\n    }\n\n    /**\n     * Checks whether the shopper is continuing out as a guest.\n     *\n     * @returns True if continuing as guest, otherwise false.\n     */\n    isContinuingAsGuest(): boolean {\n        return this._billingAddress.isContinuingAsGuest();\n    }\n\n    /**\n     * Checks the shipping address is being updated.\n     *\n     * @returns True if updating their shipping address, otherwise false.\n     */\n    isUpdatingShippingAddress(): boolean {\n        return this._shippingStrategies.isUpdatingAddress();\n    }\n\n    /**\n     * Checks whether a given/any consignment is being updated.\n     *\n     * A consignment ID should be provided when checking for a specific consignment,\n     * otherwise it will check for any consignment.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns True if updating consignment(s), otherwise false.\n     */\n    isUpdatingConsignment(consignmentId?: string): boolean {\n        return this._consignments.isUpdating(consignmentId);\n    }\n\n    /**\n     * Checks whether a given/any consignment is being deleted.\n     *\n     * A consignment ID should be provided when checking for a specific consignment,\n     * otherwise it will check for any consignment.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns True if deleting consignment(s), otherwise false.\n     */\n    isDeletingConsignment(consignmentId?: string): boolean {\n        return this._consignments.isDeleting(consignmentId);\n    }\n\n    /**\n     * Checks whether a given/any consignment is being updated.\n     *\n     * A consignment ID should be provided when checking for a specific consignment,\n     * otherwise it will check for any consignment.\n     *\n     * @returns True if creating consignments, otherwise false.\n     */\n    isCreatingConsignments(): boolean {\n        return this._consignments.isCreating();\n    }\n\n    /**\n     * Checks whether the shipping step of a checkout process is initializing.\n     *\n     * If an identifier is provided, the method also checks whether the shipping\n     * step is initializing using a specific shipping method with the same\n     * identifier.\n     *\n     * @param methodId - The identifer of the initialization method to check.\n     * @returns True if the shipping step is initializing, otherwise false.\n     */\n    isInitializingShipping(methodId?: string) {\n        return this._shippingStrategies.isInitializing(methodId);\n    }\n\n    /**\n     * Checks whether the current customer is applying a coupon code.\n     *\n     * @returns True if applying a coupon code, otherwise false.\n     */\n    isApplyingCoupon(): boolean {\n        return this._coupons.isApplying();\n    }\n\n    /**\n     * Checks whether the current customer is removing a coupon code.\n     *\n     * @returns True if removing a coupon code, otherwise false.\n     */\n    isRemovingCoupon(): boolean {\n        return this._coupons.isRemoving();\n    }\n\n    /**\n     * Checks whether the current customer is applying a gift certificate.\n     *\n     * @returns True if applying a gift certificate, otherwise false.\n     */\n    isApplyingGiftCertificate(): boolean {\n        return this._giftCertificates.isApplying();\n    }\n\n    /**\n     * Checks whether the current customer is removing a gift certificate.\n     *\n     * @returns True if removing a gift certificate, otherwise false.\n     */\n    isRemovingGiftCertificate(): boolean {\n        return this._giftCertificates.isRemoving();\n    }\n\n    /**\n     * Checks whether the current customer's payment instruments are loading.\n     *\n     * @returns True if payment instruments are loading, otherwise false.\n     */\n    isLoadingInstruments(): boolean {\n        return this._instruments.isLoading();\n    }\n\n    /**\n     * Checks whether the current customer is deleting a payment instrument.\n     *\n     * @returns True if deleting a payment instrument, otherwise false.\n     */\n    isDeletingInstrument(instrumentId?: string): boolean {\n        return this._instruments.isDeleting(instrumentId);\n    }\n\n    /**\n     * Checks whether the checkout configuration of a store is loading.\n     *\n     * @returns True if the configuration is loading, otherwise false.\n     */\n    isLoadingConfig(): boolean {\n        return this._config.isLoading();\n    }\n\n    /**\n     * Checks whether the customer step of a checkout is in a pending state.\n     *\n     * The customer step is considered to be pending if it is in the process of\n     * initializing, signing in, signing out, and/or interacting with a customer\n     * widget.\n     *\n     * @returns True if the customer step is pending, otherwise false.\n     */\n    isCustomerStepPending(): boolean {\n        return this._customerStrategies.isInitializing() ||\n            this._customerStrategies.isSigningIn() ||\n            this._customerStrategies.isSigningOut() ||\n            this._customerStrategies.isWidgetInteracting();\n    }\n\n    /**\n     * Checks whether the payment step of a checkout is in a pending state.\n     *\n     * The payment step is considered to be pending if it is in the process of\n     * initializing, submitting an order, finalizing an order, and/or\n     * interacting with a payment widget.\n     *\n     * @returns True if the payment step is pending, otherwise false.\n     */\n    isPaymentStepPending(): boolean {\n        return this._paymentStrategies.isInitializing() ||\n            this._paymentStrategies.isExecuting() ||\n            this._paymentStrategies.isFinalizing() ||\n            this._paymentStrategies.isWidgetInteracting();\n    }\n}\n","import {\n    CheckoutSelectors,\n    CheckoutStoreErrorSelector,\n    CheckoutStoreSelector,\n    CheckoutStoreStatusSelector,\n    InternalCheckoutSelectors,\n} from '../checkout';\n\nexport default function createCheckoutSelectors(selectors: InternalCheckoutSelectors): CheckoutSelectors {\n    const data = new CheckoutStoreSelector(selectors);\n    const errors = new CheckoutStoreErrorSelector(selectors);\n    const statuses = new CheckoutStoreStatusSelector(selectors);\n\n    return {\n        data,\n        errors,\n        statuses,\n    };\n}\n","import { toSingleLine } from '../utility';\n\nexport default class ErrorMessageTransformer<TError extends Error = Error> {\n    constructor(\n        private _messageCustomizer: (type: TError) => string\n    ) {}\n\n    transform(error: TError): TError {\n        error.message = toSingleLine(this._messageCustomizer(error));\n\n        return error;\n    }\n}\n","import { Action, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs';\n\nimport { AddressRequestBody } from '../address';\nimport { BillingAddressActionCreator, BillingAddressRequestBody } from '../billing';\nimport { ErrorActionCreator, ErrorMessageTransformer } from '../common/error';\nimport { RequestOptions } from '../common/http-request';\nimport { ConfigActionCreator } from '../config';\nimport { CouponActionCreator, GiftCertificateActionCreator } from '../coupon';\nimport { CustomerCredentials, CustomerInitializeOptions, CustomerRequestOptions, CustomerStrategyActionCreator, GuestCredentials } from '../customer';\nimport { CountryActionCreator } from '../geography';\nimport { OrderActionCreator, OrderRequestBody } from '../order';\nimport { PaymentInitializeOptions, PaymentMethodActionCreator, PaymentRequestOptions, PaymentStrategyActionCreator } from '../payment';\nimport { InstrumentActionCreator } from '../payment/instrument';\nimport { ConsignmentsRequestBody, ConsignmentActionCreator, ShippingCountryActionCreator, ShippingInitializeOptions, ShippingRequestOptions, ShippingStrategyActionCreator } from '../shipping';\nimport { ConsignmentAssignmentRequestBody, ConsignmentUpdateRequestBody } from '../shipping/consignment';\n\nimport { CheckoutRequestBody } from './checkout';\nimport CheckoutActionCreator from './checkout-action-creator';\nimport CheckoutParams from './checkout-params';\nimport CheckoutSelectors from './checkout-selectors';\nimport CheckoutStore from './checkout-store';\nimport createCheckoutSelectors from './create-checkout-selectors';\nimport createCheckoutServiceErrorTransformer from './create-checkout-service-error-transformer';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for completing the checkout process for the current customer.\n *\n * This object can be used to collect all information that is required for\n * checkout, such as shipping and billing information. It can also be used to\n * retrieve the current checkout state and subscribe to its changes.\n */\nexport default class CheckoutService {\n    private _state: CheckoutSelectors;\n    private _errorTransformer: ErrorMessageTransformer;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _store: CheckoutStore,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _configActionCreator: ConfigActionCreator,\n        private _consignmentActionCreator: ConsignmentActionCreator,\n        private _countryActionCreator: CountryActionCreator,\n        private _couponActionCreator: CouponActionCreator,\n        private _customerStrategyActionCreator: CustomerStrategyActionCreator,\n        private _errorActionCreator: ErrorActionCreator,\n        private _giftCertificateActionCreator: GiftCertificateActionCreator,\n        private _instrumentActionCreator: InstrumentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _shippingCountryActionCreator: ShippingCountryActionCreator,\n        private _shippingStrategyActionCreator: ShippingStrategyActionCreator\n    ) {\n        this._state = createCheckoutSelectors(this._store.getState());\n        this._errorTransformer = createCheckoutServiceErrorTransformer();\n\n        this._store.subscribe(state => {\n            this._state = createCheckoutSelectors(state);\n        });\n    }\n\n    /**\n     * Returns a snapshot of the current checkout state.\n     *\n     * The method returns a new instance every time there is a change in the\n     * checkout state. You can query the state by calling any of its getter\n     * methods.\n     *\n     * ```js\n     * const state = service.getState();\n     *\n     * console.log(state.data.getOrder());\n     * console.log(state.errors.getSubmitOrderError());\n     * console.log(state.statuses.isSubmittingOrder());\n     * ```\n     *\n     * @returns The current customer's checkout state\n     */\n    getState(): CheckoutSelectors {\n        return this._state;\n    }\n\n    /**\n     * Notifies all subscribers with the current state.\n     *\n     * When this method gets called, the subscribers get called regardless if\n     * they have any filters applied.\n     */\n    notifyState(): void {\n        this._store.notifyState();\n    }\n\n    /**\n     * Subscribes to any changes to the current state.\n     *\n     * The method registers a callback function and executes it every time there\n     * is a change in the checkout state.\n     *\n     * ```js\n     * service.subscribe(state => {\n     *     console.log(state.data.getCart());\n     * });\n     * ```\n     *\n     * The method can be configured to notify subscribers only regarding\n     * relevant changes, by providing a filter function.\n     *\n     * ```js\n     * const filter = state => state.data.getCart();\n     *\n     * // Only trigger the subscriber when the cart changes.\n     * service.subscribe(state => {\n     *     console.log(state.data.getCart())\n     * }, filter);\n     * ```\n     *\n     * @param subscriber - The function to subscribe to state changes.\n     * @param filters - One or more functions to filter out irrelevant state\n     * changes. If more than one function is provided, the subscriber will only\n     * be triggered if all conditions are met.\n     * @returns A function, if called, will unsubscribe the subscriber.\n     */\n    subscribe(\n        subscriber: (state: CheckoutSelectors) => void,\n        ...filters: Array<(state: CheckoutSelectors) => any>\n    ): () => void {\n        return this._store.subscribe(\n            () => subscriber(this.getState()),\n            ...filters.map(filter => (state: InternalCheckoutSelectors) => filter(createCheckoutSelectors(state)))\n        );\n    }\n\n    /**\n     * Loads the current checkout.\n     *\n     * This method can only be called if there is an active checkout. Also, it\n     * can only retrieve data that belongs to the current customer. When it is\n     * successfully executed, you can retrieve the data by calling\n     * `CheckoutStoreSelector#getCheckout`.\n     *\n     * ```js\n     * const state = await service.loadCheckout('0cfd6c06-57c3-4e29-8d7a-de55cc8a9052');\n     *\n     * console.log(state.data.getCheckout());\n     * ```\n     *\n     * @param id - The identifier of the checkout to load, or the default checkout if not provided.\n     * @param options - Options for loading the current checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    loadCheckout(id?: string, options?: RequestOptions<CheckoutParams>): Promise<CheckoutSelectors> {\n        return this._dispatch(id ?\n            this._checkoutActionCreator.loadCheckout(id, options) :\n            this._checkoutActionCreator.loadDefaultCheckout(options)\n        );\n    }\n\n    /**\n     * Updates specific properties of the current checkout.\n     *\n     * ```js\n     * const state = await service.updateCheckout(checkout);\n     *\n     * console.log(state.data.getCheckout());\n     * ```\n     *\n     * @param payload - The checkout properties to be updated.\n     * @param options - Options for loading the current checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    updateCheckout(payload: CheckoutRequestBody, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._checkoutActionCreator.updateCheckout(payload, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Loads an order by an id.\n     *\n     * The method can only retrieve an order if the order belongs to the current\n     * customer. If it is successfully executed, the data can be retrieved by\n     * calling `CheckoutStoreSelector#getOrder`.\n     *\n     * ```js\n     * const state = await service.loadOrder(123);\n     *\n     * console.log(state.data.getOrder());\n     * ```\n     *\n     * @param orderId - The identifier of the order to load.\n     * @param options - Options for loading the order.\n     * @returns A promise that resolves to the current state.\n     */\n    loadOrder(orderId: number, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const loadCheckoutAction = this._orderActionCreator.loadOrder(orderId, options);\n        const loadConfigAction = this._configActionCreator.loadConfig(options);\n\n        return Promise.all([\n            this._dispatch(loadCheckoutAction),\n            this._dispatch(loadConfigAction, { queueId: 'config' }),\n        ])\n            .then(() => this.getState());\n    }\n\n    /**\n     * Submits an order, thereby completing a checkout process.\n     *\n     * Before you can submit an order, you must initialize the payment method\n     * chosen by the customer by calling `CheckoutService#initializePayment`.\n     *\n     * ```js\n     * await service.initializePayment({ methodId: 'braintree' });\n     * await service.submitOrder({\n     *     payment: {\n     *         methodId: 'braintree',\n     *         paymentData: {\n     *             ccExpiry: { month: 10, year: 20 },\n     *             ccName: 'BigCommerce',\n     *             ccNumber: '4111111111111111',\n     *             ccCvv: 123,\n     *         },\n     *     },\n     * });\n     * ```\n     *\n     * You are not required to include `paymentData` if the order does not\n     * require additional payment details. For example, the customer has already\n     * entered their payment details on the cart page using one of the hosted\n     * payment methods, such as PayPal. Or the customer has applied a gift\n     * certificate that exceeds the grand total amount.\n     *\n     * If the order is submitted successfully, you can retrieve the newly\n     * created order by calling `CheckoutStoreSelector#getOrder`.\n     *\n     * ```js\n     * const state = await service.submitOrder(payload);\n     *\n     * console.log(state.data.getOrder());\n     * ```\n     *\n     * @param payload - The request payload to submit for the current order.\n     * @param options - Options for submitting the current order.\n     * @returns A promise that resolves to the current state.\n     */\n    submitOrder(payload: OrderRequestBody, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.execute(payload, options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * Finalizes the submission process for an order.\n     *\n     * This method is only required for certain hosted payment methods that\n     * require a customer to enter their credit card details on their website.\n     * You need to call this method once the customer has redirected back to\n     * checkout in order to complete the checkout process.\n     *\n     * If the method is called before order finalization is required or for a\n     * payment method that does not require order finalization, an error will be\n     * thrown. Conversely, if the method is called successfully, you should\n     * immediately redirect the customer to the order confirmation page.\n     *\n     * ```js\n     * try {\n     *     await service.finalizeOrderIfNeeded();\n     *\n     *     window.location.assign('/order-confirmation');\n     * } catch (error) {\n     *     if (error.type !== 'order_finalization_not_required') {\n     *         throw error;\n     *     }\n     * }\n     * ```\n     *\n     * @param options - Options for finalizing the current order.\n     * @returns A promise that resolves to the current state.\n     * @throws `OrderFinalizationNotRequiredError` error if order finalization\n     * is not required for the current order at the time of execution.\n     */\n    finalizeOrderIfNeeded(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.finalize(options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * Loads a list of payment methods available for checkout.\n     *\n     * If a customer enters their payment details before navigating to the\n     * checkout page (i.e.: using PayPal checkout button on the cart page), only\n     * one payment method will be available for the customer - the selected\n     * payment method. Otherwise, by default, all payment methods configured by\n     * the merchant will be available for the customer.\n     *\n     * Once the method is executed successfully, you can call\n     * `CheckoutStoreSelector#getPaymentMethods` to retrieve the list of payment\n     * methods.\n     *\n     * ```js\n     * const state = service.loadPaymentMethods();\n     *\n     * console.log(state.data.getPaymentMethods());\n     * ```\n     *\n     * @param options - Options for loading the payment methods that are\n     * available to the current customer.\n     * @returns A promise that resolves to the current state.\n     */\n    loadPaymentMethods(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentMethodActionCreator.loadPaymentMethods(options);\n\n        return this._dispatch(action, { queueId: 'paymentMethods' });\n    }\n\n    /**\n     * Loads a payment method by an id.\n     *\n     * This method does not work with multi-option payment providers. Due to its\n     * limitation, it is deprecated and will be removed in the future.\n     *\n     * @deprecated\n     * @internal\n     * @param methodId - The identifier for the payment method to load.\n     * @param options - Options for loading the payment method.\n     * @returns A promise that resolves to the current state.\n     */\n    loadPaymentMethod(methodId: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentMethodActionCreator.loadPaymentMethod(methodId, options);\n\n        return this._dispatch(action, { queueId: 'paymentMethods' });\n    }\n\n    /**\n     * Initializes the payment step of a checkout process.\n     *\n     * Before a payment method can accept payment details, it must first be\n     * initialized. Some payment methods require you to provide additional\n     * initialization options. For example, Amazon requires a container ID in\n     * order to initialize their payment widget.\n     *\n     * ```js\n     * await service.initializePayment({\n     *     methodId: 'amazon',\n     *     amazon: {\n     *         container: 'walletWidget',\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the payment step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    initializePayment(options: PaymentInitializeOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * De-initializes the payment step of a checkout process.\n     *\n     * The method should be called once you no longer require a payment method\n     * to be initialized. It can perform any necessary clean-up behind the\n     * scene, i.e.: remove DOM nodes or event handlers that are attached as a\n     * result of payment initialization.\n     *\n     * ```js\n     * await service.deinitializePayment({\n     *     methodId: 'amazon',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the payment step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializePayment(options: PaymentRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.deinitialize(options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * Loads a list of countries available for billing.\n     *\n     * Once you make a successful request, you will be able to retrieve the list\n     * of countries by calling `CheckoutStoreSelector#getBillingCountries`.\n     *\n     * ```js\n     * const state = await service.loadBillingCountries();\n     *\n     * console.log(state.data.getBillingCountries());\n     * ```\n     *\n     * @param options - Options for loading the available billing countries.\n     * @returns A promise that resolves to the current state.\n     */\n    loadBillingCountries(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._countryActionCreator.loadCountries(options);\n\n        return this._dispatch(action, { queueId: 'billingCountries' });\n    }\n\n    /**\n     * Loads a list of countries available for shipping.\n     *\n     * The list is determined based on the shipping zones configured by a\n     * merchant. Once you make a successful call, you will be able to retrieve\n     * the list of available shipping countries by calling\n     * `CheckoutStoreSelector#getShippingCountries`.\n     *\n     * ```js\n     * const state = await service.loadShippingCountries();\n     *\n     * console.log(state.data.getShippingCountries());\n     * ```\n     *\n     * @param options - Options for loading the available shipping countries.\n     * @returns A promise that resolves to the current state.\n     */\n    loadShippingCountries(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingCountryActionCreator.loadCountries(options);\n\n        return this._dispatch(action, { queueId: 'shippingCountries' });\n    }\n\n    /**\n     * Loads a set of form fields that should be presented to customers in order\n     * to capture their billing address.\n     *\n     * Once the method has been executed successfully, you can call\n     * `CheckoutStoreSelector#getBillingAddressFields` to retrieve the set of\n     * form fields.\n     *\n     * ```js\n     * const state = service.loadBillingAddressFields();\n     *\n     * console.log(state.data.getBillingAddressFields('US'));\n     * ```\n     *\n     * @param options - Options for loading the billing address form fields.\n     * @returns A promise that resolves to the current state.\n     */\n    loadBillingAddressFields(options?: RequestOptions): Promise<CheckoutSelectors> {\n        return this.loadBillingCountries(options);\n    }\n\n    /**\n     * Loads a set of form fields that should be presented to customers in order\n     * to capture their shipping address.\n     *\n     * Once the method has been executed successfully, you can call\n     * `CheckoutStoreSelector#getShippingAddressFields` to retrieve the set of\n     * form fields.\n     *\n     * ```js\n     * const state = service.loadShippingAddressFields();\n     *\n     * console.log(state.data.getShippingAddressFields('US'));\n     * ```\n     *\n     * @param options - Options for loading the shipping address form fields.\n     * @returns A promise that resolves to the current state.\n     */\n    loadShippingAddressFields(options?: RequestOptions): Promise<CheckoutSelectors> {\n        return this.loadShippingCountries(options);\n    }\n\n    /**\n     * Initializes the sign-in step of a checkout process.\n     *\n     * Some payment methods, such as Amazon, have their own sign-in flow. In\n     * order to support them, this method must be called.\n     *\n     * ```js\n     * await service.initializeCustomer({\n     *     methodId: 'amazon',\n     *     amazon: {\n     *         container: 'signInButton',\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the customer step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeCustomer(options?: CustomerInitializeOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * De-initializes the sign-in step of a checkout process.\n     *\n     * It should be called once you no longer want to prompt customers to sign\n     * in. It can perform any necessary clean-up behind the scene, i.e.: remove\n     * DOM nodes or event handlers that are attached as a result of customer\n     * initialization.\n     *\n     * ```js\n     * await service.deinitializeCustomer({\n     *     methodId: 'amazon',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the customer step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeCustomer(options?: CustomerRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.deinitialize(options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * Continues to check out as a guest.\n     *\n     * The customer is required to provide their email address in order to\n     * continue. Once they provide their email address, it will be stored as a\n     * part of their billing address.\n     *\n     * @param credentials - The guest credentials to use.\n     * @param options - Options for continuing as a guest.\n     * @returns A promise that resolves to the current state.\n     */\n    continueAsGuest(credentials: GuestCredentials, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._billingAddressActionCreator.continueAsGuest(credentials, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Signs into a customer's registered account.\n     *\n     * Once the customer is signed in successfully, the checkout state will be\n     * populated with information associated with the customer, such as their\n     * saved addresses. You can call `CheckoutStoreSelector#getCustomer` to\n     * retrieve the data.\n     *\n     * ```js\n     * const state = await service.signInCustomer({\n     *     email: 'foo@bar.com',\n     *     password: 'password123',\n     * });\n     *\n     * console.log(state.data.getCustomer());\n     * ```\n     *\n     * @param credentials - The credentials to be used for signing in the customer.\n     * @param options - Options for signing in the customer.\n     * @returns A promise that resolves to the current state.\n     */\n    signInCustomer(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.signIn(credentials, options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * Signs out the current customer if they are previously signed in.\n     *\n     * Once the customer is successfully signed out, the checkout state will be\n     * reset automatically.\n     *\n     * ```js\n     * const state = await service.signOutCustomer();\n     *\n     * // The returned object should not contain information about the previously signed-in customer.\n     * console.log(state.data.getCustomer());\n     * ```\n     *\n     * @param options - Options for signing out the customer.\n     * @returns A promise that resolves to the current state.\n     */\n    signOutCustomer(options?: CustomerRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.signOut(options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * Loads a list of shipping options available for checkout.\n     *\n     * Available shipping options can only be determined once a customer\n     * provides their shipping address. If the method is executed successfully,\n     * `CheckoutStoreSelector#getShippingOptions` can be called to retrieve the\n     * list of shipping options.\n     *\n     * ```js\n     * const state = await service.loadShippingOptions();\n     *\n     * console.log(state.data.getShippingOptions());\n     * ```\n     *\n     * @param options - Options for loading the available shipping options.\n     * @returns A promise that resolves to the current state.\n     */\n    loadShippingOptions(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.loadShippingOptions(options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Initializes the shipping step of a checkout process.\n     *\n     * Some payment methods, such as Amazon, can provide shipping information to\n     * be used for checkout. In order to support them, this method must be\n     * called.\n     *\n     * ```js\n     * await service.initializeShipping({\n     *     methodId: 'amazon',\n     *     amazon: {\n     *         container: 'addressBook',\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the shipping step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeShipping(options?: ShippingInitializeOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * De-initializes the shipping step of a checkout process.\n     *\n     * It should be called once you no longer need to collect shipping details.\n     * It can perform any necessary clean-up behind the scene, i.e.: remove DOM\n     * nodes or event handlers that are attached as a result of shipping\n     * initialization.\n     *\n     * ```js\n     * await service.deinitializeShipping({\n     *     methodId: 'amazon',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the shipping step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeShipping(options?: ShippingRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.deinitialize(options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Selects a shipping option for the current address.\n     *\n     * If a shipping option has an additional cost, the quote for the current\n     * order will be adjusted once the option is selected.\n     *\n     * ```js\n     * const state = await service.selectShippingOption('address-id', 'shipping-option-id');\n     *\n     * console.log(state.data.getSelectedShippingOption());\n     * ```\n     *\n     * @param shippingOptionId - The identifier of the shipping option to\n     * select.\n     * @param options - Options for selecting the shipping option.\n     * @returns A promise that resolves to the current state.\n     */\n    selectShippingOption(shippingOptionId: string, options?: ShippingRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.selectOption(shippingOptionId, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Updates the shipping address for the current checkout.\n     *\n     * When a customer updates their shipping address for an order, they will\n     * see an updated list of shipping options and the cost for each option,\n     * unless no options are available. If the update is successful, you can\n     * call `CheckoutStoreSelector#getShippingAddress` to retrieve the address.\n     *\n     * If the shipping address changes and the selected shipping option becomes\n     * unavailable for the updated address, the shipping option will be\n     * deselected.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.updateShippingAddress(address);\n     *\n     * console.log(state.data.getShippingAddress());\n     * ```\n     *\n     * @param address - The address to be used for shipping.\n     * @param options - Options for updating the shipping address.\n     * @returns A promise that resolves to the current state.\n     */\n    updateShippingAddress(address: AddressRequestBody, options?: ShippingRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.updateAddress(address, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Creates consignments given a list.\n     *\n     * Note: this is used when items need to be shipped to multiple addresses,\n     * for single shipping address, use `CheckoutService#updateShippingAddress`.\n     *\n     * When consignments are created, an updated list of shipping options will\n     * become available for each consignment, unless no options are available.\n     * If the update is successful, you can call\n     * `CheckoutStoreSelector#getConsignments` to retrieve the updated list of\n     * consignments.'\n     *\n     * Beware that if a consignment includes all line items from another\n     * consignment, that consignment will be deleted as a valid consignment must\n     * include at least one valid line item.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.createConsignments(consignments);\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignments - The list of consignments to be created.\n     * @param options - Options for updating the shipping address.\n     * @returns A promise that resolves to the current state.\n     */\n    createConsignments(\n        consignments: ConsignmentsRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.createConsignments(consignments, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Deletes a consignment\n     *\n     * ```js\n     * const state = await service.deleteConsignment('55c96cda6f04c');\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignmentId - The ID of the consignment to be deleted\n     * @param options - Options for the consignment delete request\n     * @returns A promise that resolves to the current state.\n     */\n    deleteConsignment(\n        consignmentId: string,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.deleteConsignment(consignmentId, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Updates a specific consignment.\n     *\n     * Note: this is used when items need to be shipped to multiple addresses,\n     * for single shipping address, use `CheckoutService#selectShippingOption`.\n     *\n     * When a shipping address for a consignment is updated, an updated list of\n     * shipping options will become available for the consignment, unless no\n     * options are available. If the update is successful, you can call\n     * `CheckoutStoreSelector#getConsignments` to retrieve updated list of\n     * consignments.\n     *\n     * Beware that if the updated consignment includes all line items from another\n     * consignment, that consignment will be deleted as a valid consignment must\n     * include at least one valid line item.\n     *\n     * If the shipping address changes and the selected shipping option becomes\n     * unavailable for the updated address, the shipping option will be\n     * deselected.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.updateConsignment(consignment);\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignment - The consignment data that will be used.\n     * @param options - Options for updating the shipping address.\n     * @returns A promise that resolves to the current state.\n     */\n    updateConsignment(\n        consignment: ConsignmentUpdateRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.updateConsignment(consignment, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Convenience method that assigns items to be shipped to a specific address.\n     *\n     * Note: this method finds an existing consignment that matches the provided address\n     * and assigns the provided items. If no consignment matches the address, a new one\n     * will be created.\n     *\n     * @param consignment - The consignment data that will be used.\n     * @param options - Options for the request\n     * @returns A promise that resolves to the current state.\n     */\n    assignItemsToAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.assignItemsByAddress(consignment, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Convenience method that unassigns items from a specific shipping address.\n     *\n     * Note: this method finds an existing consignment that matches the provided address\n     * and unassigns the specified items. If the consignment ends up with no line items\n     * after the unassignment, it will be deleted.\n     *\n     * @param consignment - The consignment data that will be used.\n     * @param options - Options for the request\n     * @returns A promise that resolves to the current state.\n     */\n    unassignItemsToAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.unassignItemsByAddress(consignment, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Selects a shipping option for a given consignment.\n     *\n     * Note: this is used when items need to be shipped to multiple addresses,\n     * for single shipping address, use `CheckoutService#updateShippingAddres`.\n     *\n     * If a shipping option has an additional cost, the quote for the current\n     * order will be adjusted once the option is selected.\n     *\n     * ```js\n     * const state = await service.selectConsignmentShippingOption(consignmentId, optionId);\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignmentId - The identified of the consignment to be updated.\n     * @param shippingOptionId - The identifier of the shipping option to\n     * select.\n     * @param options - Options for selecting the shipping option.\n     * @returns A promise that resolves to the current state.\n     */\n    selectConsignmentShippingOption(\n        consignmentId: string,\n        shippingOptionId: string,\n        options?: ShippingRequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.updateShippingOption({\n            id: consignmentId,\n            shippingOptionId,\n        }, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Updates the billing address for the current checkout.\n     *\n     * A customer must provide their billing address before they can proceed to\n     * pay for their order.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.updateBillingAddress(address);\n     *\n     * console.log(state.data.getBillingAddress());\n     * ```\n     *\n     * @param address - The address to be used for billing.\n     * @param options - Options for updating the billing address.\n     * @returns A promise that resolves to the current state.\n     */\n    updateBillingAddress(address: BillingAddressRequestBody, options: RequestOptions = {}): Promise<CheckoutSelectors> {\n        const action = this._billingAddressActionCreator.updateAddress(address, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Applies a coupon code to the current checkout.\n     *\n     * Once the coupon code gets applied, the quote for the current checkout will\n     * be adjusted accordingly. The same coupon code cannot be applied more than\n     * once.\n     *\n     * ```js\n     * await service.applyCoupon('COUPON');\n     * ```\n     *\n     * @param code - The coupon code to apply to the current checkout.\n     * @param options - Options for applying the coupon code.\n     * @returns A promise that resolves to the current state.\n     */\n    applyCoupon(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._couponActionCreator.applyCoupon(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Removes a coupon code from the current checkout.\n     *\n     * Once the coupon code gets removed, the quote for the current checkout will\n     * be adjusted accordingly.\n     *\n     * ```js\n     * await service.removeCoupon('COUPON');\n     * ```\n     *\n     * @param code - The coupon code to remove from the current checkout.\n     * @param options - Options for removing the coupon code.\n     * @returns A promise that resolves to the current state.\n     */\n    removeCoupon(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._couponActionCreator.removeCoupon(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Applies a gift certificate to the current checkout.\n     *\n     * Once the gift certificate gets applied, the quote for the current\n     * checkout will be adjusted accordingly.\n     *\n     * ```js\n     * await service.applyGiftCertificate('GIFT_CERTIFICATE');\n     * ```\n     *\n     * @param code - The gift certificate to apply to the current checkout.\n     * @param options - Options for applying the gift certificate.\n     * @returns A promise that resolves to the current state.\n     */\n    applyGiftCertificate(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._giftCertificateActionCreator.applyGiftCertificate(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Removes a gift certificate from an order.\n     *\n     * Once the gift certificate gets removed, the quote for the current\n     * checkout will be adjusted accordingly.\n     *\n     * ```js\n     * await service.removeGiftCertificate('GIFT_CERTIFICATE');\n     * ```\n     *\n     * @param code - The gift certificate to remove from the current checkout.\n     * @param options - Options for removing the gift certificate.\n     * @returns A promise that resolves to the current state.\n     */\n    removeGiftCertificate(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._giftCertificateActionCreator.removeGiftCertificate(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Loads a list of payment instruments associated with a customer.\n     *\n     * Once the method has been called successfully, you can retrieve the list\n     * of payment instruments by calling `CheckoutStoreSelector#getInstruments`.\n     * If the customer does not have any payment instruments on record, i.e.:\n     * credit card, you will get an empty list instead.\n     *\n     * ```js\n     * const state = service.loadInstruments();\n     *\n     * console.log(state.data.getInstruments());\n     * ```\n     *\n     * @returns A promise that resolves to the current state.\n     */\n    loadInstruments(): Promise<CheckoutSelectors> {\n        const action = this._instrumentActionCreator.loadInstruments();\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Deletes a payment instrument by an id.\n     *\n     * Once an instrument gets removed, it can no longer be retrieved using\n     * `CheckoutStoreSelector#getInstruments`.\n     *\n     * ```js\n     * const state = service.deleteInstrument('123');\n     *\n     * console.log(state.data.getInstruments());\n     * ```\n     *\n     * @param instrumentId - The identifier of the payment instrument to delete.\n     * @returns A promise that resolves to the current state.\n     */\n    deleteInstrument(instrumentId: string): Promise<CheckoutSelectors> {\n        const action = this._instrumentActionCreator.deleteInstrument(instrumentId);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Clear errors that have been collected from previous calls.\n     *\n     * ```js\n     * const state = await service.clearError(error);\n     *\n     * console.log(state.errors.getError());\n     * ```\n     *\n     * @param error - Specific error object to clear\n     * @returns A promise that resolves to the current state.\n     */\n    clearError(error: Error): Promise<CheckoutSelectors> {\n        const action = this._errorActionCreator.clearError(error);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Dispatches an action through the data store and returns the current state\n     * once the action is dispatched.\n     *\n     * @param action - The action to dispatch.\n     * @returns A promise that resolves to the current state.\n     */\n    private _dispatch(action: Action | Observable<Action> | ThunkAction<Action>, options?: { queueId?: string }): Promise<CheckoutSelectors> {\n        return this._store.dispatch(action, options)\n            .then(() => this.getState())\n            .catch(error => {\n                throw this._errorTransformer.transform(error);\n            });\n    }\n}\n","import { ErrorMessageTransformer } from '../common/error';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../common/error/errors';\nimport { getEnvironment } from '../common/utility';\n\nexport type CheckoutServiceErrorType = MissingDataError | NotInitializedError;\nexport type CheckoutServiceErrorTransformer = ErrorMessageTransformer<CheckoutServiceErrorType | Error>;\n\nexport default function createCheckoutServiceErrorTransformer(\n    isDevelopment: boolean = getEnvironment() === 'development'\n): CheckoutServiceErrorTransformer {\n    return new ErrorMessageTransformer(error => {\n        if (!isDevelopment || !isCheckoutServiceError(error)) {\n            return error.message;\n        }\n\n        switch (error.subtype || error.type) {\n        case MissingDataErrorType.MissingConsignments:\n            return `\n                ${error.message}\n                The data could be unavailable because no shipping address has been provided.\n                To fix this, create a consignment or update the shipping address before performing\n                the same action again.\n            `;\n\n        case MissingDataErrorType.MissingCart:\n        case MissingDataErrorType.MissingCheckout:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server yet.\n                To fix this issue, you can try calling \\`CheckoutService#loadCheckout\\`\n                before performing the same action again.\n            `;\n\n        case MissingDataErrorType.MissingCheckoutConfig:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server yet.\n                To fix this issue, you need to make sure \\`CheckoutService\\` is initialized\n                properly by calling \\`CheckoutService#loadCheckout\\` before performing any\n                other actions.\n            `;\n\n        case MissingDataErrorType.MissingOrder:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server yet.\n                To fix this issue, you can try calling \\`CheckoutService#loadOrder\\`\n                before performing the same action again.\n            `;\n\n        case MissingDataErrorType.MissingOrderId:\n            return `\n                ${error.message}\n                The data could be unavailable because no order has been created yet. You have\n                to first create the order before you can perform the action.\n            `;\n\n        case MissingDataErrorType.MissingPaymentMethod:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server, or\n                configured by the merchant yet. To fix the former issue, you can try calling\n                \\`CheckoutService#loadPaymentMethods\\` before performing the same action again.\n            `;\n\n        case NotInitializedErrorType.CustomerNotInitialized:\n            return `\n                In order to initialize the customer step of checkout, you need to call\n                \\`CheckoutService#initializeCustomer\\`. Afterwards, you should be able to\n                submit customer details.\n            `;\n\n        case NotInitializedErrorType.PaymentNotInitialized:\n            return `\n                ${error.message}\n                In order to initialize the payment step of checkout, you need to call\n                \\`CheckoutService#initializePayment\\`. Afterwards, you should be able to\n                submit payment details.\n            `;\n\n        case NotInitializedErrorType.ShippingNotInitialized:\n            return `\n                ${error.message}\n                In order to initialize the shipping step of checkout, you need to call\n                \\`CheckoutService#initializeShipping\\`. Afterwards, you should be able to\n                submit shipping details.\n            `;\n\n        default:\n            return error.message;\n        }\n    });\n}\n\nfunction isCheckoutServiceError(error: any): error is CheckoutServiceErrorType {\n    return !!(error.subtype || error.type);\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../billing';\nimport { ErrorActionCreator } from '../common/error';\nimport { getDefaultLogger } from '../common/log';\nimport { getEnvironment } from '../common/utility';\nimport { ConfigActionCreator, ConfigRequestSender, ConfigState } from '../config';\nimport { CouponActionCreator, CouponRequestSender, GiftCertificateActionCreator, GiftCertificateRequestSender } from '../coupon';\nimport { createCustomerStrategyRegistry, CustomerStrategyActionCreator } from '../customer';\nimport { CountryActionCreator, CountryRequestSender } from '../geography';\nimport { OrderActionCreator, OrderRequestSender } from '../order';\nimport { createPaymentClient, createPaymentStrategyRegistry, PaymentMethodActionCreator, PaymentMethodRequestSender, PaymentStrategyActionCreator } from '../payment';\nimport { InstrumentActionCreator, InstrumentRequestSender } from '../payment/instrument';\nimport { createShippingStrategyRegistry, ConsignmentActionCreator, ConsignmentRequestSender, ShippingCountryActionCreator, ShippingCountryRequestSender, ShippingStrategyActionCreator } from '../shipping';\n\nimport CheckoutActionCreator from './checkout-action-creator';\nimport CheckoutRequestSender from './checkout-request-sender';\nimport CheckoutService from './checkout-service';\nimport CheckoutValidator from './checkout-validator';\nimport createCheckoutStore from './create-checkout-store';\n\n/**\n * Creates an instance of `CheckoutService`.\n *\n * @remarks\n * ```js\n * const service = createCheckoutService();\n *\n * service.subscribe(state => {\n *     console.log(state);\n * });\n *\n * service.loadCheckout();\n * ```\n *\n * @param options - A set of construction options.\n * @returns an instance of `CheckoutService`.\n */\nexport default function createCheckoutService(options?: CheckoutServiceOptions): CheckoutService {\n    if (document.location.protocol !== 'https:') {\n        getDefaultLogger().warn('The BigCommerce Checkout SDK should not be used on a non-HTTPS page');\n    }\n\n    if (getEnvironment() !== 'production') {\n        getDefaultLogger().warn('Note that the development build is not optimized. To create a production build, set process.env.NODE_ENV to `production`.');\n    }\n\n    const config: ConfigState = {\n        meta: {\n            externalSource: options && options.externalSource,\n        },\n        errors: {},\n        statuses: {},\n    };\n    const { locale = '', shouldWarnMutation = true } = options || {};\n    const requestSender = createRequestSender({ host: options && options.host });\n    const store = createCheckoutStore({ config }, { shouldWarnMutation });\n    const paymentClient = createPaymentClient(store);\n    const orderRequestSender = new OrderRequestSender(requestSender);\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const configActionCreator = new ConfigActionCreator(new ConfigRequestSender(requestSender));\n    const orderActionCreator = new OrderActionCreator(orderRequestSender, new CheckoutValidator(checkoutRequestSender));\n\n    return new CheckoutService(\n        store,\n        new BillingAddressActionCreator(new BillingAddressRequestSender(requestSender)),\n        new CheckoutActionCreator(checkoutRequestSender, configActionCreator),\n        configActionCreator,\n        new ConsignmentActionCreator(new ConsignmentRequestSender(requestSender), checkoutRequestSender),\n        new CountryActionCreator(new CountryRequestSender(requestSender, { locale })),\n        new CouponActionCreator(new CouponRequestSender(requestSender)),\n        new CustomerStrategyActionCreator(createCustomerStrategyRegistry(store, requestSender)),\n        new ErrorActionCreator(),\n        new GiftCertificateActionCreator(new GiftCertificateRequestSender(requestSender)),\n        new InstrumentActionCreator(new InstrumentRequestSender(paymentClient, requestSender)),\n        orderActionCreator,\n        new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender)),\n        new PaymentStrategyActionCreator(\n            createPaymentStrategyRegistry(store, paymentClient, requestSender),\n            orderActionCreator\n        ),\n        new ShippingCountryActionCreator(new ShippingCountryRequestSender(requestSender, { locale })),\n        new ShippingStrategyActionCreator(createShippingStrategyRegistry(store, requestSender))\n    );\n}\n\nexport interface CheckoutServiceOptions {\n    locale?: string;\n    host?: string;\n    shouldWarnMutation?: boolean;\n    externalSource?: string;\n}\n","// tslint:disable-next-line:no-reference\n/// <reference path=\"../payment/bigpay-client.d.ts\" />\nimport { createClient as createBigpayClient } from '@bigcommerce/bigpay-client';\n\nimport { CheckoutStore } from '../checkout';\n\nexport default function createPaymentClient(store: CheckoutStore) {\n    const paymentClient = createBigpayClient();\n\n    store.subscribe(\n        state => {\n            const config = state.config.getStoreConfig();\n\n            if (config) {\n                paymentClient.setHost(config.paymentSettings.bigpayBaseUrl);\n            }\n        },\n        state => state.config.getStoreConfig()\n    );\n\n    return paymentClient;\n}\n","export * from './checkout-actions';\n\nexport { default as Checkout, CheckoutPayment } from './checkout';\nexport { default as CHECKOUT_DEFAULT_INCLUDES } from './checkout-default-includes';\nexport { default as CheckoutActionCreator } from './checkout-action-creator';\nexport { default as CheckoutParams, CheckoutIncludes } from './checkout-params';\nexport { default as checkoutReducer } from './checkout-reducer';\nexport { default as CheckoutRequestSender } from './checkout-request-sender';\nexport { default as CheckoutSelector } from './checkout-selector';\nexport { default as CheckoutSelectors } from './checkout-selectors';\nexport { default as CheckoutService } from './checkout-service';\nexport { default as CheckoutState } from './checkout-state';\nexport { default as CheckoutStoreErrorSelector } from './checkout-store-error-selector';\nexport { default as CheckoutStoreSelector } from './checkout-store-selector';\nexport { default as CheckoutStoreState } from './checkout-store-state';\nexport { default as CheckoutStoreStatusSelector } from './checkout-store-status-selector';\nexport { default as CheckoutStore, CheckoutStoreOptions, ReadableCheckoutStore } from './checkout-store';\nexport { default as CheckoutValidator } from './checkout-validator';\nexport { default as InternalCheckoutSelectors } from './internal-checkout-selectors';\n\nexport { default as createActionTransformer } from './create-action-transformer';\nexport { default as createCheckoutService } from './create-checkout-service';\nexport { default as createCheckoutStore } from './create-checkout-store';\nexport { default as createCheckoutSelectors } from './create-checkout-selectors';\nexport { default as createInternalCheckoutSelectors } from './create-internal-checkout-selectors';\n","import { Response } from '@bigcommerce/request-sender';\n\nimport StandardError from './standard-error';\n\nconst DEFAULT_RESPONSE = {\n    body: {},\n    headers: {},\n    status: 0,\n};\n\nexport default class RequestError<TBody = any> extends StandardError {\n    body: TBody | {};\n    headers: { [key: string]: any; };\n    errors: Array<{ code: string, message?: string }>;\n    status: number;\n\n    constructor(\n        response?: Response<TBody | {}>,\n        { message, errors }: {\n            message?: string;\n            errors?: Array<{ code: string, message?: string }>,\n        } = {}\n    ) {\n        const { body, headers, status } = response || DEFAULT_RESPONSE;\n\n        super(message || 'An unexpected error has occurred.');\n\n        this.type = 'request';\n        this.body = body;\n        this.headers = headers;\n        this.status = status;\n        this.errors = errors || [];\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport Config from './config';\n\nexport enum ConfigActionType {\n    LoadConfigRequested = 'LOAD_CONFIG_REQUESTED',\n    LoadConfigSucceeded = 'LOAD_CONFIG_SUCCEEDED',\n    LoadConfigFailed = 'LOAD_CONFIG_FAILED',\n}\n\nexport type LoadConfigAction =\n    LoadConfigRequestedAction |\n    LoadConfigSucceededAction |\n    LoadConfigFailedAction;\n\nexport interface LoadConfigRequestedAction extends Action {\n    type: ConfigActionType.LoadConfigRequested;\n}\n\nexport interface LoadConfigSucceededAction extends Action<Config> {\n    type: ConfigActionType.LoadConfigSucceeded;\n}\n\nexport interface LoadConfigFailedAction extends Action<Error> {\n    type: ConfigActionType.LoadConfigFailed;\n}\n","import { memoize } from 'lodash';\n\nimport { bindDecorator, isEqual, isPrivate, CacheKeyResolver } from '../utility';\n\n/**\n * Decorates a class by patching all of its methods to cache their return values\n * and return them if they are called again with the same set of parameters. The\n * decorator also binds all the methods to the calling instance so it can be\n * destructed.\n */\nexport default function selectorDecorator<T extends Constructor<object>>(target: T): T {\n    const decoratedTarget = class extends target {};\n\n    Object.getOwnPropertyNames(target.prototype)\n        .forEach(key => {\n            const descriptor = Object.getOwnPropertyDescriptor(target.prototype, key);\n\n            if (!descriptor || key === 'constructor') {\n                return;\n            }\n\n            Object.defineProperty(\n                decoratedTarget.prototype,\n                key,\n                selectorMethodDecorator(target.prototype, key, descriptor)\n            );\n        });\n\n    return decoratedTarget;\n}\n\nfunction selectorMethodDecorator<T extends Method>(target: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T> {\n    if (typeof descriptor.value !== 'function') {\n        return descriptor;\n    }\n\n    let resolver = new CacheKeyResolver();\n    let method = descriptor.value;\n    let memoizedMethod = memoize(method, (...args) => resolver.getKey(...args));\n\n    return bindDecorator(target, key, {\n        get() {\n            const value = ((...args: any[]) => {\n                const cachedValue = memoizedMethod.call(this, ...args);\n\n                if (resolver.getUsedCount(...args) === 1) {\n                    return cachedValue;\n                }\n\n                const newValue = method.call(this, ...args);\n\n                if (isEqual(newValue, cachedValue, { keyFilter: key => !isPrivate(key) })) {\n                    return cachedValue;\n                }\n\n                memoizedMethod.cache.set(resolver.getKey(...args), newValue);\n\n                return newValue;\n            }) as T;\n\n            Object.defineProperty(this, key, { ...descriptor, value });\n\n            return value;\n        },\n        set(value) {\n            resolver = new CacheKeyResolver();\n            method = value;\n            memoizedMethod = memoize(method, (...args) => resolver.getKey(...args));\n        },\n    });\n}\n\nexport type Constructor<T> = new (...args: any[]) => T;\ntype Method = (...args: any[]) => any;\n","enum ContentType {\n    Json = 'application/json',\n    JsonV1 = 'application/vnd.bc.v1+json',\n}\n\nexport default ContentType;\n","import { Action } from '@bigcommerce/data-store';\n\nimport Country from './country';\n\nexport enum CountryActionType {\n    LoadCountriesRequested = 'LOAD_COUNTRIES_REQUESTED',\n    LoadCountriesSucceeded = 'LOAD_COUNTRIES_SUCCEEDED',\n    LoadCountriesFailed = 'LOAD_COUNTRIES_FAILED',\n}\n\nexport type LoadCountriesAction =\n    LoadCountriesRequestedAction |\n    LoadCountriesSucceededAction |\n    LoadCountriesFailedAction;\n\nexport interface LoadCountriesRequestedAction extends Action {\n    type: CountryActionType.LoadCountriesRequested;\n}\n\nexport interface LoadCountriesSucceededAction extends Action<Country[]> {\n    type: CountryActionType.LoadCountriesSucceeded;\n}\n\nexport interface LoadCountriesFailedAction extends Action<Error> {\n    type: CountryActionType.LoadCountriesFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Country } from '../geography';\n\nexport enum ShippingCountryActionType {\n    LoadShippingCountriesRequested = 'LOAD_SHIPPING_COUNTRIES_REQUESTED',\n    LoadShippingCountriesSucceeded = 'LOAD_SHIPPING_COUNTRIES_SUCCEEDED',\n    LoadShippingCountriesFailed = 'LOAD_SHIPPING_COUNTRIES_FAILED',\n}\n\nexport type LoadShippingCountriesAction = LoadShippingCountriesRequestedAction |\n    LoadShippingCountriesSucceededAction |\n    LoadShippingCountriesFailedAction;\n\nexport interface LoadShippingCountriesRequestedAction extends Action {\n    type: ShippingCountryActionType.LoadShippingCountriesRequested;\n}\n\nexport interface LoadShippingCountriesSucceededAction extends Action<Country[]> {\n    type: ShippingCountryActionType.LoadShippingCountriesSucceeded;\n}\n\nexport interface LoadShippingCountriesFailedAction extends Action<Error> {\n    type: ShippingCountryActionType.LoadShippingCountriesFailed;\n}\n","module.exports = require(\"@bigcommerce/request-sender\");","export const ACKNOWLEDGE = 'ACKNOWLEDGE';\nexport const FINALIZE = 'FINALIZE';\nexport const INITIALIZE = 'INITIALIZE';\n","module.exports = require(\"@bigcommerce/script-loader\");","export default interface PaymentStrategyState {\n    data: PaymentStrategyDataState;\n    errors: PaymentStrategyErrorsState;\n    statuses: PaymentStrategyStatusesState;\n}\n\nexport interface PaymentStrategyDataState {\n    [key: string]: {\n        isInitialized: boolean,\n    };\n}\n\nexport interface PaymentStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    executeError?: Error;\n    executeMethodId?: string;\n    finalizeError?: Error;\n    finalizeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    widgetInteractionError?: Error;\n    widgetInteractionMethodId?: string;\n}\n\nexport interface PaymentStrategyStatusesState {\n    deinitializeMethodId?: string;\n    executeMethodId?: string;\n    finalizeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isExecuting?: boolean;\n    isFinalizing?: boolean;\n    isInitializing?: boolean;\n    isWidgetInteracting?: boolean;\n    widgetInteractionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: PaymentStrategyState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { Action } from '@bigcommerce/data-store';\n\nimport { omitDeep } from '../utility';\n\nimport { ClearErrorAction, ErrorActionType } from './error-actions';\n\nexport default function clearErrorReducer<TState extends { [key: string]: any }, TAction extends Action>(\n    state: TState,\n    action: TAction\n): TState | undefined {\n    if (isClearErrorAction(action)) {\n        return omitDeep(state, value => value === action.payload);\n    }\n\n    return state;\n}\n\nfunction isClearErrorAction(action: Action): action is ClearErrorAction {\n    return action.type === ErrorActionType.ClearError;\n}\n","const CHECKOUT_DEFAULT_INCLUDES = [\n    'cart.lineItems.physicalItems.options',\n    'cart.lineItems.digitalItems.options',\n    'customer',\n    'payments',\n    'promotions.banners',\n];\n\nexport default CHECKOUT_DEFAULT_INCLUDES;\n","export interface CompareOptions {\n    keyFilter?(key: string): boolean;\n}\n\nexport default function isEqual(objectA: any, objectB: any, options?: CompareOptions): boolean {\n    if (objectA === objectB) {\n        return true;\n    }\n\n    if (objectA && objectB && typeof objectA === 'object' && typeof objectB === 'object') {\n        if (Array.isArray(objectA) && Array.isArray(objectB)) {\n            return isArrayEqual(objectA, objectB, options);\n        }\n\n        if (Array.isArray(objectA) || Array.isArray(objectB)) {\n            return false;\n        }\n\n        if ((objectA instanceof Date) && (objectB instanceof Date)) {\n            return isDateEqual(objectA, objectB);\n        }\n\n        if ((objectA instanceof Date) || (objectB instanceof Date)) {\n            return false;\n        }\n\n        if ((objectA instanceof RegExp) && (objectB instanceof RegExp)) {\n            return isRegExpEqual(objectA, objectB);\n        }\n\n        if ((objectA instanceof RegExp) || (objectB instanceof RegExp)) {\n            return false;\n        }\n\n        return isObjectEqual(objectA, objectB, options);\n    }\n\n    return objectA === objectB;\n}\n\nfunction isRegExpEqual(objectA: RegExp, objectB: RegExp): boolean {\n    return objectA.toString() === objectB.toString();\n}\n\nfunction isDateEqual(objectA: Date, objectB: Date): boolean {\n    return objectA.getTime() === objectB.getTime();\n}\n\nfunction isArrayEqual(objectA: any[], objectB: any[], options?: CompareOptions): boolean {\n    if (objectA.length !== objectB.length) {\n        return false;\n    }\n\n    for (let index = 0, length = objectA.length; index < length; index++) {\n        if (!isEqual(objectA[index], objectB[index], options)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nfunction isObjectEqual(\n    objectA: { [key: string]: any },\n    objectB: { [key: string]: any },\n    options?: CompareOptions\n): boolean {\n    const filter = options && options.keyFilter;\n    const keysA = filter ? Object.keys(objectA).filter(filter) : Object.keys(objectA);\n    const keysB = filter ? Object.keys(objectB).filter(filter) : Object.keys(objectB);\n\n    if (keysA.length !== keysB.length) {\n        return false;\n    }\n\n    for (let index = 0, length = keysA.length; index < length; index++) {\n        const key = keysA[index];\n\n        if (!objectB.hasOwnProperty(key)) {\n            return false;\n        }\n\n        if (!isEqual(objectA[key], objectB[key], options)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadCheckoutAction } from '../checkout';\n\nimport { InternalCustomerResponseData } from './internal-customer-responses';\n\nexport enum CustomerActionType {\n    SignInCustomerRequested = 'SIGN_IN_CUSTOMER_REQUESTED',\n    SignInCustomerSucceeded = 'SIGN_IN_CUSTOMER_SUCCEEDED',\n    SignInCustomerFailed = 'SIGN_IN_CUSTOMER_FAILED',\n\n    SignOutCustomerRequested = 'SIGN_OUT_CUSTOMER_REQUESTED',\n    SignOutCustomerSucceeded = 'SIGN_OUT_CUSTOMER_SUCCEEDED',\n    SignOutCustomerFailed = 'SIGN_OUT_CUSTOMER_FAILED',\n}\n\nexport type CustomerAction =\n    SignInCustomerAction |\n    SignOutCustomerAction;\n\nexport type SignInCustomerAction =\n    SignInCustomerRequestedAction |\n    SignInCustomerSucceededAction |\n    SignInCustomerFailedAction |\n    LoadCheckoutAction;\n\nexport type SignOutCustomerAction =\n    SignOutCustomerRequestedAction |\n    SignOutCustomerSucceededAction |\n    SignOutCustomerFailedAction |\n    LoadCheckoutAction;\n\nexport interface SignInCustomerRequestedAction extends Action {\n    type: CustomerActionType.SignInCustomerRequested;\n}\n\nexport interface SignInCustomerSucceededAction extends Action<InternalCustomerResponseData> {\n    type: CustomerActionType.SignInCustomerSucceeded;\n}\n\nexport interface SignInCustomerFailedAction extends Action<Error> {\n    type: CustomerActionType.SignInCustomerFailed;\n}\n\nexport interface SignOutCustomerRequestedAction extends Action {\n    type: CustomerActionType.SignOutCustomerRequested;\n}\n\nexport interface SignOutCustomerSucceededAction extends Action<InternalCustomerResponseData> {\n    type: CustomerActionType.SignOutCustomerSucceeded;\n}\n\nexport interface SignOutCustomerFailedAction extends Action<Error> {\n    type: CustomerActionType.SignOutCustomerFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadOrderAction } from '../order';\n\nimport PaymentResponseBody from './payment-response-body';\n\nexport enum PaymentActionType {\n    SubmitPaymentRequested = 'SUBMIT_PAYMENT_REQUESTED',\n    SubmitPaymentSucceeded = 'SUBMIT_PAYMENT_SUCCEEDED',\n    SubmitPaymentFailed = 'SUBMIT_PAYMENT_FAILED',\n\n    InitializeOffsitePaymentRequested = 'INITIALIZE_OFFSITE_PAYMENT_REQUESTED',\n    InitializeOffsitePaymentSucceeded = 'INITIALIZE_OFFSITE_PAYMENT_SUCCEEDED',\n    InitializeOffsitePaymentFailed = 'INITIALIZE_OFFSITE_PAYMENT_FAILED',\n}\n\nexport type PaymentAction = SubmitPaymentAction |\n    InitializeOffsitePaymentAction;\n\nexport type SubmitPaymentAction =\n    SubmitPaymentRequestedAction |\n    SubmitPaymentSucceededAction |\n    SubmitPaymentFailedAction |\n    LoadOrderAction;\n\nexport type InitializeOffsitePaymentAction =\n    InitializeOffsitePaymentRequestedAction |\n    InitializeOffsitePaymentSucceededAction |\n    InitializeOffsitePaymentFailedAction;\n\nexport interface SubmitPaymentRequestedAction extends Action {\n    type: PaymentActionType.SubmitPaymentRequested;\n}\n\nexport interface SubmitPaymentSucceededAction extends Action<PaymentResponseBody> {\n    type: PaymentActionType.SubmitPaymentSucceeded;\n}\n\nexport interface SubmitPaymentFailedAction extends Action<Error> {\n    type: PaymentActionType.SubmitPaymentFailed;\n}\n\nexport interface InitializeOffsitePaymentRequestedAction extends Action {\n    type: PaymentActionType.InitializeOffsitePaymentRequested;\n}\n\nexport interface InitializeOffsitePaymentSucceededAction extends Action {\n    type: PaymentActionType.InitializeOffsitePaymentSucceeded;\n}\n\nexport interface InitializeOffsitePaymentFailedAction extends Action<Error> {\n    type: PaymentActionType.InitializeOffsitePaymentFailed;\n}\n","import StandardError from './standard-error';\n\nexport default class InvalidArgumentError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Invalid arguments have been provided.');\n\n        this.type = 'invalid_argument';\n    }\n}\n","export const HOSTED = 'PAYMENT_TYPE_HOSTED';\nexport const OFFLINE = 'PAYMENT_TYPE_OFFLINE';\n","export default class AmountTransformer {\n    constructor(private _dp: number) {}\n\n    toInteger(amount: number): number {\n        return Math.floor(amount * Math.pow(10, this._dp));\n    }\n}\n","import IframeEvent from './iframe-event';\n\nexport default function isIframeEvent<TEvent extends IframeEvent<TType>, TType extends string>(\n    object: any,\n    type: TType\n): object is TEvent {\n    return object.type === type;\n}\n","import { InternalCheckoutSelectors } from '../checkout';\nimport { selector } from '../common/selector';\n\nimport CheckoutButtonSelector from './checkout-button-selector';\nimport { CheckoutButtonMethodType } from './strategies';\n\n@selector\nexport default class CheckoutButtonErrorSelector {\n    private _checkoutButton: CheckoutButtonSelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._checkoutButton = selectors.checkoutButton;\n    }\n\n    getInitializeButtonError(methodId?: CheckoutButtonMethodType): Error | undefined {\n        return this._checkoutButton.getInitializeError(methodId);\n    }\n\n    getDeinitializeButtonError(methodId?: CheckoutButtonMethodType): Error | undefined {\n        return this._checkoutButton.getDeinitializeError(methodId);\n    }\n}\n","import { InternalCheckoutSelectors } from '../checkout';\nimport { selector } from '../common/selector';\n\nimport CheckoutButtonSelector from './checkout-button-selector';\nimport { CheckoutButtonMethodType } from './strategies';\n\n@selector\nexport default class CheckoutButtonStatusSelector {\n    private _checkoutButton: CheckoutButtonSelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._checkoutButton = selectors.checkoutButton;\n    }\n\n    isInitializingButton(methodId?: CheckoutButtonMethodType): boolean {\n        return this._checkoutButton.isInitializing(methodId);\n    }\n\n    isDeinitializingButton(methodId?: CheckoutButtonMethodType): boolean {\n        return this._checkoutButton.isDeinitializing(methodId);\n    }\n}\n","import { InternalCheckoutSelectors } from '../checkout';\n\nimport CheckoutButtonErrorSelector from './checkout-button-error-selector';\nimport CheckoutButtonSelectors from './checkout-button-selectors';\nimport CheckoutButtonStatusSelector from './checkout-button-status-selector';\n\nexport default function createCheckoutButtonSelectors(selectors: InternalCheckoutSelectors): CheckoutButtonSelectors {\n    const errors = new CheckoutButtonErrorSelector(selectors);\n    const statuses = new CheckoutButtonStatusSelector(selectors);\n\n    return {\n        errors,\n        statuses,\n    };\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../checkout';\nimport { isElementId, setUniqueElementId } from '../common/dom';\n\nimport { CheckoutButtonInitializeOptions, CheckoutButtonOptions } from './checkout-button-options';\nimport CheckoutButtonSelectors from './checkout-button-selectors';\nimport CheckoutButtonStrategyActionCreator from './checkout-button-strategy-action-creator';\nimport createCheckoutButtonSelectors from './create-checkout-button-selectors';\n\nexport default class CheckoutButtonInitializer {\n    private _state: CheckoutButtonSelectors;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _store: CheckoutStore,\n        private _buttonStrategyActionCreator: CheckoutButtonStrategyActionCreator\n    ) {\n        this._state = createCheckoutButtonSelectors(this._store.getState());\n\n        this._store.subscribe(state => {\n            this._state = createCheckoutButtonSelectors(state);\n        });\n    }\n\n    /**\n     * Returns a snapshot of the current state.\n     *\n     * The method returns a new instance every time there is a change in the\n     * state. You can query the state by calling any of its getter methods.\n     *\n     * ```js\n     * const state = service.getState();\n     *\n     * console.log(state.errors.getInitializeButtonError());\n     * console.log(state.statuses.isInitializingButton());\n     * ```\n     *\n     * @returns The current customer's checkout state\n     */\n    getState(): CheckoutButtonSelectors {\n        return this._state;\n    }\n\n    /**\n     * Subscribes to any changes to the current state.\n     *\n     * The method registers a callback function and executes it every time there\n     * is a change in the current state.\n     *\n     * ```js\n     * service.subscribe(state => {\n     *     console.log(state.statuses.isInitializingButton());\n     * });\n     * ```\n     *\n     * The method can be configured to notify subscribers only regarding\n     * relevant changes, by providing a filter function.\n     *\n     * ```js\n     * const filter = state => state.errors.getInitializeButtonError();\n     *\n     * // Only trigger the subscriber when the cart changes.\n     * service.subscribe(state => {\n     *     console.log(state.errors.getInitializeButtonError())\n     * }, filter);\n     * ```\n     *\n     * @param subscriber - The function to subscribe to state changes.\n     * @param filters - One or more functions to filter out irrelevant state\n     * changes. If more than one function is provided, the subscriber will only\n     * be triggered if all conditions are met.\n     * @returns A function, if called, will unsubscribe the subscriber.\n     */\n    subscribe(\n        subscriber: (state: CheckoutButtonSelectors) => void,\n        ...filters: Array<(state: CheckoutButtonSelectors) => any>\n    ): () => void {\n        return this._store.subscribe(\n            () => subscriber(this.getState()),\n            state => state.checkoutButton.getState(),\n            ...filters.map(filter => (state: InternalCheckoutSelectors) => filter(createCheckoutButtonSelectors(state)))\n        );\n    }\n\n    /**\n     * Initializes the checkout button of a payment method.\n     *\n     * When the checkout button is initialized, it will be inserted into the DOM,\n     * ready to be interacted with by the customer.\n     *\n     * ```js\n     * initializer.initializeButton({\n     *     methodId: 'braintreepaypal',\n     *     containerId: 'checkoutButton',\n     *     braintreepaypal: {\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the checkout button.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeButton(options: CheckoutButtonInitializeOptions): Promise<CheckoutButtonSelectors> {\n        const containerIds = isElementId(options.containerId) ?\n            [options.containerId] :\n            setUniqueElementId(options.containerId, `${options.methodId}-container`);\n\n        return Promise.all(\n            containerIds.map(containerId => {\n                const action = this._buttonStrategyActionCreator.initialize({ ...options, containerId });\n                const queueId = `checkoutButtonStrategy:${options.methodId}:${containerId}`;\n\n                return this._store.dispatch(action, { queueId });\n            })\n        )\n            .then(() => this.getState());\n    }\n\n    /**\n     * De-initializes the checkout button by performing any necessary clean-ups.\n     *\n     * ```js\n     * await service.deinitializeButton({\n     *     methodId: 'braintreepaypal',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the checkout button.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeButton(options: CheckoutButtonOptions): Promise<CheckoutButtonSelectors> {\n        const action = this._buttonStrategyActionCreator.deinitialize(options);\n        const queueId = `checkoutButtonStrategy:${options.methodId}`;\n\n        return this._store.dispatch(action, { queueId })\n            .then(() => this.getState());\n    }\n}\n","enum CheckoutButtonMethodType {\n    BRAINTREE_PAYPAL = 'braintreepaypal',\n    BRAINTREE_PAYPAL_CREDIT = 'braintreepaypalcredit',\n    GOOGLEPAY_BRAINTREE = 'googlepaybraintree',\n    GOOGLEPAY_STRIPE = 'googlepaystripe',\n    MASTERPASS = 'masterpass',\n    PAYPALEXPRESS = 'paypalexpress',\n}\n\nexport default CheckoutButtonMethodType;\n","export default function isElementId(id: string): boolean {\n    return /^\\w[\\w\\-\\:\\.]*$/.test(id);\n}\n","import { uniqueId } from 'lodash';\n\nimport { InvalidArgumentError } from '../error/errors';\n\nexport default function setUniqueElementId(selector: string, idPrefix: string): string[] {\n    const containers = document.querySelectorAll(selector);\n\n    if (!containers.length) {\n        throw new InvalidArgumentError(`Unable to find any element with the specified selector: ${selector}`);\n    }\n\n    return Array.prototype.slice.call(containers)\n        .map((container: HTMLElement) => {\n            if (!container.id) {\n                container.id = uniqueId(idPrefix);\n            }\n\n            return container.id;\n        });\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, empty, of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { Registry } from '../common/registry';\nimport { PaymentMethodActionCreator } from '../payment';\n\nimport { CheckoutButtonActionType, DeinitializeButtonAction, InitializeButtonAction } from './checkout-button-actions';\nimport { CheckoutButtonInitializeOptions, CheckoutButtonOptions } from './checkout-button-options';\nimport { CheckoutButtonStrategy } from './strategies';\n\nexport default class CheckoutButtonStrategyActionCreator {\n    constructor(\n        private _registry: Registry<CheckoutButtonStrategy>,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): ThunkAction<InitializeButtonAction, InternalCheckoutSelectors> {\n        return store => {\n            const meta = { methodId: options.methodId, containerId: options.containerId };\n\n            if (store.getState().checkoutButton.isInitialized(options.methodId, options.containerId)) {\n                return empty();\n            }\n\n            return concat(\n                of(createAction(CheckoutButtonActionType.InitializeButtonRequested, undefined, meta)),\n                this._paymentMethodActionCreator.loadPaymentMethod(options.methodId, { timeout: options.timeout, useCache: true }),\n                defer(() => this._registry.get(options.methodId).initialize(options)\n                    .then(() => createAction(CheckoutButtonActionType.InitializeButtonSucceeded, undefined, meta)))\n            ).pipe(\n                catchError(error => throwErrorAction(CheckoutButtonActionType.InitializeButtonFailed, error, meta))\n            );\n        };\n    }\n\n    deinitialize(options: CheckoutButtonOptions): ThunkAction<DeinitializeButtonAction, InternalCheckoutSelectors> {\n        return store => {\n            const meta = { methodId: options.methodId };\n\n            if (!store.getState().checkoutButton.isInitialized(options.methodId)) {\n                return empty();\n            }\n\n            return concat(\n                of(createAction(CheckoutButtonActionType.DeinitializeButtonRequested, undefined, meta)),\n                defer(() => this._registry.get(options.methodId).deinitialize()\n                    .then(() => createAction(CheckoutButtonActionType.DeinitializeButtonSucceeded, undefined, meta)))\n            ).pipe(\n                catchError(error => throwErrorAction(CheckoutButtonActionType.DeinitializeButtonFailed, error, meta))\n            );\n        };\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { pick } from 'lodash';\n\nimport { Address, LegacyAddress } from '../../../address';\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, StandardError } from '../../../common/error/errors';\nimport { PaymentMethod } from '../../../payment';\nimport { BraintreeAddress, BraintreeError, BraintreePaypalCheckout, BraintreeSDKCreator, BraintreeTokenizePayload } from '../../../payment/strategies/braintree';\nimport { PaypalAuthorizeData, PaypalScriptLoader } from '../../../payment/strategies/paypal';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\n\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class BraintreePaypalButtonStrategy implements CheckoutButtonStrategy {\n    private _paypalCheckout?: BraintreePaypalCheckout;\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _braintreeSDKCreator: BraintreeSDKCreator,\n        private _paypalScriptLoader: PaypalScriptLoader,\n        private _formPoster: FormPoster,\n        private _offerCredit: boolean = false\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const paypalOptions = (this._offerCredit ? options.braintreepaypalcredit : options.braintreepaypal) || {};\n        const state = this._store.getState();\n        const paymentMethod = this._paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n        if (!paymentMethod || !paymentMethod.clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._braintreeSDKCreator.initialize(paymentMethod.clientToken);\n\n        return Promise.all([\n            this._braintreeSDKCreator.getPaypalCheckout(),\n            this._paypalScriptLoader.loadPaypal(),\n        ])\n            .then(([paypalCheckout, paypal]) => {\n                this._paypalCheckout = paypalCheckout;\n\n                const allowedSources = [];\n                const disallowedSources = [];\n\n                if (paypalOptions.allowCredit) {\n                    allowedSources.push(paypal.FUNDING.CREDIT);\n                } else {\n                    disallowedSources.push(paypal.FUNDING.CREDIT);\n                }\n\n                return paypal.Button.render({\n                    env: paymentMethod.config.testMode ? 'sandbox' : 'production',\n                    commit: paypalOptions.shouldProcessPayment ? true : false,\n                    funding: {\n                        allowed: allowedSources,\n                        disallowed: disallowedSources,\n                    },\n                    style: {\n                        shape: 'rect',\n                        label: this._offerCredit ? 'credit' : undefined,\n                        ...pick(paypalOptions.style, 'layout', 'size', 'color', 'label', 'shape', 'tagline', 'fundingicons'),\n                    },\n                    payment: () => this._setupPayment(paypalOptions.onPaymentError),\n                    onAuthorize: data => this._tokenizePayment(data, paypalOptions.shouldProcessPayment, paypalOptions.onAuthorizeError),\n                }, options.containerId);\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        this._paypalCheckout = undefined;\n        this._paymentMethod = undefined;\n\n        this._braintreeSDKCreator.teardown();\n\n        return Promise.resolve();\n    }\n\n    private _setupPayment(onError?: (error: BraintreeError | StandardError) => void): Promise<string> {\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(state => {\n                const checkout = state.checkout.getCheckout();\n                const config = state.config.getStoreConfig();\n                const customer = state.customer.getCustomer();\n                const address = customer && customer.addresses && customer.addresses[0];\n\n                if (!this._paypalCheckout) {\n                    throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n                }\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!config) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                return this._paypalCheckout.createPayment({\n                    flow: 'checkout',\n                    enableShippingAddress: true,\n                    shippingAddressEditable: false,\n                    shippingAddressOverride: address ? this._mapToBraintreeAddress(address) : undefined,\n                    amount: checkout.grandTotal,\n                    currency: config.currency.code,\n                    offerCredit: this._offerCredit,\n                });\n            })\n            .catch(error => {\n                if (onError) {\n                    onError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    private _tokenizePayment(\n        data: PaypalAuthorizeData,\n        shouldProcessPayment?: boolean,\n        onError?: (error: BraintreeError | StandardError) => void\n    ): Promise<BraintreeTokenizePayload> {\n        if (!this._paypalCheckout || !this._paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        const methodId = this._paymentMethod.id;\n\n        return Promise.all([\n            this._paypalCheckout.tokenizePayment(data),\n            this._braintreeSDKCreator.getDataCollector({ paypal: true }),\n        ])\n            .then(([payload, { deviceData }]) => {\n                this._formPoster.postForm('/checkout.php', {\n                    payment_type: 'paypal',\n                    provider: methodId,\n                    action: shouldProcessPayment ? 'process_payment' : 'set_external_checkout',\n                    nonce: payload.nonce,\n                    device_data: deviceData,\n                    shipping_address: JSON.stringify(this._mapToLegacyShippingAddress(payload)),\n                    billing_address: JSON.stringify(this._mapToLegacyBillingAddress(payload)),\n                });\n\n                return payload;\n            })\n            .catch(error => {\n                if (onError) {\n                    onError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    private _mapToLegacyShippingAddress(payload: BraintreeTokenizePayload): Partial<LegacyAddress> {\n        const shippingAddress = payload.details.shippingAddress;\n        const recipientName = shippingAddress && shippingAddress.recipientName || '';\n        const [firstName, lastName] = recipientName.split(' ');\n\n        return {\n            email: payload.details.email,\n            first_name: firstName,\n            last_name: lastName,\n            phone_number: shippingAddress && shippingAddress.phone || payload.details.phone,\n            address_line_1: shippingAddress && shippingAddress.line1,\n            address_line_2: shippingAddress && shippingAddress.line2,\n            city: shippingAddress && shippingAddress.city,\n            state: shippingAddress && shippingAddress.state,\n            country_code: shippingAddress && shippingAddress.countryCode,\n            postal_code: shippingAddress && shippingAddress.postalCode,\n        };\n    }\n\n    private _mapToLegacyBillingAddress(payload: BraintreeTokenizePayload): Partial<LegacyAddress> {\n        const billingAddress = payload.details.billingAddress;\n        const shippingAddress = payload.details.shippingAddress;\n\n        if (billingAddress) {\n            return {\n                email: payload.details.email,\n                first_name: billingAddress.firstName || payload.details.firstName,\n                last_name: billingAddress.lastName || payload.details.lastName,\n                phone_number: billingAddress.phone || payload.details.phone,\n                address_line_1: billingAddress.line1,\n                address_line_2: billingAddress.line2,\n                city: billingAddress.city,\n                state: billingAddress.state,\n                country_code: billingAddress.countryCode,\n                postal_code: billingAddress.postalCode,\n            };\n        }\n\n        return {\n            email: payload.details.email,\n            first_name: payload.details.firstName,\n            last_name: payload.details.lastName,\n            phone_number: payload.details.phone,\n            address_line_1: shippingAddress && shippingAddress.line1,\n            address_line_2: shippingAddress && shippingAddress.line2,\n            city: shippingAddress && shippingAddress.city,\n            state: shippingAddress && shippingAddress.state,\n            country_code: shippingAddress && shippingAddress.countryCode,\n            postal_code: shippingAddress && shippingAddress.postalCode,\n        };\n    }\n\n    private _mapToBraintreeAddress(address: Address): BraintreeAddress {\n        return {\n            line1: address.address1,\n            line2: address.address2,\n            city: address.city,\n            state: address.stateOrProvinceCode,\n            postalCode: address.postalCode,\n            countryCode: address.countryCode,\n            phone: address.phone,\n            recipientName: `${address.firstName} ${address.lastName}`,\n        };\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { InvalidArgumentError, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { GooglePayPaymentProcessor } from '../../../payment/strategies/googlepay';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class GooglePayButtonStrategy implements CheckoutButtonStrategy {\n    private _methodId?: string;\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _formPoster: FormPoster,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _googlePayPaymentProcessor: GooglePayPaymentProcessor\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { containerId, methodId } = options;\n\n        if (!containerId || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"containerId\" argument is not provided.');\n        }\n\n        this._methodId = methodId;\n\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(() => this._googlePayPaymentProcessor.initialize(this._getMethodId()))\n            .then(() => {\n                this._walletButton = this._createSignInButton(containerId);\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        if (this._walletButton && this._walletButton.parentNode) {\n            this._walletButton.parentNode.removeChild(this._walletButton);\n            this._walletButton = undefined;\n        }\n\n        return this._googlePayPaymentProcessor.deinitialize();\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const container = document.getElementById(containerId);\n\n        if (!container) {\n            throw new InvalidArgumentError('Unable to create sign-in button without valid container ID.');\n        }\n\n        const googlePayButton = this._googlePayPaymentProcessor.createButton(this._handleWalletButtonClick);\n\n        container.appendChild(googlePayButton);\n\n        return googlePayButton;\n    }\n\n    private _getMethodId(): string {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._methodId;\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): Promise<void> {\n        event.preventDefault();\n\n        return this._googlePayPaymentProcessor.displayWallet()\n            .then(paymentData => this._googlePayPaymentProcessor.handleSuccess(paymentData)\n            .then(() => {\n                if (paymentData.shippingAddress) {\n                    this._googlePayPaymentProcessor.updateShippingAddress(paymentData.shippingAddress);\n                }\n            }))\n            .then(() => this._onPaymentSelectComplete())\n            .catch(error => this._onError(error));\n    }\n\n    private _onPaymentSelectComplete(): void {\n        this._formPoster.postForm('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n        });\n    }\n\n    private _onError(error?: Error): void {\n        if (error && error.message !== 'CANCELED') {\n            throw error;\n        }\n    }\n}\n","import { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType\n} from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { getCallbackUrl, Masterpass, MasterpassCheckoutOptions, MasterpassScriptLoader } from '../../../payment/strategies/masterpass';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\n\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class MasterpassButtonStrategy implements CheckoutButtonStrategy {\n    private _masterpassClient?: Masterpass;\n    private _methodId?: string;\n    private _signInButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _masterpassScriptLoader: MasterpassScriptLoader\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { containerId, methodId } = options;\n\n        if (!containerId || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"containerId\" argument is not provided.');\n        }\n\n        this._methodId = methodId;\n\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!paymentMethod || !paymentMethod.initializationData.checkoutId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                return this._masterpassScriptLoader.load(paymentMethod.config.testMode);\n            })\n            .then(masterpass => {\n                this._masterpassClient = masterpass;\n                this._signInButton = this._createSignInButton(containerId);\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        if (this._signInButton && this._signInButton.parentNode) {\n            this._signInButton.removeEventListener('click', this._handleWalletButtonClick);\n            this._signInButton.parentNode.removeChild(this._signInButton);\n            this._signInButton = undefined;\n        }\n\n        return Promise.resolve();\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const buttonContainer = document.getElementById(containerId);\n\n        if (!buttonContainer) {\n            throw new Error('Need a container to place the button');\n        }\n\n        const button = document.createElement('input');\n\n        button.type = 'image';\n        button.src = 'https://static.masterpass.com/dyn/img/btn/global/mp_chk_btn_160x037px.svg';\n        buttonContainer.appendChild(button);\n\n        button.addEventListener('click', this._handleWalletButtonClick);\n\n        return button;\n    }\n\n    private _createMasterpassPayload(): MasterpassCheckoutOptions {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const paymentMethod = this._methodId ? state.paymentMethods.getPaymentMethod(this._methodId) : null;\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return {\n            checkoutId: paymentMethod.initializationData.checkoutId,\n            allowedCardTypes: paymentMethod.initializationData.allowedCardTypes,\n            amount: checkout.cart.cartAmount.toString(),\n            currency: checkout.cart.currency.code,\n            cartId: checkout.cart.id,\n            suppressShippingAddress: false,\n            callbackUrl: getCallbackUrl('cart'),\n        };\n    }\n\n    @bind\n    private _handleWalletButtonClick(): void {\n        if (!this._masterpassClient) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        this._masterpassClient.checkout(this._createMasterpassPayload());\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { pick } from 'lodash';\n\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, StandardError } from '../../../common/error/errors';\nimport { INTERNAL_USE_ONLY } from '../../../common/http-request';\nimport { PaymentMethod } from '../../../payment';\nimport { PaypalActions, PaypalAuthorizeData, PaypalClientToken } from '../../../payment/strategies/paypal';\nimport { PaypalScriptLoader } from '../../../payment/strategies/paypal';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class PaypalButtonStrategy implements CheckoutButtonStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paypalScriptLoader: PaypalScriptLoader,\n        private _formPoster: FormPoster,\n        private _host: string = ''\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const paypalOptions = options.paypal;\n        const state = this._store.getState();\n        const paymentMethod = this._paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n        if (!paypalOptions) {\n            throw new InvalidArgumentError();\n        }\n\n        return this._paypalScriptLoader.loadPaypal()\n            .then(paypal => {\n                if (!paymentMethod || !paymentMethod.config.merchantId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const merchantId = paymentMethod.config.merchantId;\n                const env = paymentMethod.config.testMode ? 'sandbox' : 'production';\n                const clientToken: PaypalClientToken = { [env]: paypalOptions.clientId };\n\n                const allowedSources = [];\n                const disallowedSources = [];\n\n                if (paypalOptions.allowCredit) {\n                    allowedSources.push(paypal.FUNDING.CREDIT);\n                } else {\n                    disallowedSources.push(paypal.FUNDING.CREDIT);\n                }\n\n                return paypal.Button.render({\n                    env,\n                    client: clientToken,\n                    commit: paypalOptions.shouldProcessPayment,\n                    funding: {\n                        allowed: allowedSources,\n                        disallowed: disallowedSources,\n                    },\n                    style: {\n                        shape: 'rect',\n                        ...pick(paypalOptions.style, 'layout', 'size', 'color', 'label', 'shape', 'tagline', 'fundingicons'),\n                    },\n                    payment: (data, actions) => this._setupPayment(merchantId, actions, paypalOptions.onPaymentError),\n                    onAuthorize: (data, actions) => this._tokenizePayment(data, actions, paypalOptions.shouldProcessPayment, paypalOptions.onAuthorizeError),\n                }, options.containerId);\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        this._paymentMethod = undefined;\n\n        return Promise.resolve();\n    }\n\n    private _setupPayment(merchantId: string, actions?: PaypalActions, onError?: (error: StandardError) => void): Promise<string> {\n        if (!actions) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(state => {\n                const cart = state.cart.getCart();\n                const cartId = cart ? cart.id : '';\n\n                return actions.request.post(`${this._host}/api/storefront/payment/paypalexpress`, { merchantId, cartId }, {\n                    headers: {\n                        'X-API-INTERNAL': INTERNAL_USE_ONLY,\n                    },\n                });\n            })\n            .then(res => res.id)\n            .catch(error => {\n                if (onError) {\n                    onError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    private _tokenizePayment(\n        data: PaypalAuthorizeData,\n        actions?: PaypalActions,\n        shouldProcessPayment?: boolean,\n        onError?: (error: StandardError) => void\n    ): Promise<void> {\n        if (!this._paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        if (!actions) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        if (!data.paymentID || !data.payerID) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        const methodId = this._paymentMethod.id;\n\n        return actions.payment.get(data.paymentID).then(payload => {\n            this._formPoster.postForm('/checkout.php', {\n                payment_type: 'paypal',\n                provider: methodId,\n                action: shouldProcessPayment ? 'process_payment' : 'set_external_checkout',\n                paymentId: data.paymentID,\n                payerId: data.payerID,\n                payerInfo: JSON.stringify(payload.payer.payer_info),\n            });\n        });\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport { createCheckoutStore } from '../checkout';\nimport { PaymentMethodActionCreator, PaymentMethodRequestSender } from '../payment';\n\nimport CheckoutButtonInitializer from './checkout-button-initializer';\nimport CheckoutButtonInitializerOptions from './checkout-button-initializer-options';\nimport CheckoutButtonStrategyActionCreator from './checkout-button-strategy-action-creator';\nimport createCheckoutButtonRegistry from './create-checkout-button-registry';\n\n/**\n * Creates an instance of `CheckoutButtonInitializer`.\n *\n * @remarks\n * ```js\n * const initializer = createCheckoutButtonInitializer();\n *\n * initializer.initializeButton({\n *     methodId: 'braintreepaypal',\n *     braintreepaypal: {\n *         container: '#checkoutButton',\n *     },\n * });\n * ```\n *\n * @alpha\n * Please note that `CheckoutButtonInitializer` is currently in an early stage\n * of development. Therefore the API is unstable and not ready for public\n * consumption.\n *\n * @param options - A set of construction options.\n * @returns an instance of `CheckoutButtonInitializer`.\n */\nexport default function createCheckoutButtonInitializer(\n    options?: CheckoutButtonInitializerOptions\n): CheckoutButtonInitializer {\n    const host = options && options.host;\n    const store = createCheckoutStore();\n    const requestSender = createRequestSender({ host });\n    const formPoster = createFormPoster({ host });\n\n    return new CheckoutButtonInitializer(\n        store,\n        new CheckoutButtonStrategyActionCreator(\n            createCheckoutButtonRegistry(store, requestSender, formPoster, host),\n            new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender))\n        )\n    );\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { CheckoutActionCreator, CheckoutRequestSender, CheckoutStore } from '../checkout';\nimport { Registry } from '../common/registry';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { BraintreeScriptLoader, BraintreeSDKCreator } from '../payment/strategies/braintree';\nimport { createGooglePayPaymentProcessor, GooglePayBraintreeInitializer, GooglePayStripeInitializer } from '../payment/strategies/googlepay';\nimport { MasterpassScriptLoader } from '../payment/strategies/masterpass';\nimport { PaypalScriptLoader } from '../payment/strategies/paypal';\n\nimport { CheckoutButtonMethodType, CheckoutButtonStrategy } from './strategies';\nimport { BraintreePaypalButtonStrategy } from './strategies/braintree';\nimport { GooglePayButtonStrategy } from './strategies/googlepay';\nimport { MasterpassButtonStrategy } from './strategies/masterpass';\nimport { PaypalButtonStrategy } from './strategies/paypal';\n\nexport default function createCheckoutButtonRegistry(\n    store: CheckoutStore,\n    requestSender: RequestSender,\n    formPoster: FormPoster,\n    host?: string\n): Registry<CheckoutButtonStrategy, CheckoutButtonMethodType> {\n    const registry = new Registry<CheckoutButtonStrategy, CheckoutButtonMethodType>();\n    const scriptLoader = getScriptLoader();\n    const checkoutActionCreator = new CheckoutActionCreator(\n        new CheckoutRequestSender(requestSender),\n        new ConfigActionCreator(new ConfigRequestSender(requestSender))\n    );\n\n    registry.register(CheckoutButtonMethodType.BRAINTREE_PAYPAL, () =>\n        new BraintreePaypalButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new BraintreeSDKCreator(new BraintreeScriptLoader(scriptLoader)),\n            new PaypalScriptLoader(scriptLoader),\n            formPoster\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.BRAINTREE_PAYPAL_CREDIT, () =>\n        new BraintreePaypalButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new BraintreeSDKCreator(new BraintreeScriptLoader(scriptLoader)),\n            new PaypalScriptLoader(scriptLoader),\n            formPoster,\n            true\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.MASTERPASS, () =>\n        new MasterpassButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new MasterpassScriptLoader(scriptLoader)\n        ));\n\n    registry.register(CheckoutButtonMethodType.GOOGLEPAY_BRAINTREE, () =>\n        new GooglePayButtonStrategy(\n            store,\n            formPoster,\n            checkoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayBraintreeInitializer(\n                    new BraintreeSDKCreator(\n                        new BraintreeScriptLoader(scriptLoader)\n                    )\n                )\n            )\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.GOOGLEPAY_STRIPE, () =>\n        new GooglePayButtonStrategy(\n            store,\n            formPoster,\n            checkoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayStripeInitializer()\n            )\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.PAYPALEXPRESS, () =>\n        new PaypalButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new PaypalScriptLoader(scriptLoader),\n            formPoster,\n            host\n        )\n    );\n\n    return registry;\n}\n","export { default as createCheckoutButtonInitializer } from './create-checkout-button-initializer';\nexport { default as checkoutButtonReducer } from './checkout-button-reducer';\nexport { default as CheckoutButtonSelector } from './checkout-button-selector';\nexport { default as CheckoutButtonState } from './checkout-button-state';\n\nexport { CheckoutButtonOptions, CheckoutButtonInitializeOptions } from './checkout-button-options';\n","export enum CheckoutIncludes {\n    AvailableShippingOptions = 'consignments.availableShippingOptions',\n    PhysicalItemsCategoryNames = 'cart.lineItems.physicalItems.categoryNames',\n    DigitalItemsCategoryNames = 'cart.lineItems.digitalItems.categoryNames',\n}\n\nexport default interface CheckoutParams {\n    include?: CheckoutIncludes[];\n}\n","module.exports = require(\"@bigcommerce/form-poster\");","import InternalLineItem from './internal-line-item';\nimport { LineItem } from './line-item';\nimport LineItemMap from './line-item-map';\nimport mapGiftCertificateToInternalLineItem from './map-gift-certificate-to-internal-line-item';\nimport mapToInternalLineItem from './map-to-internal-line-item';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalLineItems(\n    itemMap: LineItemMap,\n    decimalPlaces: number,\n    idKey: keyof LineItem = 'id'\n): InternalLineItem[] {\n    return (Object.keys(itemMap) as Array<keyof LineItemMap>)\n        .reduce((result, key) => [\n            ...result,\n            ...(itemMap[key] as LineItem[]).map((item: any) => {\n                if (key === 'giftCertificates') {\n                    return mapGiftCertificateToInternalLineItem(item, decimalPlaces);\n                }\n\n                return mapToInternalLineItem(\n                    item,\n                    mapToInternalLineItemType(key),\n                    decimalPlaces,\n                    idKey\n                );\n            }),\n        ], [] as InternalLineItem[]);\n}\n\nfunction mapToInternalLineItemType(type: string): string {\n    switch (type) {\n        case 'physicalItems':\n            return 'ItemPhysicalEntity';\n\n        case 'digitalItems':\n            return 'ItemDigitalEntity';\n\n        case 'giftCertificates':\n            return 'ItemGiftCertificateEntity';\n\n        default:\n            return '';\n    }\n}\n","module.exports = require(\"local-storage-fallback\");","import { createErrorAction, Action } from '@bigcommerce/data-store';\nimport { concat, of, throwError, Observable } from 'rxjs';\n\nexport default function throwErrorAction<TPayload, TMeta, TType extends string>(\n    type: TType,\n    error?: TPayload,\n    meta?: TMeta\n): Observable<Action<TPayload, TMeta, TType>> {\n    if (isErrorAction(error)) {\n        return concat(of(error), throwError(createErrorAction(type, error.payload, meta)));\n    }\n\n    return throwError(createErrorAction(type, error, meta));\n}\n\nfunction isErrorAction(action: any): action is Action {\n    return action && action.type && action.error;\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { RequestError } from '../../common/error/errors';\n\nexport default class PaymentMethodInvalidError extends RequestError {\n    constructor(response?: Response) {\n        super(response, { message: 'There is a problem processing your payment. Please try again later.' });\n\n        this.type = 'payment_method_invalid';\n    }\n}\n","import isEqual from './is-equal';\n\nexport default class CacheKeyResolver {\n    private _lastId = 0;\n    private _maps: CacheKeyMap[] = [];\n\n    getKey(...args: any[]): string {\n        const { index, map, parentMaps } = this._resolveMap(...args);\n\n        if (map && map.cacheKey) {\n            map.usedCount++;\n\n            return map.cacheKey;\n        }\n\n        return this._generateKey(parentMaps, args.slice(index));\n    }\n\n    getUsedCount(...args: any[]): number {\n        const { map } = this._resolveMap(...args);\n\n        return map ? map.usedCount : 0;\n    }\n\n    private _resolveMap(...args: any[]): ResolveResult {\n        let index = 0;\n        let parentMaps = this._maps;\n\n        while (parentMaps.length) {\n            let isMatched = false;\n\n            for (const map of parentMaps) {\n                if (!isEqual(map.value, args[index])) {\n                    continue;\n                }\n\n                if ((args.length === 0 || index === args.length - 1) && map.cacheKey) {\n                    return { index, map, parentMaps };\n                }\n\n                isMatched = true;\n                parentMaps = map.maps;\n                index++;\n\n                break;\n            }\n\n            if (!isMatched) {\n                break;\n            }\n        }\n\n        return { index, parentMaps };\n    }\n\n    private _generateKey(maps: CacheKeyMap[], args: any[]): string {\n        let index = 0;\n        let parentMaps = maps;\n        let map!: CacheKeyMap;\n\n        do {\n            map = {\n                usedCount: 1,\n                value: args[index],\n                maps: [],\n            };\n\n            parentMaps.push(map);\n\n            parentMaps = map.maps;\n            index++;\n        } while (index < args.length);\n\n        map.cacheKey = `${++this._lastId}`;\n\n        return map.cacheKey;\n    }\n}\n\ninterface CacheKeyMap {\n    maps: CacheKeyMap[];\n    value: any;\n    usedCount: number;\n    cacheKey?: string;\n}\n\ninterface ResolveResult {\n    index: number;\n    parentMaps: CacheKeyMap[];\n    map?: CacheKeyMap;\n}\n","/**\n * Decorates a class or a method by binding all its prototype methods or itself\n * to the calling instance respectively.\n */\nexport default function bindDecorator<T extends Method>(target: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T>;\nexport default function bindDecorator<T extends Constructor<object>>(target: T): T;\nexport default function bindDecorator(target: any, key?: any, descriptor?: any): any {\n    if (!key || !descriptor) {\n        return bindClassDecorator(target);\n    }\n\n    return bindMethodDecorator(target, key, descriptor);\n}\n\n/**\n * Decorates a class by binding all its prototype methods to the calling\n * instance.\n */\nexport function bindClassDecorator<T extends Constructor<object>>(target: T): T {\n    const decoratedTarget = class extends target {};\n\n    Object.getOwnPropertyNames(target.prototype)\n        .forEach(key => {\n            const descriptor = Object.getOwnPropertyDescriptor(target.prototype, key);\n\n            if (!descriptor || key === 'constructor') {\n                return;\n            }\n\n            Object.defineProperty(\n                decoratedTarget.prototype,\n                key,\n                bindMethodDecorator(target.prototype, key, descriptor)\n            );\n        });\n\n    return decoratedTarget;\n}\n\n/**\n * Decorates a method by binding it to the calling instance.\n */\nexport function bindMethodDecorator<T extends Method>(target: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T> {\n    if (typeof descriptor.value !== 'function') {\n        return descriptor;\n    }\n\n    let method: T = descriptor.value;\n\n    return {\n        get() {\n            const boundMethod = method.bind(this);\n\n            Object.defineProperty(this, key, {\n                ...descriptor,\n                value: boundMethod,\n            });\n\n            return boundMethod;\n        },\n        set(value) {\n            method = value;\n        },\n    };\n}\n\nexport type Constructor<T> = new (...args: any[]) => T;\nexport type Method = (...args: any[]) => any;\n","import { parseUrl } from '../common/url';\n\nexport default class IframeEventPoster<TEvent> {\n    private _targetOrigin: string;\n\n    constructor(\n        targetOrigin: string,\n        private _targetWindow?: Window\n    ) {\n        this._targetOrigin = targetOrigin === '*' ? '*' : parseUrl(targetOrigin).origin;\n    }\n\n    post(event: TEvent): void {\n        if (window === this._targetWindow) {\n            return;\n        }\n\n        if (!this._targetWindow) {\n            throw new Error('Unable to post message becauset target window is not set.');\n        }\n\n        this._targetWindow.postMessage(event, this._targetOrigin);\n    }\n\n    setTarget(window: Window) {\n        this._targetWindow = window;\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\nimport { from, Observable, Subscribable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { RequestErrorFactory } from '../common/error';\n\nexport default function createActionTransformer(\n    requestErrorFactory: RequestErrorFactory\n): (action: Subscribable<Action>) => Observable<Action> {\n    return action$ => from(action$).pipe(catchError<Action, never>(action => {\n        if (action instanceof Error || action.payload instanceof Error) {\n            throw action;\n        }\n\n        if (isResponse(action.payload)) {\n            const message = action.payload.body && action.payload.body.detail;\n\n            throw { ...action, payload: requestErrorFactory.createError(action.payload, message) };\n        }\n\n        throw action;\n    }));\n}\n\nfunction isResponse(object: any) {\n    if (!object || typeof object !== 'object') {\n        return false;\n    }\n\n    return ['body', 'headers', 'status', 'statusText'].every(key =>\n        object.hasOwnProperty(key)\n    );\n}\n","import { BillingAddressSelector } from '../billing';\nimport { CartSelector } from '../cart';\nimport { selector } from '../common/selector';\nimport { CouponSelector, GiftCertificateSelector } from '../coupon';\nimport { CustomerSelector } from '../customer';\nimport { ConsignmentSelector } from '../shipping';\n\nimport Checkout from './checkout';\nimport CheckoutState from './checkout-state';\n\n@selector\nexport default class CheckoutSelector {\n    constructor(\n        private _checkout: CheckoutState,\n        private _billingAddress: BillingAddressSelector,\n        private _cart: CartSelector,\n        private _consignments: ConsignmentSelector,\n        private _coupons: CouponSelector,\n        private _customer: CustomerSelector,\n        private _giftCertificates: GiftCertificateSelector\n    ) {}\n\n    getCheckout(): Checkout | undefined {\n        const { data } = this._checkout;\n        const billingAddress = this._billingAddress.getBillingAddress();\n        const cart = this._cart.getCart();\n        const customer = this._customer.getCustomer();\n        const consignments = this._consignments.getConsignments() || [];\n        const coupons = this._coupons.getCoupons() || [];\n        const giftCertificates = this._giftCertificates.getGiftCertificates() || [];\n\n        if (!data || !cart || !customer) {\n            return;\n        }\n\n        return {\n            ...data,\n            billingAddress,\n            cart,\n            customer,\n            consignments,\n            coupons,\n            giftCertificates,\n        };\n    }\n\n    getLoadError(): Error | undefined {\n        return this._checkout.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return this._checkout.statuses.isLoading === true;\n    }\n\n    getUpdateError(): Error | undefined {\n        return this._checkout.errors.updateError;\n    }\n\n    isUpdating(): boolean {\n        return this._checkout.statuses.isUpdating === true;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\nimport { omit } from 'lodash';\n\nimport { BillingAddressAction, BillingAddressActionType } from '../billing';\nimport { clearErrorReducer } from '../common/error';\nimport { CouponAction, CouponActionType, GiftCertificateAction, GiftCertificateActionType } from '../coupon';\nimport { OrderAction, OrderActionType } from '../order';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping';\n\nimport { CheckoutAction, CheckoutActionType } from './checkout-actions';\nimport CheckoutState, { CheckoutDataState, CheckoutErrorsState, CheckoutStatusesState } from './checkout-state';\n\nconst DEFAULT_STATE: CheckoutState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function checkoutReducer(\n    state: CheckoutState = DEFAULT_STATE,\n    action: Action\n): CheckoutState {\n    const reducer = combineReducers<CheckoutState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: CheckoutDataState | undefined,\n    action: CheckoutAction | BillingAddressAction | ConsignmentAction | CouponAction | GiftCertificateAction | OrderAction\n): CheckoutDataState | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return action.payload\n            ? omit({ ...data, ...action.payload }, ['billingAddress', 'cart', 'consignments', 'customer', 'coupons', 'giftCertifcates'])\n            : data;\n\n    case OrderActionType.SubmitOrderSucceeded:\n        return action.payload && data\n            ? { ...data, orderId: action.payload.order.orderId }\n            : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CheckoutErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction | OrderAction\n): CheckoutErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return {\n            ...errors,\n            loadError: undefined,\n        };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return {\n            ...errors,\n            loadError: action.payload,\n        };\n\n    case CheckoutActionType.UpdateCheckoutRequested:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n        return {\n            ...errors,\n            updateError: undefined,\n        };\n\n    case CheckoutActionType.UpdateCheckoutFailed:\n        return {\n            ...errors,\n            updateError: action.payload,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CheckoutStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction | OrderAction\n): CheckoutStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return {\n            ...statuses,\n            isLoading: true,\n        };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return {\n            ...statuses,\n            isLoading: false,\n        };\n\n    case CheckoutActionType.UpdateCheckoutRequested:\n        return {\n            ...statuses,\n            isUpdating: true,\n        };\n\n    case CheckoutActionType.UpdateCheckoutFailed:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n        return {\n            ...statuses,\n            isUpdating: false,\n        };\n\n    default:\n        return statuses;\n    }\n}\n","import InternalLineItem from './internal-line-item';\nimport { GiftCertificateItem } from './line-item';\n\nimport { AmountTransformer } from '.';\n\nexport default function mapGiftCertificateToInternalLineItem(\n    item: GiftCertificateItem,\n    decimalPlaces: number\n): InternalLineItem {\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: item.id,\n        imageUrl: '',\n        name: item.name,\n        amount: item.amount,\n        amountAfterDiscount: item.amount,\n        discount: 0,\n        integerAmount: amountTransformer.toInteger(item.amount),\n        integerAmountAfterDiscount: amountTransformer.toInteger(item.amount),\n        integerDiscount: 0,\n        quantity: 1,\n        sender: item.sender,\n        recipient: item.recipient,\n        type: 'ItemGiftCertificateEntity',\n        attributes: [],\n        variantId: null,\n    };\n}\n","import AmountTransformer from './amount-transformer';\nimport InternalLineItem from './internal-line-item';\nimport { DigitalItem, LineItem } from './line-item';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalLineItem(\n    item: LineItem,\n    type: string,\n    decimalPlaces: number,\n    idKey: keyof LineItem = 'id'\n): InternalLineItem {\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: (item[idKey] as string | number),\n        imageUrl: item.imageUrl,\n        amount: item.extendedListPrice,\n        amountAfterDiscount: item.extendedSalePrice,\n        discount: item.discountAmount,\n        integerAmount: amountTransformer.toInteger(item.extendedListPrice),\n        integerAmountAfterDiscount: amountTransformer.toInteger(item.extendedSalePrice),\n        integerDiscount: amountTransformer.toInteger(item.discountAmount),\n        downloadsPageUrl: (item as DigitalItem).downloadPageUrl,\n        name: item.name,\n        quantity: item.quantity,\n        brand: item.brand,\n        categoryNames: item.categoryNames,\n        variantId: item.variantId,\n        productId: item.productId,\n        attributes: (item.options || []).map(option => ({\n            name: option.name,\n            value: option.value,\n        })),\n        addedByPromotion: item.addedByPromotion,\n        type,\n    };\n}\n","import { selector } from '../common/selector';\n\nimport BillingAddress from './billing-address';\nimport BillingAddressState from './billing-address-state';\n\n@selector\nexport default class BillingAddressSelector {\n    constructor(\n        private _billingAddress: BillingAddressState\n    ) {}\n\n    getBillingAddress(): BillingAddress | undefined {\n        return this._billingAddress.data;\n    }\n\n    getUpdateError(): Error | undefined {\n        return this._billingAddress.errors.updateError;\n    }\n\n    getContinueAsGuestError(): Error | undefined {\n        return this._billingAddress.errors.continueAsGuestError;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._billingAddress.errors.loadError;\n    }\n\n    isUpdating(): boolean {\n        return !!this._billingAddress.statuses.isUpdating;\n    }\n\n    isContinuingAsGuest(): boolean {\n        return !!this._billingAddress.statuses.isContinuingAsGuest;\n    }\n\n    isLoading(): boolean {\n        return !!this._billingAddress.statuses.isLoading;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport Config, { ContextConfig, StoreConfig } from './config';\nimport ConfigState from './config-state';\n\n@selector\nexport default class ConfigSelector {\n    constructor(\n        private _config: ConfigState\n    ) {}\n\n    getConfig(): Config | undefined {\n        return this._config.data;\n    }\n\n    getStoreConfig(): StoreConfig | undefined {\n        return this._config.data && this._config.data.storeConfig;\n    }\n\n    getContextConfig(): ContextConfig | undefined {\n        return this._config.data && this._config.data.context;\n    }\n\n    getExternalSource(): string | undefined {\n        return this._config.meta && this._config.meta.externalSource;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._config.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return !!this._config.statuses.isLoading;\n    }\n}\n","import { find } from 'lodash';\n\nimport { selector } from '../common/selector';\nimport { ConfigState } from '../config';\nimport { Country } from '../geography';\n\nimport FormField from './form-field';\n\n@selector\nexport default class FormSelector {\n    constructor(\n        private _config: ConfigState\n    ) {}\n\n    getShippingAddressFields(countries: Country[] = [], countryCode: string): FormField[] {\n        const selectedCountry = find(countries, { code: countryCode });\n        const fields = this._config.data ? this._config.data.storeConfig.formFields.shippingAddressFields : [];\n\n        return fields.map((field: any) => this._processField(field, countries, selectedCountry));\n    }\n\n    getBillingAddressFields(countries: Country[] = [], countryCode: string): FormField[] {\n        const selectedCountry = find(countries, { code: countryCode });\n        const fields = this._config.data ? this._config.data.storeConfig.formFields.billingAddressFields : [];\n\n        return fields.map((field: any) => this._processField(field, countries, selectedCountry));\n    }\n\n    private _processField(field: FormField, countries: Country[], selectedCountry?: Country): FormField {\n        if (field.name === 'countryCode') {\n            return this._processCountry(field, countries, selectedCountry);\n        }\n\n        if (field.name === 'stateOrProvince') {\n            return this._processProvince(field, selectedCountry);\n        }\n\n        if (field.name === 'postalCode') {\n            return this._processsPostCode(field, selectedCountry);\n        }\n\n        return field;\n    }\n\n    private _processCountry(field: FormField, countries: Country[] = [], country?: Country): FormField {\n        if (!countries.length) {\n            return field;\n        }\n\n        const { code = '' } = country || {};\n        const items = countries.map(({ code, name }: any) => ({\n            value: code,\n            label: name,\n        }));\n\n        return {\n            ...field,\n            options: { items },\n            default: code,\n            type: 'array',\n            fieldType: 'dropdown',\n            itemtype: 'string',\n        };\n    }\n\n    private _processProvince(field: FormField, country?: Country): FormField {\n        const { subdivisions = [] } = country || {};\n\n        if (!subdivisions.length) {\n            return {\n                ...field,\n                required: false,\n            };\n        }\n\n        const items = subdivisions.map(({ code, name }: any) => ({\n            value: code,\n            label: name,\n        }));\n\n        return {\n            ...field,\n            name: 'stateOrProvinceCode',\n            options: { items },\n            required: true,\n            type: 'array',\n            fieldType: 'dropdown',\n            itemtype: 'string',\n        };\n    }\n\n    private _processsPostCode(field: FormField, country?: Country): FormField {\n        const { hasPostalCodes = [] } = country || {};\n\n        if (hasPostalCodes === undefined) {\n            return field;\n        }\n\n        return { ...field, required: Boolean(hasPostalCodes) };\n    }\n}\n","import { selector } from '../common/selector';\n\nimport Country from './country';\nimport CountryState from './country-state';\n\n@selector\nexport default class CountrySelector {\n    constructor(\n        private _countries: CountryState\n    ) {}\n\n    getCountries(): Country[] | undefined {\n        return this._countries.data;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._countries.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return !!this._countries.statuses.isLoading;\n    }\n}\n","import { find } from 'lodash';\n\nimport { CheckoutPayment, CheckoutSelector } from '../checkout';\nimport { selector } from '../common/selector';\nimport { GatewayOrderPayment, InternalOrderPayment, OrderSelector } from '../order';\n\nimport PaymentMethod from './payment-method';\nimport { HOSTED } from './payment-method-types';\nimport { ACKNOWLEDGE, FINALIZE } from './payment-status-types';\n\n@selector\nexport default class PaymentSelector {\n    constructor(\n        private _checkout: CheckoutSelector,\n        private _order: OrderSelector\n    ) {}\n\n    getPaymentId(): { providerId: string, gatewayId?: string } | undefined {\n        const internalPayment = this._getInternalPayment();\n\n        if (internalPayment && internalPayment.id) {\n            return {\n                providerId: internalPayment.id,\n                gatewayId: internalPayment.gateway,\n            };\n        }\n\n        const payment = this._getHostedPayment() || this._getGatewayPayment();\n\n        if (payment && payment.providerId) {\n            return {\n                providerId: payment.providerId,\n                gatewayId: payment.gatewayId,\n            };\n        }\n    }\n\n    getPaymentStatus(): string | undefined {\n        const internalPayment = this._getInternalPayment();\n\n        if (internalPayment && internalPayment.status) {\n            return internalPayment.status.replace('PAYMENT_STATUS_', '');\n        }\n\n        const payment = this._getHostedPayment() || this._getGatewayPayment();\n\n        if (payment) {\n            return payment.detail.step;\n        }\n    }\n\n    getPaymentToken(): string | undefined {\n        const meta = this._order.getOrderMeta();\n\n        return meta && meta.token;\n    }\n\n    getPaymentRedirectUrl(): string | undefined {\n        const payment = this._getInternalPayment();\n\n        return payment && payment.redirectUrl;\n    }\n\n    isPaymentDataRequired(useStoreCredit: boolean = false): boolean {\n        const checkout = this._checkout.getCheckout();\n\n        if (!checkout) {\n            return false;\n        }\n\n        const grandTotal = checkout.grandTotal || 0;\n        const storeCredit = checkout.customer.storeCredit || 0;\n\n        return (useStoreCredit ? grandTotal - storeCredit : grandTotal) > 0;\n    }\n\n    isPaymentDataSubmitted(paymentMethod?: PaymentMethod): boolean {\n        if (paymentMethod && paymentMethod.nonce) {\n            return true;\n        }\n\n        return this.getPaymentStatus() === ACKNOWLEDGE || this.getPaymentStatus() === FINALIZE;\n    }\n\n    private _getInternalPayment(): InternalOrderPayment | undefined {\n        const meta = this._order.getOrderMeta();\n\n        return meta && meta.payment;\n    }\n\n    private _getGatewayPayment(): GatewayOrderPayment | undefined {\n        const order = this._order.getOrder();\n\n        return find(order && order.payments, ({ providerId }) =>\n            providerId !== 'giftcertificate' && providerId !== 'storecredit'\n        ) as GatewayOrderPayment;\n    }\n\n    private _getHostedPayment(): CheckoutPayment | undefined {\n        const checkout = this._checkout.getCheckout();\n\n        return find(checkout && checkout.payments, ({ providerType }) =>\n            providerType === HOSTED\n        );\n    }\n}\n","import { find } from 'lodash';\n\nimport { selector } from '../common/selector';\n\nimport PaymentMethod from './payment-method';\nimport PaymentMethodMeta from './payment-method-meta';\nimport PaymentMethodState from './payment-method-state';\n\n@selector\nexport default class PaymentMethodSelector {\n    constructor(\n        private _paymentMethods: PaymentMethodState\n    ) {}\n\n    getPaymentMethods(): PaymentMethod[] | undefined {\n        return this._paymentMethods.data;\n    }\n\n    getPaymentMethodsMeta(): PaymentMethodMeta | undefined {\n        return this._paymentMethods.meta;\n    }\n\n    getPaymentMethod(methodId: string, gatewayId?: string): PaymentMethod | undefined {\n        return gatewayId ?\n            find(this._paymentMethods.data, { id: methodId, gateway: gatewayId }) :\n            find(this._paymentMethods.data, { id: methodId });\n    }\n\n    getLoadError(): Error | undefined {\n        return this._paymentMethods.errors && this._paymentMethods.errors.loadError;\n    }\n\n    getLoadMethodError(methodId?: string): Error | undefined {\n        if (methodId && this._paymentMethods.errors.loadMethodId !== methodId) {\n            return;\n        }\n\n        return this._paymentMethods.errors.loadMethodError;\n    }\n\n    isLoading(): boolean {\n        return !!this._paymentMethods.statuses.isLoading;\n    }\n\n    isLoadingMethod(methodId?: string): boolean {\n        if (methodId && this._paymentMethods.statuses.loadMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._paymentMethods.statuses.isLoadingMethod;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport PaymentStrategyState, { DEFAULT_STATE } from './payment-strategy-state';\n\n@selector\nexport default class PaymentStrategySelector {\n    constructor(\n        private _paymentStrategies: PaymentStrategyState = DEFAULT_STATE\n    ) {}\n\n    getInitializeError(methodId?: string): Error | undefined {\n        if (methodId && this._paymentStrategies.errors.initializeMethodId !== methodId) {\n            return;\n        }\n\n        return this._paymentStrategies.errors.initializeError;\n    }\n\n    getExecuteError(methodId?: string): Error | undefined {\n        if (methodId && this._paymentStrategies.errors.executeMethodId !== methodId) {\n            return;\n        }\n\n        return this._paymentStrategies.errors.executeError;\n    }\n\n    getFinalizeError(methodId?: string): Error | undefined {\n        if (methodId && this._paymentStrategies.errors.finalizeMethodId !== methodId) {\n            return;\n        }\n\n        return this._paymentStrategies.errors.finalizeError;\n    }\n\n    getWidgetInteractingError(methodId?: string): Error | undefined {\n        if (methodId && this._paymentStrategies.errors.widgetInteractionMethodId !== methodId) {\n            return;\n        }\n\n        return this._paymentStrategies.errors.widgetInteractionError;\n    }\n\n    isInitializing(methodId?: string): boolean {\n        if (methodId && this._paymentStrategies.statuses.initializeMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._paymentStrategies.statuses.isInitializing;\n    }\n\n    isInitialized(methodId: string): boolean {\n        return !!(\n            this._paymentStrategies.data[methodId] &&\n            this._paymentStrategies.data[methodId].isInitialized\n        );\n    }\n\n    isExecuting(methodId?: string): boolean {\n        if (methodId && this._paymentStrategies.statuses.executeMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._paymentStrategies.statuses.isExecuting;\n    }\n\n    isFinalizing(methodId?: string): boolean {\n        if (methodId && this._paymentStrategies.statuses.finalizeMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._paymentStrategies.statuses.isFinalizing;\n    }\n\n    isWidgetInteracting(methodId?: string): boolean {\n        if (methodId && this._paymentStrategies.statuses.widgetInteractionMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._paymentStrategies.statuses.isWidgetInteracting;\n    }\n}\n","import Instrument from './instrument';\nimport InstrumentState, { InstrumentMeta } from './instrument-state';\n\nexport default class InstrumentSelector {\n    constructor(\n        private _instruments: InstrumentState\n    ) {}\n\n    getInstruments(): Instrument[] | undefined {\n        return this._instruments.data;\n    }\n\n    getInstrumentsMeta(): InstrumentMeta | undefined {\n        return this._instruments.meta;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._instruments.errors && this._instruments.errors.loadError;\n    }\n\n    getDeleteError(instrumentId?: string): Error | undefined {\n        if (!this._instruments.errors || (instrumentId && this._instruments.errors.failedInstrument !== instrumentId)) {\n            return;\n        }\n\n        return this._instruments.errors.deleteError;\n    }\n\n    isLoading(): boolean {\n        return !!(this._instruments.statuses && this._instruments.statuses.isLoading);\n    }\n\n    isDeleting(instrumentId?: string): boolean {\n        if (!this._instruments.statuses || (instrumentId && this._instruments.statuses.deletingInstrument !== instrumentId)) {\n            return false;\n        }\n\n        return !!this._instruments.statuses.isDeleting;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport RemoteCheckoutState, { RemoteCheckoutStateData } from './remote-checkout-state';\n\n@selector\nexport default class RemoteCheckoutSelector {\n    constructor(\n        private _remoteCheckout: RemoteCheckoutState\n    ) {}\n\n    getCheckout<TMethodId extends keyof RemoteCheckoutStateData>(\n        methodId: TMethodId\n    ): RemoteCheckoutStateData[TMethodId] | undefined {\n        return this._remoteCheckout.data[methodId];\n    }\n}\n","import { BillingAddressSelector } from '../billing';\nimport { CartSelector } from '../cart';\nimport { CheckoutButtonSelector } from '../checkout-buttons';\nimport { createFreezeProxies } from '../common/utility';\nimport { ConfigSelector } from '../config';\nimport { CouponSelector, GiftCertificateSelector } from '../coupon';\nimport { CustomerSelector, CustomerStrategySelector } from '../customer';\nimport { FormSelector } from '../form';\nimport { CountrySelector } from '../geography';\nimport { OrderSelector } from '../order';\nimport { PaymentSelector } from '../payment';\nimport { PaymentMethodSelector, PaymentStrategySelector } from '../payment';\nimport { InstrumentSelector } from '../payment/instrument';\nimport { RemoteCheckoutSelector } from '../remote-checkout';\nimport { ConsignmentSelector, ShippingAddressSelector, ShippingCountrySelector, ShippingStrategySelector } from '../shipping';\n\nimport CheckoutSelector from './checkout-selector';\nimport { CheckoutStoreOptions } from './checkout-store';\nimport CheckoutStoreState from './checkout-store-state';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\nexport default function createInternalCheckoutSelectors(state: CheckoutStoreState, options: CheckoutStoreOptions = {}): InternalCheckoutSelectors {\n    const billingAddress = new BillingAddressSelector(state.billingAddress);\n    const cart = new CartSelector(state.cart);\n    const checkoutButton = new CheckoutButtonSelector(state.checkoutButton);\n    const config = new ConfigSelector(state.config);\n    const countries = new CountrySelector(state.countries);\n    const coupons = new CouponSelector(state.coupons);\n    const customer = new CustomerSelector(state.customer);\n    const customerStrategies = new CustomerStrategySelector(state.customerStrategies);\n    const form = new FormSelector(state.config);\n    const giftCertificates = new GiftCertificateSelector(state.giftCertificates);\n    const instruments = new InstrumentSelector(state.instruments);\n    const paymentMethods = new PaymentMethodSelector(state.paymentMethods);\n    const paymentStrategies = new PaymentStrategySelector(state.paymentStrategies);\n    const shippingAddress = new ShippingAddressSelector(state.consignments);\n    const remoteCheckout = new RemoteCheckoutSelector(state.remoteCheckout);\n    const shippingCountries = new ShippingCountrySelector(state.shippingCountries);\n    const shippingStrategies = new ShippingStrategySelector(state.shippingStrategies);\n\n    // Compose selectors\n    const consignments = new ConsignmentSelector(state.consignments, cart);\n    const checkout = new CheckoutSelector(state.checkout, billingAddress, cart, consignments, coupons, customer, giftCertificates);\n    const order = new OrderSelector(state.order, billingAddress, coupons);\n    const payment = new PaymentSelector(checkout, order);\n\n    const selectors = {\n        billingAddress,\n        cart,\n        checkout,\n        checkoutButton,\n        config,\n        consignments,\n        countries,\n        coupons,\n        customer,\n        customerStrategies,\n        form,\n        giftCertificates,\n        instruments,\n        order,\n        payment,\n        paymentMethods,\n        paymentStrategies,\n        remoteCheckout,\n        shippingAddress,\n        shippingCountries,\n        shippingStrategies,\n    };\n\n    return options.shouldWarnMutation ? createFreezeProxies(selectors) : selectors;\n}\n","export default function setPrototypeOf(object: any, prototype: object) {\n    if (Object.setPrototypeOf) {\n        Object.setPrototypeOf(object, prototype);\n    } else {\n        object.__proto__ = prototype;\n    }\n\n    return object;\n}\n","export default function isPrivate(key: string): boolean {\n    return `${key}`.indexOf('$$') === 0 || `${key}`.indexOf('_') === 0;\n}\n","import { isPlainObject, omitBy, transform } from 'lodash';\n\nexport default function omitDeep(object: any, predicate: (value: any, key: string) => boolean): any {\n    if (Array.isArray(object)) {\n        return object.map(value => omitDeep(value, predicate));\n    }\n\n    if (isPlainObject(object)) {\n        return transform(omitBy(object, predicate), (result, value, key) => {\n            result[key] = omitDeep(value, predicate);\n        }, {});\n    }\n\n    return object;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum ErrorActionType {\n    ClearError = 'CLEAR_ERROR',\n}\n\nexport type ErrorAction = ClearErrorAction;\n\nexport interface ClearErrorAction extends Action {\n    type: ErrorActionType.ClearError;\n    payload: Error;\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { cachableAction, ActionOptions } from '../common/action';\nimport { RequestOptions } from '../common/http-request';\n\nimport { LoadPaymentMethodsAction, LoadPaymentMethodAction, PaymentMethodActionType } from './payment-method-actions';\nimport PaymentMethodRequestSender from './payment-method-request-sender';\n\nexport default class PaymentMethodActionCreator {\n    constructor(\n        private _requestSender: PaymentMethodRequestSender\n    ) {}\n\n    loadPaymentMethods(options?: RequestOptions): Observable<LoadPaymentMethodsAction> {\n        return Observable.create((observer: Observer<LoadPaymentMethodsAction>) => {\n            observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodsRequested));\n\n            this._requestSender.loadPaymentMethods(options)\n                .then(response => {\n                    const meta = {\n                        deviceSessionId: response.headers['x-device-session-id'],\n                        sessionHash: response.headers['x-session-hash'],\n                    };\n\n                    observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodsSucceeded, response.body, meta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(PaymentMethodActionType.LoadPaymentMethodsFailed, response));\n                });\n        });\n    }\n\n    @cachableAction\n    loadPaymentMethod(methodId: string, options?: RequestOptions & ActionOptions): Observable<LoadPaymentMethodAction> {\n        return Observable.create((observer: Observer<LoadPaymentMethodAction>) => {\n            observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodRequested, undefined, { methodId }));\n\n            this._requestSender.loadPaymentMethod(methodId, options)\n                .then(response => {\n                    observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodSucceeded, response.body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(PaymentMethodActionType.LoadPaymentMethodFailed, response, { methodId }));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, INTERNAL_USE_ONLY, RequestOptions } from '../common/http-request';\n\nimport PaymentMethod from './payment-method';\n\nexport default class PaymentMethodRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadPaymentMethods({ timeout }: RequestOptions = {}): Promise<Response<PaymentMethod[]>> {\n        const url = '/api/storefront/payments';\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n        });\n    }\n\n    loadPaymentMethod(methodId: string, { timeout }: RequestOptions = {}): Promise<Response<PaymentMethod>> {\n        const url = `/api/storefront/payments/${methodId}`;\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n        });\n    }\n}\n","import EmbeddedCheckoutStyles from '../embedded-checkout-styles';\n\nexport enum EmbeddedContentEventType {\n    StyleConfigured = 'STYLE_CONFIGURED',\n}\n\nexport interface EmbeddedContentEventMap {\n    [EmbeddedContentEventType.StyleConfigured]: EmbeddedContentStyleConfiguredEvent;\n}\n\nexport type EmbeddedContentEvent = (\n    EmbeddedContentStyleConfiguredEvent\n);\n\nexport interface EmbeddedContentStyleConfiguredEvent {\n    type: EmbeddedContentEventType.StyleConfigured;\n    payload: EmbeddedCheckoutStyles;\n}\n","import { parseUrl } from '../common/url';\nimport { bindDecorator as bind } from '../common/utility';\n\nimport { IframeEventMap } from './iframe-event';\nimport isIframeEvent from './is-iframe-event';\n\nexport default class IframeEventListener<TEventMap extends IframeEventMap<keyof TEventMap>> {\n    private _isListening: boolean;\n    private _listeners: EventListeners<TEventMap>;\n    private _sourceOrigin: string;\n\n    constructor(\n        sourceOrigin: string\n    ) {\n        this._sourceOrigin = parseUrl(sourceOrigin).origin;\n        this._isListening = false;\n        this._listeners = {};\n    }\n\n    listen(): void {\n        if (this._isListening) {\n            return;\n        }\n\n        this._isListening = true;\n\n        window.addEventListener('message', this._handleMessage);\n    }\n\n    stopListen(): void {\n        if (!this._isListening) {\n            return;\n        }\n\n        this._isListening = false;\n\n        window.removeEventListener('message', this._handleMessage);\n    }\n\n    addListener<TType extends keyof TEventMap>(type: TType, listener: (event: TEventMap[TType]) => void): void {\n        let listeners = this._listeners[type];\n\n        if (!listeners) {\n            this._listeners[type] = listeners = [];\n        }\n\n        listeners.push(listener);\n    }\n\n    removeListener<TType extends keyof TEventMap>(type: TType, listener: (event: TEventMap[TType]) => void): void {\n        const listeners = this._listeners[type];\n\n        if (!listeners) {\n            return;\n        }\n\n        const index = listeners.indexOf(listener);\n\n        if (index >= 0) {\n            listeners.splice(index, 1);\n        }\n    }\n\n    trigger<TType extends keyof TEventMap>(event: TEventMap[TType]): void {\n        const listeners = this._listeners[event.type];\n\n        if (!listeners) {\n            return;\n        }\n\n        listeners.forEach(listener => listener(event));\n    }\n\n    @bind\n    private _handleMessage(event: MessageEvent): void {\n        if ((event.origin !== this._sourceOrigin) || !isIframeEvent(event.data, event.data.type)) {\n            return;\n        }\n\n        this.trigger(event.data);\n    }\n}\n\ntype EventListeners<TEventMap> = {\n    [key in keyof TEventMap]?: Array<(event: TEventMap[keyof TEventMap]) => void>;\n};\n","export const INTERNAL_USE_ONLY = 'This API endpoint is for internal use only and may change in the future';\n","import { find, some, values } from 'lodash';\n\nimport { selector } from '../common/selector';\n\nimport CheckoutButtonState from './checkout-button-state';\nimport { CheckoutButtonMethodType } from './strategies';\n\n@selector\nexport default class CheckoutButtonSelector {\n    constructor(\n        private _checkoutButton: CheckoutButtonState\n    ) {}\n\n    getState(): CheckoutButtonState {\n        return this._checkoutButton;\n    }\n\n    isInitializing(methodId?: CheckoutButtonMethodType): boolean {\n        if (methodId) {\n            const method = this._checkoutButton.statuses[methodId];\n\n            return (method && method.isInitializing) === true;\n        }\n\n        return some(this._checkoutButton.statuses, { isInitializing: true });\n    }\n\n    isInitialized(methodId: CheckoutButtonMethodType, containerId?: string): boolean {\n        const method = this._checkoutButton.data[methodId];\n\n        if (!method) {\n            return false;\n        }\n\n        if (!containerId) {\n            return some(method.initializedContainers, isInitialized => isInitialized === true);\n        }\n\n        return method.initializedContainers[containerId] === true;\n    }\n\n    isDeinitializing(methodId?: CheckoutButtonMethodType): boolean {\n        if (methodId) {\n            const method = this._checkoutButton.statuses[methodId];\n\n            return (method && method.isDeinitializing) === true;\n        }\n\n        return some(this._checkoutButton.statuses, { isDeinitializing: true });\n    }\n\n    getInitializeError(methodId?: CheckoutButtonMethodType): Error | undefined {\n        const method = methodId ?\n            this._checkoutButton.errors[methodId] :\n            find(values(this._checkoutButton.errors), method => !!(method && method.initializeError));\n\n        return method && method.initializeError;\n    }\n\n    getDeinitializeError(methodId?: CheckoutButtonMethodType): Error | undefined {\n        const method = methodId ?\n            this._checkoutButton.errors[methodId] :\n            find(values(this._checkoutButton.errors), method => !!(method && method.deinitializeError));\n\n        return method && method.deinitializeError;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutButtonAction, CheckoutButtonActionType } from './checkout-button-actions';\nimport CheckoutButtonState, { CheckoutButtonDataState, CheckoutButtonErrorsState, CheckoutButtonStatusesState } from './checkout-button-state';\n\nconst DEFAULT_STATE: CheckoutButtonState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n\nconst DEFAULT_DATA_STATE: CheckoutButtonDataState = { initializedContainers: {} };\nconst DEFAULT_ERROR_STATE: CheckoutButtonErrorsState = {};\nconst DEFAULT_STATUS_STATE: CheckoutButtonStatusesState = {};\n\nexport default function checkoutButtonReducer(\n    state: CheckoutButtonState = DEFAULT_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonState {\n    if (!action.meta || !action.meta.methodId) {\n        return state;\n    }\n\n    const reducer = combineReducers<CheckoutButtonState>({\n        data: combineReducers({\n            [action.meta.methodId]: dataReducer,\n        }),\n        errors: combineReducers({\n            [action.meta.methodId]: errorsReducer,\n        }),\n        statuses: combineReducers({\n            [action.meta.methodId]: statusesReducer,\n        }),\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: CheckoutButtonDataState = DEFAULT_DATA_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonDataState {\n    switch (action.type) {\n    case CheckoutButtonActionType.InitializeButtonSucceeded:\n        if (!action.meta || !action.meta.containerId) {\n            return data;\n        }\n\n        return {\n            ...data,\n            initializedContainers: {\n                ...data.initializedContainers,\n                [action.meta.containerId]: true,\n            },\n        };\n\n    case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n        return {\n            ...data,\n            initializedContainers: {},\n        };\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: CheckoutButtonErrorsState = DEFAULT_ERROR_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonErrorsState {\n    switch (action.type) {\n    case CheckoutButtonActionType.InitializeButtonRequested:\n    case CheckoutButtonActionType.InitializeButtonSucceeded:\n        return {\n            ...errors,\n            initializeError: undefined,\n        };\n\n    case CheckoutButtonActionType.InitializeButtonFailed:\n        return {\n            ...errors,\n            initializeError: action.payload,\n        };\n\n    case CheckoutButtonActionType.DeinitializeButtonRequested:\n    case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n        return {\n            ...errors,\n            deinitializeError: undefined,\n        };\n\n    case CheckoutButtonActionType.DeinitializeButtonFailed:\n        return {\n            ...errors,\n            deinitializeError: action.payload,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CheckoutButtonStatusesState = DEFAULT_STATUS_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonStatusesState {\n    switch (action.type) {\n    case CheckoutButtonActionType.InitializeButtonRequested:\n        return {\n            ...statuses,\n            isInitializing: true,\n        };\n\n    case CheckoutButtonActionType.InitializeButtonFailed:\n    case CheckoutButtonActionType.InitializeButtonSucceeded:\n        return {\n            ...statuses,\n            isInitializing: false,\n        };\n\n    case CheckoutButtonActionType.DeinitializeButtonRequested:\n        return {\n            ...statuses,\n            isDeinitializing: true,\n        };\n\n    case CheckoutButtonActionType.DeinitializeButtonFailed:\n    case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n        return {\n            ...statuses,\n            isDeinitializing: false,\n        };\n\n    default:\n        return statuses;\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport enum NotEmbeddableErrorType {\n    MissingContainer = 'missing_container',\n    MissingContent = 'missing_content',\n    UnknownError = 'unknown_error',\n}\n\nexport default class NotEmbeddableError extends StandardError {\n    constructor(\n        message?: string,\n        public subtype: NotEmbeddableErrorType = NotEmbeddableErrorType.UnknownError\n    ) {\n        super(message || 'Unable to embed the checkout form.');\n\n        this.type = 'not_embeddable';\n    }\n}\n","import { default as storage } from 'local-storage-fallback';\n\nexport default class BrowserStorage {\n    constructor(\n        private _namespace: string\n    ) {}\n\n    getItem<TValue = any>(key: string): TValue | null {\n        const rawValue = storage.getItem(this.withNamespace(key));\n\n        if (rawValue === null) {\n            return null;\n        }\n\n        try {\n            return JSON.parse(rawValue);\n        } catch (error) {\n            // Clean up invalid values\n            this.removeItem(this.withNamespace(key));\n\n            return null;\n        }\n    }\n\n    getItemOnce<TValue = any>(key: string): TValue | null {\n        const value = this.getItem(key);\n\n        this.removeItem(key);\n\n        return value;\n    }\n\n    setItem<TValue = any>(key: string, value: TValue): void {\n        return storage.setItem(this.withNamespace(key), JSON.stringify(value));\n    }\n\n    removeItem(key: string): void {\n        return storage.removeItem(this.withNamespace(key));\n    }\n\n    private withNamespace(key: string): string {\n        return `${this._namespace}.${key}`;\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { InternalErrorResponseBody } from '../../common/error';\nimport { RequestError } from '../../common/error/errors';\n\nexport default class InvalidLoginTokenError extends RequestError {\n    constructor(response: Response<InternalErrorResponseBody>) {\n        super(response, { message: response.body.title });\n\n        this.type = 'invalid_login_token';\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { IFrameComponent } from 'iframe-resizer';\n\nimport { BrowserStorage } from '../common/storage';\nimport { parseUrl } from '../common/url';\n\nimport EmbeddedCheckoutError from './embedded-checkout-error';\nimport { EmbeddedCheckoutEventMap, EmbeddedCheckoutEventType } from './embedded-checkout-events';\nimport EmbeddedCheckoutOptions from './embedded-checkout-options';\nimport { InvalidLoginTokenError, NotEmbeddableError, NotEmbeddableErrorType } from './errors';\nimport { EmbeddedContentEvent, EmbeddedContentEventType } from './iframe-content/embedded-content-events';\nimport IframeEventListener from './iframe-event-listener';\nimport IframeEventPoster from './iframe-event-poster';\nimport LoadingIndicator from './loading-indicator';\nimport ResizableIframeCreator from './resizable-iframe-creator';\n\nconst CAN_RETRY_ALLOW_COOKIE = 'canRetryAllowCookie';\nconst IS_COOKIE_ALLOWED_KEY = 'isCookieAllowed';\n\nexport default class EmbeddedCheckout {\n    private _iframe?: IFrameComponent;\n    private _isAttached: boolean;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _iframeCreator: ResizableIframeCreator,\n        private _messageListener: IframeEventListener<EmbeddedCheckoutEventMap>,\n        private _messagePoster: IframeEventPoster<EmbeddedContentEvent>,\n        private _loadingIndicator: LoadingIndicator,\n        private _requestSender: RequestSender,\n        private _storage: BrowserStorage,\n        private _location: Location,\n        private _options: EmbeddedCheckoutOptions\n    ) {\n        this._isAttached = false;\n\n        if (this._options.onComplete) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.CheckoutComplete, this._options.onComplete);\n        }\n\n        if (this._options.onError) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.CheckoutError, this._options.onError);\n        }\n\n        if (this._options.onLoad) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.CheckoutLoaded, this._options.onLoad);\n        }\n\n        if (this._options.onFrameLoad) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.FrameLoaded, this._options.onFrameLoad);\n        }\n\n        if (this._options.onSignOut) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.SignedOut, this._options.onSignOut);\n        }\n\n        this._messageListener.addListener(EmbeddedCheckoutEventType.FrameLoaded, () => this._configureStyles());\n    }\n\n    attach(): Promise<this> {\n        if (this._isAttached) {\n            return Promise.resolve(this);\n        }\n\n        this._isAttached = true;\n        this._messageListener.listen();\n        this._loadingIndicator.show(this._options.containerId);\n\n        return this._allowCookie()\n            .then(() => this._attemptLogin())\n            .then(url => this._iframeCreator.createFrame(url, this._options.containerId))\n            .then(iframe => {\n                this._iframe = iframe;\n\n                this._configureStyles();\n                this._loadingIndicator.hide();\n            })\n            .catch(error => {\n                this._isAttached = false;\n\n                return this._retryAllowCookie(error)\n                    .catch(() => {\n                        this._messageListener.trigger({\n                            type: EmbeddedCheckoutEventType.FrameError,\n                            payload: error,\n                        });\n\n                        this._loadingIndicator.hide();\n\n                        throw error;\n                    });\n            })\n            .then(() => this);\n    }\n\n    detach(): void {\n        if (!this._isAttached) {\n            return;\n        }\n\n        this._isAttached = false;\n        this._messageListener.stopListen();\n\n        if (this._iframe && this._iframe.parentNode) {\n            this._iframe.parentNode.removeChild(this._iframe);\n            this._iframe.iFrameResizer.close();\n        }\n    }\n\n    private _configureStyles(): void {\n        if (!this._iframe || !this._iframe.contentWindow || !this._options.styles) {\n            return;\n        }\n\n        this._messagePoster.setTarget(this._iframe.contentWindow);\n\n        this._messagePoster.post({\n            type: EmbeddedContentEventType.StyleConfigured,\n            payload: this._options.styles,\n        });\n    }\n\n    private _attemptLogin(): Promise<string> {\n        if (!/^\\/login\\/token/.test(parseUrl(this._options.url).pathname)) {\n            return Promise.resolve(this._options.url);\n        }\n\n        return this._requestSender.post(this._options.url)\n            .then(({ body: { redirectUrl } }) => redirectUrl)\n            .catch(response => Promise.reject(new InvalidLoginTokenError(response)));\n    }\n\n    /**\n     * This workaround is required for certain browsers (namely Safari) that\n     * prevent session cookies to be set for a third party website unless the\n     * user has recently visited such website. Therefore, before we attempt to\n     * login or set an active cart in the session, we need to first redirect the\n     * user to the domain of Embedded Checkout.\n     */\n    private _allowCookie(): Promise<void> {\n        if (this._storage.getItem(IS_COOKIE_ALLOWED_KEY)) {\n            // It could be possible that the flag is set to true but the browser\n            // has already removed the permission to store cookie. In that case,\n            // we should try to redirect the user again.\n            this._storage.setItem(CAN_RETRY_ALLOW_COOKIE, true);\n\n            return Promise.resolve();\n        }\n\n        this._storage.removeItem(CAN_RETRY_ALLOW_COOKIE);\n        this._storage.setItem(IS_COOKIE_ALLOWED_KEY, true);\n\n        const { origin } = parseUrl(this._options.url);\n        const redirectUrl = `${origin}/embedded-checkout/allow-cookie?returnUrl=${encodeURIComponent(this._location.href)}`;\n\n        document.body.style.visibility = 'hidden';\n        this._location.replace(redirectUrl);\n\n        return new Promise<never>(() => {});\n    }\n\n    private _retryAllowCookie(error: EmbeddedCheckoutError): Promise<void> {\n        const canRetry = (\n            this._storage.getItem(CAN_RETRY_ALLOW_COOKIE) &&\n            error instanceof NotEmbeddableError &&\n            error.subtype === NotEmbeddableErrorType.MissingContent\n        );\n\n        if (!canRetry) {\n            return Promise.reject();\n        }\n\n        this._storage.removeItem(CAN_RETRY_ALLOW_COOKIE);\n        this._storage.removeItem(IS_COOKIE_ALLOWED_KEY);\n\n        return this._allowCookie();\n    }\n}\n","import { LoadingIndicatorStyles } from './embedded-checkout-styles';\n\nconst DEFAULT_STYLES: LoadingIndicatorStyles = {\n    size: 70,\n    color: '#d9d9d9',\n    backgroundColor: '#ffffff',\n};\n\nconst ROTATION_ANIMATION = 'embedded-checkout-loading-indicator-rotation';\n\nexport default class LoadingIndicator {\n    private _container: HTMLElement;\n    private _indicator: HTMLElement;\n    private _styles: LoadingIndicatorStyles;\n\n    constructor(\n        options?: { styles?: LoadingIndicatorStyles }\n    ) {\n        this._styles = { ...DEFAULT_STYLES, ...options && options.styles };\n\n        this._defineAnimation();\n\n        this._container = this._buildContainer();\n        this._indicator = this._buildIndicator();\n\n        this._container.appendChild(this._indicator);\n    }\n\n    show(parentId?: string): void {\n        if (parentId) {\n            const parent = document.getElementById(parentId);\n\n            if (!parent) {\n                throw new Error('Unable to attach the loading indicator because the parent ID is not valid.');\n            }\n\n            parent.appendChild(this._container);\n        }\n\n        this._container.style.visibility = 'visible';\n        this._container.style.opacity = '1';\n    }\n\n    hide(): void {\n        const handleTransitionEnd = () => {\n            this._container.style.visibility = 'hidden';\n\n            this._container.removeEventListener('transitionend', handleTransitionEnd);\n        };\n\n        this._container.addEventListener('transitionend', handleTransitionEnd);\n\n        this._container.style.opacity = '0';\n    }\n\n    private _buildContainer(): HTMLElement {\n        const container = document.createElement('div');\n\n        container.style.display = 'block';\n        container.style.bottom = '0';\n        container.style.left = '0';\n        container.style.height = '100%';\n        container.style.width = '100%';\n        container.style.position = 'absolute';\n        container.style.right = '0';\n        container.style.top = '0';\n        container.style.transition = 'all 250ms ease-out';\n        container.style.opacity = '0';\n\n        return container;\n    }\n\n    private _buildIndicator(): HTMLElement {\n        const indicator = document.createElement('div');\n\n        indicator.style.display = 'block';\n        indicator.style.width = `${this._styles.size}px`;\n        indicator.style.height = `${this._styles.size}px`;\n        indicator.style.borderRadius = `${this._styles.size}px`;\n        indicator.style.border = 'solid 1px';\n        indicator.style.borderColor = `${this._styles.backgroundColor} ${this._styles.backgroundColor} ${this._styles.color} ${this._styles.color}`;\n        indicator.style.margin = '0 auto';\n        indicator.style.position = 'absolute';\n        indicator.style.left = '0';\n        indicator.style.right = '0';\n        indicator.style.top = '50%';\n        indicator.style.transform = 'translateY(-50%) rotate(0deg)';\n        indicator.style.transformStyle = 'preserve-3d';\n        indicator.style.animation = `${ROTATION_ANIMATION} 500ms infinite cubic-bezier(0.69, 0.31, 0.56, 0.83)`;\n\n        return indicator;\n    }\n\n    private _defineAnimation(): void {\n        // In order to define CSS animation, we need to insert a stylesheet into the host frame.\n        // We only have to do it once.\n        if (document.getElementById(ROTATION_ANIMATION)) {\n            return;\n        }\n\n        const style = document.createElement('style');\n\n        style.id = ROTATION_ANIMATION;\n\n        document.head.appendChild(style);\n\n        if (style.sheet instanceof CSSStyleSheet) {\n            style.sheet.insertRule(`\n                @keyframes ${ROTATION_ANIMATION} {\n                    0% { transform: translateY(-50%) rotate(0deg); }\n                    100% { transform: translateY(-50%) rotate(360deg); }\n                }\n            `);\n        }\n    }\n}\n","import { iframeResizer, IFrameComponent } from 'iframe-resizer';\n\nimport { parseUrl } from '../common/url';\n\nimport { EmbeddedCheckoutEventType } from './embedded-checkout-events';\nimport { NotEmbeddableError, NotEmbeddableErrorType } from './errors';\nimport isIframeEvent from './is-iframe-event';\n\nexport default class ResizableIframeCreator {\n    constructor(\n        private _options?: { timeout: number }\n    ) {}\n\n    createFrame(src: string, containerId: string): Promise<IFrameComponent> {\n        const container = document.getElementById(containerId);\n        const { timeout = 60000 } = this._options || {};\n\n        if (!container) {\n            throw new NotEmbeddableError(\n                'Unable to embed the iframe because the container element could not be found.',\n                NotEmbeddableErrorType.MissingContainer\n            );\n        }\n\n        const iframe = document.createElement('iframe');\n\n        iframe.src = src;\n        iframe.style.border = 'none';\n        iframe.style.display = 'none';\n        iframe.style.width = '100%';\n        iframe.allowPaymentRequest = true;\n\n        container.appendChild(iframe);\n\n        return this._toResizableFrame(iframe, timeout)\n            .catch(error => {\n                container.removeChild(iframe);\n\n                throw error;\n            });\n    }\n\n    private _toResizableFrame(iframe: HTMLIFrameElement, timeoutInterval: number): Promise<IFrameComponent> {\n        // Can't simply listen to `load` event because it always gets triggered even if there's an error.\n        // Instead, listen to the `load` inside the iframe and let the parent frame know when it happens.\n        return new Promise((resolve, reject) => {\n            const timeout = window.setTimeout(() => {\n                reject(new NotEmbeddableError('Unable to embed the iframe because the content could not be loaded.'));\n            }, timeoutInterval);\n\n            const handleMessage = (event: MessageEvent) => {\n                if (event.origin !== parseUrl(iframe.src).origin) {\n                    return;\n                }\n\n                if (isIframeEvent(event.data, EmbeddedCheckoutEventType.FrameError)) {\n                    teardown();\n                    reject(new NotEmbeddableError(event.data.payload.message, NotEmbeddableErrorType.MissingContent));\n                }\n\n                if (isIframeEvent(event.data, EmbeddedCheckoutEventType.FrameLoaded)) {\n                    iframe.style.display = '';\n\n                    const contentId = event.data.payload && event.data.payload.contentId;\n                    const iframes = iframeResizer({\n                        scrolling: false,\n                        sizeWidth: false,\n                        heightCalculationMethod: contentId ? 'taggedElement' : 'lowestElement',\n                    }, iframe);\n\n                    teardown();\n                    resolve(iframes[iframes.length - 1]);\n                }\n            };\n\n            const teardown = () => {\n                window.removeEventListener('message', handleMessage);\n                window.clearTimeout(timeout);\n            };\n\n            window.addEventListener('message', handleMessage);\n        });\n    }\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\n\nimport { BrowserStorage } from '../common/storage';\nimport { parseUrl } from '../common/url';\n\nimport EmbeddedCheckout from './embedded-checkout';\nimport { EmbeddedCheckoutEventMap } from './embedded-checkout-events';\nimport EmbeddedCheckoutOptions from './embedded-checkout-options';\nimport { EmbeddedContentEvent } from './iframe-content/embedded-content-events';\nimport IframeEventListener from './iframe-event-listener';\nimport IframeEventPoster from './iframe-event-poster';\nimport LoadingIndicator from './loading-indicator';\nimport ResizableIframeCreator from './resizable-iframe-creator';\n\nconst STORAGE_PREFIX = 'BigCommerce.EmbeddedCheckout';\n\n/**\n * Embed the checkout form in an iframe.\n *\n * @remarks\n * Once the iframe is embedded, it will automatically resize according to the\n * size of the checkout form. It will also notify the parent window when certain\n * events have occurred. i.e.: when the form is loaded and ready to be used.\n *\n * ```js\n * embedCheckout({\n *     url: 'https://checkout/url',\n *     containerId: 'container-id',\n * });\n * ```\n *\n * @param options - Options for embedding the checkout form.\n * @returns A promise that resolves to an instance of `EmbeddedCheckout`.\n */\nexport default function embedCheckout(options: EmbeddedCheckoutOptions): Promise<EmbeddedCheckout> {\n    const origin = parseUrl(options.url).origin;\n    const embeddedCheckout = new EmbeddedCheckout(\n        new ResizableIframeCreator(),\n        new IframeEventListener<EmbeddedCheckoutEventMap>(origin),\n        new IframeEventPoster<EmbeddedContentEvent>(origin),\n        new LoadingIndicator({ styles: options.styles && options.styles.loadingIndicator }),\n        createRequestSender(),\n        new BrowserStorage(STORAGE_PREFIX),\n        window.location,\n        options\n    );\n\n    return embeddedCheckout.attach();\n}\n","export { default as embedCheckout } from './embed-checkout';\n","import { keyBy, reduce, some } from 'lodash';\n\nimport { Checkout } from '../checkout';\nimport { mapToInternalCoupon, mapToInternalGiftCertificate } from '../coupon';\nimport { mapToDiscountNotifications } from '../promotion';\n\nimport { AmountTransformer } from '.';\nimport InternalCart from './internal-cart';\nimport mapToInternalLineItems from './map-to-internal-line-items';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalCart(checkout: Checkout): InternalCart {\n    const decimalPlaces = checkout.cart.currency.decimalPlaces;\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: checkout.cart.id,\n        items: mapToInternalLineItems(checkout.cart.lineItems, decimalPlaces),\n        currency: checkout.cart.currency.code,\n        coupon: {\n            discountedAmount: reduce(checkout.cart.coupons, (sum, coupon) => {\n                return sum + coupon.discountedAmount;\n            }, 0),\n            coupons: checkout.cart.coupons.map(mapToInternalCoupon),\n        },\n        discount: {\n            amount: checkout.cart.discountAmount,\n            integerAmount: amountTransformer.toInteger(checkout.cart.discountAmount),\n        },\n        discountNotifications: mapToDiscountNotifications(checkout.promotions),\n        giftCertificate: {\n            totalDiscountedAmount: reduce(checkout.giftCertificates, (sum, certificate) => {\n                return sum + certificate.used;\n            }, 0),\n            appliedGiftCertificates: keyBy(checkout.giftCertificates.map(mapToInternalGiftCertificate), 'code'),\n        },\n        shipping: {\n            amount: checkout.shippingCostTotal,\n            integerAmount: amountTransformer.toInteger(checkout.shippingCostTotal),\n            amountBeforeDiscount: checkout.shippingCostBeforeDiscount,\n            integerAmountBeforeDiscount: amountTransformer.toInteger(checkout.shippingCostBeforeDiscount),\n            required: some(checkout.cart.lineItems.physicalItems, lineItem => lineItem.isShippingRequired),\n        },\n        subtotal: {\n            amount: checkout.subtotal,\n            integerAmount: amountTransformer.toInteger(checkout.subtotal),\n        },\n        storeCredit: {\n            amount: checkout.customer ? checkout.customer.storeCredit : 0,\n        },\n        taxSubtotal: {\n            amount: checkout.taxTotal,\n            integerAmount: amountTransformer.toInteger(checkout.taxTotal),\n        },\n        taxes: checkout.taxes,\n        taxTotal: {\n            amount: checkout.taxTotal,\n            integerAmount: amountTransformer.toInteger(checkout.taxTotal),\n        },\n        handling: {\n            amount: checkout.handlingCostTotal,\n            integerAmount: amountTransformer.toInteger(checkout.handlingCostTotal),\n        },\n        grandTotal: {\n            amount: checkout.grandTotal,\n            integerAmount: amountTransformer.toInteger(checkout.grandTotal),\n        },\n    };\n}\n","import { DiscountNotification } from '../discount';\n\nimport { Promotion } from '.';\n\nexport default function mapToDiscountNotifications(promotions?: Promotion[]): DiscountNotification[] {\n    const notifications: DiscountNotification[] = [];\n\n    (promotions || []).forEach(promotion => {\n        (promotion.banners || []).forEach(banner => {\n            notifications.push({\n                placeholders: [],\n                discountType: null,\n                message: '',\n                messageHtml: banner.text,\n            });\n        });\n    });\n\n    return notifications;\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, merge, of, Observable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType, StandardError } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { ConfigActionCreator } from '../config';\n\nimport { CheckoutRequestBody } from './checkout';\nimport { CheckoutActionType, LoadCheckoutAction, UpdateCheckoutAction } from './checkout-actions';\nimport CheckoutRequestSender from './checkout-request-sender';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\nexport default class CheckoutActionCreator {\n    constructor(\n        private _checkoutRequestSender: CheckoutRequestSender,\n        private _configActionCreator: ConfigActionCreator\n    ) {}\n\n    loadCheckout(id: string, options?: RequestOptions): Observable<LoadCheckoutAction> {\n        return concat(\n            of(createAction(CheckoutActionType.LoadCheckoutRequested)),\n            merge(\n                this._configActionCreator.loadConfig({ ...options, useCache: true }),\n                defer(() => this._checkoutRequestSender.loadCheckout(id, options)\n                    .then(({ body }) => createAction(CheckoutActionType.LoadCheckoutSucceeded, body)))\n            )\n        ).pipe(\n            catchError(error => throwErrorAction(CheckoutActionType.LoadCheckoutFailed, error))\n        );\n    }\n\n    loadDefaultCheckout(options?: RequestOptions): ThunkAction<LoadCheckoutAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(CheckoutActionType.LoadCheckoutRequested)),\n            this._configActionCreator.loadConfig(),\n            defer(() => {\n                const state = store.getState();\n                const context = state.config.getContextConfig();\n\n                if (!context || !context.checkoutId) {\n                    throw new StandardError('Unable to load checkout: no cart is available');\n                }\n\n                return this._checkoutRequestSender.loadCheckout(context.checkoutId, options)\n                    .then(({ body }) => createAction(CheckoutActionType.LoadCheckoutSucceeded, body));\n            })\n        ).pipe(\n            catchError(error => throwErrorAction(CheckoutActionType.LoadCheckoutFailed, error))\n        );\n    }\n\n    updateCheckout(\n        body: CheckoutRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateCheckoutAction, InternalCheckoutSelectors> {\n        return store => new Observable(observer => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(CheckoutActionType.UpdateCheckoutRequested));\n\n            this._checkoutRequestSender.updateCheckout(checkout.id, body, options)\n                .then(({ body }) => {\n                    observer.next(createAction(CheckoutActionType.UpdateCheckoutSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CheckoutActionType.UpdateCheckoutFailed, response));\n                });\n        });\n    }\n\n    loadCurrentCheckout(options?: RequestOptions): ThunkAction<LoadCheckoutAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            return this.loadCheckout(checkout.id, options);\n        };\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { AddressRequestBody } from '../address';\nimport { Cart } from '../cart';\nimport { InternalCheckoutSelectors, ReadableCheckoutStore } from '../checkout';\nimport { CheckoutIncludes } from '../checkout/checkout-params';\nimport CheckoutRequestSender from '../checkout/checkout-request-sender';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport Consignment, {\n    ConsignmentsRequestBody,\n    ConsignmentAssignmentRequestBody,\n    ConsignmentCreateRequestBody,\n    ConsignmentLineItem,\n    ConsignmentRequestBody,\n    ConsignmentShippingOptionRequestBody,\n    ConsignmentUpdateRequestBody\n} from './consignment';\nimport {\n    ConsignmentActionType,\n    CreateConsignmentsAction,\n    DeleteConsignmentAction,\n    LoadShippingOptionsAction,\n    UpdateConsignmentAction,\n    UpdateShippingOptionAction,\n} from './consignment-actions';\nimport ConsignmentRequestSender from './consignment-request-sender';\n\nexport default class ConsignmentActionCreator {\n    constructor(\n        private _consignmentRequestSender: ConsignmentRequestSender,\n        private _checkoutRequestSender: CheckoutRequestSender\n    ) {}\n\n    unassignItemsByAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<DeleteConsignmentAction | UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const existingConsignment = state.consignments.getConsignmentByAddress(consignment.shippingAddress);\n\n            if (!existingConsignment) {\n                throw new InvalidArgumentError('No consignment found for the specified address');\n            }\n\n            const lineItems = this._removeLineItems(\n                consignment.lineItems,\n                existingConsignment,\n                state.cart.getCart()\n            );\n\n            if (!lineItems.length) {\n                return this.deleteConsignment(existingConsignment.id, options)(store);\n            }\n\n            return this.updateConsignment({\n                id: existingConsignment.id,\n                shippingAddress: consignment.shippingAddress,\n                lineItems,\n            }, options)(store);\n        };\n    }\n\n    assignItemsByAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateConsignmentAction | CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const existingConsignment = state.consignments.getConsignmentByAddress(consignment.shippingAddress);\n\n            return this._createOrUpdateConsignment({\n                id: existingConsignment && existingConsignment.id,\n                shippingAddress: consignment.shippingAddress,\n                lineItems: this._addLineItems(\n                    consignment.lineItems,\n                    existingConsignment,\n                    state.cart.getCart()\n                ),\n            }, options)(store);\n        };\n    }\n\n    selectShippingOption(\n        id: string,\n        options?: RequestOptions\n    ): ThunkAction<UpdateShippingOptionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateShippingOptionAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n            const consignments = state.consignments.getConsignments();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            if (!consignments || !consignments.length) {\n                throw new MissingDataError(MissingDataErrorType.MissingConsignments);\n            }\n\n            const consignmentUpdateBody = {\n                id: consignments[0].id,\n                shippingOptionId: id,\n            };\n\n            const consignmentMeta = {\n                id: consignments[0].id,\n            };\n\n            observer.next(createAction(ConsignmentActionType.UpdateShippingOptionRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignmentUpdateBody, options)\n                .then(({ body }) => {\n                    observer.next(createAction(\n                        ConsignmentActionType.UpdateShippingOptionSucceeded,\n                        body,\n                        consignmentMeta\n                    ));\n\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(\n                        ConsignmentActionType.UpdateShippingOptionFailed,\n                        response,\n                        consignmentMeta\n                    ));\n                });\n        });\n    }\n\n    loadShippingOptions(options?: RequestOptions): ThunkAction<LoadShippingOptionsAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<LoadShippingOptionsAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.LoadShippingOptionsRequested));\n\n            this._checkoutRequestSender.loadCheckout(checkout.id, {\n                ...options,\n                params: {\n                    include: [CheckoutIncludes.AvailableShippingOptions],\n                },\n            })\n            .then(({ body }) => {\n                observer.next(createAction(ConsignmentActionType.LoadShippingOptionsSucceeded, body));\n                observer.complete();\n            })\n            .catch(response => {\n                observer.error(createErrorAction(ConsignmentActionType.LoadShippingOptionsFailed, response));\n            });\n        });\n    }\n\n    updateAddress(\n        address: AddressRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<CreateConsignmentsAction | UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return store => {\n            const consignment = this._getConsignmentRequestBody(address, store);\n            const consignments = store.getState().consignments.getConsignments();\n\n            if (consignments && consignments.length) {\n                (consignment as ConsignmentUpdateRequestBody).id = consignments[0].id;\n            }\n\n            return this._createOrUpdateConsignment(consignment, options)(store);\n        };\n    }\n\n    createConsignments(\n        consignments: ConsignmentsRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<CreateConsignmentsAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.CreateConsignmentsRequested));\n\n            this._consignmentRequestSender.createConsignments(checkout.id, consignments, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.CreateConsignmentsSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.CreateConsignmentsFailed, response));\n                });\n        });\n    }\n\n    updateConsignment(\n        consignment: ConsignmentUpdateRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateConsignmentAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const consignmentMeta = { id: consignment.id };\n\n            observer.next(createAction(ConsignmentActionType.UpdateConsignmentRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignment, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.UpdateConsignmentSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.UpdateConsignmentFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    deleteConsignment(\n        consignmentId: string,\n        options?: RequestOptions\n    ): ThunkAction<DeleteConsignmentAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<DeleteConsignmentAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n            const consignmentMeta = { id: consignmentId };\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.DeleteConsignmentRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.deleteConsignment(checkout.id, consignmentId, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.DeleteConsignmentSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.DeleteConsignmentFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    updateShippingOption(\n        consignment: ConsignmentShippingOptionRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateShippingOptionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateShippingOptionAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const consignmentMeta = { id: consignment.id };\n\n            observer.next(createAction(ConsignmentActionType.UpdateShippingOptionRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignment, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.UpdateShippingOptionSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.UpdateShippingOptionFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    private _createOrUpdateConsignment(\n        consignment: ConsignmentCreateRequestBody | ConsignmentUpdateRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateConsignmentAction | CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return store => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            if (this._isUpdateConsignmentRequest(consignment)) {\n                return this.updateConsignment(consignment, options)(store);\n            }\n\n            return this.createConsignments([consignment], options)(store);\n        };\n    }\n\n    private _getConsignmentRequestBody(\n        shippingAddress: AddressRequestBody,\n        store: ReadableCheckoutStore\n    ): ConsignmentRequestBody {\n        const state = store.getState();\n        const cart = state.cart.getCart();\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        return {\n            shippingAddress,\n            lineItems: (cart.lineItems && cart.lineItems.physicalItems || [])\n                .map(item => ({\n                    itemId: item.id,\n                    quantity: item.quantity,\n                })\n            ),\n        };\n    }\n\n    private _removeLineItems(\n        lineItems: ConsignmentLineItem[],\n        consignment: Consignment,\n        cart?: Cart\n    ): ConsignmentLineItem[] {\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        return this._hydrateLineItems(consignment.lineItemIds, cart).map(existingItem => {\n            const sharedItem = lineItems.find(lineItem => lineItem.itemId === existingItem.itemId);\n\n            return {\n                ...existingItem,\n                quantity: sharedItem ? (existingItem.quantity - sharedItem.quantity) : existingItem.quantity,\n            };\n        }).filter(lineItem => lineItem.quantity > 0);\n    }\n\n    private _addLineItems(\n        lineItems: ConsignmentLineItem[],\n        consignment?: Consignment,\n        cart?: Cart\n    ): ConsignmentLineItem[] {\n        if (!consignment) {\n            return lineItems;\n        }\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        return lineItems\n            .concat(this._hydrateLineItems(consignment.lineItemIds, cart))\n            .filter(lineItem => lineItem.quantity > 0);\n    }\n\n    private _hydrateLineItems(lineItemIds: string[], cart: Cart): ConsignmentLineItem[] {\n        return lineItemIds.map(itemId => {\n            const item = cart.lineItems.physicalItems.find(lineItem => lineItem.id === itemId );\n\n            return {\n                itemId,\n                quantity: item ? item.quantity : 0,\n            };\n        });\n    }\n\n    private _isUpdateConsignmentRequest(\n        request: ConsignmentRequestBody\n    ): request is ConsignmentUpdateRequestBody {\n        const updateRequest = request as ConsignmentUpdateRequestBody;\n\n        return !!updateRequest.id;\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout } from '../checkout';\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nimport { ConsignmentsRequestBody, ConsignmentUpdateRequestBody } from './consignment';\n\nconst DEFAULT_PARAMS = {\n    include: [\n        'consignments.availableShippingOptions',\n        'cart.lineItems.physicalItems.options',\n        'cart.lineItems.digitalItems.options',\n        'customer',\n        'promotions.banners',\n    ].join(','),\n};\n\nexport default class ConsignmentRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    createConsignments(checkoutId: string, consignments: ConsignmentsRequestBody, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, { body: consignments, params: DEFAULT_PARAMS, headers, timeout });\n    }\n\n    updateConsignment(checkoutId: string, consignment: ConsignmentUpdateRequestBody, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const { id, ...body } = consignment;\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.put(url, { params: DEFAULT_PARAMS, body, headers, timeout });\n    }\n\n    deleteConsignment(checkoutId: string, consignmentId: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments/${consignmentId}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.delete(url, { params: DEFAULT_PARAMS, headers, timeout });\n    }\n}\n","import InternalShippingOption from './internal-shipping-option';\nimport ShippingOption from './shipping-option';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalShippingOption(option: ShippingOption, isSelected: boolean): InternalShippingOption {\n    return {\n        description: option.description,\n        module: option.type,\n        price: option.cost,\n        id: option.id,\n        selected: isSelected,\n        isRecommended: option.isRecommended,\n        imageUrl: option.imageUrl,\n        transitTime: option.transitTime,\n    };\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport RequestError from './request-error';\n\nexport default class UnrecoverableError extends RequestError {\n    constructor(response: Response, message?: string) {\n        super(response, {\n            message: message || 'An unexpected error has occurred. The checkout process cannot continue as a result.',\n        });\n\n        this.type = 'unrecoverable';\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { InternalErrorResponseBody } from '../error-response-body';\n\nimport RequestError from './request-error';\n\nexport default function mapFromInternalErrorResponse(\n    response: Response<InternalErrorResponseBody>,\n    message?: string\n): RequestError {\n    const { body } = response;\n    const { errors = [] } = body;\n\n    return new RequestError(response, {\n        message: joinErrors(errors) || body.detail || body.title || message,\n        errors: errors.length ?\n            errors.map(message => ({ code: body.type, message })) :\n            [{ code: body.type, message: body.detail || body.title }],\n    });\n}\n\nfunction joinErrors(errors: string[]): string | undefined {\n    return errors.reduce((result: string[], error) => {\n        if (error) {\n            return [...result, error];\n        }\n\n        return result;\n    }, []).join(' ');\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { PaymentErrorResponseBody } from '../error-response-body';\n\nimport RequestError from './request-error';\n\nexport default function mapFromPaymentErrorResponse(\n    response: Response<PaymentErrorResponseBody>,\n    message?: string\n): RequestError {\n    const { body } = response;\n    const { errors = [] } = body;\n\n    return new RequestError(response, {\n        message: joinErrors(errors) || message,\n        errors,\n    });\n}\n\nfunction joinErrors(errors: Array<{ code: string, message?: string }>): string | undefined {\n    if (!Array.isArray(errors)) {\n        return;\n    }\n\n    return errors.reduce((result: string[], error) => {\n        if (error && error.message) {\n            return [...result, error.message];\n        }\n\n        return result;\n    }, []).join(' ');\n}\n\nexport const PAYMENT_ERROR_CODES = [\n    'payment',\n    'transaction_declined',\n];\n","import { Response } from '@bigcommerce/request-sender';\nimport { last } from 'lodash';\n\nimport ErrorResponseBody, {\n    InternalErrorResponseBody,\n    StorefrontErrorResponseBody\n} from './error-response-body';\nimport { RequestError, TimeoutError } from './errors';\nimport mapFromInternalErrorResponse from './errors/map-from-internal-error-response';\nimport mapFromPaymentErrorResponse, { PAYMENT_ERROR_CODES } from './errors/map-from-payment-error-response';\nimport mapFromStorefrontErrorResponse from './errors/map-from-storefront-error-response';\n\nexport default class RequestErrorFactory {\n    private _factoryMethods: { [key: string]: ErrorFactoryMethod } = {};\n\n    constructor() {\n        this.register('default', (response, message) => new RequestError(response, { message }));\n        this.register('internal', (response, message) => mapFromInternalErrorResponse(response, message));\n        this.register('storefront', (response, message) => mapFromStorefrontErrorResponse(response, message));\n        this.register('payment', (response, message) => mapFromPaymentErrorResponse(response, message));\n        this.register('timeout', response => new TimeoutError(response));\n    }\n\n    register(type: string, factoryMethod: ErrorFactoryMethod): void {\n        this._factoryMethods[type] = factoryMethod;\n    }\n\n    createError(response: Response, message?: string): RequestError {\n        const factoryMethod = this._factoryMethods[this._getType(response)] || this._factoryMethods.default;\n\n        return factoryMethod(response, message);\n    }\n\n    private _getType(response: Response<ErrorResponseBody>): string {\n        if (response.status === 0) {\n            return 'timeout';\n        }\n\n        if (this._isStorefrontErrorResponseBody(response.body)) {\n            return 'storefront';\n        }\n\n        if (this._isInternalErrorResponseBody(response.body)) {\n            const internalType = last(response.body.type.split('/'));\n\n            return internalType && this._factoryMethods[internalType] ?\n                internalType :\n                'internal';\n        }\n\n        const error = last(response.body && response.body.errors);\n\n        if (error && PAYMENT_ERROR_CODES.indexOf(error.code) !== -1) {\n            return 'payment';\n        }\n\n        return error && error.code ? error.code : 'payment';\n    }\n\n    private _isStorefrontErrorResponseBody(\n        errorResponse: ErrorResponseBody\n    ): errorResponse is StorefrontErrorResponseBody {\n        const storefrontErrorResponse = errorResponse as StorefrontErrorResponseBody;\n\n        return !this._isInternalErrorResponseBody(errorResponse) &&\n            typeof storefrontErrorResponse.title === 'string' &&\n            typeof storefrontErrorResponse.type === 'string' &&\n            typeof storefrontErrorResponse.status === 'number' &&\n            typeof storefrontErrorResponse.detail === 'string';\n    }\n\n    private _isInternalErrorResponseBody(\n        errorResponse: ErrorResponseBody\n    ): errorResponse is InternalErrorResponseBody {\n        const internalErrorResponse = errorResponse as InternalErrorResponseBody;\n\n        return typeof internalErrorResponse.errors === 'object' &&\n            typeof internalErrorResponse.title === 'string' &&\n            typeof internalErrorResponse.type === 'string' &&\n            typeof internalErrorResponse.status === 'number';\n    }\n}\n\nexport type ErrorFactoryMethod = (response: Response, message?: string) => RequestError;\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { StorefrontErrorResponseBody } from '../error-response-body';\n\nimport RequestError from './request-error';\n\nexport default function mapFromStorefrontErrorResponse(\n    response: Response<StorefrontErrorResponseBody>,\n    message?: string\n): RequestError<StorefrontErrorResponseBody> {\n    const { body } = response;\n\n    return new RequestError(response, {\n        message: message || body.detail || body.title,\n        errors: [{\n            code: body.code || body.type,\n            message: body.detail || body.title,\n        }],\n    });\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { OrderAction, OrderActionType } from '../order';\n\nimport BillingAddress from './billing-address';\nimport { BillingAddressAction, BillingAddressActionType } from './billing-address-actions';\nimport BillingAddressState, { BillingAddressErrorsState, BillingAddressStatusesState } from './billing-address-state';\n\nconst DEFAULT_STATE: BillingAddressState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function billingAddressReducer(\n    state: BillingAddressState = DEFAULT_STATE,\n    action: Action\n): BillingAddressState {\n    const reducer = combineReducers<BillingAddressState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: BillingAddress | undefined,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddress | undefined {\n    switch (action.type) {\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case OrderActionType.LoadOrderSucceeded:\n        return action.payload ? action.payload.billingAddress : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: BillingAddressErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddressErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return { ...errors, loadError: action.payload };\n\n    case BillingAddressActionType.UpdateBillingAddressRequested:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n        return { ...errors, updateError: undefined };\n\n    case BillingAddressActionType.UpdateBillingAddressFailed:\n        return { ...errors, updateError: action.payload };\n\n    case BillingAddressActionType.ContinueAsGuestRequested:\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n        return { ...errors, continueAsGuestError: undefined };\n\n    case BillingAddressActionType.ContinueAsGuestFailed:\n        return { ...errors, continueAsGuestError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: BillingAddressStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddressStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return { ...statuses, isLoading: true };\n\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.LoadCheckoutFailed:\n        return { ...statuses, isLoading: false };\n\n    case BillingAddressActionType.UpdateBillingAddressRequested:\n        return { ...statuses, isUpdating: true };\n\n    case BillingAddressActionType.UpdateBillingAddressFailed:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n        return { ...statuses, isUpdating: false };\n\n    case BillingAddressActionType.ContinueAsGuestRequested:\n        return { ...statuses, isContinuingAsGuest: true };\n\n    case BillingAddressActionType.ContinueAsGuestFailed:\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n        return { ...statuses, isContinuingAsGuest: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\n\nimport Config from './config';\nimport { ConfigActionType, LoadConfigAction } from './config-actions';\nimport ConfigState, { ConfigErrorsState, ConfigStatusesState } from './config-state';\n\nconst DEFAULT_STATE: ConfigState = {\n    meta: {},\n    errors: {},\n    statuses: {},\n};\n\nexport default function configReducer(\n    state: ConfigState = DEFAULT_STATE,\n    action: Action\n): ConfigState {\n    const reducer = combineReducers<ConfigState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Config | undefined,\n    action: LoadConfigAction\n): Config | undefined {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigSucceeded:\n        return action.payload ? action.payload : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ConfigErrorsState = DEFAULT_STATE.errors,\n    action: LoadConfigAction\n): ConfigErrorsState {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case ConfigActionType.LoadConfigFailed:\n        return { ...errors, loadError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ConfigStatusesState = DEFAULT_STATE.statuses,\n    action: LoadConfigAction\n): ConfigStatusesState {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigRequested:\n        return { ...statuses, isLoading: true };\n\n    case ConfigActionType.LoadConfigSucceeded:\n    case ConfigActionType.LoadConfigFailed:\n        return { ...statuses, isLoading: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\n\nimport Country from './country';\nimport { CountryActionType, LoadCountriesAction } from './country-actions';\nimport CountryState, { CountryErrorsState, CountryStatusesState } from './country-state';\n\nconst DEFAULT_STATE: CountryState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function countryReducer(\n    state: CountryState = DEFAULT_STATE,\n    action: Action\n): CountryState {\n    const reducer = combineReducers<CountryState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Country[] | undefined,\n    action: LoadCountriesAction\n): Country[] | undefined {\n    switch (action.type) {\n    case CountryActionType.LoadCountriesSucceeded:\n        return action.payload || [];\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CountryErrorsState = DEFAULT_STATE.errors,\n    action: LoadCountriesAction\n): CountryErrorsState {\n    switch (action.type) {\n    case CountryActionType.LoadCountriesRequested:\n    case CountryActionType.LoadCountriesSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case CountryActionType.LoadCountriesFailed:\n        return { ...errors, loadError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CountryStatusesState = DEFAULT_STATE.statuses,\n    action: LoadCountriesAction\n): CountryStatusesState {\n    switch (action.type) {\n    case CountryActionType.LoadCountriesRequested:\n        return { ...statuses, isLoading: true };\n\n    case CountryActionType.LoadCountriesSucceeded:\n    case CountryActionType.LoadCountriesFailed:\n        return { ...statuses, isLoading: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { PaymentAction, PaymentActionType } from './payment-actions';\nimport PaymentResponseBody from './payment-response-body';\nimport PaymentState from './payment-state';\n\nexport default function paymentReducer(state: PaymentState = {}, action: PaymentAction): PaymentState {\n    const reducer = combineReducers<PaymentState, PaymentAction>({\n        data: dataReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(data: PaymentResponseBody | undefined, action: PaymentAction): PaymentResponseBody | undefined {\n    switch (action.type) {\n    case PaymentActionType.SubmitPaymentSucceeded:\n        return action.payload;\n\n    default:\n        return data;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { mergeOrPush } from '../common/utility';\n\nimport PaymentMethod from './payment-method';\nimport { PaymentMethodAction, PaymentMethodActionType } from './payment-method-actions';\nimport PaymentMethodMeta from './payment-method-meta';\nimport PaymentMethodState, { PaymentMethodErrorsState, PaymentMethodStatusesState } from './payment-method-state';\n\nconst DEFAULT_STATE: PaymentMethodState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function paymentMethodReducer(\n    state: PaymentMethodState = DEFAULT_STATE,\n    action: Action\n): PaymentMethodState {\n    const reducer = combineReducers<PaymentMethodState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: PaymentMethod[] | undefined,\n    action: PaymentMethodAction\n): PaymentMethod[] | undefined {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n        return action.payload ?\n            mergeOrPush(data || [], action.payload, {\n                id: action.payload.id,\n                gateway: action.payload.gateway,\n            }) :\n            data;\n\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        return action.payload ? action.payload : [];\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(\n    meta: PaymentMethodMeta | undefined,\n    action: PaymentMethodAction\n): PaymentMethodMeta | undefined {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        return action.meta ? { ...meta, ...action.meta } : meta;\n\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: PaymentMethodErrorsState = DEFAULT_STATE.errors,\n    action: PaymentMethodAction\n): PaymentMethodErrorsState {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodsRequested:\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case PaymentMethodActionType.LoadPaymentMethodsFailed:\n        return { ...errors, loadError: action.payload };\n\n    case PaymentMethodActionType.LoadPaymentMethodRequested:\n    case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n        return {\n            ...errors,\n            loadMethodId: undefined,\n            loadMethodError: undefined,\n        };\n\n    case PaymentMethodActionType.LoadPaymentMethodFailed:\n        return {\n            ...errors,\n            loadMethodId: action.meta.methodId,\n            loadMethodError: action.payload,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: PaymentMethodStatusesState = DEFAULT_STATE.statuses,\n    action: PaymentMethodAction\n): PaymentMethodStatusesState {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodsRequested:\n        return { ...statuses, isLoading: true };\n\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n    case PaymentMethodActionType.LoadPaymentMethodsFailed:\n        return { ...statuses, isLoading: false };\n\n    case PaymentMethodActionType.LoadPaymentMethodRequested:\n        return {\n            ...statuses,\n            isLoadingMethod: true,\n            loadMethodId: action.meta.methodId,\n        };\n\n    case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n    case PaymentMethodActionType.LoadPaymentMethodFailed:\n        return {\n            ...statuses,\n            isLoadingMethod: false,\n            loadMethodId: undefined,\n        };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\n\nimport { PaymentStrategyAction, PaymentStrategyActionType } from './payment-strategy-actions';\nimport PaymentStrategyState, { DEFAULT_STATE, PaymentStrategyDataState, PaymentStrategyErrorsState, PaymentStrategyStatusesState } from './payment-strategy-state';\n\nexport default function paymentStrategyReducer(\n    state: PaymentStrategyState = DEFAULT_STATE,\n    action: Action\n): PaymentStrategyState {\n    const reducer = combineReducers<PaymentStrategyState, PaymentStrategyAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: PaymentStrategyDataState = DEFAULT_STATE.data,\n    action: PaymentStrategyAction\n): PaymentStrategyDataState {\n    switch (action.type) {\n    case PaymentStrategyActionType.InitializeSucceeded:\n        return {\n            ...data,\n            [action.meta && action.meta.methodId]: {\n                isInitialized: true,\n            },\n        };\n\n    case PaymentStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...data,\n            [action.meta && action.meta.methodId]: {\n                isInitialized: false,\n            },\n        };\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: PaymentStrategyErrorsState = DEFAULT_STATE.errors,\n    action: PaymentStrategyAction\n): PaymentStrategyErrorsState {\n    switch (action.type) {\n    case PaymentStrategyActionType.InitializeRequested:\n    case PaymentStrategyActionType.InitializeSucceeded:\n        return {\n            ...errors,\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.InitializeFailed:\n        return {\n            ...errors,\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.DeinitializeRequested:\n    case PaymentStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...errors,\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.DeinitializeFailed:\n        return {\n            ...errors,\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.ExecuteRequested:\n    case PaymentStrategyActionType.ExecuteSucceeded:\n        return {\n            ...errors,\n            executeError: undefined,\n            executeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.ExecuteFailed:\n        return {\n            ...errors,\n            executeError: action.payload,\n            executeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.FinalizeRequested:\n    case PaymentStrategyActionType.FinalizeSucceeded:\n        return {\n            ...errors,\n            finalizeError: undefined,\n            finalizeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.FinalizeFailed:\n        return {\n            ...errors,\n            finalizeError: action.payload,\n            finalizeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.WidgetInteractionStarted:\n    case PaymentStrategyActionType.WidgetInteractionFinished:\n        return {\n            ...errors,\n            widgetInteractionError: undefined,\n            widgetInteractionMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.WidgetInteractionFailed:\n        return {\n            ...errors,\n            widgetInteractionError: action.payload,\n            widgetInteractionMethodId: action.meta.methodId,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: PaymentStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: PaymentStrategyAction\n): PaymentStrategyStatusesState {\n    switch (action.type) {\n    case PaymentStrategyActionType.InitializeRequested:\n        return {\n            ...statuses,\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.InitializeFailed:\n    case PaymentStrategyActionType.InitializeSucceeded:\n        return {\n            ...statuses,\n            isInitializing: false,\n            initializeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.DeinitializeRequested:\n        return {\n            ...statuses,\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.DeinitializeFailed:\n    case PaymentStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...statuses,\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.ExecuteRequested:\n        return {\n            ...statuses,\n            isExecuting: true,\n            executeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.ExecuteFailed:\n    case PaymentStrategyActionType.ExecuteSucceeded:\n        return {\n            ...statuses,\n            isExecuting: false,\n            executeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.FinalizeRequested:\n        return {\n            ...statuses,\n            isFinalizing: true,\n            finalizeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.FinalizeFailed:\n    case PaymentStrategyActionType.FinalizeSucceeded:\n        return {\n            ...statuses,\n            isFinalizing: false,\n            finalizeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.WidgetInteractionStarted:\n    return {\n        ...statuses,\n        isWidgetInteracting: true,\n        widgetInteractionMethodId: action.meta.methodId,\n     };\n\n    case PaymentStrategyActionType.WidgetInteractionFinished:\n    case PaymentStrategyActionType.WidgetInteractionFailed:\n     return {\n        ...statuses,\n        isWidgetInteracting: false,\n        widgetInteractionMethodId: undefined,\n     };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../../common/error';\n\nimport Instrument from './instrument';\nimport { InstrumentAction, InstrumentActionType } from './instrument-actions';\nimport InstrumentState, { InstrumentErrorState, InstrumentMeta, InstrumentStatusState } from './instrument-state';\n\nconst DEFAULT_STATE = {\n    data: [],\n    errors: {},\n    statuses: {},\n};\n\nexport default function instrumentReducer(\n    state: InstrumentState = DEFAULT_STATE,\n    action: Action\n): InstrumentState {\n    const reducer = combineReducers<InstrumentState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Instrument[] = DEFAULT_STATE.data,\n    action: InstrumentAction\n): Instrument[] {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n        return action.payload ? action.payload.vaultedInstruments : [];\n\n    case InstrumentActionType.DeleteInstrumentSucceeded:\n        return data.filter(instrument =>\n            instrument.bigpayToken !== action.meta.instrumentId\n        );\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(\n    meta: InstrumentMeta | undefined,\n    action: InstrumentAction\n): InstrumentMeta | undefined {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n    case InstrumentActionType.DeleteInstrumentSucceeded:\n        return { ...meta, ...action.meta };\n\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: InstrumentErrorState = DEFAULT_STATE.errors,\n    action: InstrumentAction\n): InstrumentErrorState {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsRequested:\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case InstrumentActionType.DeleteInstrumentRequested:\n    case InstrumentActionType.DeleteInstrumentSucceeded:\n        return {\n            ...errors,\n            deleteError: undefined,\n            failedInstrument: undefined,\n        };\n\n    case InstrumentActionType.LoadInstrumentsFailed:\n        return { ...errors, loadError: action.payload };\n\n    case InstrumentActionType.DeleteInstrumentFailed:\n        return {\n            ...errors,\n            deleteError: action.payload,\n            failedInstrument: action.meta.instrumentId,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: InstrumentStatusState = DEFAULT_STATE.statuses,\n    action: InstrumentAction\n): InstrumentStatusState {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsRequested:\n        return { ...statuses, isLoading: true };\n\n    case InstrumentActionType.DeleteInstrumentRequested:\n        return {\n            ...statuses,\n            isDeleting: true,\n            deletingInstrument: action.meta.instrumentId,\n        };\n\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n    case InstrumentActionType.LoadInstrumentsFailed:\n        return { ...statuses, isLoading: false };\n\n    case InstrumentActionType.DeleteInstrumentSucceeded:\n    case InstrumentActionType.DeleteInstrumentFailed:\n        return {\n            ...statuses,\n            isDeleting: false,\n            deletingInstrument: undefined,\n        };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport RemoteCheckout from './remote-checkout';\nimport { RemoteCheckoutAction, RemoteCheckoutActionType } from './remote-checkout-actions';\nimport RemoteCheckoutState, { RemoteCheckoutStateData } from './remote-checkout-state';\n\nconst DEFAULT_STATE: RemoteCheckoutState = {\n    data: {},\n};\n\nexport default function remoteCheckoutReducer(\n    state: RemoteCheckoutState = DEFAULT_STATE,\n    action: RemoteCheckoutAction\n): RemoteCheckoutState {\n    if (!action.meta || !action.meta.methodId) {\n        return state;\n    }\n\n    const reducer = combineReducers<RemoteCheckoutState>({\n        data: combineReducers<RemoteCheckoutStateData>({\n            [action.meta.methodId]: dataReducer,\n        }),\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: RemoteCheckout = DEFAULT_STATE.data,\n    action: RemoteCheckoutAction\n): RemoteCheckout {\n    switch (action.type) {\n    case RemoteCheckoutActionType.InitializeRemoteBillingSucceeded:\n        return action.payload ? { ...data, billing: action.payload.billing } : data;\n\n    case RemoteCheckoutActionType.InitializeRemoteShippingSucceeded:\n        return action.payload ? { ...data, shipping: action.payload.shipping } : data;\n\n    case RemoteCheckoutActionType.LoadRemoteSettingsSucceeded:\n        return { ...data, settings: action.payload };\n\n    case RemoteCheckoutActionType.UpdateRemoteCheckout:\n        return { ...data, ...action.payload };\n\n    default:\n        return data;\n    }\n}\n","import { createDataStore } from '@bigcommerce/data-store';\n\nimport { createRequestErrorFactory } from '../common/error';\n\nimport CheckoutStore, { CheckoutStoreOptions } from './checkout-store';\nimport CheckoutStoreState from './checkout-store-state';\nimport createActionTransformer from './create-action-transformer';\nimport createCheckoutStoreReducer from './create-checkout-store-reducer';\nimport createInternalCheckoutSelectors from './create-internal-checkout-selectors';\n\nexport default function createCheckoutStore(\n    initialState: Partial<CheckoutStoreState> = {},\n    options?: CheckoutStoreOptions\n): CheckoutStore {\n    const actionTransformer = createActionTransformer(createRequestErrorFactory());\n    const stateTransformer = (state: CheckoutStoreState) => createInternalCheckoutSelectors(state);\n\n    return createDataStore(\n        createCheckoutStoreReducer(),\n        initialState,\n        { actionTransformer, stateTransformer, ...options }\n    );\n}\n","import { PaymentMethodInvalidError } from '../../payment/errors';\n\nimport { UnrecoverableError } from './errors';\nimport RequestErrorFactory from './request-error-factory';\n\nexport default function createRequestErrorFactory(): RequestErrorFactory {\n    const factory = new RequestErrorFactory();\n\n    const unrecoverableErrorTypes = [\n        'catalog_only',\n        'empty_cart',\n        'invalid_order_id',\n        'invalid_order_token',\n        'missing_order_token',\n        'missing_provider_token',\n        'missing_shipping_method',\n        'order_completion_error',\n        'order_could_not_be_finalized_error',\n        'order_create_failed',\n        'provider_fatal_error',\n        'provider_setup_error',\n        'stock_too_low',\n    ];\n\n    unrecoverableErrorTypes.forEach(type => {\n        factory.register(type, (response, message) => new UnrecoverableError(response, message));\n    });\n\n    factory.register('invalid_payment_provider', response => new PaymentMethodInvalidError(response));\n    factory.register('payment_config_not_found', response => new PaymentMethodInvalidError(response));\n\n    return factory;\n}\n","import { combineReducers, Action, Reducer } from '@bigcommerce/data-store';\n\nimport { billingAddressReducer } from '../billing';\nimport { cartReducer } from '../cart';\nimport { checkoutButtonReducer } from '../checkout-buttons';\nimport { configReducer } from '../config';\nimport { couponReducer, giftCertificateReducer } from '../coupon';\nimport { customerReducer, customerStrategyReducer } from '../customer';\nimport { countryReducer } from '../geography';\nimport { orderReducer } from '../order';\nimport { paymentMethodReducer, paymentReducer, paymentStrategyReducer } from '../payment';\nimport { instrumentReducer } from '../payment/instrument';\nimport { remoteCheckoutReducer } from '../remote-checkout';\nimport { consignmentReducer, shippingCountryReducer, shippingStrategyReducer } from '../shipping';\n\nimport checkoutReducer from './checkout-reducer';\nimport CheckoutStoreState from './checkout-store-state';\n\nexport default function createCheckoutStoreReducer(): Reducer<CheckoutStoreState, Action> {\n    return combineReducers({\n        billingAddress: billingAddressReducer,\n        cart: cartReducer,\n        checkout: checkoutReducer,\n        checkoutButton: checkoutButtonReducer,\n        config: configReducer,\n        consignments: consignmentReducer,\n        countries: countryReducer,\n        coupons: couponReducer,\n        customer: customerReducer,\n        customerStrategies: customerStrategyReducer,\n        giftCertificates: giftCertificateReducer,\n        instruments: instrumentReducer,\n        order: orderReducer,\n        payment: paymentReducer,\n        paymentMethods: paymentMethodReducer,\n        paymentStrategies: paymentStrategyReducer,\n        remoteCheckout: remoteCheckoutReducer,\n        shippingCountries: shippingCountryReducer,\n        shippingStrategies: shippingStrategyReducer,\n    });\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { InternalErrorResponseBody } from '../../common/error';\nimport { RequestError } from '../../common/error/errors';\n\nexport default class CheckoutNotAvailableError extends RequestError {\n    constructor(response: Response<InternalErrorResponseBody>) {\n        super(response, { message: response.body.title });\n\n        this.type = 'checkout_not_available';\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { joinIncludes, ContentType, RequestOptions } from '../common/http-request';\n\nimport Checkout, { CheckoutRequestBody } from './checkout';\nimport CHECKOUT_DEFAULT_INCLUDES from './checkout-default-includes';\nimport CheckoutParams from './checkout-params';\nimport { CheckoutNotAvailableError } from './errors';\n\nexport default class CheckoutRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadCheckout(id: string, { params, timeout }: RequestOptions<CheckoutParams> = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkout/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.get(url, {\n            params: {\n                include: joinIncludes([\n                    ...CHECKOUT_DEFAULT_INCLUDES,\n                    ...(params && params.include || []),\n                ]),\n            },\n            headers,\n            timeout,\n        }).catch(error => {\n            if (error.status >= 400 && error.status < 500) {\n                throw new CheckoutNotAvailableError(error);\n            }\n\n            throw error;\n        });\n    }\n\n    updateCheckout(id: string, body: CheckoutRequestBody, { params, timeout }: RequestOptions<CheckoutParams> = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkout/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.put(url, {\n            params: {\n                include: joinIncludes([\n                    ...CHECKOUT_DEFAULT_INCLUDES,\n                    ...(params && params.include || []),\n                ]),\n            },\n            body,\n            headers,\n            timeout,\n        });\n    }\n}\n","import { identity, isEqual, pickBy } from 'lodash';\n\nimport Address from './address';\n\nexport default function isAddressEqual(addressA: Partial<Address>, addressB: Partial<Address>): boolean {\n    return isEqual(normalize(addressA), normalize(addressB));\n}\n\nfunction normalize(address: Partial<Address>): Partial<Address> {\n    return pickBy({\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        address1: address.address1,\n        address2: address.address2,\n        city: address.city,\n        stateOrProvince: address.stateOrProvince,\n        countryCode: address.countryCode,\n        postalCode: address.postalCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    }, identity);\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { GooglePayCreator } from '../googlepay';\n\nimport {\n    BraintreeClientCreator,\n    BraintreeDataCollectorCreator,\n    BraintreeHostWindow,\n    BraintreePaypalCheckoutCreator,\n    BraintreePaypalCreator,\n    BraintreeThreeDSecureCreator,\n    BraintreeVisaCheckoutCreator,\n} from './braintree';\n\nexport default class BraintreeScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: BraintreeHostWindow = window\n    ) {}\n\n    loadClient(): Promise<BraintreeClientCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/client.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.client) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.client;\n            });\n    }\n\n    load3DS(): Promise<BraintreeThreeDSecureCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/three-d-secure.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.threeDSecure) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.threeDSecure;\n            });\n    }\n\n    loadDataCollector(): Promise<BraintreeDataCollectorCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/data-collector.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.dataCollector) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.dataCollector;\n            });\n    }\n\n    loadPaypal(): Promise<BraintreePaypalCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/paypal.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.paypal) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.paypal;\n            });\n    }\n\n    loadPaypalCheckout(): Promise<BraintreePaypalCheckoutCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/paypal-checkout.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.paypalCheckout) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.paypalCheckout;\n            });\n    }\n\n    loadVisaCheckout(): Promise<BraintreeVisaCheckoutCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/visa-checkout.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.visaCheckout) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.visaCheckout;\n            });\n    }\n\n    loadGooglePayment(): Promise<GooglePayCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/google-payment.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.googlePayment) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.googlePayment;\n            });\n    }\n}\n","import { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\n\nimport {\n    BraintreeClient,\n    BraintreeDataCollector,\n    BraintreeModule,\n    BraintreePaypal,\n    BraintreePaypalCheckout,\n    BraintreeThreeDSecure,\n    BraintreeVisaCheckout,\n    GooglePayBraintreeSDK,\n} from './braintree';\nimport BraintreeScriptLoader from './braintree-script-loader';\n\nexport default class BraintreeSDKCreator {\n    private _client?: Promise<BraintreeClient>;\n    private _3ds?: Promise<BraintreeThreeDSecure>;\n    private _paypal?: Promise<BraintreePaypal>;\n    private _paypalCheckout?: Promise<BraintreePaypalCheckout>;\n    private _clientToken?: string;\n    private _visaCheckout?: Promise<BraintreeVisaCheckout>;\n    private _dataCollectors: {\n        default?: Promise<BraintreeDataCollector>,\n        paypal?: Promise<BraintreeDataCollector>,\n    } = {};\n    private _googlePay?: Promise<GooglePayBraintreeSDK>;\n\n    constructor(\n        private _braintreeScriptLoader: BraintreeScriptLoader\n    ) {}\n\n    initialize(clientToken: string) {\n        this._clientToken = clientToken;\n    }\n\n    getClient(): Promise<BraintreeClient> {\n        if (!this._clientToken) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!this._client) {\n            this._client = this._braintreeScriptLoader.loadClient()\n                .then(client => client.create({ authorization: this._clientToken }));\n        }\n\n        return this._client;\n    }\n\n    getPaypal(): Promise<BraintreePaypal> {\n        if (!this._paypal) {\n            this._paypal = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadPaypal(),\n            ])\n            .then(([client, paypal]) => paypal.create({ client }));\n        }\n\n        return this._paypal;\n    }\n\n    getPaypalCheckout(): Promise<BraintreePaypalCheckout> {\n        if (!this._paypalCheckout) {\n            this._paypalCheckout = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadPaypalCheckout(),\n            ])\n                .then(([client, paypalCheckout]) => paypalCheckout.create({ client }));\n        }\n\n        return this._paypalCheckout;\n    }\n\n    get3DS(): Promise<BraintreeThreeDSecure> {\n        if (!this._3ds) {\n            this._3ds = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.load3DS(),\n            ])\n            .then(([client, threeDSecure]) => threeDSecure.create({ client }));\n        }\n\n        return this._3ds;\n    }\n\n    getDataCollector(options?: { paypal: boolean }): Promise<BraintreeDataCollector> {\n        const cacheKey = options && options.paypal ? 'paypal' : 'default';\n        let cached = this._dataCollectors[cacheKey];\n\n        if (!cached) {\n            cached = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadDataCollector(),\n            ])\n            .then(([client, dataCollector]) => dataCollector.create({ client, kount: true, ...options }))\n            .catch(error => {\n                if (error && error.code === 'DATA_COLLECTOR_KOUNT_NOT_ENABLED') {\n                    return { deviceData: undefined, teardown: () => Promise.resolve() };\n                }\n\n                throw error;\n            });\n\n            this._dataCollectors[cacheKey] = cached;\n        }\n\n        return cached;\n    }\n\n    getVisaCheckout(): Promise<BraintreeVisaCheckout> {\n        if (!this._visaCheckout) {\n            this._visaCheckout = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadVisaCheckout(),\n            ])\n            .then(([client, visaCheckout]) => visaCheckout.create({ client }));\n        }\n\n        return this._visaCheckout;\n    }\n\n    getGooglePaymentComponent(): Promise<GooglePayBraintreeSDK> {\n        if (!this._googlePay) {\n            this._googlePay = Promise.all ([\n                this.getClient(),\n                this._braintreeScriptLoader.loadGooglePayment(),\n            ])\n                .then(([client, googlePay]) => googlePay.create({ client }));\n        }\n\n        return this._googlePay;\n    }\n\n    teardown(): Promise<void> {\n        return Promise.all([\n            this._teardown(this._3ds),\n            this._teardown(this._dataCollectors.default),\n            this._teardown(this._dataCollectors.paypal),\n            this._teardown(this._visaCheckout),\n            this._teardown(this._googlePay),\n        ]).then(() => {\n            this._3ds = undefined;\n            this._visaCheckout = undefined;\n            this._dataCollectors = {};\n            this._googlePay = undefined;\n        });\n    }\n\n    private _teardown(module?: Promise<BraintreeModule>) {\n        return module ?\n            module.then(mod => mod.teardown()) :\n            Promise.resolve();\n    }\n}\n","import Coupon from './coupon';\nimport InternalCoupon from './internal-coupon';\n\nconst couponTypes = [\n    'per_item_discount',\n    'percentage_discount',\n    'per_total_discount',\n    'shipping_discount',\n    'free_shipping',\n];\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalCoupon(coupon: Coupon): InternalCoupon {\n    return {\n        code: coupon.code,\n        discount: coupon.displayName,\n        discountType: couponTypes.indexOf(coupon.couponType),\n    };\n}\n","module.exports = require(\"iframe-resizer\");","import { isBillingAddressLike } from '../billing';\nimport BillingAddress from '../billing/billing-address';\nimport { Consignment } from '../shipping';\n\nimport Address from './address';\nimport InternalAddress from './internal-address';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalAddress(address: Address | BillingAddress, consignments?: Consignment[]): InternalAddress {\n    let addressId;\n\n    if (isBillingAddressLike(address)) {\n        addressId = address.id;\n    } else if (consignments && consignments.length) {\n        addressId = consignments[0].id;\n    }\n\n    return {\n        id: addressId,\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        addressLine1: address.address1,\n        addressLine2: address.address2,\n        city: address.city,\n        province: address.stateOrProvince,\n        provinceCode: address.stateOrProvinceCode,\n        postCode: address.postalCode,\n        country: address.country,\n        countryCode: address.countryCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    };\n}\n","import Address from '../address/address';\n\nimport BillingAddress from './billing-address';\n\nexport default function isBillingAddressLike(address: Address): address is BillingAddress {\n    const billingAddress = address as BillingAddress;\n\n    return typeof billingAddress.id !== 'undefined';\n}\n","import { uniq } from 'lodash';\n\nexport default function joinIncludes(includes: string[]): string {\n    return uniq(includes).join(',');\n}\n","import StandardError from './standard-error';\n\nexport enum NotInitializedErrorType {\n    CheckoutButtonNotInitialized,\n    CustomerNotInitialized,\n    PaymentNotInitialized,\n    ShippingNotInitialized,\n}\n\nexport default class NotInitializedError extends StandardError {\n    constructor(\n        public subtype: NotInitializedErrorType\n    ) {\n        super(getErrorMessage(subtype));\n\n        this.type = 'not_initialized';\n    }\n}\n\nfunction getErrorMessage(type: NotInitializedErrorType): string {\n    switch (type) {\n    case NotInitializedErrorType.CustomerNotInitialized:\n        return 'Unable to proceed because the customer step of checkout has not been initialized.';\n\n    case NotInitializedErrorType.PaymentNotInitialized:\n        return 'Unable to proceed because the payment step of checkout has not been initialized.';\n\n    case NotInitializedErrorType.ShippingNotInitialized:\n        return 'Unable to proceed because the shipping step of checkout has not been initialized.';\n\n    default:\n        return 'Unable to proceed because the required component has not been initialized.';\n    }\n}\n","import { InvalidArgumentError } from '../error/errors';\n\nimport Url from './url';\n\nexport default function parseUrl(url: string): Url {\n    if (!/^(https?:)?\\/\\//.test(url)) {\n        throw new InvalidArgumentError('The provided URL must be absolute.');\n    }\n\n    // new URL() is not supported in IE11, use anchor tag instead\n    const anchor = document.createElement('a');\n\n    anchor.href = url;\n\n    return {\n        hash: anchor.hash,\n        hostname: anchor.hostname,\n        href: anchor.href,\n        origin: anchor.origin,\n        pathname: anchor.pathname,\n        port: anchor.port,\n        protocol: anchor.protocol,\n        search: anchor.search,\n    };\n}\n","import cacheAction from './cache-action';\nimport isActionOptions from './is-action-options';\n\nexport default function cachableActionDecorator<TMethod extends (...args: any[]) => any>(\n    target: object,\n    key: string,\n    descriptor: TypedPropertyDescriptor<TMethod>\n): TypedPropertyDescriptor<TMethod> {\n    const memoizedMethods = new WeakMap<object, { [key: string]: TMethod }>();\n\n    function decorateMethod(this: object, method: TMethod): TMethod {\n        return ((...args: any[]) => {\n            const lastArg = args[args.length - 1];\n            const { useCache } = isActionOptions(lastArg) ? lastArg : { useCache: false };\n\n            if (!useCache) {\n                return method.call(this, ...args);\n            }\n\n            const instanceMethods = memoizedMethods.get(this) || {};\n\n            if (!memoizedMethods.get(this)) {\n                memoizedMethods.set(this, instanceMethods);\n            }\n\n            if (!instanceMethods[key]) {\n                instanceMethods[key] = cacheAction(method);\n            }\n\n            return instanceMethods[key].call(this, ...args);\n        }) as TMethod;\n    }\n\n    return {\n        get() {\n            if (typeof descriptor.value !== 'function') {\n                return descriptor.value;\n            }\n\n            const value = decorateMethod.call(this, descriptor.value);\n\n            Object.defineProperty(this, key, { ...descriptor, value });\n\n            return value;\n        },\n    };\n}\n","import ActionOptions from './action-options';\n\nexport default function isActionOptions(param: any): param is ActionOptions {\n    return param && typeof param.useCache === 'boolean';\n}\n","import { Action, ThunkAction } from '@bigcommerce/data-store';\nimport { memoize } from 'lodash';\nimport { from, Observable } from 'rxjs';\nimport { shareReplay } from 'rxjs/operators';\n\nimport { CacheKeyResolver } from '../utility';\n\nexport default function cacheAction<TFunction extends CreateActionFn>(\n    fn: TFunction\n): TFunction {\n    const resolver = new CacheKeyResolver();\n\n    function decoratedFn(this: any, ...args: any[]) {\n        const action = fn.call(this, ...args);\n\n        if (action instanceof Observable) {\n            return from(action).pipe(shareReplay());\n        }\n\n        if (typeof action === 'function') {\n            return memoize(store => from(action(store)).pipe(shareReplay()));\n        }\n\n        return action;\n    }\n\n    return memoize(\n        decoratedFn as TFunction,\n        (...args) => resolver.getKey(...args)\n    );\n}\n\ntype CreateActionFn = (...args: any[]) => Observable<Action> | ThunkAction<Action> | Action;\n","import { deepFreeze } from '@bigcommerce/data-store';\n\n// tslint:disable-next-line:ban-types\ntype FunctionProperties<T> = { [K in keyof T]: T[K] extends Function ? T[K] : never };\n\nexport default function createFreezeProxy<T extends object>(target: T): T {\n    return createProxy(target, (target, name) =>\n        (...args: any[]) => deepFreeze(target[name].call(target, ...args))\n    );\n}\n\nexport function createFreezeProxies<T extends { [key: string]: object }>(map: T): T {\n    return Object.keys(map)\n        .reduce((result, key) => {\n            result[key] = createFreezeProxy(map[key]);\n\n            return result;\n        }, {} as T);\n}\n\nfunction createProxy<T extends object>(target: T, trap: (target: FunctionProperties<T>, name: keyof FunctionProperties<T>, proxy: T) => any): T {\n    const proxy = Object.create(target);\n\n    traversePrototypeOf(target, prototype => {\n        Object.getOwnPropertyNames(prototype)\n            .forEach(name => {\n                if (name === 'constructor' || typeof proxy[name] !== 'function' || name.charAt(0) === '_') {\n                    return;\n                }\n\n                proxy[name] = trap(target as FunctionProperties<T>, name as keyof T, proxy);\n            });\n    });\n\n    return proxy;\n}\n\nfunction traversePrototypeOf(target: object, iteratee: (prototype: object) => void): void {\n    let prototype = Object.getPrototypeOf(target);\n\n    while (prototype) {\n        iteratee(prototype);\n\n        prototype = Object.getPrototypeOf(prototype);\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { Registry } from '../common/registry';\n\nimport CustomerCredentials from './customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from './customer-request-options';\nimport {\n    CustomerStrategyActionType,\n    CustomerStrategyDeinitializeAction,\n    CustomerStrategyInitializeAction,\n    CustomerStrategySignInAction,\n    CustomerStrategySignOutAction,\n    CustomerStrategyWidgetAction,\n} from './customer-strategy-actions';\nimport { CustomerStrategy } from './strategies';\n\nexport default class CustomerStrategyActionCreator {\n    constructor(\n        private _strategyRegistry: Registry<CustomerStrategy>\n    ) {}\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Observable<CustomerStrategySignInAction> {\n        return Observable.create((observer: Observer<CustomerStrategySignInAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.SignInRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .signIn(credentials, options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.SignInSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.SignInFailed, error, meta));\n                });\n        });\n    }\n\n    signOut(options?: CustomerRequestOptions): Observable<CustomerStrategySignOutAction> {\n        return Observable.create((observer: Observer<CustomerStrategySignOutAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.SignOutRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .signOut(options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.SignOutSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.SignOutFailed, error, meta));\n                });\n        });\n    }\n\n    initialize(options?: CustomerInitializeOptions): ThunkAction<CustomerStrategyInitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<CustomerStrategyInitializeAction>) => {\n            const state = store.getState();\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            if (methodId && state.customerStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(CustomerStrategyActionType.InitializeRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .initialize(options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.InitializeSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.InitializeFailed, error, meta));\n                });\n        });\n    }\n\n    deinitialize(options?: CustomerRequestOptions): ThunkAction<CustomerStrategyDeinitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<CustomerStrategyDeinitializeAction>) => {\n            const state = store.getState();\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            if (methodId && !state.customerStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(CustomerStrategyActionType.DeinitializeRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .deinitialize(options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.DeinitializeSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.DeinitializeFailed, error, meta));\n                });\n        });\n    }\n\n    widgetInteraction(method: () => Promise<any>, options?: CustomerRequestOptions): Observable<CustomerStrategyWidgetAction> {\n        return Observable.create((observer: Observer<CustomerStrategyWidgetAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.WidgetInteractionStarted, undefined, meta));\n\n            method().then(() => {\n                observer.next(createAction(CustomerStrategyActionType.WidgetInteractionFinished, undefined, meta));\n                observer.complete();\n            })\n            .catch(error => {\n                observer.error(createErrorAction(CustomerStrategyActionType.WidgetInteractionFailed, error, meta));\n            });\n        });\n    }\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, from, of } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\n\nimport { CheckoutActionCreator, InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { RequestOptions } from '../common/http-request';\n\nimport { CustomerActionType, SignInCustomerAction, SignOutCustomerAction } from './customer-actions';\nimport CustomerCredentials from './customer-credentials';\nimport CustomerRequestSender from './customer-request-sender';\n\nexport default class CustomerActionCreator {\n    constructor(\n        private _customerRequestSender: CustomerRequestSender,\n        private _checkoutActionCreator: CheckoutActionCreator\n    ) {}\n\n    signInCustomer(\n        credentials: CustomerCredentials,\n        options?: RequestOptions\n    ): ThunkAction<SignInCustomerAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(CustomerActionType.SignInCustomerRequested)),\n            from(this._customerRequestSender.signInCustomer(credentials, options))\n                .pipe(\n                    switchMap(({ body }) => concat(\n                        this._checkoutActionCreator.loadCurrentCheckout(options)(store),\n                        of(createAction(CustomerActionType.SignInCustomerSucceeded, body.data))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(CustomerActionType.SignInCustomerFailed, error))\n        );\n    }\n\n    signOutCustomer(\n        options?: RequestOptions\n    ): ThunkAction<SignOutCustomerAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(CustomerActionType.SignOutCustomerRequested)),\n            from(this._customerRequestSender.signOutCustomer(options))\n                .pipe(\n                    switchMap(({ body }) => concat(\n                        this._checkoutActionCreator.loadCurrentCheckout(options)(store),\n                        of(createAction(CustomerActionType.SignOutCustomerSucceeded, body.data))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(CustomerActionType.SignOutCustomerFailed, error))\n        );\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport CustomerCredentials from './customer-credentials';\nimport { InternalCustomerResponseBody } from './internal-customer-responses';\n\nexport default class CustomerRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    signInCustomer(credentials: CustomerCredentials, { timeout }: RequestOptions = {}): Promise<Response<InternalCustomerResponseBody>> {\n        const url = '/internalapi/v1/checkout/customer';\n\n        return this._requestSender.post(url, { timeout, body: credentials });\n    }\n\n    signOutCustomer({ timeout }: RequestOptions = {}): Promise<Response<InternalCustomerResponseBody>> {\n        const url = '/internalapi/v1/checkout/customer';\n\n        return this._requestSender.delete(url, { timeout });\n    }\n}\n","import { selector } from '../common/selector';\n\nimport Cart from './cart';\nimport CartState from './cart-state';\n\n@selector\nexport default class CartSelector {\n    constructor(\n        private _cart: CartState\n    ) {}\n\n    getCart(): Cart | undefined {\n        return this._cart.data;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._cart.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return !!this._cart.statuses.isLoading;\n    }\n}\n","import { RequestError } from '../common/error/errors';\nimport { selector } from '../common/selector';\n\nimport Coupon from './coupon';\nimport CouponState from './coupon-state';\n\n@selector\nexport default class CouponSelector {\n    constructor(\n        private _coupon: CouponState\n    ) {}\n\n    getCoupons(): Coupon[] | undefined {\n        return this._coupon.data;\n    }\n\n    getRemoveError(): RequestError | undefined {\n        return this._coupon.errors.removeCouponError;\n    }\n\n    getApplyError(): RequestError | undefined {\n        return this._coupon.errors.applyCouponError;\n    }\n\n    isApplying(): boolean {\n        return !!this._coupon.statuses.isApplyingCoupon;\n    }\n\n    isRemoving(): boolean {\n        return !!this._coupon.statuses.isRemovingCoupon;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport Customer from './customer';\nimport CustomerState from './customer-state';\n\n@selector\nexport default class CustomerSelector {\n    constructor(\n        private _customer: CustomerState\n    ) {}\n\n    getCustomer(): Customer | undefined {\n        return this._customer.data;\n    }\n}\n","import CustomerStrategyState from './customer-strategy-state';\n\nexport default class CustomerStrategySelector {\n    constructor(\n        private _customerStrategies: CustomerStrategyState\n    ) {}\n\n    getSignInError(methodId?: string): Error | undefined {\n        if (methodId && this._customerStrategies.errors.signInMethodId !== methodId) {\n            return;\n        }\n\n        return this._customerStrategies.errors.signInError;\n    }\n\n    getSignOutError(methodId?: string): Error | undefined {\n        if (methodId && this._customerStrategies.errors.signOutMethodId !== methodId) {\n            return;\n        }\n\n        return this._customerStrategies.errors.signOutError;\n    }\n\n    getInitializeError(methodId?: string): Error | undefined {\n        if (methodId && this._customerStrategies.errors.initializeMethodId !== methodId) {\n            return;\n        }\n\n        return this._customerStrategies.errors.initializeError;\n    }\n\n    getWidgetInteractionError(methodId?: string): Error | undefined {\n        if (methodId && this._customerStrategies.errors.widgetInteractionMethodId !== methodId) {\n            return;\n        }\n\n        return this._customerStrategies.errors.widgetInteractionError;\n    }\n\n    isSigningIn(methodId?: string): boolean {\n        if (methodId && this._customerStrategies.statuses.signInMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._customerStrategies.statuses.isSigningIn;\n    }\n\n    isSigningOut(methodId?: string): boolean {\n        if (methodId && this._customerStrategies.statuses.signOutMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._customerStrategies.statuses.isSigningOut;\n    }\n\n    isInitializing(methodId?: string): boolean {\n        if (methodId && this._customerStrategies.statuses.initializeMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._customerStrategies.statuses.isInitializing;\n    }\n\n    isInitialized(methodId: string): boolean {\n        return !!(\n            this._customerStrategies.data[methodId] &&\n            this._customerStrategies.data[methodId].isInitialized\n        );\n    }\n\n    isWidgetInteracting(methodId?: string): boolean {\n        if (methodId && this._customerStrategies.statuses.widgetInteractionMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._customerStrategies.statuses.isWidgetInteracting;\n    }}\n","import { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\nimport { selector } from '../common/selector';\n\nimport GiftCertificate from './gift-certificate';\nimport GiftCertificateState from './gift-certificate-state';\n\n@selector\nexport default class GiftCertificateSelector {\n    constructor(\n        private _giftCertificate: GiftCertificateState\n    ) {}\n\n    getGiftCertificates(): GiftCertificate[] | undefined {\n        return this._giftCertificate.data;\n    }\n\n    getRemoveError(): RequestError<StorefrontErrorResponseBody> | undefined {\n        return this._giftCertificate.errors.removeGiftCertificateError;\n    }\n\n    getApplyError(): RequestError<StorefrontErrorResponseBody> | undefined {\n        return this._giftCertificate.errors.applyGiftCertificateError;\n    }\n\n    isApplying(): boolean {\n        return !!this._giftCertificate.statuses.isApplyingGiftCertificate;\n    }\n\n    isRemoving(): boolean {\n        return !!this._giftCertificate.statuses.isRemovingGiftCertificate;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport { Address } from '../address';\n\nimport ConsignmentState from './consignment-state';\n\n@selector\nexport default class ShippingAddressSelector {\n    constructor(\n        private _consignments: ConsignmentState\n    ) {}\n\n    getShippingAddress(): Address | undefined {\n        const consignments = this._consignments.data;\n\n        if (!consignments || !consignments[0]) {\n            return;\n        }\n\n        return consignments[0].shippingAddress;\n    }\n}\n","import { selector } from '../common/selector';\nimport { Country } from '../geography';\n\nimport ShippingCountryState from './shipping-country-state';\n\n@selector\nexport default class ShippingCountrySelector {\n    constructor(\n        private _shippingCountries: ShippingCountryState\n    ) {}\n\n    getShippingCountries(): Country[] | undefined {\n        return this._shippingCountries.data;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._shippingCountries.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return !!this._shippingCountries.statuses.isLoading;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport ShippingStrategyState from './shipping-strategy-state';\n\n@selector\nexport default class ShippingStrategySelector {\n    constructor(\n        private _shippingStrategies: ShippingStrategyState\n    ) {}\n\n    getUpdateAddressError(methodId?: string): Error | undefined {\n        if (methodId && this._shippingStrategies.errors.updateAddressMethodId !== methodId) {\n            return;\n        }\n\n        return this._shippingStrategies.errors.updateAddressError;\n    }\n\n    getSelectOptionError(methodId?: string): Error | undefined {\n        if (methodId && this._shippingStrategies.errors.selectOptionMethodId !== methodId) {\n            return;\n        }\n\n        return this._shippingStrategies.errors.selectOptionError;\n    }\n\n    getInitializeError(methodId?: string): Error | undefined {\n        if (methodId && this._shippingStrategies.errors.initializeMethodId !== methodId) {\n            return;\n        }\n\n        return this._shippingStrategies.errors.initializeError;\n    }\n\n    isUpdatingAddress(methodId?: string): boolean {\n        if (methodId && this._shippingStrategies.statuses.updateAddressMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._shippingStrategies.statuses.isUpdatingAddress;\n    }\n\n    isSelectingOption(methodId?: string): boolean {\n        if (methodId && this._shippingStrategies.statuses.selectOptionMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._shippingStrategies.statuses.isSelectingOption;\n    }\n\n    isInitializing(methodId?: string): boolean {\n        if (methodId && this._shippingStrategies.statuses.initializeMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._shippingStrategies.statuses.isInitializing;\n    }\n\n    isInitialized(methodId: string): boolean {\n        return !!(\n            this._shippingStrategies.data[methodId] &&\n            this._shippingStrategies.data[methodId].isInitialized\n        );\n    }\n}\n","import { find } from 'lodash';\n\nimport { isAddressEqual, AddressRequestBody } from '../address';\nimport { CartSelector, PhysicalItem } from '../cart';\nimport { selector } from '../common/selector';\n\nimport Consignment from './consignment';\nimport ConsignmentState from './consignment-state';\nimport ShippingOption from './shipping-option';\n\n@selector\nexport default class ConsignmentSelector {\n    constructor(\n        private _consignments: ConsignmentState,\n        private _cart: CartSelector\n    ) {}\n\n    getConsignments(): Consignment[] | undefined {\n        return this._consignments.data;\n    }\n\n    getConsignmentById(id: string): Consignment | undefined {\n        const consignments = this._consignments.data;\n\n        if (!consignments || !consignments.length) {\n            return;\n        }\n\n        return find(consignments, { id });\n    }\n\n    getConsignmentByAddress(address: AddressRequestBody): Consignment | undefined {\n        const consignments = this._consignments.data;\n\n        if (!consignments || !consignments.length) {\n            return;\n        }\n\n        return find(consignments, consignment =>\n            isAddressEqual(consignment.shippingAddress, address)\n        );\n    }\n\n    getShippingOption(): ShippingOption | undefined {\n        const consignments = this._consignments.data;\n\n        if (consignments && consignments.length) {\n            return consignments[0].selectedShippingOption;\n        }\n    }\n\n    getLoadError(): Error | undefined {\n        return this._consignments.errors.loadError;\n    }\n\n    getCreateError(): Error | undefined {\n        return this._consignments.errors.createError;\n    }\n\n    getLoadShippingOptionsError(): Error | undefined {\n        return this._consignments.errors.loadShippingOptionsError;\n    }\n\n    getUnassignedItems(): PhysicalItem[] {\n        const cart = this._cart.getCart();\n\n        if (!cart) {\n            return [];\n        }\n\n        const assignedLineItemIds = (this.getConsignments() || []).reduce(\n            (itemIds, consignment) => itemIds.concat(consignment.lineItemIds),\n            [] as string[]\n        );\n\n        return (cart.lineItems.physicalItems || []).filter(\n            item => assignedLineItemIds.indexOf(item.id as string) < 0\n        );\n    }\n\n    getUpdateError(consignmentId?: string): Error | undefined {\n        if (consignmentId) {\n            return this._consignments.errors.updateError[consignmentId];\n        }\n\n        return find(this._consignments.errors.updateError);\n    }\n\n    getDeleteError(consignmentId?: string): Error | undefined {\n        if (consignmentId) {\n            return this._consignments.errors.deleteError[consignmentId];\n        }\n\n        return find(this._consignments.errors.deleteError);\n    }\n\n    getItemAssignmentError(address: AddressRequestBody): Error | undefined {\n        const consignment = this.getConsignmentByAddress(address);\n\n        return consignment ? this.getUpdateError(consignment.id) : this.getCreateError();\n    }\n\n    getUpdateShippingOptionError(consignmentId?: string): Error | undefined {\n        if (consignmentId) {\n            return this._consignments.errors.updateShippingOptionError[consignmentId];\n        }\n\n        return find(this._consignments.errors.updateShippingOptionError);\n    }\n\n    isLoading(): boolean {\n        return this._consignments.statuses.isLoading === true;\n    }\n\n    isLoadingShippingOptions(): boolean {\n        return this._consignments.statuses.isLoadingShippingOptions === true;\n    }\n\n    isCreating(): boolean {\n        return this._consignments.statuses.isCreating === true;\n    }\n\n    isUpdating(consignmentId?: string): boolean {\n        if (consignmentId) {\n            return this._consignments.statuses.isUpdating[consignmentId] === true;\n        }\n\n        return find(this._consignments.statuses.isUpdating) === true;\n    }\n\n    isDeleting(consignmentId?: string): boolean {\n        if (consignmentId) {\n            return this._consignments.statuses.isDeleting[consignmentId] === true;\n        }\n\n        return find(this._consignments.statuses.isDeleting) === true;\n    }\n\n    isAssigningItems(address: AddressRequestBody): boolean {\n        const consignment = this.getConsignmentByAddress(address);\n\n        return consignment ? this.isUpdating(consignment.id) : this.isCreating();\n    }\n\n    isUpdatingShippingOption(consignmentId?: string): boolean {\n        if (consignmentId) {\n            return this._consignments.statuses.isUpdatingShippingOption[consignmentId] === true;\n        }\n\n        return find(this._consignments.statuses.isUpdatingShippingOption) === true;\n    }\n}\n","import { BillingAddressSelector } from '../billing';\nimport { selector } from '../common/selector';\nimport { CouponSelector } from '../coupon';\n\nimport Order from './order';\nimport OrderState, { OrderMetaState } from './order-state';\n\n@selector\nexport default class OrderSelector {\n    constructor(\n        private _order: OrderState,\n        private _billingAddress: BillingAddressSelector,\n        private _coupons: CouponSelector\n    ) {}\n\n    getOrder(): Order | undefined {\n        const { data } = this._order;\n        const billingAddress = this._billingAddress.getBillingAddress();\n        const coupons = this._coupons.getCoupons() || [];\n\n        if (!data || !billingAddress) {\n            return;\n        }\n\n        return {\n            ...data,\n            billingAddress,\n            coupons,\n        };\n    }\n\n    getOrderMeta(): OrderMetaState | undefined {\n        return this._order.meta;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._order.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return !!this._order.statuses.isLoading;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { BillingAddressAction, BillingAddressActionType } from '../billing/billing-address-actions';\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { CouponAction, CouponActionType } from '../coupon/coupon-actions';\nimport { GiftCertificateAction, GiftCertificateActionType } from '../coupon/gift-certificate-actions';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping/consignment-actions';\n\nimport Cart from './cart';\nimport CartState, { CartErrorsState, CartStatusesState } from './cart-state';\n\nconst DEFAULT_STATE: CartState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function cartReducer(\n    state: CartState = DEFAULT_STATE,\n    action: Action\n): CartState {\n    const reducer = combineReducers<CartState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Cart | undefined,\n    action: BillingAddressAction | CheckoutAction | ConsignmentAction | CouponAction | GiftCertificateAction\n): Cart | undefined {\n    switch (action.type) {\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return action.payload ? { ...data, ...action.payload.cart } : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CartStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction\n): CartStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return { ...statuses, isLoading: true };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return { ...statuses, isLoading: false };\n\n    default:\n        return statuses;\n    }\n}\n\nfunction errorsReducer(\n    errors: CartErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction\n): CartErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return { ...errors, loadError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { CouponAction, CouponActionType } from '../coupon';\nimport { CustomerAction, CustomerActionType } from '../customer';\n\nimport Consignment from './consignment';\nimport { ConsignmentAction, ConsignmentActionType } from './consignment-actions';\nimport ConsignmentState, { ConsignmentErrorsState, ConsignmentStatusesState } from './consignment-state';\n\nconst DEFAULT_STATE: ConsignmentState = {\n    errors: {\n        updateShippingOptionError: {},\n        updateError: {},\n        deleteError: {},\n    },\n    statuses: {\n        isUpdating: {},\n        isUpdatingShippingOption: {},\n        isDeleting: {},\n    },\n};\n\nexport default function consignmentReducer(\n    state: ConsignmentState = DEFAULT_STATE,\n    action: Action\n): ConsignmentState {\n    const reducer = combineReducers<ConsignmentState, ConsignmentAction | CheckoutAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Consignment[] | undefined,\n    action: ConsignmentAction | CheckoutAction | CouponAction | CustomerAction\n): Consignment[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n        return action.payload ? action.payload.consignments : data;\n\n    case CustomerActionType.SignOutCustomerSucceeded:\n        return [];\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ConsignmentErrorsState = DEFAULT_STATE.errors,\n    action: ConsignmentAction | CheckoutAction\n): ConsignmentErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsRequested:\n        return { ...errors, loadError: undefined };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case ConsignmentActionType.LoadShippingOptionsFailed:\n        return { ...errors, loadError: action.payload };\n\n    case ConsignmentActionType.CreateConsignmentsRequested:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n        return { ...errors, createError: undefined };\n\n    case ConsignmentActionType.CreateConsignmentsFailed:\n        return { ...errors, createError: action.payload };\n\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentRequested:\n        if (action.meta) {\n            errors.updateError[action.meta.id] = undefined;\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateConsignmentFailed:\n        if (action.meta) {\n            errors.updateError[action.meta.id] = action.payload;\n        }\n\n        return errors;\n\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentRequested:\n        if (action.meta) {\n            errors.deleteError[action.meta.id] = undefined;\n        }\n\n        return errors;\n\n    case ConsignmentActionType.DeleteConsignmentFailed:\n        if (action.meta) {\n            errors.deleteError[action.meta.id] = action.payload;\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateShippingOptionRequested:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n        if (action.meta) {\n            errors.updateShippingOptionError[action.meta.id] = undefined;\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateShippingOptionFailed:\n        if (action.meta) {\n            errors.updateShippingOptionError[action.meta.id] = action.payload;\n        }\n\n        return errors;\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ConsignmentStatusesState = DEFAULT_STATE.statuses,\n    action: ConsignmentAction | CheckoutAction\n): ConsignmentStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return { ...statuses, isLoading: true };\n\n    case ConsignmentActionType.LoadShippingOptionsRequested:\n        return { ...statuses, isLoadingShippingOptions: true };\n\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.LoadCheckoutFailed:\n        return { ...statuses, isLoading: false };\n\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsFailed:\n        return { ...statuses, isLoadingShippingOptions: false };\n\n    case ConsignmentActionType.CreateConsignmentsRequested:\n        return { ...statuses, isCreating: true };\n\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.CreateConsignmentsFailed:\n        return { ...statuses, isCreating: false };\n\n    case ConsignmentActionType.UpdateConsignmentRequested:\n        if (action.meta) {\n            statuses.isUpdating[action.meta.id] = true;\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentFailed:\n        if (action.meta) {\n            statuses.isUpdating[action.meta.id] = false;\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.DeleteConsignmentRequested:\n        if (action.meta) {\n            statuses.isDeleting[action.meta.id] = true;\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentFailed:\n        if (action.meta) {\n            statuses.isDeleting[action.meta.id] = false;\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateShippingOptionRequested:\n        if (action.meta) {\n            statuses.isUpdatingShippingOption[action.meta.id] = true;\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionFailed:\n        if (action.meta) {\n            statuses.isUpdatingShippingOption[action.meta.id] = false;\n        }\n\n        return statuses;\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { OrderAction, OrderActionType } from '../order';\n\nimport Coupon from './coupon';\nimport { CouponAction, CouponActionType } from './coupon-actions';\nimport CouponState, { CouponErrorsState, CouponStatusesState } from './coupon-state';\n\nconst DEFAULT_STATE: CouponState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function couponReducer(\n    state: CouponState = DEFAULT_STATE,\n    action: Action\n): CouponState {\n    const reducer = combineReducers<CouponState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Coupon[] | undefined,\n    action: CouponAction | CheckoutAction | OrderAction\n): Coupon[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case OrderActionType.LoadOrderSucceeded:\n        return action.payload ? action.payload.coupons : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CouponErrorsState = {},\n    action: CouponAction\n): CouponErrorsState {\n    switch (action.type) {\n    case CouponActionType.ApplyCouponRequested:\n    case CouponActionType.ApplyCouponSucceeded:\n        return { ...errors, applyCouponError: undefined };\n\n    case CouponActionType.ApplyCouponFailed:\n        return { ...errors, applyCouponError: action.payload };\n\n    case CouponActionType.RemoveCouponRequested:\n    case CouponActionType.RemoveCouponSucceeded:\n        return { ...errors, removeCouponError: undefined };\n\n    case CouponActionType.RemoveCouponFailed:\n        return { ...errors, removeCouponError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CouponStatusesState = {},\n    action: CouponAction\n): CouponStatusesState {\n    switch (action.type) {\n    case CouponActionType.ApplyCouponRequested:\n        return { ...statuses, isApplyingCoupon: true };\n\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.ApplyCouponFailed:\n        return { ...statuses, isApplyingCoupon: false };\n\n    case CouponActionType.RemoveCouponRequested:\n        return { ...statuses, isRemovingCoupon: true };\n\n    case CouponActionType.RemoveCouponSucceeded:\n    case CouponActionType.RemoveCouponFailed:\n        return { ...statuses, isRemovingCoupon: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\n\nimport Customer from './customer';\nimport CustomerState from './customer-state';\n\nconst DEFAULT_STATE: CustomerState = {};\n\nexport default function customerReducer(\n    state: CustomerState = DEFAULT_STATE,\n    action: CheckoutAction\n): CustomerState {\n    const reducer = combineReducers<CustomerState, CheckoutAction>({\n        data: dataReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Customer | undefined,\n    action: CheckoutAction\n): Customer | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return action.payload ? { ...data, ...action.payload.customer } : data;\n\n    default:\n        return data;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping/consignment-actions';\n\nimport { CouponAction, CouponActionType } from './coupon-actions';\nimport GiftCertificate from './gift-certificate';\nimport { GiftCertificateAction, GiftCertificateActionType } from './gift-certificate-actions';\nimport GiftCertificateState, { GiftCertificateErrorsState, GiftCertificateStatusesState } from './gift-certificate-state';\n\nconst DEFAULT_STATE: GiftCertificateState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function giftCertificateReducer(\n    state: GiftCertificateState = DEFAULT_STATE,\n    action: Action\n): GiftCertificateState {\n    const reducer = combineReducers<GiftCertificateState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: GiftCertificate[] | undefined,\n    action: CheckoutAction | GiftCertificateAction | ConsignmentAction | CouponAction\n): GiftCertificate[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return action.payload ? action.payload.giftCertificates : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: GiftCertificateErrorsState = DEFAULT_STATE.errors,\n    action: GiftCertificateAction\n): GiftCertificateErrorsState {\n    switch (action.type) {\n    case GiftCertificateActionType.ApplyGiftCertificateRequested:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n        return { ...errors, applyGiftCertificateError: undefined };\n\n    case GiftCertificateActionType.ApplyGiftCertificateFailed:\n        return { ...errors, applyGiftCertificateError: action.payload };\n\n    case GiftCertificateActionType.RemoveGiftCertificateRequested:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return { ...errors, removeGiftCertificateError: undefined };\n\n    case GiftCertificateActionType.RemoveGiftCertificateFailed:\n        return { ...errors, removeGiftCertificateError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: GiftCertificateStatusesState = DEFAULT_STATE.statuses,\n    action: GiftCertificateAction\n): GiftCertificateStatusesState {\n    switch (action.type) {\n    case GiftCertificateActionType.ApplyGiftCertificateRequested:\n        return { ...statuses, isApplyingGiftCertificate: true };\n\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateFailed:\n        return { ...statuses, isApplyingGiftCertificate: false };\n\n    case GiftCertificateActionType.RemoveGiftCertificateRequested:\n        return { ...statuses, isRemovingGiftCertificate: true };\n\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateFailed:\n        return { ...statuses, isRemovingGiftCertificate: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\nimport { omit } from 'lodash';\n\nimport { clearErrorReducer } from '../common/error';\n\nimport { OrderAction, OrderActionType } from './order-actions';\nimport OrderState, { OrderDataState, OrderErrorsState, OrderMetaState, OrderStatusesState } from './order-state';\n\nconst DEFAULT_STATE: OrderState = {\n    errors: {},\n    meta: {},\n    statuses: {},\n};\n\nexport default function orderReducer(\n    state: OrderState = DEFAULT_STATE,\n    action: Action\n): OrderState {\n    const reducer = combineReducers<OrderState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: OrderDataState | undefined,\n    action: OrderAction\n): OrderDataState | undefined {\n    switch (action.type) {\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n        return action.payload\n            ? omit({ ...data, ...action.payload }, ['billingAddress', 'coupons'])\n            : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(\n    meta: OrderMetaState | undefined,\n    action: OrderAction\n): OrderMetaState | undefined {\n    switch (action.type) {\n    case OrderActionType.FinalizeOrderSucceeded:\n    case OrderActionType.SubmitOrderSucceeded:\n        return action.payload ? {\n            ...meta,\n            ...action.meta,\n            callbackUrl: action.payload.order.callbackUrl,\n            orderToken: action.payload.order.token,\n            payment: action.payload.order && action.payload.order.payment,\n        } : meta;\n\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: OrderErrorsState = DEFAULT_STATE.errors,\n    action: OrderAction\n): OrderErrorsState {\n    switch (action.type) {\n    case OrderActionType.LoadOrderRequested:\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n    case OrderActionType.LoadOrderPaymentsRequested:\n        return { ...errors, loadError: undefined };\n\n    case OrderActionType.LoadOrderFailed:\n    case OrderActionType.LoadOrderPaymentsFailed:\n        return { ...errors, loadError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: OrderStatusesState = DEFAULT_STATE.statuses,\n    action: OrderAction\n): OrderStatusesState {\n    switch (action.type) {\n    case OrderActionType.LoadOrderRequested:\n    case OrderActionType.LoadOrderPaymentsRequested:\n        return { ...statuses, isLoading: true };\n\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderFailed:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n    case OrderActionType.LoadOrderPaymentsFailed:\n        return { ...statuses, isLoading: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { assign, findIndex, isPlainObject, pickBy } from 'lodash';\n\nimport { PartialDeep } from '../types';\n\n/**\n * Push an item to an array if it doesn't exist in the array. Otherwise, merge\n * with the existing item in the array. This function always returns a new array.\n */\nexport default function mergeOrPush<T>(\n    array: T[],\n    item: T,\n    predicate: ((item: T) => boolean) | PartialDeep<T>\n): T[] {\n    const index = findIndex(array, typeof predicate === 'object' ? pickBy(predicate) : predicate);\n    const newArray = [...array];\n\n    if (index === -1) {\n        newArray.push(item);\n    } else {\n        newArray[index] = isPlainObject(item) ? assign({}, array[index], item) : item;\n    }\n\n    return newArray;\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { Country } from '../geography';\n\nimport { LoadShippingCountriesAction, ShippingCountryActionType } from './shipping-country-actions';\nimport ShippingCountryState, { ShippingCountryErrorsState, ShippingCountryStatusesState } from './shipping-country-state';\n\nconst DEFAULT_STATE: ShippingCountryState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function shippingCountryReducer(\n    state: ShippingCountryState = DEFAULT_STATE,\n    action: Action\n): ShippingCountryState {\n    const reducer = combineReducers<ShippingCountryState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Country[] | undefined,\n    action: LoadShippingCountriesAction\n): Country[] | undefined {\n    switch (action.type) {\n    case ShippingCountryActionType.LoadShippingCountriesSucceeded:\n        return action.payload || [];\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ShippingCountryErrorsState = DEFAULT_STATE.errors,\n    action: LoadShippingCountriesAction\n): ShippingCountryErrorsState {\n    switch (action.type) {\n    case ShippingCountryActionType.LoadShippingCountriesRequested:\n    case ShippingCountryActionType.LoadShippingCountriesSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case ShippingCountryActionType.LoadShippingCountriesFailed:\n        return { ...errors, loadError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ShippingCountryStatusesState = DEFAULT_STATE.statuses,\n    action: LoadShippingCountriesAction\n): ShippingCountryStatusesState {\n    switch (action.type) {\n    case ShippingCountryActionType.LoadShippingCountriesRequested:\n        return { ...statuses, isLoading: true };\n\n    case ShippingCountryActionType.LoadShippingCountriesSucceeded:\n    case ShippingCountryActionType.LoadShippingCountriesFailed:\n        return { ...statuses, isLoading: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { mapToInternalAddress } from '../address';\nimport { BillingAddress } from '../billing';\n\nimport { Customer } from '.';\nimport InternalCustomer from './internal-customer';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalCustomer(customer: Customer, billingAddress: BillingAddress): InternalCustomer {\n    const firstName = customer.firstName || billingAddress.firstName || '';\n    const lastName = customer.lastName || billingAddress.lastName || '';\n\n    return {\n        addresses: (customer.addresses || []).map(address => mapToInternalAddress(address)),\n        customerId: customer.id,\n        isGuest: customer.isGuest,\n        storeCredit: customer.storeCredit,\n        email: customer.email || billingAddress.email || '',\n        firstName,\n        lastName,\n        name: customer.fullName || [firstName, lastName].join(' '),\n    };\n}\n","import GiftCertificate from './gift-certificate';\nimport InternalGiftCertificate from './internal-gift-certificate';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalGiftCertificate(giftCertificate: GiftCertificate): InternalGiftCertificate {\n    return {\n        code: giftCertificate.code,\n        discountedAmount: giftCertificate.used,\n        remainingBalance: giftCertificate.remaining,\n        giftCertificate: {\n            balance: giftCertificate.balance,\n            code: giftCertificate.code,\n            purchaseDate: giftCertificate.purchaseDate,\n        },\n    };\n}\n","import { filter, find, keyBy, reduce } from 'lodash';\n\nimport { AmountTransformer, LineItem } from '../cart';\nimport { mapToInternalLineItems } from '../cart';\nimport { Checkout } from '../checkout';\nimport { mapToInternalCoupon } from '../coupon';\nimport { HOSTED } from '../payment';\n\nimport InternalOrder, { InternalGiftCertificateList, InternalIncompleteOrder, InternalOrderPayment, InternalSocialDataList } from './internal-order';\nimport Order, { GatewayOrderPayment, GiftCertificateOrderPayment, OrderPayment, OrderPayments } from './order';\nimport { OrderMetaState } from './order-state';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalOrder(order: Order, orderMeta: OrderMetaState = {}): InternalOrder {\n    const decimalPlaces = order.currency.decimalPlaces;\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: order.orderId,\n        items: mapToInternalLineItems(order.lineItems, order.currency.decimalPlaces, 'productId'),\n        orderId: order.orderId,\n        currency: order.currency.code,\n        customerCanBeCreated: order.customerCanBeCreated,\n        payment: mapToInteralOrderPayment(order.payments, orderMeta.payment),\n        subtotal: {\n            amount: order.baseAmount,\n            integerAmount: amountTransformer.toInteger(order.baseAmount),\n        },\n        coupon: {\n            discountedAmount: reduce(order.coupons, (sum, coupon) => {\n                return sum + coupon.discountedAmount;\n            }, 0),\n            coupons: order.coupons.map(mapToInternalCoupon),\n        },\n        discount: {\n            amount: order.discountAmount,\n            integerAmount: amountTransformer.toInteger(order.discountAmount),\n        },\n        token: orderMeta.orderToken,\n        callbackUrl: orderMeta.callbackUrl,\n        discountNotifications: [],\n        giftCertificate: mapToGiftCertificates(order.payments),\n        socialData: mapToInternalSocialDataList(order),\n        status: order.status,\n        hasDigitalItems: order.hasDigitalItems,\n        isDownloadable: order.isDownloadable,\n        isComplete: order.isComplete,\n        shipping: {\n            amount: order.shippingCostTotal,\n            integerAmount: amountTransformer.toInteger(order.shippingCostTotal),\n            amountBeforeDiscount: order.shippingCostBeforeDiscount,\n            integerAmountBeforeDiscount: amountTransformer.toInteger(order.shippingCostBeforeDiscount),\n        },\n        storeCredit: {\n            amount: mapToStoreCredit(order.payments),\n        },\n        taxes: order.taxes,\n        taxTotal: {\n            amount: order.taxTotal,\n            integerAmount: amountTransformer.toInteger(order.taxTotal),\n        },\n        handling: {\n            amount: order.handlingCostTotal,\n            integerAmount: amountTransformer.toInteger(order.handlingCostTotal),\n        },\n        grandTotal: {\n            amount: order.orderAmount,\n            integerAmount: order.orderAmountAsInteger,\n        },\n    };\n}\n\nexport function mapToInternalIncompleteOrder(checkout: Checkout): InternalIncompleteOrder {\n    const payment = find(checkout.payments, { providerType: HOSTED });\n\n    return {\n        orderId: null,\n        isComplete: false,\n        payment: !payment ? {} : {\n            id: payment.providerId,\n            gateway: payment.gatewayId,\n            status: mapToInternalPaymentStatus(payment.detail.step),\n        },\n    };\n}\n\nfunction mapToInternalPaymentStatus(status: string): string {\n    return `PAYMENT_STATUS_${status}`;\n}\n\nfunction mapToStoreCredit(payments?: OrderPayments): number {\n    const item = find(payments, { providerId: 'storecredit' });\n\n    return item ? item.amount : 0;\n}\n\nfunction mapToGiftCertificates(payments?: OrderPayments): InternalGiftCertificateList {\n    const items = filter(payments, { providerId: 'giftcertificate' }) as GiftCertificateOrderPayment[];\n\n    return {\n        totalDiscountedAmount: reduce(items, (sum, item) => item.amount + sum, 0),\n        appliedGiftCertificates: keyBy(items.map(item => ({\n            code: item.detail.code,\n            discountedAmount: item.amount,\n            remainingBalance: item.detail.remaining,\n            giftCertificate: {\n                balance: item.amount + item.detail.remaining,\n                code: item.detail.code,\n                purchaseDate: '',\n            },\n        })), 'code'),\n    };\n}\n\nfunction mapToInteralOrderPayment(payments?: OrderPayments, payment: InternalOrderPayment = {}): InternalOrderPayment {\n    const item = find(payments, isDefaultOrderPayment) as GatewayOrderPayment;\n\n    if (!item) {\n        return {};\n    }\n\n    return {\n        id: item.providerId,\n        status: mapToInternalPaymentStatus(item.detail.step),\n        helpText: item.detail.instructions,\n        returnUrl: payment.returnUrl,\n    };\n}\n\nfunction isDefaultOrderPayment(payment: OrderPayment): payment is GatewayOrderPayment {\n    return payment.providerId !== 'giftcertificate' && payment.providerId !== 'storecredit';\n}\n\nfunction mapToInternalSocialDataList(order: Order): { [itemId: string]: InternalSocialDataList } | undefined {\n    const socialDataObject: { [itemId: string]: InternalSocialDataList } = {};\n    const items = [\n        ...order.lineItems.physicalItems,\n        ...order.lineItems.digitalItems,\n    ];\n\n    items.forEach(item => {\n        socialDataObject[item.id] = mapToInternalSocialData(item);\n    });\n\n    return socialDataObject;\n}\n\nfunction mapToInternalSocialData(lineItem: LineItem): InternalSocialDataList {\n    const codes = ['fb', 'tw', 'gp'];\n\n    return codes.reduce((socialData, code) => {\n        const item = lineItem.socialMedia && lineItem.socialMedia.find(item => item.code === code);\n\n        if (!item) {\n            return socialData;\n        }\n\n        socialData[code] = {\n            name: lineItem.name,\n            description: lineItem.name,\n            image: lineItem.imageUrl,\n            url: item.link,\n            shareText: item.text,\n            sharingLink: item.link,\n            channelName: item.channel,\n            channelCode: item.code,\n        };\n\n        return socialData;\n    }, {} as InternalSocialDataList);\n}\n","export default interface ShippingStrategyState {\n    data: ShippingStrategyDataState;\n    errors: ShippingStrategyErrorsState;\n    statuses: ShippingStrategyStatusesState;\n}\n\nexport interface ShippingStrategyDataState {\n    [key: string]: {\n        isInitialized: boolean,\n    };\n}\n\nexport interface ShippingStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    updateAddressError?: Error;\n    updateAddressMethodId?: string;\n    selectOptionError?: Error;\n    selectOptionMethodId?: string;\n}\n\nexport interface ShippingStrategyStatusesState {\n    deinitializeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isInitializing?: boolean;\n    isUpdatingAddress?: boolean;\n    isSelectingOption?: boolean;\n    updateAddressMethodId?: string;\n    selectOptionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: ShippingStrategyState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\n\nimport { ShippingStrategyAction, ShippingStrategyActionType } from './shipping-strategy-actions';\nimport ShippingStrategyState, { DEFAULT_STATE, ShippingStrategyDataState, ShippingStrategyErrorsState, ShippingStrategyStatusesState } from './shipping-strategy-state';\n\nexport default function shippingStrategyReducer(\n    state: ShippingStrategyState = DEFAULT_STATE,\n    action: Action\n): ShippingStrategyState {\n    const reducer = combineReducers<ShippingStrategyState, ShippingStrategyAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: ShippingStrategyDataState = DEFAULT_STATE.data,\n    action: ShippingStrategyAction\n): ShippingStrategyDataState {\n    switch (action.type) {\n    case ShippingStrategyActionType.InitializeSucceeded:\n        return {\n            ...data,\n            [action.meta && action.meta.methodId]: {\n                isInitialized: true,\n            },\n        };\n\n    case ShippingStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...data,\n            [action.meta && action.meta.methodId]: {\n                isInitialized: false,\n            },\n        };\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: ShippingStrategyErrorsState = DEFAULT_STATE.errors,\n    action: ShippingStrategyAction\n): ShippingStrategyErrorsState {\n    switch (action.type) {\n    case ShippingStrategyActionType.InitializeRequested:\n    case ShippingStrategyActionType.InitializeSucceeded:\n        return {\n            ...errors,\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.InitializeFailed:\n        return {\n            ...errors,\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.DeinitializeRequested:\n    case ShippingStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...errors,\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.DeinitializeFailed:\n        return {\n            ...errors,\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.UpdateAddressRequested:\n    case ShippingStrategyActionType.UpdateAddressSucceeded:\n        return {\n            ...errors,\n            updateAddressError: undefined,\n            updateAddressMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.UpdateAddressFailed:\n        return {\n            ...errors,\n            updateAddressError: action.payload,\n            updateAddressMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.SelectOptionRequested:\n    case ShippingStrategyActionType.SelectOptionSucceeded:\n        return {\n            ...errors,\n            selectOptionError: undefined,\n            selectOptionMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.SelectOptionFailed:\n        return {\n            ...errors,\n            selectOptionError: action.payload,\n            selectOptionMethodId: action.meta && action.meta.methodId,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ShippingStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: ShippingStrategyAction\n): ShippingStrategyStatusesState {\n    switch (action.type) {\n    case ShippingStrategyActionType.InitializeRequested:\n        return {\n            ...statuses,\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.InitializeFailed:\n    case ShippingStrategyActionType.InitializeSucceeded:\n        return {\n            ...statuses,\n            isInitializing: false,\n            initializeMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.DeinitializeRequested:\n        return {\n            ...statuses,\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.DeinitializeFailed:\n    case ShippingStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...statuses,\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.UpdateAddressRequested:\n        return {\n            ...statuses,\n            isUpdatingAddress: true,\n            updateAddressMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.UpdateAddressFailed:\n    case ShippingStrategyActionType.UpdateAddressSucceeded:\n        return {\n            ...statuses,\n            isUpdatingAddress: false,\n            updateAddressMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.SelectOptionRequested:\n        return {\n            ...statuses,\n            isSelectingOption: true,\n            selectOptionMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.SelectOptionFailed:\n    case ShippingStrategyActionType.SelectOptionSucceeded:\n        return {\n            ...statuses,\n            isSelectingOption: false,\n            selectOptionMethodId: undefined,\n        };\n\n    default:\n        return statuses;\n    }\n}\n","export default interface CustomerStrategyState {\n    data: CustomerStrategyDataState;\n    errors: CustomerStrategyErrorsState;\n    statuses: CustomerStrategyStatusesState;\n}\n\nexport interface CustomerStrategyDataState {\n    [key: string]: {\n        isInitialized: boolean,\n    };\n}\n\nexport interface CustomerStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    signInError?: Error;\n    signInMethodId?: string;\n    signOutError?: Error;\n    signOutMethodId?: string;\n    widgetInteractionError?: Error;\n    widgetInteractionMethodId?: string;\n}\n\nexport interface CustomerStrategyStatusesState {\n    deinitializeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isInitializing?: boolean;\n    isSigningIn?: boolean;\n    isSigningOut?: boolean;\n    signInMethodId?: string;\n    signOutMethodId?: string;\n    isWidgetInteracting?: boolean;\n    widgetInteractionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: CustomerStrategyState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\n\nimport { CustomerStrategyAction, CustomerStrategyActionType } from './customer-strategy-actions';\nimport CustomerStrategyState, { CustomerStrategyDataState, CustomerStrategyErrorsState, CustomerStrategyStatusesState, DEFAULT_STATE } from './customer-strategy-state';\n\nexport default function customerStrategyReducer(\n    state: CustomerStrategyState = DEFAULT_STATE,\n    action: Action\n): CustomerStrategyState {\n    const reducer = combineReducers<CustomerStrategyState, CustomerStrategyAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: CustomerStrategyDataState = DEFAULT_STATE.data,\n    action: CustomerStrategyAction\n): CustomerStrategyDataState {\n    switch (action.type) {\n    case CustomerStrategyActionType.InitializeSucceeded:\n        return {\n            ...data,\n            [action.meta && action.meta.methodId]: {\n                isInitialized: true,\n            },\n        };\n\n    case CustomerStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...data,\n            [action.meta && action.meta.methodId]: {\n                isInitialized: false,\n            },\n        };\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: CustomerStrategyErrorsState = DEFAULT_STATE.errors,\n    action: CustomerStrategyAction\n): CustomerStrategyErrorsState {\n    switch (action.type) {\n    case CustomerStrategyActionType.InitializeRequested:\n    case CustomerStrategyActionType.InitializeSucceeded:\n        return {\n            ...errors,\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.InitializeFailed:\n        return {\n            ...errors,\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.DeinitializeRequested:\n    case CustomerStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...errors,\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.DeinitializeFailed:\n        return {\n            ...errors,\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.SignInRequested:\n    case CustomerStrategyActionType.SignInSucceeded:\n        return {\n            ...errors,\n            signInError: undefined,\n            signInMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.SignInFailed:\n        return {\n            ...errors,\n            signInError: action.payload,\n            signInMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.SignOutRequested:\n    case CustomerStrategyActionType.SignOutSucceeded:\n        return {\n            ...errors,\n            signOutError: undefined,\n            signOutMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.SignOutFailed:\n        return {\n            ...errors,\n            signOutError: action.payload,\n            signOutMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.WidgetInteractionStarted:\n    case CustomerStrategyActionType.WidgetInteractionFinished:\n        return {\n            ...errors,\n            widgetInteractionError: undefined,\n            widgetInteractionMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.WidgetInteractionFailed:\n        return {\n            ...errors,\n            widgetInteractionError: action.payload,\n            widgetInteractionMethodId: action.meta.methodId,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CustomerStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: CustomerStrategyAction\n): CustomerStrategyStatusesState {\n    switch (action.type) {\n    case CustomerStrategyActionType.InitializeRequested:\n        return {\n            ...statuses,\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.InitializeFailed:\n    case CustomerStrategyActionType.InitializeSucceeded:\n        return {\n            ...statuses,\n            isInitializing: false,\n            initializeMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.DeinitializeRequested:\n        return {\n            ...statuses,\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.DeinitializeFailed:\n    case CustomerStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...statuses,\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.SignInRequested:\n        return {\n            ...statuses,\n            isSigningIn: true,\n            signInMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.SignInFailed:\n    case CustomerStrategyActionType.SignInSucceeded:\n        return {\n            ...statuses,\n            isSigningIn: false,\n            signInMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.SignOutRequested:\n        return {\n            ...statuses,\n            isSigningOut: true,\n            signOutMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.SignOutFailed:\n    case CustomerStrategyActionType.SignOutSucceeded:\n        return {\n            ...statuses,\n            isSigningOut: false,\n            signOutMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.WidgetInteractionStarted:\n        return {\n            ...statuses,\n            isWidgetInteracting: true,\n            widgetInteractionMethodId: action.meta.methodId,\n         };\n\n    case CustomerStrategyActionType.WidgetInteractionFinished:\n    case CustomerStrategyActionType.WidgetInteractionFailed:\n         return {\n            ...statuses,\n            isWidgetInteracting: false,\n            widgetInteractionMethodId: undefined,\n         };\n\n    default:\n        return statuses;\n    }\n}\n","export default function getCallbackUrl(origin: string): string {\n    return `${window.location.origin}/checkout.php?action=set_external_checkout&provider=masterpass&gateway=stripe&origin=${origin}`;\n}\n","import isPrivate from './is-private';\nimport omitDeep from './omit-deep';\n\nexport default function omitPrivate(object: any): any {\n    return omitDeep(object, (value: any, key: string) => isPrivate(key));\n}\n","export default function getEnvironment(): string {\n    try {\n        return process.env.NODE_ENV || 'development';\n    } catch (e) {\n        return 'development';\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nimport InternalOrderRequestBody from './internal-order-request-body';\nimport { InternalOrderResponseBody } from './internal-order-responses';\nimport Order from './order';\n\nexport default class OrderRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadOrder(orderId: number, { timeout }: RequestOptions = {}): Promise<Response<Order>> {\n        const url = `/api/storefront/orders/${orderId}`;\n        const headers = { Accept: ContentType.JsonV1 };\n        const params = {\n            include: [\n                'payments',\n                'lineItems.physicalItems.socialMedia',\n                'lineItems.physicalItems.options',\n                'lineItems.digitalItems.socialMedia',\n                'lineItems.digitalItems.options',\n            ].join(','),\n        };\n\n        return this._requestSender.get(url, {\n            params,\n            headers,\n            timeout,\n        });\n    }\n\n    submitOrder(body: InternalOrderRequestBody, { timeout }: RequestOptions = {}): Promise<Response<InternalOrderResponseBody>> {\n        const url = '/internalapi/v1/checkout/order';\n\n        return this._requestSender.post(url, { body, timeout });\n    }\n\n    finalizeOrder(orderId: number, { timeout }: RequestOptions = {}): Promise<Response<InternalOrderResponseBody>> {\n        const url = `/internalapi/v1/checkout/order/${orderId}`;\n\n        return this._requestSender.post(url, { timeout });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, from, of, Observable, Observer } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\n\nimport { CheckoutValidator, InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport InternalOrderRequestBody from './internal-order-request-body';\nimport { FinalizeOrderAction, LoadOrderAction, LoadOrderPaymentsAction, OrderActionType, SubmitOrderAction } from './order-actions';\nimport OrderRequestBody from './order-request-body';\nimport OrderRequestSender from './order-request-sender';\n\nexport default class OrderActionCreator {\n    constructor(\n        private _orderRequestSender: OrderRequestSender,\n        private _checkoutValidator: CheckoutValidator\n    ) {}\n\n    loadOrder(orderId: number, options?: RequestOptions): Observable<LoadOrderAction> {\n        return new Observable((observer: Observer<LoadOrderAction>) => {\n            observer.next(createAction(OrderActionType.LoadOrderRequested));\n\n            this._orderRequestSender.loadOrder(orderId, options)\n                .then(response => {\n                    observer.next(createAction(OrderActionType.LoadOrderSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(OrderActionType.LoadOrderFailed, response));\n                });\n        });\n    }\n\n    // TODO: Remove when checkout does not contain unrelated order data.\n    loadOrderPayments(orderId: number, options?: RequestOptions): Observable<LoadOrderPaymentsAction> {\n        return new Observable((observer: Observer<LoadOrderPaymentsAction>) => {\n            observer.next(createAction(OrderActionType.LoadOrderPaymentsRequested));\n\n            this._orderRequestSender.loadOrder(orderId, options)\n                .then(response => {\n                    observer.next(createAction(OrderActionType.LoadOrderPaymentsSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(OrderActionType.LoadOrderPaymentsFailed, response));\n                });\n        });\n    }\n\n    loadCurrentOrder(options?: RequestOptions): ThunkAction<LoadOrderAction, InternalCheckoutSelectors> {\n        return store => defer(() => {\n            const orderId = this._getCurrentOrderId(store.getState());\n\n            if (!orderId) {\n                throw new MissingDataError(MissingDataErrorType.MissingOrderId);\n            }\n\n            return this.loadOrder(orderId, options);\n        });\n    }\n\n    submitOrder(payload: OrderRequestBody, options?: RequestOptions): ThunkAction<SubmitOrderAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(OrderActionType.SubmitOrderRequested)),\n            defer(() => {\n                const state = store.getState();\n                const externalSource = state.config.getExternalSource();\n                const checkout = state.checkout.getCheckout();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                return from(\n                    this._checkoutValidator.validate(checkout, options)\n                        .then(() => this._orderRequestSender.submitOrder(this._mapToOrderRequestBody(payload, checkout.customerMessage, externalSource), options))\n                ).pipe(\n                    switchMap(response => concat(\n                        // TODO: Remove once we can submit orders using storefront API\n                        this.loadOrder(response.body.data.order.orderId, options),\n                        of(createAction(OrderActionType.SubmitOrderSucceeded, response.body.data, { ...response.body.meta, token: response.headers.token }))\n                    ))\n                );\n            }).pipe(\n                catchError(error => throwErrorAction(OrderActionType.SubmitOrderFailed, error))\n            )\n        );\n    }\n\n    finalizeOrder(orderId: number, options?: RequestOptions): Observable<FinalizeOrderAction | LoadOrderAction> {\n        return concat(\n            of(createAction(OrderActionType.FinalizeOrderRequested)),\n            from(this._orderRequestSender.finalizeOrder(orderId, options))\n                .pipe(\n                    switchMap(response => concat(\n                        this.loadOrder(orderId, options),\n                        of(createAction(OrderActionType.FinalizeOrderSucceeded, response.body.data))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(OrderActionType.FinalizeOrderFailed, error))\n        );\n    }\n\n    private _getCurrentOrderId(state: InternalCheckoutSelectors): number | undefined {\n        const order = state.order.getOrder();\n        const checkout = state.checkout.getCheckout();\n\n        return (order && order.orderId) || (checkout && checkout.orderId);\n    }\n\n    private _mapToOrderRequestBody(payload: OrderRequestBody, customerMessage: string, externalSource?: string): InternalOrderRequestBody {\n        const { payment, ...order } = payload;\n\n        if (!payment) {\n            return {\n                ...order,\n                customerMessage,\n                externalSource,\n            };\n        }\n\n        return {\n            ...order,\n            customerMessage,\n            externalSource,\n            payment: {\n                paymentData: payment.paymentData,\n                name: payment.methodId,\n                gateway: payment.gatewayId,\n            },\n        };\n    }\n}\n","import { isEqual } from 'lodash';\n\nimport { PartialDeep } from '../common/types';\n\nimport Cart from './cart';\n\nexport default class CartComparator {\n    isEqual(cartA: Cart, cartB: Cart): boolean {\n        return isEqual(\n            this._normalize(cartA),\n            this._normalize(cartB)\n        );\n    }\n\n    private _normalize(cart: Cart): PartialDeep<Cart> {\n        return {\n            cartAmount: cart.cartAmount,\n            currency: cart.currency,\n            id: cart.id,\n            lineItems: {\n                digitalItems: cart.lineItems.digitalItems.map(item => ({\n                    extendedSalePrice: item.extendedSalePrice,\n                    productId: item.productId,\n                    quantity: item.quantity,\n                    variantId: item.variantId,\n                })),\n                giftCertificates: cart.lineItems.giftCertificates.map(item => ({\n                    amount: item.amount,\n                    recipient: item.recipient,\n                })),\n                physicalItems: cart.lineItems.physicalItems.map(item => ({\n                    extendedSalePrice: item.extendedSalePrice,\n                    productId: item.productId,\n                    quantity: item.quantity,\n                    variantId: item.variantId,\n                    giftWrapping: item.giftWrapping,\n                })),\n            },\n        };\n    }\n}\n","export default function toSingleLine(input?: string) {\n    if (!input) {\n        return '';\n    }\n\n    return input.split(/(?:\\r\\n|\\n|\\r)/)\n        .map(line => line.replace(/^\\s+/gm, ''))\n        .join(' ')\n        .trim();\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport { ApplyCouponAction, CouponAction, CouponActionType, RemoveCouponAction } from './coupon-actions';\nimport CouponRequestSender from './coupon-request-sender';\n\nexport default class CouponActionCreator {\n    constructor(\n        private _couponRequestSender: CouponRequestSender\n    ) {}\n\n    applyCoupon(code: string, options?: RequestOptions): ThunkAction<CouponAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ApplyCouponAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(CouponActionType.ApplyCouponRequested));\n\n            this._couponRequestSender.applyCoupon(checkout.id, code, options)\n                .then(({ body }) => {\n                    observer.next(createAction(CouponActionType.ApplyCouponSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CouponActionType.ApplyCouponFailed, response));\n                });\n        });\n    }\n\n    removeCoupon(code: string, options?: RequestOptions): ThunkAction<CouponAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<RemoveCouponAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(CouponActionType.RemoveCouponRequested));\n\n            this._couponRequestSender.removeCoupon(checkout.id, code, options)\n                .then(({ body }) => {\n                    observer.next(createAction(CouponActionType.RemoveCouponSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CouponActionType.RemoveCouponFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout, CheckoutIncludes, CHECKOUT_DEFAULT_INCLUDES } from '../checkout';\nimport { joinIncludes, ContentType, RequestOptions } from '../common/http-request';\n\nexport default class CouponRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    applyCoupon(checkoutId: string, couponCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/coupons`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes([\n                    ...CHECKOUT_DEFAULT_INCLUDES,\n                    CheckoutIncludes.AvailableShippingOptions,\n                ]),\n            },\n            body: { couponCode },\n        });\n    }\n\n    removeCoupon(checkoutId: string, couponCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/coupons/${couponCode}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.delete(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes([\n                    ...CHECKOUT_DEFAULT_INCLUDES,\n                    CheckoutIncludes.AvailableShippingOptions,\n                ]),\n            },\n        });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable ,  Observer } from 'rxjs';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport { GiftCertificateRequestSender } from '.';\nimport { ApplyGiftCertificateAction, GiftCertificateActionType, RemoveGiftCertificateAction } from './gift-certificate-actions';\n\nexport default class GiftCertificateActionCreator {\n    constructor(\n        private _giftCertificateRequestSender: GiftCertificateRequestSender\n    ) {}\n\n    applyGiftCertificate(giftCertificate: string, options?: RequestOptions): ThunkAction<ApplyGiftCertificateAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ApplyGiftCertificateAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(GiftCertificateActionType.ApplyGiftCertificateRequested));\n\n            this._giftCertificateRequestSender.applyGiftCertificate(checkout.id, giftCertificate, options)\n                .then(({ body }) => {\n                    observer.next(createAction(GiftCertificateActionType.ApplyGiftCertificateSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(GiftCertificateActionType.ApplyGiftCertificateFailed, response));\n                });\n        });\n    }\n\n    removeGiftCertificate(giftCertificate: string, options?: RequestOptions): ThunkAction<RemoveGiftCertificateAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<RemoveGiftCertificateAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(GiftCertificateActionType.RemoveGiftCertificateRequested));\n\n            this._giftCertificateRequestSender.removeGiftCertificate(checkout.id, giftCertificate, options)\n                .then(({ body }) => {\n                    observer.next(createAction(GiftCertificateActionType.RemoveGiftCertificateSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(GiftCertificateActionType.RemoveGiftCertificateFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout, CHECKOUT_DEFAULT_INCLUDES } from '../checkout';\nimport { joinIncludes, ContentType, RequestOptions } from '../common/http-request';\n\nexport default class GiftCertificateRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    applyGiftCertificate(checkoutId: string, giftCertificateCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/gift-certificates`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes(CHECKOUT_DEFAULT_INCLUDES),\n            },\n            body: { giftCertificateCode },\n        });\n    }\n\n    removeGiftCertificate(checkoutId: string, giftCertificateCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/gift-certificates/${giftCertificateCode}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.delete(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes(CHECKOUT_DEFAULT_INCLUDES),\n            },\n        });\n    }\n}\n","export default class CancellablePromise<T> {\n    promise: Promise<T>;\n    cancel!: (reason?: any) => void;\n\n    constructor(promise: Promise<T>) {\n        const cancellable = new Promise<T>((resolve, reject) => {\n            this.cancel = reject;\n        });\n\n        this.promise = Promise.race([promise, cancellable]);\n    }\n}\n","import { isEqual } from 'lodash';\n\nimport { omitPrivate } from '../common/utility';\n\nimport InternalAddress from './internal-address';\n\nexport default function isInternalAddressEqual(addressA: Partial<InternalAddress>, addressB: Partial<InternalAddress>): boolean {\n    return isEqual(normalize(addressA), normalize(addressB));\n}\n\nfunction normalize(address: Partial<InternalAddress>): Partial<InternalAddress> {\n    const ignoredKeys = ['id', 'provinceCode'];\n\n    return (Object.keys(omitPrivate(address) || {}) as Array<keyof InternalAddress>)\n        .reduce(\n            (result, key) => ignoredKeys.indexOf(key) === -1 && address[key] ?\n                { ...result, [key]: address[key] } :\n                result,\n            {}\n        );\n}\n","import { BillingAddress } from '../billing';\n\nimport Address from './address';\nimport InternalAddress from './internal-address';\n\nexport default function mapFromInternalAddress(address: InternalAddress): Address | BillingAddress {\n    return {\n        id: address.id,\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        address1: address.addressLine1,\n        address2: address.addressLine2,\n        city: address.city,\n        stateOrProvince: address.province,\n        stateOrProvinceCode: address.provinceCode,\n        postalCode: address.postCode,\n        country: address.country,\n        countryCode: address.countryCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    };\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport { LoadShippingCountriesAction, ShippingCountryActionType } from './shipping-country-actions';\nimport ShippingCountryRequestSender from './shipping-country-request-sender';\n\nexport default class ShippingCountryActionCreator {\n    constructor(\n        private _shippingCountryRequestSender: ShippingCountryRequestSender\n    ) {}\n\n    loadCountries(options?: RequestOptions): Observable<LoadShippingCountriesAction> {\n        return Observable.create((observer: Observer<LoadShippingCountriesAction>) => {\n            observer.next(createAction(ShippingCountryActionType.LoadShippingCountriesRequested));\n\n            this._shippingCountryRequestSender.loadCountries(options)\n                .then(response => {\n                    observer.next(createAction(ShippingCountryActionType.LoadShippingCountriesSucceeded, response.body.data));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ShippingCountryActionType.LoadShippingCountriesFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\nimport { CountryResponseBody } from '../geography';\n\nexport default class ShippingCountryRequestSender {\n    constructor(\n        private _requestSender: RequestSender,\n        private _config: { locale?: string }\n    ) {}\n\n    loadCountries({ timeout }: RequestOptions = {}): Promise<Response<CountryResponseBody>> {\n        const url = '/internalapi/v1/shipping/countries';\n        const headers = {\n            'Accept-Language': this._config.locale,\n        };\n\n        return this._requestSender.get(url, { headers, timeout });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { AddressRequestBody } from '../address';\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { Registry } from '../common/registry';\n\nimport { ShippingInitializeOptions, ShippingRequestOptions } from './shipping-request-options';\nimport {\n    ShippingStrategyActionType,\n    ShippingStrategyDeinitializeAction,\n    ShippingStrategyInitializeAction,\n    ShippingStrategySelectOptionAction,\n    ShippingStrategyUpdateAddressAction,\n} from './shipping-strategy-actions';\nimport { ShippingStrategy } from './strategies';\n\nexport default class ShippingStrategyActionCreator {\n    constructor(\n        private _strategyRegistry: Registry<ShippingStrategy>\n    ) {}\n\n    updateAddress(address: AddressRequestBody, options?: ShippingRequestOptions): ThunkAction<ShippingStrategyUpdateAddressAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategyUpdateAddressAction>) => {\n            const payment = store.getState().payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n\n            observer.next(createAction(ShippingStrategyActionType.UpdateAddressRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .updateAddress(address, { ...options, methodId })\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.UpdateAddressSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.UpdateAddressFailed, error, { methodId }));\n                });\n        });\n    }\n\n    selectOption(shippingOptionId: string, options?: ShippingRequestOptions): ThunkAction<ShippingStrategySelectOptionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategySelectOptionAction>) => {\n            const payment = store.getState().payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n\n            observer.next(createAction(ShippingStrategyActionType.SelectOptionRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .selectOption(shippingOptionId, { ...options, methodId })\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.SelectOptionSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.SelectOptionFailed, error, { methodId }));\n                });\n        });\n    }\n\n    initialize(options?: ShippingInitializeOptions): ThunkAction<ShippingStrategyInitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategyInitializeAction>) => {\n            const state = store.getState();\n            const payment = state.payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n            const mergedOptions = { ...options, methodId };\n\n            if (methodId && state.shippingStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(ShippingStrategyActionType.InitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .initialize(mergedOptions)\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.InitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.InitializeFailed, error, { methodId }));\n                });\n        });\n    }\n\n    deinitialize(options?: ShippingRequestOptions): ThunkAction<ShippingStrategyDeinitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategyDeinitializeAction>) => {\n            const state = store.getState();\n            const payment = state.payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n\n            if (methodId && !state.shippingStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(ShippingStrategyActionType.DeinitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .deinitialize({ ...options, methodId })\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.DeinitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.DeinitializeFailed, error, { methodId }));\n                });\n        });\n    }\n}\n","import StandardError from './standard-error';\n\nexport default class NotImplementedError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Not implemented.');\n\n        this.type = 'not_implemented';\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors} from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { AmazonPayLoginButton, AmazonPayScriptLoader, AmazonPayWindow } from '../../../payment/strategies/amazon-pay';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../../../remote-checkout';\nimport CustomerCredentials from '../../customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nimport AmazonPayCustomerInitializeOptions from './amazon-pay-customer-initialize-options';\n\nexport default class AmazonPayCustomerStrategy implements CustomerStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _window: AmazonPayWindow;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _remoteCheckoutRequestSender: RemoteCheckoutRequestSender,\n        private _scriptLoader: AmazonPayScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { amazon: amazonOptions, methodId } = options;\n\n        if (!amazonOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.amazon\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => new Promise((resolve, reject) => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const { onError = () => {} } = amazonOptions;\n                const onReady = () => {\n                    this._createSignInButton({\n                        ...amazonOptions,\n                        onError: error => {\n                            reject(error);\n                            onError(error);\n                        },\n                    });\n\n                    resolve();\n                };\n\n                this._scriptLoader.loadWidget(this._paymentMethod, onReady)\n                    .catch(reject);\n            }))\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via AmazonPay, the shopper must click on \"Login with Amazon\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _createSignInButton(options: AmazonPayCustomerInitializeOptions): AmazonPayLoginButton {\n        if (!this._paymentMethod || !this._window.OffAmazonPayments) {\n            throw new NotInitializedError(NotInitializedErrorType.CustomerNotInitialized);\n        }\n\n        if (!this._paymentMethod.config.merchantId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { initializationData } = this._paymentMethod;\n\n        return new this._window.OffAmazonPayments.Button(options.container, this._paymentMethod.config.merchantId, {\n            color: options.color || 'Gold',\n            size: options.size || 'small',\n            type: 'PwA',\n            useAmazonAddressBook: true,\n            onError: options.onError,\n            authorization: () => {\n                this._handleAuthorization(initializationData);\n            },\n        });\n    }\n\n    private _handleAuthorization(options: AuthorizationOptions): void {\n        this._remoteCheckoutRequestSender.generateToken()\n            .then(({ body }) => {\n                if (!this._window.amazon) {\n                    throw new NotInitializedError(NotInitializedErrorType.ShippingNotInitialized);\n                }\n\n                this._window.amazon.Login.authorize({\n                    popup: false,\n                    scope: 'payments:shipping_address payments:billing_address payments:widget profile',\n                    state: `${options.tokenPrefix}${body.token}`,\n                }, options.redirectUrl);\n\n                this._remoteCheckoutRequestSender.trackAuthorizationEvent();\n            });\n    }\n}\n\ninterface AuthorizationOptions {\n    redirectUrl: string;\n    tokenPrefix: string;\n}\n","import { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError } from '../../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { BraintreeVisaCheckoutPaymentProcessor } from '../../../payment/strategies/braintree';\nimport { VisaCheckoutScriptLoader } from '../../../payment/strategies/braintree';\nimport { VisaCheckoutPaymentSuccessPayload } from '../../../payment/strategies/braintree/visacheckout';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport CustomerCredentials from '../../customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategyActionCreator from '../../customer-strategy-action-creator';\n\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class BraintreeVisaCheckoutCustomerStrategy implements CustomerStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _buttonClassName: string = 'visa-checkout-wrapper';\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _customerStrategyActionCreator: CustomerStrategyActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _braintreeVisaCheckoutPaymentProcessor: BraintreeVisaCheckoutPaymentProcessor,\n        private _visaCheckoutScriptLoader: VisaCheckoutScriptLoader\n    ) {}\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { braintreevisacheckout: visaCheckoutOptions, methodId } = options;\n\n        if (!visaCheckoutOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.braintreevisacheckout\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                const checkout = state.checkout.getCheckout();\n                const storeConfig = state.config.getStoreConfig();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const {\n                    container,\n                    onError = () => {},\n                } = visaCheckoutOptions;\n\n                const initOptions = {\n                    locale: storeConfig.storeProfile.storeLanguage,\n                    collectShipping: true,\n                    subtotal: checkout.subtotal,\n                    currencyCode: storeConfig.currency.code,\n                };\n\n                return Promise.all([\n                    this._visaCheckoutScriptLoader.load(this._paymentMethod.config.testMode),\n                    this._braintreeVisaCheckoutPaymentProcessor.initialize(this._paymentMethod.clientToken, initOptions),\n                ])\n                .then(([visaCheckout, initOptions]) => {\n                    const signInButton = this._createSignInButton(container, this._buttonClassName);\n\n                    visaCheckout.init(initOptions);\n                    visaCheckout.on('payment.success', (paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) =>\n                        this._paymentInstrumentSelected(paymentSuccessPayload)\n                            .catch(error => onError(error))\n                    );\n                    visaCheckout.on('payment.error', (payment, error) => onError(error));\n\n                    return signInButton;\n                })\n                .then(signInButton => { signInButton.style.visibility = 'visible'; });\n            })\n            .then(() => this._store.getState());\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via VisaCheckout, the shopper must click on \"Visa Checkout\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut('braintreevisacheckout', options)\n        );\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        return this._braintreeVisaCheckoutPaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    private _paymentInstrumentSelected(paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) {\n        const state = this._store.getState();\n\n        if (!this._paymentMethod) {\n            throw new Error('Payment method not initialized');\n        }\n\n        const { id: methodId } = this._paymentMethod;\n\n        return this._store.dispatch(\n            this._customerStrategyActionCreator.widgetInteraction(() => {\n                return this._braintreeVisaCheckoutPaymentProcessor.handleSuccess(\n                    paymentSuccessPayload,\n                    state.shippingAddress.getShippingAddress(),\n                    state.billingAddress.getBillingAddress()\n                )\n                .then(() => this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()));\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _createSignInButton(containerId: string, buttonClass: string): HTMLElement {\n        const container = document.querySelector(`#${containerId}`);\n\n        if (!container) {\n            throw new Error('Need a container to place the button');\n        }\n\n        return (container.querySelector('.' + buttonClass) as HTMLElement) ||\n            this._insertVisaCheckoutButton(container, buttonClass);\n    }\n\n    private _insertVisaCheckoutButton(container: Element, buttonClass: string): HTMLElement {\n        const buttonSource = 'https://secure.checkout.visa.com/wallet-services-web/xo/button.png?acceptCanadianVisaDebit=false&cobrand=true&size=154';\n        const buttonTemplate = `\n            <img\n                alt=\"Visa Checkout\"\n                class=\"v-button\"\n                role=\"button\"\n                src=\"${buttonSource}\"\n                />\n            <a class=\"v-learn v-learn-default\" style=\"text-align: right; display: block; font-size: 10px; color: #003366;\" href=\"#\" data-locale=\"en_US\">Tell Me More</a>`;\n\n        const visaCheckoutButton = document.createElement('div');\n        visaCheckoutButton.style.visibility = 'hidden';\n        visaCheckoutButton.className = buttonClass;\n        visaCheckoutButton.innerHTML = buttonTemplate;\n\n        container.appendChild(visaCheckoutButton);\n\n        return visaCheckoutButton;\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { toFormUrlEncoded } from '../../../common/http-request';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { ChasePayScriptLoader, ChasePaySuccessPayload } from '../../../payment/strategies/chasepay';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport CustomerCredentials from '../../customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\n\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class ChasePayCustomerStrategy implements CustomerStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _chasePayScriptLoader: ChasePayScriptLoader,\n        private _requestSender: RequestSender,\n        private _formPoster: FormPoster\n    ) {}\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { chasepay: chasePayOptions, methodId } = options;\n\n        if (!chasePayOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.chasepay\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                const cart = state.cart.getCart();\n                const storeConfig = state.config.getStoreConfig();\n\n                if (!cart) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCart);\n                }\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!this._paymentMethod || !this._paymentMethod.initializationData.digitalSessionId) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n\n                const { container } = chasePayOptions;\n\n                return this._chasePayScriptLoader.load(this._paymentMethod.config.testMode)\n                    .then(JPMC => {\n                        const ChasePay = JPMC.ChasePay;\n\n                        ChasePay.configure({\n                            language: storeConfig.storeProfile.storeLanguage,\n                        });\n\n                        if (ChasePay.isChasePayUp) {\n                            ChasePay.insertButtons({\n                                containers: [container],\n                            });\n                        }\n\n                        ChasePay.on(ChasePay.EventType.START_CHECKOUT, () => {\n                            this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n                                .then(() => {\n                                    const state = this._store.getState();\n                                    const method = state.paymentMethods.getPaymentMethod(methodId);\n                                    const sessionId = method && method.initializationData && method.initializationData.digitalSessionId;\n\n                                    if (sessionId) {\n                                        ChasePay.startCheckout(sessionId);\n                                    }\n                                });\n                        });\n\n                        ChasePay.on(ChasePay.EventType.COMPLETE_CHECKOUT, (payload: ChasePaySuccessPayload) => {\n                            const state = this._store.getState();\n                            const method = state.paymentMethods.getPaymentMethod(methodId);\n                            const requestId = method && method.initializationData && method.initializationData.merchantRequestId;\n\n                            if (requestId) {\n                                this._setExternalCheckoutData(payload, requestId)\n                                    .then(() => {\n                                        this._reloadPage();\n                                });\n                            }\n                        });\n                    });\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Chase Pay®, the shopper must click on \"Chase Pay®\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _setExternalCheckoutData(payload: ChasePaySuccessPayload, requestId: string): Promise<Response> {\n        const url = `checkout.php?provider=chasepay&action=set_external_checkout`;\n        const options = {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\n            },\n            body: toFormUrlEncoded({\n                sessionToken: payload.sessionToken,\n                merchantRequestId: requestId,\n            }),\n            method: 'post',\n        };\n\n        return this._requestSender.sendRequest(url, options);\n    }\n\n    private _reloadPage() {\n        this._formPoster.postForm('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            params: {\n                fromChasePay: true,\n            },\n        });\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport CustomerActionCreator from '../../customer-action-creator';\nimport CustomerCredentials from '../../customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\n\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class DefaultCustomerStrategy implements CustomerStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _customerActionCreator: CustomerActionCreator\n    ) {}\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._customerActionCreator.signInCustomer(credentials, options)\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._customerActionCreator.signOutCustomer(options)\n        );\n    }\n\n    initialize(options?: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError } from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { GooglePayPaymentProcessor } from '../../../payment/strategies/googlepay';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport CustomerCredentials from '../../customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nimport GooglePayCustomerInitializeOptions from './googlepay-customer-initialize-options';\n\nexport default class GooglePayCustomerStrategy implements CustomerStrategy {\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _googlePayPaymentProcessor: GooglePayPaymentProcessor,\n        private _formPoster: FormPoster\n    ) {}\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId }  = options;\n\n        const googlePayOptions = this._getGooglePayOptions(options);\n\n        if (!methodId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._googlePayPaymentProcessor.initialize(methodId)\n            .then(() => {\n                this._walletButton = this._createSignInButton(googlePayOptions.container);\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._walletButton && this._walletButton.parentNode) {\n            this._walletButton.parentNode.removeChild(this._walletButton);\n            this._walletButton = undefined;\n        }\n\n        return this._googlePayPaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Google Pay, the shopper must click on \"Google Pay\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const container = document.querySelector(`#${containerId}`);\n\n        if (!container) {\n            throw new InvalidArgumentError('Unable to create sign-in button without valid container ID.');\n        }\n\n        const button = this._googlePayPaymentProcessor.createButton(this._handleWalletButtonClick);\n\n        container.appendChild(button);\n\n        return button;\n    }\n\n    private _getGooglePayOptions(options: CustomerInitializeOptions): GooglePayCustomerInitializeOptions {\n        if (options.methodId === 'googlepaybraintree' && options.googlepaybraintree) {\n            return options.googlepaybraintree;\n        }\n\n        if (options.methodId === 'googlepaystripe' && options.googlepaystripe) {\n            return options.googlepaystripe;\n        }\n\n        throw new InvalidArgumentError();\n    }\n\n    private _onPaymentSelectComplete(): void {\n        this._formPoster.postForm('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n        });\n    }\n\n    private _onError(error?: Error): void {\n        if (error && error.message !== 'CANCELED') {\n            throw error;\n        }\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): Promise<void> {\n        event.preventDefault();\n\n        return this._googlePayPaymentProcessor.displayWallet()\n            .then(paymentData => this._googlePayPaymentProcessor.handleSuccess(paymentData)\n            .then(() => {\n                if (paymentData.shippingAddress) {\n                    this._googlePayPaymentProcessor.updateShippingAddress(paymentData.shippingAddress);\n                }\n            }))\n            .then(() => this._onPaymentSelectComplete())\n            .catch(error => this._onError(error));\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotImplementedError\n} from '../../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { getCallbackUrl, MasterpassScriptLoader } from '../../../payment/strategies/masterpass';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport CustomerCredentials from '../../customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\n\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class MasterpassCustomerStrategy implements CustomerStrategy {\n    private _signInButton?: HTMLElement;\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _masterpassScriptLoader: MasterpassScriptLoader\n    ) {}\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { masterpass: masterpassOptions, methodId } = options;\n\n        if (!masterpassOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.masterpass\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n                if (!this._paymentMethod || !this._paymentMethod.initializationData.checkoutId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const cart = state.cart.getCart();\n                if (!cart) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCart);\n                }\n\n                const { container } = masterpassOptions;\n\n                const payload = {\n                    checkoutId: this._paymentMethod.initializationData.checkoutId,\n                    allowedCardTypes: this._paymentMethod.initializationData.allowedCardTypes,\n                    amount: cart.cartAmount.toString(),\n                    currency: cart.currency.code,\n                    cartId: cart.id,\n                    suppressShippingAddress: false,\n                    callbackUrl: getCallbackUrl('checkout'),\n                };\n\n                return this._masterpassScriptLoader.load(this._paymentMethod.config.testMode)\n                    .then(Masterpass => {\n                        this._signInButton = this._createSignInButton(container);\n\n                        this._signInButton.addEventListener('click', () => {\n                            Masterpass.checkout(payload);\n                        });\n                    });\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        if (this._signInButton && this._signInButton.parentNode) {\n            this._signInButton.parentNode.removeChild(this._signInButton);\n            this._signInButton = undefined;\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Masterpass, the shopper must click on \"Masterpass\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const container = document.querySelector(`#${containerId}`);\n\n        if (!container) {\n            throw new InvalidArgumentError('Unable to create sign-in button without valid container ID.');\n        }\n\n        const button = document.createElement('input');\n\n        button.type = 'image';\n        button.src = 'https://static.masterpass.com/dyn/img/btn/global/mp_chk_btn_160x037px.svg';\n        container.appendChild(button);\n\n        return button;\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { NotImplementedError} from '../../../common/error/errors';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport CustomerCredentials from '../../customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\n\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class SquareCustomerStrategy implements CustomerStrategy {\n\n    constructor(\n        private _store: CheckoutStore,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator\n    ) {}\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Masterpass, the shopper must click on \"Masterpass\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    initialize(options?: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { CheckoutActionCreator, CheckoutRequestSender, CheckoutStore } from '../checkout';\nimport { Registry } from '../common/registry';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { PaymentMethodActionCreator, PaymentMethodRequestSender } from '../payment';\nimport { AmazonPayScriptLoader } from '../payment/strategies/amazon-pay';\nimport {\n    createBraintreeVisaCheckoutPaymentProcessor,\n    BraintreeScriptLoader,\n    BraintreeSDKCreator,\n    VisaCheckoutScriptLoader\n} from '../payment/strategies/braintree';\nimport { ChasePayScriptLoader } from '../payment/strategies/chasepay';\nimport { createGooglePayPaymentProcessor, GooglePayBraintreeInitializer, GooglePayStripeInitializer } from '../payment/strategies/googlepay';\nimport { MasterpassScriptLoader } from '../payment/strategies/masterpass';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../remote-checkout';\n\nimport CustomerActionCreator from './customer-action-creator';\nimport CustomerRequestSender from './customer-request-sender';\nimport CustomerStrategyActionCreator from './customer-strategy-action-creator';\nimport { CustomerStrategy } from './strategies';\nimport { AmazonPayCustomerStrategy } from './strategies/amazon';\nimport { BraintreeVisaCheckoutCustomerStrategy } from './strategies/braintree';\nimport { ChasePayCustomerStrategy } from './strategies/chasepay';\nimport { DefaultCustomerStrategy } from './strategies/default';\nimport { GooglePayCustomerStrategy } from './strategies/googlepay';\nimport { MasterpassCustomerStrategy } from './strategies/masterpass';\nimport { SquareCustomerStrategy } from './strategies/square';\n\nexport default function createCustomerStrategyRegistry(\n    store: CheckoutStore,\n    requestSender: RequestSender\n): Registry<CustomerStrategy> {\n    const registry = new Registry<CustomerStrategy>();\n    const scriptLoader = getScriptLoader();\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const checkoutActionCreator = new CheckoutActionCreator(\n        checkoutRequestSender,\n        new ConfigActionCreator(new ConfigRequestSender(requestSender))\n    );\n    const formPoster = createFormPoster();\n    const paymentMethodActionCreator = new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender));\n    const remoteCheckoutRequestSender = new RemoteCheckoutRequestSender(requestSender);\n    const remoteCheckoutActionCreator = new RemoteCheckoutActionCreator(remoteCheckoutRequestSender);\n\n    registry.register('amazon', () =>\n        new AmazonPayCustomerStrategy(\n            store,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            remoteCheckoutRequestSender,\n            new AmazonPayScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('braintreevisacheckout', () =>\n        new BraintreeVisaCheckoutCustomerStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            new CustomerStrategyActionCreator(registry),\n            remoteCheckoutActionCreator,\n            createBraintreeVisaCheckoutPaymentProcessor(scriptLoader, requestSender),\n            new VisaCheckoutScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('chasepay', () =>\n        new ChasePayCustomerStrategy(\n            store,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new ChasePayScriptLoader(scriptLoader),\n            requestSender,\n            formPoster\n        )\n    );\n\n    registry.register('squarev2', () =>\n        new SquareCustomerStrategy(\n            store,\n            new RemoteCheckoutActionCreator(remoteCheckoutRequestSender)\n        )\n    );\n\n    registry.register('masterpass', () =>\n        new MasterpassCustomerStrategy(\n            store,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new MasterpassScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('googlepaybraintree', () =>\n        new GooglePayCustomerStrategy(\n            store,\n            remoteCheckoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayBraintreeInitializer(\n                    new BraintreeSDKCreator(\n                        new BraintreeScriptLoader(scriptLoader)\n                    )\n                )\n            ),\n            formPoster\n        )\n    );\n\n    registry.register('googlepaystripe', () =>\n        new GooglePayCustomerStrategy(\n            store,\n            remoteCheckoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayStripeInitializer()\n            ),\n            formPoster\n    )\n);\n\n    registry.register('default', () =>\n        new DefaultCustomerStrategy(\n            store,\n            new CustomerActionCreator(\n                new CustomerRequestSender(requestSender),\n                checkoutActionCreator\n            )\n        )\n    );\n\n    return registry;\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\n\nimport { isInternalAddressEqual, mapFromInternalAddress, AddressRequestBody } from '../../../address';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { AmazonPayAddressBook, AmazonPayOrderReference, AmazonPayScriptLoader, AmazonPayWindow } from '../../../payment/strategies/amazon-pay';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { RemoteCheckoutSynchronizationError } from '../../../remote-checkout/errors';\nimport ConsignmentActionCreator from '../../consignment-action-creator';\nimport { ShippingInitializeOptions, ShippingRequestOptions } from '../../shipping-request-options';\nimport { ShippingStrategyActionType } from '../../shipping-strategy-actions';\nimport ShippingStrategy from '../shipping-strategy';\n\nimport AmazonPayShippingInitializeOptions from './amazon-pay-shipping-initialize-options';\n\nexport default class AmazonPayShippingStrategy implements ShippingStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _window: AmazonPayWindow;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _consignmentActionCreator: ConsignmentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _scriptLoader: AmazonPayScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    initialize(options: ShippingInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { amazon: amazonOptions, methodId } = options;\n\n        if (!amazonOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.amazon\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => new Promise((resolve, reject) => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const onReady = () => {\n                    this._createAddressBook(amazonOptions)\n                        .then(resolve)\n                        .catch(reject);\n                };\n\n                this._scriptLoader.loadWidget(this._paymentMethod, onReady)\n                    .catch(reject);\n            }))\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    updateAddress(address: AddressRequestBody, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    selectOption(optionId: string, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.selectShippingOption(optionId, options)\n        );\n    }\n\n    private _createAddressBook(options: AmazonPayShippingInitializeOptions): Promise<AmazonPayAddressBook> {\n        return new Promise((resolve, reject) => {\n            const { container, onAddressSelect = () => {}, onError = () => {}, onReady = () => {} } = options;\n            const merchantId = this._paymentMethod && this._paymentMethod.config.merchantId;\n\n            if (!document.getElementById(container)) {\n                return reject(new InvalidArgumentError('Unable to create AmazonPay AddressBook widget without valid container ID.'));\n            }\n\n            if (!this._window.OffAmazonPayments) {\n                return reject(new NotInitializedError(NotInitializedErrorType.ShippingNotInitialized));\n            }\n\n            if (!merchantId) {\n                return reject(new MissingDataError(MissingDataErrorType.MissingPaymentMethod));\n            }\n\n            const widget = new this._window.OffAmazonPayments.Widgets.AddressBook({\n                design: {\n                    designMode: 'responsive',\n                },\n                scope: 'payments:billing_address payments:shipping_address payments:widget profile',\n                sellerId: merchantId,\n                onAddressSelect: orderReference => {\n                    this._synchronizeShippingAddress()\n                        .then(() => onAddressSelect(orderReference))\n                        .catch(onError);\n                },\n                onError: error => {\n                    reject(error);\n                    onError(error);\n                },\n                onReady: orderReference => {\n                    this._updateOrderReference(orderReference)\n                        .then(() => {\n                            resolve();\n                            onReady(orderReference);\n                        })\n                        .catch(onError);\n                },\n            });\n\n            widget.bind(container);\n\n            return widget;\n        });\n    }\n\n    private _synchronizeShippingAddress(): Promise<InternalCheckoutSelectors> {\n        const methodId = this._paymentMethod && this._paymentMethod.id;\n        const amazon = this._store.getState().remoteCheckout.getCheckout('amazon');\n        const referenceId = amazon ? amazon.referenceId : undefined;\n\n        if (!methodId || !referenceId) {\n            throw new RemoteCheckoutSynchronizationError();\n        }\n\n        return this._store.dispatch(\n            createAction(ShippingStrategyActionType.UpdateAddressRequested, undefined, { methodId })\n        )\n            .then(() => this._store.dispatch(\n                this._remoteCheckoutActionCreator.initializeShipping(methodId, { referenceId })\n            ))\n            .then(state => {\n                const amazon = state.remoteCheckout.getCheckout('amazon');\n                const remoteAddress = amazon && amazon.shipping && amazon.shipping.address;\n                const address = state.shippingAddress.getShippingAddress();\n\n                if (remoteAddress === false) {\n                    throw new RemoteCheckoutSynchronizationError();\n                }\n\n                if (!remoteAddress || isInternalAddressEqual(remoteAddress, address || {})) {\n                    return this._store.getState();\n                }\n\n                return this._store.dispatch(\n                    this._consignmentActionCreator.updateAddress(mapFromInternalAddress(remoteAddress))\n                );\n            })\n            .then(() => this._store.dispatch(\n                createAction(ShippingStrategyActionType.UpdateAddressSucceeded, undefined, { methodId })\n            ))\n            .catch(error => this._store.dispatch(\n                createErrorAction(ShippingStrategyActionType.UpdateAddressFailed, error, { methodId })\n            ));\n    }\n\n    private _updateOrderReference(orderReference: AmazonPayOrderReference): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.updateCheckout('amazon', {\n                referenceId: orderReference.getAmazonOrderReferenceId(),\n            })\n        );\n    }\n}\n","import { AddressRequestBody } from '../../../address';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport ConsignmentActionCreator from '../../consignment-action-creator';\nimport { ShippingRequestOptions } from '../../shipping-request-options';\n\nimport ShippingStrategy from '../shipping-strategy';\n\nexport default class DefaultShippingStrategy implements ShippingStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _consignmentActionCreator: ConsignmentActionCreator\n    ) {}\n\n    updateAddress(address: AddressRequestBody, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.updateAddress(address, options)\n        );\n    }\n\n    selectOption(optionId: string, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.selectShippingOption(optionId, options)\n        );\n    }\n\n    initialize(options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { CheckoutRequestSender, CheckoutStore } from '../checkout';\nimport { Registry } from '../common/registry';\nimport { PaymentMethodActionCreator, PaymentMethodRequestSender } from '../payment';\nimport { AmazonPayScriptLoader } from '../payment/strategies/amazon-pay';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../remote-checkout';\n\nimport ConsignmentActionCreator from './consignment-action-creator';\nimport ConsignmentRequestSender from './consignment-request-sender';\nimport { ShippingStrategy } from './strategies';\nimport { AmazonPayShippingStrategy } from './strategies/amazon';\nimport { DefaultShippingStrategy } from './strategies/default';\n\nexport default function createShippingStrategyRegistry(\n    store: CheckoutStore,\n    requestSender: RequestSender\n): Registry<ShippingStrategy> {\n    const registry = new Registry<ShippingStrategy>();\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const consignmentRequestSender = new ConsignmentRequestSender(requestSender);\n    const consignmentActionCreator = new ConsignmentActionCreator(consignmentRequestSender, checkoutRequestSender);\n\n    registry.register('amazon', () =>\n        new AmazonPayShippingStrategy(\n            store,\n            consignmentActionCreator,\n            new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender)),\n            new RemoteCheckoutActionCreator(new RemoteCheckoutRequestSender(requestSender)),\n            new AmazonPayScriptLoader(getScriptLoader())\n        )\n    );\n\n    registry.register('default', () =>\n        new DefaultShippingStrategy(\n            store,\n            consignmentActionCreator\n        )\n    );\n\n    return registry;\n}\n","module.exports = require(\"@bigcommerce/bigpay-client\");","module.exports = require(\"messageformat\");","import { Response } from '@bigcommerce/request-sender';\n\nimport RequestError from './request-error';\n\nexport default class TimeoutError extends RequestError<{}> {\n    constructor(response?: Response) {\n        super(response, {\n            message: 'The request has timed out or aborted.',\n        });\n\n        this.type = 'timeout';\n    }\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { cachableAction, ActionOptions } from '../common/action';\nimport { RequestOptions } from '../common/http-request';\n\nimport { ConfigRequestSender } from '.';\nimport { ConfigActionType, LoadConfigAction } from './config-actions';\n\nexport default class ConfigActionCreator {\n    constructor(\n        private _configRequestSender: ConfigRequestSender\n    ) {}\n\n    @cachableAction\n    loadConfig(options?: RequestOptions & ActionOptions): Observable<LoadConfigAction> {\n        return Observable.create((observer: Observer<LoadConfigAction>) => {\n            observer.next(createAction(ConfigActionType.LoadConfigRequested));\n\n            this._configRequestSender.loadConfig(options)\n                .then(response => {\n                    observer.next(createAction(ConfigActionType.LoadConfigSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConfigActionType.LoadConfigFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, INTERNAL_USE_ONLY, RequestOptions } from '../common/http-request';\n\nimport Config from './config';\n\nexport default class ConfigRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadConfig({ timeout }: RequestOptions = {}): Promise<Response<Config>> {\n        const url = '/api/storefront/checkout-settings';\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n        });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Response } from '@bigcommerce/request-sender';\nimport { Observable, Observer } from 'rxjs';\n\nimport { Checkout, InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType, StandardError } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { GuestCredentials } from '../customer';\n\nimport { BillingAddressRequestSender } from '.';\nimport { BillingAddressUpdateRequestBody } from './billing-address';\nimport { BillingAddressActionType, ContinueAsGuestAction, UpdateBillingAddressAction } from './billing-address-actions';\n\nexport default class BillingAddressActionCreator {\n    constructor(\n        private _requestSender: BillingAddressRequestSender\n    ) {}\n\n    continueAsGuest(\n        credentials: GuestCredentials,\n        options?: RequestOptions\n    ): ThunkAction<ContinueAsGuestAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ContinueAsGuestAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const customer = state.customer.getCustomer();\n\n            if (customer && !customer.isGuest) {\n                throw new StandardError('Cannot continue as guest: customer is logged in.');\n            }\n\n            const billingAddress = state.billingAddress.getBillingAddress();\n\n            let billingAddressRequestBody;\n\n            if (!billingAddress) {\n                billingAddressRequestBody = credentials;\n            } else {\n                const { country, ...existingBillingAddressRequestBody } = billingAddress;\n\n                billingAddressRequestBody = {\n                    ...existingBillingAddressRequestBody,\n                    ...credentials,\n                };\n            }\n\n            observer.next(createAction(BillingAddressActionType.ContinueAsGuestRequested));\n\n            this._createOrUpdateBillingAddress(checkout.id, billingAddressRequestBody, options)\n                .then(({ body }) => {\n                    observer.next(createAction(BillingAddressActionType.ContinueAsGuestSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(BillingAddressActionType.ContinueAsGuestFailed, response));\n                });\n        });\n    }\n\n    updateAddress(\n        address: Partial<BillingAddressUpdateRequestBody>,\n        options?: RequestOptions\n    ): ThunkAction<UpdateBillingAddressAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateBillingAddressAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(BillingAddressActionType.UpdateBillingAddressRequested));\n\n            const billingAddress = state.billingAddress.getBillingAddress();\n\n            // If email is not present in the address provided by the client, then\n            // fall back to the stored email as it could have been set separately\n            // using a convenience method. We can't rely on billingAddress having\n            // an ID to consider that there's a preexisting email, as billingAddress\n            // object from Order doesn't have an ID.\n            const billingAddressRequestBody = {\n                ...address,\n                email: typeof address.email === 'undefined' && billingAddress ? billingAddress.email : address.email,\n            };\n\n            if (billingAddress && billingAddress.id) {\n                billingAddressRequestBody.id = billingAddress.id;\n            }\n\n            this._createOrUpdateBillingAddress(checkout.id, billingAddressRequestBody, options)\n                .then(({ body }) => {\n                    observer.next(createAction(BillingAddressActionType.UpdateBillingAddressSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(BillingAddressActionType.UpdateBillingAddressFailed, response));\n                });\n        });\n    }\n\n    private _createOrUpdateBillingAddress(\n        checkoutId: string,\n        address: Partial<BillingAddressUpdateRequestBody>,\n        options?: RequestOptions\n    ): Promise<Response<Checkout>> {\n        if (!address.id) {\n            return this._requestSender.createAddress(checkoutId, address, options);\n        }\n\n        return this._requestSender.updateAddress(checkoutId, address, options);\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { AddressRequestBody } from '../address';\nimport { Checkout } from '../checkout';\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nimport { BillingAddressUpdateRequestBody } from './billing-address';\n\nconst DEFAULT_PARAMS = {\n    include: [\n        'cart.lineItems.physicalItems.options',\n        'cart.lineItems.digitalItems.options',\n        'customer',\n        'promotions.banners',\n    ].join(','),\n};\n\nexport default class BillingAddressRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    createAddress(checkoutId: string, address: Partial<AddressRequestBody>, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/billing-address`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, { body: address, params: DEFAULT_PARAMS, headers, timeout });\n    }\n\n    updateAddress(checkoutId: string, address: Partial<BillingAddressUpdateRequestBody>, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const { id, ...body } = address;\n        const url = `/api/storefront/checkouts/${checkoutId}/billing-address/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.put(url, { params: DEFAULT_PARAMS, body, headers, timeout });\n    }\n}\n","import { InvalidArgumentError } from '../error/errors';\n\nexport default class Registry<T, K extends string = string> {\n    private _factories: { [key: string]: Factory<T> };\n    private _instances: { [key: string]: T };\n    private _options: RegistryOptions;\n\n    constructor(options?: RegistryOptions) {\n        this._factories = {};\n        this._instances = {};\n        this._options = { defaultToken: 'default', ...options };\n    }\n\n    get(token?: K, cacheToken?: string): T {\n        try {\n            return this._getInstance(\n                token || this._options.defaultToken,\n                cacheToken || token || this._options.defaultToken\n            );\n        } catch (error) {\n            return this._getInstance(\n                this._options.defaultToken,\n                cacheToken || this._options.defaultToken\n            );\n        }\n    }\n\n    register(token: K, factory: Factory<T>): void {\n        if (this._hasFactory(token)) {\n            throw new InvalidArgumentError(`'${token}' is already registered.`);\n        }\n\n        this._factories[token] = factory;\n    }\n\n    protected _hasFactory(token: string): boolean {\n        return !!this._factories[token];\n    }\n\n    private _hasInstance(token: string): boolean {\n        return !!this._instances[token];\n    }\n\n    private _getInstance(token: string, cacheToken: string): T {\n        if (!this._hasInstance(cacheToken)) {\n            const factory = this._factories[token];\n\n            if (!factory) {\n                throw new InvalidArgumentError(`'${token}' is not registered.`);\n            }\n\n            this._instances[cacheToken] = factory();\n        }\n\n        return this._instances[cacheToken];\n    }\n}\n\nexport type Factory<T> = () => T;\n\nexport interface RegistryOptions {\n    defaultToken: string;\n}\n","export default function toFormUrlEncoded(data: { [key: string]: object | string | undefined }): string {\n    return Object.keys(data)\n        .filter(key => data[key] !== undefined)\n        .map(key => {\n            const value = data[key];\n\n            if (typeof value === 'string') {\n                return `${key}=${encodeURIComponent(value)}`;\n            }\n\n            return `${key}=${encodeURIComponent(JSON.stringify(value) || '')}`;\n        })\n        .join('&');\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { Masterpass, MasterpassHostWindow } from './masterpass';\n\nexport default class MasterpassScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        public _window: MasterpassHostWindow = window\n    ) {}\n\n    load(testMode?: boolean): Promise<Masterpass> {\n        return this._scriptLoader\n            .loadScript(`//${testMode ? 'sandbox.' : ''}masterpass.com/integration/merchant.js`)\n            .then(() => {\n                if (!this._window.masterpass) {\n                    throw new StandardError();\n                }\n\n                return this._window.masterpass;\n            });\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class RemoteCheckoutSynchronizationError extends StandardError {\n    constructor(\n        public error?: Error\n    ) {\n        super('Unable to synchronize your checkout details with a third party provider. Please try again later.');\n\n        this.type = 'remote_checkout_synchronization';\n    }\n}\n","import { round } from 'lodash';\n\nimport { Checkout } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport PaymentMethod from '../../payment-method';\nimport { BraintreeSDKCreator, GooglePayBraintreeSDK } from '../braintree';\n\nimport {\n    GooglePaymentData,\n    GooglePayInitializer,\n    GooglePayPaymentDataRequestV2,\n    TokenizePayload\n} from './googlepay';\nimport { GooglePayBraintreeDataRequest, GooglePayBraintreePaymentDataRequestV1 } from './googlepay-braintree';\n\nexport default class GooglePayBraintreeInitializer implements GooglePayInitializer {\n    private _googlePaymentInstance!: GooglePayBraintreeSDK;\n\n    constructor(\n        private _braintreeSDKCreator: BraintreeSDKCreator\n    ) {}\n\n    initialize(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        if (!paymentMethod.clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._braintreeSDKCreator.initialize(paymentMethod.clientToken);\n\n        return this._braintreeSDKCreator.getGooglePaymentComponent()\n            .then(googleBraintreePaymentInstance => {\n                this._googlePaymentInstance = googleBraintreePaymentInstance;\n\n                return this._createGooglePayPayload(\n                    checkout,\n                    paymentMethod.initializationData,\n                    hasShippingAddress\n                );\n            });\n    }\n\n    teardown(): Promise<void> {\n        return this._braintreeSDKCreator.teardown();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): TokenizePayload {\n        const payload = JSON.parse(paymentData.paymentMethodData.tokenizationData.token).androidPayCards[0];\n\n        return {\n            nonce: payload.nonce,\n            type: payload.type,\n            description: payload.description,\n            details: {\n                cardType: payload.details.cardType,\n                lastFour: payload.details.lastFour,\n                lastTwo: payload.details.lastTwo,\n            },\n            binData: payload.binData,\n        };\n    }\n\n    private _createGooglePayPayload(\n        checkout: Checkout,\n        initializationData: any,\n        hasShippingAddress: boolean\n    ): GooglePayPaymentDataRequestV2 {\n        if (!initializationData.platformToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const googlePayBraintreePaymentDataRequest: GooglePayBraintreeDataRequest = {\n            merchantInfo: {\n                authJwt: initializationData.platformToken,\n                merchantName: initializationData.googleMerchantName,\n                merchantId: initializationData.googleMerchantId,\n            },\n            transactionInfo: {\n                currencyCode: checkout.cart.currency.code,\n                totalPriceStatus: 'FINAL',\n                totalPrice: round(checkout.grandTotal, 2).toFixed(2),\n            },\n            cardRequirements: {\n                billingAddressRequired: true,\n                billingAddressFormat: 'FULL',\n            },\n            shippingAddressRequired: !hasShippingAddress,\n            emailRequired: true,\n            phoneNumberRequired: true,\n        };\n\n        return this._mapGooglePayBraintreeDataRequestToGooglePayDataRequestV2(\n            this._googlePaymentInstance.createPaymentDataRequest(googlePayBraintreePaymentDataRequest)\n        );\n    }\n\n    private _mapGooglePayBraintreeDataRequestToGooglePayDataRequestV2(googlePayBraintreeDataRequestV1: GooglePayBraintreePaymentDataRequestV1): GooglePayPaymentDataRequestV2 {\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt: googlePayBraintreeDataRequestV1.merchantInfo.authJwt,\n                merchantId: googlePayBraintreeDataRequestV1.merchantInfo.merchantId,\n                merchantName: googlePayBraintreeDataRequestV1.merchantInfo.merchantName,\n            },\n            allowedPaymentMethods: [{\n                type: 'CARD',\n                parameters: {\n                    allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                    allowedCardNetworks: googlePayBraintreeDataRequestV1.cardRequirements.allowedCardNetworks,\n                    billingAddressRequired: true,\n                    billingAddressParameters: {\n                        format: 'FULL',\n                        phoneNumberRequired: true,\n                    },\n                },\n                tokenizationSpecification: {\n                    type: 'PAYMENT_GATEWAY',\n                    parameters: {\n                        gateway: 'braintree',\n                        'braintree:apiVersion': 'v1',\n                        'braintree:authorizationFingerprint': googlePayBraintreeDataRequestV1.paymentMethodTokenizationParameters.parameters['braintree:authorizationFingerprint'],\n                        'braintree:merchantId': googlePayBraintreeDataRequestV1.paymentMethodTokenizationParameters.parameters['braintree:merchantId'],\n                        'braintree:sdkVersion': googlePayBraintreeDataRequestV1.paymentMethodTokenizationParameters.parameters['braintree:sdkVersion'],\n                    },\n                },\n            }],\n            transactionInfo: googlePayBraintreeDataRequestV1.transactionInfo,\n            emailRequired: true,\n            shippingAddressRequired: googlePayBraintreeDataRequestV1.shippingAddressRequired,\n            shippingAddressParameters: {\n                phoneNumberRequired: googlePayBraintreeDataRequestV1.phoneNumberRequired,\n            },\n        };\n    }\n}\n","import { round } from 'lodash';\n\nimport { Checkout } from '../../../checkout';\nimport { InvalidArgumentError } from '../../../common/error/errors';\nimport PaymentMethod from '../../payment-method';\n\nimport {\n    GooglePaymentData,\n    GooglePayInitializer,\n    GooglePayPaymentDataRequestV2,\n    TokenizePayload\n} from './googlepay';\n\nexport default class GooglePayStripeInitializer implements GooglePayInitializer {\n    initialize(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        return Promise.resolve(this._mapGooglePayStripeDataRequestToGooglePayDataRequestV2(\n            checkout,\n            paymentMethod.initializationData,\n            hasShippingAddress\n        ));\n    }\n\n    teardown(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): TokenizePayload {\n        try {\n            const payload = JSON.parse(paymentData.paymentMethodData.tokenizationData.token);\n\n            return {\n                nonce: payload.id,\n                type: payload.type,\n                details: {\n                    cardType: payload.card.brand,\n                    lastFour: payload.card.last4,\n                },\n            };\n        } catch (err) {\n            throw new InvalidArgumentError('Unable to parse response from Google Pay.');\n        }\n    }\n\n    private _mapGooglePayStripeDataRequestToGooglePayDataRequestV2(\n        checkout: Checkout,\n        initializationData: any,\n        hasShippingAddress: boolean\n    ): GooglePayPaymentDataRequestV2 {\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt: initializationData.platformToken,\n                merchantId: initializationData.googleMerchantId,\n                merchantName: initializationData.googleMerchantName,\n            },\n            allowedPaymentMethods: [{\n                type: 'CARD',\n                parameters: {\n                    allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                    allowedCardNetworks: ['AMEX', 'DISCOVER', 'JCB', 'MASTERCARD', 'VISA'],\n                    billingAddressRequired: true,\n                    billingAddressParameters: {\n                        format: 'FULL',\n                        phoneNumberRequired: true,\n                    },\n                },\n                tokenizationSpecification: {\n                    type: 'PAYMENT_GATEWAY',\n                    parameters: {\n                        gateway: 'stripe',\n                        'stripe:version': initializationData.stripeVersion,\n                        'stripe:publishableKey': initializationData.stripePublishableKey,\n                    },\n                },\n            }],\n            transactionInfo: {\n                currencyCode: checkout.cart.currency.code,\n                totalPriceStatus: 'FINAL',\n                totalPrice: round(checkout.grandTotal, 2).toFixed(2),\n            },\n            emailRequired: true,\n            shippingAddressRequired: !hasShippingAddress,\n            shippingAddressParameters: {\n                phoneNumberRequired: true,\n            },\n        };\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { PaypalHostWindow, PaypalSDK } from './paypal-sdk';\n\nexport default class PaypalScriptLoader {\n    private _window: PaypalHostWindow;\n\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    loadPaypal(): Promise<PaypalSDK> {\n        return this._scriptLoader\n            .loadScript('//www.paypalobjects.com/api/checkout.min.js')\n            .then(() => {\n                if (!this._window.paypal) {\n                    throw new StandardError();\n                }\n\n                return this._window.paypal;\n            });\n    }\n}\n","module.exports = require(\"iframe-resizer/js/iframeResizer.contentWindow\");","import { EmbeddedCheckoutFrameLoadedEvent } from '../embedded-checkout-events';\n\nexport default function handleFrameLoadedEvent(message: EmbeddedCheckoutFrameLoadedEvent): void {\n    if (!message.payload || !message.payload.contentId) {\n        return;\n    }\n\n    const body = document.getElementById(message.payload.contentId);\n\n    if (!body || body.hasAttribute('data-iframe-height')) {\n        return;\n    }\n\n    body.setAttribute('data-iframe-height', '');\n}\n","export default interface CustomError extends Error {\n    message: string;\n    type: string;\n    subtype?: string;\n}\n\nexport function isCustomError(error: any): error is CustomError {\n    return (\n        typeof error.message === 'string' &&\n        typeof error.type === 'string' &&\n        (typeof error.subtype === 'string' || !error.subtype) &&\n        error instanceof Error\n    );\n}\n","import { isCustomError, CustomError } from '../../common/error/errors';\nimport EmbeddedCheckoutError from '../embedded-checkout-error';\nimport {\n    EmbeddedCheckoutCompleteEvent,\n    EmbeddedCheckoutErrorEvent,\n    EmbeddedCheckoutEvent,\n    EmbeddedCheckoutEventMap,\n    EmbeddedCheckoutEventType,\n    EmbeddedCheckoutFrameErrorEvent,\n    EmbeddedCheckoutFrameLoadedEvent,\n    EmbeddedCheckoutLoadedEvent,\n    EmbeddedCheckoutSignedOutEvent,\n} from '../embedded-checkout-events';\nimport EmbeddedCheckoutStyles from '../embedded-checkout-styles';\nimport IframeEventListener from '../iframe-event-listener';\nimport IframeEventPoster from '../iframe-event-poster';\n\nimport EmbeddedCheckoutMessenger from './embedded-checkout-messenger';\nimport { EmbeddedContentEventMap, EmbeddedContentEventType } from './embedded-content-events';\nimport EmbeddedContentOptions from './embedded-content-options';\n\nexport default class IframeEmbeddedCheckoutMessenger implements EmbeddedCheckoutMessenger {\n    /**\n     * @internal\n     */\n    constructor(\n        private _messageListener: IframeEventListener<EmbeddedContentEventMap>,\n        private _messagePoster: IframeEventPoster<EmbeddedCheckoutEvent>,\n        private _untargetedMessagePoster: IframeEventPoster<EmbeddedCheckoutEvent>,\n        private _messageHandlers: EventCallbacks<EmbeddedCheckoutEventMap> = {}\n    ) {\n        this._messageListener.listen();\n    }\n\n    postComplete(): void {\n        const message: EmbeddedCheckoutCompleteEvent = {\n            type: EmbeddedCheckoutEventType.CheckoutComplete,\n        };\n\n        this._postMessage(message);\n    }\n\n    postError(payload: Error | CustomError): void {\n        const message: EmbeddedCheckoutErrorEvent = {\n            type: EmbeddedCheckoutEventType.CheckoutError,\n            payload: this._transformError(payload),\n        };\n\n        this._postMessage(message);\n    }\n\n    postFrameError(payload: Error | CustomError): void {\n        const message: EmbeddedCheckoutFrameErrorEvent = {\n            type: EmbeddedCheckoutEventType.FrameError,\n            payload: this._transformError(payload),\n        };\n\n        // Ideally, all messages should be targeted at a specific origin.\n        // However, for `FrameError` message, we have to post it in an\n        // untargeted fashion. This is because the error could be caused by a\n        // missing cart. That makes it not possible to determine of site origin\n        // of the parent window. Nevertheless, we still want to notify the\n        // parent window about the error.\n        this._postMessage(message, { untargeted: true });\n    }\n\n    postFrameLoaded(payload?: EmbeddedContentOptions): void {\n        const message: EmbeddedCheckoutFrameLoadedEvent = {\n            type: EmbeddedCheckoutEventType.FrameLoaded,\n            payload,\n        };\n\n        this._postMessage(message);\n    }\n\n    postLoaded(): void {\n        const message: EmbeddedCheckoutLoadedEvent = {\n            type: EmbeddedCheckoutEventType.CheckoutLoaded,\n        };\n\n        this._postMessage(message);\n    }\n\n    postSignedOut(): void {\n        const message: EmbeddedCheckoutSignedOutEvent = {\n            type: EmbeddedCheckoutEventType.SignedOut,\n        };\n\n        this._postMessage(message);\n    }\n\n    receiveStyles(handler: (styles: EmbeddedCheckoutStyles) => void): void {\n        this._messageListener.addListener(EmbeddedContentEventType.StyleConfigured, ({ payload }) => {\n            handler(payload);\n        });\n    }\n\n    private _postMessage(message: EmbeddedCheckoutEvent, options?: { untargeted?: boolean }): void {\n        this._notifyMessageHandlers(message);\n\n        if (options && options.untargeted) {\n            return this._untargetedMessagePoster.post(message);\n        }\n\n        this._messagePoster.post(message);\n    }\n\n    private _notifyMessageHandlers(message: EmbeddedCheckoutEvent): void {\n        Object.keys(this._messageHandlers)\n            .forEach(key => {\n                const handler = this._messageHandlers[key as keyof EmbeddedCheckoutEventMap];\n\n                if (handler) {\n                    handler.call(null, message);\n                }\n            });\n    }\n\n    private _transformError(error: Error | CustomError): EmbeddedCheckoutError {\n        return {\n            message: error.message,\n            type: isCustomError(error) ? error.type : undefined,\n            subtype: isCustomError(error) ? error.subtype : undefined,\n        };\n    }\n}\n\nexport type EventCallbacks<TEventMap> = {\n    [key in keyof TEventMap]?: (event: TEventMap[key]) => void;\n};\n","import EmbeddedCheckoutMessenger from './embedded-checkout-messenger';\n\nexport default class NoopEmbeddedCheckoutMessenger implements EmbeddedCheckoutMessenger {\n    postComplete(): void {}\n\n    postError(): void {}\n\n    postFrameError(): void {}\n\n    postFrameLoaded(): void {}\n\n    postLoaded(): void {}\n\n    postSignedOut(): void {}\n\n    receiveStyles(): void {}\n}\n","import { EmbeddedCheckoutEvent, EmbeddedCheckoutEventType } from '../embedded-checkout-events';\nimport IframeEventListener from '../iframe-event-listener';\nimport IframeEventPoster from '../iframe-event-poster';\n\nimport EmbeddedCheckoutMessenger from './embedded-checkout-messenger';\nimport EmbeddedCheckoutMessengerOptions from './embedded-checkout-messenger-options';\nimport { EmbeddedContentEventMap } from './embedded-content-events';\nimport handleFrameLoadedEvent from './handle-frame-loaded-event';\nimport IframeEmbeddedCheckoutMessenger from './iframe-embedded-checkout-messenger';\nimport NoopEmbeddedCheckoutMessenger from './noop-embedded-checkout-messenger';\n\n/**\n * Create an instance of `EmbeddedCheckoutMessenger`.\n *\n * @remarks\n * The object is responsible for posting messages to the parent window from the\n * iframe when certain events have occurred. For example, when the checkout\n * form is first loaded, you should notify the parent window about it.\n *\n * The iframe can only be embedded in domains that are allowed by the store.\n *\n * ```ts\n * const messenger = createEmbeddedCheckoutMessenger({\n *     parentOrigin: 'https://some/website',\n * });\n *\n * messenger.postFrameLoaded();\n * ```\n *\n * @alpha\n * Please note that this feature is currently in an early stage of development.\n * Therefore the API is unstable and not ready for public consumption.\n *\n * @param options - Options for creating `EmbeddedCheckoutMessenger`\n * @returns - An instance of `EmbeddedCheckoutMessenger`\n */\nexport default function createEmbeddedCheckoutMessenger(options: EmbeddedCheckoutMessengerOptions): EmbeddedCheckoutMessenger {\n    const parentWindow = options.parentWindow || window.parent;\n\n    // Return a No-op messenger if it is not called inside an iframe\n    if (window === parentWindow) {\n        return new NoopEmbeddedCheckoutMessenger();\n    }\n\n    return new IframeEmbeddedCheckoutMessenger(\n        new IframeEventListener<EmbeddedContentEventMap>(options.parentOrigin),\n        new IframeEventPoster<EmbeddedCheckoutEvent>(options.parentOrigin, parentWindow),\n        new IframeEventPoster<EmbeddedCheckoutEvent>('*', parentWindow),\n        { [EmbeddedCheckoutEventType.FrameLoaded]: handleFrameLoadedEvent }\n    );\n}\n","import { isObject, union } from 'lodash';\nimport * as MessageFormat from 'messageformat';\n\nimport Logger from '../common/log/logger';\n\nimport LanguageConfig, { Locales, Translations } from './language-config';\n\nconst DEFAULT_LOCALE = 'en';\nconst KEY_PREFIX = 'optimized_checkout';\n\n/**\n * Responsible for getting language strings.\n *\n * This object can be used to retrieve language strings that are most\n * appropriate for a given locale.\n *\n * The language strings provided to the object should follow [ICU\n * MessageFormat](http://userguide.icu-project.org/formatparse/messages) syntax.\n */\nexport default class LanguageService {\n    private _locale: string;\n    private _locales: Locales;\n    private _translations: Translations;\n    private _formatters: { [key: string]: any };\n\n    /**\n     * @internal\n     */\n    constructor(\n        config: Partial<LanguageConfig>,\n        private _logger: Logger\n    ) {\n        const { locale, locales, translations } = this._transformConfig(config);\n\n        this._locale = locale;\n        this._locales = locales;\n        this._translations = translations;\n        this._formatters = {};\n    }\n\n    /**\n     * Remaps a set of language strings with a different set of keys.\n     *\n     * ```js\n     * service.mapKeys({\n     *     'new_key': 'existing_key',\n     * });\n     *\n     * console.log(service.translate('new_key'));\n     * ```\n     *\n     * @param maps - The set of language strings.\n     */\n    mapKeys(maps: { [key: string]: string }): void {\n        Object.keys(maps).forEach(key => {\n            const translationKey = `${KEY_PREFIX}.${maps[key]}`;\n\n            this._translations[`${KEY_PREFIX}.${key}`] = this._translations[translationKey];\n        });\n    }\n\n    /**\n     * Gets the preferred locale of the current customer.\n     *\n     * @returns The preferred locale code.\n     */\n    getLocale(): string {\n        return this._hasTranslations() ? this._locale : DEFAULT_LOCALE;\n    }\n\n    /**\n     * Gets a language string by a key.\n     *\n     * ```js\n     * service.translate('language_key');\n     * ```\n     *\n     * If the language string contains a placeholder, you can replace it by\n     * providing a second argument.\n     *\n     * ```js\n     * service.translate('language_key', { placeholder: 'Hello' });\n     * ```\n     *\n     * @param key - The language key.\n     * @param data - Data for replacing placeholders in the language string.\n     * @returns The translated language string.\n     */\n    translate(key: string, data: TranslationData = {}): string {\n        const prefixedKey = `${KEY_PREFIX}.${key}`;\n\n        if (typeof this._translations[prefixedKey] !== 'string') {\n            this._logger.warn(`Translation key \"${prefixedKey}\" is missing`);\n\n            return prefixedKey;\n        }\n\n        if (!this._formatters[prefixedKey]) {\n            const messageFormat = new MessageFormat(this._locales[prefixedKey]);\n\n            this._formatters[prefixedKey] = messageFormat.compile(this._translations[prefixedKey] || '');\n        }\n\n        return this._formatters[prefixedKey](this._transformData(data));\n    }\n\n    private _transformConfig(config: Partial<LanguageConfig> = {}): LanguageConfig {\n        const output: LanguageConfig = {\n            defaultTranslations: {},\n            translations: {},\n            locales: {},\n            locale: config.locale || DEFAULT_LOCALE,\n        };\n\n        const locales = config.locales || {};\n        const translations = this._flattenObject(config.translations || {});\n        const defaultTranslations = this._flattenObject(config.defaultTranslations || {});\n        const translationKeys = union(Object.keys(defaultTranslations), Object.keys(translations));\n\n        translationKeys.forEach(key => {\n            if (translations && translations[key]) {\n                output.translations[key] = translations[key];\n                output.locales[key] = locales[key] || output.locale;\n            } else {\n                output.translations[key] = defaultTranslations[key];\n                output.locales[key] = DEFAULT_LOCALE;\n            }\n        });\n\n        return output;\n    }\n\n    private _flattenObject(object: Translations, result: Translations = {}, parentKey: string = ''): Translations {\n        try {\n            Object.keys(object).forEach(key => {\n                const value = object[key];\n                const resultKey = parentKey ? `${parentKey}.${key}` : key;\n\n                if (isObject(value)) {\n                    return this._flattenObject(value as Translations, result, resultKey);\n                }\n\n                result[resultKey] = value;\n            });\n        } catch (err) {\n            this._logger.warn(`Unable to parse object: ${err}`);\n        }\n\n        return result;\n    }\n\n    private _transformData(data: TranslationData): TranslationData {\n        return Object.keys(data).reduce((result, key) => {\n            const value = data[key];\n\n            result[key] = value === null || value === undefined ? '' : value;\n\n            return result;\n        }, {} as TranslationData);\n    }\n\n    private _hasTranslations(): boolean {\n        return Object.keys(this._locales).map(key => this._locales[key])\n            .filter(code => code.split('-')[0] === this._locale.split('-')[0])\n            .length > 0;\n    }\n}\n\nexport interface TranslationData {\n    [key: string]: string | number;\n}\n","import { getDefaultLogger } from '../common/log';\n\nimport LanguageConfig from './language-config';\nimport LanguageService from './language-service';\n\n/**\n * Creates an instance of `LanguageService`.\n *\n * @remarks\n * ```js\n * const language = {{{langJson 'optimized_checkout'}}}; // `langJson` is a Handlebars helper provided by BigCommerce's Stencil template engine.\n * const service = createLanguageService(language);\n *\n * console.log(service.translate('address.city_label'));\n * ```\n *\n * @param config - A configuration object.\n * @returns An instance of `LanguageService`.\n */\nexport default function createLanguageService(config: Partial<LanguageConfig> = {}): LanguageService {\n    return new LanguageService(\n        config,\n        getDefaultLogger()\n    );\n}\n","import { InvalidArgumentError } from '../common/error/errors';\n\nimport { CurrencyConfig } from './currency';\n\nexport default class CurrencyFormatter {\n    private _decimalPlaces: number;\n    private _symbolLocation: string;\n    private _symbol: string;\n    private _thousandsSeparator: string;\n    private _decimalSeparator: string;\n\n    constructor(\n        currencySettings: CurrencyConfig\n    ) {\n        if (!currencySettings) {\n            throw new Error('Currency settings missing');\n        }\n\n        const {\n            decimalPlaces,\n            symbolLocation,\n            symbol,\n            thousandsSeparator,\n            decimalSeparator,\n        } = currencySettings;\n\n        if (\n            typeof symbolLocation !== 'string' ||\n            typeof symbol !== 'string' ||\n            typeof thousandsSeparator !== 'string' ||\n            typeof decimalSeparator !== 'string' ||\n            typeof decimalPlaces !== 'string'\n        ) {\n            throw new InvalidArgumentError('Invalid currency settings provided');\n        }\n\n        this._decimalPlaces = parseInt(decimalPlaces, 10);\n        this._symbolLocation = symbolLocation;\n        this._symbol = symbol;\n        this._thousandsSeparator = thousandsSeparator;\n        this._decimalSeparator = decimalSeparator;\n    }\n\n    format(amount?: number): string {\n        if (typeof amount !== 'number') {\n            throw new InvalidArgumentError('Invalid amount provided');\n        }\n\n        const formattedNumber = this._formatNumber(amount);\n\n        const formattedCurrency = this._formatCurrency(formattedNumber);\n\n        return amount < 0 ?\n            `-${formattedCurrency}` :\n            formattedCurrency;\n    }\n\n    private _formatNumber(amount: number): string {\n        const positiveAmount = Math.abs(amount);\n        const [ integerAmount, decimalAmount = '' ] = positiveAmount.toString().split('.');\n        const parsedIntegerAmount = integerAmount.replace(/\\B(?=(\\d{3})+(?!\\d))/g, this._thousandsSeparator);\n\n        if (this._decimalPlaces < 1) {\n            return parsedIntegerAmount;\n        }\n\n        let decimalPadding = '';\n\n        for (let i = 0; i < this._decimalPlaces; i += 1) {\n            decimalPadding += '0';\n        }\n\n        return [\n            parsedIntegerAmount,\n            `${decimalAmount}${decimalPadding}`.slice(0, this._decimalPlaces),\n        ].join(this._decimalSeparator);\n    }\n\n    private _formatCurrency(formattedNumber: string): string {\n        return (this._symbolLocation.toLowerCase() === 'left') ?\n            `${this._symbol}${formattedNumber}` :\n            `${formattedNumber}${this._symbol}`;\n    }\n}\n","import { StoreConfig } from '../config';\n\nimport CurrencyFormatter from './currency-formatter';\n\n/**\n * Responsible for formatting and converting currencies.\n */\nexport default class CurrencyService {\n    private _customerFormatter: CurrencyFormatter;\n    private _storeFormatter: CurrencyFormatter;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _storeConfig: StoreConfig\n    ) {\n        this._customerFormatter = new CurrencyFormatter(this._storeConfig.shopperCurrency);\n        this._storeFormatter = new CurrencyFormatter(this._storeConfig.currency);\n    }\n\n    toCustomerCurrency(amount: number): string {\n        const exchangeRate = this._storeConfig.shopperCurrency.exchangeRate;\n\n        return this._customerFormatter.format(amount * exchangeRate);\n    }\n\n    toStoreCurrency(amount: number): string {\n        return this._storeFormatter.format(amount);\n    }\n}\n","import { StoreConfig } from '../config';\n\nimport CurrencyService from './currency-service';\n\n/**\n * Creates an instance of `CurrencyService`.\n *\n * @remarks\n * ```js\n * const { data } = checkoutService.getState();\n * const config = data.getConfig();\n * const checkout = data.getCheckout();\n * const currencyService = createCurrencyService(config);\n *\n * currencyService.toStoreCurrency(checkout.grandTotal);\n * currencyService.toCustomerCurrency(checkout.grandTotal);\n * ```\n *\n * @alpha\n * Please note that `CurrencyService` is currently in an early stage\n * of development. Therefore the API is unstable and not ready for public\n * consumption.\n *\n * @param config - The config object containing the currency configuration\n * @returns an instance of `CurrencyService`.\n */\nexport default function createCurrencyService(\n    config: StoreConfig\n): CurrencyService {\n    return new CurrencyService(config);\n}\n","export { createTimeout } from '@bigcommerce/request-sender';\n\nexport { createCheckoutService } from './checkout';\nexport { createCheckoutButtonInitializer } from './checkout-buttons';\nexport { embedCheckout } from './embedded-checkout';\nexport { createEmbeddedCheckoutMessenger } from './embedded-checkout/iframe-content';\nexport { createLanguageService } from './locale';\nexport { createCurrencyService } from './currency';\n","import { Checkout } from '../../../checkout';\nimport PaymentMethod from '../../payment-method';\nimport { BraintreeModuleCreator, GooglePayBraintreeSDK } from '../braintree';\n\nexport type EnvironmentType = 'PRODUCTION' | 'TEST';\ntype TokenizeType = 'AndroidPayCard' | 'CreditCard';\n\nexport interface GooglePayInitializer {\n    initialize(checkout: Checkout, paymentMethod: PaymentMethod, hasShippingAddress: boolean, publishableKey?: string): Promise<GooglePayPaymentDataRequestV2>;\n    teardown(): Promise<void>;\n    parseResponse(paymentData: GooglePaymentData): TokenizePayload;\n}\n\nexport interface GooglePayCreator extends BraintreeModuleCreator<GooglePayBraintreeSDK> {}\n\nexport interface GooglePayPaymentOptions {\n    environment: EnvironmentType;\n}\n\nexport interface GooglePayIsReadyToPayResponse {\n    result: boolean;\n    paymentMethodPresend?: boolean;\n}\n\nexport interface GooglePaySDK {\n    payments: {\n        api: {\n            PaymentsClient: {\n                new(options: GooglePayPaymentOptions): GooglePayClient;\n            },\n        },\n    };\n}\n\nexport interface GooglePayClient {\n    isReadyToPay(options: object): Promise<GooglePayIsReadyToPayResponse>;\n    loadPaymentData(paymentDataRequest: GooglePayPaymentDataRequestV2): Promise<GooglePaymentData>;\n    createButton(options: { [key: string]: string | object }): HTMLElement;\n}\n\nexport interface GooglePayHostWindow extends Window {\n    google?: GooglePaySDK;\n}\n\nexport interface TokenizePayload {\n    nonce: string;\n    details: {\n        cardType: string;\n        lastFour: string;\n        lastTwo?: string;\n    };\n    description?: string;\n    type: TokenizeType;\n    binData?: {\n        commercial: string;\n        countryOfIssuance: string;\n        debit: string;\n        durbinRegulated: string;\n        healthcare: string;\n        issuingBank: string;\n        payroll: string;\n        prepaid: string;\n        productId: string;\n    };\n}\n\nexport interface GooglePaymentData {\n    apiVersion: number;\n    apiVersionMinor: number;\n    paymentMethodData: {\n        description: string;\n        info: {\n            cardDetails: string;\n            cardNetwork: string;\n            billingAddress: GooglePayAddress;\n        };\n        tokenizationData: {\n            token: string;\n            type: string;\n        }\n        type: string;\n    };\n    shippingAddress: GooglePayAddress;\n    email: string;\n}\n\nexport interface GooglePayAddress {\n    address1: string;\n    address2: string;\n    address3: string;\n    administrativeArea: string;\n    companyName: string;\n    countryCode: string;\n    locality: string;\n    name: string;\n    postalCode: string;\n    sortingCode: string;\n    phoneNumber: string;\n}\n\nexport interface GooglePaymentsError {\n    statusCode: string;\n    statusMessage?: string;\n}\n\nexport interface PaymentMethodData {\n    methodId: string;\n    paymentData: {\n        method: string,\n        nonce: string,\n        cardInformation: {\n            type: string,\n            number: string,\n        },\n    };\n}\n\nexport enum ButtonType {\n    Long = 'long',\n    Short = 'short',\n}\nexport enum ButtonColor {\n    Default = 'default',\n    Black = 'black',\n    White = 'white',\n}\n\nexport interface GooglePayPaymentDataRequestV2 {\n    apiVersion: number;\n    apiVersionMinor: number;\n    merchantInfo: {\n        authJwt?: string;\n        merchantId?: string;\n        merchantName?: string;\n    };\n    allowedPaymentMethods: [{\n        type: string;\n        parameters: {\n            allowedAuthMethods: string[];\n            allowedCardNetworks: string[];\n            allowPrepaidCards?: boolean;\n            billingAddressRequired?: boolean;\n            billingAddressParameters?: {\n                format?: string;\n                phoneNumberRequired?: boolean;\n            };\n        },\n        tokenizationSpecification?: {\n            type: string;\n            parameters: {\n                gateway: string;\n                gatewayMerchantId?: string;\n                'braintree:apiVersion'?: string;\n                'braintree:clientKey'?: string;\n                'braintree:merchantId'?: string;\n                'braintree:sdkVersion'?: string;\n                'braintree:authorizationFingerprint'?: string;\n                'stripe:version'?: string;\n                'stripe:publishableKey'?: string;\n            };\n        };\n    }];\n    transactionInfo: {\n        currencyCode: string;\n        totalPriceStatus: string;\n        totalPrice?: string;\n        checkoutOption?: string;\n    };\n    emailRequired?: boolean;\n    shippingAddressRequired?: boolean;\n    shippingAddressParameters?: {\n        allowedCountryCodes?: string[];\n        phoneNumberRequired?: boolean;\n    };\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { AddressRequestBody } from '../../../address';\nimport { BillingAddressActionCreator, BillingAddressUpdateRequestBody } from '../../../billing';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n} from '../../../common/error/errors';\nimport { toFormUrlEncoded } from '../../../common/http-request/';\nimport { RemoteCheckoutSynchronizationError } from '../../../remote-checkout/errors';\nimport { ConsignmentActionCreator } from '../../../shipping';\nimport PaymentMethodInvalidError from '../../errors/payment-method-invalid-error';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\n\nimport {\n    ButtonColor,\n    ButtonType,\n    EnvironmentType,\n    GooglePaymentData,\n    GooglePayAddress,\n    GooglePayClient,\n    GooglePayInitializer,\n    GooglePayPaymentDataRequestV2,\n    GooglePaySDK,\n    TokenizePayload\n} from './googlepay';\nimport GooglePayScriptLoader from './googlepay-script-loader';\n\nexport default class GooglePayPaymentProcessor {\n    private _googlePayClient?: GooglePayClient;\n    private _methodId?: string;\n    private _paymentDataRequest?: GooglePayPaymentDataRequestV2;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _googlePayScriptLoader: GooglePayScriptLoader,\n        private _googlePayInitializer: GooglePayInitializer,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _consigmentActionCreator: ConsignmentActionCreator,\n        private _requestSender: RequestSender\n    ) {}\n\n    initialize(methodId: string): Promise<void> {\n        this._methodId = methodId;\n\n        return this._configureWallet();\n    }\n\n    deinitialize(): Promise<void> {\n        return this._googlePayInitializer.teardown();\n    }\n\n    createButton(\n        onClick: (event: Event) => Promise<void>,\n        buttonType: ButtonType = ButtonType.Short,\n        buttonColor: ButtonColor = ButtonColor.Default\n    ): HTMLElement {\n        if (!this._googlePayClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._googlePayClient.createButton({\n            buttonColor,\n            buttonType,\n            onClick,\n        });\n    }\n\n    displayWallet(): Promise<GooglePaymentData> {\n        if (!this._googlePayClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._googlePayClient.loadPaymentData(this._getPaymentDataRequest());\n    }\n\n    handleSuccess(paymentData: GooglePaymentData): Promise<InternalCheckoutSelectors> {\n        return this._postForm(this._googlePayInitializer.parseResponse(paymentData))\n            .then(() => this._updateBillingAddress(paymentData));\n    }\n\n    updateShippingAddress(shippingAddress: GooglePayAddress): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consigmentActionCreator.updateAddress(this._mapGooglePayAddressToShippingAddress(shippingAddress))\n        );\n    }\n\n    private _configureWallet(): Promise<void> {\n        const methodId = this._getMethodId();\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n                const checkout = state.checkout.getCheckout();\n                const hasShippingAddress = !!state.shippingAddress.getShippingAddress();\n\n                if (!paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                const { testMode } = paymentMethod.config;\n\n                return Promise.all([\n                    this._googlePayScriptLoader.load(),\n                    this._googlePayInitializer.initialize(checkout, paymentMethod, hasShippingAddress),\n                ]).then(([googlePay, paymentDataRequest]) => {\n                    this._googlePayClient = this._getGooglePayClient(googlePay, testMode);\n                    this._paymentDataRequest = paymentDataRequest;\n\n                    return this._googlePayClient.isReadyToPay({\n                        allowedPaymentMethods: [\n                            {\n                                type: paymentDataRequest.allowedPaymentMethods[0].type,\n                                parameters: {\n                                    allowedAuthMethods: paymentDataRequest.allowedPaymentMethods[0].parameters.allowedAuthMethods,\n                                    allowedCardNetworks: paymentDataRequest.allowedPaymentMethods[0].parameters.allowedCardNetworks,\n                                },\n                            },\n                        ],\n                        apiVersion: paymentDataRequest.apiVersion,\n                        apiVersionMinor: paymentDataRequest.apiVersionMinor,\n                    }).then(response => {\n                        if (response.result) {\n                            return;\n                        }\n\n                        throw new PaymentMethodInvalidError();\n                    });\n                });\n            });\n    }\n\n    private _getCardInformation(cardInformation: { cardType: string, lastFour: string }) {\n        return {\n            type: cardInformation.cardType,\n            number: cardInformation.lastFour,\n        };\n    }\n\n    private _getPaymentDataRequest(): GooglePayPaymentDataRequestV2 {\n        if (!this._paymentDataRequest) {\n            throw new RemoteCheckoutSynchronizationError();\n        }\n\n        return this._paymentDataRequest;\n    }\n\n    private _getGooglePayClient(google: GooglePaySDK, testMode?: boolean): GooglePayClient {\n        if (testMode === undefined) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const environment: EnvironmentType = testMode ? 'TEST' : 'PRODUCTION';\n\n        return new google.payments.api.PaymentsClient({ environment });\n    }\n\n    private _getMethodId(): string {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._methodId;\n    }\n\n    private _mapGooglePayAddressToBillingAddress(paymentData: GooglePaymentData, id: string): BillingAddressUpdateRequestBody {\n        return {\n            id,\n            firstName: paymentData.paymentMethodData.info.billingAddress.name.split(' ').slice(0, -1).join(' '),\n            lastName: paymentData.paymentMethodData.info.billingAddress.name.split(' ').slice(-1).join(' '),\n            company: paymentData.paymentMethodData.info.billingAddress.companyName,\n            address1: paymentData.paymentMethodData.info.billingAddress.address1,\n            address2: paymentData.paymentMethodData.info.billingAddress.address2 + paymentData.paymentMethodData.info.billingAddress.address3,\n            city: paymentData.paymentMethodData.info.billingAddress.locality,\n            stateOrProvince: paymentData.paymentMethodData.info.billingAddress.administrativeArea,\n            stateOrProvinceCode: paymentData.paymentMethodData.info.billingAddress.administrativeArea,\n            postalCode: paymentData.paymentMethodData.info.billingAddress.postalCode,\n            countryCode: paymentData.paymentMethodData.info.billingAddress.countryCode,\n            phone: paymentData.paymentMethodData.info.billingAddress.phoneNumber,\n            customFields: [],\n            email: paymentData.email,\n        };\n    }\n\n    private _mapGooglePayAddressToShippingAddress(address: GooglePayAddress): AddressRequestBody {\n        return {\n            firstName: address.name.split(' ').slice(0, -1).join(' '),\n            lastName: address.name.split(' ').slice(-1).join(' '),\n            company: address.companyName,\n            address1: address.address1,\n            address2: address.address2 + address.address3,\n            city: address.locality,\n            stateOrProvince: address.administrativeArea,\n            stateOrProvinceCode: address.administrativeArea,\n            postalCode: address.postalCode,\n            countryCode: address.countryCode,\n            phone: address.phoneNumber,\n            customFields: [],\n        };\n    }\n\n    private _postForm(postPaymentData: TokenizePayload): Promise<Response<void>> {\n        const cardInformation = postPaymentData.details;\n\n        return this._requestSender.post('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: toFormUrlEncoded({\n                payment_type: postPaymentData.type,\n                nonce: postPaymentData.nonce,\n                provider: this._getMethodId(),\n                action: 'set_external_checkout',\n                card_information: this._getCardInformation(cardInformation),\n            }),\n        });\n    }\n\n    private _updateBillingAddress(paymentData: GooglePaymentData): Promise<InternalCheckoutSelectors> {\n        const remoteBillingAddress = this._store.getState().billingAddress.getBillingAddress();\n\n        if (!remoteBillingAddress) {\n            throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n        }\n\n        const googlePayAddressMapped = this._mapGooglePayAddressToBillingAddress(paymentData, remoteBillingAddress.id);\n\n        return this._store.dispatch(\n            this._billingAddressActionCreator.updateAddress(googlePayAddressMapped)\n        );\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { GooglePayHostWindow, GooglePaySDK } from './googlepay';\n\nexport default class GooglePayScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: GooglePayHostWindow = window\n    ) {}\n\n    load(): Promise<GooglePaySDK> {\n        return this._scriptLoader\n            .loadScript('https://pay.google.com/gp/p/js/pay.js')\n            .then(() => {\n                if (!this._window.google) {\n                    throw new StandardError();\n                }\n\n                return this._window.google;\n            });\n    }\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../../../billing';\nimport { CheckoutRequestSender, CheckoutStore } from '../../../checkout';\nimport { ConsignmentActionCreator, ConsignmentRequestSender } from '../../../shipping';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport PaymentMethodRequestSender from '../../payment-method-request-sender';\n\nimport { GooglePayInitializer } from './googlepay';\nimport GooglePayPaymentProcessor from './googlepay-payment-processor';\nimport GooglePayScriptLoader from './googlepay-script-loader';\n\nexport default function createGooglePayPaymentProcessor(store: CheckoutStore, initializer: GooglePayInitializer): GooglePayPaymentProcessor {\n    const requestSender = createRequestSender();\n    const scriptLoader = getScriptLoader();\n\n    return new GooglePayPaymentProcessor(\n        store,\n        new PaymentMethodActionCreator(\n            new PaymentMethodRequestSender(requestSender)\n        ),\n        new GooglePayScriptLoader(scriptLoader),\n        initializer,\n        new BillingAddressActionCreator(\n            new BillingAddressRequestSender(requestSender)\n        ),\n        new ConsignmentActionCreator(\n            new ConsignmentRequestSender(requestSender),\n            new CheckoutRequestSender(requestSender)\n        ),\n        requestSender\n    );\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\n\n/**\n * @todo Convert this file into TypeScript properly\n */\nexport default class RemoteCheckoutRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    initializeBilling(methodName: string, params?: { referenceId: string }, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/billing`;\n\n        return this._requestSender.get(url, { params, timeout });\n    }\n\n    initializeShipping(methodName: string, params?: { referenceId: string }, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/shipping`;\n\n        return this._requestSender.get(url, { params, timeout });\n    }\n\n    initializePayment(methodName: string, params?: InitializePaymentOptions, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/payment`;\n\n        return this._requestSender.get(url, { params, timeout });\n    }\n\n    loadSettings(methodName: string, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/settings`;\n\n        return this._requestSender.get(url, { timeout });\n    }\n\n    signOut(methodName: string, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/signout`;\n\n        return this._requestSender.get(url, { timeout });\n    }\n\n    generateToken({ timeout }: RequestOptions = {}): Promise<Response> {\n        const url = '/remote-checkout-token';\n\n        return this._requestSender.get(url, { timeout });\n    }\n\n    trackAuthorizationEvent({ timeout }: RequestOptions = {}): Promise<Response> {\n        const url = '/remote-checkout/events/shopper-checkout-service-provider-authorization-requested';\n\n        return this._requestSender.post(url, { timeout });\n    }\n}\n\nexport interface InitializePaymentOptions {\n    authorizationToken?: string;\n    customerMessage?: string;\n    referenceId?: string;\n    useStoreCredit?: boolean;\n}\n","import { createAction, createErrorAction, Action } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport { RemoteCheckoutActionType } from './remote-checkout-actions';\nimport RemoteCheckoutRequestSender, { InitializePaymentOptions } from './remote-checkout-request-sender';\nimport { RemoteCheckoutStateData } from './remote-checkout-state';\n\n/**\n * @todo Convert this file into TypeScript properly\n * i.e.: Action<T>\n */\nexport default class RemoteCheckoutActionCreator {\n    constructor(\n        private _remoteCheckoutRequestSender: RemoteCheckoutRequestSender\n    ) {}\n\n    initializeBilling(methodId: string, params?: { referenceId: string }, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.InitializeRemoteBillingRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.initializeBilling(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(createAction(RemoteCheckoutActionType.InitializeRemoteBillingSucceeded, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.InitializeRemoteBillingFailed, response, { methodId }));\n                });\n        });\n    }\n\n    initializeShipping(methodId: string, params?: { referenceId: string }, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.InitializeRemoteShippingRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.initializeShipping(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(createAction(RemoteCheckoutActionType.InitializeRemoteShippingSucceeded, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.InitializeRemoteShippingFailed, response, { methodId }));\n                });\n        });\n    }\n\n    initializePayment(methodId: string, params?: InitializePaymentOptions, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.InitializeRemotePaymentRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.initializePayment(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(createAction(RemoteCheckoutActionType.InitializeRemotePaymentSucceeded, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.InitializeRemotePaymentFailed, response, { methodId }));\n                });\n        });\n    }\n\n    loadSettings(methodId: string, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.LoadRemoteSettingsRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.loadSettings(methodId, options)\n                .then(({ body }) => {\n                    observer.next(createAction(RemoteCheckoutActionType.LoadRemoteSettingsSucceeded, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.LoadRemoteSettingsFailed, response, { methodId }));\n                });\n        });\n    }\n\n    signOut(methodId: string, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.SignOutRemoteCustomerRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.signOut(methodId, options)\n                .then(() => {\n                    observer.next(createAction(RemoteCheckoutActionType.SignOutRemoteCustomerSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.SignOutRemoteCustomerFailed, response, { methodId }));\n                });\n        });\n    }\n\n    updateCheckout<K extends keyof RemoteCheckoutStateData>(methodId: K, data: Partial<RemoteCheckoutStateData[K]>): Action {\n        return createAction(RemoteCheckoutActionType.UpdateRemoteCheckout, data, { methodId });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport PaymentMethod from '../../payment-method';\n\nimport AmazonPayWindow from './amazon-pay-window';\n\nexport default class AmazonPayScriptLoader {\n    private _window: AmazonPayWindow;\n\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    loadWidget(method: PaymentMethod, onPaymentReady?: () => void): Promise<Event> {\n        const {\n            config: { merchantId, testMode },\n            initializationData: { region = 'us' } = {},\n        } = method;\n\n        const url = 'https://' +\n            (region.toLowerCase() !== 'us' ? 'static-eu.' : 'static-na.') +\n            'payments-amazon.com/OffAmazonPayments/' +\n            `${region.toLowerCase()}/` +\n            (testMode ? 'sandbox/' : '') +\n            (region.toLowerCase() !== 'us' ? 'lpa/' : '') +\n            `js/Widgets.js?sellerId=${merchantId}`;\n\n        this._configureWidget(method, onPaymentReady);\n\n        return this._scriptLoader.loadScript(url);\n    }\n\n    private _configureWidget(method: PaymentMethod, onPaymentReady?: () => void): void {\n        const onLoginReady = () => {\n            if (!this._window.amazon) {\n                return;\n            }\n\n            this._window.amazon.Login.setClientId(method.initializationData.clientId);\n            this._window.amazon.Login.setUseCookie(true);\n        };\n\n        if (this._window.amazon && this._window.amazon.Login) {\n            onLoginReady();\n        } else {\n            this._window.onAmazonLoginReady = onLoginReady;\n        }\n\n        if (this._window.OffAmazonPayments && onPaymentReady) {\n            onPaymentReady();\n        } else {\n            this._window.onAmazonPaymentsReady = onPaymentReady;\n        }\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { VisaCheckoutHostWindow, VisaCheckoutSDK } from './visacheckout';\n\nexport default class VisaCheckoutScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: VisaCheckoutHostWindow = window\n    ) {}\n\n    load(testMode?: boolean): Promise<VisaCheckoutSDK> {\n        return this._scriptLoader\n            .loadScript(`//${testMode ? 'sandbox-' : ''}assets.secure.checkout.visa.com/checkout-widget/resources/js/integration/v1/sdk.js`)\n            .then(() => {\n                if (!this._window.V) {\n                    throw new StandardError();\n                }\n\n                return this._window.V;\n            });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { ChasePayHostWindow, JPMC } from '../chasepay/chasepay';\n\nexport default class ChasePayScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        public _window: ChasePayHostWindow = window\n    ) {}\n\n    load(testMode?: boolean): Promise<JPMC> {\n        return this._scriptLoader\n            .loadScript(`//pwc${testMode ? 'psb' : ''}.chase.com/pwc/checkout/js/v20170521/list.action?type=raw&applId=PWC&channelId=CWC&version=1`)\n            .then(() => {\n                if (!this._window.JPMC) {\n                    throw new StandardError();\n                }\n\n                return this._window.JPMC;\n            });\n    }\n}\n","import Logger from './logger';\n\nexport default class ConsoleLogger implements Logger {\n    constructor(\n        private _console?: Console\n    ) {}\n\n    log(...messages: any[]): void {\n        this._logToConsole('log', ...messages);\n    }\n\n    info(...messages: any[]): void {\n        this._logToConsole('info', ...messages);\n    }\n\n    warn(...messages: any[]): void {\n        this._logToConsole('warn', ...messages);\n    }\n\n    error(...messages: any[]): void {\n        this._logToConsole('error', ...messages);\n    }\n\n    debug(...messages: any[]): void {\n        this._logToConsole('debug', ...messages);\n    }\n\n    private _logToConsole(type: keyof Console, ...messages: any[]): void {\n        if (!this._console || !this._console[type]) {\n            return;\n        }\n\n        this._console[type].call(this._console, ...messages);\n    }\n}\n","import Logger from './logger';\n\nexport default class NoopLogger implements Logger {\n    log(): void {}\n\n    info(): void {}\n\n    warn(): void {}\n\n    error(): void {}\n\n    debug(): void {}\n}\n","import { getEnvironment } from '../utility';\n\nimport createLogger from './create-logger';\nimport Logger from './logger';\n\nconst logger = createLogger(getEnvironment() !== 'test');\n\nexport default function getDefaultLogger(): Logger {\n    return logger;\n}\n","import ConsoleLogger from './console-logger';\nimport Logger from './logger';\nimport NoopLogger from './noop-logger';\n\nexport default function createLogger(isEnabled = true): Logger {\n    if (!isEnabled) {\n        return new NoopLogger();\n    }\n\n    return new ConsoleLogger(console);\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\n\nimport { Address, LegacyAddress } from '../../../address';\nimport { toFormUrlEncoded } from '../../../common/http-request';\n\nimport { BraintreeDataCollector } from './braintree';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\nimport {\n    VisaCheckoutAddress,\n    VisaCheckoutInitOptions,\n    VisaCheckoutPaymentSuccessPayload,\n    VisaCheckoutTokenizedPayload,\n} from './visacheckout';\n\nexport default class BraintreeVisaCheckoutPaymentProcessor {\n    constructor(\n        private _braintreeSDKCreator: BraintreeSDKCreator,\n        private _requestSender: RequestSender\n    ) {}\n\n    initialize(clientToken: string, options: VisaCheckoutInitializeOptions): Promise<VisaCheckoutInitOptions> {\n        this._braintreeSDKCreator.initialize(clientToken);\n\n        return this._braintreeSDKCreator.getVisaCheckout()\n            .then(visaCheckout => visaCheckout.createInitOptions({\n                settings: {\n                    locale: options.locale,\n                    shipping: {\n                        collectShipping: options.collectShipping,\n                    },\n                },\n                paymentRequest: {\n                    currencyCode: options.currencyCode,\n                    subtotal: String(options.subtotal),\n                },\n            }));\n    }\n\n    deinitialize(): Promise<void> {\n        return this._braintreeSDKCreator.teardown();\n    }\n\n    handleSuccess(payment: VisaCheckoutPaymentSuccessPayload, shipping?: Address, billing?: Address): Promise<any> {\n        return this._braintreeSDKCreator.getVisaCheckout()\n            .then(braintreeVisaCheckout => Promise.all([\n                braintreeVisaCheckout.tokenize(payment),\n                this._braintreeSDKCreator.getDataCollector(),\n            ])\n            .then(([tokenizedPayload, dataCollector]) => {\n                const {\n                    shippingAddress = this._toVisaCheckoutAddress(shipping),\n                    billingAddress = this._toVisaCheckoutAddress(billing),\n                } = tokenizedPayload;\n\n                return this._postForm({\n                    ...tokenizedPayload,\n                    shippingAddress,\n                    billingAddress,\n                }, dataCollector);\n            }));\n    }\n\n    private _postForm(paymentData: VisaCheckoutTokenizedPayload, dataCollector: BraintreeDataCollector) {\n        const {\n            userData,\n            billingAddress,\n            shippingAddress,\n            details: cardInformation,\n        } = paymentData;\n        const { userEmail } = userData;\n        const { deviceData } = dataCollector;\n\n        return this._requestSender.post('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: toFormUrlEncoded({\n                payment_type: paymentData.type,\n                nonce: paymentData.nonce,\n                provider: 'braintreevisacheckout',\n                action: 'set_external_checkout',\n                device_data: deviceData,\n                card_information: this._getCardInformation(cardInformation),\n                billing_address: this._getAddress(userEmail, billingAddress),\n                shipping_address: this._getAddress(userEmail, shippingAddress),\n            }),\n        });\n    }\n\n    private _toVisaCheckoutAddress(address?: Address): VisaCheckoutAddress {\n        if (!address) {\n            return {};\n        }\n\n        return {\n            firstName: address.firstName,\n            lastName: address.lastName,\n            phoneNumber: address.phone,\n            streetAddress: address.address1,\n            extendedAddress: address.address2,\n            locality: address.city,\n            region: address.stateOrProvinceCode,\n            countryCode: address.countryCode,\n            postalCode: address.postalCode,\n        };\n    }\n\n    private _getAddress(email: string, address: VisaCheckoutAddress = {}): Partial<LegacyAddress> {\n        return {\n            email,\n            first_name: address.firstName,\n            last_name: address.lastName,\n            phone_number: address.phoneNumber,\n            address_line_1: address.streetAddress,\n            address_line_2: address.extendedAddress,\n            city: address.locality,\n            state: address.region,\n            country_code: address.countryCode,\n            postal_code: address.postalCode,\n        };\n    }\n\n    private _getCardInformation(cardInformation: { cardType: string, lastTwo: string }) {\n        return {\n            type: cardInformation.cardType,\n            number: cardInformation.lastTwo,\n        };\n    }\n}\n\nexport interface VisaCheckoutInitializeOptions {\n    locale?: string;\n    collectShipping?: boolean;\n    subtotal?: number;\n    currencyCode?: string;\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport BraintreeScriptLoader from './braintree-script-loader';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\nimport BraintreeVisaCheckoutPaymentProcessor from './braintree-visacheckout-payment-processor';\n\nexport default function createBraintreeVisaCheckoutPaymentProcessor(\n    scriptLoader: ScriptLoader,\n    requestSender: RequestSender\n) {\n    const braintreeScriptLoader = new BraintreeScriptLoader(scriptLoader);\n    const braintreeSDKCreator = new BraintreeSDKCreator(braintreeScriptLoader);\n\n    return new BraintreeVisaCheckoutPaymentProcessor(braintreeSDKCreator, requestSender);\n}\n"],"sourceRoot":""}