{"version":3,"sources":["webpack://checkoutKit/webpack/bootstrap","webpack://checkoutKit/external \"tslib\"","webpack://checkoutKit/external \"@bigcommerce/data-store\"","webpack://checkoutKit/external \"lodash\"","webpack://checkoutKit/external \"rxjs\"","webpack://checkoutKit/./src/shipping/consignment-actions.ts","webpack://checkoutKit/./src/checkout/checkout-actions.ts","webpack://checkoutKit/./src/common/error/errors/missing-data-error.ts","webpack://checkoutKit/./src/customer/customer-strategy-actions.ts","webpack://checkoutKit/./src/payment/payment-strategy-actions.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-actions.ts","webpack://checkoutKit/./src/coupon/coupon-actions.ts","webpack://checkoutKit/./src/order/order-actions.ts","webpack://checkoutKit/./src/common/error/errors/standard-error.ts","webpack://checkoutKit/./src/billing/billing-address-actions.ts","webpack://checkoutKit/./src/coupon/gift-certificate-actions.ts","webpack://checkoutKit/./src/payment/payment-method-actions.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-actions.ts","webpack://checkoutKit/./src/payment/instrument/instrument-actions.ts","webpack://checkoutKit/external \"rxjs/operators\"","webpack://checkoutKit/./src/embedded-checkout/embedded-checkout-events.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-actions.ts","webpack://checkoutKit/./src/common/error/error-action-creator.ts","webpack://checkoutKit/./src/geography/country-action-creator.ts","webpack://checkoutKit/./src/geography/country-request-sender.ts","webpack://checkoutKit/./src/payment/payment-strategy-type.ts","webpack://checkoutKit/./src/order/errors/order-finalization-not-required-error.ts","webpack://checkoutKit/./src/payment/payment-strategy-action-creator.ts","webpack://checkoutKit/./src/cart/errors/cart-changed-error.ts","webpack://checkoutKit/./src/checkout/checkout-validator.ts","webpack://checkoutKit/./src/payment/is-vaulted-instrument.ts","webpack://checkoutKit/./src/payment/payment-action-creator.ts","webpack://checkoutKit/./src/payment/payment-request-sender.ts","webpack://checkoutKit/./src/payment/payment-strategy-registry.ts","webpack://checkoutKit/./src/payment/errors/payment-argument-invalid-error.ts","webpack://checkoutKit/./src/payment/strategies/afterpay/afterpay-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/afterpay/afterpay-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/amazon-pay/amazon-pay-payment-strategy.ts","webpack://checkoutKit/./src/common/overlay/overlay.ts","webpack://checkoutKit/./src/payment/errors/payment-method-cancelled-error.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-payment-processor.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-credit-card-payment-strategy.ts","webpack://checkoutKit/./src/payment/is-credit-card-like.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-paypal-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/chasepay/chasepay.ts","webpack://checkoutKit/./src/payment/strategies/braintree/is-braintree-error.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-visacheckout-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/chasepay/chasepay-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/square/square-form.ts","webpack://checkoutKit/./src/payment/strategies/credit-card/credit-card-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/klarna/klarna-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/klarna/klarna-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/legacy/legacy-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/masterpass/masterpass-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/no-payment/no-payment-data-required-strategy.ts","webpack://checkoutKit/./src/payment/strategies/offline/offline-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/offsite/offsite-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/paypal/paypal-pro-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/paypal/paypal-express-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/sage-pay/sage-pay-payment-strategy.ts","webpack://checkoutKit/./src/common/error/errors/unsupported-browser-error.ts","webpack://checkoutKit/./src/payment/strategies/square/square-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/square/square-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/wepay/wepay-risk-client.ts","webpack://checkoutKit/./src/payment/strategies/wepay/wepay-payment-strategy.ts","webpack://checkoutKit/./src/payment/create-payment-strategy-registry.ts","webpack://checkoutKit/./src/payment/strategies/braintree/create-braintree-payment-processor.ts","webpack://checkoutKit/./src/payment/instrument/instrument-action-creator.ts","webpack://checkoutKit/./src/common/date-time/add-minutes.ts","webpack://checkoutKit/./src/common/date-time/is-future.ts","webpack://checkoutKit/./src/payment/instrument/instrument-response-transformer.ts","webpack://checkoutKit/./src/payment/instrument/instrument-request-sender.ts","webpack://checkoutKit/./src/checkout/checkout-store-selector.ts","webpack://checkoutKit/./src/checkout/checkout-store-error-selector.ts","webpack://checkoutKit/./src/checkout/checkout-store-status-selector.ts","webpack://checkoutKit/./src/checkout/create-checkout-selectors.ts","webpack://checkoutKit/./src/common/error/error-message-transformer.ts","webpack://checkoutKit/./src/checkout/checkout-service.ts","webpack://checkoutKit/./src/checkout/create-checkout-service-error-transformer.ts","webpack://checkoutKit/./src/checkout/create-checkout-service.ts","webpack://checkoutKit/./src/payment/create-payment-client.ts","webpack://checkoutKit/./src/checkout/index.ts","webpack://checkoutKit/./src/common/error/errors/request-error.ts","webpack://checkoutKit/./src/config/config-actions.ts","webpack://checkoutKit/./src/common/selector/selector-decorator.ts","webpack://checkoutKit/./src/common/http-request/content-type.ts","webpack://checkoutKit/./src/geography/country-actions.ts","webpack://checkoutKit/./src/shipping/shipping-country-actions.ts","webpack://checkoutKit/external \"@bigcommerce/request-sender\"","webpack://checkoutKit/./src/payment/payment-status-types.ts","webpack://checkoutKit/external \"@bigcommerce/script-loader\"","webpack://checkoutKit/./src/payment/payment-strategy-state.ts","webpack://checkoutKit/./src/common/error/clear-error-reducer.ts","webpack://checkoutKit/./src/checkout/checkout-default-includes.ts","webpack://checkoutKit/./src/common/utility/is-equal.ts","webpack://checkoutKit/./src/customer/customer-actions.ts","webpack://checkoutKit/./src/payment/payment-actions.ts","webpack://checkoutKit/./src/common/error/errors/invalid-argument-error.ts","webpack://checkoutKit/./src/payment/payment-method-types.ts","webpack://checkoutKit/./src/cart/amount-transformer.ts","webpack://checkoutKit/./src/embedded-checkout/is-iframe-event.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-error-selector.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-status-selector.ts","webpack://checkoutKit/./src/checkout-buttons/create-checkout-button-selectors.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-initializer.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/checkout-button-method-type.ts","webpack://checkoutKit/./src/common/dom/is-element-id.ts","webpack://checkoutKit/./src/common/dom/set-unique-element-id.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-strategy-action-creator.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/braintree/braintree-paypal-button-strategy.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/googlepay/googlepay-button-strategy.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/masterpass/masterpass-button-strategy.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/paypal/paypal-button-strategy.ts","webpack://checkoutKit/./src/checkout-buttons/create-checkout-button-initializer.ts","webpack://checkoutKit/./src/checkout-buttons/create-checkout-button-registry.ts","webpack://checkoutKit/./src/checkout-buttons/index.ts","webpack://checkoutKit/./src/checkout/checkout-params.ts","webpack://checkoutKit/external \"@bigcommerce/form-poster\"","webpack://checkoutKit/./src/cart/map-to-internal-line-items.ts","webpack://checkoutKit/external \"local-storage-fallback\"","webpack://checkoutKit/./src/common/error/throw-error-action.ts","webpack://checkoutKit/./src/payment/errors/payment-method-invalid-error.ts","webpack://checkoutKit/./src/common/utility/cache-key-resolver.ts","webpack://checkoutKit/./src/common/utility/bind-decorator.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-event-poster.ts","webpack://checkoutKit/./src/checkout/create-action-transformer.ts","webpack://checkoutKit/./src/checkout/checkout-selector.ts","webpack://checkoutKit/./src/checkout/checkout-reducer.ts","webpack://checkoutKit/./src/cart/map-gift-certificate-to-internal-line-item.ts","webpack://checkoutKit/./src/cart/map-to-internal-line-item.ts","webpack://checkoutKit/./src/billing/billing-address-selector.ts","webpack://checkoutKit/./src/config/config-selector.ts","webpack://checkoutKit/./src/form/form-selector.ts","webpack://checkoutKit/./src/geography/country-selector.ts","webpack://checkoutKit/./src/payment/payment-selector.ts","webpack://checkoutKit/./src/payment/payment-method-selector.ts","webpack://checkoutKit/./src/payment/payment-strategy-selector.ts","webpack://checkoutKit/./src/payment/instrument/instrument-selector.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-selector.ts","webpack://checkoutKit/./src/checkout/create-internal-checkout-selectors.ts","webpack://checkoutKit/./src/common/utility/set-prototype-of.ts","webpack://checkoutKit/./src/common/utility/is-private.ts","webpack://checkoutKit/./src/common/utility/omit-deep.ts","webpack://checkoutKit/./src/common/error/error-actions.ts","webpack://checkoutKit/./src/payment/payment-method-action-creator.ts","webpack://checkoutKit/./src/payment/payment-method-request-sender.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-content/embedded-content-events.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-event-listener.ts","webpack://checkoutKit/./src/common/http-request/internal-api-headers.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-selector.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-reducer.ts","webpack://checkoutKit/./src/embedded-checkout/errors/not-embeddable-error.ts","webpack://checkoutKit/./src/common/storage/browser-storage.ts","webpack://checkoutKit/./src/embedded-checkout/errors/invalid-login-token-error.ts","webpack://checkoutKit/./src/embedded-checkout/embedded-checkout.ts","webpack://checkoutKit/./src/embedded-checkout/loading-indicator.ts","webpack://checkoutKit/./src/embedded-checkout/resizable-iframe-creator.ts","webpack://checkoutKit/./src/embedded-checkout/embed-checkout.ts","webpack://checkoutKit/./src/embedded-checkout/index.ts","webpack://checkoutKit/./src/cart/map-to-internal-cart.ts","webpack://checkoutKit/./src/promotion/map-to-discount-notifications.ts","webpack://checkoutKit/./src/checkout/checkout-action-creator.ts","webpack://checkoutKit/./src/shipping/consignment-action-creator.ts","webpack://checkoutKit/./src/shipping/consignment-request-sender.ts","webpack://checkoutKit/./src/shipping/map-to-internal-shipping-option.ts","webpack://checkoutKit/./src/common/error/errors/unrecoverable-error.ts","webpack://checkoutKit/./src/common/error/errors/map-from-internal-error-response.ts","webpack://checkoutKit/./src/common/error/errors/map-from-payment-error-response.ts","webpack://checkoutKit/./src/common/error/request-error-factory.ts","webpack://checkoutKit/./src/common/error/errors/map-from-storefront-error-response.ts","webpack://checkoutKit/./src/billing/billing-address-reducer.ts","webpack://checkoutKit/./src/config/config-reducer.ts","webpack://checkoutKit/./src/geography/country-reducer.ts","webpack://checkoutKit/./src/payment/payment-reducer.ts","webpack://checkoutKit/./src/payment/payment-method-reducer.ts","webpack://checkoutKit/./src/payment/payment-strategy-reducer.ts","webpack://checkoutKit/./src/payment/instrument/instrument-reducer.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-reducer.ts","webpack://checkoutKit/./src/checkout/create-checkout-store.ts","webpack://checkoutKit/./src/common/error/create-request-error-factory.ts","webpack://checkoutKit/./src/checkout/create-checkout-store-reducer.ts","webpack://checkoutKit/./src/checkout/errors/checkout-not-available-error.ts","webpack://checkoutKit/./src/checkout/checkout-request-sender.ts","webpack://checkoutKit/./src/address/is-address-equal.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-sdk-creator.ts","webpack://checkoutKit/./src/coupon/map-to-internal-coupon.ts","webpack://checkoutKit/external \"iframe-resizer\"","webpack://checkoutKit/./src/address/map-to-internal-address.ts","webpack://checkoutKit/./src/billing/is-billing-address-like.ts","webpack://checkoutKit/./src/common/http-request/join-includes.ts","webpack://checkoutKit/./src/common/error/errors/not-initialized-error.ts","webpack://checkoutKit/./src/common/url/parse-url.ts","webpack://checkoutKit/./src/common/action/cachable-action-decorator.ts","webpack://checkoutKit/./src/common/action/is-action-options.ts","webpack://checkoutKit/./src/common/action/cache-action.ts","webpack://checkoutKit/./src/common/utility/create-freeze-proxy.ts","webpack://checkoutKit/./src/customer/customer-strategy-action-creator.ts","webpack://checkoutKit/./src/customer/customer-action-creator.ts","webpack://checkoutKit/./src/customer/customer-request-sender.ts","webpack://checkoutKit/./src/cart/cart-selector.ts","webpack://checkoutKit/./src/coupon/coupon-selector.ts","webpack://checkoutKit/./src/customer/customer-selector.ts","webpack://checkoutKit/./src/customer/customer-strategy-selector.ts","webpack://checkoutKit/./src/coupon/gift-certificate-selector.ts","webpack://checkoutKit/./src/shipping/shipping-address-selector.ts","webpack://checkoutKit/./src/shipping/shipping-country-selector.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-selector.ts","webpack://checkoutKit/./src/shipping/consignment-selector.ts","webpack://checkoutKit/./src/order/order-selector.ts","webpack://checkoutKit/./src/cart/cart-reducer.ts","webpack://checkoutKit/./src/shipping/consignment-reducer.ts","webpack://checkoutKit/./src/coupon/coupon-reducer.ts","webpack://checkoutKit/./src/customer/customer-reducer.ts","webpack://checkoutKit/./src/coupon/gift-certificate-reducer.ts","webpack://checkoutKit/./src/order/order-reducer.ts","webpack://checkoutKit/./src/common/utility/merge-or-push.ts","webpack://checkoutKit/./src/shipping/shipping-country-reducer.ts","webpack://checkoutKit/./src/customer/map-to-internal-customer.ts","webpack://checkoutKit/./src/coupon/map-to-internal-gift-certificate.ts","webpack://checkoutKit/./src/order/map-to-internal-order.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-state.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-reducer.ts","webpack://checkoutKit/./src/customer/customer-strategy-state.ts","webpack://checkoutKit/./src/customer/customer-strategy-reducer.ts","webpack://checkoutKit/./src/payment/strategies/masterpass/get-callback-url.ts","webpack://checkoutKit/./src/common/utility/omit-private.ts","webpack://checkoutKit/./src/common/utility/get-environment.ts","webpack://checkoutKit/./src/order/order-request-sender.ts","webpack://checkoutKit/./src/order/order-action-creator.ts","webpack://checkoutKit/./src/cart/cart-comparator.ts","webpack://checkoutKit/./src/common/utility/to-single-line.ts","webpack://checkoutKit/./src/coupon/coupon-action-creator.ts","webpack://checkoutKit/./src/coupon/coupon-request-sender.ts","webpack://checkoutKit/./src/coupon/gift-certificate-action-creator.ts","webpack://checkoutKit/./src/coupon/gift-certificate-request-sender.ts","webpack://checkoutKit/./src/common/utility/cancellable-promise.ts","webpack://checkoutKit/./src/address/is-internal-address-equal.ts","webpack://checkoutKit/./src/address/map-from-internal-address.ts","webpack://checkoutKit/./src/shipping/shipping-country-action-creator.ts","webpack://checkoutKit/./src/shipping/shipping-country-request-sender.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-action-creator.ts","webpack://checkoutKit/./src/common/error/errors/not-implemented-error.ts","webpack://checkoutKit/./src/customer/strategies/amazon/amazon-pay-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/braintree/braintree-visacheckout-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/chasepay/chasepay-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/default/default-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/googlepay/googlepay-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/masterpass/masterpass-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/square/square-customer-strategy.ts","webpack://checkoutKit/./src/customer/create-customer-strategy-registry.ts","webpack://checkoutKit/./src/shipping/strategies/amazon/amazon-pay-shipping-strategy.ts","webpack://checkoutKit/./src/shipping/strategies/default/default-shipping-strategy.ts","webpack://checkoutKit/./src/shipping/create-shipping-strategy-registry.ts","webpack://checkoutKit/external \"@bigcommerce/bigpay-client\"","webpack://checkoutKit/external \"messageformat\"","webpack://checkoutKit/./src/common/error/errors/timeout-error.ts","webpack://checkoutKit/./src/config/config-action-creator.ts","webpack://checkoutKit/./src/config/config-request-sender.ts","webpack://checkoutKit/./src/billing/billing-address-action-creator.ts","webpack://checkoutKit/./src/billing/billing-address-request-sender.ts","webpack://checkoutKit/./src/common/registry/registry.ts","webpack://checkoutKit/./src/common/http-request/to-form-url-encoded.ts","webpack://checkoutKit/./src/payment/strategies/masterpass/masterpass-script-loader.ts","webpack://checkoutKit/./src/remote-checkout/errors/remote-checkout-synchronization-error.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-braintree-initializer.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-stripe-initializer.ts","webpack://checkoutKit/./src/payment/strategies/paypal/paypal-script-loader.ts","webpack://checkoutKit/external \"iframe-resizer/js/iframeResizer.contentWindow\"","webpack://checkoutKit/./src/embedded-checkout/iframe-content/handle-frame-loaded-event.ts","webpack://checkoutKit/./src/common/error/errors/custom-error.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-content/iframe-embedded-checkout-messenger.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-content/noop-embedded-checkout-messenger.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-content/create-embedded-checkout-messenger.ts","webpack://checkoutKit/./src/locale/language-service.ts","webpack://checkoutKit/./src/locale/create-language-service.ts","webpack://checkoutKit/./src/currency/currency-formatter.ts","webpack://checkoutKit/./src/currency/currency-service.ts","webpack://checkoutKit/./src/currency/create-currency-service.ts","webpack://checkoutKit/./src/index.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-payment-processor.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/create-googlepay-payment-processor.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-request-sender.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-action-creator.ts","webpack://checkoutKit/./src/payment/strategies/amazon-pay/amazon-pay-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/braintree/visacheckout-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/chasepay/chasepay-script-loader.ts","webpack://checkoutKit/./src/common/log/console-logger.ts","webpack://checkoutKit/./src/common/log/noop-logger.ts","webpack://checkoutKit/./src/common/log/get-default-logger.ts","webpack://checkoutKit/./src/common/log/create-logger.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-visacheckout-payment-processor.ts","webpack://checkoutKit/./src/payment/strategies/braintree/create-braintree-visacheckout-payment-processor.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","ConsignmentActionType","__webpack_exports__","CheckoutActionType","MissingDataErrorType","MissingDataError","_super","subtype","_this","this","type","MissingBillingAddress","MissingCart","MissingConsignments","MissingCheckout","MissingCheckoutConfig","MissingOrderConfig","MissingOrder","MissingOrderId","MissingPayment","MissingPaymentMethod","getErrorMessage","tslib__WEBPACK_IMPORTED_MODULE_0__","_standard_error__WEBPACK_IMPORTED_MODULE_1__","CustomerStrategyActionType","PaymentStrategyActionType","ShippingStrategyActionType","CouponActionType","OrderActionType","StandardError","message","_utility__WEBPACK_IMPORTED_MODULE_1__","_newTarget","Error","captureStackTrace","stack","BillingAddressActionType","GiftCertificateActionType","PaymentMethodActionType","CheckoutButtonActionType","InstrumentActionType","EmbeddedCheckoutEventType","RemoteCheckoutActionType","ErrorActionCreator","clearError","error","error_actions","ClearError","payload","CountryActionCreator","_countryRequestSender","loadCountries","options","external_rxjs_","observer","next","data_store_","country_actions","LoadCountriesRequested","then","response","LoadCountriesSucceeded","body","data","complete","catch","LoadCountriesFailed","CountryRequestSender","_requestSender","_config","_a","timeout","headers","Accept-Language","locale","PaymentStrategyType","OrderFinalizationNotRequiredError","external_tslib_","standard_error","payment_strategy_type","PaymentStrategyActionCreator","_strategyRegistry","_orderActionCreator","execute","store","strategy","state","getState","payment","useStoreCredit","meta","methodId","isPaymentDataRequired","method","paymentMethods","getPaymentMethod","gatewayId","missing_data_error","getByMethod","NO_PAYMENT_DATA_REQUIRED","payment_strategy_actions","ExecuteRequested","undefined","ExecuteSucceeded","ExecuteFailed","finalize","FinalizeRequested","_loadOrderPaymentsIfNeeded","getPaymentId","order_finalization_not_required_error","providerId","id","gateway","FinalizeSucceeded","pipe","operators_","throw_error_action","FinalizeFailed","initialize","paymentStrategies","isInitialized","InitializeRequested","InitializeSucceeded","InitializeFailed","deinitialize","DeinitializeRequested","DeinitializeSucceeded","DeinitializeFailed","widgetInteraction","WidgetInteractionStarted","WidgetInteractionFinished","WidgetInteractionFailed","checkout","getCheckout","orderId","loadOrderPayments","CartChangedError","CheckoutValidator","_checkoutRequestSender","validate","loadCheckout","comparator","cart_comparator","grandTotal","_compareCoupons","coupons","_compareGiftCertificates","giftCertificates","isEqual","cart","cart_changed_error","couponsA","couponsB","external_lodash_","giftCertificatesA","giftCertificatesB","isVaultedInstrument","instrument","Boolean","instrumentId","PaymentActionCreator","_paymentRequestSender","submitPayment","payment_actions","SubmitPaymentRequested","_getPaymentRequestBody","loadCurrentOrder","SubmitPaymentSucceeded","SubmitPaymentFailed","initializeOffsitePayment","InitializeOffsitePaymentRequested","InitializeOffsitePaymentSucceeded","InitializeOffsitePaymentFailed","billingAddress","getBillingAddress","customer","getCustomer","order","getOrder","paymentMethod","_getPaymentMethod","shippingAddress","getShippingAddress","consignments","getConsignments","shippingOption","getShippingOption","storeConfig","config","getStoreConfig","contextConfig","getContextConfig","instrumentMeta","instruments","getInstrumentsMeta","paymentMeta","getPaymentMethodsMeta","orderMeta","getOrderMeta","internalCustomer","map_to_internal_customer","authToken","paymentData","getPaymentToken","vaultAccessToken","map_to_internal_address","map_to_internal_shipping_option","map_to_internal_cart","map_to_internal_order","quoteMeta","request","geoCountryCode","source","storeProfile","paymentMethodSelector","initializationData","PaymentRequestSender","_client","Promise","resolve","reject","_transformResponse","status","statusText","PaymentStrategyRegistry","_store","token","_getToken","cacheToken","_hasFactoryForMethod","payment_method_types","OFFLINE","_isLegacyMethod","LEGACY","OFFSITE","CREDIT_CARD","_hasFactory","clientSidePaymentProviders","paymentSettings","registry_registry","PaymentArgumentInvalidError","invalidFields","join","invalid_argument_error","AfterpayPaymentStrategy","_checkoutValidator","_paymentActionCreator","_paymentMethodActionCreator","_remoteCheckoutActionCreator","_afterpayScriptLoader","storeCountryName","storeCountry","load","_mapCountryToISO2","afterpaySdk","_afterpaySdk","paymentId","payment_argument_invalid_error","dispatch","initializePayment","loadPaymentMethod","_displayModal","loadSettings","afterpay","remoteCheckout","settings","not_initialized_error","PaymentNotInitialized","orderPayload","paymentPayload","nonce","submitOrder","countryName","clientToken","countryCode","display","SCRIPTS_DEFAULT","SCRIPTS_US","AfterpayScriptLoader","_scriptLoader","testMode","scriptURI","_getScriptURI","loadScript","window","AfterPay","AmazonPayPaymentStrategy","_billingAddressActionCreator","_window","amazonOptions","amazon","_walletOptions","_paymentMethod","loadWidget","_createWallet","referenceId","_getOrderReferenceId","_b","request_error","_getMerchantId","merchantId","container","onError","onPaymentSelect","_c","onReady","document","getElementById","OffAmazonPayments","walletOptions","amazonOrderReferenceId","design","designMode","scope","sellerId","orderReference","_synchronizeBillingAddress","_updateOrderReference","widget","Widgets","Wallet","remote_checkout_synchronization_error","initializeBilling","remoteAddress","billing","address","internalBillingAddress","is_internal_address_equal","updateAddress","map_from_internal_address","updateCheckout","getAmazonOrderReferenceId","Overlay","_element","_createElement","show","parentElement","_registerClick","appendChild","setTimeout","style","opacity","remove","_unregisterClick","_removeAfterTransition","element","createElement","background","_d","transitionDuration","height","left","position","top","transition","width","zIndex","onClick","onClick_1","addEventListener","removeEventListener","handeTransition","event","propertyName","removeChild","PaymentMethodCancelledError","BraintreePaymentProcessor","_braintreeSDKCreator","_overlay","_threeDSecureOptions","threeDSecure","preloadPaypal","getPaypal","tokenizeCard","requestData","_mapToCreditCard","getClient","client","creditCards","paypal","amount","storeLanguage","currency","offerCredit","focusWindow","tokenize","enableShippingAddress","flow","useraction","verifyCard","addFrame","removeFrame","all","get3DS","cancelVerifyCard","verification","cancel","payment_method_cancelled_error","cancellable_promise","iframe","promise","appendSessionId","processedPayment","getDataCollector","deviceData","deviceSessionId","teardown","creditCard","streetAddress","address1","address2","cardholderName","ccName","number","ccNumber","cvv","ccCvv","expirationDate","ccExpiry","month","year","country","postalCode","endpoint","BraintreeCreditCardPaymentStrategy","_braintreePaymentProcessor","braintree","_is3dsEnabled","is3dsEnabled","_handleError","orderRequest","_preparePaymentData","_isUsingVaulting","card","shouldSaveInstrument","tokenizedCard","orderAmount","ChasePayEventType","BraintreePaypalPaymentStrategy","_credit","braintreeOptions","isBraintreeError","code","getGrandTotal","BraintreeVisaCheckoutPaymentStrategy","_checkoutActionCreator","_paymentStrategyActionCreator","_braintreeVisaCheckoutPaymentProcessor","_visaCheckoutScriptLoader","visaCheckoutOptions","braintreevisacheckout","initOptions","collectShipping","subtotal","currencyCode","visaCheckout","visaInitOptions","init","on","paymentSuccessPayload","_paymentInstrumentSelected","handleSuccess","loadCurrentCheckout","queueId","CardBrand","DigitalWalletType","chasepay_payment_strategy","ChasePayPaymentStrategy","_chasePayScriptLoader","_wepayRiskClient","_walletEvent$","_methodId","chasepay","walletButton","_walletButton","_handleWalletButtonClick","_configureWallet","_chasePayClient","_getPayment","_displayWallet","_createOrder","ChasePay","logoContainer","insertBrandings","color","containers","configure","language","CancelCheckout","onCancel","CompleteCheckout","_setSessionToken","sessionToken","showLoadingAnimation","startCheckout","digitalSessionId","subscribe","merchantRequestId","post","Accept","Content-Type","to_form_url_encoded","action","provider","getRiskToken","riskToken","paymentCryptogram","cryptogramId","eci","transactionId","btoa","reqTokenId","expDate","toString","substr","accountNum","accountMask","extraData","preventDefault","bind_decorator","CreditCardPaymentStrategy","googlepay_payment_strategy","GooglePayPaymentStrategy","_googlePayPaymentProcessor","_googlePayOptions","_getGooglePayOptions","cardInformation","displayWallet","statusCode","googlepaybraintree","googlepaystripe","card_information","KlarnaPaymentStrategy","_klarnaScriptLoader","klarnaCredit","_klarnaCredit","_unsubscribe","_loadWidget","_authorize","authorizationToken","authorization_token","klarna","onLoad","client_token","show_form","payment_method_invalid_error","authorize","res","approved","KlarnaScriptLoader","Klarna","Credit","LegacyPaymentStrategy","masterpass_payment_strategy","MasterpassPaymentStrategy","_masterpassScriptLoader","masterpass","_masterpassClient","_createMasterpassPayload","checkoutId","allowedCardTypes","toFixed","cartId","suppressShippingAddress","callbackUrl","get_callback_url","NoPaymentDataRequiredPaymentStrategy","OfflinePaymentStrategy","OffsitePaymentStrategy","_shouldSubmitFullPayload","getPaymentStatus","payment_status_types","finalizeOrder","PaypalProPaymentStrategy","_isPaymentAcknowledged","PaypalExpressPaymentStrategy","_useRedirectFlow","paypalexpress","useRedirectFlow","_isInContextEnabled","loadPaypal","_paypalSdk","setup","button","environment","closeFlow","_isAcknowledgedOrFinalized","redirectUrl","getPaymentRedirectUrl","location","href","initXO","startFlow","SagePayPaymentStrategy","_formPoster","errors","postForm","three_ds_result","acs_url","PaReq","payer_auth_request","TermUrl","callback_url","MD","merchant_data","UnsupportedBrowserError","SquarePaymentStrategy","_syncPaymentMethod","createSquareForm","_paymentForm","_getFormOptions","build","_getNonceInstrument","_getCountryCode","toUpperCase","_deferredRequestNonce","timeout_error","requestCardNonce","deferred","squareOptions","square","_squareOptions","callbacks","cardNonceResponseReceived","cardData","billingContact","shippingContact","digital_wallet_type","none","_handleWalletNonceResponse","_handleCardNonceResponse","createPaymentRequest","_paymentRequestPayload","methodsSupported","methods","_showPaymentMethods","paymentFormLoaded","_setPostalCode","unsupportedBrowserDetected","unsupported_browser_error","_setExternalCheckoutData","requestShippingAddress","requestBillingInfo","total","label","storeName","String","pending","JSON","stringify","setPostalCode","masterpassBtn","elementId","SquareScriptLoader","SqPaymentForm","WepayRiskClient","_riskClient","WePay","risk","generate_risk_token","get_risk_token","WepayPaymentStrategy","orderActionCreator","paymentActionCreator","payloadWithToken","credit_card_payment_strategy","createPaymentStrategyRegistry","paymentClient","requestSender","registry","payment_strategy_registry","defaultToken","scriptLoader","script_loader_","billingAddressActionCreator","billing_address_action_creator","billing_address_request_sender","braintreePaymentProcessor","braintreeScriptLoader","braintree_script_loader","braintreeSDKCreator","braintree_sdk_creator","overlay","overlay_overlay","braintree_payment_processor","createBraintreePaymentProcessor","checkoutRequestSender","checkout_request_sender","checkoutValidator","checkout_validator","order_action_creator","order_request_sender","payment_action_creator","payment_request_sender","paymentMethodActionCreator","payment_method_action_creator","payment_method_request_sender","remoteCheckoutActionCreator","remote_checkout_action_creator","remote_checkout_request_sender","configActionCreator","config_action_creator","config_request_sender","checkoutActionCreator","checkout_action_creator","paymentStrategyActionCreator","payment_strategy_action_creator","register","AFTERPAY","afterpay_payment_strategy","afterpay_script_loader","AMAZON","amazon_pay_payment_strategy","amazon_pay_script_loader","KLARNA","klarna_payment_strategy","klarna_script_loader","legacy_payment_strategy","offline_payment_strategy","offsite_payment_strategy","PAYPAL","paypal_pro_payment_strategy","PAYPAL_EXPRESS","paypal_express_payment_strategy","paypal_script_loader","PAYPAL_EXPRESS_CREDIT","SAGE_PAY","sage_pay_payment_strategy","form_poster_","SQUARE","square_payment_strategy","square_script_loader","no_payment_data_required_strategy","BRAINTREE","braintree_credit_card_payment_strategy","BRAINTREE_PAYPAL","braintree_paypal_payment_strategy","BRAINTREE_PAYPAL_CREDIT","BRAINTREE_VISA_CHECKOUT","braintree_visacheckout_payment_strategy","create_braintree_visacheckout_payment_processor","visacheckout_script_loader","CHASE_PAY","chasepay_script_loader","wepay_risk_client","BRAINTREE_GOOGLE_PAY","create_googlepay_payment_processor","googlepay_braintree_initializer","WE_PAY","wepay_payment_strategy","MASTERPASS","masterpass_script_loader","STRIPE_GOOGLE_PAY","googlepay_stripe_initializer","InstrumentActionCreator","_instrumentRequestSender","loadInstruments","instrument_actions","LoadInstrumentsRequested","session","_getSessionContext","_getCurrentAccessToken","_getShippingAddress","_getValidAccessToken","currentToken","LoadInstrumentsSucceeded","LoadInstrumentsFailed","deleteInstrument","DeleteInstrumentRequested","DeleteInstrumentSucceeded","DeleteInstrumentFailed","_isValidVaultAccessToken","date","newDate","valueOf","Date","now","isFuture","vaultAccessExpiry","getTime","setMinutes","getMinutes","getVaultAccessToken","getCart","customerId","storeId","InstrumentResponseTransformer","transformResponse","vaultedInstruments","_transformVaultedInstruments","vaulted_instruments","transformErrorResponse","transformVaultAccessResponse","expires_at","map","bigpayToken","bigpay_token","defaultInstrument","default_instrument","iin","last4","last_4","expiryMonth","expiry_month","expiryYear","expiry_year","brand","trustedShippingAddress","trusted_shipping_address","InstrumentRequestSender","_transformer","instrument_response_transformer","requestContext","_loadInstrumentsWithAddress","_loadInstruments","deleteShopperInstrument","errorResponse","loadInstrumentsWithAddress","checkout_store_selector","CheckoutStoreSelector","selectors","_billingAddress","_cart","_checkout","_consignments","_countries","countries","_coupons","_customer","_form","form","_giftCertificates","_instruments","_order","_payment","_paymentMethods","_shippingAddress","_shippingCountries","shippingCountries","getConfig","context","firstName","lastName","company","city","stateOrProvince","stateOrProvinceCode","phone","customFields","getShippingOptions","length","availableShippingOptions","getSelectedShippingOption","selectedShippingOption","getShippingCountries","getBillingCountries","getCountries","getPaymentMethods","getSelectedPaymentMethod","getCoupons","getGiftCertificates","isPaymentDataSubmitted","getInstruments","getBillingAddressFields","getShippingAddressFields","selector_decorator","checkout_store_error_selector","CheckoutStoreErrorSelector","_customerStrategies","customerStrategies","_paymentStrategies","_shippingStrategies","shippingStrategies","getError","getLoadCheckoutError","getSubmitOrderError","getFinalizeOrderError","getLoadOrderError","getLoadCartError","getLoadBillingCountriesError","getLoadShippingCountriesError","getLoadPaymentMethodsError","getLoadPaymentMethodError","getInitializePaymentError","getLoadShippingOptionsError","getSelectShippingOptionError","getSignInError","getSignOutError","getInitializeCustomerError","getUpdateShippingAddressError","getUpdateBillingAddressError","getContinueAsGuestError","getUpdateConsignmentError","getCreateConsignmentsError","getDeleteConsignmentError","getInitializeShippingError","getApplyCouponError","getRemoveCouponError","getApplyGiftCertificateError","getRemoveGiftCertificateError","getLoadInstrumentsError","getDeleteInstrumentError","getLoadConfigError","getLoadError","getUpdateCheckoutError","getUpdateError","getExecuteError","getFinalizeError","getLoadMethodError","getInitializeError","consignmentId","getSelectOptionError","getUpdateShippingOptionError","getUpdateAddressError","getDeleteError","getCreateError","getApplyError","getRemoveError","checkout_store_status_selector","CheckoutStoreStatusSelector","isPending","isLoadingCheckout","isSubmittingOrder","isFinalizingOrder","isLoadingOrder","isLoadingCart","isLoadingBillingCountries","isLoadingShippingCountries","isLoadingPaymentMethods","isLoadingPaymentMethod","isInitializingPayment","isLoadingShippingOptions","isSelectingShippingOption","isSigningIn","isSigningOut","isInitializingCustomer","isUpdatingBillingAddress","isContinuingAsGuest","isUpdatingShippingAddress","isUpdatingConsignment","isCreatingConsignments","isDeletingConsignment","isInitializingShipping","isApplyingCoupon","isRemovingCoupon","isApplyingGiftCertificate","isRemovingGiftCertificate","isLoadingInstruments","isDeletingInstrument","isLoadingConfig","isCustomerStepPending","isPaymentStepPending","isLoading","isUpdatingCheckout","isUpdating","isExecuting","isFinalizing","isLoadingMethod","isInitializing","isSelectingOption","isUpdatingShippingOption","isUpdatingAddress","isDeleting","isCreating","isApplying","isRemoving","isWidgetInteracting","createCheckoutSelectors","statuses","ErrorMessageTransformer","_messageCustomizer","transform","to_single_line","CheckoutService","_configActionCreator","_consignmentActionCreator","_countryActionCreator","_couponActionCreator","_customerStrategyActionCreator","_errorActionCreator","_giftCertificateActionCreator","_instrumentActionCreator","_shippingCountryActionCreator","_shippingStrategyActionCreator","isDevelopment","_state","_errorTransformer","get_environment","error_message_transformer","isCheckoutServiceError","CustomerNotInitialized","ShippingNotInitialized","notifyState","subscriber","filters","_i","arguments","apply","concat","filter","_dispatch","loadDefaultCheckout","loadOrder","loadCheckoutAction","loadConfigAction","loadConfig","finalizeOrderIfNeeded","loadPaymentMethods","deinitializePayment","loadBillingCountries","loadShippingCountries","loadBillingAddressFields","loadShippingAddressFields","initializeCustomer","deinitializeCustomer","continueAsGuest","credentials","signInCustomer","signIn","signOutCustomer","signOut","loadShippingOptions","initializeShipping","deinitializeShipping","selectShippingOption","shippingOptionId","selectOption","updateShippingAddress","createConsignments","deleteConsignment","updateConsignment","consignment","assignItemsToAddress","assignItemsByAddress","unassignItemsToAddress","unassignItemsByAddress","selectConsignmentShippingOption","updateShippingOption","updateBillingAddress","applyCoupon","removeCoupon","applyGiftCertificate","removeGiftCertificate","createCheckoutService","protocol","get_default_logger","warn","externalSource","shouldWarnMutation","request_sender_","host","create_checkout_store","bigpay_client_","setHost","bigpayBaseUrl","createPaymentClient","orderRequestSender","checkout_service","consignment_action_creator","consignment_request_sender","country_action_creator","country_request_sender","coupon_action_creator","coupon_request_sender","customer_strategy_action_creator","create_customer_strategy_registry","error_action_creator","gift_certificate_action_creator","gift_certificate_request_sender","instrument_action_creator","instrument_request_sender","shipping_country_action_creator","shipping_country_request_sender","shipping_strategy_action_creator","create_shipping_strategy_registry","DEFAULT_RESPONSE","RequestError","ConfigActionType","selectorDecorator","target","decoratedTarget","class_1","getOwnPropertyNames","forEach","descriptor","getOwnPropertyDescriptor","resolver","_utility__WEBPACK_IMPORTED_MODULE_2__","memoizedMethod","lodash__WEBPACK_IMPORTED_MODULE_1__","args","getKey","_utility__WEBPACK_IMPORTED_MODULE_3__","cachedValue","getUsedCount","newValue","_utility__WEBPACK_IMPORTED_MODULE_4__","keyFilter","_utility__WEBPACK_IMPORTED_MODULE_5__","cache","set","selectorMethodDecorator","ContentType","CountryActionType","ShippingCountryActionType","ACKNOWLEDGE","FINALIZE","DEFAULT_STATE","clearErrorReducer","_utility__WEBPACK_IMPORTED_MODULE_0__","_error_actions__WEBPACK_IMPORTED_MODULE_1__","isClearErrorAction","objectA","objectB","Array","isArray","index","length_1","isArrayEqual","isDateEqual","RegExp","isRegExpEqual","keysA","keys","keysB","length_2","isObjectEqual","CustomerActionType","PaymentActionType","InvalidArgumentError","HOSTED","AmountTransformer","_dp","toInteger","Math","floor","pow","isIframeEvent","checkout_button_error_selector","CheckoutButtonErrorSelector","_checkoutButton","checkoutButton","getInitializeButtonError","getDeinitializeButtonError","getDeinitializeError","checkout_button_status_selector","CheckoutButtonStatusSelector","isInitializingButton","isDeinitializingButton","isDeinitializing","createCheckoutButtonSelectors","CheckoutButtonMethodType","CheckoutButtonInitializer","_buttonStrategyActionCreator","initializeButton","containerIds","containerId","test","selector","idPrefix","querySelectorAll","slice","setUniqueElementId","deinitializeButton","CheckoutButtonStrategyActionCreator","_registry","checkout_button_actions","InitializeButtonRequested","useCache","InitializeButtonSucceeded","InitializeButtonFailed","DeinitializeButtonRequested","DeinitializeButtonSucceeded","DeinitializeButtonFailed","checkout_button_method_type","BraintreePaypalButtonStrategy","_paypalScriptLoader","_offerCredit","paypalOptions","braintreepaypalcredit","braintreepaypal","getPaypalCheckout","paypalCheckout","_paypalCheckout","allowedSources","disallowedSources","allowCredit","push","FUNDING","CREDIT","Button","render","env","commit","shouldProcessPayment","funding","allowed","disallowed","shape","_setupPayment","onPaymentError","onAuthorize","_tokenizePayment","onAuthorizeError","addresses","CheckoutButtonNotInitialized","createPayment","shippingAddressEditable","shippingAddressOverride","_mapToBraintreeAddress","tokenizePayment","payment_type","device_data","shipping_address","_mapToLegacyShippingAddress","billing_address","_mapToLegacyBillingAddress","details","recipientName","split","email","first_name","last_name","phone_number","address_line_1","line1","address_line_2","line2","country_code","postal_code","googlepay_button_strategy","GooglePayButtonStrategy","_getMethodId","_createSignInButton","parentNode","googlePayButton","createButton","_onPaymentSelectComplete","_onError","masterpass_button_strategy","MasterpassButtonStrategy","_signInButton","buttonContainer","src","cartAmount","PaypalButtonStrategy","_host","clientId","actions","X-API-INTERNAL","internal_api_headers","paymentID","payerID","payerId","payerInfo","payer","payer_info","createCheckoutButtonInitializer","formPoster","checkout_button_initializer","checkout_button_strategy_action_creator","braintree_paypal_button_strategy","GOOGLEPAY_BRAINTREE","GOOGLEPAY_STRIPE","PAYPALEXPRESS","paypal_button_strategy","createCheckoutButtonRegistry","CheckoutIncludes","mapToInternalLineItems","_map_gift_certificate_to_internal_line_item__WEBPACK_IMPORTED_MODULE_0__","_map_to_internal_line_item__WEBPACK_IMPORTED_MODULE_1__","itemMap","decimalPlaces","idKey","reduce","result","item","mapToInternalLineItemType","throwErrorAction","_bigcommerce_data_store__WEBPACK_IMPORTED_MODULE_0__","rxjs__WEBPACK_IMPORTED_MODULE_1__","PaymentMethodInvalidError","_is_equal__WEBPACK_IMPORTED_MODULE_0__","CacheKeyResolver","_lastId","_maps","_resolveMap","parentMaps","cacheKey","usedCount","_generateKey","isMatched","parentMaps_1","maps","bindDecorator","bindMethodDecorator","bindClassDecorator","boundMethod","_common_url__WEBPACK_IMPORTED_MODULE_0__","IframeEventPoster","targetOrigin","_targetWindow","_targetOrigin","origin","postMessage","setTarget","createActionTransformer","requestErrorFactory","action$","rxjs_operators__WEBPACK_IMPORTED_MODULE_2__","every","isResponse","detail","createError","CheckoutSelector","storeCredit","max","loadError","updateError","_common_selector__WEBPACK_IMPORTED_MODULE_1__","checkoutReducer","_bigcommerce_data_store__WEBPACK_IMPORTED_MODULE_1__","dataReducer","errorsReducer","_common_error__WEBPACK_IMPORTED_MODULE_4__","statusesReducer","reducer","_checkout_actions__WEBPACK_IMPORTED_MODULE_9__","LoadCheckoutSucceeded","UpdateCheckoutSucceeded","_billing__WEBPACK_IMPORTED_MODULE_3__","UpdateBillingAddressSucceeded","_coupon__WEBPACK_IMPORTED_MODULE_5__","ApplyCouponSucceeded","RemoveCouponSucceeded","_shipping__WEBPACK_IMPORTED_MODULE_8__","CreateConsignmentsSucceeded","UpdateConsignmentSucceeded","DeleteConsignmentSucceeded","UpdateShippingOptionSucceeded","_coupon__WEBPACK_IMPORTED_MODULE_6__","ApplyGiftCertificateSucceeded","RemoveGiftCertificateSucceeded","lodash__WEBPACK_IMPORTED_MODULE_2__","_order__WEBPACK_IMPORTED_MODULE_7__","SubmitOrderSucceeded","LoadCheckoutRequested","LoadCheckoutFailed","UpdateCheckoutRequested","UpdateCheckoutFailed","mapGiftCertificateToInternalLineItem","___WEBPACK_IMPORTED_MODULE_0__","amountTransformer","imageUrl","amountAfterDiscount","discount","integerAmount","integerAmountAfterDiscount","integerDiscount","quantity","sender","recipient","attributes","variantId","mapToInternalLineItem","_amount_transformer__WEBPACK_IMPORTED_MODULE_0__","extendedListPrice","extendedSalePrice","discountAmount","downloadsPageUrl","downloadPageUrl","categoryNames","productId","option","addedByPromotion","billing_address_selector","BillingAddressSelector","continueAsGuestError","config_selector","ConfigSelector","getExternalSource","form_selector","FormSelector","selectedCountry","formFields","shippingAddressFields","field","_processField","billingAddressFields","_processCountry","_processProvince","_processsPostCode","items","default","fieldType","itemtype","subdivisions","required","hasPostalCodes","country_selector","CountrySelector","payment_selector","PaymentSelector","internalPayment","_getInternalPayment","_getHostedPayment","_getGatewayPayment","replace","step","payments","providerType","payment_method_selector","PaymentMethodSelector","loadMethodId","loadMethodError","payment_strategy_selector","PaymentStrategySelector","payment_strategy_state","initializeMethodId","initializeError","executeMethodId","executeError","finalizeMethodId","finalizeError","getWidgetInteractingError","widgetInteractionMethodId","widgetInteractionError","InstrumentSelector","failedInstrument","deleteError","deletingInstrument","remote_checkout_selector","RemoteCheckoutSelector","_remoteCheckout","createInternalCheckoutSelectors","cart_selector","checkout_button_selector","coupon_selector","customer_selector","customer_strategy_selector","gift_certificate_selector","instrument_selector","shipping_address_selector","shipping_country_selector","shipping_strategy_selector","consignment_selector","checkout_selector","order_selector","create_freeze_proxy","setPrototypeOf","__proto__","isPrivate","indexOf","omitDeep","lodash__WEBPACK_IMPORTED_MODULE_0__","predicate","ErrorActionType","PaymentMethodActionCreator","rxjs__WEBPACK_IMPORTED_MODULE_2__","_payment_method_actions__WEBPACK_IMPORTED_MODULE_4__","LoadPaymentMethodsRequested","sessionHash","LoadPaymentMethodsSucceeded","LoadPaymentMethodsFailed","LoadPaymentMethodRequested","LoadPaymentMethodSucceeded","LoadPaymentMethodFailed","_common_action__WEBPACK_IMPORTED_MODULE_3__","_common_http_request__WEBPACK_IMPORTED_MODULE_0__","_common_http_request__WEBPACK_IMPORTED_MODULE_1__","PaymentMethodRequestSender","JsonV1","url","EmbeddedContentEventType","IframeEventListener","sourceOrigin","_sourceOrigin","_common_url__WEBPACK_IMPORTED_MODULE_1__","_isListening","_listeners","listen","_handleMessage","stopListen","addListener","listener","listeners","removeListener","splice","trigger","_is_iframe_event__WEBPACK_IMPORTED_MODULE_3__","_common_utility__WEBPACK_IMPORTED_MODULE_2__","INTERNAL_USE_ONLY","CheckoutButtonSelector","initializedContainers","deinitializeError","_common_selector__WEBPACK_IMPORTED_MODULE_2__","DEFAULT_DATA_STATE","DEFAULT_ERROR_STATE","DEFAULT_STATUS_STATE","checkoutButtonReducer","_checkout_button_actions__WEBPACK_IMPORTED_MODULE_2__","NotEmbeddableErrorType","BrowserStorage","_namespace","getItem","rawValue","external_local_storage_fallback_default","a","withNamespace","parse","removeItem","getItemOnce","setItem","InvalidLoginTokenError","title","NotEmbeddableError","UnknownError","EmbeddedCheckout","_iframeCreator","_messageListener","_messagePoster","_loadingIndicator","_storage","_location","_options","_isAttached","onComplete","embedded_checkout_events","CheckoutComplete","CheckoutError","CheckoutLoaded","onFrameLoad","FrameLoaded","onSignOut","SignedOut","_configureStyles","attach","_allowCookie","_attemptLogin","createFrame","_iframe","hide","_retryAllowCookie","FrameError","detach","iFrameResizer","close","contentWindow","styles","embedded_content_events","StyleConfigured","parse_url","pathname","invalid_login_token_error","encodeURIComponent","visibility","not_embeddable_error","MissingContent","DEFAULT_STYLES","size","backgroundColor","ROTATION_ANIMATION","LoadingIndicator","_styles","_defineAnimation","_container","_buildContainer","_indicator","_buildIndicator","parentId","parent_1","handleTransitionEnd","bottom","right","indicator","borderRadius","border","borderColor","margin","transformStyle","animation","head","sheet","CSSStyleSheet","insertRule","ResizableIframeCreator","MissingContainer","allowPaymentRequest","_toResizableFrame","timeoutInterval","handleMessage","is_iframe_event","contentId","iframes","external_iframe_resizer_","scrolling","sizeWidth","heightCalculationMethod","clearTimeout","STORAGE_PREFIX","embedCheckout","embedded_checkout","resizable_iframe_creator","iframe_event_listener","iframe_event_poster","loading_indicator","loadingIndicator","browser_storage","mapToInternalCart","promotions","notifications","amount_transformer","map_to_internal_line_items","lineItems","coupon","discountedAmount","sum","map_to_internal_coupon","discountNotifications","promotion","banners","banner","placeholders","discountType","messageHtml","text","giftCertificate","totalDiscountedAmount","certificate","used","appliedGiftCertificates","map_to_internal_gift_certificate","shipping","shippingCostTotal","amountBeforeDiscount","shippingCostBeforeDiscount","integerAmountBeforeDiscount","physicalItems","lineItem","isShippingRequired","taxSubtotal","taxTotal","taxes","handling","handlingCostTotal","CheckoutActionCreator","_checkout_actions__WEBPACK_IMPORTED_MODULE_7__","rxjs_operators__WEBPACK_IMPORTED_MODULE_3__","_common_error_errors__WEBPACK_IMPORTED_MODULE_5__","_common_error_errors__WEBPACK_IMPORTED_MODULE_6__","ConsignmentActionCreator","_consignmentRequestSender","_common_error_errors__WEBPACK_IMPORTED_MODULE_4__","existingConsignment","getConsignmentByAddress","_removeLineItems","_createOrUpdateConsignment","_addLineItems","consignmentUpdateBody","consignmentMeta","_consignment_actions__WEBPACK_IMPORTED_MODULE_6__","UpdateShippingOptionRequested","UpdateShippingOptionFailed","LoadShippingOptionsRequested","params","include","_checkout_checkout_params__WEBPACK_IMPORTED_MODULE_3__","AvailableShippingOptions","LoadShippingOptionsSucceeded","LoadShippingOptionsFailed","_getConsignmentRequestBody","CreateConsignmentsRequested","CreateConsignmentsFailed","UpdateConsignmentRequested","UpdateConsignmentFailed","DeleteConsignmentRequested","DeleteConsignmentFailed","_isUpdateConsignmentRequest","itemId","_hydrateLineItems","lineItemIds","existingItem","sharedItem","find","DEFAULT_PARAMS","ConsignmentRequestSender","put","delete","mapToInternalShippingOption","isSelected","description","price","cost","selected","isRecommended","transitTime","UnrecoverableError","joinErrors","map_from_payment_error_response_joinErrors","PAYMENT_ERROR_CODES","RequestErrorFactory","_factoryMethods","mapFromInternalErrorResponse","mapFromStorefrontErrorResponse","mapFromPaymentErrorResponse","factoryMethod","_getType","_isStorefrontErrorResponseBody","_isInternalErrorResponseBody","internalType","storefrontErrorResponse","internalErrorResponse","billingAddressReducer","clear_error_reducer","billing_address_actions","ContinueAsGuestSucceeded","checkout_actions","order_actions","LoadOrderSucceeded","UpdateBillingAddressRequested","UpdateBillingAddressFailed","ContinueAsGuestRequested","ContinueAsGuestFailed","config_reducer_DEFAULT_STATE","configReducer","config_reducer_dataReducer","config_reducer_errorsReducer","config_reducer_statusesReducer","config_actions","LoadConfigSucceeded","LoadConfigFailed","LoadConfigRequested","country_reducer_DEFAULT_STATE","countryReducer","country_reducer_dataReducer","country_reducer_errorsReducer","country_reducer_statusesReducer","paymentReducer","payment_reducer_dataReducer","payment_method_reducer_DEFAULT_STATE","paymentMethodReducer","payment_method_reducer_dataReducer","payment_method_reducer_errorsReducer","metaReducer","payment_method_reducer_statusesReducer","payment_method_actions","merge_or_push","paymentStrategyReducer","payment_strategy_reducer_dataReducer","payment_strategy_reducer_errorsReducer","payment_strategy_reducer_statusesReducer","deinitializeMethodId","instrument_reducer_DEFAULT_STATE","instrumentReducer","instrument_reducer_dataReducer","instrument_reducer_errorsReducer","instrument_reducer_metaReducer","instrument_reducer_statusesReducer","remote_checkout_reducer_DEFAULT_STATE","remoteCheckoutReducer","remote_checkout_reducer_dataReducer","remote_checkout_actions","InitializeRemoteBillingSucceeded","InitializeRemoteShippingSucceeded","LoadRemoteSettingsSucceeded","UpdateRemoteCheckout","createCheckoutStore","initialState","factory","actionTransformer","create_action_transformer","request_error_factory","unrecoverable_error","cart_reducer","checkout_reducer","checkout_button_reducer","consignment_reducer","coupon_reducer","customer_reducer","customer_strategy_reducer","gift_certificate_reducer","order_reducer","shipping_country_reducer","shipping_strategy_reducer","stateTransformer","create_internal_checkout_selectors","CheckoutNotAvailableError","checkout_request_sender_CheckoutRequestSender","CheckoutRequestSender","content_type","join_includes","checkout_default_includes","checkout_not_available_error","isAddressEqual","addressA","addressB","normalize","_common_error_errors__WEBPACK_IMPORTED_MODULE_0__","BraintreeScriptLoader","loadClient","load3DS","loadDataCollector","dataCollector","loadPaypalCheckout","loadVisaCheckout","loadGooglePayment","googlePayment","BraintreeSDKCreator","_braintreeScriptLoader","_dataCollectors","_clientToken","_common_error_errors__WEBPACK_IMPORTED_MODULE_1__","authorization","_paypal","_3ds","cached","kount","getVisaCheckout","_visaCheckout","getGooglePaymentComponent","_googlePay","_teardown","mod","mapToInternalCoupon","couponTypes","displayName","couponType","mapToInternalAddress","addressId","isBillingAddressLike","addressLine1","addressLine2","province","provinceCode","postCode","joinIncludes","includes","NotInitializedErrorType","NotInitializedError","parseUrl","_error_errors__WEBPACK_IMPORTED_MODULE_0__","anchor","hash","hostname","port","search","cachableActionDecorator","memoizedMethods","WeakMap","decorateMethod","param","lastArg","fn","instanceMethods","cache_key_resolver","createFreezeProxies","createFreezeProxy","trap","proxy","iteratee","getPrototypeOf","traversePrototypeOf","charAt","createProxy","_customer_strategy_actions__WEBPACK_IMPORTED_MODULE_2__","CustomerStrategyActionCreator","SignInRequested","SignInSucceeded","SignInFailed","SignOutRequested","SignOutSucceeded","SignOutFailed","_common_error__WEBPACK_IMPORTED_MODULE_3__","_customer_actions__WEBPACK_IMPORTED_MODULE_4__","CustomerActionCreator","_customerRequestSender","SignInCustomerRequested","SignInCustomerSucceeded","SignInCustomerFailed","SignOutCustomerRequested","SignOutCustomerSucceeded","SignOutCustomerFailed","CustomerRequestSender","CartSelector","CouponSelector","_coupon","removeCouponError","applyCouponError","CustomerSelector","CustomerStrategySelector","signInMethodId","signInError","signOutMethodId","signOutError","getWidgetInteractionError","GiftCertificateSelector","_giftCertificate","removeGiftCertificateError","applyGiftCertificateError","ShippingAddressSelector","ShippingCountrySelector","ShippingStrategySelector","updateAddressMethodId","updateAddressError","selectOptionMethodId","selectOptionError","ConsignmentSelector","getConsignmentById","_address__WEBPACK_IMPORTED_MODULE_2__","loadShippingOptionsError","getUnassignedItems","assignedLineItemIds","itemIds","getItemAssignmentError","updateShippingOptionError","isAssigningItems","_common_selector__WEBPACK_IMPORTED_MODULE_3__","OrderSelector","cartReducer","_billing_billing_address_actions__WEBPACK_IMPORTED_MODULE_2__","_checkout__WEBPACK_IMPORTED_MODULE_3__","_shipping_consignment_actions__WEBPACK_IMPORTED_MODULE_7__","_coupon_coupon_actions__WEBPACK_IMPORTED_MODULE_5__","_coupon_gift_certificate_actions__WEBPACK_IMPORTED_MODULE_6__","consignmentReducer","_checkout__WEBPACK_IMPORTED_MODULE_2__","_coupon__WEBPACK_IMPORTED_MODULE_4__","_customer__WEBPACK_IMPORTED_MODULE_5__","couponReducer","_coupon_actions__WEBPACK_IMPORTED_MODULE_5__","_order__WEBPACK_IMPORTED_MODULE_4__","ApplyCouponRequested","ApplyCouponFailed","RemoveCouponRequested","RemoveCouponFailed","customerReducer","giftCertificateReducer","_shipping_consignment_actions__WEBPACK_IMPORTED_MODULE_4__","_gift_certificate_actions__WEBPACK_IMPORTED_MODULE_6__","ApplyGiftCertificateRequested","ApplyGiftCertificateFailed","RemoveGiftCertificateRequested","RemoveGiftCertificateFailed","orderReducer","_order_actions__WEBPACK_IMPORTED_MODULE_4__","LoadOrderPaymentsSucceeded","FinalizeOrderSucceeded","orderToken","LoadOrderRequested","LoadOrderPaymentsRequested","LoadOrderFailed","LoadOrderPaymentsFailed","mergeOrPush","array","newArray","shippingCountryReducer","_common_error__WEBPACK_IMPORTED_MODULE_2__","_shipping_country_actions__WEBPACK_IMPORTED_MODULE_3__","LoadShippingCountriesSucceeded","LoadShippingCountriesRequested","LoadShippingCountriesFailed","mapToInternalCustomer","_address__WEBPACK_IMPORTED_MODULE_0__","isGuest","fullName","mapToInternalGiftCertificate","remainingBalance","remaining","balance","purchaseDate","mapToInternalOrder","_cart__WEBPACK_IMPORTED_MODULE_1__","_cart__WEBPACK_IMPORTED_MODULE_2__","_coupon__WEBPACK_IMPORTED_MODULE_3__","customerCanBeCreated","mapToInteralOrderPayment","baseAmount","socialData","mapToInternalSocialDataList","hasDigitalItems","isDownloadable","isComplete","mapToStoreCredit","orderAmountAsInteger","mapToInternalPaymentStatus","isDefaultOrderPayment","helpText","instructions","returnUrl","socialDataObject","digitalItems","socialMedia","image","link","shareText","sharingLink","channelName","channel","channelCode","shippingStrategyReducer","shipping_strategy_actions","UpdateAddressRequested","UpdateAddressSucceeded","UpdateAddressFailed","SelectOptionRequested","SelectOptionSucceeded","SelectOptionFailed","customerStrategyReducer","customer_strategy_actions","getCallbackUrl","omitPrivate","_is_private__WEBPACK_IMPORTED_MODULE_0__","_omit_deep__WEBPACK_IMPORTED_MODULE_1__","getEnvironment","process","NODE_ENV","e","OrderRequestSender","OrderActionCreator","_orderRequestSender","_order_actions__WEBPACK_IMPORTED_MODULE_6__","_getCurrentOrderId","SubmitOrderRequested","_mapToOrderRequestBody","customerMessage","SubmitOrderFailed","FinalizeOrderRequested","FinalizeOrderFailed","CartComparator","cartA","cartB","_normalize","sort","itemA","itemB","localeCompare","giftWrapping","toSingleLine","input","line","trim","_common_error_errors__WEBPACK_IMPORTED_MODULE_2__","_coupon_actions__WEBPACK_IMPORTED_MODULE_3__","CouponActionCreator","_couponRequestSender","_checkout__WEBPACK_IMPORTED_MODULE_0__","_checkout__WEBPACK_IMPORTED_MODULE_1__","_common_http_request__WEBPACK_IMPORTED_MODULE_2__","_common_http_request__WEBPACK_IMPORTED_MODULE_3__","CouponRequestSender","couponCode","_gift_certificate_actions__WEBPACK_IMPORTED_MODULE_3__","GiftCertificateActionCreator","_giftCertificateRequestSender","GiftCertificateRequestSender","giftCertificateCode","CancellablePromise","cancellable","race","isInternalAddressEqual","ignoredKeys","mapFromInternalAddress","_shipping_country_actions__WEBPACK_IMPORTED_MODULE_2__","ShippingCountryActionCreator","_shippingCountryRequestSender","ShippingCountryRequestSender","ShippingStrategyActionCreator","_shipping_strategy_actions__WEBPACK_IMPORTED_MODULE_3__","mergedOptions","NotImplementedError","AmazonPayCustomerStrategy","_remoteCheckoutRequestSender","not_implemented_error","useAmazonAddressBook","_handleAuthorization","generateToken","Login","popup","tokenPrefix","trackAuthorizationEvent","BraintreeVisaCheckoutCustomerStrategy","_buttonClassName","signInButton","buttonClass","querySelector","_insertVisaCheckoutButton","visaCheckoutButton","className","innerHTML","ChasePayCustomerStrategy","chasePayOptions","JPMC","isChasePayUp","insertButtons","EventType","START_CHECKOUT","sessionId","COMPLETE_CHECKOUT","requestId","_reloadPage","sendRequest","fromChasePay","DefaultCustomerStrategy","_customerActionCreator","googlepay_customer_strategy","GooglePayCustomerStrategy","googlePayOptions","MasterpassCustomerStrategy","masterpassOptions","Masterpass","SquareCustomerStrategy","createCustomerStrategyRegistry","remoteCheckoutRequestSender","amazon_pay_customer_strategy","braintree_visacheckout_customer_strategy","chasepay_customer_strategy","square_customer_strategy","masterpass_customer_strategy","default_customer_strategy","customer_action_creator","customer_request_sender","AmazonPayShippingStrategy","_createAddressBook","optionId","onAddressSelect","AddressBook","_synchronizeShippingAddress","DefaultShippingStrategy","createShippingStrategyRegistry","consignmentRequestSender","consignmentActionCreator","amazon_pay_shipping_strategy","default_shipping_strategy","TimeoutError","ConfigActionCreator","_configRequestSender","_config_actions__WEBPACK_IMPORTED_MODULE_4__","ConfigRequestSender","BillingAddressActionCreator","_common_error_errors__WEBPACK_IMPORTED_MODULE_3__","billingAddressRequestBody","existingBillingAddressRequestBody","_billing_address_actions__WEBPACK_IMPORTED_MODULE_5__","_createOrUpdateBillingAddress","createAddress","BillingAddressRequestSender","Registry","_factories","_instances","_getInstance","_error_errors__WEBPACK_IMPORTED_MODULE_1__","_hasInstance","toFormUrlEncoded","MasterpassScriptLoader","RemoteCheckoutSynchronizationError","GooglePayBraintreeInitializer","hasShippingAddress","googleBraintreePaymentInstance","_googlePaymentInstance","_createGooglePayPayload","parseResponse","paymentMethodData","tokenizationData","androidPayCards","cardType","lastFour","lastTwo","binData","platformToken","googlePayBraintreePaymentDataRequest","merchantInfo","authJwt","merchantName","googleMerchantName","googleMerchantId","transactionInfo","totalPriceStatus","totalPrice","cardRequirements","billingAddressRequired","billingAddressFormat","shippingAddressRequired","emailRequired","phoneNumberRequired","_mapGooglePayBraintreeDataRequestToGooglePayDataRequestV2","createPaymentDataRequest","googlePayBraintreeDataRequestV1","apiVersion","apiVersionMinor","allowedPaymentMethods","parameters","allowedAuthMethods","allowedCardNetworks","billingAddressParameters","format","tokenizationSpecification","braintree:apiVersion","braintree:authorizationFingerprint","paymentMethodTokenizationParameters","braintree:merchantId","braintree:sdkVersion","shippingAddressParameters","GooglePayStripeInitializer","_mapGooglePayStripeDataRequestToGooglePayDataRequestV2","err","stripe:version","stripeVersion","stripe:publishableKey","stripePublishableKey","PaypalScriptLoader","handleFrameLoadedEvent","hasAttribute","setAttribute","isCustomError","IframeEmbeddedCheckoutMessenger","_untargetedMessagePoster","_messageHandlers","postComplete","_postMessage","postError","_transformError","postFrameError","untargeted","postFrameLoaded","postLoaded","postSignedOut","receiveStyles","handler","_notifyMessageHandlers","NoopEmbeddedCheckoutMessenger","createEmbeddedCheckoutMessenger","parentWindow","parent","noop_embedded_checkout_messenger","iframe_embedded_checkout_messenger","parentOrigin","LanguageService","_logger","_transformConfig","locales","translations","_locale","_locales","_translations","_formatters","mapKeys","translationKey","KEY_PREFIX","getLocale","_hasTranslations","translate","prefixedKey","messageFormat","external_messageformat_","compile","_transformData","output","defaultTranslations","_flattenObject","parentKey","resultKey","createLanguageService","language_service","CurrencyFormatter","currencySettings","symbolLocation","symbol","thousandsSeparator","decimalSeparator","_decimalPlaces","parseInt","_symbolLocation","_symbol","_thousandsSeparator","_decimalSeparator","formattedNumber","_formatNumber","formattedCurrency","_formatCurrency","positiveAmount","abs","_toFixed","decimalAmount","parsedIntegerAmount","toLowerCase","precision","round","CurrencyService","_storeConfig","_customerFormatter","currency_formatter","shopperCurrency","_storeFormatter","toCustomerCurrency","exchangeRate","toStoreCurrency","createCurrencyService","currency_service","checkout_buttons","ButtonType","ButtonColor","GooglePayPaymentProcessor","_googlePayScriptLoader","_googlePayInitializer","_consigmentActionCreator","buttonType","buttonColor","Short","Default","_googlePayClient","loadPaymentData","_getPaymentDataRequest","_postForm","_updateBillingAddress","_mapGooglePayAddressToShippingAddress","googlePay","paymentDataRequest","_getGooglePayClient","_paymentDataRequest","isReadyToPay","_getCardInformation","google","api","PaymentsClient","_mapGooglePayAddressToBillingAddress","info","companyName","address3","locality","administrativeArea","phoneNumber","postPaymentData","remoteBillingAddress","googlePayAddressMapped","GooglePayScriptLoader","createGooglePayPaymentProcessor","initializer","googlepay_payment_processor","googlepay_script_loader","RemoteCheckoutRequestSender","methodName","_remote_checkout_actions__WEBPACK_IMPORTED_MODULE_2__","RemoteCheckoutActionCreator","InitializeRemoteBillingRequested","InitializeRemoteBillingFailed","InitializeRemoteShippingRequested","InitializeRemoteShippingFailed","InitializeRemotePaymentRequested","InitializeRemotePaymentSucceeded","InitializeRemotePaymentFailed","LoadRemoteSettingsRequested","LoadRemoteSettingsFailed","SignOutRemoteCustomerRequested","SignOutRemoteCustomerSucceeded","SignOutRemoteCustomerFailed","AmazonPayScriptLoader","onPaymentReady","region","_configureWidget","onLoginReady","setClientId","setUseCookie","onAmazonLoginReady","onAmazonPaymentsReady","VisaCheckoutScriptLoader","V","ChasePayScriptLoader","ConsoleLogger","_console","log","messages","_logToConsole","debug","NoopLogger","getDefaultLogger","isEnabled","logger","console_logger","console","noop_logger","BraintreeVisaCheckoutPaymentProcessor","createInitOptions","paymentRequest","braintreeVisaCheckout","tokenizedPayload","_toVisaCheckoutAddress","userData","userEmail","_getAddress","extendedAddress","createBraintreeVisaCheckoutPaymentProcessor","braintree_visacheckout_payment_processor"],"mappings":"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","file":"checkout-sdk.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 191);\n","module.exports = require(\"tslib\");","module.exports = require(\"@bigcommerce/data-store\");","module.exports = require(\"lodash\");","module.exports = require(\"rxjs\");","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nimport { ConsignmentMeta } from './consignment';\n\nexport enum ConsignmentActionType {\n    CreateConsignmentsRequested = 'CREATE_CONSIGNMENTS_REQUESTED',\n    CreateConsignmentsSucceeded = 'CREATE_CONSIGNMENTS_SUCCEEDED',\n    CreateConsignmentsFailed = 'CREATE_CONSIGNMENTS_FAILED',\n\n    UpdateConsignmentRequested = 'UPDATE_CONSIGNMENT_REQUESTED',\n    UpdateConsignmentSucceeded = 'UPDATE_CONSIGNMENT_SUCCEEDED',\n    UpdateConsignmentFailed = 'UPDATE_CONSIGNMENT_FAILED',\n\n    DeleteConsignmentRequested = 'DELETE_CONSIGNMENT_REQUESTED',\n    DeleteConsignmentSucceeded = 'DELETE_CONSIGNMENT_SUCCEEDED',\n    DeleteConsignmentFailed = 'DELETE_CONSIGNMENT_FAILED',\n\n    UpdateShippingOptionRequested = 'UPDATE_SHIPPING_OPTION_REQUESTED',\n    UpdateShippingOptionSucceeded = 'UPDATE_SHIPPING_OPTION_SUCCEEDED',\n    UpdateShippingOptionFailed = 'UPDATE_SHIPPING_OPTION_FAILED',\n\n    LoadShippingOptionsRequested = 'LOAD_SHIPPING_OPTIONS_REQUESTED',\n    LoadShippingOptionsSucceeded = 'LOAD_SHIPPING_OPTIONS_SUCCEEDED',\n    LoadShippingOptionsFailed = 'LOAD_SHIPPING_OPTIONS_FAILED',\n}\n\nexport type ConsignmentAction =\n    CreateConsignmentsAction |\n    UpdateConsignmentAction |\n    DeleteConsignmentAction |\n    UpdateShippingOptionAction |\n    LoadShippingOptionsAction;\n\nexport type CreateConsignmentsAction =\n    CreateConsignmentsRequestedAction |\n    CreateConsignmentsSucceededAction |\n    CreateConsignmentsFailedAction;\n\nexport type UpdateConsignmentAction =\n    UpdateConsignmentRequestedAction |\n    UpdateConsignmentSucceededAction |\n    UpdateConsignmentFailedAction;\n\nexport type DeleteConsignmentAction =\n    DeleteConsignmentRequestedAction |\n    DeleteConsignmentSucceededAction |\n    DeleteConsignmentFailedAction;\n\nexport type UpdateShippingOptionAction =\n    UpdateShippingOptionRequestedAction |\n    UpdateShippingOptionSucceededAction |\n    UpdateShippingOptionFailedAction;\n\nexport type LoadShippingOptionsAction =\n    LoadShippingOptionsRequestedAction |\n    LoadShippingOptionsSucceededAction |\n    LoadShippingOptionsFailedAction;\n\nexport interface CreateConsignmentsRequestedAction extends Action {\n    type: ConsignmentActionType.CreateConsignmentsRequested;\n}\n\nexport interface CreateConsignmentsSucceededAction extends Action<Checkout> {\n    type: ConsignmentActionType.CreateConsignmentsSucceeded;\n}\n\nexport interface CreateConsignmentsFailedAction extends Action<Error> {\n    type: ConsignmentActionType.CreateConsignmentsFailed;\n}\n\nexport interface UpdateConsignmentRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentRequested;\n}\n\nexport interface UpdateConsignmentSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentSucceeded;\n}\n\nexport interface UpdateConsignmentFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentFailed;\n}\n\nexport interface DeleteConsignmentRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentRequested;\n}\n\nexport interface DeleteConsignmentSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentSucceeded;\n}\n\nexport interface DeleteConsignmentFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentFailed;\n}\n\nexport interface UpdateShippingOptionRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionRequested;\n}\n\nexport interface UpdateShippingOptionSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionSucceeded;\n}\n\nexport interface UpdateShippingOptionFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionFailed;\n}\n\nexport interface LoadShippingOptionsRequestedAction extends Action {\n    type: ConsignmentActionType.LoadShippingOptionsRequested;\n}\n\nexport interface LoadShippingOptionsSucceededAction extends Action<Checkout> {\n    type: ConsignmentActionType.LoadShippingOptionsSucceeded;\n}\n\nexport interface LoadShippingOptionsFailedAction extends Action<Error> {\n    type: ConsignmentActionType.LoadShippingOptionsFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadConfigAction } from '../config/config-actions';\n\nimport Checkout from './checkout';\n\nexport enum CheckoutActionType {\n    LoadCheckoutRequested = 'LOAD_CHECKOUT_REQUESTED',\n    LoadCheckoutSucceeded = 'LOAD_CHECKOUT_SUCCEEDED',\n    LoadCheckoutFailed = 'LOAD_CHECKOUT_FAILED',\n\n    UpdateCheckoutRequested = 'UPDATE_CHECKOUT_REQUESTED',\n    UpdateCheckoutSucceeded = 'UPDATE_CHECKOUT_SUCCEEDED',\n    UpdateCheckoutFailed = 'UPDATE_CHECKOUT_FAILED',\n}\n\nexport type CheckoutAction = LoadCheckoutAction | UpdateCheckoutAction;\n\nexport type LoadCheckoutAction =\n    LoadCheckoutRequestedAction |\n    LoadCheckoutSucceededAction |\n    LoadCheckoutFailedAction |\n    LoadConfigAction;\n\nexport type UpdateCheckoutAction =\n    UpdateCheckoutRequestedAction |\n    UpdateCheckoutSucceededAction |\n    UpdateCheckoutFailedAction;\n\nexport interface LoadCheckoutRequestedAction extends Action {\n    type: CheckoutActionType.LoadCheckoutRequested;\n}\n\nexport interface LoadCheckoutSucceededAction extends Action<Checkout> {\n    type: CheckoutActionType.LoadCheckoutSucceeded;\n}\n\nexport interface LoadCheckoutFailedAction extends Action<Error> {\n    type: CheckoutActionType.LoadCheckoutFailed;\n}\n\nexport interface UpdateCheckoutRequestedAction extends Action {\n    type: CheckoutActionType.UpdateCheckoutRequested;\n}\n\nexport interface UpdateCheckoutSucceededAction extends Action<Checkout> {\n    type: CheckoutActionType.UpdateCheckoutSucceeded;\n}\n\nexport interface UpdateCheckoutFailedAction extends Action<Error> {\n    type: CheckoutActionType.UpdateCheckoutFailed;\n}\n","import StandardError from './standard-error';\n\nexport enum MissingDataErrorType {\n    MissingBillingAddress,\n    MissingCart,\n    MissingCheckout,\n    MissingConsignments,\n    MissingCheckoutConfig,\n    MissingOrder,\n    MissingOrderConfig,\n    MissingOrderId,\n    MissingPayment,\n    MissingPaymentMethod,\n}\n\nexport default class MissingDataError extends StandardError {\n    constructor(\n        public subtype: MissingDataErrorType\n    ) {\n        super(getErrorMessage(subtype));\n\n        this.type = 'missing_data';\n    }\n}\n\nfunction getErrorMessage(type: MissingDataErrorType): string {\n    switch (type) {\n    case MissingDataErrorType.MissingBillingAddress:\n        return 'Unable to proceed because billing address data is unavailable.';\n\n    case MissingDataErrorType.MissingCart:\n        return 'Unable to proceed because cart data is unavailable.';\n\n    case MissingDataErrorType.MissingConsignments:\n        return 'Unable to proceed because consignments data is unavailable.';\n\n    case MissingDataErrorType.MissingCheckout:\n        return 'Unable to proceed because checkout data is unavailable.';\n\n    case MissingDataErrorType.MissingCheckoutConfig:\n    case MissingDataErrorType.MissingOrderConfig:\n        return 'Unable to proceed because configuration data is unavailable.';\n\n    case MissingDataErrorType.MissingOrder:\n        return 'Unable to proceed because order data is unavailable.';\n\n    case MissingDataErrorType.MissingOrderId:\n        return 'Unable to proceed because order ID is unavailable or not generated yet.';\n\n    case MissingDataErrorType.MissingPayment:\n        return 'Unable to proceed because payment data is unavailable.';\n\n    case MissingDataErrorType.MissingPaymentMethod:\n        return 'Unable to proceed because payment method data is unavailable or not properly configured.';\n\n    default:\n        return 'Unable to proceed because the required data is unavailable.';\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum CustomerStrategyActionType {\n    SignInFailed = 'CUSTOMER_STRATEGY_SIGN_IN_FAILED',\n    SignInRequested = 'CUSTOMER_STRATEGY_SIGN_IN_REQUESTED',\n    SignInSucceeded = 'CUSTOMER_STRATEGY_SIGN_IN_SUCCEEDED',\n    SignOutFailed = 'CUSTOMER_STRATEGY_SIGN_OUT_FAILED',\n    SignOutRequested = 'CUSTOMER_STRATEGY_SIGN_OUT_REQUESTED',\n    SignOutSucceeded = 'CUSTOMER_STRATEGY_SIGN_OUT_SUCCEEDED',\n    InitializeFailed = 'CUSTOMER_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'CUSTOMER_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'CUSTOMER_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'CUSTOMER_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'CUSTOMER_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'CUSTOMER_STRATEGY_DEINITIALIZE_SUCCEEDED',\n    WidgetInteractionStarted = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_STARTED',\n    WidgetInteractionFinished = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_FINISHED',\n    WidgetInteractionFailed = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_FAILED',\n}\n\nexport type CustomerStrategyAction =\n    CustomerStrategySignInAction |\n    CustomerStrategySignOutAction |\n    CustomerStrategyInitializeAction |\n    CustomerStrategyDeinitializeAction |\n    CustomerStrategyWidgetAction;\n\nexport type CustomerStrategySignInAction =\n    SignInRequestedAction |\n    SignInSucceededAction |\n    SignInFailedAction;\n\nexport type CustomerStrategySignOutAction =\n    SignOutRequestedAction |\n    SignOutSucceededAction |\n    SignOutFailedAction;\n\nexport type CustomerStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type CustomerStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport type CustomerStrategyWidgetAction =\n    WidgetInteractionStartedAction |\n    WidgetInteractionFinishedAction |\n    WidgetInteractionFailedAction;\n\nexport interface SignInRequestedAction extends Action {\n    type: CustomerStrategyActionType.SignInRequested;\n}\n\nexport interface SignInSucceededAction extends Action {\n    type: CustomerStrategyActionType.SignInSucceeded;\n}\n\nexport interface SignInFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.SignInFailed;\n}\n\nexport interface SignOutRequestedAction extends Action {\n    type: CustomerStrategyActionType.SignOutRequested;\n}\n\nexport interface SignOutSucceededAction extends Action {\n    type: CustomerStrategyActionType.SignOutSucceeded;\n}\n\nexport interface SignOutFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.SignOutFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: CustomerStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: CustomerStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: CustomerStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: CustomerStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.DeinitializeFailed;\n}\n\nexport interface WidgetInteractionStartedAction extends Action {\n    type: CustomerStrategyActionType.WidgetInteractionStarted;\n}\n\nexport interface WidgetInteractionFinishedAction extends Action {\n    type: CustomerStrategyActionType.WidgetInteractionFinished;\n}\n\nexport interface WidgetInteractionFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.WidgetInteractionFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadOrderPaymentsAction } from '../order';\n\nexport enum PaymentStrategyActionType {\n    ExecuteFailed = 'PAYMENT_STRATEGY_EXECUTE_FAILED',\n    ExecuteRequested = 'PAYMENT_STRATEGY_EXECUTE_REQUESTED',\n    ExecuteSucceeded = 'PAYMENT_STRATEGY_EXECUTE_SUCCEEDED',\n    FinalizeFailed = 'PAYMENT_STRATEGY_FINALIZE_FAILED',\n    FinalizeRequested = 'PAYMENT_STRATEGY_FINALIZE_REQUESTED',\n    FinalizeSucceeded = 'PAYMENT_STRATEGY_FINALIZE_SUCCEEDED',\n    InitializeFailed = 'PAYMENT_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'PAYMENT_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'PAYMENT_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'PAYMENT_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'PAYMENT_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'PAYMENT_STRATEGY_DEINITIALIZE_SUCCEEDED',\n    WidgetInteractionStarted = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_STARTED',\n    WidgetInteractionFinished = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_FINISHED',\n    WidgetInteractionFailed = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_FAILED',\n}\n\nexport type PaymentStrategyAction =\n    PaymentStrategyExecuteAction |\n    PaymentStrategyFinalizeAction |\n    PaymentStrategyInitializeAction |\n    PaymentStrategyDeinitializeAction |\n    PaymentStrategyWidgetAction;\n\nexport type PaymentStrategyExecuteAction =\n    ExecuteRequestedAction |\n    ExecuteSucceededAction |\n    ExecuteFailedAction |\n    LoadOrderPaymentsAction;\n\nexport type PaymentStrategyFinalizeAction =\n    FinalizeRequestedAction |\n    FinalizeSucceededAction |\n    FinalizeFailedAction |\n    LoadOrderPaymentsAction;\n\nexport type PaymentStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type PaymentStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport type PaymentStrategyWidgetAction =\n    WidgetInteractionStartedAction |\n    WidgetInteractionFinishedAction |\n    WidgetInteractionFailedAction;\n\nexport interface ExecuteRequestedAction extends Action {\n    type: PaymentStrategyActionType.ExecuteRequested;\n}\n\nexport interface ExecuteSucceededAction extends Action {\n    type: PaymentStrategyActionType.ExecuteSucceeded;\n}\n\nexport interface ExecuteFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.ExecuteFailed;\n}\n\nexport interface FinalizeRequestedAction extends Action {\n    type: PaymentStrategyActionType.FinalizeRequested;\n}\n\nexport interface FinalizeSucceededAction extends Action {\n    type: PaymentStrategyActionType.FinalizeSucceeded;\n}\n\nexport interface FinalizeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.FinalizeFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: PaymentStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: PaymentStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: PaymentStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: PaymentStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.DeinitializeFailed;\n}\n\nexport interface WidgetInteractionStartedAction extends Action {\n    type: PaymentStrategyActionType.WidgetInteractionStarted;\n}\n\nexport interface WidgetInteractionFinishedAction extends Action {\n    type: PaymentStrategyActionType.WidgetInteractionFinished;\n}\n\nexport interface WidgetInteractionFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.WidgetInteractionFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum ShippingStrategyActionType {\n    UpdateAddressFailed = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_FAILED',\n    UpdateAddressRequested = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_REQUESTED',\n    UpdateAddressSucceeded = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_SUCCEEDED',\n    SelectOptionFailed = 'SHIPPING_STRATEGY_SELECT_OPTION_FAILED',\n    SelectOptionRequested = 'SHIPPING_STRATEGY_SELECT_OPTION_REQUESTED',\n    SelectOptionSucceeded = 'SHIPPING_STRATEGY_SELECT_OPTION_SUCCEEDED',\n    InitializeFailed = 'SHIPPING_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'SHIPPING_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'SHIPPING_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'SHIPPING_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'SHIPPING_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'SHIPPING_STRATEGY_DEINITIALIZE_SUCCEEDED',\n}\n\nexport type ShippingStrategyAction =\n    ShippingStrategyUpdateAddressAction |\n    ShippingStrategySelectOptionAction |\n    ShippingStrategyInitializeAction |\n    ShippingStrategyDeinitializeAction;\n\nexport type ShippingStrategyUpdateAddressAction =\n    UpdateAddressRequestedAction |\n    UpdateAddressSucceededAction |\n    UpdateAddressFailedAction;\n\nexport type ShippingStrategySelectOptionAction =\n    SelectOptionRequestedAction |\n    SelectOptionSucceededAction |\n    SelectOptionFailedAction;\n\nexport type ShippingStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type ShippingStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport interface UpdateAddressRequestedAction extends Action {\n    type: ShippingStrategyActionType.UpdateAddressRequested;\n}\n\nexport interface UpdateAddressSucceededAction extends Action {\n    type: ShippingStrategyActionType.UpdateAddressSucceeded;\n}\n\nexport interface UpdateAddressFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.UpdateAddressFailed;\n}\n\nexport interface SelectOptionRequestedAction extends Action {\n    type: ShippingStrategyActionType.SelectOptionRequested;\n}\n\nexport interface SelectOptionSucceededAction extends Action {\n    type: ShippingStrategyActionType.SelectOptionSucceeded;\n}\n\nexport interface SelectOptionFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.SelectOptionFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: ShippingStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: ShippingStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: ShippingStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: ShippingStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.DeinitializeFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\nimport { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nexport enum CouponActionType {\n    ApplyCouponRequested = 'APPLY_COUPON_REQUESTED',\n    ApplyCouponSucceeded = 'APPLY_COUPON_SUCCEEDED',\n    ApplyCouponFailed = 'APPLY_COUPON_FAILED',\n\n    RemoveCouponRequested = 'REMOVE_COUPON_REQUESTED',\n    RemoveCouponSucceeded = 'REMOVE_COUPON_SUCCEEDED',\n    RemoveCouponFailed = 'REMOVE_COUPON_FAILED',\n}\n\nexport type CouponAction =\n    ApplyCouponAction |\n    RemoveCouponAction;\n\nexport type ApplyCouponAction =\n    ApplyCouponRequestedAction |\n    ApplyCouponSucceededAction |\n    ApplyCouponFailedAction;\n\nexport type RemoveCouponAction =\n    RemoveCouponRequestedAction |\n    RemoveCouponSucceededAction |\n    RemoveCouponFailedAction;\n\nexport interface ApplyCouponRequestedAction extends Action {\n    type: CouponActionType.ApplyCouponRequested;\n}\n\nexport interface ApplyCouponSucceededAction extends Action<Checkout> {\n    type: CouponActionType.ApplyCouponSucceeded;\n}\n\nexport interface ApplyCouponFailedAction extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: CouponActionType.ApplyCouponFailed;\n}\n\nexport interface RemoveCouponRequestedAction extends Action {\n    type: CouponActionType.RemoveCouponRequested;\n}\n\nexport interface RemoveCouponSucceededAction extends Action<Checkout> {\n    type: CouponActionType.RemoveCouponSucceeded;\n}\n\nexport interface RemoveCouponFailedAction extends Action<RequestError> {\n    type: CouponActionType.RemoveCouponFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { InternalOrderResponseData } from './internal-order-responses';\nimport Order from './order';\n\nexport enum OrderActionType {\n    LoadOrderRequested = 'LOAD_ORDER_REQUESTED',\n    LoadOrderSucceeded = 'LOAD_ORDER_SUCCEEDED',\n    LoadOrderFailed = 'LOAD_ORDER_FAILED',\n\n    LoadOrderPaymentsRequested = 'LOAD_ORDER_PAYMENTS_REQUESTED',\n    LoadOrderPaymentsSucceeded = 'LOAD_ORDER_PAYMENTS_SUCCEEDED',\n    LoadOrderPaymentsFailed = 'LOAD_ORDER_PAYMENTS_FAILED',\n\n    SubmitOrderRequested = 'SUBMIT_ORDER_REQUESTED',\n    SubmitOrderSucceeded = 'SUBMIT_ORDER_SUCCEEDED',\n    SubmitOrderFailed = 'SUBMIT_ORDER_FAILED',\n\n    FinalizeOrderRequested = 'FINALIZE_ORDER_REQUESTED',\n    FinalizeOrderSucceeded = 'FINALIZE_ORDER_SUCCEEDED',\n    FinalizeOrderFailed = 'FINALIZE_ORDER_FAILED',\n}\n\nexport type OrderAction = LoadOrderAction |\n    LoadOrderPaymentsAction |\n    SubmitOrderAction |\n    FinalizeOrderAction;\n\nexport type LoadOrderPaymentsAction = LoadOrderPaymentsRequestedAction |\n    LoadOrderPaymentsSucceededAction |\n    LoadOrderPaymentsFailedAction;\n\nexport type LoadOrderAction =\n    LoadOrderRequestedAction |\n    LoadOrderSucceededAction |\n    LoadOrderFailedAction;\n\nexport type SubmitOrderAction =\n    SubmitOrderRequestedAction |\n    SubmitOrderSucceededAction |\n    SubmitOrderFailedAction |\n    LoadOrderAction;\n\nexport type FinalizeOrderAction =\n    FinalizeOrderRequestedAction |\n    FinalizeOrderSucceededAction |\n    FinalizeOrderFailedAction |\n    LoadOrderAction;\n\nexport interface LoadOrderRequestedAction extends Action {\n    type: OrderActionType.LoadOrderRequested;\n}\n\nexport interface LoadOrderSucceededAction extends Action<Order> {\n    type: OrderActionType.LoadOrderSucceeded;\n}\n\nexport interface LoadOrderFailedAction extends Action<Error> {\n    type: OrderActionType.LoadOrderFailed;\n}\n\nexport interface LoadOrderPaymentsRequestedAction extends Action {\n    type: OrderActionType.LoadOrderPaymentsRequested;\n}\n\nexport interface LoadOrderPaymentsSucceededAction extends Action<Order> {\n    type: OrderActionType.LoadOrderPaymentsSucceeded;\n}\n\nexport interface LoadOrderPaymentsFailedAction extends Action<Error> {\n    type: OrderActionType.LoadOrderPaymentsFailed;\n}\n\nexport interface SubmitOrderRequestedAction extends Action {\n    type: OrderActionType.SubmitOrderRequested;\n}\n\nexport interface SubmitOrderSucceededAction extends Action<InternalOrderResponseData> {\n    type: OrderActionType.SubmitOrderSucceeded;\n}\n\nexport interface SubmitOrderFailedAction extends Action<Error> {\n    type: OrderActionType.SubmitOrderFailed;\n}\n\nexport interface FinalizeOrderRequestedAction extends Action {\n    type: OrderActionType.FinalizeOrderRequested;\n}\n\nexport interface FinalizeOrderSucceededAction extends Action<InternalOrderResponseData> {\n    type: OrderActionType.FinalizeOrderSucceeded;\n}\n\nexport interface FinalizeOrderFailedAction extends Action<Error> {\n    type: OrderActionType.FinalizeOrderFailed;\n}\n","import { setPrototypeOf } from '../../utility';\n\nimport CustomError from './custom-error';\n\nexport default class StandardError extends Error implements CustomError {\n    type = 'standard';\n\n    constructor(message?: string) {\n        super(message || 'An unexpected error has occurred.');\n\n        setPrototypeOf(this, new.target.prototype);\n\n        if (typeof Error.captureStackTrace === 'function') {\n            Error.captureStackTrace(this, new.target);\n        } else {\n            this.stack = (new Error(this.message)).stack;\n        }\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nexport enum BillingAddressActionType {\n    UpdateBillingAddressRequested = 'UPDATE_BILLING_ADDRESS_REQUESTED',\n    UpdateBillingAddressSucceeded = 'UPDATE_BILLING_ADDRESS_SUCCEEDED',\n    UpdateBillingAddressFailed = 'UPDATE_BILLING_ADDRESS_FAILED',\n\n    ContinueAsGuestRequested = 'CONTINUE_AS_GUEST_REQUESTED',\n    ContinueAsGuestSucceeded = 'CONTINUE_AS_GUEST_SUCCEEDED',\n    ContinueAsGuestFailed = 'CONTINUE_AS_GUEST_FAILED',\n}\n\nexport type BillingAddressAction =\n    ContinueAsGuestAction |\n    UpdateBillingAddressAction;\n\nexport type UpdateBillingAddressAction =\n    UpdateBillingAddressRequested |\n    UpdateBillingAddressSucceeded |\n    UpdateBillingAddressFailed;\n\nexport type ContinueAsGuestAction =\n    ContinueAsGuestRequested |\n    ContinueAsGuestSucceeded |\n    ContinueAsGuestFailed;\n\nexport interface UpdateBillingAddressRequested extends Action {\n    type: BillingAddressActionType.UpdateBillingAddressRequested;\n}\n\nexport interface UpdateBillingAddressSucceeded extends Action<Checkout> {\n    type: BillingAddressActionType.UpdateBillingAddressSucceeded;\n}\n\nexport interface UpdateBillingAddressFailed extends Action<Error> {\n    type: BillingAddressActionType.UpdateBillingAddressFailed;\n}\n\nexport interface ContinueAsGuestRequested extends Action {\n    type: BillingAddressActionType.ContinueAsGuestRequested;\n}\n\nexport interface ContinueAsGuestSucceeded extends Action<Checkout> {\n    type: BillingAddressActionType.ContinueAsGuestSucceeded;\n}\n\nexport interface ContinueAsGuestFailed extends Action<Error> {\n    type: BillingAddressActionType.ContinueAsGuestFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\nimport { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nexport enum GiftCertificateActionType {\n    ApplyGiftCertificateRequested = 'APPLY_GIFT_CERTIFICATE_REQUESTED',\n    ApplyGiftCertificateSucceeded = 'APPLY_GIFT_CERTIFICATE_SUCCEEDED',\n    ApplyGiftCertificateFailed = 'APPLY_GIFT_CERTIFICATE_FAILED',\n\n    RemoveGiftCertificateRequested = 'REMOVE_GIFT_CERTIFICATE_REQUESTED',\n    RemoveGiftCertificateSucceeded = 'REMOVE_GIFT_CERTIFICATE_SUCCEEDED',\n    RemoveGiftCertificateFailed = 'REMOVE_GIFT_CERTIFICATE_FAILED',\n}\n\nexport type GiftCertificateAction =\n    ApplyGiftCertificateAction |\n    RemoveGiftCertificateAction;\n\nexport type ApplyGiftCertificateAction =\n    ApplyGiftCertificateRequestedAction |\n    ApplyGiftCertificateSucceededAction |\n    ApplyGiftCertificateFailedAction;\n\nexport type RemoveGiftCertificateAction =\n    RemoveGiftCertificateRequestedAction |\n    RemoveGiftCertificateSucceededAction |\n    RemoveGiftCertificateFailedAction;\n\nexport interface ApplyGiftCertificateRequestedAction extends Action {\n    type: GiftCertificateActionType.ApplyGiftCertificateRequested;\n}\n\nexport interface ApplyGiftCertificateSucceededAction extends Action<Checkout> {\n    type: GiftCertificateActionType.ApplyGiftCertificateSucceeded;\n}\n\nexport interface ApplyGiftCertificateFailedAction extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: GiftCertificateActionType.ApplyGiftCertificateFailed;\n}\n\nexport interface RemoveGiftCertificateRequestedAction extends Action {\n    type: GiftCertificateActionType.RemoveGiftCertificateRequested;\n}\n\nexport interface RemoveGiftCertificateSucceededAction extends Action<Checkout> {\n    type: GiftCertificateActionType.RemoveGiftCertificateSucceeded;\n}\n\nexport interface RemoveGiftCertificateFailedAction extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: GiftCertificateActionType.RemoveGiftCertificateFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport PaymentMethod from './payment-method';\nimport PaymentMethodMeta from './payment-method-meta';\n\nexport enum PaymentMethodActionType {\n    LoadPaymentMethodRequested = 'LOAD_PAYMENT_METHOD_REQUESTED',\n    LoadPaymentMethodSucceeded = 'LOAD_PAYMENT_METHOD_SUCCEEDED',\n    LoadPaymentMethodFailed = 'LOAD_PAYMENT_METHOD_FAILED',\n\n    LoadPaymentMethodsRequested = 'LOAD_PAYMENT_METHODS_REQUESTED',\n    LoadPaymentMethodsSucceeded = 'LOAD_PAYMENT_METHODS_SUCCEEDED',\n    LoadPaymentMethodsFailed = 'LOAD_PAYMENT_METHODS_FAILED',\n}\n\nexport type PaymentMethodAction = LoadPaymentMethodAction | LoadPaymentMethodsAction;\n\nexport type LoadPaymentMethodAction =\n    LoadPaymentMethodRequestedAction |\n    LoadPaymentMethodSucceededAction |\n    LoadPaymentMethodFailedAction;\n\nexport type LoadPaymentMethodsAction =\n    LoadPaymentMethodsRequestedAction |\n    LoadPaymentMethodsSucceededAction |\n    LoadPaymentMethodsFailedAction;\n\nexport interface LoadPaymentMethodRequestedAction extends Action {\n    type: PaymentMethodActionType.LoadPaymentMethodRequested;\n}\n\nexport interface LoadPaymentMethodSucceededAction extends Action<PaymentMethod> {\n    type: PaymentMethodActionType.LoadPaymentMethodSucceeded;\n}\n\nexport interface LoadPaymentMethodFailedAction extends Action<Error> {\n    type: PaymentMethodActionType.LoadPaymentMethodFailed;\n}\n\nexport interface LoadPaymentMethodsRequestedAction extends Action {\n    type: PaymentMethodActionType.LoadPaymentMethodsRequested;\n}\n\nexport interface LoadPaymentMethodsSucceededAction extends Action<PaymentMethod[], PaymentMethodMeta> {\n    type: PaymentMethodActionType.LoadPaymentMethodsSucceeded;\n}\n\nexport interface LoadPaymentMethodsFailedAction extends Action<Error> {\n    type: PaymentMethodActionType.LoadPaymentMethodsFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadPaymentMethodAction } from '../payment';\n\nimport { CheckoutButtonMethodType } from './strategies';\n\nexport enum CheckoutButtonActionType {\n    InitializeButtonFailed = 'INITIALIZE_BUTTON_FAILED',\n    InitializeButtonRequested = 'INITIALIZE_BUTTON_REQUESTED',\n    InitializeButtonSucceeded = 'INITIALIZE_BUTTON_SUCCEEDED',\n\n    DeinitializeButtonFailed = 'DEINITIALIZE_BUTTON_FAILED',\n    DeinitializeButtonRequested = 'DEINITIALIZE_BUTTON_REQUESTED',\n    DeinitializeButtonSucceeded = 'DEINITIALIZE_BUTTON_SUCCEEDED',\n}\n\nexport type CheckoutButtonAction = InitializeButtonAction | DeinitializeButtonAction;\n\nexport type InitializeButtonAction =\n    InitializeButtonRequestedAction |\n    InitializeButtonSucceededAction |\n    InitializeButtonFailedAction |\n    LoadPaymentMethodAction;\n\nexport type DeinitializeButtonAction =\n    DeinitializeButtonRequestedAction |\n    DeinitializeButtonSucceededAction |\n    DeinitializeButtonFailedAction;\n\nexport interface CheckoutButtonActionMeta {\n    methodId: CheckoutButtonMethodType;\n}\n\nexport interface InitializeButtonActionMeta extends CheckoutButtonActionMeta {\n    containerId: string;\n}\n\nexport interface InitializeButtonRequestedAction extends Action<undefined, InitializeButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonRequested;\n}\n\nexport interface InitializeButtonSucceededAction extends Action<undefined, InitializeButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonSucceeded;\n}\n\nexport interface InitializeButtonFailedAction extends Action<Error, InitializeButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonFailed;\n}\n\nexport interface DeinitializeButtonRequestedAction extends Action<undefined, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonRequested;\n}\n\nexport interface DeinitializeButtonSucceededAction extends Action<undefined, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonSucceeded;\n}\n\nexport interface DeinitializeButtonFailedAction extends Action<Error, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { InstrumentsResponseBody } from './instrument-response-body';\n\nexport enum InstrumentActionType {\n    LoadInstrumentsRequested = 'LOAD_INSTRUMENTS_REQUESTED',\n    LoadInstrumentsSucceeded = 'LOAD_INSTRUMENTS_SUCCEEDED',\n    LoadInstrumentsFailed = 'LOAD_INSTRUMENTS_FAILED',\n\n    DeleteInstrumentRequested = 'DELETE_INSTRUMENT_REQUESTED',\n    DeleteInstrumentSucceeded = 'DELETE_INSTRUMENT_SUCCEEDED',\n    DeleteInstrumentFailed = 'DELETE_INSTRUMENT_FAILED',\n}\n\nexport type InstrumentAction =\n    LoadInstrumentsAction |\n    DeleteInstrumentAction;\n\nexport type LoadInstrumentsAction =\n    LoadInstrumentsRequestedAction |\n    LoadInstrumentsSucceededAction |\n    LoadInstrumentsFailedAction;\n\nexport type DeleteInstrumentAction =\n    DeleteInstrumentRequestedAction |\n    DeleteInstrumentSucceededAction |\n    DeleteInstrumentFailedAction;\n\nexport interface LoadInstrumentsRequestedAction extends Action {\n    type: InstrumentActionType.LoadInstrumentsRequested;\n}\n\nexport interface LoadInstrumentsSucceededAction extends Action<InstrumentsResponseBody> {\n    type: InstrumentActionType.LoadInstrumentsSucceeded;\n}\n\nexport interface LoadInstrumentsFailedAction extends Action<Error> {\n    type: InstrumentActionType.LoadInstrumentsFailed;\n}\n\nexport interface DeleteInstrumentRequestedAction extends Action {\n    type: InstrumentActionType.DeleteInstrumentRequested;\n}\n\nexport interface DeleteInstrumentSucceededAction extends Action<InstrumentsResponseBody> {\n    type: InstrumentActionType.DeleteInstrumentSucceeded;\n}\n\nexport interface DeleteInstrumentFailedAction extends Action<Error> {\n    type: InstrumentActionType.DeleteInstrumentFailed;\n}\n","module.exports = require(\"rxjs/operators\");","import EmbeddedCheckoutError from './embedded-checkout-error';\nimport EmbeddedContentOptions from './iframe-content/embedded-content-options';\n\nexport enum EmbeddedCheckoutEventType {\n    CheckoutComplete = 'CHECKOUT_COMPLETE',\n    CheckoutError = 'CHECKOUT_ERROR',\n    CheckoutLoaded = 'CHECKOUT_LOADED',\n    FrameError = 'FRAME_ERROR',\n    FrameLoaded = 'FRAME_LOADED',\n    SignedOut = 'SIGNED_OUT',\n}\n\nexport interface EmbeddedCheckoutEventMap {\n    [EmbeddedCheckoutEventType.CheckoutComplete]: EmbeddedCheckoutCompleteEvent;\n    [EmbeddedCheckoutEventType.CheckoutError]: EmbeddedCheckoutErrorEvent;\n    [EmbeddedCheckoutEventType.CheckoutLoaded]: EmbeddedCheckoutLoadedEvent;\n    [EmbeddedCheckoutEventType.FrameError]: EmbeddedCheckoutFrameErrorEvent;\n    [EmbeddedCheckoutEventType.FrameLoaded]: EmbeddedCheckoutFrameLoadedEvent;\n    [EmbeddedCheckoutEventType.SignedOut]: EmbeddedCheckoutSignedOutEvent;\n}\n\nexport type EmbeddedCheckoutEvent = (\n    EmbeddedCheckoutCompleteEvent |\n    EmbeddedCheckoutErrorEvent |\n    EmbeddedCheckoutFrameErrorEvent |\n    EmbeddedCheckoutFrameLoadedEvent |\n    EmbeddedCheckoutLoadedEvent |\n    EmbeddedCheckoutSignedOutEvent\n);\n\nexport interface EmbeddedCheckoutCompleteEvent {\n    type: EmbeddedCheckoutEventType.CheckoutComplete;\n}\n\nexport interface EmbeddedCheckoutErrorEvent {\n    type: EmbeddedCheckoutEventType.CheckoutError;\n    payload: EmbeddedCheckoutError;\n}\n\nexport interface EmbeddedCheckoutLoadedEvent {\n    type: EmbeddedCheckoutEventType.CheckoutLoaded;\n}\n\nexport interface EmbeddedCheckoutFrameErrorEvent {\n    type: EmbeddedCheckoutEventType.FrameError;\n    payload: EmbeddedCheckoutError;\n}\n\nexport interface EmbeddedCheckoutFrameLoadedEvent {\n    type: EmbeddedCheckoutEventType.FrameLoaded;\n    payload?: EmbeddedContentOptions;\n}\n\nexport interface EmbeddedCheckoutSignedOutEvent {\n    type: EmbeddedCheckoutEventType.SignedOut;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { AmazonPayRemoteCheckout } from './methods';\n\nexport enum RemoteCheckoutActionType {\n    InitializeRemoteBillingRequested = 'INITIALIZE_REMOTE_BILLING_REQUESTED',\n    InitializeRemoteBillingSucceeded = 'INITIALIZE_REMOTE_BILLING_SUCCEEDED',\n    InitializeRemoteBillingFailed = 'INITIALIZE_REMOTE_BILLING_FAILED',\n\n    InitializeRemoteShippingRequested = 'INITIALIZE_REMOTE_SHIPPING_REQUESTED',\n    InitializeRemoteShippingSucceeded = 'INITIALIZE_REMOTE_SHIPPING_SUCCEEDED',\n    InitializeRemoteShippingFailed = 'INITIALIZE_REMOTE_SHIPPING_FAILED',\n\n    InitializeRemotePaymentRequested = 'INITIALIZE_REMOTE_PAYMENT_REQUESTED',\n    InitializeRemotePaymentSucceeded = 'INITIALIZE_REMOTE_PAYMENT_SUCCEEDED',\n    InitializeRemotePaymentFailed = 'INITIALIZE_REMOTE_PAYMENT_FAILED',\n\n    LoadRemoteSettingsRequested = 'LOAD_REMOTE_SETTINGS_REQUESTED',\n    LoadRemoteSettingsSucceeded = 'LOAD_REMOTE_SETTINGS_SUCCEEDED',\n    LoadRemoteSettingsFailed = 'LOAD_REMOTE_SETTINGS_FAILED',\n\n    SignOutRemoteCustomerRequested = 'SIGN_OUT_REMOTE_CUSTOMER_REQUESTED',\n    SignOutRemoteCustomerSucceeded = 'SIGN_OUT_REMOTE_CUSTOMER_SUCCEEDED',\n    SignOutRemoteCustomerFailed = 'SIGN_OUT_REMOTE_CUSTOMER_FAILED',\n\n    UpdateRemoteCheckout = 'UPDATE_REMOTE_CHECKOUT',\n}\n\nexport type RemoteCheckoutAction = InitializeRemoteBillingAction |\n    InitializeRemoteShippingAction |\n    InitializeRemotePaymentAction |\n    SignOutRemoteCustomerAction |\n    LoadRemoteSettingsAction |\n    UpdateRemoteCheckoutAction;\n\nexport type InitializeRemoteBillingAction = InitializeRemoteBillingSucceededAction |\n    InitializeRemoteBillingFailedAction |\n    InitializeRemoteBillingRequestedAction;\n\nexport interface InitializeRemoteBillingSucceededAction extends Action<AmazonPayRemoteCheckout> {\n    type: RemoteCheckoutActionType.InitializeRemoteBillingSucceeded;\n}\n\nexport interface InitializeRemoteBillingFailedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteBillingFailed;\n}\n\nexport interface InitializeRemoteBillingRequestedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteBillingRequested;\n}\n\nexport type InitializeRemoteShippingAction = InitializeRemoteShippingSucceededAction |\n    InitializeRemoteShippingFailedAction |\n    InitializeRemoteShippingRequestedAction;\n\nexport interface InitializeRemoteShippingSucceededAction extends Action<AmazonPayRemoteCheckout> {\n    type: RemoteCheckoutActionType.InitializeRemoteShippingSucceeded;\n}\n\nexport interface InitializeRemoteShippingFailedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteShippingFailed;\n}\n\nexport interface InitializeRemoteShippingRequestedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteShippingRequested;\n}\n\nexport type InitializeRemotePaymentAction = InitializeRemotePaymentSucceededAction |\n    InitializeRemotePaymentFailedAction |\n    InitializeRemotePaymentRequestedAction;\n\nexport interface InitializeRemotePaymentSucceededAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemotePaymentSucceeded;\n}\n\nexport interface InitializeRemotePaymentFailedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemotePaymentFailed;\n}\n\nexport interface InitializeRemotePaymentRequestedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemotePaymentRequested;\n}\n\nexport type SignOutRemoteCustomerAction = SignOutRemoteCustomerSucceededAction |\n    SignOutRemoteCustomerFailedAction |\n    SignOutRemoteCustomerRequestedAction;\n\nexport interface SignOutRemoteCustomerSucceededAction extends Action {\n    type: RemoteCheckoutActionType.SignOutRemoteCustomerSucceeded;\n}\n\nexport interface SignOutRemoteCustomerFailedAction extends Action {\n    type: RemoteCheckoutActionType.SignOutRemoteCustomerFailed;\n}\n\nexport interface SignOutRemoteCustomerRequestedAction extends Action {\n    type: RemoteCheckoutActionType.SignOutRemoteCustomerRequested;\n}\n\nexport type LoadRemoteSettingsAction = LoadRemoteSettingsSucceededAction |\n    LoadRemoteSettingsRequestedAction |\n    LoadRemoteSettingsFailedAction;\n\nexport interface LoadRemoteSettingsSucceededAction extends Action {\n    type: RemoteCheckoutActionType.LoadRemoteSettingsSucceeded;\n}\n\nexport interface LoadRemoteSettingsRequestedAction extends Action {\n    type: RemoteCheckoutActionType.LoadRemoteSettingsRequested;\n}\n\nexport interface LoadRemoteSettingsFailedAction extends Action {\n    type: RemoteCheckoutActionType.LoadRemoteSettingsFailed;\n}\n\nexport interface UpdateRemoteCheckoutAction extends Action {\n    type: RemoteCheckoutActionType.UpdateRemoteCheckout;\n}\n","import { ClearErrorAction, ErrorActionType } from './error-actions';\n\nexport default class ErrorActionCreator {\n    clearError(error: Error): ClearErrorAction {\n        return {\n            type: ErrorActionType.ClearError,\n            payload: error,\n        };\n    }\n}\n","import { createAction, createErrorAction, Action } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport Country from './country';\nimport { CountryActionType } from './country-actions';\nimport CountryRequestSender from './country-request-sender';\n\nexport default class CountryActionCreator {\n    constructor(\n        private _countryRequestSender: CountryRequestSender\n    ) {}\n\n    loadCountries(options?: RequestOptions): Observable<Action<Country[]>> {\n        return Observable.create((observer: Observer<Action<Country[]>>) => {\n            observer.next(createAction(CountryActionType.LoadCountriesRequested));\n\n            this._countryRequestSender.loadCountries(options)\n                .then(response => {\n                    observer.next(createAction(CountryActionType.LoadCountriesSucceeded, response.body.data));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CountryActionType.LoadCountriesFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport { CountryResponseBody } from './country-responses';\n\nexport default class CountryRequestSender {\n    constructor(\n        private _requestSender: RequestSender,\n        private _config: { locale?: string }\n    ) {}\n\n    loadCountries({ timeout }: RequestOptions = {}): Promise<Response<CountryResponseBody>> {\n        const url = '/internalapi/v1/store/countries';\n        const headers = {\n            'Accept-Language': this._config.locale,\n        };\n\n        return this._requestSender.get(url, { headers, timeout });\n    }\n}\n","enum PaymentStrategyType {\n    AFTERPAY = 'afterpay',\n    AMAZON = 'amazon',\n    CREDIT_CARD = 'creditcard',\n    KLARNA = 'klarna',\n    LEGACY = 'legacy',\n    OFFLINE = 'offline',\n    OFFSITE = 'offsite',\n    PAYPAL = 'paypal',\n    PAYPAL_EXPRESS = 'paypalexpress',\n    PAYPAL_EXPRESS_CREDIT = 'paypalexpresscredit',\n    SAGE_PAY = 'sagepay',\n    SQUARE = 'squarev2',\n    NO_PAYMENT_DATA_REQUIRED = 'nopaymentdatarequired',\n    BRAINTREE = 'braintree',\n    BRAINTREE_PAYPAL = 'braintreepaypal',\n    BRAINTREE_PAYPAL_CREDIT = 'braintreepaypalcredit',\n    BRAINTREE_VISA_CHECKOUT = 'braintreevisacheckout',\n    BRAINTREE_GOOGLE_PAY = 'googlepaybraintree',\n    CHASE_PAY = 'chasepay',\n    WE_PAY = 'wepay',\n    MASTERPASS = 'masterpass',\n    STRIPE_GOOGLE_PAY = 'googlepaystripe',\n}\n\nexport default PaymentStrategyType;\n","import { StandardError } from '../../common/error/errors';\n\nexport default class OrderFinalizationNotRequiredError extends StandardError {\n    constructor() {\n        super('The current order does not need to be finalized at this stage.');\n\n        this.type = 'order_finalization_not_required';\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, empty, of, Observable, Observer } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { InternalCheckoutSelectors, ReadableCheckoutStore } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { LoadOrderPaymentsAction, OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../order';\nimport { OrderFinalizationNotRequiredError } from '../order/errors';\n\nimport { PaymentInitializeOptions, PaymentRequestOptions } from './payment-request-options';\nimport {\n    PaymentStrategyActionType,\n    PaymentStrategyDeinitializeAction,\n    PaymentStrategyExecuteAction,\n    PaymentStrategyFinalizeAction,\n    PaymentStrategyInitializeAction,\n    PaymentStrategyWidgetAction,\n} from './payment-strategy-actions';\nimport PaymentStrategyRegistry from './payment-strategy-registry';\nimport PaymentStrategyType from './payment-strategy-type';\nimport { PaymentStrategy } from './strategies';\n\nexport default class PaymentStrategyActionCreator {\n    constructor(\n        private _strategyRegistry: PaymentStrategyRegistry,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: RequestOptions): ThunkAction<PaymentStrategyExecuteAction, InternalCheckoutSelectors> {\n        return store => new Observable((observer: Observer<PaymentStrategyExecuteAction>) => {\n            const state = store.getState();\n            const { payment = {} as OrderPaymentRequestBody, useStoreCredit } = payload;\n            const meta = { methodId: payment.methodId };\n\n            let strategy: PaymentStrategy;\n\n            if (state.payment.isPaymentDataRequired(useStoreCredit)) {\n                const method = state.paymentMethods.getPaymentMethod(payment.methodId, payment.gatewayId);\n\n                if (!method) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                strategy = this._strategyRegistry.getByMethod(method);\n            } else {\n                strategy = this._strategyRegistry.get(PaymentStrategyType.NO_PAYMENT_DATA_REQUIRED);\n            }\n\n            observer.next(createAction(PaymentStrategyActionType.ExecuteRequested, undefined, meta));\n\n            strategy\n                .execute(payload, { ...options, methodId: payment.methodId, gatewayId: payment.gatewayId })\n                .then(() => {\n                    observer.next(createAction(PaymentStrategyActionType.ExecuteSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(PaymentStrategyActionType.ExecuteFailed, error, meta));\n                });\n        });\n    }\n\n    finalize(options?: RequestOptions): ThunkAction<PaymentStrategyFinalizeAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(PaymentStrategyActionType.FinalizeRequested)),\n            this._loadOrderPaymentsIfNeeded(store, options),\n            defer(() => {\n                const state = store.getState();\n                const payment = state.payment.getPaymentId();\n\n                if (!payment) {\n                    throw new OrderFinalizationNotRequiredError();\n                }\n\n                const method = state.paymentMethods.getPaymentMethod(payment.providerId, payment.gatewayId);\n\n                if (!method) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                return this._strategyRegistry.getByMethod(method)\n                    .finalize({ ...options, methodId: method.id, gatewayId: method.gateway })\n                    .then(() => createAction(PaymentStrategyActionType.FinalizeSucceeded, undefined, { methodId: payment.providerId }));\n            })\n        ).pipe(\n            catchError(error => {\n                const state = store.getState();\n                const payment = state.payment.getPaymentId();\n\n                return throwErrorAction(PaymentStrategyActionType.FinalizeFailed, error, { methodId: payment && payment.providerId });\n            })\n        );\n    }\n\n    initialize(options: PaymentInitializeOptions): ThunkAction<PaymentStrategyInitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<PaymentStrategyInitializeAction>) => {\n            const state = store.getState();\n            const { methodId, gatewayId } = options;\n            const method = state.paymentMethods.getPaymentMethod(methodId, gatewayId);\n\n            if (!method) {\n                throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n            }\n\n            if (methodId && state.paymentStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(PaymentStrategyActionType.InitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.getByMethod(method)\n                .initialize({ ...options, methodId, gatewayId })\n                .then(() => {\n                    observer.next(createAction(PaymentStrategyActionType.InitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(PaymentStrategyActionType.InitializeFailed, error, { methodId }));\n                });\n        });\n    }\n\n    deinitialize(options: PaymentRequestOptions): ThunkAction<PaymentStrategyDeinitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<PaymentStrategyDeinitializeAction>) => {\n            const state = store.getState();\n            const { methodId, gatewayId } = options;\n            const method = state.paymentMethods.getPaymentMethod(methodId, gatewayId);\n\n            if (!method) {\n                throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n            }\n\n            if (methodId && !state.paymentStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(PaymentStrategyActionType.DeinitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.getByMethod(method)\n                .deinitialize({ ...options, methodId, gatewayId })\n                .then(() => {\n                    observer.next(createAction(PaymentStrategyActionType.DeinitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(PaymentStrategyActionType.DeinitializeFailed, error, { methodId }));\n                });\n        });\n    }\n\n    widgetInteraction(method: () => Promise<any>, options?: PaymentRequestOptions): ThunkAction<PaymentStrategyWidgetAction> {\n        return store => Observable.create((observer: Observer<PaymentStrategyWidgetAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(PaymentStrategyActionType.WidgetInteractionStarted, undefined, meta));\n\n            method().then(() => {\n                observer.next(createAction(PaymentStrategyActionType.WidgetInteractionFinished, undefined, meta));\n                observer.complete();\n            })\n            .catch(error => {\n                observer.error(createErrorAction(PaymentStrategyActionType.WidgetInteractionFailed, error, meta));\n            });\n        });\n    }\n\n    private _loadOrderPaymentsIfNeeded(store: ReadableCheckoutStore, options?: RequestOptions): Observable<LoadOrderPaymentsAction> {\n        const state = store.getState();\n        const checkout = state.checkout.getCheckout();\n\n        if (checkout && checkout.orderId) {\n            return this._orderActionCreator.loadOrderPayments(checkout.orderId, options);\n        }\n\n        return empty();\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class CartChangedError extends StandardError {\n    constructor() {\n        super('An update to your shopping cart has been detected and your available shipping costs have been updated.');\n\n        this.type = 'cart_changed';\n    }\n}\n","import { isEqual, map } from 'lodash';\n\nimport { CartComparator } from '../cart';\nimport { CartChangedError } from '../cart/errors';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { Coupon, GiftCertificate } from '../coupon';\n\nimport Checkout from './checkout';\nimport CheckoutRequestSender from './checkout-request-sender';\n\nexport default class CheckoutValidator {\n    constructor(\n        private _checkoutRequestSender: CheckoutRequestSender\n    ) {}\n\n    validate(checkout?: Checkout, options?: RequestOptions): Promise<void> {\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        return this._checkoutRequestSender.loadCheckout(checkout.id, options)\n            .then(response => {\n                const comparator = new CartComparator();\n\n                if (checkout.grandTotal === response.body.grandTotal\n                    && this._compareCoupons(checkout.coupons, response.body.coupons)\n                    && this._compareGiftCertificates(checkout.giftCertificates, response.body.giftCertificates)\n                    && comparator.isEqual(checkout.cart, response.body.cart)\n                ) {\n                    return;\n                }\n\n                throw new CartChangedError();\n            });\n    }\n\n    private _compareCoupons(couponsA: Coupon[], couponsB: Coupon[]): boolean {\n        return isEqual(map(couponsA, 'code'), map(couponsB, 'code'));\n    }\n\n    private _compareGiftCertificates(giftCertificatesA: GiftCertificate[], giftCertificatesB: GiftCertificate[]): boolean {\n        return isEqual(map(giftCertificatesA, 'code'), map(giftCertificatesB, 'code'));\n    }\n}\n","import { PaymentInstrument, VaultedInstrument } from './payment';\n\nexport default function isVaultedInstrument(instrument: PaymentInstrument): instrument is VaultedInstrument {\n    return Boolean((instrument as VaultedInstrument).instrumentId);\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { pick } from 'lodash';\nimport { concat, from, of } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\n\nimport { mapToInternalAddress } from '../address';\nimport { mapToInternalCart } from '../cart';\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { StandardError } from '../common/error/errors';\nimport { mapToInternalCustomer } from '../customer';\nimport { mapToInternalOrder, OrderActionCreator } from '../order';\nimport { mapToInternalShippingOption } from '../shipping';\n\nimport isVaultedInstrument from './is-vaulted-instrument';\nimport Payment from './payment';\nimport { InitializeOffsitePaymentAction, PaymentActionType, SubmitPaymentAction } from './payment-actions';\nimport PaymentMethod from './payment-method';\nimport PaymentMethodSelector from './payment-method-selector';\nimport PaymentRequestBody from './payment-request-body';\nimport PaymentRequestSender from './payment-request-sender';\n\nexport default class PaymentActionCreator {\n    constructor(\n        private _paymentRequestSender: PaymentRequestSender,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    submitPayment(payment: Payment): ThunkAction<SubmitPaymentAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(PaymentActionType.SubmitPaymentRequested)),\n            from(this._paymentRequestSender.submitPayment(\n                this._getPaymentRequestBody(payment, store.getState())\n            ))\n                .pipe(\n                    switchMap(({ body }) => concat(\n                        this._orderActionCreator.loadCurrentOrder()(store),\n                        of(createAction(PaymentActionType.SubmitPaymentSucceeded, body))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(PaymentActionType.SubmitPaymentFailed, error))\n        );\n    }\n\n    initializeOffsitePayment(\n        methodId: string,\n        gatewayId?: string\n    ): ThunkAction<InitializeOffsitePaymentAction, InternalCheckoutSelectors> {\n        return store => {\n            const payload = this._getPaymentRequestBody({ gatewayId, methodId }, store.getState());\n\n            return concat(\n                of(createAction(PaymentActionType.InitializeOffsitePaymentRequested)),\n                this._paymentRequestSender.initializeOffsitePayment(payload)\n                    .then(() => createAction(PaymentActionType.InitializeOffsitePaymentSucceeded))\n            ).pipe(\n                catchError(error => throwErrorAction(PaymentActionType.InitializeOffsitePaymentFailed, error))\n            );\n        };\n    }\n\n    private _getPaymentRequestBody(payment: Payment, state: InternalCheckoutSelectors): PaymentRequestBody {\n        const billingAddress = state.billingAddress.getBillingAddress();\n        const checkout = state.checkout.getCheckout();\n        const customer = state.customer.getCustomer();\n        const order = state.order.getOrder();\n        const paymentMethod = this._getPaymentMethod(state.paymentMethods, payment.methodId, payment.gatewayId);\n        const shippingAddress = state.shippingAddress.getShippingAddress();\n        const consignments = state.consignments.getConsignments();\n        const shippingOption = state.consignments.getShippingOption();\n        const storeConfig = state.config.getStoreConfig();\n        const contextConfig = state.config.getContextConfig();\n        const instrumentMeta = state.instruments.getInstrumentsMeta();\n        const paymentMeta = state.paymentMethods.getPaymentMethodsMeta();\n        const orderMeta = state.order.getOrderMeta();\n        const internalCustomer = customer && billingAddress && mapToInternalCustomer(customer, billingAddress);\n\n        const authToken = instrumentMeta && payment.paymentData && isVaultedInstrument(payment.paymentData) ?\n            `${state.payment.getPaymentToken()}, ${instrumentMeta.vaultAccessToken}` :\n            state.payment.getPaymentToken();\n\n        if (!authToken) {\n            throw new StandardError();\n        }\n\n        return {\n            authToken,\n            paymentMethod,\n            customer: internalCustomer,\n            billingAddress: billingAddress && mapToInternalAddress(billingAddress),\n            shippingAddress: shippingAddress && mapToInternalAddress(shippingAddress, consignments),\n            shippingOption: shippingOption && mapToInternalShippingOption(shippingOption, true),\n            cart: checkout && mapToInternalCart(checkout),\n            order: order && mapToInternalOrder(order, orderMeta),\n            orderMeta,\n            payment: payment.paymentData,\n            quoteMeta: {\n                request: {\n                    ...paymentMeta,\n                    geoCountryCode: contextConfig && contextConfig.geoCountryCode,\n                },\n            },\n            source: 'bigcommerce-checkout-js-sdk',\n            store: pick(storeConfig && storeConfig.storeProfile, [\n                'storeHash',\n                'storeId',\n                'storeLanguage',\n                'storeName',\n            ]),\n        };\n    }\n\n    private _getPaymentMethod(\n        paymentMethodSelector: PaymentMethodSelector,\n        methodId: string,\n        gatewayId?: string\n    ): PaymentMethod | undefined {\n        const paymentMethod = paymentMethodSelector.getPaymentMethod(methodId, gatewayId);\n\n        if (!paymentMethod) {\n            return;\n        }\n\n        if (paymentMethod.method === 'multi-option' && !paymentMethod.gateway) {\n            return { ...paymentMethod, gateway: paymentMethod.id };\n        }\n\n        if (paymentMethod.initializationData && paymentMethod.initializationData.gateway) {\n            return { ...paymentMethod, id: paymentMethod.initializationData.gateway };\n        }\n\n        return paymentMethod;\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport PaymentRequestBody from './payment-request-body';\n\n/**\n * @todo Convert this file into TypeScript properly\n */\nexport default class PaymentRequestSender {\n    /**\n     * @constructor\n     * @param {BigpayClient} client\n     */\n    constructor(\n        private _client: any\n    ) {}\n\n    submitPayment(payload: PaymentRequestBody): Promise<Response> {\n        return new Promise((resolve, reject) => {\n            this._client.submitPayment(payload, (error: any, response: any) => {\n                if (error) {\n                    reject(this._transformResponse(error));\n                } else {\n                    resolve(this._transformResponse(response));\n                }\n            });\n        });\n    }\n\n    initializeOffsitePayment(payload: PaymentRequestBody): Promise<void> {\n        return new Promise(() => {\n            this._client.initializeOffsitePayment(payload);\n        });\n    }\n\n    private _transformResponse(response: any): Response {\n        return {\n            headers: {},\n            body: response.data,\n            status: response.status,\n            statusText: response.statusText,\n        };\n    }\n}\n","import { ReadableDataStore } from '@bigcommerce/data-store';\nimport { some } from 'lodash';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { Registry } from '../common/registry';\nimport { RegistryOptions } from '../common/registry/registry';\n\nimport PaymentMethod from './payment-method';\nimport * as paymentMethodTypes from './payment-method-types';\nimport PaymentStrategyType from './payment-strategy-type';\nimport PaymentStrategy from './strategies/payment-strategy';\n\nexport default class PaymentStrategyRegistry extends Registry<PaymentStrategy, PaymentStrategyType> {\n    constructor(\n        private _store: ReadableDataStore<InternalCheckoutSelectors>,\n        options?: PaymentStrategyRegistryOptions\n    ) {\n        super(options);\n    }\n\n    getByMethod(paymentMethod?: PaymentMethod): PaymentStrategy {\n        if (!paymentMethod) {\n            return this.get();\n        }\n\n        const token = this._getToken(paymentMethod);\n        const cacheToken = paymentMethod.gateway || paymentMethod.id;\n\n        return this.get(token, cacheToken);\n    }\n\n    private _getToken(paymentMethod: PaymentMethod): PaymentStrategyType {\n        const methodId = paymentMethod.gateway || paymentMethod.id;\n\n        if (this._hasFactoryForMethod(methodId)) {\n            return methodId;\n        }\n\n        if (paymentMethod.type === paymentMethodTypes.OFFLINE) {\n            return PaymentStrategyType.OFFLINE;\n        }\n\n        if (this._isLegacyMethod(paymentMethod)) {\n            return PaymentStrategyType.LEGACY;\n        }\n\n        if (paymentMethod.type === paymentMethodTypes.HOSTED) {\n            return PaymentStrategyType.OFFSITE;\n        }\n\n        return PaymentStrategyType.CREDIT_CARD;\n    }\n\n    private _hasFactoryForMethod(\n        methodId: string\n    ): methodId is PaymentStrategyType {\n        return this._hasFactory(methodId);\n    }\n\n    private _isLegacyMethod(paymentMethod: PaymentMethod): boolean {\n        const config = this._store.getState().config.getStoreConfig();\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        const { clientSidePaymentProviders } = config.paymentSettings;\n\n        if (!clientSidePaymentProviders || paymentMethod.gateway === 'adyen') {\n            return false;\n        }\n\n        return !some(clientSidePaymentProviders, id =>\n            paymentMethod.id === id || paymentMethod.gateway === id\n        );\n    }\n}\n\nexport interface PaymentStrategyRegistryOptions extends RegistryOptions {\n    clientSidePaymentProviders?: string[];\n}\n","import { InvalidArgumentError } from '../../common/error/errors';\n\nexport default class PaymentArgumentInvalidError extends InvalidArgumentError {\n    constructor(invalidFields?: string[]) {\n        let message = 'Unable to submit payment for the order because the payload is invalid.';\n\n        if (invalidFields) {\n            message = `${message} Make sure the following fields are provided correctly: ${invalidFields.join(', ')}.`;\n        }\n\n        super(message);\n    }\n}\n","import { CheckoutStore, CheckoutValidator, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport AfterpayScriptLoader from './afterpay-script-loader';\nimport AfterpaySdk from './afterpay-sdk';\n\nexport default class AfterpayPaymentStrategy implements PaymentStrategy {\n    private _afterpaySdk?: AfterpaySdk;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutValidator: CheckoutValidator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _afterpayScriptLoader: AfterpayScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId, options.gatewayId);\n        const config = state.config.getStoreConfig();\n        const storeCountryName = config ? config.storeProfile.storeCountry : '';\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._afterpayScriptLoader.load(paymentMethod, this._mapCountryToISO2(storeCountryName))\n            .then(afterpaySdk => {\n                this._afterpaySdk = afterpaySdk;\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._afterpaySdk) {\n            this._afterpaySdk = undefined;\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const paymentId = payload.payment && payload.payment.gatewayId;\n\n        if (!paymentId) {\n            throw new PaymentArgumentInvalidError(['payment.gatewayId']);\n        }\n\n        const useStoreCredit = !!payload.useStoreCredit;\n        const state = this._store.getState();\n        const config = state.config.getStoreConfig();\n        const storeCountryName = config ? config.storeProfile.storeCountry : '';\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.initializePayment(paymentId, { useStoreCredit })\n        )\n            .then(state => this._checkoutValidator.validate(state.checkout.getCheckout(), options))\n            .then(() => this._store.dispatch(\n                this._paymentMethodActionCreator.loadPaymentMethod(paymentId, options)\n            ))\n            .then(state => this._displayModal(storeCountryName, state.paymentMethods.getPaymentMethod(paymentId)))\n            // Afterpay will handle the rest of the flow so return a promise that doesn't really resolve\n            .then(() => new Promise<never>(() => {}));\n    }\n\n    finalize(options: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._remoteCheckoutActionCreator.loadSettings(options.methodId))\n            .then(state => {\n                const payment = state.payment.getPaymentId();\n                const config = state.config.getContextConfig();\n                const afterpay = state.remoteCheckout.getCheckout('afterpay');\n\n                if (!payment) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!config || !config.payment.token) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!afterpay || !afterpay.settings) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n\n                const orderPayload = {\n                    useStoreCredit: afterpay.settings.useStoreCredit,\n                };\n\n                const paymentPayload = {\n                    methodId: payment.providerId,\n                    paymentData: { nonce: config.payment.token },\n                };\n\n                return this._store.dispatch(this._orderActionCreator.submitOrder(orderPayload, options))\n                    .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment(paymentPayload)));\n            });\n    }\n\n    private _displayModal(countryName: string, paymentMethod?: PaymentMethod): void {\n        if (!this._afterpaySdk || !paymentMethod || !paymentMethod.clientToken) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        this._afterpaySdk.initialize({ countryCode: this._mapCountryToISO2(countryName)});\n        this._afterpaySdk.display({ token: paymentMethod.clientToken });\n    }\n\n    private _mapCountryToISO2(countryName: string): string {\n        switch (countryName) {\n        case 'Australia':\n            return 'AU';\n\n        case 'New Zealand':\n            return 'NZ';\n\n        case 'United States':\n            return 'US';\n\n        default:\n            return 'AU';\n        }\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport PaymentMethod from '../../payment-method';\n\nimport AfterpaySdk from './afterpay-sdk';\nimport AfterpayWindow from './afterpay-window';\n\ninterface AfterpayScripts {\n    PROD: string;\n    SANDBOX: string;\n}\n\nconst SCRIPTS_DEFAULT: AfterpayScripts = {\n    PROD: '//portal.afterpay.com/afterpay-async.js',\n    SANDBOX: '//portal-sandbox.afterpay.com/afterpay-async.js',\n};\n\nconst SCRIPTS_US: AfterpayScripts = {\n    PROD: '//portal.afterpay.com/afterpay-async.js',\n    SANDBOX: '//portal.us-sandbox.afterpay.com/afterpay-async.js',\n};\n\n/** Class responsible for loading the Afterpay SDK */\nexport default class AfterpayScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    /**\n     * Loads the appropriate Afterpay SDK depending on the payment method data.\n     * @param method the payment method data\n     */\n    load(method: PaymentMethod, countryCode: string): Promise<AfterpaySdk> {\n        const testMode = method.config.testMode || false;\n        const scriptURI = this._getScriptURI(countryCode, testMode);\n\n        return this._scriptLoader.loadScript(scriptURI)\n            .then(() => (window as AfterpayWindow).AfterPay);\n    }\n\n    private _getScriptURI(countryCode: string, testMode: boolean): string {\n        if (countryCode === 'US') {\n            return testMode ? SCRIPTS_US.SANDBOX : SCRIPTS_US.PROD;\n        }\n\n        return testMode ? SCRIPTS_DEFAULT.SANDBOX : SCRIPTS_DEFAULT.PROD;\n    }\n\n}\n","import { noop } from 'lodash';\n\nimport { isInternalAddressEqual, mapFromInternalAddress, mapToInternalAddress } from '../../../address';\nimport { BillingAddressActionCreator } from '../../../billing';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, RequestError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { RemoteCheckoutSynchronizationError } from '../../../remote-checkout/errors';\nimport PaymentMethod from '../../payment-method';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport AmazonPayOrderReference from './amazon-pay-order-reference';\nimport AmazonPayPaymentInitializeOptions from './amazon-pay-payment-initialize-options';\nimport AmazonPayScriptLoader from './amazon-pay-script-loader';\nimport AmazonPayWallet, { AmazonPayWalletOptions } from './amazon-pay-wallet';\nimport AmazonPayWindow from './amazon-pay-window';\n\nexport default class AmazonPayPaymentStrategy implements PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _walletOptions?: AmazonPayPaymentInitializeOptions;\n    private _window: AmazonPayWindow;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _scriptLoader: AmazonPayScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { amazon: amazonOptions, methodId } = options;\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n        if (!amazonOptions) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.amazon\" argument is not provided.');\n        }\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._walletOptions = amazonOptions;\n        this._paymentMethod = paymentMethod;\n\n        return new Promise((resolve, reject) => {\n            const onReady = () => {\n                this._createWallet(amazonOptions)\n                    .then(resolve)\n                    .catch(reject);\n            };\n\n            this._scriptLoader.loadWidget(paymentMethod, onReady)\n                .catch(reject);\n        })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._walletOptions = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const referenceId = this._getOrderReferenceId();\n\n        if (!referenceId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!payload.payment) {\n            throw new InvalidArgumentError('Unable to proceed because \"payload.payment.methodId\" argument is not provided.');\n        }\n\n        const { payment: { paymentData, ...paymentPayload }, useStoreCredit = false } = payload;\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.initializePayment(paymentPayload.methodId, { referenceId, useStoreCredit })\n        )\n            .then(() => this._store.dispatch(\n                this._orderActionCreator.submitOrder({\n                    ...payload,\n                    payment: paymentPayload,\n                }, options)\n            ))\n            .catch(error => {\n                if (error instanceof RequestError && error.body.type === 'provider_widget_error' && this._walletOptions) {\n                    return this._createWallet(this._walletOptions)\n                        .then(() => Promise.reject(error));\n                }\n\n                return Promise.reject(error);\n            });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _getMerchantId(): string | undefined {\n        return this._paymentMethod && this._paymentMethod.config.merchantId;\n    }\n\n    private _getOrderReferenceId(): string | undefined {\n        const state = this._store.getState();\n        const amazon = state.remoteCheckout.getCheckout('amazon');\n\n        return amazon ? amazon.referenceId : undefined;\n    }\n\n    private _createWallet(options: AmazonPayPaymentInitializeOptions): Promise<AmazonPayWallet> {\n        return new Promise((resolve, reject) => {\n            const { container, onError = noop, onPaymentSelect = noop, onReady = noop } = options;\n            const referenceId = this._getOrderReferenceId();\n            const merchantId = this._getMerchantId();\n\n            if (!document.getElementById(container)) {\n                return reject(new InvalidArgumentError('Unable to create AmazonPay Wallet widget without valid container ID.'));\n            }\n\n            if (!this._window.OffAmazonPayments) {\n                return reject(new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized));\n            }\n\n            if (!merchantId) {\n                return reject(new MissingDataError(MissingDataErrorType.MissingPaymentMethod));\n            }\n\n            const walletOptions: AmazonPayWalletOptions = {\n                amazonOrderReferenceId: referenceId,\n                design: { designMode: 'responsive' },\n                scope: 'payments:billing_address payments:shipping_address payments:widget profile',\n                sellerId: merchantId,\n                onError: error => {\n                    reject(error);\n                    onError(error);\n                },\n                onPaymentSelect: orderReference => {\n                    this._synchronizeBillingAddress()\n                        .then(() => onPaymentSelect(orderReference))\n                        .catch(onError);\n                },\n                onReady: orderReference => {\n                    resolve();\n                    onReady(orderReference);\n                },\n            };\n\n            if (!walletOptions.amazonOrderReferenceId) {\n                walletOptions.onReady = orderReference => {\n                    this._updateOrderReference(orderReference)\n                        .then(() => {\n                            resolve();\n                            onReady(orderReference);\n                        })\n                        .catch(onError);\n                };\n            }\n\n            const widget = new this._window.OffAmazonPayments.Widgets.Wallet(walletOptions);\n\n            widget.bind(container);\n\n            return widget;\n        });\n    }\n\n    private _synchronizeBillingAddress(): Promise<InternalCheckoutSelectors> {\n        const referenceId = this._getOrderReferenceId();\n        const methodId = this._paymentMethod && this._paymentMethod.id;\n\n        if (!methodId || !referenceId) {\n            throw new RemoteCheckoutSynchronizationError();\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.initializeBilling(methodId, { referenceId })\n        )\n            .then(state => {\n                const amazon = state.remoteCheckout.getCheckout('amazon');\n                const remoteAddress = amazon && amazon.billing && amazon.billing.address;\n                const billingAddress = state.billingAddress.getBillingAddress();\n                const internalBillingAddress = billingAddress && mapToInternalAddress(billingAddress);\n\n                if (remoteAddress === false) {\n                    throw new RemoteCheckoutSynchronizationError();\n                }\n\n                if (!remoteAddress || isInternalAddressEqual(remoteAddress, internalBillingAddress || {})) {\n                    return this._store.getState();\n                }\n\n                return this._store.dispatch(\n                    this._billingAddressActionCreator.updateAddress(mapFromInternalAddress(remoteAddress))\n                );\n            });\n    }\n\n    private _updateOrderReference(orderReference: AmazonPayOrderReference): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.updateCheckout('amazon', {\n                referenceId: orderReference.getAmazonOrderReferenceId(),\n            })\n        );\n    }\n}\n","export interface OverlayOptions {\n    background?: string;\n    id?: string;\n    transitionDuration?: number;\n}\n\nexport interface OverlayShowOptions {\n    onClick?(event: MouseEvent): void;\n}\n\nexport default class Overlay {\n    private _element: HTMLElement;\n    private _unregisterClick?: () => void;\n\n    constructor(options?: OverlayOptions) {\n        this._element = this._createElement(options);\n    }\n\n    show(options?: OverlayShowOptions): void {\n        if (this._element.parentElement) {\n            return;\n        }\n\n        this._registerClick(options);\n\n        document.body.appendChild(this._element);\n\n        // Fade In\n        setTimeout(() => this._element.style.opacity = '1');\n    }\n\n    remove(): void {\n        if (!this._element.parentElement) {\n            return;\n        }\n\n        if (this._unregisterClick) {\n            this._unregisterClick();\n        }\n\n        this._removeAfterTransition();\n\n        setTimeout(() => this._element.style.opacity = '0');\n    }\n\n    private _createElement(options?: OverlayOptions): HTMLElement {\n        const element = document.createElement('div');\n        const {\n            background = 'rgba(0, 0, 0, 0.8)',\n            id = null,\n            transitionDuration = 400,\n        } = options || {};\n\n        element.style.background = background;\n        element.style.display = 'block';\n        element.style.height = '100%';\n        element.style.left = '0px';\n        element.style.opacity = '0';\n        element.style.position = 'fixed';\n        element.style.top = '0px';\n        element.style.transition = `opacity ${transitionDuration}ms ease-out`;\n        element.style.width = '100%';\n        element.style.zIndex = '2147483647';\n\n        if (id) {\n            element.id = id;\n        }\n\n        return element;\n    }\n\n    private _registerClick(options?: OverlayShowOptions): void {\n        if (this._unregisterClick) {\n            this._unregisterClick();\n        }\n\n        if (options && options.onClick) {\n            const { onClick } = options;\n\n            this._element.addEventListener('click', onClick);\n\n            this._unregisterClick = () => {\n                this._element.removeEventListener('click', onClick);\n                this._unregisterClick = undefined;\n            };\n        }\n    }\n\n    private _removeAfterTransition(): void {\n        const handeTransition: (event: Event) => void = event => {\n            // NOTE: `event` is not correctly typed in this version of TS\n            if ((event as TransitionEvent).propertyName !== 'opacity') {\n                return;\n            }\n\n            if (this._element.parentElement) {\n                this._element.parentElement.removeChild(this._element);\n            }\n\n            this._element.removeEventListener('transitionend', handeTransition);\n        };\n\n        this._element.addEventListener('transitionend', handeTransition);\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class PaymentMethodCancelledError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Payment process was cancelled.');\n\n        this.type = 'payment_cancelled';\n    }\n}\n","import { Address } from '../../../address';\nimport { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { Overlay } from '../../../common/overlay';\nimport { CancellablePromise } from '../../../common/utility';\nimport { OrderPaymentRequestBody } from '../../../order';\nimport { PaymentMethodCancelledError } from '../../errors';\nimport { CreditCardInstrument, NonceInstrument } from '../../payment';\n\nimport { BraintreePaypal, BraintreeRequestData } from './braintree';\nimport { BraintreePaymentInitializeOptions, BraintreeThreeDSecureOptions } from './braintree-payment-options';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\n\nexport default class BraintreePaymentProcessor {\n    private _threeDSecureOptions?: BraintreeThreeDSecureOptions;\n\n    constructor(\n        private _braintreeSDKCreator: BraintreeSDKCreator,\n        private _overlay: Overlay\n    ) {}\n\n    initialize(clientToken: string, options?: BraintreePaymentInitializeOptions): void {\n        this._braintreeSDKCreator.initialize(clientToken);\n        this._threeDSecureOptions = options && options.threeDSecure;\n    }\n\n    preloadPaypal(): Promise<BraintreePaypal> {\n        return this._braintreeSDKCreator.getPaypal();\n    }\n\n    tokenizeCard(payment: OrderPaymentRequestBody, billingAddress: Address): Promise<NonceInstrument> {\n        const { paymentData } = payment;\n        const requestData = this._mapToCreditCard(paymentData as CreditCardInstrument, billingAddress);\n\n        return this._braintreeSDKCreator.getClient()\n            .then(client => client.request(requestData))\n            .then(({ creditCards }) => ({\n                nonce: creditCards[0].nonce,\n            }));\n    }\n\n    paypal(amount: number, storeLanguage: string, currency: string, offerCredit: boolean): Promise<NonceInstrument> {\n        return this._braintreeSDKCreator.getPaypal()\n            .then(paypal => {\n                this._overlay.show({\n                    onClick: () => paypal.focusWindow(),\n                });\n\n                return paypal.tokenize({\n                    amount,\n                    currency,\n                    enableShippingAddress: true,\n                    flow: 'checkout',\n                    locale: storeLanguage,\n                    offerCredit,\n                    useraction: 'commit',\n                });\n            })\n            .then(response => {\n                this._overlay.remove();\n\n                return response;\n            })\n            .catch(error => {\n                this._overlay.remove();\n\n                throw error;\n            });\n    }\n\n    verifyCard(payment: OrderPaymentRequestBody, billingAddress: Address, amount: number): Promise<NonceInstrument> {\n        if (!this._threeDSecureOptions) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const { addFrame, removeFrame } = this._threeDSecureOptions;\n\n        return Promise.all([\n            this.tokenizeCard(payment, billingAddress),\n            this._braintreeSDKCreator.get3DS(),\n        ]).then(([paymentData, threeDSecure]) => {\n            const { nonce } = paymentData;\n            const cancelVerifyCard = () => threeDSecure.cancelVerifyCard()\n                .then(response => {\n                    verification.cancel(new PaymentMethodCancelledError());\n\n                    return response;\n                });\n\n            const verification = new CancellablePromise(\n                threeDSecure.verifyCard({\n                    addFrame: (error, iframe) => {\n                        addFrame(error, iframe, cancelVerifyCard);\n                    },\n                    amount,\n                    nonce,\n                    removeFrame,\n                })\n            );\n\n            return verification.promise;\n        });\n    }\n\n    appendSessionId(processedPayment: Promise<NonceInstrument>): Promise<NonceInstrument> {\n        return processedPayment\n            .then(paymentData => Promise.all([paymentData, this._braintreeSDKCreator.getDataCollector()]))\n            .then(([paymentData, { deviceData }]) => ({ ...paymentData, deviceSessionId: deviceData }));\n    }\n\n    deinitialize(): Promise<void> {\n        return this._braintreeSDKCreator.teardown();\n    }\n\n    private _mapToCreditCard(creditCard: CreditCardInstrument, billingAddress: Address): BraintreeRequestData {\n        let streetAddress = billingAddress.address1;\n\n        if (billingAddress.address2) {\n            streetAddress = ` ${billingAddress.address2}`;\n        }\n\n        return {\n            data: {\n                creditCard: {\n                    cardholderName: creditCard.ccName,\n                    number: creditCard.ccNumber,\n                    cvv: creditCard.ccCvv,\n                    expirationDate: `${creditCard.ccExpiry.month}/${creditCard.ccExpiry.year}`,\n                    options: {\n                        validate: false,\n                    },\n                    billingAddress: {\n                        countryName: billingAddress.country,\n                        postalCode: billingAddress.postalCode,\n                        streetAddress,\n                    },\n                },\n            },\n            endpoint: 'payment_methods/credit_cards',\n            method: 'post',\n        };\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, StandardError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport isCreditCardLike from '../../is-credit-card-like';\nimport isVaultedInstrument from '../../is-vaulted-instrument';\nimport Payment, { PaymentInstrument } from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport BraintreePaymentProcessor from './braintree-payment-processor';\n\nexport default class BraintreeCreditCardPaymentStrategy implements PaymentStrategy {\n    private _is3dsEnabled?: boolean;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _braintreePaymentProcessor: BraintreePaymentProcessor\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(options.methodId))\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n                if (!paymentMethod || !paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                this._braintreePaymentProcessor.initialize(paymentMethod.clientToken, options.braintree);\n                this._is3dsEnabled = paymentMethod.config.is3dsEnabled;\n\n                return this._store.getState();\n            })\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        return this._store.dispatch(\n            this._orderActionCreator.submitOrder(order, options)\n        )\n            .then(state =>\n                state.payment.isPaymentDataRequired(order.useStoreCredit) && payment ?\n                    this._preparePaymentData(payment) :\n                    Promise.resolve(payment as Payment)\n            )\n            .then(payment =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment(payment))\n            )\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._braintreePaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    private _handleError(error: Error): never {\n        if (error.name === 'BraintreeError') {\n            throw new StandardError(error.message);\n        }\n\n        throw error;\n    }\n\n    private _isUsingVaulting(paymentData: PaymentInstrument): boolean {\n        if (isCreditCardLike(paymentData)) {\n            return Boolean(paymentData.shouldSaveInstrument);\n        }\n\n        return isVaultedInstrument(paymentData);\n    }\n\n    private _preparePaymentData(payment: OrderPaymentRequestBody): Promise<Payment> {\n        const { paymentData } = payment;\n        const state = this._store.getState();\n\n        if (paymentData && this._isUsingVaulting(paymentData)) {\n            return Promise.resolve(payment as Payment);\n        }\n\n        const order = state.order.getOrder();\n        const billingAddress = state.billingAddress.getBillingAddress();\n\n        if (!order) {\n            throw new MissingDataError(MissingDataErrorType.MissingOrder);\n        }\n\n        if (!billingAddress) {\n            throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n        }\n\n        const tokenizedCard = this._is3dsEnabled ?\n            this._braintreePaymentProcessor.verifyCard(payment, billingAddress, order.orderAmount) :\n            this._braintreePaymentProcessor.tokenizeCard(payment, billingAddress);\n\n        return this._braintreePaymentProcessor.appendSessionId(tokenizedCard)\n            .then(paymentData => ({ ...payment, paymentData }));\n    }\n}\n","import isVaultedInstrument from './is-vaulted-instrument';\nimport { CreditCardInstrument, PaymentInstrument } from './payment';\n\nexport default function isCreditCardLike(instrument: PaymentInstrument): instrument is CreditCardInstrument {\n    const card = instrument as CreditCardInstrument;\n\n    return !isVaultedInstrument(card) &&\n        typeof card.ccName === 'string' &&\n        typeof card.ccNumber === 'string' &&\n        typeof card.ccExpiry === 'object' &&\n        typeof card.ccExpiry.month === 'string' &&\n        typeof card.ccExpiry.year === 'string';\n    }\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, StandardError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError, PaymentMethodCancelledError } from '../../errors';\nimport Payment from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { BraintreeError } from './braintree';\nimport BraintreePaymentProcessor from './braintree-payment-processor';\nimport isBraintreeError from './is-braintree-error';\n\nexport default class BraintreePaypalPaymentStrategy implements PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _braintreePaymentProcessor: BraintreePaymentProcessor,\n        private _credit: boolean = false\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { braintree: braintreeOptions, methodId } = options;\n\n        this._paymentMethod = this._store.getState().paymentMethods.getPaymentMethod(methodId);\n\n        if (this._paymentMethod && this._paymentMethod.nonce) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                this._braintreePaymentProcessor.initialize(this._paymentMethod.clientToken, braintreeOptions);\n\n                return this._braintreePaymentProcessor.preloadPaypal();\n            })\n            .then(() => this._store.getState())\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        return (payment ? this._preparePaymentData(payment, order.useStoreCredit) : Promise.resolve(payment))\n            .then(payment => Promise.all([payment, this._store.dispatch(this._orderActionCreator.submitOrder(order, options))]))\n            .then(([payment]) => this._store.dispatch(this._paymentActionCreator.submitPayment(payment)))\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(options: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._braintreePaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    private _handleError(error: BraintreeError | Error): never {\n        if (!isBraintreeError(error)) {\n            throw error;\n        }\n\n        if (error.code === 'PAYPAL_POPUP_CLOSED') {\n            throw new PaymentMethodCancelledError(error.message);\n        }\n\n        throw new StandardError(error.message);\n    }\n\n    private _preparePaymentData(payment: OrderPaymentRequestBody, useStoreCredit?: boolean): Promise<Payment> {\n        const state = this._store.getState();\n        const grandTotal = state.checkout.getGrandTotal(useStoreCredit);\n        const config = state.config.getStoreConfig();\n\n        if (!grandTotal) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!this._paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const { currency, storeProfile: { storeLanguage } } = config;\n        const { method, nonce } = this._paymentMethod;\n\n        if (nonce) {\n            return Promise.resolve({ ...payment, paymentData: { nonce, method } });\n        }\n\n        const tokenizedCard = this._braintreePaymentProcessor\n            .paypal(grandTotal, storeLanguage, currency.code, this._credit);\n\n        return this._braintreePaymentProcessor.appendSessionId(tokenizedCard)\n            .then(paymentData => ({ ...payment, paymentData: { ...paymentData, method } }));\n    }\n}\n","export enum ChasePayEventType {\n    StartCheckout = 'startCheckout',\n    CompleteCheckout = 'completeCheckout',\n    CancelCheckout = 'cancelCheckout',\n}\n\nexport interface ChasePayEventMap {\n    [ChasePayEventType.StartCheckout](digitalSessionId: string): void;\n    [ChasePayEventType.CompleteCheckout](payload: ChasePaySuccessPayload): void;\n    [ChasePayEventType.CancelCheckout](): void;\n}\n\nexport interface ChasePayHostWindow extends Window {\n    JPMC?: JPMC;\n}\n\nexport interface JPMC {\n    ChasePay: ChasePay;\n}\n\nexport interface ChasePaySuccessPayload {\n    sessionToken: string;\n}\n\nexport interface ChasePayInsertOptions {\n    color?: string;\n    containers?: string[];\n    height?: number;\n    width?: number;\n}\n\nexport interface ChasePayConfigureOptions {\n    language?: string;\n    zindex?: number;\n    sessionWarningTime?: number;\n    sessionTimeoutTime?: number;\n}\n\nexport interface ChasePay {\n    EventType: {\n        START_CHECKOUT: ChasePayEventType.StartCheckout;\n        COMPLETE_CHECKOUT: ChasePayEventType.CompleteCheckout;\n        CANCEL_CHECKOUT: ChasePayEventType.CancelCheckout;\n    };\n    isChasePayUp(): boolean;\n    insertButtons(options: ChasePayInsertOptions): void;\n    insertBrandings(options: ChasePayInsertOptions): void;\n    startCheckout(digitalSessionId?: string): void;\n    showLoadingAnimation(): void;\n    configure(options: ChasePayConfigureOptions): void;\n    on<ChasePayEventType extends keyof ChasePayEventMap>(eventType: ChasePayEventType, callback: ChasePayEventMap[ChasePayEventType]): {};\n}\n\nexport interface ChasePayInitializeOptions {\n    /**\n     * This container is used to host the chasepay branding logo.\n     * It should be an HTML element.\n     */\n    logoContainer: string;\n\n    /**\n     * This walletButton is used to set an event listener, provide an element ID if you want\n     * users to be able to launch the ChasePay wallet modal by clicking on a button.\n     * It should be an HTML element.\n     */\n    walletButton?: string;\n\n    /**\n     * A callback that gets called when the customer selects a payment option.\n     */\n    onPaymentSelect?(): void;\n}\n","import { BraintreeError } from './braintree';\n\nexport default function isBraintreeError(error: BraintreeError | Error): error is BraintreeError {\n    return error.name === 'BraintreeError';\n}\n","import { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, StandardError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategyActionCreator from '../../payment-strategy-action-creator';\nimport PaymentStrategy from '../payment-strategy';\n\nimport BraintreeVisaCheckoutPaymentProcessor from './braintree-visacheckout-payment-processor';\nimport { VisaCheckoutPaymentSuccessPayload } from './visacheckout';\nimport VisaCheckoutScriptLoader from './visacheckout-script-loader';\n\nexport default class BraintreeVisaCheckoutPaymentStrategy implements PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _braintreeVisaCheckoutPaymentProcessor: BraintreeVisaCheckoutPaymentProcessor,\n        private _visaCheckoutScriptLoader: VisaCheckoutScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { braintreevisacheckout: visaCheckoutOptions, methodId } = options;\n\n        if (!visaCheckoutOptions) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.braintreevisacheckout\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                const checkout = state.checkout.getCheckout();\n                const storeConfig = state.config.getStoreConfig();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const {\n                    onError = () => {},\n                    onPaymentSelect = () => {},\n                } = visaCheckoutOptions;\n\n                const initOptions = {\n                    locale: storeConfig.storeProfile.storeLanguage,\n                    collectShipping: false,\n                    subtotal: checkout.subtotal,\n                    currencyCode: storeConfig.currency.code,\n                };\n\n                return Promise.all([\n                    this._visaCheckoutScriptLoader.load(this._paymentMethod.config.testMode),\n                    this._braintreeVisaCheckoutPaymentProcessor.initialize(this._paymentMethod.clientToken, initOptions),\n                ])\n                .then(([visaCheckout, visaInitOptions]) => {\n                    visaCheckout.init(visaInitOptions);\n                    visaCheckout.on('payment.success', (paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) =>\n                        this._paymentInstrumentSelected(paymentSuccessPayload)\n                            .then(() => onPaymentSelect())\n                            .catch(error => onError(error))\n                    );\n                    visaCheckout.on('payment.error', (payment, error) => onError(error));\n                });\n            })\n            .then(() => this._store.getState());\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new InvalidArgumentError('Unable to submit payment because \"payload.payment\" argument is not provided.');\n        }\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData || !this._paymentMethod.initializationData.nonce) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { nonce } = this._paymentMethod.initializationData;\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData: { nonce } }))\n            )\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._braintreeVisaCheckoutPaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    private _paymentInstrumentSelected(paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) {\n        const state = this._store.getState();\n\n        if (!this._paymentMethod) {\n            throw new Error('Payment method not initialized');\n        }\n\n        const { id: methodId } = this._paymentMethod;\n\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            return this._braintreeVisaCheckoutPaymentProcessor.handleSuccess(\n                paymentSuccessPayload,\n                state.shippingAddress.getShippingAddress(),\n                state.billingAddress.getBillingAddress()\n            )\n            .then(() => Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId)),\n            ]));\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _handleError(error: Error): never {\n        if (error.name === 'BraintreeError') {\n            throw new StandardError(error.message);\n        }\n\n        throw error;\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { Subject } from 'rxjs';\nimport { take } from 'rxjs/operators';\n\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { toFormUrlEncoded } from '../../../common/http-request';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentMethodCancelledError } from '../../errors';\nimport Payment from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategyActionCreator from '../../payment-strategy-action-creator';\nimport PaymentStrategy from '../payment-strategy';\nimport { WepayRiskClient } from '../wepay';\n\nimport { ChasePay, ChasePayEventType, ChasePaySuccessPayload } from './chasepay';\nimport ChasePayInitializeOptions from './chasepay-initialize-options';\nimport ChasePayScriptLoader from './chasepay-script-loader';\n\nexport default class ChasePayPaymentStrategy implements PaymentStrategy {\n    private _chasePayClient?: ChasePay;\n    private _methodId!: string;\n    private _walletButton?: HTMLElement;\n    private _walletEvent$: Subject<{ type: ChasePayEventType }>;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _requestSender: RequestSender,\n        private _chasePayScriptLoader: ChasePayScriptLoader,\n        private _wepayRiskClient: WepayRiskClient\n    ) {\n        this._walletEvent$ = new Subject();\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._methodId = options.methodId;\n\n        if (!options.chasepay) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.chasepay\" argument is not provided.');\n        }\n\n        const walletButton = options.chasepay.walletButton && document.getElementById(options.chasepay.walletButton);\n\n        if (walletButton) {\n            this._walletButton = walletButton;\n            this._walletButton.addEventListener('click', this._handleWalletButtonClick);\n        }\n\n        return this._configureWallet(options.chasepay)\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._walletButton) {\n            this._walletButton.removeEventListener('click', this._handleWalletButtonClick);\n        }\n\n        this._walletButton = undefined;\n        this._chasePayClient = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._getPayment()\n            .catch(error => {\n                if (error.subtype === MissingDataErrorType.MissingPayment) {\n                    return this._displayWallet()\n                        .then(() => this._getPayment());\n                }\n\n                throw error;\n            })\n            .then(payment =>\n                this._createOrder(payment, payload.useStoreCredit, options)\n            );\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _configureWallet(options: ChasePayInitializeOptions): Promise<void> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n        const storeConfig = state.config.getStoreConfig();\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (!storeConfig) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        return this._chasePayScriptLoader.load(paymentMethod.config.testMode)\n            .then(({ ChasePay }) => {\n                this._chasePayClient = ChasePay;\n\n                if (options.logoContainer && document.getElementById(options.logoContainer)) {\n                    this._chasePayClient.insertBrandings({\n                        color: 'white',\n                        containers: [options.logoContainer],\n                    });\n                }\n\n                this._chasePayClient.configure({\n                    language: storeConfig.storeProfile.storeLanguage,\n                });\n\n                this._chasePayClient.on(ChasePayEventType.CancelCheckout, () => {\n                    this._walletEvent$.next({ type: ChasePayEventType.CancelCheckout });\n\n                    if (options.onCancel) {\n                        options.onCancel();\n                    }\n                });\n\n                this._chasePayClient.on(ChasePayEventType.CompleteCheckout, (payload: ChasePaySuccessPayload) => {\n                    this._setSessionToken(payload.sessionToken)\n                        .then(() => {\n                            this._walletEvent$.next({ type: ChasePayEventType.CompleteCheckout });\n\n                            if (options.onPaymentSelect) {\n                                options.onPaymentSelect();\n                            }\n                        });\n                });\n            });\n    }\n\n    private _displayWallet(): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(this._methodId))\n                .then(state => {\n                    const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n\n                    if (!this._chasePayClient) {\n                        throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                    }\n\n                    if (!paymentMethod) {\n                        throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                    }\n\n                    this._chasePayClient.showLoadingAnimation();\n                    this._chasePayClient.startCheckout(paymentMethod.initializationData.digitalSessionId);\n                });\n\n            // Wait for payment selection\n            return new Promise((resolve, reject) => {\n                this._walletEvent$\n                    .pipe(take(1))\n                    .subscribe((event: { type: ChasePayEventType }) => {\n                        if (event.type === ChasePayEventType.CancelCheckout) {\n                            reject(new PaymentMethodCancelledError());\n                        } else if (event.type === ChasePayEventType.CompleteCheckout) {\n                            resolve();\n                        }\n                    });\n            });\n        }, { methodId: this._methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _setSessionToken(sessionToken: string): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n        const merchantRequestId = paymentMethod && paymentMethod.initializationData.merchantRequestId;\n\n        return this._requestSender.post('checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\n            },\n            body: toFormUrlEncoded({\n                action: 'set_external_checkout',\n                provider: this._methodId,\n                sessionToken,\n                merchantRequestId,\n            }),\n        })\n            // Re-hydrate checkout data\n            .then(() => Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(this._methodId)),\n            ]))\n            .then(() => this._store.getState());\n    }\n\n    private _getPayment(): Promise<Payment> {\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(this._methodId))\n            .then(() => {\n                if (this._methodId === 'wepay') {\n                    return this._wepayRiskClient.initialize()\n                        .then(client => client.getRiskToken());\n                }\n\n                return '';\n            })\n            .then(riskToken => {\n                const state = this._store.getState();\n                const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n\n                if (!paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                if (!paymentMethod.initializationData.paymentCryptogram) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPayment);\n                }\n\n                const paymentData = {\n                    method: this._methodId,\n                    cryptogramId: paymentMethod.initializationData.paymentCryptogram,\n                    eci: paymentMethod.initializationData.eci,\n                    transactionId: btoa(paymentMethod.initializationData.reqTokenId),\n                    ccExpiry: {\n                        month: paymentMethod.initializationData.expDate.toString().substr(0, 2),\n                        year: paymentMethod.initializationData.expDate.toString().substr(2, 2),\n                    },\n                    ccNumber: paymentMethod.initializationData.accountNum,\n                    accountMask: paymentMethod.initializationData.accountMask,\n                    extraData: riskToken ? { riskToken } : undefined,\n                };\n\n                return {\n                    methodId: this._methodId,\n                    paymentData,\n                };\n            });\n    }\n\n    private _createOrder(payment: Payment, useStoreCredit?: boolean, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._orderActionCreator.submitOrder({ useStoreCredit }, options))\n            .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment(payment)));\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): void {\n        event.preventDefault();\n\n        this._displayWallet();\n    }\n}\n","export default interface SquarePaymentForm {\n    build(): void;\n    requestCardNonce(): void;\n    setPostalCode(postalCode: string): void;\n}\n\nexport interface SquarePaymentFormConstructor {\n    new(options: SquareFormOptions): SquarePaymentForm;\n}\n\nexport interface SquareFormOptions {\n    applicationId: string;\n    env: string;\n    locationId: string;\n    inputClass?: string;\n    inputStyles?: string[];\n    callbacks?: SquareFormCallbacks;\n    cardNumber: SquareFormElement;\n    cvv: SquareFormElement;\n    expirationDate: SquareFormElement;\n    postalCode: SquareFormElement;\n    masterpass: SquareFormElement;\n}\nexport interface LineItem {\n    label: string;\n    amount: string;\n    pending: boolean;\n}\n\nexport interface SquarePaymentRequest {\n    requestShippingAddress: boolean;\n    requestBillingInfo: boolean;\n    shippingContact?: Contact;\n    countryCode: string;\n    currencyCode: string;\n    lineItems?: LineItem[];\n    total: LineItem;\n}\n\nexport interface NonceGenerationError {\n    type: string;\n    message: string;\n    field: string;\n}\n\nexport interface CardData {\n    card_brand: CardBrand;\n    last_4: number;\n    exp_month: number;\n    exp_year: number;\n    billing_postal_code: string;\n    digital_wallet_type: DigitalWalletType;\n}\n\nexport interface Contact {\n    familyName: string;\n    givenName: string;\n    email: string;\n    country: string;\n    countryName: string;\n    region: string;\n    city: string;\n    addressLines: string[];\n    postalCode: string;\n    phone: string;\n}\n\nexport enum CardBrand {\n    americanExpress = 'AMERICAN_EXPRESS',\n    discover = 'DISCOVER',\n    discoverDiners = 'DISCOVER_DINERS',\n    JCB = 'JCB',\n    masterCard = 'MASTERCARD',\n    unionPay = 'CHINA_UNIONPAY',\n    unknown = 'OTHER_BRAND',\n    visa = 'VISA',\n    squareGift = 'SQUARE_GIFT_CARD',\n}\n\nexport enum DigitalWalletType {\n    applePay = 'APPLEPAY',\n    masterpass = 'MASTERPASS',\n    none = 'NONE',\n}\n\n/**\n * Configures any form element provided by Square payment.\n */\nexport interface SquareFormElement {\n    /**\n     * The ID of the container which the form element should insert into.\n     */\n    elementId: string;\n\n    /**\n     * The placeholder text to use for the form element, if provided.\n     */\n    placeholder?: string;\n}\n\nexport interface SquareFormCallbacks {\n    paymentFormLoaded?(form: SquarePaymentForm): void;\n    unsupportedBrowserDetected?(): void;\n    cardNonceResponseReceived?(\n        errors?: NonceGenerationError[],\n        nonce?: string,\n        cardData?: CardData,\n        billingContact?: Contact,\n        shippingContact?: Contact): void;\n    methodsSupported?(methods: { [key: string]: boolean }): void;\n    createPaymentRequest?(): void;\n}\n\nexport type SquareFormFactory = (options: SquareFormOptions) => SquarePaymentForm;\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\n\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class CreditCardPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n            );\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n} from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategyActionCreator from '../../payment-strategy-action-creator';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { GooglePaymentData, PaymentMethodData } from './googlepay';\nimport GooglePayPaymentInitializeOptions from './googlepay-initialize-options';\nimport GooglePayPaymentProcessor from './googlepay-payment-processor';\n\nexport default class GooglePayPaymentStrategy implements PaymentStrategy {\n    private _googlePayOptions?: GooglePayPaymentInitializeOptions;\n    private _methodId?: string;\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _googlePayPaymentProcessor: GooglePayPaymentProcessor\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._methodId = options.methodId;\n\n        return this._googlePayPaymentProcessor.initialize(this._methodId)\n            .then(() => {\n                this._googlePayOptions = this._getGooglePayOptions(options);\n\n                if (!this._googlePayOptions) {\n                    throw new InvalidArgumentError('Unable to initialize payment because \"options.googlepay\" argument is not provided.');\n                }\n\n                const walletButton = this._googlePayOptions.walletButton && document.getElementById(this._googlePayOptions.walletButton);\n\n                if (walletButton) {\n                    this._walletButton = walletButton;\n                    this._walletButton.addEventListener('click', this._handleWalletButtonClick);\n                }\n\n                return this._store.getState();\n            });\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._walletButton) {\n            this._walletButton.removeEventListener('click', this._handleWalletButtonClick);\n        }\n\n        this._walletButton = undefined;\n\n        return this._googlePayPaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!this._googlePayOptions) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.googlepay\" argument is not provided.');\n        }\n\n        const {\n            onError = () => {},\n            onPaymentSelect = () => {},\n        } = this._googlePayOptions;\n\n        return Promise.resolve(this._getPayment())\n            .then(payment => {\n                if (!payment.paymentData.nonce || !payment.paymentData.cardInformation) {\n                    // TODO: Find a way to share the code with _handleWalletButtonClick method\n                    return this._googlePayPaymentProcessor.displayWallet()\n                        .then(paymentData => this._paymentInstrumentSelected(paymentData))\n                        .then(() => onPaymentSelect())\n                        .then(() => this._getPayment())\n                        .catch(error => {\n                            if (error.statusCode !== 'CANCELED') {\n                                onError(error);\n                            }\n                        });\n                }\n\n                return payment;\n            })\n            .then(payment =>\n                this._store.dispatch(this._orderActionCreator.submitOrder({ useStoreCredit: payload.useStoreCredit }, options))\n                    .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment(this._getPayment())))\n            );\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _paymentInstrumentSelected(paymentData: GooglePaymentData) {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const methodId = this._methodId;\n\n        // TODO: Revisit how we deal with GooglePaymentData after receiving it from Google\n        return this._googlePayPaymentProcessor.handleSuccess(paymentData)\n            .then(() => Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId)),\n            ]));\n    }\n\n    private _getGooglePayOptions(options: PaymentInitializeOptions): GooglePayPaymentInitializeOptions {\n        if (options.methodId === 'googlepaybraintree' && options.googlepaybraintree) {\n            return options.googlepaybraintree;\n        }\n\n        if (options.methodId === 'googlepaystripe' && options.googlepaystripe) {\n            return options.googlepaystripe;\n        }\n\n        throw new InvalidArgumentError();\n    }\n\n    private _getPayment(): PaymentMethodData {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (!paymentMethod.initializationData.nonce) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        const paymentData = {\n            method: this._methodId,\n            nonce: paymentMethod.initializationData.nonce,\n            cardInformation: paymentMethod.initializationData.card_information,\n        };\n\n        return {\n            methodId: this._methodId,\n            paymentData,\n        };\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): Promise<InternalCheckoutSelectors> {\n        event.preventDefault();\n\n        if (!this._methodId || !this._googlePayOptions) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const methodId = this._methodId;\n\n        const {\n            onError = () => {},\n            onPaymentSelect = () => {},\n        } = this._googlePayOptions;\n\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            return this._googlePayPaymentProcessor.displayWallet()\n                .then(paymentData => this._paymentInstrumentSelected(paymentData))\n                .then(() => onPaymentSelect())\n                .catch(error => {\n                    if (error.statusCode !== 'CANCELED') {\n                        onError(error);\n                    }\n                });\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType\n} from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { PaymentMethodCancelledError } from '../../errors';\nimport PaymentMethodInvalidError from '../../errors/payment-method-invalid-error';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport KlarnaCredit, { KlarnaLoadResponse } from './klarna-credit';\nimport KlarnaScriptLoader from './klarna-script-loader';\n\nexport default class KlarnaPaymentStrategy implements PaymentStrategy {\n    private _klarnaCredit?: KlarnaCredit;\n    private _unsubscribe?: (() => void);\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _klarnaScriptLoader: KlarnaScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return this._klarnaScriptLoader.load()\n            .then(klarnaCredit => { this._klarnaCredit = klarnaCredit; })\n            .then(() => {\n                this._unsubscribe = this._store.subscribe(\n                    state => {\n                        if (state.paymentStrategies.isInitialized(options.methodId)) {\n                            this._loadWidget(options);\n                        }\n                    },\n                    state => {\n                        const checkout = state.checkout.getCheckout();\n\n                        return checkout && checkout.grandTotal;\n                    }\n                );\n\n                return this._loadWidget(options);\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._unsubscribe) {\n            this._unsubscribe();\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!payload.payment) {\n            throw new InvalidArgumentError('Unable to proceed because \"payload.payment\" argument is not provided.');\n        }\n\n        const { payment: { paymentData, ...paymentPayload } } = payload;\n\n        return this._authorize()\n            .then(({ authorization_token: authorizationToken }) => this._store.dispatch(\n                this._remoteCheckoutActionCreator.initializePayment(paymentPayload.methodId, { authorizationToken })\n            ))\n            .then(() => this._store.dispatch(\n                this._orderActionCreator.submitOrder({\n                    ...payload,\n                    payment: paymentPayload,\n                    // Note: API currently doesn't support using Store Credit with Klarna.\n                    // To prevent deducting customer's store credit, set it as false.\n                    useStoreCredit: false,\n                }, options)\n            ));\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _loadWidget(options: PaymentInitializeOptions): Promise<KlarnaLoadResponse> {\n        if (!options.klarna) {\n            throw new InvalidArgumentError('Unable to load widget because \"options.klarna\" argument is not provided.');\n        }\n\n        const { methodId, klarna: { container, onLoad } } = options;\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => new Promise<KlarnaLoadResponse>((resolve, reject) => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                if (!this._klarnaCredit || !paymentMethod.clientToken) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n\n                this._klarnaCredit.init({ client_token: paymentMethod.clientToken });\n\n                this._klarnaCredit.load({ container }, response => {\n                    if (onLoad) {\n                        onLoad(response);\n                    }\n\n                    if (!response.show_form) {\n                        reject(new PaymentMethodInvalidError());\n                    } else {\n                        resolve(response);\n                    }\n                });\n            }));\n    }\n\n    private _authorize(): Promise<any> {\n        return new Promise((resolve, reject) => {\n            if (!this._klarnaCredit) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            this._klarnaCredit.authorize({}, res => {\n                if (res.approved) {\n                    return resolve(res);\n                }\n\n                if (res.show_form) {\n                    return reject(new PaymentMethodCancelledError());\n                }\n\n                reject(new PaymentMethodInvalidError());\n            });\n        });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport KlarnaCredit from './klarna-credit';\nimport KlarnaWindow from './klarna-window';\n\nconst SDK_URL = '//credit.klarnacdn.net/lib/v1/api.js';\n\nexport default class KlarnaScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    load(): Promise<KlarnaCredit> {\n        return this._scriptLoader.loadScript(SDK_URL)\n            .then(() => (window as KlarnaWindow).Klarna.Credit);\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\n\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class LegacyPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options));\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport getCallbackUrl from './get-callback-url';\nimport { Masterpass, MasterpassCheckoutOptions } from './masterpass';\nimport MasterpassScriptLoader from './masterpass-script-loader';\n\nexport default class MasterpassPaymentStrategy implements PaymentStrategy {\n    private _masterpassClient?: Masterpass;\n    private _paymentMethod?: PaymentMethod;\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _masterpassScriptLoader: MasterpassScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId } = options;\n\n        this._paymentMethod = this._store.getState().paymentMethods.getPaymentMethod(methodId);\n\n        if (!this._paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._masterpassScriptLoader.load(this._paymentMethod.config.testMode)\n            .then(masterpass => {\n                this._masterpassClient = masterpass;\n\n                if (!options.masterpass) {\n                    throw new InvalidArgumentError('Unable to initialize payment because \"options.masterpass\" argument is not provided.');\n                }\n\n                const walletButton  = options.masterpass.walletButton && document.getElementById(options.masterpass.walletButton);\n\n                if (walletButton) {\n                    this._walletButton = walletButton;\n                    this._walletButton.addEventListener('click', this._handleWalletButtonClick);\n                }\n\n                return this._store.getState();\n            });\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        if (this._walletButton) {\n            this._walletButton.removeEventListener('click', this._handleWalletButtonClick);\n        }\n\n        this._walletButton = undefined;\n        this._masterpassClient = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const order = { useStoreCredit: payload.useStoreCredit };\n\n        if (!this._paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const gateway = this._paymentMethod.initializationData.gateway;\n\n        // TODO: Refactor the API endpoint to return nonce in the right place.\n        const paymentData = this._paymentMethod.initializationData.paymentData;\n\n        if (!gateway) {\n            throw new InvalidArgumentError('Unable to proceed because \"paymentMethod.initializationData.gateway\" argument is not provided.');\n        }\n\n        // TODO: Redirect to Masterpass if nonce has not been generated yet. And then finalise the order when the shopper is redirected back to the checkout page.\n        if (!paymentData) {\n            throw new InvalidArgumentError('Unable to proceed because \"paymentMethod.initializationData.paymentData\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() => this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(gateway)))\n            .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment({ methodId: gateway, paymentData })));\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _createMasterpassPayload(): MasterpassCheckoutOptions {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const storeConfig = state.config.getStoreConfig();\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!storeConfig) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return {\n            checkoutId: this._paymentMethod.initializationData.checkoutId,\n            allowedCardTypes: this._paymentMethod.initializationData.allowedCardTypes,\n            amount: checkout.subtotal.toFixed(2),\n            currency: storeConfig.currency.code,\n            cartId: checkout.cart.id,\n            suppressShippingAddress: false,\n            callbackUrl: getCallbackUrl('checkout'),\n        };\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event) {\n        event.preventDefault();\n\n        if (!this._masterpassClient) {\n            return;\n        }\n\n        const payload = this._createMasterpassPayload();\n        this._masterpassClient.checkout(payload);\n    }\n}\n","import { omit } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\n\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class NoPaymentDataRequiredPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._orderActionCreator.submitOrder(omit(orderRequest, 'payment'), options)\n        );\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\n\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class OfflinePaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const action = this._orderActionCreator.submitOrder({\n            ...payload,\n            payment: payload.payment ? { methodId: payload.payment.methodId } : undefined,\n        }, options);\n\n        return this._store.dispatch(action);\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\n\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class OffsitePaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const orderPayload = this._shouldSubmitFullPayload(payment) ? payload : order;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(orderPayload, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.initializeOffsitePayment(payment.methodId, payment.gatewayId))\n            );\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n        const status = state.payment.getPaymentStatus();\n\n        if (order && (status === paymentStatusTypes.ACKNOWLEDGE || status === paymentStatusTypes.FINALIZE)) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _shouldSubmitFullPayload(payment?: OrderPaymentRequestBody): boolean {\n        // FIXME: A temporary workaround to support offsite payment methods\n        // where their return URL needs to be provided by the core app.\n        if (!payment) {\n            return false;\n        }\n\n        return payment.gatewayId === 'adyen' || payment.methodId === 'ccavenuemars';\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\n\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class PaypalProPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._isPaymentAcknowledged()) {\n            return this._store.dispatch(\n                this._orderActionCreator.submitOrder({\n                    ...payload,\n                    payment: payload.payment ? { methodId: payload.payment.methodId } : undefined,\n                }, options)\n            );\n        }\n\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n            );\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _isPaymentAcknowledged(): boolean {\n        const state = this._store.getState();\n\n        return state.payment.getPaymentStatus() === paymentStatusTypes.ACKNOWLEDGE;\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentMethod from '../../payment-method';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\nimport PaymentStrategy from '../payment-strategy';\n\nimport PaypalScriptLoader from './paypal-script-loader';\nimport { PaypalHostWindow, PaypalSDK } from './paypal-sdk';\n\nexport default class PaypalExpressPaymentStrategy implements PaymentStrategy {\n    private _paypalSdk?: PaypalSDK;\n    private _paymentMethod?: PaymentMethod;\n    private _useRedirectFlow: boolean = false;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _scriptLoader: PaypalScriptLoader,\n        private _window: PaypalHostWindow = window\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n\n        this._paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n        this._useRedirectFlow = (options.paypalexpress && options.paypalexpress.useRedirectFlow) === true;\n\n        if (!this._isInContextEnabled()) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._scriptLoader.loadPaypal()\n            .then(paypal => {\n                this._paypalSdk = paypal;\n\n                if (!this._paymentMethod || !this._paymentMethod.config.merchantId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                this._paypalSdk.checkout.setup(this._paymentMethod.config.merchantId, {\n                    button: 'paypal-button',\n                    environment: this._paymentMethod.config.testMode ? 'sandbox' : 'production',\n                });\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._isInContextEnabled() && this._paypalSdk) {\n            this._paypalSdk.checkout.closeFlow();\n            this._paypalSdk = undefined;\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const paypal = this._paypalSdk;\n\n        if (this._isAcknowledgedOrFinalized()) {\n            return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options));\n        }\n\n        if (!this._isInContextEnabled() || this._useRedirectFlow) {\n            return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options))\n                .then(state => {\n                    const redirectUrl = state.payment.getPaymentRedirectUrl();\n\n                    if (redirectUrl) {\n                        this._window.top.location.href = redirectUrl;\n                    }\n\n                    // We need to hold execution so the consumer does not redirect us somewhere else\n                    return new Promise<never>(() => {});\n                });\n        }\n\n        if (!paypal) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        paypal.checkout.initXO();\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options))\n            .then(state => {\n                const redirectUrl = state.payment.getPaymentRedirectUrl();\n\n                if (redirectUrl) {\n                    paypal.checkout.startFlow(redirectUrl);\n                }\n\n                // We need to hold execution so the consumer does not redirect us somewhere else\n                return new Promise<never>(() => {});\n            })\n            .catch(error => {\n                paypal.checkout.closeFlow();\n\n                return Promise.reject(error);\n            });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n\n        if (order && this._isAcknowledgedOrFinalized()) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _isAcknowledgedOrFinalized(): boolean {\n        const state = this._store.getState();\n\n        return state.payment.getPaymentStatus() === paymentStatusTypes.ACKNOWLEDGE\n            || state.payment.getPaymentStatus() === paymentStatusTypes.FINALIZE;\n    }\n\n    private _isInContextEnabled(): boolean {\n        return !!(this._paymentMethod && this._paymentMethod.config.merchantId);\n    }\n}\n","import { some } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { RequestError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\n\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class SagePayPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _formPoster: any\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n            )\n            .catch(error => {\n                if (!(error instanceof RequestError) || !some(error.body.errors, { code: 'three_d_secure_required' })) {\n                    return Promise.reject(error);\n                }\n\n                return new Promise(() => {\n                    this._formPoster.postForm(error.body.three_ds_result.acs_url, {\n                        PaReq: error.body.three_ds_result.payer_auth_request,\n                        TermUrl: error.body.three_ds_result.callback_url,\n                        MD: error.body.three_ds_result.merchant_data,\n                    });\n                });\n            });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n\n        if (order && state.payment.getPaymentStatus() === paymentStatusTypes.FINALIZE) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import StandardError from './standard-error';\n\nexport default class UnsupportedBrowserError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Unsupported browser error');\n\n        this.type = 'unsupported_browser';\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\nimport { omit } from 'lodash';\nimport { noop } from 'rxjs';\n\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    StandardError,\n    TimeoutError,\n    UnsupportedBrowserError,\n} from '../../../common/error/errors';\nimport { toFormUrlEncoded } from '../../../common/http-request';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { NonceInstrument } from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategyActionCreator from '../../payment-strategy-action-creator';\nimport PaymentStrategy from '../payment-strategy';\n\nimport SquarePaymentForm, {\n    CardData,\n    Contact,\n    DigitalWalletType,\n    NonceGenerationError,\n    SquareFormElement,\n    SquareFormOptions,\n    SquarePaymentRequest\n} from './square-form';\nimport SquarePaymentInitializeOptions from './square-payment-initialize-options';\nimport SquareScriptLoader from './square-script-loader';\n\nexport default class SquarePaymentStrategy implements PaymentStrategy {\n    private _deferredRequestNonce?: DeferredPromise;\n    private _paymentForm?: SquarePaymentForm;\n    private _paymentMethod?: PaymentMethod;\n    private _squareOptions?: SquarePaymentInitializeOptions;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _requestSender: RequestSender,\n        private _scriptLoader: SquareScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId } = options;\n\n        this._syncPaymentMethod(methodId);\n\n        return this._scriptLoader.load()\n            .then(createSquareForm =>\n                new Promise((resolve, reject) => {\n                    this._paymentForm = createSquareForm(\n                        this._getFormOptions(options, { resolve, reject })\n                    );\n                    this._paymentForm.build();\n                }))\n            .then(() => this._store.getState());\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment } = orderRequest;\n\n        if (!payment || !payment.methodId) {\n            throw new InvalidArgumentError('Unable to submit payment because \"payload.payment.methodId\" argument is not provided.');\n        }\n\n        this._syncPaymentMethod(payment.methodId);\n\n        return this._getNonceInstrument(payment.methodId)\n            .then(paymentData =>\n                this._store.dispatch(this._orderActionCreator.submitOrder(omit(orderRequest, 'payment'), options))\n                .then(() =>\n                    this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n                ));\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _syncPaymentMethod(methodId: string): void {\n        const state = this._store.getState();\n        this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n    }\n\n    private _getCountryCode(countryName: string) {\n        switch (countryName.toUpperCase()) {\n            case 'NEW ZELAND':\n                return 'NZ';\n            case 'AUSTRALIA':\n                return 'AU';\n            default:\n                return 'US';\n        }\n    }\n\n    private _getNonceInstrument(methodId: string): Promise<NonceInstrument> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n        if (paymentMethod) {\n            const { initializationData } = paymentMethod;\n            if (initializationData && initializationData.paymentData.nonce) {\n                return Promise.resolve({ nonce: paymentMethod.initializationData.paymentData.nonce });\n            }\n        }\n\n        return new Promise<NonceInstrument>((resolve, reject) => {\n            if (!this._paymentForm) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            if (this._deferredRequestNonce) {\n                this._deferredRequestNonce.reject(new TimeoutError());\n            }\n\n            this._deferredRequestNonce = { resolve, reject };\n            this._paymentForm.requestCardNonce();\n        });\n    }\n\n    private _getFormOptions(options: PaymentInitializeOptions, deferred: DeferredPromise): SquareFormOptions {\n        const { square: squareOptions } = options;\n\n        if (!squareOptions || !this._paymentMethod) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.square\" argument is not provided.');\n        }\n\n        this._squareOptions = squareOptions;\n\n        return {\n            ...this._squareOptions,\n            ...this._paymentMethod.initializationData,\n            callbacks: {\n                cardNonceResponseReceived: (errors, nonce, cardData, billingContact, shippingContact) => {\n                    if (cardData && cardData.digital_wallet_type !== DigitalWalletType.none) {\n                        this._handleWalletNonceResponse(errors, nonce, cardData, billingContact, shippingContact);\n                    } else {\n                        this._handleCardNonceResponse(errors, nonce);\n                    }\n                },\n                createPaymentRequest: () => this._paymentRequestPayload(),\n                methodsSupported: methods => {\n                    const { masterpass } = squareOptions;\n\n                    if (masterpass) {\n                        this._showPaymentMethods(methods, masterpass);\n                    }\n                },\n                paymentFormLoaded: () => {\n                    deferred.resolve();\n                    this._setPostalCode();\n                },\n                unsupportedBrowserDetected: () => deferred.reject(new UnsupportedBrowserError()),\n            },\n        };\n    }\n\n    private _handleWalletNonceResponse(\n        errors?: NonceGenerationError[],\n        nonce?: string,\n        cardData?: CardData,\n        billingContact?: Contact,\n        shippingContact?: Contact\n    ): void {\n        const onError = this._squareOptions && this._squareOptions.onError || noop;\n        const onPaymentSelect = this._squareOptions && this._squareOptions.onPaymentSelect || noop;\n\n        if (errors) {\n            onError(errors);\n        } else if (nonce && this._paymentMethod) {\n            this._paymentInstrumentSelected(\n                this._paymentMethod.id,\n                nonce,\n                cardData,\n                billingContact,\n                shippingContact\n            )\n                .then(onPaymentSelect)\n                .catch(onError);\n        }\n    }\n\n    private _handleCardNonceResponse(errors?: NonceGenerationError[], nonce?: string): void {\n        if (!this._deferredRequestNonce) {\n            throw new StandardError();\n        }\n\n        if (nonce && !errors) {\n            this._deferredRequestNonce.resolve({ nonce });\n\n            return;\n        }\n\n        const onError = this._squareOptions && this._squareOptions.onError || noop;\n\n        onError(errors);\n\n        this._deferredRequestNonce.reject(errors);\n    }\n\n    private _paymentInstrumentSelected(\n        methodId: string,\n        nonce?: string,\n        cardData?: CardData,\n        billingContact?: Contact,\n        shippingContact?: Contact): Promise<InternalCheckoutSelectors> {\n\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            return this._setExternalCheckoutData(nonce, cardData, billingContact, shippingContact)\n            .then(() =>\n                Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId)),\n            ]));\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _paymentRequestPayload(): SquarePaymentRequest {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const storeConfig = state.config.getStoreConfig();\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!storeConfig) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        return {\n            requestShippingAddress: true,\n            requestBillingInfo: true,\n            currencyCode: storeConfig.currency.code,\n            countryCode: this._getCountryCode(storeConfig.storeProfile.storeCountry),\n            total: {\n                label: storeConfig.storeProfile.storeName,\n                amount: String(checkout.subtotal),\n                pending: false,\n            },\n        };\n    }\n\n    private _setExternalCheckoutData(nonce?: string, cardData?: CardData, billingContact?: Contact, shippingContact?: Contact): Promise<Response<any>> {\n        return this._requestSender.post('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: toFormUrlEncoded({\n                nonce,\n                provider: 'squarev2',\n                action: 'set_external_checkout',\n                cardData: JSON.stringify(cardData),\n                billingContact: JSON.stringify(billingContact),\n                shippingContact: JSON.stringify(shippingContact),\n            }),\n        });\n    }\n\n    private _setPostalCode(): void {\n        const state = this._store.getState();\n        const billingAddress = state.billingAddress.getBillingAddress();\n\n        if (!this._paymentForm) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (billingAddress && billingAddress.postalCode) {\n            this._paymentForm.setPostalCode(billingAddress.postalCode);\n        }\n    }\n\n    private _showPaymentMethods(methods: { [key: string]: boolean }, element: SquareFormElement): void {\n        const masterpassBtn = document.getElementById(element.elementId);\n\n        if (masterpassBtn && methods.masterpass) {\n            masterpassBtn.style.display = 'inline-block';\n        }\n    }\n}\n\nexport interface DeferredPromise {\n    resolve(resolution?: NonceInstrument): void;\n    reject(reason?: any): void;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { SquareFormFactory, SquareFormOptions } from './square-form';\nimport SquareWindow from './square-window';\n\nexport default class SquareScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    load(): Promise<SquareFormFactory> {\n        const scriptURI = '//js.squareup.com/v2/paymentform';\n\n        return this._scriptLoader.loadScript(scriptURI)\n            .then(() => (options: SquareFormOptions) =>\n                new (window as SquareWindow).SqPaymentForm(options)\n            );\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\n\nimport WepayRisk from './wepay-risk';\nimport WepayWindow from './wepay-window';\n\nconst SCRIPT_SRC = '//static.wepay.com/min/js/risk.1.latest.js';\n\nexport default class WepayRiskClient {\n    private _riskClient?: WepayRisk;\n\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    initialize(): Promise<WepayRiskClient> {\n        return this._scriptLoader\n            .loadScript(SCRIPT_SRC)\n            .then(() => this._riskClient = (window as WepayWindow).WePay.risk)\n            .then(() => this);\n    }\n\n    getRiskToken(): string {\n        if (!this._riskClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        this._riskClient.generate_risk_token();\n\n        return this._riskClient.get_risk_token();\n    }\n}\n","import { merge } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport CreditCardPaymentStrategy from '../credit-card/credit-card-payment-strategy';\n\nimport WepayRiskClient from './wepay-risk-client';\n\nexport default class WepayPaymentStrategy extends CreditCardPaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        orderActionCreator: OrderActionCreator,\n        paymentActionCreator: PaymentActionCreator,\n        private _wepayRiskClient: WepayRiskClient\n    ) {\n        super(store, orderActionCreator, paymentActionCreator);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._wepayRiskClient.initialize();\n\n        return super.initialize(options);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const token = this._wepayRiskClient.getRiskToken();\n        const payloadWithToken = merge({}, payload, {\n            payment: {\n                paymentData: {\n                    deviceSessionId: token,\n                },\n            },\n        });\n\n        return super.execute(payloadWithToken, options);\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../billing';\nimport { CheckoutActionCreator, CheckoutRequestSender, CheckoutStore, CheckoutValidator } from '../checkout';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { OrderActionCreator, OrderRequestSender } from '../order';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../remote-checkout';\n\nimport PaymentActionCreator from './payment-action-creator';\nimport PaymentMethodActionCreator from './payment-method-action-creator';\nimport PaymentMethodRequestSender from './payment-method-request-sender';\nimport PaymentRequestSender from './payment-request-sender';\nimport PaymentStrategyActionCreator from './payment-strategy-action-creator';\nimport PaymentStrategyRegistry from './payment-strategy-registry';\nimport PaymentStrategyType from './payment-strategy-type';\nimport { AfterpayPaymentStrategy, AfterpayScriptLoader } from './strategies/afterpay';\nimport { AmazonPayPaymentStrategy, AmazonPayScriptLoader } from './strategies/amazon-pay';\nimport {\n    createBraintreePaymentProcessor,\n    createBraintreeVisaCheckoutPaymentProcessor,\n    BraintreeCreditCardPaymentStrategy,\n    BraintreePaypalPaymentStrategy,\n    BraintreeScriptLoader,\n    BraintreeSDKCreator,\n    BraintreeVisaCheckoutPaymentStrategy,\n    VisaCheckoutScriptLoader\n} from './strategies/braintree';\nimport { ChasePayPaymentStrategy, ChasePayScriptLoader } from './strategies/chasepay';\nimport { CreditCardPaymentStrategy } from './strategies/credit-card';\nimport {\n    createGooglePayPaymentProcessor,\n    GooglePayBraintreeInitializer,\n    GooglePayPaymentStrategy,\n    GooglePayStripeInitializer\n} from './strategies/googlepay';\nimport { KlarnaPaymentStrategy, KlarnaScriptLoader } from './strategies/klarna';\nimport { LegacyPaymentStrategy } from './strategies/legacy';\nimport { MasterpassPaymentStrategy, MasterpassScriptLoader } from './strategies/masterpass';\nimport { NoPaymentDataRequiredPaymentStrategy } from './strategies/no-payment';\nimport { OfflinePaymentStrategy } from './strategies/offline';\nimport { OffsitePaymentStrategy } from './strategies/offsite';\nimport { PaypalExpressPaymentStrategy, PaypalProPaymentStrategy, PaypalScriptLoader } from './strategies/paypal';\nimport { SagePayPaymentStrategy } from './strategies/sage-pay';\nimport { SquarePaymentStrategy, SquareScriptLoader } from './strategies/square';\nimport { WepayPaymentStrategy, WepayRiskClient } from './strategies/wepay';\n\nexport default function createPaymentStrategyRegistry(\n    store: CheckoutStore,\n    paymentClient: any,\n    requestSender: RequestSender\n) {\n    const registry = new PaymentStrategyRegistry(store, { defaultToken: PaymentStrategyType.CREDIT_CARD });\n    const scriptLoader = getScriptLoader();\n    const billingAddressActionCreator = new BillingAddressActionCreator(new BillingAddressRequestSender(requestSender));\n    const braintreePaymentProcessor = createBraintreePaymentProcessor(scriptLoader);\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const checkoutValidator = new CheckoutValidator(checkoutRequestSender);\n    const orderActionCreator = new OrderActionCreator(new OrderRequestSender(requestSender), checkoutValidator);\n    const paymentActionCreator = new PaymentActionCreator(new PaymentRequestSender(paymentClient), orderActionCreator);\n    const paymentMethodActionCreator = new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender));\n    const remoteCheckoutActionCreator = new RemoteCheckoutActionCreator(new RemoteCheckoutRequestSender(requestSender));\n    const configActionCreator = new ConfigActionCreator(new ConfigRequestSender(requestSender));\n    const checkoutActionCreator = new CheckoutActionCreator(checkoutRequestSender, configActionCreator);\n    const paymentStrategyActionCreator = new PaymentStrategyActionCreator(registry, orderActionCreator);\n\n    registry.register(PaymentStrategyType.AFTERPAY, () =>\n        new AfterpayPaymentStrategy(\n            store,\n            checkoutValidator,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new AfterpayScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.AMAZON, () =>\n        new AmazonPayPaymentStrategy(\n            store,\n            orderActionCreator,\n            billingAddressActionCreator,\n            remoteCheckoutActionCreator,\n            new AmazonPayScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.CREDIT_CARD, () =>\n        new CreditCardPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.KLARNA, () =>\n        new KlarnaPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new KlarnaScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.LEGACY, () =>\n        new LegacyPaymentStrategy(\n            store,\n            orderActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.OFFLINE, () =>\n        new OfflinePaymentStrategy(\n            store,\n            orderActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.OFFSITE, () =>\n        new OffsitePaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.PAYPAL, () =>\n        new PaypalProPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.PAYPAL_EXPRESS, () =>\n        new PaypalExpressPaymentStrategy(\n            store,\n            orderActionCreator,\n            new PaypalScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.PAYPAL_EXPRESS_CREDIT, () =>\n        new PaypalExpressPaymentStrategy(\n            store,\n            orderActionCreator,\n            new PaypalScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.SAGE_PAY, () =>\n        new SagePayPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            createFormPoster()\n        )\n    );\n\n    registry.register(PaymentStrategyType.SQUARE, () =>\n        new SquarePaymentStrategy(\n            store,\n            checkoutActionCreator,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            requestSender,\n            new SquareScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.NO_PAYMENT_DATA_REQUIRED, () =>\n        new NoPaymentDataRequiredPaymentStrategy(\n            store,\n            orderActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.BRAINTREE, () =>\n        new BraintreeCreditCardPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            braintreePaymentProcessor\n        )\n    );\n\n    registry.register(PaymentStrategyType.BRAINTREE_PAYPAL, () =>\n        new BraintreePaypalPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            braintreePaymentProcessor\n        )\n    );\n\n    registry.register(PaymentStrategyType.BRAINTREE_PAYPAL_CREDIT, () =>\n        new BraintreePaypalPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            braintreePaymentProcessor,\n            true\n        )\n    );\n\n    registry.register(PaymentStrategyType.BRAINTREE_VISA_CHECKOUT, () =>\n        new BraintreeVisaCheckoutPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            paymentActionCreator,\n            orderActionCreator,\n            createBraintreeVisaCheckoutPaymentProcessor(scriptLoader, requestSender),\n            new VisaCheckoutScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.CHASE_PAY, () =>\n        new ChasePayPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            requestSender,\n            new ChasePayScriptLoader(scriptLoader),\n            new WepayRiskClient(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.BRAINTREE_GOOGLE_PAY, () =>\n        new GooglePayPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            paymentActionCreator,\n            orderActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayBraintreeInitializer(\n                    new BraintreeSDKCreator(\n                        new BraintreeScriptLoader(scriptLoader)\n                    )\n                )\n            )\n        )\n    );\n\n    registry.register(PaymentStrategyType.WE_PAY, () =>\n        new WepayPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            new WepayRiskClient(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.MASTERPASS, () =>\n        new MasterpassPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            new MasterpassScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.STRIPE_GOOGLE_PAY, () =>\n        new GooglePayPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            paymentActionCreator,\n            orderActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayStripeInitializer()\n            )\n        )\n    );\n\n    return registry;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { Overlay } from '../../../common/overlay';\n\nimport BraintreePaymentProcessor from './braintree-payment-processor';\nimport BraintreeScriptLoader from './braintree-script-loader';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\n\nexport default function createBraintreePaymentProcessor(scriptLoader: ScriptLoader) {\n    const braintreeScriptLoader = new BraintreeScriptLoader(scriptLoader);\n    const braintreeSDKCreator = new BraintreeSDKCreator(braintreeScriptLoader);\n    const overlay = new Overlay();\n\n    return new BraintreePaymentProcessor(braintreeSDKCreator, overlay);\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { Address } from '../../address';\nimport { InternalCheckoutSelectors, ReadableCheckoutStore } from '../../checkout';\nimport { addMinutes, isFuture } from '../../common/date-time';\nimport { MissingDataError, MissingDataErrorType } from '../../common/error/errors';\n\nimport { SessionContext, VaultAccessToken } from './instrument';\nimport { DeleteInstrumentAction, InstrumentActionType, LoadInstrumentsAction } from './instrument-actions';\nimport InstrumentRequestSender from './instrument-request-sender';\n\nexport default class InstrumentActionCreator {\n    constructor(\n        private _instrumentRequestSender: InstrumentRequestSender\n    ) {}\n\n    loadInstruments(): ThunkAction<LoadInstrumentsAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<LoadInstrumentsAction>) => {\n            observer.next(createAction(InstrumentActionType.LoadInstrumentsRequested));\n\n            const session = this._getSessionContext(store);\n            const token = this._getCurrentAccessToken(store);\n            const shippingAddress = this._getShippingAddress(store);\n\n            return this._getValidAccessToken(token)\n                .then(currentToken =>\n                    this._instrumentRequestSender.loadInstruments({\n                            ...session,\n                            authToken: currentToken.vaultAccessToken,\n                        },\n                        shippingAddress\n                    )\n                        .then(({ body }) => {\n                            observer.next(createAction(\n                                InstrumentActionType.LoadInstrumentsSucceeded,\n                                body,\n                                currentToken\n                            ));\n                            observer.complete();\n                        })\n                )\n                .catch(response => {\n                    observer.error(createErrorAction(InstrumentActionType.LoadInstrumentsFailed, response));\n                });\n        });\n    }\n\n    deleteInstrument(instrumentId: string): ThunkAction<DeleteInstrumentAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<DeleteInstrumentAction>) => {\n            observer.next(createAction(InstrumentActionType.DeleteInstrumentRequested, undefined, { instrumentId }));\n\n            const session = this._getSessionContext(store);\n            const token = this._getCurrentAccessToken(store);\n\n            return this._getValidAccessToken(token)\n                .then(currentToken =>\n                    this._instrumentRequestSender.deleteInstrument({\n                        ...session,\n                        authToken: currentToken.vaultAccessToken,\n                    }, instrumentId)\n                        .then(({ body }) => {\n                            observer.next(createAction(InstrumentActionType.DeleteInstrumentSucceeded, body, {\n                                instrumentId,\n                                ...currentToken,\n                            }));\n                            observer.complete();\n                        })\n                )\n                .catch(response => {\n                    observer.error(createErrorAction(InstrumentActionType.DeleteInstrumentFailed, response, { instrumentId }));\n                });\n        });\n    }\n\n    private _isValidVaultAccessToken(token: VaultAccessToken): boolean {\n        if (!token || !token.vaultAccessToken) {\n            return false;\n        }\n\n        const expiryBuffer = 2;\n        const expiry = addMinutes(new Date(token.vaultAccessExpiry), expiryBuffer);\n\n        return isFuture(expiry);\n    }\n\n    private _getCurrentAccessToken(store: ReadableCheckoutStore): VaultAccessToken | undefined {\n        const { instruments } = store.getState();\n        const meta = instruments.getInstrumentsMeta();\n\n        if (!meta) {\n            return;\n        }\n\n        return {\n            vaultAccessToken: meta.vaultAccessToken,\n            vaultAccessExpiry: meta.vaultAccessExpiry,\n        };\n    }\n\n    private _getValidAccessToken(token?: VaultAccessToken): Promise<VaultAccessToken> {\n        return token && this._isValidVaultAccessToken(token) ?\n            Promise.resolve(token) :\n            this._instrumentRequestSender.getVaultAccessToken().then(({ body }) => body);\n    }\n\n    private _getShippingAddress(store: ReadableCheckoutStore): Address | undefined {\n        const state = store.getState();\n\n        return state.shippingAddress.getShippingAddress();\n    }\n\n    private _getSessionContext(store: ReadableCheckoutStore): SessionContext {\n        const state = store.getState();\n        const config = state.config.getStoreConfig();\n        const cart = state.cart.getCart();\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        const { customerId } = cart;\n        const { storeId } = config.storeProfile;\n\n        return {\n            customerId,\n            storeId,\n        };\n    }\n}\n","export default function addMinutes(date: Date, amount: number): Date {\n    const newDate = new Date(date.getTime());\n\n    newDate.setMinutes(date.getMinutes() + amount);\n\n    return newDate;\n}\n","export default function isFuture(date: Date): boolean {\n    return date.valueOf() > Date.now();\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport PaymentResponse from '../payment-response';\n\nimport Instrument, { VaultAccessToken } from './instrument';\nimport {\n    InstrumentsResponseBody,\n    InstrumentErrorResponseBody,\n    InternalInstrument,\n    InternalInstrumentsResponseBody,\n    InternalInstrumentErrorResponseBody,\n    InternalVaultAccessTokenResponseBody,\n} from './instrument-response-body';\n\nexport default class InstrumentResponseTransformer {\n    transformResponse(\n        response: PaymentResponse<InternalInstrumentsResponseBody>\n    ): Response<InstrumentsResponseBody> {\n        const { body, ...payload } = this._transformResponse(response);\n\n        return {\n            ...payload,\n            body: {\n                vaultedInstruments: this._transformVaultedInstruments(body.vaulted_instruments),\n            },\n        };\n    }\n\n    transformErrorResponse(\n        response: PaymentResponse<InternalInstrumentErrorResponseBody>\n    ): Response<InstrumentErrorResponseBody> {\n        return this._transformResponse(response);\n    }\n\n    transformVaultAccessResponse(\n        response: Response<InternalVaultAccessTokenResponseBody>\n    ): Response<VaultAccessToken> {\n        return {\n            ...response,\n            body: {\n                vaultAccessToken: response.body.data.token,\n                vaultAccessExpiry: response.body.data.expires_at,\n            },\n        };\n    }\n\n    private _transformVaultedInstruments(vaultedInstruments: InternalInstrument[] = []): Instrument[] {\n        return vaultedInstruments.map(instrument => ({\n            bigpayToken: instrument.bigpay_token,\n            defaultInstrument: instrument.default_instrument,\n            provider: instrument.provider,\n            iin: instrument.iin,\n            last4: instrument.last_4,\n            expiryMonth: instrument.expiry_month,\n            expiryYear: instrument.expiry_year,\n            brand: instrument.brand,\n            trustedShippingAddress: instrument.trusted_shipping_address,\n        }));\n    }\n\n    private _transformResponse<T>(response: PaymentResponse<T>): Response<T> {\n        const { data: body, ...payload } = response;\n\n        return {\n            ...payload,\n            body,\n        };\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { mapToInternalAddress, Address } from '../../address';\nimport { RequestOptions } from '../../common/http-request';\nimport PaymentResponse from '../payment-response';\n\nimport { InstrumentRequestContext, VaultAccessToken } from './instrument';\nimport {\n    InstrumentsResponseBody,\n    InternalInstrumentsResponseBody,\n    InternalInstrumentErrorResponseBody,\n} from './instrument-response-body';\nimport InstrumentResponseTransformer from './instrument-response-transformer';\n\nexport default class InstrumentRequestSender {\n    private _transformer: InstrumentResponseTransformer;\n\n    constructor(\n        private _client: any,\n        private _requestSender: RequestSender\n    ) {\n        this._transformer = new InstrumentResponseTransformer();\n    }\n\n    getVaultAccessToken(\n        { timeout }: RequestOptions = {}\n    ): Promise<Response<VaultAccessToken>> {\n        const url = '/internalapi/v1/checkout/payments/vault-access-token';\n\n        return this._requestSender.get(url, { timeout }).then(response => ({\n            ...response,\n            body: {\n                vaultAccessToken: response.body.data.token,\n                vaultAccessExpiry: response.body.data.expires_at,\n            },\n        }));\n    }\n\n    loadInstruments(\n        requestContext: InstrumentRequestContext,\n        shippingAddress?: Address\n    ): Promise<Response<InstrumentsResponseBody>> {\n        return (shippingAddress) ?\n            this._loadInstrumentsWithAddress(requestContext, shippingAddress) :\n            this._loadInstruments(requestContext);\n    }\n\n    deleteInstrument(\n        requestContext: InstrumentRequestContext,\n        instrumentId: string\n    ): Promise<Response<InstrumentsResponseBody>> {\n        const payload = {\n            ...requestContext,\n            instrumentId,\n        };\n\n        return new Promise((resolve, reject) => {\n            this._client.deleteShopperInstrument(\n                payload, (\n                    errorResponse: PaymentResponse<InternalInstrumentErrorResponseBody>,\n                    response: PaymentResponse<InternalInstrumentsResponseBody>\n                ) =>  errorResponse ?\n                    reject(this._transformer.transformErrorResponse(errorResponse)) :\n                    resolve(this._transformer.transformResponse(response))\n            );\n        });\n    }\n\n    private _loadInstruments(\n        requestContext: InstrumentRequestContext\n    ): Promise<Response<InstrumentsResponseBody>> {\n        return new Promise((resolve, reject) => {\n            this._client.loadInstruments(\n                requestContext, (\n                    errorResponse: PaymentResponse<InternalInstrumentErrorResponseBody>,\n                    response: PaymentResponse<InternalInstrumentsResponseBody>\n                ) => errorResponse ?\n                    reject(this._transformer.transformErrorResponse(errorResponse)) :\n                    resolve(this._transformer.transformResponse(response))\n            );\n        });\n    }\n\n    private _loadInstrumentsWithAddress(\n        requestContext: InstrumentRequestContext,\n        shippingAddress: Address\n    ): Promise<Response<InstrumentsResponseBody>> {\n        const payload = {\n            ...requestContext,\n            shippingAddress: mapToInternalAddress(shippingAddress),\n        };\n\n        return new Promise((resolve, reject) => {\n            this._client.loadInstrumentsWithAddress(\n                payload, (\n                    errorResponse: PaymentResponse<InternalInstrumentErrorResponseBody>,\n                    response: PaymentResponse<InternalInstrumentsResponseBody>\n                ) => errorResponse ?\n                    reject(this._transformer.transformErrorResponse(errorResponse)) :\n                    resolve(this._transformer.transformResponse(response))\n            );\n        });\n    }\n}\n","import { Address } from '../address';\nimport { BillingAddress, BillingAddressSelector } from '../billing';\nimport { Cart, CartSelector } from '../cart';\nimport { selector } from '../common/selector';\nimport { ConfigSelector } from '../config';\nimport { StoreConfig } from '../config/config';\nimport { Coupon, CouponSelector, GiftCertificate, GiftCertificateSelector } from '../coupon';\nimport { Customer, CustomerSelector } from '../customer';\nimport { FormField, FormSelector } from '../form';\nimport { Country, CountrySelector } from '../geography';\nimport { Order, OrderSelector } from '../order';\nimport { PaymentMethod, PaymentMethodSelector, PaymentSelector } from '../payment';\nimport { Instrument, InstrumentSelector } from '../payment/instrument';\nimport {\n    Consignment,\n    ConsignmentSelector,\n    ShippingAddressSelector,\n    ShippingCountrySelector,\n    ShippingOption,\n} from '../shipping';\n\nimport Checkout from './checkout';\nimport CheckoutSelector from './checkout-selector';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for getting the state of the current checkout.\n *\n * This object has a set of methods that allow you to get a specific piece of\n * checkout information, such as shipping and billing details.\n */\n@selector\nexport default class CheckoutStoreSelector {\n    private _billingAddress: BillingAddressSelector;\n    private _cart: CartSelector;\n    private _checkout: CheckoutSelector;\n    private _config: ConfigSelector;\n    private _consignments: ConsignmentSelector;\n    private _countries: CountrySelector;\n    private _coupons: CouponSelector;\n    private _customer: CustomerSelector;\n    private _form: FormSelector;\n    private _giftCertificates: GiftCertificateSelector;\n    private _instruments: InstrumentSelector;\n    private _order: OrderSelector;\n    private _payment: PaymentSelector;\n    private _paymentMethods: PaymentMethodSelector;\n    private _shippingAddress: ShippingAddressSelector;\n    private _shippingCountries: ShippingCountrySelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._billingAddress = selectors.billingAddress;\n        this._cart = selectors.cart;\n        this._checkout = selectors.checkout;\n        this._config = selectors.config;\n        this._consignments = selectors.consignments;\n        this._countries = selectors.countries;\n        this._coupons = selectors.coupons;\n        this._customer = selectors.customer;\n        this._form = selectors.form;\n        this._giftCertificates = selectors.giftCertificates;\n        this._instruments = selectors.instruments;\n        this._order = selectors.order;\n        this._payment = selectors.payment;\n        this._paymentMethods = selectors.paymentMethods;\n        this._shippingAddress = selectors.shippingAddress;\n        this._shippingCountries = selectors.shippingCountries;\n    }\n\n    /**\n     * Gets the current checkout.\n     *\n     * @returns The current checkout if it is loaded, otherwise undefined.\n     */\n    getCheckout(): Checkout | undefined {\n        return this._checkout.getCheckout();\n    }\n\n    /**\n     * Gets the current order.\n     *\n     * @returns The current order if it is loaded, otherwise undefined.\n     */\n    getOrder(): Order | undefined {\n        return this._order.getOrder();\n    }\n\n    /**\n     * Gets the checkout configuration of a store.\n     *\n     * @returns The configuration object if it is loaded, otherwise undefined.\n     */\n    getConfig(): StoreConfig | undefined {\n        return this._config.getStoreConfig();\n    }\n\n    /**\n     * Gets the shipping address of the current checkout.\n     *\n     * If the address is partially complete, it may not have shipping options\n     * associated with it.\n     *\n     * @returns The shipping address object if it is loaded, otherwise\n     * undefined.\n     */\n    getShippingAddress(): Address | undefined {\n        const shippingAddress = this._shippingAddress.getShippingAddress();\n        const context = this._config.getContextConfig();\n\n        if (!shippingAddress) {\n            if (!context || !context.geoCountryCode) {\n                return;\n            }\n\n            return {\n                firstName: '',\n                lastName: '',\n                company: '',\n                address1: '',\n                address2: '',\n                city: '',\n                stateOrProvince: '',\n                stateOrProvinceCode: '',\n                postalCode: '',\n                country: '',\n                phone: '',\n                customFields: [],\n                countryCode: context.geoCountryCode,\n            };\n        }\n\n        return shippingAddress;\n    }\n\n    /**\n     * Gets a list of shipping options available for the shipping address.\n     *\n     * If there is no shipping address assigned to the current checkout, the\n     * list of shipping options will be empty.\n     *\n     * @returns The list of shipping options if any, otherwise undefined.\n     */\n    getShippingOptions(): ShippingOption[] | undefined {\n        const consignments = this._consignments.getConsignments();\n\n        if (consignments && consignments.length) {\n            return consignments[0].availableShippingOptions;\n        }\n\n        return;\n    }\n\n    /**\n     * Gets a list of consignments.\n     *\n     * If there are no consignments created for to the current checkout, the\n     * list will be empty.\n     *\n     * @returns The list of consignments if any, otherwise undefined.\n     */\n    getConsignments(): Consignment[] | undefined {\n        return this._consignments.getConsignments();\n    }\n\n    /**\n     * Gets the selected shipping option for the current checkout.\n     *\n     * @returns The shipping option object if there is a selected option,\n     * otherwise undefined.\n     */\n    getSelectedShippingOption(): ShippingOption | undefined {\n        const consignments = this._consignments.getConsignments();\n\n        if (!consignments || !consignments.length) {\n            return;\n        }\n\n        return consignments[0].selectedShippingOption;\n    }\n\n    /**\n     * Gets a list of countries available for shipping.\n     *\n     * @returns The list of countries if it is loaded, otherwise undefined.\n     */\n    getShippingCountries(): Country[] | undefined {\n        return this._shippingCountries.getShippingCountries();\n    }\n\n    /**\n     * Gets the billing address of an order.\n     *\n     * @returns The billing address object if it is loaded, otherwise undefined.\n     */\n    getBillingAddress(): BillingAddress | undefined {\n        return this._billingAddress.getBillingAddress();\n    }\n\n    /**\n     * Gets a list of countries available for billing.\n     *\n     * @returns The list of countries if it is loaded, otherwise undefined.\n     */\n    getBillingCountries(): Country[] | undefined {\n        return this._countries.getCountries();\n    }\n\n    /**\n     * Gets a list of payment methods available for checkout.\n     *\n     * @returns The list of payment methods if it is loaded, otherwise undefined.\n     */\n    getPaymentMethods(): PaymentMethod[] | undefined {\n        return this._paymentMethods.getPaymentMethods();\n    }\n\n    /**\n     * Gets a payment method by an id.\n     *\n     * The method returns undefined if unable to find a payment method with the\n     * specified id, either because it is not available for the customer, or it\n     * is not loaded.\n     *\n     * @param methodId - The identifier of the payment method.\n     * @param gatewayId - The identifier of a payment provider providing the\n     * payment method.\n     * @returns The payment method object if loaded and available, otherwise,\n     * undefined.\n     */\n    getPaymentMethod(methodId: string, gatewayId?: string): PaymentMethod | undefined {\n        return this._paymentMethods.getPaymentMethod(methodId, gatewayId);\n    }\n\n    /**\n     * Gets the payment method that is selected for checkout.\n     *\n     * @returns The payment method object if there is a selected method;\n     * undefined if otherwise.\n     */\n    getSelectedPaymentMethod(): PaymentMethod | undefined {\n        const payment = this._payment.getPaymentId();\n\n        return payment && this._paymentMethods.getPaymentMethod(payment.providerId, payment.gatewayId);\n    }\n\n    /**\n     * Gets the current cart.\n     *\n     * @returns The current cart object if it is loaded, otherwise undefined.\n     */\n    getCart(): Cart | undefined {\n        return this._cart.getCart();\n    }\n\n    /**\n     * Gets a list of coupons that are applied to the current checkout.\n     *\n     * @returns The list of applied coupons if there is any, otherwise undefined.\n     */\n    getCoupons(): Coupon[] | undefined {\n        return this._coupons.getCoupons();\n    }\n\n    /**\n     * Gets a list of gift certificates that are applied to the current checkout.\n     *\n     * @returns The list of applied gift certificates if there is any, otherwise undefined.\n     */\n    getGiftCertificates(): GiftCertificate[] | undefined {\n        return this._giftCertificates.getGiftCertificates();\n    }\n\n    /**\n     * Gets the current customer.\n     *\n     * @returns The current customer object if it is loaded, otherwise\n     * undefined.\n     */\n    getCustomer(): Customer | undefined {\n        return this._customer.getCustomer();\n    }\n\n    /**\n     * Checks if payment data is required or not.\n     *\n     * If payment data is required, customers should be prompted to enter their\n     * payment details.\n     *\n     * ```js\n     * if (state.checkout.isPaymentDataRequired()) {\n     *     // Render payment form\n     * } else {\n     *     // Render \"Payment is not required for this order\" message\n     * }\n     * ```\n     *\n     * @param useStoreCredit - If true, check whether payment data is required\n     * with store credit applied; otherwise, check without store credit.\n     * @returns True if payment data is required, otherwise false.\n     */\n    isPaymentDataRequired(useStoreCredit?: boolean): boolean {\n        return this._payment.isPaymentDataRequired(useStoreCredit);\n    }\n\n    /**\n     * Checks if payment data is submitted or not.\n     *\n     * If payment data is already submitted using a payment method, customers\n     * should not be prompted to enter their payment details again.\n     *\n     * @param methodId - The identifier of the payment method.\n     * @param gatewayId - The identifier of a payment provider providing the\n     * payment method.\n     * @returns True if payment data is submitted, otherwise false.\n     */\n    isPaymentDataSubmitted(methodId: string, gatewayId?: string): boolean {\n        return this._payment.isPaymentDataSubmitted(this.getPaymentMethod(methodId, gatewayId));\n    }\n\n    /**\n     * Gets a list of payment instruments associated with the current customer.\n     *\n     * @returns The list of payment instruments if it is loaded, otherwise undefined.\n     */\n    getInstruments(): Instrument[] | undefined {\n        return this._instruments.getInstruments();\n    }\n\n    /**\n     * Gets a set of form fields that should be presented to customers in order\n     * to capture their billing address for a specific country.\n     *\n     * @param countryCode - A 2-letter country code (ISO 3166-1 alpha-2).\n     * @returns The set of billing address form fields if it is loaded,\n     * otherwise undefined.\n     */\n    getBillingAddressFields(countryCode: string): FormField[] {\n        return this._form.getBillingAddressFields(this.getBillingCountries(), countryCode);\n    }\n\n    /**\n     * Gets a set of form fields that should be presented to customers in order\n     * to capture their shipping address for a specific country.\n     *\n     * @param countryCode - A 2-letter country code (ISO 3166-1 alpha-2).\n     * @returns The set of shipping address form fields if it is loaded,\n     * otherwise undefined.\n     */\n    getShippingAddressFields(countryCode: string): FormField[] {\n        return this._form.getShippingAddressFields(this.getShippingCountries(), countryCode);\n    }\n}\n","import { BillingAddressSelector } from '../billing';\nimport { CartSelector } from '../cart';\nimport { RequestError } from '../common/error/errors';\nimport { selector } from '../common/selector';\nimport { ConfigSelector } from '../config';\nimport { CouponSelector, GiftCertificateSelector } from '../coupon';\nimport { CustomerStrategySelector } from '../customer';\nimport { CountrySelector } from '../geography';\nimport { OrderSelector } from '../order';\nimport { PaymentMethodSelector, PaymentStrategySelector } from '../payment';\nimport { InstrumentSelector } from '../payment/instrument';\nimport { ConsignmentSelector, ShippingCountrySelector, ShippingStrategySelector } from '../shipping';\n\nimport CheckoutSelector from './checkout-selector';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for getting the error of any asynchronous checkout action, if\n * there is any.\n *\n * This object has a set of getters that would return an error if an action is\n * not executed successfully. For example, if you are unable to submit an order,\n * you can use this object to retrieve the reason for the failure.\n */\n@selector\nexport default class CheckoutStoreErrorSelector {\n    private _billingAddress: BillingAddressSelector;\n    private _cart: CartSelector;\n    private _checkout: CheckoutSelector;\n    private _config: ConfigSelector;\n    private _consignments: ConsignmentSelector;\n    private _countries: CountrySelector;\n    private _coupons: CouponSelector;\n    private _customerStrategies: CustomerStrategySelector;\n    private _giftCertificates: GiftCertificateSelector;\n    private _instruments: InstrumentSelector;\n    private _order: OrderSelector;\n    private _paymentMethods: PaymentMethodSelector;\n    private _paymentStrategies: PaymentStrategySelector;\n    private _shippingCountries: ShippingCountrySelector;\n    private _shippingStrategies: ShippingStrategySelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._billingAddress = selectors.billingAddress;\n        this._cart = selectors.cart;\n        this._checkout = selectors.checkout;\n        this._config = selectors.config;\n        this._consignments = selectors.consignments;\n        this._countries = selectors.countries;\n        this._coupons = selectors.coupons;\n        this._customerStrategies = selectors.customerStrategies;\n        this._giftCertificates = selectors.giftCertificates;\n        this._instruments = selectors.instruments;\n        this._order = selectors.order;\n        this._paymentMethods = selectors.paymentMethods;\n        this._paymentStrategies = selectors.paymentStrategies;\n        this._shippingCountries = selectors.shippingCountries;\n        this._shippingStrategies = selectors.shippingStrategies;\n    }\n\n    /**\n     * Gets the error of any checkout action that has failed.\n     *\n     * @returns The error object if unable to perform any checkout action,\n     * otherwise undefined.\n     */\n    getError(): Error | undefined {\n        // tslint:disable-next-line:cyclomatic-complexity\n        return this.getLoadCheckoutError() ||\n            this.getSubmitOrderError() ||\n            this.getFinalizeOrderError() ||\n            this.getLoadOrderError() ||\n            this.getLoadCartError() ||\n            this.getLoadBillingCountriesError() ||\n            this.getLoadShippingCountriesError() ||\n            this.getLoadPaymentMethodsError() ||\n            this.getLoadPaymentMethodError() ||\n            this.getInitializePaymentError() ||\n            this.getLoadShippingOptionsError() ||\n            this.getSelectShippingOptionError() ||\n            this.getSignInError() ||\n            this.getSignOutError() ||\n            this.getInitializeCustomerError() ||\n            this.getUpdateShippingAddressError() ||\n            this.getUpdateBillingAddressError() ||\n            this.getContinueAsGuestError() ||\n            this.getUpdateConsignmentError() ||\n            this.getCreateConsignmentsError() ||\n            this.getDeleteConsignmentError() ||\n            this.getInitializeShippingError() ||\n            this.getApplyCouponError() ||\n            this.getRemoveCouponError() ||\n            this.getApplyGiftCertificateError() ||\n            this.getRemoveGiftCertificateError() ||\n            this.getLoadInstrumentsError() ||\n            this.getDeleteInstrumentError() ||\n            this.getLoadConfigError();\n    }\n\n    /**\n     * Returns an error if unable to load the current checkout.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadCheckoutError(): Error | undefined {\n        return this._checkout.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to update the current checkout.\n     *\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateCheckoutError(): Error | undefined {\n        return this._checkout.getUpdateError();\n    }\n\n    /**\n     * Returns an error if unable to submit the current order.\n     *\n     * @returns The error object if unable to submit, otherwise undefined.\n     */\n    getSubmitOrderError(): Error | undefined {\n        return this._paymentStrategies.getExecuteError();\n    }\n\n    /**\n     * Returns an error if unable to finalize the current order.\n     *\n     * @returns The error object if unable to finalize, otherwise undefined.\n     */\n    getFinalizeOrderError(): Error | undefined {\n        return this._paymentStrategies.getFinalizeError();\n    }\n\n    /**\n     * Returns an error if unable to load the current order.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadOrderError(): Error | undefined {\n        return this._order.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to load the current cart.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadCartError(): Error | undefined {\n        return this._cart.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to load billing countries.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadBillingCountriesError(): Error | undefined {\n        return this._countries.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to load shipping countries.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadShippingCountriesError(): Error | undefined {\n        return this._shippingCountries.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to load payment methods.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadPaymentMethodsError(): Error | undefined {\n        return this._paymentMethods.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to load a specific payment method.\n     *\n     * @param methodId - The identifier of the payment method to load.\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadPaymentMethodError(methodId?: string): Error | undefined {\n        return this._paymentMethods.getLoadMethodError(methodId);\n    }\n\n    /**\n     * Returns an error if unable to initialize a specific payment method.\n     *\n     * @param methodId - The identifier of the payment method to initialize.\n     * @returns The error object if unable to initialize, otherwise undefined.\n     */\n    getInitializePaymentError(methodId?: string): Error | undefined {\n        return this._paymentStrategies.getInitializeError(methodId);\n    }\n\n    /**\n     * Returns an error if unable to sign in.\n     *\n     * @returns The error object if unable to sign in, otherwise undefined.\n     */\n    getSignInError(): Error | undefined {\n        return this._customerStrategies.getSignInError();\n    }\n\n    /**\n     * Returns an error if unable to sign out.\n     *\n     * @returns The error object if unable to sign out, otherwise undefined.\n     */\n    getSignOutError(): Error | undefined {\n        return this._customerStrategies.getSignOutError();\n    }\n\n    /**\n     * Returns an error if unable to initialize the customer step of a checkout\n     * process.\n     *\n     * @param methodId - The identifer of the initialization method to execute.\n     * @returns The error object if unable to initialize, otherwise undefined.\n     */\n    getInitializeCustomerError(methodId?: string): Error | undefined {\n        return this._customerStrategies.getInitializeError(methodId);\n    }\n\n    /**\n     * Returns an error if unable to load shipping options.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadShippingOptionsError(): Error | undefined {\n        return this._consignments.getLoadShippingOptionsError();\n    }\n\n    /**\n     * Returns an error if unable to select a shipping option.\n     *\n     * A consignment ID should be provided when checking for an error for a\n     * specific consignment, otherwise it will check for all available consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns The error object if unable to select, otherwise undefined.\n     */\n    getSelectShippingOptionError(consignmentId?: string): Error | undefined {\n        return this._shippingStrategies.getSelectOptionError() ||\n            this._consignments.getUpdateShippingOptionError(consignmentId);\n    }\n\n    /**\n     * Returns an error if unable to continue as guest.\n     *\n     * @returns The error object if unable to continue, otherwise undefined.\n     */\n    getContinueAsGuestError(): Error | undefined {\n        return this._billingAddress.getContinueAsGuestError();\n    }\n\n    /**\n     * Returns an error if unable to update billing address.\n     *\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateBillingAddressError(): Error | undefined {\n        return this._billingAddress.getUpdateError();\n    }\n\n    /**\n     * Returns an error if unable to update shipping address.\n     *\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateShippingAddressError(): Error | undefined {\n        return this._shippingStrategies.getUpdateAddressError();\n    }\n\n    /**\n     * Returns an error if unable to delete a consignment.\n     *\n     * A consignment ID should be provided when checking for an error for a\n     * specific consignment, otherwise it will check for all available consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns The error object if unable to delete, otherwise undefined.\n     */\n    getDeleteConsignmentError(consignmentId?: string): Error | undefined {\n        return this._consignments.getDeleteError(consignmentId);\n    }\n\n    /**\n     * Returns an error if unable to update a consignment.\n     *\n     * A consignment ID should be provided when checking for an error for a\n     * specific consignment, otherwise it will check for all available consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateConsignmentError(consignmentId?: string): Error | undefined {\n        return this._consignments.getUpdateError(consignmentId);\n    }\n\n    /**\n     * Returns an error if unable to create consignments.\n     *\n     * @returns The error object if unable to create, otherwise undefined.\n     */\n    getCreateConsignmentsError(): Error | undefined {\n        return this._consignments.getCreateError();\n    }\n\n    /**\n     * Returns an error if unable to initialize the shipping step of a checkout\n     * process.\n     *\n     * @param methodId - The identifer of the initialization method to execute.\n     * @returns The error object if unable to initialize, otherwise undefined.\n     */\n    getInitializeShippingError(methodId?: string): Error | undefined {\n        return this._shippingStrategies.getInitializeError(methodId);\n    }\n\n    /**\n     * Returns an error if unable to apply a coupon code.\n     *\n     * @returns The error object if unable to apply, otherwise undefined.\n     */\n    getApplyCouponError(): RequestError | undefined {\n        return this._coupons.getApplyError();\n    }\n\n    /**\n     * Returns an error if unable to remove a coupon code.\n     *\n     * @returns The error object if unable to remove, otherwise undefined.\n     */\n    getRemoveCouponError(): RequestError | undefined {\n        return this._coupons.getRemoveError();\n    }\n\n    /**\n     * Returns an error if unable to apply a gift certificate.\n     *\n     * @returns The error object if unable to apply, otherwise undefined.\n     */\n    getApplyGiftCertificateError(): RequestError | undefined {\n        return this._giftCertificates.getApplyError();\n    }\n\n    /**\n     * Returns an error if unable to remove a gift certificate.\n     *\n     * @returns The error object if unable to remove, otherwise undefined.\n     */\n    getRemoveGiftCertificateError(): RequestError | undefined {\n        return this._giftCertificates.getRemoveError();\n    }\n\n    /**\n     * Returns an error if unable to load payment instruments.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadInstrumentsError(): Error | undefined {\n        return this._instruments.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to delete a payment instrument.\n     *\n     * @param instrumentId - The identifier of the payment instrument to delete.\n     * @returns The error object if unable to delete, otherwise undefined.\n     */\n    getDeleteInstrumentError(instrumentId?: string): Error | undefined {\n        return this._instruments.getDeleteError(instrumentId);\n    }\n\n    /**\n     * Returns an error if unable to load the checkout configuration of a store.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadConfigError(): Error | undefined {\n        return this._config.getLoadError();\n    }\n}\n","import { BillingAddressSelector } from '../billing';\nimport { CartSelector } from '../cart';\nimport { selector } from '../common/selector';\nimport { ConfigSelector } from '../config';\nimport { CouponSelector, GiftCertificateSelector } from '../coupon';\nimport { CustomerStrategySelector } from '../customer';\nimport { CountrySelector } from '../geography';\nimport { OrderSelector } from '../order';\nimport { PaymentMethodSelector, PaymentStrategySelector } from '../payment';\nimport { InstrumentSelector } from '../payment/instrument';\nimport { ConsignmentSelector, ShippingCountrySelector, ShippingStrategySelector } from '../shipping';\n\nimport CheckoutSelector from './checkout-selector';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for checking the statuses of various asynchronous actions related\n * to checkout.\n *\n * This object has a set of getters that return true if an action is in\n * progress. For example, you can check whether a customer is submitting an\n * order and waiting for the request to complete.\n */\n@selector\nexport default class CheckoutStoreStatusSelector {\n    private _billingAddress: BillingAddressSelector;\n    private _cart: CartSelector;\n    private _checkout: CheckoutSelector;\n    private _config: ConfigSelector;\n    private _consignments: ConsignmentSelector;\n    private _countries: CountrySelector;\n    private _coupons: CouponSelector;\n    private _customerStrategies: CustomerStrategySelector;\n    private _giftCertificates: GiftCertificateSelector;\n    private _instruments: InstrumentSelector;\n    private _order: OrderSelector;\n    private _paymentMethods: PaymentMethodSelector;\n    private _paymentStrategies: PaymentStrategySelector;\n    private _shippingCountries: ShippingCountrySelector;\n    private _shippingStrategies: ShippingStrategySelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._billingAddress = selectors.billingAddress;\n        this._cart = selectors.cart;\n        this._checkout = selectors.checkout;\n        this._config = selectors.config;\n        this._consignments = selectors.consignments;\n        this._countries = selectors.countries;\n        this._coupons = selectors.coupons;\n        this._customerStrategies = selectors.customerStrategies;\n        this._giftCertificates = selectors.giftCertificates;\n        this._instruments = selectors.instruments;\n        this._order = selectors.order;\n        this._paymentMethods = selectors.paymentMethods;\n        this._paymentStrategies = selectors.paymentStrategies;\n        this._shippingCountries = selectors.shippingCountries;\n        this._shippingStrategies = selectors.shippingStrategies;\n    }\n\n    /**\n     * Checks whether any checkout action is pending.\n     *\n     * @returns True if there is a pending action, otherwise false.\n     */\n    isPending(): boolean {\n        // tslint:disable-next-line:cyclomatic-complexity\n        return this.isLoadingCheckout() ||\n            this.isSubmittingOrder() ||\n            this.isFinalizingOrder() ||\n            this.isLoadingOrder() ||\n            this.isLoadingCart() ||\n            this.isLoadingBillingCountries() ||\n            this.isLoadingShippingCountries() ||\n            this.isLoadingPaymentMethods() ||\n            this.isLoadingPaymentMethod() ||\n            this.isInitializingPayment() ||\n            this.isLoadingShippingOptions() ||\n            this.isSelectingShippingOption() ||\n            this.isSigningIn() ||\n            this.isSigningOut() ||\n            this.isInitializingCustomer() ||\n            this.isUpdatingBillingAddress() ||\n            this.isContinuingAsGuest() ||\n            this.isUpdatingShippingAddress() ||\n            this.isUpdatingConsignment() ||\n            this.isCreatingConsignments() ||\n            this.isDeletingConsignment() ||\n            this.isInitializingShipping() ||\n            this.isApplyingCoupon() ||\n            this.isRemovingCoupon() ||\n            this.isApplyingGiftCertificate() ||\n            this.isRemovingGiftCertificate() ||\n            this.isLoadingInstruments() ||\n            this.isDeletingInstrument() ||\n            this.isLoadingConfig() ||\n            this.isCustomerStepPending() ||\n            this.isPaymentStepPending();\n    }\n\n    /**\n     * Checks whether the current checkout is loading.\n     *\n     * @returns True if the current checkout is loading, otherwise false.\n     */\n    isLoadingCheckout(): boolean {\n        return this._checkout.isLoading();\n    }\n\n    /**\n     * Checks whether the current checkout is being updated.\n     *\n     * @returns True if the current checkout is being updated, otherwise false.\n     */\n    isUpdatingCheckout(): boolean {\n        return this._checkout.isUpdating();\n    }\n\n    /**\n     * Checks whether the current order is submitting.\n     *\n     * @returns True if the current order is submitting, otherwise false.\n     */\n    isSubmittingOrder(): boolean {\n        return this._paymentStrategies.isExecuting();\n    }\n\n    /**\n     * Checks whether the current order is finalizing.\n     *\n     * @returns True if the current order is finalizing, otherwise false.\n     */\n    isFinalizingOrder(): boolean {\n        return this._paymentStrategies.isFinalizing();\n    }\n\n    /**\n     * Checks whether the current order is loading.\n     *\n     * @returns True if the current order is loading, otherwise false.\n     */\n    isLoadingOrder(): boolean {\n        return this._order.isLoading();\n    }\n\n    /**\n     * Checks whether the current cart is loading.\n     *\n     * @returns True if the current cart is loading, otherwise false.\n     */\n    isLoadingCart(): boolean {\n        return this._cart.isLoading();\n    }\n\n    /**\n     * Checks whether billing countries are loading.\n     *\n     * @returns True if billing countries are loading, otherwise false.\n     */\n    isLoadingBillingCountries(): boolean {\n        return this._countries.isLoading();\n    }\n\n    /**\n     * Checks whether shipping countries are loading.\n     *\n     * @returns True if shipping countries are loading, otherwise false.\n     */\n    isLoadingShippingCountries(): boolean {\n        return this._shippingCountries.isLoading();\n    }\n\n    /**\n     * Checks whether payment methods are loading.\n     *\n     * @returns True if payment methods are loading, otherwise false.\n     */\n    isLoadingPaymentMethods(): boolean {\n        return this._paymentMethods.isLoading();\n    }\n\n    /**\n     * Checks whether a specific or any payment method is loading.\n     *\n     * The method returns true if no ID is provided and at least one payment\n     * method is loading.\n     *\n     * @param methodId - The identifier of the payment method to check.\n     * @returns True if the payment method is loading, otherwise false.\n     */\n    isLoadingPaymentMethod(methodId?: string): boolean {\n        return this._paymentMethods.isLoadingMethod(methodId);\n    }\n\n    /**\n     * Checks whether a specific or any payment method is initializing.\n     *\n     * The method returns true if no ID is provided and at least one payment\n     * method is initializing.\n     *\n     * @param methodId - The identifier of the payment method to check.\n     * @returns True if the payment method is initializing, otherwise false.\n     */\n    isInitializingPayment(methodId?: string): boolean {\n        return this._paymentStrategies.isInitializing(methodId);\n    }\n\n    /**\n     * Checks whether the current customer is signing in.\n     *\n     * If an ID is provided, the method also checks whether the customer is\n     * signing in using a specific customer method with the same ID.\n     *\n     * @param methodId - The identifier of the method used for signing in the\n     * current customer.\n     * @returns True if the customer is signing in, otherwise false.\n     */\n    isSigningIn(methodId?: string): boolean {\n        return this._customerStrategies.isSigningIn(methodId);\n    }\n\n    /**\n     * Checks whether the current customer is signing out.\n     *\n     * If an ID is provided, the method also checks whether the customer is\n     * signing out using a specific customer method with the same ID.\n     *\n     * @param methodId - The identifier of the method used for signing out the\n     * current customer.\n     * @returns True if the customer is signing out, otherwise false.\n     */\n    isSigningOut(methodId?: string): boolean {\n        return this._customerStrategies.isSigningOut(methodId);\n    }\n\n    /**\n     * Checks whether the customer step is initializing.\n     *\n     * If an ID is provided, the method also checks whether the customer step is\n     * initializing using a specific customer method with the same ID.\n     *\n     * @param methodId - The identifier of the method used for initializing the\n     * customer step of checkout.\n     * @returns True if the customer step is initializing, otherwise false.\n     */\n    isInitializingCustomer(methodId?: string): boolean {\n        return this._customerStrategies.isInitializing(methodId);\n    }\n\n    /**\n     * Checks whether shipping options are loading.\n     *\n     * @returns True if shipping options are loading, otherwise false.\n     */\n    isLoadingShippingOptions(): boolean {\n        return this._consignments.isLoadingShippingOptions();\n    }\n\n    /**\n     * Checks whether a shipping option is being selected.\n     *\n     * A consignment ID should be provided when checking if a shipping option\n     * is being selected for a specific consignment, otherwise it will check\n     * for all consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns True if selecting a shipping option, otherwise false.\n     */\n    isSelectingShippingOption(consignmentId?: string): boolean {\n        return this._shippingStrategies.isSelectingOption() ||\n            this._consignments.isUpdatingShippingOption(consignmentId);\n    }\n\n    /**\n     * Checks whether the billing address is being updated.\n     *\n     * @returns True if updating their billing address, otherwise false.\n     */\n    isUpdatingBillingAddress(): boolean {\n        return this._billingAddress.isUpdating();\n    }\n\n    /**\n     * Checks whether the shopper is continuing out as a guest.\n     *\n     * @returns True if continuing as guest, otherwise false.\n     */\n    isContinuingAsGuest(): boolean {\n        return this._billingAddress.isContinuingAsGuest();\n    }\n\n    /**\n     * Checks the shipping address is being updated.\n     *\n     * @returns True if updating their shipping address, otherwise false.\n     */\n    isUpdatingShippingAddress(): boolean {\n        return this._shippingStrategies.isUpdatingAddress();\n    }\n\n    /**\n     * Checks whether a given/any consignment is being updated.\n     *\n     * A consignment ID should be provided when checking for a specific consignment,\n     * otherwise it will check for any consignment.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns True if updating consignment(s), otherwise false.\n     */\n    isUpdatingConsignment(consignmentId?: string): boolean {\n        return this._consignments.isUpdating(consignmentId);\n    }\n\n    /**\n     * Checks whether a given/any consignment is being deleted.\n     *\n     * A consignment ID should be provided when checking for a specific consignment,\n     * otherwise it will check for any consignment.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns True if deleting consignment(s), otherwise false.\n     */\n    isDeletingConsignment(consignmentId?: string): boolean {\n        return this._consignments.isDeleting(consignmentId);\n    }\n\n    /**\n     * Checks whether a given/any consignment is being updated.\n     *\n     * A consignment ID should be provided when checking for a specific consignment,\n     * otherwise it will check for any consignment.\n     *\n     * @returns True if creating consignments, otherwise false.\n     */\n    isCreatingConsignments(): boolean {\n        return this._consignments.isCreating();\n    }\n\n    /**\n     * Checks whether the shipping step of a checkout process is initializing.\n     *\n     * If an identifier is provided, the method also checks whether the shipping\n     * step is initializing using a specific shipping method with the same\n     * identifier.\n     *\n     * @param methodId - The identifer of the initialization method to check.\n     * @returns True if the shipping step is initializing, otherwise false.\n     */\n    isInitializingShipping(methodId?: string) {\n        return this._shippingStrategies.isInitializing(methodId);\n    }\n\n    /**\n     * Checks whether the current customer is applying a coupon code.\n     *\n     * @returns True if applying a coupon code, otherwise false.\n     */\n    isApplyingCoupon(): boolean {\n        return this._coupons.isApplying();\n    }\n\n    /**\n     * Checks whether the current customer is removing a coupon code.\n     *\n     * @returns True if removing a coupon code, otherwise false.\n     */\n    isRemovingCoupon(): boolean {\n        return this._coupons.isRemoving();\n    }\n\n    /**\n     * Checks whether the current customer is applying a gift certificate.\n     *\n     * @returns True if applying a gift certificate, otherwise false.\n     */\n    isApplyingGiftCertificate(): boolean {\n        return this._giftCertificates.isApplying();\n    }\n\n    /**\n     * Checks whether the current customer is removing a gift certificate.\n     *\n     * @returns True if removing a gift certificate, otherwise false.\n     */\n    isRemovingGiftCertificate(): boolean {\n        return this._giftCertificates.isRemoving();\n    }\n\n    /**\n     * Checks whether the current customer's payment instruments are loading.\n     *\n     * @returns True if payment instruments are loading, otherwise false.\n     */\n    isLoadingInstruments(): boolean {\n        return this._instruments.isLoading();\n    }\n\n    /**\n     * Checks whether the current customer is deleting a payment instrument.\n     *\n     * @returns True if deleting a payment instrument, otherwise false.\n     */\n    isDeletingInstrument(instrumentId?: string): boolean {\n        return this._instruments.isDeleting(instrumentId);\n    }\n\n    /**\n     * Checks whether the checkout configuration of a store is loading.\n     *\n     * @returns True if the configuration is loading, otherwise false.\n     */\n    isLoadingConfig(): boolean {\n        return this._config.isLoading();\n    }\n\n    /**\n     * Checks whether the customer step of a checkout is in a pending state.\n     *\n     * The customer step is considered to be pending if it is in the process of\n     * initializing, signing in, signing out, and/or interacting with a customer\n     * widget.\n     *\n     * @returns True if the customer step is pending, otherwise false.\n     */\n    isCustomerStepPending(): boolean {\n        return this._customerStrategies.isInitializing() ||\n            this._customerStrategies.isSigningIn() ||\n            this._customerStrategies.isSigningOut() ||\n            this._customerStrategies.isWidgetInteracting();\n    }\n\n    /**\n     * Checks whether the payment step of a checkout is in a pending state.\n     *\n     * The payment step is considered to be pending if it is in the process of\n     * initializing, submitting an order, finalizing an order, and/or\n     * interacting with a payment widget.\n     *\n     * @returns True if the payment step is pending, otherwise false.\n     */\n    isPaymentStepPending(): boolean {\n        return this._paymentStrategies.isInitializing() ||\n            this._paymentStrategies.isExecuting() ||\n            this._paymentStrategies.isFinalizing() ||\n            this._paymentStrategies.isWidgetInteracting();\n    }\n}\n","import {\n    CheckoutSelectors,\n    CheckoutStoreErrorSelector,\n    CheckoutStoreSelector,\n    CheckoutStoreStatusSelector,\n    InternalCheckoutSelectors,\n} from '../checkout';\n\nexport default function createCheckoutSelectors(selectors: InternalCheckoutSelectors): CheckoutSelectors {\n    const data = new CheckoutStoreSelector(selectors);\n    const errors = new CheckoutStoreErrorSelector(selectors);\n    const statuses = new CheckoutStoreStatusSelector(selectors);\n\n    return {\n        data,\n        errors,\n        statuses,\n    };\n}\n","import { toSingleLine } from '../utility';\n\nexport default class ErrorMessageTransformer<TError extends Error = Error> {\n    constructor(\n        private _messageCustomizer: (type: TError) => string\n    ) {}\n\n    transform(error: TError): TError {\n        error.message = toSingleLine(this._messageCustomizer(error));\n\n        return error;\n    }\n}\n","import { Action, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs';\n\nimport { AddressRequestBody } from '../address';\nimport { BillingAddressActionCreator, BillingAddressRequestBody } from '../billing';\nimport { ErrorActionCreator, ErrorMessageTransformer } from '../common/error';\nimport { RequestOptions } from '../common/http-request';\nimport { ConfigActionCreator } from '../config';\nimport { CouponActionCreator, GiftCertificateActionCreator } from '../coupon';\nimport { CustomerCredentials, CustomerInitializeOptions, CustomerRequestOptions, CustomerStrategyActionCreator, GuestCredentials } from '../customer';\nimport { CountryActionCreator } from '../geography';\nimport { OrderActionCreator, OrderRequestBody } from '../order';\nimport { PaymentInitializeOptions, PaymentMethodActionCreator, PaymentRequestOptions, PaymentStrategyActionCreator } from '../payment';\nimport { InstrumentActionCreator } from '../payment/instrument';\nimport { ConsignmentsRequestBody, ConsignmentActionCreator, ShippingCountryActionCreator, ShippingInitializeOptions, ShippingRequestOptions, ShippingStrategyActionCreator } from '../shipping';\nimport { ConsignmentAssignmentRequestBody, ConsignmentUpdateRequestBody } from '../shipping/consignment';\n\nimport { CheckoutRequestBody } from './checkout';\nimport CheckoutActionCreator from './checkout-action-creator';\nimport CheckoutParams from './checkout-params';\nimport CheckoutSelectors from './checkout-selectors';\nimport CheckoutStore from './checkout-store';\nimport createCheckoutSelectors from './create-checkout-selectors';\nimport createCheckoutServiceErrorTransformer from './create-checkout-service-error-transformer';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for completing the checkout process for the current customer.\n *\n * This object can be used to collect all information that is required for\n * checkout, such as shipping and billing information. It can also be used to\n * retrieve the current checkout state and subscribe to its changes.\n */\nexport default class CheckoutService {\n    private _state: CheckoutSelectors;\n    private _errorTransformer: ErrorMessageTransformer;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _store: CheckoutStore,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _configActionCreator: ConfigActionCreator,\n        private _consignmentActionCreator: ConsignmentActionCreator,\n        private _countryActionCreator: CountryActionCreator,\n        private _couponActionCreator: CouponActionCreator,\n        private _customerStrategyActionCreator: CustomerStrategyActionCreator,\n        private _errorActionCreator: ErrorActionCreator,\n        private _giftCertificateActionCreator: GiftCertificateActionCreator,\n        private _instrumentActionCreator: InstrumentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _shippingCountryActionCreator: ShippingCountryActionCreator,\n        private _shippingStrategyActionCreator: ShippingStrategyActionCreator\n    ) {\n        this._state = createCheckoutSelectors(this._store.getState());\n        this._errorTransformer = createCheckoutServiceErrorTransformer();\n\n        this._store.subscribe(state => {\n            this._state = createCheckoutSelectors(state);\n        });\n    }\n\n    /**\n     * Returns a snapshot of the current checkout state.\n     *\n     * The method returns a new instance every time there is a change in the\n     * checkout state. You can query the state by calling any of its getter\n     * methods.\n     *\n     * ```js\n     * const state = service.getState();\n     *\n     * console.log(state.data.getOrder());\n     * console.log(state.errors.getSubmitOrderError());\n     * console.log(state.statuses.isSubmittingOrder());\n     * ```\n     *\n     * @returns The current customer's checkout state\n     */\n    getState(): CheckoutSelectors {\n        return this._state;\n    }\n\n    /**\n     * Notifies all subscribers with the current state.\n     *\n     * When this method gets called, the subscribers get called regardless if\n     * they have any filters applied.\n     */\n    notifyState(): void {\n        this._store.notifyState();\n    }\n\n    /**\n     * Subscribes to any changes to the current state.\n     *\n     * The method registers a callback function and executes it every time there\n     * is a change in the checkout state.\n     *\n     * ```js\n     * service.subscribe(state => {\n     *     console.log(state.data.getCart());\n     * });\n     * ```\n     *\n     * The method can be configured to notify subscribers only regarding\n     * relevant changes, by providing a filter function.\n     *\n     * ```js\n     * const filter = state => state.data.getCart();\n     *\n     * // Only trigger the subscriber when the cart changes.\n     * service.subscribe(state => {\n     *     console.log(state.data.getCart())\n     * }, filter);\n     * ```\n     *\n     * @param subscriber - The function to subscribe to state changes.\n     * @param filters - One or more functions to filter out irrelevant state\n     * changes. If more than one function is provided, the subscriber will only\n     * be triggered if all conditions are met.\n     * @returns A function, if called, will unsubscribe the subscriber.\n     */\n    subscribe(\n        subscriber: (state: CheckoutSelectors) => void,\n        ...filters: Array<(state: CheckoutSelectors) => any>\n    ): () => void {\n        return this._store.subscribe(\n            () => subscriber(this.getState()),\n            ...filters.map(filter => (state: InternalCheckoutSelectors) => filter(createCheckoutSelectors(state)))\n        );\n    }\n\n    /**\n     * Loads the current checkout.\n     *\n     * This method can only be called if there is an active checkout. Also, it\n     * can only retrieve data that belongs to the current customer. When it is\n     * successfully executed, you can retrieve the data by calling\n     * `CheckoutStoreSelector#getCheckout`.\n     *\n     * ```js\n     * const state = await service.loadCheckout('0cfd6c06-57c3-4e29-8d7a-de55cc8a9052');\n     *\n     * console.log(state.data.getCheckout());\n     * ```\n     *\n     * @param id - The identifier of the checkout to load, or the default checkout if not provided.\n     * @param options - Options for loading the current checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    loadCheckout(id?: string, options?: RequestOptions<CheckoutParams>): Promise<CheckoutSelectors> {\n        return this._dispatch(id ?\n            this._checkoutActionCreator.loadCheckout(id, options) :\n            this._checkoutActionCreator.loadDefaultCheckout(options)\n        );\n    }\n\n    /**\n     * Updates specific properties of the current checkout.\n     *\n     * ```js\n     * const state = await service.updateCheckout(checkout);\n     *\n     * console.log(state.data.getCheckout());\n     * ```\n     *\n     * @param payload - The checkout properties to be updated.\n     * @param options - Options for loading the current checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    updateCheckout(payload: CheckoutRequestBody, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._checkoutActionCreator.updateCheckout(payload, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Loads an order by an id.\n     *\n     * The method can only retrieve an order if the order belongs to the current\n     * customer. If it is successfully executed, the data can be retrieved by\n     * calling `CheckoutStoreSelector#getOrder`.\n     *\n     * ```js\n     * const state = await service.loadOrder(123);\n     *\n     * console.log(state.data.getOrder());\n     * ```\n     *\n     * @param orderId - The identifier of the order to load.\n     * @param options - Options for loading the order.\n     * @returns A promise that resolves to the current state.\n     */\n    loadOrder(orderId: number, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const loadCheckoutAction = this._orderActionCreator.loadOrder(orderId, options);\n        const loadConfigAction = this._configActionCreator.loadConfig(options);\n\n        return Promise.all([\n            this._dispatch(loadCheckoutAction),\n            this._dispatch(loadConfigAction, { queueId: 'config' }),\n        ])\n            .then(() => this.getState());\n    }\n\n    /**\n     * Submits an order, thereby completing a checkout process.\n     *\n     * Before you can submit an order, you must initialize the payment method\n     * chosen by the customer by calling `CheckoutService#initializePayment`.\n     *\n     * ```js\n     * await service.initializePayment({ methodId: 'braintree' });\n     * await service.submitOrder({\n     *     payment: {\n     *         methodId: 'braintree',\n     *         paymentData: {\n     *             ccExpiry: { month: 10, year: 20 },\n     *             ccName: 'BigCommerce',\n     *             ccNumber: '4111111111111111',\n     *             ccCvv: 123,\n     *         },\n     *     },\n     * });\n     * ```\n     *\n     * You are not required to include `paymentData` if the order does not\n     * require additional payment details. For example, the customer has already\n     * entered their payment details on the cart page using one of the hosted\n     * payment methods, such as PayPal. Or the customer has applied a gift\n     * certificate that exceeds the grand total amount.\n     *\n     * If the order is submitted successfully, you can retrieve the newly\n     * created order by calling `CheckoutStoreSelector#getOrder`.\n     *\n     * ```js\n     * const state = await service.submitOrder(payload);\n     *\n     * console.log(state.data.getOrder());\n     * ```\n     *\n     * @param payload - The request payload to submit for the current order.\n     * @param options - Options for submitting the current order.\n     * @returns A promise that resolves to the current state.\n     */\n    submitOrder(payload: OrderRequestBody, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.execute(payload, options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * Finalizes the submission process for an order.\n     *\n     * This method is only required for certain hosted payment methods that\n     * require a customer to enter their credit card details on their website.\n     * You need to call this method once the customer has redirected back to\n     * checkout in order to complete the checkout process.\n     *\n     * If the method is called before order finalization is required or for a\n     * payment method that does not require order finalization, an error will be\n     * thrown. Conversely, if the method is called successfully, you should\n     * immediately redirect the customer to the order confirmation page.\n     *\n     * ```js\n     * try {\n     *     await service.finalizeOrderIfNeeded();\n     *\n     *     window.location.assign('/order-confirmation');\n     * } catch (error) {\n     *     if (error.type !== 'order_finalization_not_required') {\n     *         throw error;\n     *     }\n     * }\n     * ```\n     *\n     * @param options - Options for finalizing the current order.\n     * @returns A promise that resolves to the current state.\n     * @throws `OrderFinalizationNotRequiredError` error if order finalization\n     * is not required for the current order at the time of execution.\n     */\n    finalizeOrderIfNeeded(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.finalize(options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * Loads a list of payment methods available for checkout.\n     *\n     * If a customer enters their payment details before navigating to the\n     * checkout page (i.e.: using PayPal checkout button on the cart page), only\n     * one payment method will be available for the customer - the selected\n     * payment method. Otherwise, by default, all payment methods configured by\n     * the merchant will be available for the customer.\n     *\n     * Once the method is executed successfully, you can call\n     * `CheckoutStoreSelector#getPaymentMethods` to retrieve the list of payment\n     * methods.\n     *\n     * ```js\n     * const state = service.loadPaymentMethods();\n     *\n     * console.log(state.data.getPaymentMethods());\n     * ```\n     *\n     * @param options - Options for loading the payment methods that are\n     * available to the current customer.\n     * @returns A promise that resolves to the current state.\n     */\n    loadPaymentMethods(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentMethodActionCreator.loadPaymentMethods(options);\n\n        return this._dispatch(action, { queueId: 'paymentMethods' });\n    }\n\n    /**\n     * Loads a payment method by an id.\n     *\n     * This method does not work with multi-option payment providers. Due to its\n     * limitation, it is deprecated and will be removed in the future.\n     *\n     * @deprecated\n     * @internal\n     * @param methodId - The identifier for the payment method to load.\n     * @param options - Options for loading the payment method.\n     * @returns A promise that resolves to the current state.\n     */\n    loadPaymentMethod(methodId: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentMethodActionCreator.loadPaymentMethod(methodId, options);\n\n        return this._dispatch(action, { queueId: 'paymentMethods' });\n    }\n\n    /**\n     * Initializes the payment step of a checkout process.\n     *\n     * Before a payment method can accept payment details, it must first be\n     * initialized. Some payment methods require you to provide additional\n     * initialization options. For example, Amazon requires a container ID in\n     * order to initialize their payment widget.\n     *\n     * ```js\n     * await service.initializePayment({\n     *     methodId: 'amazon',\n     *     amazon: {\n     *         container: 'walletWidget',\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the payment step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    initializePayment(options: PaymentInitializeOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * De-initializes the payment step of a checkout process.\n     *\n     * The method should be called once you no longer require a payment method\n     * to be initialized. It can perform any necessary clean-up behind the\n     * scene, i.e.: remove DOM nodes or event handlers that are attached as a\n     * result of payment initialization.\n     *\n     * ```js\n     * await service.deinitializePayment({\n     *     methodId: 'amazon',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the payment step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializePayment(options: PaymentRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.deinitialize(options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * Loads a list of countries available for billing.\n     *\n     * Once you make a successful request, you will be able to retrieve the list\n     * of countries by calling `CheckoutStoreSelector#getBillingCountries`.\n     *\n     * ```js\n     * const state = await service.loadBillingCountries();\n     *\n     * console.log(state.data.getBillingCountries());\n     * ```\n     *\n     * @param options - Options for loading the available billing countries.\n     * @returns A promise that resolves to the current state.\n     */\n    loadBillingCountries(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._countryActionCreator.loadCountries(options);\n\n        return this._dispatch(action, { queueId: 'billingCountries' });\n    }\n\n    /**\n     * Loads a list of countries available for shipping.\n     *\n     * The list is determined based on the shipping zones configured by a\n     * merchant. Once you make a successful call, you will be able to retrieve\n     * the list of available shipping countries by calling\n     * `CheckoutStoreSelector#getShippingCountries`.\n     *\n     * ```js\n     * const state = await service.loadShippingCountries();\n     *\n     * console.log(state.data.getShippingCountries());\n     * ```\n     *\n     * @param options - Options for loading the available shipping countries.\n     * @returns A promise that resolves to the current state.\n     */\n    loadShippingCountries(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingCountryActionCreator.loadCountries(options);\n\n        return this._dispatch(action, { queueId: 'shippingCountries' });\n    }\n\n    /**\n     * Loads a set of form fields that should be presented to customers in order\n     * to capture their billing address.\n     *\n     * Once the method has been executed successfully, you can call\n     * `CheckoutStoreSelector#getBillingAddressFields` to retrieve the set of\n     * form fields.\n     *\n     * ```js\n     * const state = service.loadBillingAddressFields();\n     *\n     * console.log(state.data.getBillingAddressFields('US'));\n     * ```\n     *\n     * @param options - Options for loading the billing address form fields.\n     * @returns A promise that resolves to the current state.\n     */\n    loadBillingAddressFields(options?: RequestOptions): Promise<CheckoutSelectors> {\n        return this.loadBillingCountries(options);\n    }\n\n    /**\n     * Loads a set of form fields that should be presented to customers in order\n     * to capture their shipping address.\n     *\n     * Once the method has been executed successfully, you can call\n     * `CheckoutStoreSelector#getShippingAddressFields` to retrieve the set of\n     * form fields.\n     *\n     * ```js\n     * const state = service.loadShippingAddressFields();\n     *\n     * console.log(state.data.getShippingAddressFields('US'));\n     * ```\n     *\n     * @param options - Options for loading the shipping address form fields.\n     * @returns A promise that resolves to the current state.\n     */\n    loadShippingAddressFields(options?: RequestOptions): Promise<CheckoutSelectors> {\n        return this.loadShippingCountries(options);\n    }\n\n    /**\n     * Initializes the sign-in step of a checkout process.\n     *\n     * Some payment methods, such as Amazon, have their own sign-in flow. In\n     * order to support them, this method must be called.\n     *\n     * ```js\n     * await service.initializeCustomer({\n     *     methodId: 'amazon',\n     *     amazon: {\n     *         container: 'signInButton',\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the customer step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeCustomer(options?: CustomerInitializeOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * De-initializes the sign-in step of a checkout process.\n     *\n     * It should be called once you no longer want to prompt customers to sign\n     * in. It can perform any necessary clean-up behind the scene, i.e.: remove\n     * DOM nodes or event handlers that are attached as a result of customer\n     * initialization.\n     *\n     * ```js\n     * await service.deinitializeCustomer({\n     *     methodId: 'amazon',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the customer step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeCustomer(options?: CustomerRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.deinitialize(options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * Continues to check out as a guest.\n     *\n     * The customer is required to provide their email address in order to\n     * continue. Once they provide their email address, it will be stored as a\n     * part of their billing address.\n     *\n     * @param credentials - The guest credentials to use.\n     * @param options - Options for continuing as a guest.\n     * @returns A promise that resolves to the current state.\n     */\n    continueAsGuest(credentials: GuestCredentials, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._billingAddressActionCreator.continueAsGuest(credentials, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Signs into a customer's registered account.\n     *\n     * Once the customer is signed in successfully, the checkout state will be\n     * populated with information associated with the customer, such as their\n     * saved addresses. You can call `CheckoutStoreSelector#getCustomer` to\n     * retrieve the data.\n     *\n     * ```js\n     * const state = await service.signInCustomer({\n     *     email: 'foo@bar.com',\n     *     password: 'password123',\n     * });\n     *\n     * console.log(state.data.getCustomer());\n     * ```\n     *\n     * @param credentials - The credentials to be used for signing in the customer.\n     * @param options - Options for signing in the customer.\n     * @returns A promise that resolves to the current state.\n     */\n    signInCustomer(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.signIn(credentials, options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * Signs out the current customer if they are previously signed in.\n     *\n     * Once the customer is successfully signed out, the checkout state will be\n     * reset automatically.\n     *\n     * ```js\n     * const state = await service.signOutCustomer();\n     *\n     * // The returned object should not contain information about the previously signed-in customer.\n     * console.log(state.data.getCustomer());\n     * ```\n     *\n     * @param options - Options for signing out the customer.\n     * @returns A promise that resolves to the current state.\n     */\n    signOutCustomer(options?: CustomerRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.signOut(options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * Loads a list of shipping options available for checkout.\n     *\n     * Available shipping options can only be determined once a customer\n     * provides their shipping address. If the method is executed successfully,\n     * `CheckoutStoreSelector#getShippingOptions` can be called to retrieve the\n     * list of shipping options.\n     *\n     * ```js\n     * const state = await service.loadShippingOptions();\n     *\n     * console.log(state.data.getShippingOptions());\n     * ```\n     *\n     * @param options - Options for loading the available shipping options.\n     * @returns A promise that resolves to the current state.\n     */\n    loadShippingOptions(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.loadShippingOptions(options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Initializes the shipping step of a checkout process.\n     *\n     * Some payment methods, such as Amazon, can provide shipping information to\n     * be used for checkout. In order to support them, this method must be\n     * called.\n     *\n     * ```js\n     * await service.initializeShipping({\n     *     methodId: 'amazon',\n     *     amazon: {\n     *         container: 'addressBook',\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the shipping step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeShipping(options?: ShippingInitializeOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * De-initializes the shipping step of a checkout process.\n     *\n     * It should be called once you no longer need to collect shipping details.\n     * It can perform any necessary clean-up behind the scene, i.e.: remove DOM\n     * nodes or event handlers that are attached as a result of shipping\n     * initialization.\n     *\n     * ```js\n     * await service.deinitializeShipping({\n     *     methodId: 'amazon',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the shipping step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeShipping(options?: ShippingRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.deinitialize(options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Selects a shipping option for the current address.\n     *\n     * If a shipping option has an additional cost, the quote for the current\n     * order will be adjusted once the option is selected.\n     *\n     * ```js\n     * const state = await service.selectShippingOption('address-id', 'shipping-option-id');\n     *\n     * console.log(state.data.getSelectedShippingOption());\n     * ```\n     *\n     * @param shippingOptionId - The identifier of the shipping option to\n     * select.\n     * @param options - Options for selecting the shipping option.\n     * @returns A promise that resolves to the current state.\n     */\n    selectShippingOption(shippingOptionId: string, options?: ShippingRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.selectOption(shippingOptionId, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Updates the shipping address for the current checkout.\n     *\n     * When a customer updates their shipping address for an order, they will\n     * see an updated list of shipping options and the cost for each option,\n     * unless no options are available. If the update is successful, you can\n     * call `CheckoutStoreSelector#getShippingAddress` to retrieve the address.\n     *\n     * If the shipping address changes and the selected shipping option becomes\n     * unavailable for the updated address, the shipping option will be\n     * deselected.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.updateShippingAddress(address);\n     *\n     * console.log(state.data.getShippingAddress());\n     * ```\n     *\n     * @param address - The address to be used for shipping.\n     * @param options - Options for updating the shipping address.\n     * @returns A promise that resolves to the current state.\n     */\n    updateShippingAddress(address: AddressRequestBody, options?: ShippingRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.updateAddress(address, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Creates consignments given a list.\n     *\n     * Note: this is used when items need to be shipped to multiple addresses,\n     * for single shipping address, use `CheckoutService#updateShippingAddress`.\n     *\n     * When consignments are created, an updated list of shipping options will\n     * become available for each consignment, unless no options are available.\n     * If the update is successful, you can call\n     * `CheckoutStoreSelector#getConsignments` to retrieve the updated list of\n     * consignments.'\n     *\n     * Beware that if a consignment includes all line items from another\n     * consignment, that consignment will be deleted as a valid consignment must\n     * include at least one valid line item.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.createConsignments(consignments);\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignments - The list of consignments to be created.\n     * @param options - Options for updating the shipping address.\n     * @returns A promise that resolves to the current state.\n     */\n    createConsignments(\n        consignments: ConsignmentsRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.createConsignments(consignments, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Deletes a consignment\n     *\n     * ```js\n     * const state = await service.deleteConsignment('55c96cda6f04c');\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignmentId - The ID of the consignment to be deleted\n     * @param options - Options for the consignment delete request\n     * @returns A promise that resolves to the current state.\n     */\n    deleteConsignment(\n        consignmentId: string,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.deleteConsignment(consignmentId, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Updates a specific consignment.\n     *\n     * Note: this is used when items need to be shipped to multiple addresses,\n     * for single shipping address, use `CheckoutService#selectShippingOption`.\n     *\n     * When a shipping address for a consignment is updated, an updated list of\n     * shipping options will become available for the consignment, unless no\n     * options are available. If the update is successful, you can call\n     * `CheckoutStoreSelector#getConsignments` to retrieve updated list of\n     * consignments.\n     *\n     * Beware that if the updated consignment includes all line items from another\n     * consignment, that consignment will be deleted as a valid consignment must\n     * include at least one valid line item.\n     *\n     * If the shipping address changes and the selected shipping option becomes\n     * unavailable for the updated address, the shipping option will be\n     * deselected.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.updateConsignment(consignment);\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignment - The consignment data that will be used.\n     * @param options - Options for updating the shipping address.\n     * @returns A promise that resolves to the current state.\n     */\n    updateConsignment(\n        consignment: ConsignmentUpdateRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.updateConsignment(consignment, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Convenience method that assigns items to be shipped to a specific address.\n     *\n     * Note: this method finds an existing consignment that matches the provided address\n     * and assigns the provided items. If no consignment matches the address, a new one\n     * will be created.\n     *\n     * @param consignment - The consignment data that will be used.\n     * @param options - Options for the request\n     * @returns A promise that resolves to the current state.\n     */\n    assignItemsToAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.assignItemsByAddress(consignment, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Convenience method that unassigns items from a specific shipping address.\n     *\n     * Note: this method finds an existing consignment that matches the provided address\n     * and unassigns the specified items. If the consignment ends up with no line items\n     * after the unassignment, it will be deleted.\n     *\n     * @param consignment - The consignment data that will be used.\n     * @param options - Options for the request\n     * @returns A promise that resolves to the current state.\n     */\n    unassignItemsToAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.unassignItemsByAddress(consignment, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Selects a shipping option for a given consignment.\n     *\n     * Note: this is used when items need to be shipped to multiple addresses,\n     * for single shipping address, use `CheckoutService#updateShippingAddres`.\n     *\n     * If a shipping option has an additional cost, the quote for the current\n     * order will be adjusted once the option is selected.\n     *\n     * ```js\n     * const state = await service.selectConsignmentShippingOption(consignmentId, optionId);\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignmentId - The identified of the consignment to be updated.\n     * @param shippingOptionId - The identifier of the shipping option to\n     * select.\n     * @param options - Options for selecting the shipping option.\n     * @returns A promise that resolves to the current state.\n     */\n    selectConsignmentShippingOption(\n        consignmentId: string,\n        shippingOptionId: string,\n        options?: ShippingRequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.updateShippingOption({\n            id: consignmentId,\n            shippingOptionId,\n        }, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Updates the billing address for the current checkout.\n     *\n     * A customer must provide their billing address before they can proceed to\n     * pay for their order.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.updateBillingAddress(address);\n     *\n     * console.log(state.data.getBillingAddress());\n     * ```\n     *\n     * @param address - The address to be used for billing.\n     * @param options - Options for updating the billing address.\n     * @returns A promise that resolves to the current state.\n     */\n    updateBillingAddress(address: BillingAddressRequestBody, options: RequestOptions = {}): Promise<CheckoutSelectors> {\n        const action = this._billingAddressActionCreator.updateAddress(address, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Applies a coupon code to the current checkout.\n     *\n     * Once the coupon code gets applied, the quote for the current checkout will\n     * be adjusted accordingly. The same coupon code cannot be applied more than\n     * once.\n     *\n     * ```js\n     * await service.applyCoupon('COUPON');\n     * ```\n     *\n     * @param code - The coupon code to apply to the current checkout.\n     * @param options - Options for applying the coupon code.\n     * @returns A promise that resolves to the current state.\n     */\n    applyCoupon(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._couponActionCreator.applyCoupon(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Removes a coupon code from the current checkout.\n     *\n     * Once the coupon code gets removed, the quote for the current checkout will\n     * be adjusted accordingly.\n     *\n     * ```js\n     * await service.removeCoupon('COUPON');\n     * ```\n     *\n     * @param code - The coupon code to remove from the current checkout.\n     * @param options - Options for removing the coupon code.\n     * @returns A promise that resolves to the current state.\n     */\n    removeCoupon(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._couponActionCreator.removeCoupon(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Applies a gift certificate to the current checkout.\n     *\n     * Once the gift certificate gets applied, the quote for the current\n     * checkout will be adjusted accordingly.\n     *\n     * ```js\n     * await service.applyGiftCertificate('GIFT_CERTIFICATE');\n     * ```\n     *\n     * @param code - The gift certificate to apply to the current checkout.\n     * @param options - Options for applying the gift certificate.\n     * @returns A promise that resolves to the current state.\n     */\n    applyGiftCertificate(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._giftCertificateActionCreator.applyGiftCertificate(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Removes a gift certificate from an order.\n     *\n     * Once the gift certificate gets removed, the quote for the current\n     * checkout will be adjusted accordingly.\n     *\n     * ```js\n     * await service.removeGiftCertificate('GIFT_CERTIFICATE');\n     * ```\n     *\n     * @param code - The gift certificate to remove from the current checkout.\n     * @param options - Options for removing the gift certificate.\n     * @returns A promise that resolves to the current state.\n     */\n    removeGiftCertificate(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._giftCertificateActionCreator.removeGiftCertificate(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Loads a list of payment instruments associated with a customer.\n     *\n     * Once the method has been called successfully, you can retrieve the list\n     * of payment instruments by calling `CheckoutStoreSelector#getInstruments`.\n     * If the customer does not have any payment instruments on record, i.e.:\n     * credit card, you will get an empty list instead.\n     *\n     * ```js\n     * const state = service.loadInstruments();\n     *\n     * console.log(state.data.getInstruments());\n     * ```\n     *\n     * @returns A promise that resolves to the current state.\n     */\n    loadInstruments(): Promise<CheckoutSelectors> {\n        const action = this._instrumentActionCreator.loadInstruments();\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Deletes a payment instrument by an id.\n     *\n     * Once an instrument gets removed, it can no longer be retrieved using\n     * `CheckoutStoreSelector#getInstruments`.\n     *\n     * ```js\n     * const state = service.deleteInstrument('123');\n     *\n     * console.log(state.data.getInstruments());\n     * ```\n     *\n     * @param instrumentId - The identifier of the payment instrument to delete.\n     * @returns A promise that resolves to the current state.\n     */\n    deleteInstrument(instrumentId: string): Promise<CheckoutSelectors> {\n        const action = this._instrumentActionCreator.deleteInstrument(instrumentId);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Clear errors that have been collected from previous calls.\n     *\n     * ```js\n     * const state = await service.clearError(error);\n     *\n     * console.log(state.errors.getError());\n     * ```\n     *\n     * @param error - Specific error object to clear\n     * @returns A promise that resolves to the current state.\n     */\n    clearError(error: Error): Promise<CheckoutSelectors> {\n        const action = this._errorActionCreator.clearError(error);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Dispatches an action through the data store and returns the current state\n     * once the action is dispatched.\n     *\n     * @param action - The action to dispatch.\n     * @returns A promise that resolves to the current state.\n     */\n    private _dispatch(action: Action | Observable<Action> | ThunkAction<Action>, options?: { queueId?: string }): Promise<CheckoutSelectors> {\n        return this._store.dispatch(action, options)\n            .then(() => this.getState())\n            .catch(error => {\n                throw this._errorTransformer.transform(error);\n            });\n    }\n}\n","import { ErrorMessageTransformer } from '../common/error';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../common/error/errors';\nimport { getEnvironment } from '../common/utility';\n\nexport type CheckoutServiceErrorType = MissingDataError | NotInitializedError;\nexport type CheckoutServiceErrorTransformer = ErrorMessageTransformer<CheckoutServiceErrorType | Error>;\n\nexport default function createCheckoutServiceErrorTransformer(\n    isDevelopment: boolean = getEnvironment() === 'development'\n): CheckoutServiceErrorTransformer {\n    return new ErrorMessageTransformer(error => {\n        if (!isDevelopment || !isCheckoutServiceError(error)) {\n            return error.message;\n        }\n\n        switch (error.subtype || error.type) {\n        case MissingDataErrorType.MissingConsignments:\n            return `\n                ${error.message}\n                The data could be unavailable because no shipping address has been provided.\n                To fix this, create a consignment or update the shipping address before performing\n                the same action again.\n            `;\n\n        case MissingDataErrorType.MissingCart:\n        case MissingDataErrorType.MissingCheckout:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server yet.\n                To fix this issue, you can try calling \\`CheckoutService#loadCheckout\\`\n                before performing the same action again.\n            `;\n\n        case MissingDataErrorType.MissingCheckoutConfig:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server yet.\n                To fix this issue, you need to make sure \\`CheckoutService\\` is initialized\n                properly by calling \\`CheckoutService#loadCheckout\\` before performing any\n                other actions.\n            `;\n\n        case MissingDataErrorType.MissingOrder:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server yet.\n                To fix this issue, you can try calling \\`CheckoutService#loadOrder\\`\n                before performing the same action again.\n            `;\n\n        case MissingDataErrorType.MissingOrderId:\n            return `\n                ${error.message}\n                The data could be unavailable because no order has been created yet. You have\n                to first create the order before you can perform the action.\n            `;\n\n        case MissingDataErrorType.MissingPaymentMethod:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server, or\n                configured by the merchant yet. To fix the former issue, you can try calling\n                \\`CheckoutService#loadPaymentMethods\\` before performing the same action again.\n            `;\n\n        case NotInitializedErrorType.CustomerNotInitialized:\n            return `\n                In order to initialize the customer step of checkout, you need to call\n                \\`CheckoutService#initializeCustomer\\`. Afterwards, you should be able to\n                submit customer details.\n            `;\n\n        case NotInitializedErrorType.PaymentNotInitialized:\n            return `\n                ${error.message}\n                In order to initialize the payment step of checkout, you need to call\n                \\`CheckoutService#initializePayment\\`. Afterwards, you should be able to\n                submit payment details.\n            `;\n\n        case NotInitializedErrorType.ShippingNotInitialized:\n            return `\n                ${error.message}\n                In order to initialize the shipping step of checkout, you need to call\n                \\`CheckoutService#initializeShipping\\`. Afterwards, you should be able to\n                submit shipping details.\n            `;\n\n        default:\n            return error.message;\n        }\n    });\n}\n\nfunction isCheckoutServiceError(error: any): error is CheckoutServiceErrorType {\n    return !!(error.subtype || error.type);\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../billing';\nimport { ErrorActionCreator } from '../common/error';\nimport { getDefaultLogger } from '../common/log';\nimport { getEnvironment } from '../common/utility';\nimport { ConfigActionCreator, ConfigRequestSender, ConfigState } from '../config';\nimport { CouponActionCreator, CouponRequestSender, GiftCertificateActionCreator, GiftCertificateRequestSender } from '../coupon';\nimport { createCustomerStrategyRegistry, CustomerStrategyActionCreator } from '../customer';\nimport { CountryActionCreator, CountryRequestSender } from '../geography';\nimport { OrderActionCreator, OrderRequestSender } from '../order';\nimport { createPaymentClient, createPaymentStrategyRegistry, PaymentMethodActionCreator, PaymentMethodRequestSender, PaymentStrategyActionCreator } from '../payment';\nimport { InstrumentActionCreator, InstrumentRequestSender } from '../payment/instrument';\nimport { createShippingStrategyRegistry, ConsignmentActionCreator, ConsignmentRequestSender, ShippingCountryActionCreator, ShippingCountryRequestSender, ShippingStrategyActionCreator } from '../shipping';\n\nimport CheckoutActionCreator from './checkout-action-creator';\nimport CheckoutRequestSender from './checkout-request-sender';\nimport CheckoutService from './checkout-service';\nimport CheckoutValidator from './checkout-validator';\nimport createCheckoutStore from './create-checkout-store';\n\n/**\n * Creates an instance of `CheckoutService`.\n *\n * @remarks\n * ```js\n * const service = createCheckoutService();\n *\n * service.subscribe(state => {\n *     console.log(state);\n * });\n *\n * service.loadCheckout();\n * ```\n *\n * @param options - A set of construction options.\n * @returns an instance of `CheckoutService`.\n */\nexport default function createCheckoutService(options?: CheckoutServiceOptions): CheckoutService {\n    if (document.location.protocol !== 'https:') {\n        getDefaultLogger().warn('The BigCommerce Checkout SDK should not be used on a non-HTTPS page');\n    }\n\n    if (getEnvironment() !== 'production') {\n        getDefaultLogger().warn('Note that the development build is not optimized. To create a production build, set process.env.NODE_ENV to `production`.');\n    }\n\n    const config: ConfigState = {\n        meta: {\n            externalSource: options && options.externalSource,\n        },\n        errors: {},\n        statuses: {},\n    };\n    const { locale = '', shouldWarnMutation = true } = options || {};\n    const requestSender = createRequestSender({ host: options && options.host });\n    const store = createCheckoutStore({ config }, { shouldWarnMutation });\n    const paymentClient = createPaymentClient(store);\n    const orderRequestSender = new OrderRequestSender(requestSender);\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const configActionCreator = new ConfigActionCreator(new ConfigRequestSender(requestSender));\n    const orderActionCreator = new OrderActionCreator(orderRequestSender, new CheckoutValidator(checkoutRequestSender));\n\n    return new CheckoutService(\n        store,\n        new BillingAddressActionCreator(new BillingAddressRequestSender(requestSender)),\n        new CheckoutActionCreator(checkoutRequestSender, configActionCreator),\n        configActionCreator,\n        new ConsignmentActionCreator(new ConsignmentRequestSender(requestSender), checkoutRequestSender),\n        new CountryActionCreator(new CountryRequestSender(requestSender, { locale })),\n        new CouponActionCreator(new CouponRequestSender(requestSender)),\n        new CustomerStrategyActionCreator(createCustomerStrategyRegistry(store, requestSender)),\n        new ErrorActionCreator(),\n        new GiftCertificateActionCreator(new GiftCertificateRequestSender(requestSender)),\n        new InstrumentActionCreator(new InstrumentRequestSender(paymentClient, requestSender)),\n        orderActionCreator,\n        new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender)),\n        new PaymentStrategyActionCreator(\n            createPaymentStrategyRegistry(store, paymentClient, requestSender),\n            orderActionCreator\n        ),\n        new ShippingCountryActionCreator(new ShippingCountryRequestSender(requestSender, { locale })),\n        new ShippingStrategyActionCreator(createShippingStrategyRegistry(store, requestSender))\n    );\n}\n\nexport interface CheckoutServiceOptions {\n    locale?: string;\n    host?: string;\n    shouldWarnMutation?: boolean;\n    externalSource?: string;\n}\n","// tslint:disable-next-line:no-reference\n/// <reference path=\"../payment/bigpay-client.d.ts\" />\nimport { createClient as createBigpayClient } from '@bigcommerce/bigpay-client';\n\nimport { CheckoutStore } from '../checkout';\n\nexport default function createPaymentClient(store: CheckoutStore) {\n    const paymentClient = createBigpayClient();\n\n    store.subscribe(\n        state => {\n            const config = state.config.getStoreConfig();\n\n            if (config) {\n                paymentClient.setHost(config.paymentSettings.bigpayBaseUrl);\n            }\n        },\n        state => state.config.getStoreConfig()\n    );\n\n    return paymentClient;\n}\n","export * from './checkout-actions';\n\nexport { default as Checkout, CheckoutPayment } from './checkout';\nexport { default as CHECKOUT_DEFAULT_INCLUDES } from './checkout-default-includes';\nexport { default as CheckoutActionCreator } from './checkout-action-creator';\nexport { default as CheckoutParams, CheckoutIncludes } from './checkout-params';\nexport { default as checkoutReducer } from './checkout-reducer';\nexport { default as CheckoutRequestSender } from './checkout-request-sender';\nexport { default as CheckoutSelector } from './checkout-selector';\nexport { default as CheckoutSelectors } from './checkout-selectors';\nexport { default as CheckoutService } from './checkout-service';\nexport { default as CheckoutState } from './checkout-state';\nexport { default as CheckoutStoreErrorSelector } from './checkout-store-error-selector';\nexport { default as CheckoutStoreSelector } from './checkout-store-selector';\nexport { default as CheckoutStoreState } from './checkout-store-state';\nexport { default as CheckoutStoreStatusSelector } from './checkout-store-status-selector';\nexport { default as CheckoutStore, CheckoutStoreOptions, ReadableCheckoutStore } from './checkout-store';\nexport { default as CheckoutValidator } from './checkout-validator';\nexport { default as InternalCheckoutSelectors } from './internal-checkout-selectors';\n\nexport { default as createActionTransformer } from './create-action-transformer';\nexport { default as createCheckoutService } from './create-checkout-service';\nexport { default as createCheckoutStore } from './create-checkout-store';\nexport { default as createCheckoutSelectors } from './create-checkout-selectors';\nexport { default as createInternalCheckoutSelectors } from './create-internal-checkout-selectors';\n","import { Response } from '@bigcommerce/request-sender';\n\nimport StandardError from './standard-error';\n\nconst DEFAULT_RESPONSE = {\n    body: {},\n    headers: {},\n    status: 0,\n};\n\nexport default class RequestError<TBody = any> extends StandardError {\n    body: TBody | {};\n    headers: { [key: string]: any; };\n    errors: Array<{ code: string, message?: string }>;\n    status: number;\n\n    constructor(\n        response?: Response<TBody | {}>,\n        { message, errors }: {\n            message?: string;\n            errors?: Array<{ code: string, message?: string }>,\n        } = {}\n    ) {\n        const { body, headers, status } = response || DEFAULT_RESPONSE;\n\n        super(message || 'An unexpected error has occurred.');\n\n        this.type = 'request';\n        this.body = body;\n        this.headers = headers;\n        this.status = status;\n        this.errors = errors || [];\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport Config from './config';\n\nexport enum ConfigActionType {\n    LoadConfigRequested = 'LOAD_CONFIG_REQUESTED',\n    LoadConfigSucceeded = 'LOAD_CONFIG_SUCCEEDED',\n    LoadConfigFailed = 'LOAD_CONFIG_FAILED',\n}\n\nexport type LoadConfigAction =\n    LoadConfigRequestedAction |\n    LoadConfigSucceededAction |\n    LoadConfigFailedAction;\n\nexport interface LoadConfigRequestedAction extends Action {\n    type: ConfigActionType.LoadConfigRequested;\n}\n\nexport interface LoadConfigSucceededAction extends Action<Config> {\n    type: ConfigActionType.LoadConfigSucceeded;\n}\n\nexport interface LoadConfigFailedAction extends Action<Error> {\n    type: ConfigActionType.LoadConfigFailed;\n}\n","import { memoize } from 'lodash';\n\nimport { bindDecorator, isEqual, isPrivate, CacheKeyResolver } from '../utility';\n\n/**\n * Decorates a class by patching all of its methods to cache their return values\n * and return them if they are called again with the same set of parameters. The\n * decorator also binds all the methods to the calling instance so it can be\n * destructed.\n */\nexport default function selectorDecorator<T extends Constructor<object>>(target: T): T {\n    const decoratedTarget = class extends target {};\n\n    Object.getOwnPropertyNames(target.prototype)\n        .forEach(key => {\n            const descriptor = Object.getOwnPropertyDescriptor(target.prototype, key);\n\n            if (!descriptor || key === 'constructor') {\n                return;\n            }\n\n            Object.defineProperty(\n                decoratedTarget.prototype,\n                key,\n                selectorMethodDecorator(target.prototype, key, descriptor)\n            );\n        });\n\n    return decoratedTarget;\n}\n\nfunction selectorMethodDecorator<T extends Method>(target: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T> {\n    if (typeof descriptor.value !== 'function') {\n        return descriptor;\n    }\n\n    let resolver = new CacheKeyResolver();\n    let method = descriptor.value;\n    let memoizedMethod = memoize(method, (...args) => resolver.getKey(...args));\n\n    return bindDecorator(target, key, {\n        get() {\n            const value = ((...args: any[]) => {\n                const cachedValue = memoizedMethod.call(this, ...args);\n\n                if (resolver.getUsedCount(...args) === 1) {\n                    return cachedValue;\n                }\n\n                const newValue = method.call(this, ...args);\n\n                if (isEqual(newValue, cachedValue, { keyFilter: key => !isPrivate(key) })) {\n                    return cachedValue;\n                }\n\n                memoizedMethod.cache.set(resolver.getKey(...args), newValue);\n\n                return newValue;\n            }) as T;\n\n            Object.defineProperty(this, key, { ...descriptor, value });\n\n            return value;\n        },\n        set(value) {\n            resolver = new CacheKeyResolver();\n            method = value;\n            memoizedMethod = memoize(method, (...args) => resolver.getKey(...args));\n        },\n    });\n}\n\nexport type Constructor<T> = new (...args: any[]) => T;\ntype Method = (...args: any[]) => any;\n","enum ContentType {\n    Json = 'application/json',\n    JsonV1 = 'application/vnd.bc.v1+json',\n}\n\nexport default ContentType;\n","import { Action } from '@bigcommerce/data-store';\n\nimport Country from './country';\n\nexport enum CountryActionType {\n    LoadCountriesRequested = 'LOAD_COUNTRIES_REQUESTED',\n    LoadCountriesSucceeded = 'LOAD_COUNTRIES_SUCCEEDED',\n    LoadCountriesFailed = 'LOAD_COUNTRIES_FAILED',\n}\n\nexport type LoadCountriesAction =\n    LoadCountriesRequestedAction |\n    LoadCountriesSucceededAction |\n    LoadCountriesFailedAction;\n\nexport interface LoadCountriesRequestedAction extends Action {\n    type: CountryActionType.LoadCountriesRequested;\n}\n\nexport interface LoadCountriesSucceededAction extends Action<Country[]> {\n    type: CountryActionType.LoadCountriesSucceeded;\n}\n\nexport interface LoadCountriesFailedAction extends Action<Error> {\n    type: CountryActionType.LoadCountriesFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Country } from '../geography';\n\nexport enum ShippingCountryActionType {\n    LoadShippingCountriesRequested = 'LOAD_SHIPPING_COUNTRIES_REQUESTED',\n    LoadShippingCountriesSucceeded = 'LOAD_SHIPPING_COUNTRIES_SUCCEEDED',\n    LoadShippingCountriesFailed = 'LOAD_SHIPPING_COUNTRIES_FAILED',\n}\n\nexport type LoadShippingCountriesAction = LoadShippingCountriesRequestedAction |\n    LoadShippingCountriesSucceededAction |\n    LoadShippingCountriesFailedAction;\n\nexport interface LoadShippingCountriesRequestedAction extends Action {\n    type: ShippingCountryActionType.LoadShippingCountriesRequested;\n}\n\nexport interface LoadShippingCountriesSucceededAction extends Action<Country[]> {\n    type: ShippingCountryActionType.LoadShippingCountriesSucceeded;\n}\n\nexport interface LoadShippingCountriesFailedAction extends Action<Error> {\n    type: ShippingCountryActionType.LoadShippingCountriesFailed;\n}\n","module.exports = require(\"@bigcommerce/request-sender\");","export const ACKNOWLEDGE = 'ACKNOWLEDGE';\nexport const FINALIZE = 'FINALIZE';\nexport const INITIALIZE = 'INITIALIZE';\n","module.exports = require(\"@bigcommerce/script-loader\");","export default interface PaymentStrategyState {\n    data: PaymentStrategyDataState;\n    errors: PaymentStrategyErrorsState;\n    statuses: PaymentStrategyStatusesState;\n}\n\nexport interface PaymentStrategyDataState {\n    [key: string]: {\n        isInitialized: boolean,\n    };\n}\n\nexport interface PaymentStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    executeError?: Error;\n    executeMethodId?: string;\n    finalizeError?: Error;\n    finalizeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    widgetInteractionError?: Error;\n    widgetInteractionMethodId?: string;\n}\n\nexport interface PaymentStrategyStatusesState {\n    deinitializeMethodId?: string;\n    executeMethodId?: string;\n    finalizeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isExecuting?: boolean;\n    isFinalizing?: boolean;\n    isInitializing?: boolean;\n    isWidgetInteracting?: boolean;\n    widgetInteractionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: PaymentStrategyState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { Action } from '@bigcommerce/data-store';\n\nimport { omitDeep } from '../utility';\n\nimport { ClearErrorAction, ErrorActionType } from './error-actions';\n\nexport default function clearErrorReducer<TState extends { [key: string]: any }, TAction extends Action>(\n    state: TState,\n    action: TAction\n): TState | undefined {\n    if (isClearErrorAction(action)) {\n        return omitDeep(state, value => value === action.payload);\n    }\n\n    return state;\n}\n\nfunction isClearErrorAction(action: Action): action is ClearErrorAction {\n    return action.type === ErrorActionType.ClearError;\n}\n","const CHECKOUT_DEFAULT_INCLUDES = [\n    'cart.lineItems.physicalItems.options',\n    'cart.lineItems.digitalItems.options',\n    'customer',\n    'payments',\n    'promotions.banners',\n];\n\nexport default CHECKOUT_DEFAULT_INCLUDES;\n","export interface CompareOptions {\n    keyFilter?(key: string): boolean;\n}\n\nexport default function isEqual(objectA: any, objectB: any, options?: CompareOptions): boolean {\n    if (objectA === objectB) {\n        return true;\n    }\n\n    if (objectA && objectB && typeof objectA === 'object' && typeof objectB === 'object') {\n        if (Array.isArray(objectA) && Array.isArray(objectB)) {\n            return isArrayEqual(objectA, objectB, options);\n        }\n\n        if (Array.isArray(objectA) || Array.isArray(objectB)) {\n            return false;\n        }\n\n        if ((objectA instanceof Date) && (objectB instanceof Date)) {\n            return isDateEqual(objectA, objectB);\n        }\n\n        if ((objectA instanceof Date) || (objectB instanceof Date)) {\n            return false;\n        }\n\n        if ((objectA instanceof RegExp) && (objectB instanceof RegExp)) {\n            return isRegExpEqual(objectA, objectB);\n        }\n\n        if ((objectA instanceof RegExp) || (objectB instanceof RegExp)) {\n            return false;\n        }\n\n        return isObjectEqual(objectA, objectB, options);\n    }\n\n    return objectA === objectB;\n}\n\nfunction isRegExpEqual(objectA: RegExp, objectB: RegExp): boolean {\n    return objectA.toString() === objectB.toString();\n}\n\nfunction isDateEqual(objectA: Date, objectB: Date): boolean {\n    return objectA.getTime() === objectB.getTime();\n}\n\nfunction isArrayEqual(objectA: any[], objectB: any[], options?: CompareOptions): boolean {\n    if (objectA.length !== objectB.length) {\n        return false;\n    }\n\n    for (let index = 0, length = objectA.length; index < length; index++) {\n        if (!isEqual(objectA[index], objectB[index], options)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nfunction isObjectEqual(\n    objectA: { [key: string]: any },\n    objectB: { [key: string]: any },\n    options?: CompareOptions\n): boolean {\n    const filter = options && options.keyFilter;\n    const keysA = filter ? Object.keys(objectA).filter(filter) : Object.keys(objectA);\n    const keysB = filter ? Object.keys(objectB).filter(filter) : Object.keys(objectB);\n\n    if (keysA.length !== keysB.length) {\n        return false;\n    }\n\n    for (let index = 0, length = keysA.length; index < length; index++) {\n        const key = keysA[index];\n\n        if (!objectB.hasOwnProperty(key)) {\n            return false;\n        }\n\n        if (!isEqual(objectA[key], objectB[key], options)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadCheckoutAction } from '../checkout';\n\nimport { InternalCustomerResponseData } from './internal-customer-responses';\n\nexport enum CustomerActionType {\n    SignInCustomerRequested = 'SIGN_IN_CUSTOMER_REQUESTED',\n    SignInCustomerSucceeded = 'SIGN_IN_CUSTOMER_SUCCEEDED',\n    SignInCustomerFailed = 'SIGN_IN_CUSTOMER_FAILED',\n\n    SignOutCustomerRequested = 'SIGN_OUT_CUSTOMER_REQUESTED',\n    SignOutCustomerSucceeded = 'SIGN_OUT_CUSTOMER_SUCCEEDED',\n    SignOutCustomerFailed = 'SIGN_OUT_CUSTOMER_FAILED',\n}\n\nexport type CustomerAction =\n    SignInCustomerAction |\n    SignOutCustomerAction;\n\nexport type SignInCustomerAction =\n    SignInCustomerRequestedAction |\n    SignInCustomerSucceededAction |\n    SignInCustomerFailedAction |\n    LoadCheckoutAction;\n\nexport type SignOutCustomerAction =\n    SignOutCustomerRequestedAction |\n    SignOutCustomerSucceededAction |\n    SignOutCustomerFailedAction |\n    LoadCheckoutAction;\n\nexport interface SignInCustomerRequestedAction extends Action {\n    type: CustomerActionType.SignInCustomerRequested;\n}\n\nexport interface SignInCustomerSucceededAction extends Action<InternalCustomerResponseData> {\n    type: CustomerActionType.SignInCustomerSucceeded;\n}\n\nexport interface SignInCustomerFailedAction extends Action<Error> {\n    type: CustomerActionType.SignInCustomerFailed;\n}\n\nexport interface SignOutCustomerRequestedAction extends Action {\n    type: CustomerActionType.SignOutCustomerRequested;\n}\n\nexport interface SignOutCustomerSucceededAction extends Action<InternalCustomerResponseData> {\n    type: CustomerActionType.SignOutCustomerSucceeded;\n}\n\nexport interface SignOutCustomerFailedAction extends Action<Error> {\n    type: CustomerActionType.SignOutCustomerFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadOrderAction } from '../order';\n\nimport PaymentResponseBody from './payment-response-body';\n\nexport enum PaymentActionType {\n    SubmitPaymentRequested = 'SUBMIT_PAYMENT_REQUESTED',\n    SubmitPaymentSucceeded = 'SUBMIT_PAYMENT_SUCCEEDED',\n    SubmitPaymentFailed = 'SUBMIT_PAYMENT_FAILED',\n\n    InitializeOffsitePaymentRequested = 'INITIALIZE_OFFSITE_PAYMENT_REQUESTED',\n    InitializeOffsitePaymentSucceeded = 'INITIALIZE_OFFSITE_PAYMENT_SUCCEEDED',\n    InitializeOffsitePaymentFailed = 'INITIALIZE_OFFSITE_PAYMENT_FAILED',\n}\n\nexport type PaymentAction = SubmitPaymentAction |\n    InitializeOffsitePaymentAction;\n\nexport type SubmitPaymentAction =\n    SubmitPaymentRequestedAction |\n    SubmitPaymentSucceededAction |\n    SubmitPaymentFailedAction |\n    LoadOrderAction;\n\nexport type InitializeOffsitePaymentAction =\n    InitializeOffsitePaymentRequestedAction |\n    InitializeOffsitePaymentSucceededAction |\n    InitializeOffsitePaymentFailedAction;\n\nexport interface SubmitPaymentRequestedAction extends Action {\n    type: PaymentActionType.SubmitPaymentRequested;\n}\n\nexport interface SubmitPaymentSucceededAction extends Action<PaymentResponseBody> {\n    type: PaymentActionType.SubmitPaymentSucceeded;\n}\n\nexport interface SubmitPaymentFailedAction extends Action<Error> {\n    type: PaymentActionType.SubmitPaymentFailed;\n}\n\nexport interface InitializeOffsitePaymentRequestedAction extends Action {\n    type: PaymentActionType.InitializeOffsitePaymentRequested;\n}\n\nexport interface InitializeOffsitePaymentSucceededAction extends Action {\n    type: PaymentActionType.InitializeOffsitePaymentSucceeded;\n}\n\nexport interface InitializeOffsitePaymentFailedAction extends Action<Error> {\n    type: PaymentActionType.InitializeOffsitePaymentFailed;\n}\n","import StandardError from './standard-error';\n\nexport default class InvalidArgumentError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Invalid arguments have been provided.');\n\n        this.type = 'invalid_argument';\n    }\n}\n","export const HOSTED = 'PAYMENT_TYPE_HOSTED';\nexport const OFFLINE = 'PAYMENT_TYPE_OFFLINE';\n","export default class AmountTransformer {\n    constructor(private _dp: number) {}\n\n    toInteger(amount: number): number {\n        return Math.floor(amount * Math.pow(10, this._dp));\n    }\n}\n","import IframeEvent from './iframe-event';\n\nexport default function isIframeEvent<TEvent extends IframeEvent<TType>, TType extends string>(\n    object: any,\n    type: TType\n): object is TEvent {\n    return object.type === type;\n}\n","import { InternalCheckoutSelectors } from '../checkout';\nimport { selector } from '../common/selector';\n\nimport CheckoutButtonSelector from './checkout-button-selector';\nimport { CheckoutButtonMethodType } from './strategies';\n\n@selector\nexport default class CheckoutButtonErrorSelector {\n    private _checkoutButton: CheckoutButtonSelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._checkoutButton = selectors.checkoutButton;\n    }\n\n    getInitializeButtonError(methodId?: CheckoutButtonMethodType): Error | undefined {\n        return this._checkoutButton.getInitializeError(methodId);\n    }\n\n    getDeinitializeButtonError(methodId?: CheckoutButtonMethodType): Error | undefined {\n        return this._checkoutButton.getDeinitializeError(methodId);\n    }\n}\n","import { InternalCheckoutSelectors } from '../checkout';\nimport { selector } from '../common/selector';\n\nimport CheckoutButtonSelector from './checkout-button-selector';\nimport { CheckoutButtonMethodType } from './strategies';\n\n@selector\nexport default class CheckoutButtonStatusSelector {\n    private _checkoutButton: CheckoutButtonSelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._checkoutButton = selectors.checkoutButton;\n    }\n\n    isInitializingButton(methodId?: CheckoutButtonMethodType): boolean {\n        return this._checkoutButton.isInitializing(methodId);\n    }\n\n    isDeinitializingButton(methodId?: CheckoutButtonMethodType): boolean {\n        return this._checkoutButton.isDeinitializing(methodId);\n    }\n}\n","import { InternalCheckoutSelectors } from '../checkout';\n\nimport CheckoutButtonErrorSelector from './checkout-button-error-selector';\nimport CheckoutButtonSelectors from './checkout-button-selectors';\nimport CheckoutButtonStatusSelector from './checkout-button-status-selector';\n\nexport default function createCheckoutButtonSelectors(selectors: InternalCheckoutSelectors): CheckoutButtonSelectors {\n    const errors = new CheckoutButtonErrorSelector(selectors);\n    const statuses = new CheckoutButtonStatusSelector(selectors);\n\n    return {\n        errors,\n        statuses,\n    };\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../checkout';\nimport { isElementId, setUniqueElementId } from '../common/dom';\n\nimport { CheckoutButtonInitializeOptions, CheckoutButtonOptions } from './checkout-button-options';\nimport CheckoutButtonSelectors from './checkout-button-selectors';\nimport CheckoutButtonStrategyActionCreator from './checkout-button-strategy-action-creator';\nimport createCheckoutButtonSelectors from './create-checkout-button-selectors';\n\nexport default class CheckoutButtonInitializer {\n    private _state: CheckoutButtonSelectors;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _store: CheckoutStore,\n        private _buttonStrategyActionCreator: CheckoutButtonStrategyActionCreator\n    ) {\n        this._state = createCheckoutButtonSelectors(this._store.getState());\n\n        this._store.subscribe(state => {\n            this._state = createCheckoutButtonSelectors(state);\n        });\n    }\n\n    /**\n     * Returns a snapshot of the current state.\n     *\n     * The method returns a new instance every time there is a change in the\n     * state. You can query the state by calling any of its getter methods.\n     *\n     * ```js\n     * const state = service.getState();\n     *\n     * console.log(state.errors.getInitializeButtonError());\n     * console.log(state.statuses.isInitializingButton());\n     * ```\n     *\n     * @returns The current customer's checkout state\n     */\n    getState(): CheckoutButtonSelectors {\n        return this._state;\n    }\n\n    /**\n     * Subscribes to any changes to the current state.\n     *\n     * The method registers a callback function and executes it every time there\n     * is a change in the current state.\n     *\n     * ```js\n     * service.subscribe(state => {\n     *     console.log(state.statuses.isInitializingButton());\n     * });\n     * ```\n     *\n     * The method can be configured to notify subscribers only regarding\n     * relevant changes, by providing a filter function.\n     *\n     * ```js\n     * const filter = state => state.errors.getInitializeButtonError();\n     *\n     * // Only trigger the subscriber when the cart changes.\n     * service.subscribe(state => {\n     *     console.log(state.errors.getInitializeButtonError())\n     * }, filter);\n     * ```\n     *\n     * @param subscriber - The function to subscribe to state changes.\n     * @param filters - One or more functions to filter out irrelevant state\n     * changes. If more than one function is provided, the subscriber will only\n     * be triggered if all conditions are met.\n     * @returns A function, if called, will unsubscribe the subscriber.\n     */\n    subscribe(\n        subscriber: (state: CheckoutButtonSelectors) => void,\n        ...filters: Array<(state: CheckoutButtonSelectors) => any>\n    ): () => void {\n        return this._store.subscribe(\n            () => subscriber(this.getState()),\n            state => state.checkoutButton.getState(),\n            ...filters.map(filter => (state: InternalCheckoutSelectors) => filter(createCheckoutButtonSelectors(state)))\n        );\n    }\n\n    /**\n     * Initializes the checkout button of a payment method.\n     *\n     * When the checkout button is initialized, it will be inserted into the DOM,\n     * ready to be interacted with by the customer.\n     *\n     * ```js\n     * initializer.initializeButton({\n     *     methodId: 'braintreepaypal',\n     *     containerId: 'checkoutButton',\n     *     braintreepaypal: {\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the checkout button.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeButton(options: CheckoutButtonInitializeOptions): Promise<CheckoutButtonSelectors> {\n        const containerIds = isElementId(options.containerId) ?\n            [options.containerId] :\n            setUniqueElementId(options.containerId, `${options.methodId}-container`);\n\n        return Promise.all(\n            containerIds.map(containerId => {\n                const action = this._buttonStrategyActionCreator.initialize({ ...options, containerId });\n                const queueId = `checkoutButtonStrategy:${options.methodId}:${containerId}`;\n\n                return this._store.dispatch(action, { queueId });\n            })\n        )\n            .then(() => this.getState());\n    }\n\n    /**\n     * De-initializes the checkout button by performing any necessary clean-ups.\n     *\n     * ```js\n     * await service.deinitializeButton({\n     *     methodId: 'braintreepaypal',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the checkout button.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeButton(options: CheckoutButtonOptions): Promise<CheckoutButtonSelectors> {\n        const action = this._buttonStrategyActionCreator.deinitialize(options);\n        const queueId = `checkoutButtonStrategy:${options.methodId}`;\n\n        return this._store.dispatch(action, { queueId })\n            .then(() => this.getState());\n    }\n}\n","enum CheckoutButtonMethodType {\n    BRAINTREE_PAYPAL = 'braintreepaypal',\n    BRAINTREE_PAYPAL_CREDIT = 'braintreepaypalcredit',\n    GOOGLEPAY_BRAINTREE = 'googlepaybraintree',\n    GOOGLEPAY_STRIPE = 'googlepaystripe',\n    MASTERPASS = 'masterpass',\n    PAYPALEXPRESS = 'paypalexpress',\n}\n\nexport default CheckoutButtonMethodType;\n","export default function isElementId(id: string): boolean {\n    return /^\\w[\\w\\-\\:\\.]*$/.test(id);\n}\n","import { uniqueId } from 'lodash';\n\nimport { InvalidArgumentError } from '../error/errors';\n\nexport default function setUniqueElementId(selector: string, idPrefix: string): string[] {\n    const containers = document.querySelectorAll(selector);\n\n    if (!containers.length) {\n        throw new InvalidArgumentError(`Unable to find any element with the specified selector: ${selector}`);\n    }\n\n    return Array.prototype.slice.call(containers)\n        .map((container: HTMLElement) => {\n            if (!container.id) {\n                container.id = uniqueId(idPrefix);\n            }\n\n            return container.id;\n        });\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, empty, of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { Registry } from '../common/registry';\nimport { PaymentMethodActionCreator } from '../payment';\n\nimport { CheckoutButtonActionType, DeinitializeButtonAction, InitializeButtonAction } from './checkout-button-actions';\nimport { CheckoutButtonInitializeOptions, CheckoutButtonOptions } from './checkout-button-options';\nimport { CheckoutButtonStrategy } from './strategies';\n\nexport default class CheckoutButtonStrategyActionCreator {\n    constructor(\n        private _registry: Registry<CheckoutButtonStrategy>,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): ThunkAction<InitializeButtonAction, InternalCheckoutSelectors> {\n        return store => {\n            const meta = { methodId: options.methodId, containerId: options.containerId };\n\n            if (store.getState().checkoutButton.isInitialized(options.methodId, options.containerId)) {\n                return empty();\n            }\n\n            return concat(\n                of(createAction(CheckoutButtonActionType.InitializeButtonRequested, undefined, meta)),\n                this._paymentMethodActionCreator.loadPaymentMethod(options.methodId, { timeout: options.timeout, useCache: true }),\n                defer(() => this._registry.get(options.methodId).initialize(options)\n                    .then(() => createAction(CheckoutButtonActionType.InitializeButtonSucceeded, undefined, meta)))\n            ).pipe(\n                catchError(error => throwErrorAction(CheckoutButtonActionType.InitializeButtonFailed, error, meta))\n            );\n        };\n    }\n\n    deinitialize(options: CheckoutButtonOptions): ThunkAction<DeinitializeButtonAction, InternalCheckoutSelectors> {\n        return store => {\n            const meta = { methodId: options.methodId };\n\n            if (!store.getState().checkoutButton.isInitialized(options.methodId)) {\n                return empty();\n            }\n\n            return concat(\n                of(createAction(CheckoutButtonActionType.DeinitializeButtonRequested, undefined, meta)),\n                defer(() => this._registry.get(options.methodId).deinitialize()\n                    .then(() => createAction(CheckoutButtonActionType.DeinitializeButtonSucceeded, undefined, meta)))\n            ).pipe(\n                catchError(error => throwErrorAction(CheckoutButtonActionType.DeinitializeButtonFailed, error, meta))\n            );\n        };\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { pick } from 'lodash';\n\nimport { Address, LegacyAddress } from '../../../address';\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, StandardError } from '../../../common/error/errors';\nimport { PaymentMethod } from '../../../payment';\nimport { BraintreeAddress, BraintreeError, BraintreePaypalCheckout, BraintreeSDKCreator, BraintreeTokenizePayload } from '../../../payment/strategies/braintree';\nimport { PaypalAuthorizeData, PaypalScriptLoader } from '../../../payment/strategies/paypal';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\n\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class BraintreePaypalButtonStrategy implements CheckoutButtonStrategy {\n    private _paypalCheckout?: BraintreePaypalCheckout;\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _braintreeSDKCreator: BraintreeSDKCreator,\n        private _paypalScriptLoader: PaypalScriptLoader,\n        private _formPoster: FormPoster,\n        private _offerCredit: boolean = false\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const paypalOptions = (this._offerCredit ? options.braintreepaypalcredit : options.braintreepaypal) || {};\n        const state = this._store.getState();\n        const paymentMethod = this._paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n        if (!paymentMethod || !paymentMethod.clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._braintreeSDKCreator.initialize(paymentMethod.clientToken);\n\n        return Promise.all([\n            this._braintreeSDKCreator.getPaypalCheckout(),\n            this._paypalScriptLoader.loadPaypal(),\n        ])\n            .then(([paypalCheckout, paypal]) => {\n                this._paypalCheckout = paypalCheckout;\n\n                const allowedSources = [];\n                const disallowedSources = [];\n\n                if (paypalOptions.allowCredit) {\n                    allowedSources.push(paypal.FUNDING.CREDIT);\n                } else {\n                    disallowedSources.push(paypal.FUNDING.CREDIT);\n                }\n\n                return paypal.Button.render({\n                    env: paymentMethod.config.testMode ? 'sandbox' : 'production',\n                    commit: paypalOptions.shouldProcessPayment ? true : false,\n                    funding: {\n                        allowed: allowedSources,\n                        disallowed: disallowedSources,\n                    },\n                    style: {\n                        shape: 'rect',\n                        label: this._offerCredit ? 'credit' : undefined,\n                        ...pick(paypalOptions.style, 'layout', 'size', 'color', 'label', 'shape', 'tagline', 'fundingicons'),\n                    },\n                    payment: () => this._setupPayment(paypalOptions.onPaymentError),\n                    onAuthorize: data => this._tokenizePayment(data, paypalOptions.shouldProcessPayment, paypalOptions.onAuthorizeError),\n                }, options.containerId);\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        this._paypalCheckout = undefined;\n        this._paymentMethod = undefined;\n\n        this._braintreeSDKCreator.teardown();\n\n        return Promise.resolve();\n    }\n\n    private _setupPayment(onError?: (error: BraintreeError | StandardError) => void): Promise<string> {\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(state => {\n                const checkout = state.checkout.getCheckout();\n                const config = state.config.getStoreConfig();\n                const customer = state.customer.getCustomer();\n                const address = customer && customer.addresses && customer.addresses[0];\n\n                if (!this._paypalCheckout) {\n                    throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n                }\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!config) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                return this._paypalCheckout.createPayment({\n                    flow: 'checkout',\n                    enableShippingAddress: true,\n                    shippingAddressEditable: false,\n                    shippingAddressOverride: address ? this._mapToBraintreeAddress(address) : undefined,\n                    amount: checkout.grandTotal,\n                    currency: config.currency.code,\n                    offerCredit: this._offerCredit,\n                });\n            })\n            .catch(error => {\n                if (onError) {\n                    onError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    private _tokenizePayment(\n        data: PaypalAuthorizeData,\n        shouldProcessPayment?: boolean,\n        onError?: (error: BraintreeError | StandardError) => void\n    ): Promise<BraintreeTokenizePayload> {\n        if (!this._paypalCheckout || !this._paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        const methodId = this._paymentMethod.id;\n\n        return Promise.all([\n            this._paypalCheckout.tokenizePayment(data),\n            this._braintreeSDKCreator.getDataCollector({ paypal: true }),\n        ])\n            .then(([payload, { deviceData }]) => {\n                this._formPoster.postForm('/checkout.php', {\n                    payment_type: 'paypal',\n                    provider: methodId,\n                    action: shouldProcessPayment ? 'process_payment' : 'set_external_checkout',\n                    nonce: payload.nonce,\n                    device_data: deviceData,\n                    shipping_address: JSON.stringify(this._mapToLegacyShippingAddress(payload)),\n                    billing_address: JSON.stringify(this._mapToLegacyBillingAddress(payload)),\n                });\n\n                return payload;\n            })\n            .catch(error => {\n                if (onError) {\n                    onError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    private _mapToLegacyShippingAddress(payload: BraintreeTokenizePayload): Partial<LegacyAddress> {\n        const shippingAddress = payload.details.shippingAddress;\n        const recipientName = shippingAddress && shippingAddress.recipientName || '';\n        const [firstName, lastName] = recipientName.split(' ');\n\n        return {\n            email: payload.details.email,\n            first_name: firstName,\n            last_name: lastName,\n            phone_number: shippingAddress && shippingAddress.phone || payload.details.phone,\n            address_line_1: shippingAddress && shippingAddress.line1,\n            address_line_2: shippingAddress && shippingAddress.line2,\n            city: shippingAddress && shippingAddress.city,\n            state: shippingAddress && shippingAddress.state,\n            country_code: shippingAddress && shippingAddress.countryCode,\n            postal_code: shippingAddress && shippingAddress.postalCode,\n        };\n    }\n\n    private _mapToLegacyBillingAddress(payload: BraintreeTokenizePayload): Partial<LegacyAddress> {\n        const billingAddress = payload.details.billingAddress;\n        const shippingAddress = payload.details.shippingAddress;\n\n        if (billingAddress) {\n            return {\n                email: payload.details.email,\n                first_name: billingAddress.firstName || payload.details.firstName,\n                last_name: billingAddress.lastName || payload.details.lastName,\n                phone_number: billingAddress.phone || payload.details.phone,\n                address_line_1: billingAddress.line1,\n                address_line_2: billingAddress.line2,\n                city: billingAddress.city,\n                state: billingAddress.state,\n                country_code: billingAddress.countryCode,\n                postal_code: billingAddress.postalCode,\n            };\n        }\n\n        return {\n            email: payload.details.email,\n            first_name: payload.details.firstName,\n            last_name: payload.details.lastName,\n            phone_number: payload.details.phone,\n            address_line_1: shippingAddress && shippingAddress.line1,\n            address_line_2: shippingAddress && shippingAddress.line2,\n            city: shippingAddress && shippingAddress.city,\n            state: shippingAddress && shippingAddress.state,\n            country_code: shippingAddress && shippingAddress.countryCode,\n            postal_code: shippingAddress && shippingAddress.postalCode,\n        };\n    }\n\n    private _mapToBraintreeAddress(address: Address): BraintreeAddress {\n        return {\n            line1: address.address1,\n            line2: address.address2,\n            city: address.city,\n            state: address.stateOrProvinceCode,\n            postalCode: address.postalCode,\n            countryCode: address.countryCode,\n            phone: address.phone,\n            recipientName: `${address.firstName} ${address.lastName}`,\n        };\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { InvalidArgumentError, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { GooglePayPaymentProcessor } from '../../../payment/strategies/googlepay';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class GooglePayButtonStrategy implements CheckoutButtonStrategy {\n    private _methodId?: string;\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _formPoster: FormPoster,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _googlePayPaymentProcessor: GooglePayPaymentProcessor\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { containerId, methodId } = options;\n\n        if (!containerId || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"containerId\" argument is not provided.');\n        }\n\n        this._methodId = methodId;\n\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(() => this._googlePayPaymentProcessor.initialize(this._getMethodId()))\n            .then(() => {\n                this._walletButton = this._createSignInButton(containerId);\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        if (this._walletButton && this._walletButton.parentNode) {\n            this._walletButton.parentNode.removeChild(this._walletButton);\n            this._walletButton = undefined;\n        }\n\n        return this._googlePayPaymentProcessor.deinitialize();\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const container = document.getElementById(containerId);\n\n        if (!container) {\n            throw new InvalidArgumentError('Unable to create sign-in button without valid container ID.');\n        }\n\n        const googlePayButton = this._googlePayPaymentProcessor.createButton(this._handleWalletButtonClick);\n\n        container.appendChild(googlePayButton);\n\n        return googlePayButton;\n    }\n\n    private _getMethodId(): string {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._methodId;\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): Promise<void> {\n        event.preventDefault();\n\n        return this._googlePayPaymentProcessor.displayWallet()\n            .then(paymentData => this._googlePayPaymentProcessor.handleSuccess(paymentData)\n            .then(() => {\n                if (paymentData.shippingAddress) {\n                    this._googlePayPaymentProcessor.updateShippingAddress(paymentData.shippingAddress);\n                }\n            }))\n            .then(() => this._onPaymentSelectComplete())\n            .catch(error => this._onError(error));\n    }\n\n    private _onPaymentSelectComplete(): void {\n        this._formPoster.postForm('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n        });\n    }\n\n    private _onError(error?: Error): void {\n        if (error && error.message !== 'CANCELED') {\n            throw error;\n        }\n    }\n}\n","import { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType\n} from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { getCallbackUrl, Masterpass, MasterpassCheckoutOptions, MasterpassScriptLoader } from '../../../payment/strategies/masterpass';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\n\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class MasterpassButtonStrategy implements CheckoutButtonStrategy {\n    private _masterpassClient?: Masterpass;\n    private _methodId?: string;\n    private _signInButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _masterpassScriptLoader: MasterpassScriptLoader\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { containerId, methodId } = options;\n\n        if (!containerId || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"containerId\" argument is not provided.');\n        }\n\n        this._methodId = methodId;\n\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!paymentMethod || !paymentMethod.initializationData.checkoutId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                return this._masterpassScriptLoader.load(paymentMethod.config.testMode);\n            })\n            .then(masterpass => {\n                this._masterpassClient = masterpass;\n                this._signInButton = this._createSignInButton(containerId);\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        if (this._signInButton && this._signInButton.parentNode) {\n            this._signInButton.removeEventListener('click', this._handleWalletButtonClick);\n            this._signInButton.parentNode.removeChild(this._signInButton);\n            this._signInButton = undefined;\n        }\n\n        return Promise.resolve();\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const buttonContainer = document.getElementById(containerId);\n\n        if (!buttonContainer) {\n            throw new Error('Need a container to place the button');\n        }\n\n        const button = document.createElement('input');\n\n        button.type = 'image';\n        button.src = 'https://static.masterpass.com/dyn/img/btn/global/mp_chk_btn_160x037px.svg';\n        buttonContainer.appendChild(button);\n\n        button.addEventListener('click', this._handleWalletButtonClick);\n\n        return button;\n    }\n\n    private _createMasterpassPayload(): MasterpassCheckoutOptions {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const paymentMethod = this._methodId ? state.paymentMethods.getPaymentMethod(this._methodId) : null;\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return {\n            checkoutId: paymentMethod.initializationData.checkoutId,\n            allowedCardTypes: paymentMethod.initializationData.allowedCardTypes,\n            amount: checkout.cart.cartAmount.toString(),\n            currency: checkout.cart.currency.code,\n            cartId: checkout.cart.id,\n            suppressShippingAddress: false,\n            callbackUrl: getCallbackUrl('cart'),\n        };\n    }\n\n    @bind\n    private _handleWalletButtonClick(): void {\n        if (!this._masterpassClient) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        this._masterpassClient.checkout(this._createMasterpassPayload());\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { pick } from 'lodash';\n\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, StandardError } from '../../../common/error/errors';\nimport { INTERNAL_USE_ONLY } from '../../../common/http-request';\nimport { PaymentMethod } from '../../../payment';\nimport { PaypalActions, PaypalAuthorizeData, PaypalClientToken } from '../../../payment/strategies/paypal';\nimport { PaypalScriptLoader } from '../../../payment/strategies/paypal';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class PaypalButtonStrategy implements CheckoutButtonStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paypalScriptLoader: PaypalScriptLoader,\n        private _formPoster: FormPoster,\n        private _host: string = ''\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const paypalOptions = options.paypal;\n        const state = this._store.getState();\n        const paymentMethod = this._paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n        if (!paypalOptions) {\n            throw new InvalidArgumentError();\n        }\n\n        return this._paypalScriptLoader.loadPaypal()\n            .then(paypal => {\n                if (!paymentMethod || !paymentMethod.config.merchantId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const merchantId = paymentMethod.config.merchantId;\n                const env = paymentMethod.config.testMode ? 'sandbox' : 'production';\n                const clientToken: PaypalClientToken = { [env]: paypalOptions.clientId };\n\n                const allowedSources = [];\n                const disallowedSources = [];\n\n                if (paypalOptions.allowCredit) {\n                    allowedSources.push(paypal.FUNDING.CREDIT);\n                } else {\n                    disallowedSources.push(paypal.FUNDING.CREDIT);\n                }\n\n                return paypal.Button.render({\n                    env,\n                    client: clientToken,\n                    commit: paypalOptions.shouldProcessPayment,\n                    funding: {\n                        allowed: allowedSources,\n                        disallowed: disallowedSources,\n                    },\n                    style: {\n                        shape: 'rect',\n                        ...pick(paypalOptions.style, 'layout', 'size', 'color', 'label', 'shape', 'tagline', 'fundingicons'),\n                    },\n                    payment: (data, actions) => this._setupPayment(merchantId, actions, paypalOptions.onPaymentError),\n                    onAuthorize: (data, actions) => this._tokenizePayment(data, actions, paypalOptions.shouldProcessPayment, paypalOptions.onAuthorizeError),\n                }, options.containerId);\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        this._paymentMethod = undefined;\n\n        return Promise.resolve();\n    }\n\n    private _setupPayment(merchantId: string, actions?: PaypalActions, onError?: (error: StandardError) => void): Promise<string> {\n        if (!actions) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(state => {\n                const cart = state.cart.getCart();\n                const cartId = cart ? cart.id : '';\n\n                return actions.request.post(`${this._host}/api/storefront/payment/paypalexpress`, { merchantId, cartId }, {\n                    headers: {\n                        'X-API-INTERNAL': INTERNAL_USE_ONLY,\n                    },\n                });\n            })\n            .then(res => res.id)\n            .catch(error => {\n                if (onError) {\n                    onError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    private _tokenizePayment(\n        data: PaypalAuthorizeData,\n        actions?: PaypalActions,\n        shouldProcessPayment?: boolean,\n        onError?: (error: StandardError) => void\n    ): Promise<void> {\n        if (!this._paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        if (!actions) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        if (!data.paymentID || !data.payerID) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        const methodId = this._paymentMethod.id;\n\n        return actions.payment.get(data.paymentID).then(payload => {\n            this._formPoster.postForm('/checkout.php', {\n                payment_type: 'paypal',\n                provider: methodId,\n                action: shouldProcessPayment ? 'process_payment' : 'set_external_checkout',\n                paymentId: data.paymentID,\n                payerId: data.payerID,\n                payerInfo: JSON.stringify(payload.payer.payer_info),\n            });\n        });\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport { createCheckoutStore } from '../checkout';\nimport { PaymentMethodActionCreator, PaymentMethodRequestSender } from '../payment';\n\nimport CheckoutButtonInitializer from './checkout-button-initializer';\nimport CheckoutButtonInitializerOptions from './checkout-button-initializer-options';\nimport CheckoutButtonStrategyActionCreator from './checkout-button-strategy-action-creator';\nimport createCheckoutButtonRegistry from './create-checkout-button-registry';\n\n/**\n * Creates an instance of `CheckoutButtonInitializer`.\n *\n * @remarks\n * ```js\n * const initializer = createCheckoutButtonInitializer();\n *\n * initializer.initializeButton({\n *     methodId: 'braintreepaypal',\n *     braintreepaypal: {\n *         container: '#checkoutButton',\n *     },\n * });\n * ```\n *\n * @alpha\n * Please note that `CheckoutButtonInitializer` is currently in an early stage\n * of development. Therefore the API is unstable and not ready for public\n * consumption.\n *\n * @param options - A set of construction options.\n * @returns an instance of `CheckoutButtonInitializer`.\n */\nexport default function createCheckoutButtonInitializer(\n    options?: CheckoutButtonInitializerOptions\n): CheckoutButtonInitializer {\n    const host = options && options.host;\n    const store = createCheckoutStore();\n    const requestSender = createRequestSender({ host });\n    const formPoster = createFormPoster({ host });\n\n    return new CheckoutButtonInitializer(\n        store,\n        new CheckoutButtonStrategyActionCreator(\n            createCheckoutButtonRegistry(store, requestSender, formPoster, host),\n            new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender))\n        )\n    );\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { CheckoutActionCreator, CheckoutRequestSender, CheckoutStore } from '../checkout';\nimport { Registry } from '../common/registry';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { BraintreeScriptLoader, BraintreeSDKCreator } from '../payment/strategies/braintree';\nimport { createGooglePayPaymentProcessor, GooglePayBraintreeInitializer, GooglePayStripeInitializer } from '../payment/strategies/googlepay';\nimport { MasterpassScriptLoader } from '../payment/strategies/masterpass';\nimport { PaypalScriptLoader } from '../payment/strategies/paypal';\n\nimport { CheckoutButtonMethodType, CheckoutButtonStrategy } from './strategies';\nimport { BraintreePaypalButtonStrategy } from './strategies/braintree';\nimport { GooglePayButtonStrategy } from './strategies/googlepay';\nimport { MasterpassButtonStrategy } from './strategies/masterpass';\nimport { PaypalButtonStrategy } from './strategies/paypal';\n\nexport default function createCheckoutButtonRegistry(\n    store: CheckoutStore,\n    requestSender: RequestSender,\n    formPoster: FormPoster,\n    host?: string\n): Registry<CheckoutButtonStrategy, CheckoutButtonMethodType> {\n    const registry = new Registry<CheckoutButtonStrategy, CheckoutButtonMethodType>();\n    const scriptLoader = getScriptLoader();\n    const checkoutActionCreator = new CheckoutActionCreator(\n        new CheckoutRequestSender(requestSender),\n        new ConfigActionCreator(new ConfigRequestSender(requestSender))\n    );\n\n    registry.register(CheckoutButtonMethodType.BRAINTREE_PAYPAL, () =>\n        new BraintreePaypalButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new BraintreeSDKCreator(new BraintreeScriptLoader(scriptLoader)),\n            new PaypalScriptLoader(scriptLoader),\n            formPoster\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.BRAINTREE_PAYPAL_CREDIT, () =>\n        new BraintreePaypalButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new BraintreeSDKCreator(new BraintreeScriptLoader(scriptLoader)),\n            new PaypalScriptLoader(scriptLoader),\n            formPoster,\n            true\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.MASTERPASS, () =>\n        new MasterpassButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new MasterpassScriptLoader(scriptLoader)\n        ));\n\n    registry.register(CheckoutButtonMethodType.GOOGLEPAY_BRAINTREE, () =>\n        new GooglePayButtonStrategy(\n            store,\n            formPoster,\n            checkoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayBraintreeInitializer(\n                    new BraintreeSDKCreator(\n                        new BraintreeScriptLoader(scriptLoader)\n                    )\n                )\n            )\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.GOOGLEPAY_STRIPE, () =>\n        new GooglePayButtonStrategy(\n            store,\n            formPoster,\n            checkoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayStripeInitializer()\n            )\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.PAYPALEXPRESS, () =>\n        new PaypalButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new PaypalScriptLoader(scriptLoader),\n            formPoster,\n            host\n        )\n    );\n\n    return registry;\n}\n","export { default as createCheckoutButtonInitializer } from './create-checkout-button-initializer';\nexport { default as checkoutButtonReducer } from './checkout-button-reducer';\nexport { default as CheckoutButtonSelector } from './checkout-button-selector';\nexport { default as CheckoutButtonState } from './checkout-button-state';\n\nexport { CheckoutButtonOptions, CheckoutButtonInitializeOptions } from './checkout-button-options';\n","export enum CheckoutIncludes {\n    AvailableShippingOptions = 'consignments.availableShippingOptions',\n    PhysicalItemsCategoryNames = 'cart.lineItems.physicalItems.categoryNames',\n    DigitalItemsCategoryNames = 'cart.lineItems.digitalItems.categoryNames',\n}\n\nexport default interface CheckoutParams {\n    include?: CheckoutIncludes[];\n}\n","module.exports = require(\"@bigcommerce/form-poster\");","import InternalLineItem from './internal-line-item';\nimport { LineItem } from './line-item';\nimport LineItemMap from './line-item-map';\nimport mapGiftCertificateToInternalLineItem from './map-gift-certificate-to-internal-line-item';\nimport mapToInternalLineItem from './map-to-internal-line-item';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalLineItems(\n    itemMap: LineItemMap,\n    decimalPlaces: number,\n    idKey: keyof LineItem = 'id'\n): InternalLineItem[] {\n    return (Object.keys(itemMap) as Array<keyof LineItemMap>)\n        .reduce((result, key) => [\n            ...result,\n            ...(itemMap[key] as LineItem[]).map((item: any) => {\n                if (key === 'giftCertificates') {\n                    return mapGiftCertificateToInternalLineItem(item, decimalPlaces);\n                }\n\n                return mapToInternalLineItem(\n                    item,\n                    mapToInternalLineItemType(key),\n                    decimalPlaces,\n                    idKey\n                );\n            }),\n        ], [] as InternalLineItem[]);\n}\n\nfunction mapToInternalLineItemType(type: string): string {\n    switch (type) {\n        case 'physicalItems':\n            return 'ItemPhysicalEntity';\n\n        case 'digitalItems':\n            return 'ItemDigitalEntity';\n\n        case 'giftCertificates':\n            return 'ItemGiftCertificateEntity';\n\n        default:\n            return '';\n    }\n}\n","module.exports = require(\"local-storage-fallback\");","import { createErrorAction, Action } from '@bigcommerce/data-store';\nimport { concat, of, throwError, Observable } from 'rxjs';\n\nexport default function throwErrorAction<TPayload, TMeta, TType extends string>(\n    type: TType,\n    error?: TPayload,\n    meta?: TMeta\n): Observable<Action<TPayload, TMeta, TType>> {\n    if (isErrorAction(error)) {\n        return concat(of(error), throwError(createErrorAction(type, error.payload, meta)));\n    }\n\n    return throwError(createErrorAction(type, error, meta));\n}\n\nfunction isErrorAction(action: any): action is Action {\n    return action && action.type && action.error;\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { RequestError } from '../../common/error/errors';\n\nexport default class PaymentMethodInvalidError extends RequestError {\n    constructor(response?: Response) {\n        super(response, { message: 'There is a problem processing your payment. Please try again later.' });\n\n        this.type = 'payment_method_invalid';\n    }\n}\n","import isEqual from './is-equal';\n\nexport default class CacheKeyResolver {\n    private _lastId = 0;\n    private _maps: CacheKeyMap[] = [];\n\n    getKey(...args: any[]): string {\n        const { index, map, parentMaps } = this._resolveMap(...args);\n\n        if (map && map.cacheKey) {\n            map.usedCount++;\n\n            return map.cacheKey;\n        }\n\n        return this._generateKey(parentMaps, args.slice(index));\n    }\n\n    getUsedCount(...args: any[]): number {\n        const { map } = this._resolveMap(...args);\n\n        return map ? map.usedCount : 0;\n    }\n\n    private _resolveMap(...args: any[]): ResolveResult {\n        let index = 0;\n        let parentMaps = this._maps;\n\n        while (parentMaps.length) {\n            let isMatched = false;\n\n            for (const map of parentMaps) {\n                if (!isEqual(map.value, args[index])) {\n                    continue;\n                }\n\n                if ((args.length === 0 || index === args.length - 1) && map.cacheKey) {\n                    return { index, map, parentMaps };\n                }\n\n                isMatched = true;\n                parentMaps = map.maps;\n                index++;\n\n                break;\n            }\n\n            if (!isMatched) {\n                break;\n            }\n        }\n\n        return { index, parentMaps };\n    }\n\n    private _generateKey(maps: CacheKeyMap[], args: any[]): string {\n        let index = 0;\n        let parentMaps = maps;\n        let map!: CacheKeyMap;\n\n        do {\n            map = {\n                usedCount: 1,\n                value: args[index],\n                maps: [],\n            };\n\n            parentMaps.push(map);\n\n            parentMaps = map.maps;\n            index++;\n        } while (index < args.length);\n\n        map.cacheKey = `${++this._lastId}`;\n\n        return map.cacheKey;\n    }\n}\n\ninterface CacheKeyMap {\n    maps: CacheKeyMap[];\n    value: any;\n    usedCount: number;\n    cacheKey?: string;\n}\n\ninterface ResolveResult {\n    index: number;\n    parentMaps: CacheKeyMap[];\n    map?: CacheKeyMap;\n}\n","/**\n * Decorates a class or a method by binding all its prototype methods or itself\n * to the calling instance respectively.\n */\nexport default function bindDecorator<T extends Method>(target: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T>;\nexport default function bindDecorator<T extends Constructor<object>>(target: T): T;\nexport default function bindDecorator(target: any, key?: any, descriptor?: any): any {\n    if (!key || !descriptor) {\n        return bindClassDecorator(target);\n    }\n\n    return bindMethodDecorator(target, key, descriptor);\n}\n\n/**\n * Decorates a class by binding all its prototype methods to the calling\n * instance.\n */\nexport function bindClassDecorator<T extends Constructor<object>>(target: T): T {\n    const decoratedTarget = class extends target {};\n\n    Object.getOwnPropertyNames(target.prototype)\n        .forEach(key => {\n            const descriptor = Object.getOwnPropertyDescriptor(target.prototype, key);\n\n            if (!descriptor || key === 'constructor') {\n                return;\n            }\n\n            Object.defineProperty(\n                decoratedTarget.prototype,\n                key,\n                bindMethodDecorator(target.prototype, key, descriptor)\n            );\n        });\n\n    return decoratedTarget;\n}\n\n/**\n * Decorates a method by binding it to the calling instance.\n */\nexport function bindMethodDecorator<T extends Method>(target: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T> {\n    if (typeof descriptor.value !== 'function') {\n        return descriptor;\n    }\n\n    let method: T = descriptor.value;\n\n    return {\n        get() {\n            const boundMethod = method.bind(this);\n\n            Object.defineProperty(this, key, {\n                ...descriptor,\n                value: boundMethod,\n            });\n\n            return boundMethod;\n        },\n        set(value) {\n            method = value;\n        },\n    };\n}\n\nexport type Constructor<T> = new (...args: any[]) => T;\nexport type Method = (...args: any[]) => any;\n","import { parseUrl } from '../common/url';\n\nexport default class IframeEventPoster<TEvent> {\n    private _targetOrigin: string;\n\n    constructor(\n        targetOrigin: string,\n        private _targetWindow?: Window\n    ) {\n        this._targetOrigin = targetOrigin === '*' ? '*' : parseUrl(targetOrigin).origin;\n    }\n\n    post(event: TEvent): void {\n        if (window === this._targetWindow) {\n            return;\n        }\n\n        if (!this._targetWindow) {\n            throw new Error('Unable to post message becauset target window is not set.');\n        }\n\n        this._targetWindow.postMessage(event, this._targetOrigin);\n    }\n\n    setTarget(window: Window) {\n        this._targetWindow = window;\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\nimport { from, Observable, Subscribable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { RequestErrorFactory } from '../common/error';\n\nexport default function createActionTransformer(\n    requestErrorFactory: RequestErrorFactory\n): (action: Subscribable<Action>) => Observable<Action> {\n    return action$ => from(action$).pipe(catchError<Action, never>(action => {\n        if (action instanceof Error || action.payload instanceof Error) {\n            throw action;\n        }\n\n        if (isResponse(action.payload)) {\n            const message = action.payload.body && action.payload.body.detail;\n\n            throw { ...action, payload: requestErrorFactory.createError(action.payload, message) };\n        }\n\n        throw action;\n    }));\n}\n\nfunction isResponse(object: any) {\n    if (!object || typeof object !== 'object') {\n        return false;\n    }\n\n    return ['body', 'headers', 'status', 'statusText'].every(key =>\n        object.hasOwnProperty(key)\n    );\n}\n","import { BillingAddressSelector } from '../billing';\nimport { CartSelector } from '../cart';\nimport { selector } from '../common/selector';\nimport { CouponSelector, GiftCertificateSelector } from '../coupon';\nimport { CustomerSelector } from '../customer';\nimport { ConsignmentSelector } from '../shipping';\n\nimport Checkout from './checkout';\nimport CheckoutState from './checkout-state';\n\n@selector\nexport default class CheckoutSelector {\n    constructor(\n        private _checkout: CheckoutState,\n        private _billingAddress: BillingAddressSelector,\n        private _cart: CartSelector,\n        private _consignments: ConsignmentSelector,\n        private _coupons: CouponSelector,\n        private _customer: CustomerSelector,\n        private _giftCertificates: GiftCertificateSelector\n    ) {}\n\n    getCheckout(): Checkout | undefined {\n        const { data } = this._checkout;\n        const billingAddress = this._billingAddress.getBillingAddress();\n        const cart = this._cart.getCart();\n        const customer = this._customer.getCustomer();\n        const consignments = this._consignments.getConsignments() || [];\n        const coupons = this._coupons.getCoupons() || [];\n        const giftCertificates = this._giftCertificates.getGiftCertificates() || [];\n\n        if (!data || !cart || !customer) {\n            return;\n        }\n\n        return {\n            ...data,\n            billingAddress,\n            cart,\n            customer,\n            consignments,\n            coupons,\n            giftCertificates,\n        };\n    }\n\n    getGrandTotal(useStoreCredit?: boolean): number | undefined {\n        const checkout = this.getCheckout();\n\n        if (!checkout) {\n            return;\n        }\n\n        const grandTotal = checkout.grandTotal || 0;\n        const storeCredit = checkout.customer.storeCredit || 0;\n\n        return useStoreCredit ? Math.max(grandTotal - storeCredit, 0) : grandTotal;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._checkout.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return this._checkout.statuses.isLoading === true;\n    }\n\n    getUpdateError(): Error | undefined {\n        return this._checkout.errors.updateError;\n    }\n\n    isUpdating(): boolean {\n        return this._checkout.statuses.isUpdating === true;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\nimport { omit } from 'lodash';\n\nimport { BillingAddressAction, BillingAddressActionType } from '../billing';\nimport { clearErrorReducer } from '../common/error';\nimport { CouponAction, CouponActionType, GiftCertificateAction, GiftCertificateActionType } from '../coupon';\nimport { OrderAction, OrderActionType } from '../order';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping';\n\nimport { CheckoutAction, CheckoutActionType } from './checkout-actions';\nimport CheckoutState, { CheckoutDataState, CheckoutErrorsState, CheckoutStatusesState } from './checkout-state';\n\nconst DEFAULT_STATE: CheckoutState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function checkoutReducer(\n    state: CheckoutState = DEFAULT_STATE,\n    action: Action\n): CheckoutState {\n    const reducer = combineReducers<CheckoutState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: CheckoutDataState | undefined,\n    action: CheckoutAction | BillingAddressAction | ConsignmentAction | CouponAction | GiftCertificateAction | OrderAction\n): CheckoutDataState | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return action.payload\n            ? omit({ ...data, ...action.payload }, ['billingAddress', 'cart', 'consignments', 'customer', 'coupons', 'giftCertifcates'])\n            : data;\n\n    case OrderActionType.SubmitOrderSucceeded:\n        return action.payload && data\n            ? { ...data, orderId: action.payload.order.orderId }\n            : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CheckoutErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction | OrderAction\n): CheckoutErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return {\n            ...errors,\n            loadError: undefined,\n        };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return {\n            ...errors,\n            loadError: action.payload,\n        };\n\n    case CheckoutActionType.UpdateCheckoutRequested:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n        return {\n            ...errors,\n            updateError: undefined,\n        };\n\n    case CheckoutActionType.UpdateCheckoutFailed:\n        return {\n            ...errors,\n            updateError: action.payload,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CheckoutStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction | OrderAction\n): CheckoutStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return {\n            ...statuses,\n            isLoading: true,\n        };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return {\n            ...statuses,\n            isLoading: false,\n        };\n\n    case CheckoutActionType.UpdateCheckoutRequested:\n        return {\n            ...statuses,\n            isUpdating: true,\n        };\n\n    case CheckoutActionType.UpdateCheckoutFailed:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n        return {\n            ...statuses,\n            isUpdating: false,\n        };\n\n    default:\n        return statuses;\n    }\n}\n","import InternalLineItem from './internal-line-item';\nimport { GiftCertificateItem } from './line-item';\n\nimport { AmountTransformer } from '.';\n\nexport default function mapGiftCertificateToInternalLineItem(\n    item: GiftCertificateItem,\n    decimalPlaces: number\n): InternalLineItem {\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: item.id,\n        imageUrl: '',\n        name: item.name,\n        amount: item.amount,\n        amountAfterDiscount: item.amount,\n        discount: 0,\n        integerAmount: amountTransformer.toInteger(item.amount),\n        integerAmountAfterDiscount: amountTransformer.toInteger(item.amount),\n        integerDiscount: 0,\n        quantity: 1,\n        sender: item.sender,\n        recipient: item.recipient,\n        type: 'ItemGiftCertificateEntity',\n        attributes: [],\n        variantId: null,\n    };\n}\n","import AmountTransformer from './amount-transformer';\nimport InternalLineItem from './internal-line-item';\nimport { DigitalItem, LineItem } from './line-item';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalLineItem(\n    item: LineItem,\n    type: string,\n    decimalPlaces: number,\n    idKey: keyof LineItem = 'id'\n): InternalLineItem {\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: (item[idKey] as string | number),\n        imageUrl: item.imageUrl,\n        amount: item.extendedListPrice,\n        amountAfterDiscount: item.extendedSalePrice,\n        discount: item.discountAmount,\n        integerAmount: amountTransformer.toInteger(item.extendedListPrice),\n        integerAmountAfterDiscount: amountTransformer.toInteger(item.extendedSalePrice),\n        integerDiscount: amountTransformer.toInteger(item.discountAmount),\n        downloadsPageUrl: (item as DigitalItem).downloadPageUrl,\n        name: item.name,\n        quantity: item.quantity,\n        brand: item.brand,\n        categoryNames: item.categoryNames,\n        variantId: item.variantId,\n        productId: item.productId,\n        attributes: (item.options || []).map(option => ({\n            name: option.name,\n            value: option.value,\n        })),\n        addedByPromotion: item.addedByPromotion,\n        type,\n    };\n}\n","import { selector } from '../common/selector';\n\nimport BillingAddress from './billing-address';\nimport BillingAddressState from './billing-address-state';\n\n@selector\nexport default class BillingAddressSelector {\n    constructor(\n        private _billingAddress: BillingAddressState\n    ) {}\n\n    getBillingAddress(): BillingAddress | undefined {\n        return this._billingAddress.data;\n    }\n\n    getUpdateError(): Error | undefined {\n        return this._billingAddress.errors.updateError;\n    }\n\n    getContinueAsGuestError(): Error | undefined {\n        return this._billingAddress.errors.continueAsGuestError;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._billingAddress.errors.loadError;\n    }\n\n    isUpdating(): boolean {\n        return !!this._billingAddress.statuses.isUpdating;\n    }\n\n    isContinuingAsGuest(): boolean {\n        return !!this._billingAddress.statuses.isContinuingAsGuest;\n    }\n\n    isLoading(): boolean {\n        return !!this._billingAddress.statuses.isLoading;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport Config, { ContextConfig, StoreConfig } from './config';\nimport ConfigState from './config-state';\n\n@selector\nexport default class ConfigSelector {\n    constructor(\n        private _config: ConfigState\n    ) {}\n\n    getConfig(): Config | undefined {\n        return this._config.data;\n    }\n\n    getStoreConfig(): StoreConfig | undefined {\n        return this._config.data && this._config.data.storeConfig;\n    }\n\n    getContextConfig(): ContextConfig | undefined {\n        return this._config.data && this._config.data.context;\n    }\n\n    getExternalSource(): string | undefined {\n        return this._config.meta && this._config.meta.externalSource;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._config.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return !!this._config.statuses.isLoading;\n    }\n}\n","import { find } from 'lodash';\n\nimport { selector } from '../common/selector';\nimport { ConfigState } from '../config';\nimport { Country } from '../geography';\n\nimport FormField from './form-field';\n\n@selector\nexport default class FormSelector {\n    constructor(\n        private _config: ConfigState\n    ) {}\n\n    getShippingAddressFields(countries: Country[] = [], countryCode: string): FormField[] {\n        const selectedCountry = find(countries, { code: countryCode });\n        const fields = this._config.data ? this._config.data.storeConfig.formFields.shippingAddressFields : [];\n\n        return fields.map((field: any) => this._processField(field, countries, selectedCountry));\n    }\n\n    getBillingAddressFields(countries: Country[] = [], countryCode: string): FormField[] {\n        const selectedCountry = find(countries, { code: countryCode });\n        const fields = this._config.data ? this._config.data.storeConfig.formFields.billingAddressFields : [];\n\n        return fields.map((field: any) => this._processField(field, countries, selectedCountry));\n    }\n\n    private _processField(field: FormField, countries: Country[], selectedCountry?: Country): FormField {\n        if (field.name === 'countryCode') {\n            return this._processCountry(field, countries, selectedCountry);\n        }\n\n        if (field.name === 'stateOrProvince') {\n            return this._processProvince(field, selectedCountry);\n        }\n\n        if (field.name === 'postalCode') {\n            return this._processsPostCode(field, selectedCountry);\n        }\n\n        return field;\n    }\n\n    private _processCountry(field: FormField, countries: Country[] = [], country?: Country): FormField {\n        if (!countries.length) {\n            return field;\n        }\n\n        const { code = '' } = country || {};\n        const items = countries.map(({ code, name }: any) => ({\n            value: code,\n            label: name,\n        }));\n\n        return {\n            ...field,\n            options: { items },\n            default: code,\n            type: 'array',\n            fieldType: 'dropdown',\n            itemtype: 'string',\n        };\n    }\n\n    private _processProvince(field: FormField, country?: Country): FormField {\n        const { subdivisions = [] } = country || {};\n\n        if (!subdivisions.length) {\n            return {\n                ...field,\n                required: false,\n            };\n        }\n\n        const items = subdivisions.map(({ code, name }: any) => ({\n            value: code,\n            label: name,\n        }));\n\n        return {\n            ...field,\n            name: 'stateOrProvinceCode',\n            options: { items },\n            required: true,\n            type: 'array',\n            fieldType: 'dropdown',\n            itemtype: 'string',\n        };\n    }\n\n    private _processsPostCode(field: FormField, country?: Country): FormField {\n        const { hasPostalCodes = [] } = country || {};\n\n        if (hasPostalCodes === undefined) {\n            return field;\n        }\n\n        return { ...field, required: Boolean(hasPostalCodes) };\n    }\n}\n","import { selector } from '../common/selector';\n\nimport Country from './country';\nimport CountryState from './country-state';\n\n@selector\nexport default class CountrySelector {\n    constructor(\n        private _countries: CountryState\n    ) {}\n\n    getCountries(): Country[] | undefined {\n        return this._countries.data;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._countries.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return !!this._countries.statuses.isLoading;\n    }\n}\n","import { find } from 'lodash';\n\nimport { CheckoutPayment, CheckoutSelector } from '../checkout';\nimport { selector } from '../common/selector';\nimport { GatewayOrderPayment, InternalOrderPayment, OrderSelector } from '../order';\n\nimport PaymentMethod from './payment-method';\nimport { HOSTED } from './payment-method-types';\nimport { ACKNOWLEDGE, FINALIZE } from './payment-status-types';\n\n@selector\nexport default class PaymentSelector {\n    constructor(\n        private _checkout: CheckoutSelector,\n        private _order: OrderSelector\n    ) {}\n\n    getPaymentId(): { providerId: string, gatewayId?: string } | undefined {\n        const internalPayment = this._getInternalPayment();\n\n        if (internalPayment && internalPayment.id) {\n            return {\n                providerId: internalPayment.id,\n                gatewayId: internalPayment.gateway,\n            };\n        }\n\n        const payment = this._getHostedPayment() || this._getGatewayPayment();\n\n        if (payment && payment.providerId) {\n            return {\n                providerId: payment.providerId,\n                gatewayId: payment.gatewayId,\n            };\n        }\n    }\n\n    getPaymentStatus(): string | undefined {\n        const internalPayment = this._getInternalPayment();\n\n        if (internalPayment && internalPayment.status) {\n            return internalPayment.status.replace('PAYMENT_STATUS_', '');\n        }\n\n        const payment = this._getHostedPayment() || this._getGatewayPayment();\n\n        if (payment) {\n            return payment.detail.step;\n        }\n    }\n\n    getPaymentToken(): string | undefined {\n        const meta = this._order.getOrderMeta();\n\n        return meta && meta.token;\n    }\n\n    getPaymentRedirectUrl(): string | undefined {\n        const payment = this._getInternalPayment();\n\n        return payment && payment.redirectUrl;\n    }\n\n    isPaymentDataRequired(useStoreCredit: boolean = false): boolean {\n        const grandTotal = this._checkout.getGrandTotal(useStoreCredit);\n\n        return grandTotal ? grandTotal > 0 : false;\n    }\n\n    isPaymentDataSubmitted(paymentMethod?: PaymentMethod): boolean {\n        if (paymentMethod && paymentMethod.nonce) {\n            return true;\n        }\n\n        return this.getPaymentStatus() === ACKNOWLEDGE || this.getPaymentStatus() === FINALIZE;\n    }\n\n    private _getInternalPayment(): InternalOrderPayment | undefined {\n        const meta = this._order.getOrderMeta();\n\n        return meta && meta.payment;\n    }\n\n    private _getGatewayPayment(): GatewayOrderPayment | undefined {\n        const order = this._order.getOrder();\n\n        return find(order && order.payments, ({ providerId }) =>\n            providerId !== 'giftcertificate' && providerId !== 'storecredit'\n        ) as GatewayOrderPayment;\n    }\n\n    private _getHostedPayment(): CheckoutPayment | undefined {\n        const checkout = this._checkout.getCheckout();\n\n        return find(checkout && checkout.payments, ({ providerType }) =>\n            providerType === HOSTED\n        );\n    }\n}\n","import { find } from 'lodash';\n\nimport { selector } from '../common/selector';\n\nimport PaymentMethod from './payment-method';\nimport PaymentMethodMeta from './payment-method-meta';\nimport PaymentMethodState from './payment-method-state';\n\n@selector\nexport default class PaymentMethodSelector {\n    constructor(\n        private _paymentMethods: PaymentMethodState\n    ) {}\n\n    getPaymentMethods(): PaymentMethod[] | undefined {\n        return this._paymentMethods.data;\n    }\n\n    getPaymentMethodsMeta(): PaymentMethodMeta | undefined {\n        return this._paymentMethods.meta;\n    }\n\n    getPaymentMethod(methodId: string, gatewayId?: string): PaymentMethod | undefined {\n        return gatewayId ?\n            find(this._paymentMethods.data, { id: methodId, gateway: gatewayId }) :\n            find(this._paymentMethods.data, { id: methodId });\n    }\n\n    getLoadError(): Error | undefined {\n        return this._paymentMethods.errors && this._paymentMethods.errors.loadError;\n    }\n\n    getLoadMethodError(methodId?: string): Error | undefined {\n        if (methodId && this._paymentMethods.errors.loadMethodId !== methodId) {\n            return;\n        }\n\n        return this._paymentMethods.errors.loadMethodError;\n    }\n\n    isLoading(): boolean {\n        return !!this._paymentMethods.statuses.isLoading;\n    }\n\n    isLoadingMethod(methodId?: string): boolean {\n        if (methodId && this._paymentMethods.statuses.loadMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._paymentMethods.statuses.isLoadingMethod;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport PaymentStrategyState, { DEFAULT_STATE } from './payment-strategy-state';\n\n@selector\nexport default class PaymentStrategySelector {\n    constructor(\n        private _paymentStrategies: PaymentStrategyState = DEFAULT_STATE\n    ) {}\n\n    getInitializeError(methodId?: string): Error | undefined {\n        if (methodId && this._paymentStrategies.errors.initializeMethodId !== methodId) {\n            return;\n        }\n\n        return this._paymentStrategies.errors.initializeError;\n    }\n\n    getExecuteError(methodId?: string): Error | undefined {\n        if (methodId && this._paymentStrategies.errors.executeMethodId !== methodId) {\n            return;\n        }\n\n        return this._paymentStrategies.errors.executeError;\n    }\n\n    getFinalizeError(methodId?: string): Error | undefined {\n        if (methodId && this._paymentStrategies.errors.finalizeMethodId !== methodId) {\n            return;\n        }\n\n        return this._paymentStrategies.errors.finalizeError;\n    }\n\n    getWidgetInteractingError(methodId?: string): Error | undefined {\n        if (methodId && this._paymentStrategies.errors.widgetInteractionMethodId !== methodId) {\n            return;\n        }\n\n        return this._paymentStrategies.errors.widgetInteractionError;\n    }\n\n    isInitializing(methodId?: string): boolean {\n        if (methodId && this._paymentStrategies.statuses.initializeMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._paymentStrategies.statuses.isInitializing;\n    }\n\n    isInitialized(methodId: string): boolean {\n        return !!(\n            this._paymentStrategies.data[methodId] &&\n            this._paymentStrategies.data[methodId].isInitialized\n        );\n    }\n\n    isExecuting(methodId?: string): boolean {\n        if (methodId && this._paymentStrategies.statuses.executeMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._paymentStrategies.statuses.isExecuting;\n    }\n\n    isFinalizing(methodId?: string): boolean {\n        if (methodId && this._paymentStrategies.statuses.finalizeMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._paymentStrategies.statuses.isFinalizing;\n    }\n\n    isWidgetInteracting(methodId?: string): boolean {\n        if (methodId && this._paymentStrategies.statuses.widgetInteractionMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._paymentStrategies.statuses.isWidgetInteracting;\n    }\n}\n","import Instrument from './instrument';\nimport InstrumentState, { InstrumentMeta } from './instrument-state';\n\nexport default class InstrumentSelector {\n    constructor(\n        private _instruments: InstrumentState\n    ) {}\n\n    getInstruments(): Instrument[] | undefined {\n        return this._instruments.data;\n    }\n\n    getInstrumentsMeta(): InstrumentMeta | undefined {\n        return this._instruments.meta;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._instruments.errors && this._instruments.errors.loadError;\n    }\n\n    getDeleteError(instrumentId?: string): Error | undefined {\n        if (!this._instruments.errors || (instrumentId && this._instruments.errors.failedInstrument !== instrumentId)) {\n            return;\n        }\n\n        return this._instruments.errors.deleteError;\n    }\n\n    isLoading(): boolean {\n        return !!(this._instruments.statuses && this._instruments.statuses.isLoading);\n    }\n\n    isDeleting(instrumentId?: string): boolean {\n        if (!this._instruments.statuses || (instrumentId && this._instruments.statuses.deletingInstrument !== instrumentId)) {\n            return false;\n        }\n\n        return !!this._instruments.statuses.isDeleting;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport RemoteCheckoutState, { RemoteCheckoutStateData } from './remote-checkout-state';\n\n@selector\nexport default class RemoteCheckoutSelector {\n    constructor(\n        private _remoteCheckout: RemoteCheckoutState\n    ) {}\n\n    getCheckout<TMethodId extends keyof RemoteCheckoutStateData>(\n        methodId: TMethodId\n    ): RemoteCheckoutStateData[TMethodId] | undefined {\n        return this._remoteCheckout.data[methodId];\n    }\n}\n","import { BillingAddressSelector } from '../billing';\nimport { CartSelector } from '../cart';\nimport { CheckoutButtonSelector } from '../checkout-buttons';\nimport { createFreezeProxies } from '../common/utility';\nimport { ConfigSelector } from '../config';\nimport { CouponSelector, GiftCertificateSelector } from '../coupon';\nimport { CustomerSelector, CustomerStrategySelector } from '../customer';\nimport { FormSelector } from '../form';\nimport { CountrySelector } from '../geography';\nimport { OrderSelector } from '../order';\nimport { PaymentSelector } from '../payment';\nimport { PaymentMethodSelector, PaymentStrategySelector } from '../payment';\nimport { InstrumentSelector } from '../payment/instrument';\nimport { RemoteCheckoutSelector } from '../remote-checkout';\nimport { ConsignmentSelector, ShippingAddressSelector, ShippingCountrySelector, ShippingStrategySelector } from '../shipping';\n\nimport CheckoutSelector from './checkout-selector';\nimport { CheckoutStoreOptions } from './checkout-store';\nimport CheckoutStoreState from './checkout-store-state';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\nexport default function createInternalCheckoutSelectors(state: CheckoutStoreState, options: CheckoutStoreOptions = {}): InternalCheckoutSelectors {\n    const billingAddress = new BillingAddressSelector(state.billingAddress);\n    const cart = new CartSelector(state.cart);\n    const checkoutButton = new CheckoutButtonSelector(state.checkoutButton);\n    const config = new ConfigSelector(state.config);\n    const countries = new CountrySelector(state.countries);\n    const coupons = new CouponSelector(state.coupons);\n    const customer = new CustomerSelector(state.customer);\n    const customerStrategies = new CustomerStrategySelector(state.customerStrategies);\n    const form = new FormSelector(state.config);\n    const giftCertificates = new GiftCertificateSelector(state.giftCertificates);\n    const instruments = new InstrumentSelector(state.instruments);\n    const paymentMethods = new PaymentMethodSelector(state.paymentMethods);\n    const paymentStrategies = new PaymentStrategySelector(state.paymentStrategies);\n    const shippingAddress = new ShippingAddressSelector(state.consignments);\n    const remoteCheckout = new RemoteCheckoutSelector(state.remoteCheckout);\n    const shippingCountries = new ShippingCountrySelector(state.shippingCountries);\n    const shippingStrategies = new ShippingStrategySelector(state.shippingStrategies);\n\n    // Compose selectors\n    const consignments = new ConsignmentSelector(state.consignments, cart);\n    const checkout = new CheckoutSelector(state.checkout, billingAddress, cart, consignments, coupons, customer, giftCertificates);\n    const order = new OrderSelector(state.order, billingAddress, coupons);\n    const payment = new PaymentSelector(checkout, order);\n\n    const selectors = {\n        billingAddress,\n        cart,\n        checkout,\n        checkoutButton,\n        config,\n        consignments,\n        countries,\n        coupons,\n        customer,\n        customerStrategies,\n        form,\n        giftCertificates,\n        instruments,\n        order,\n        payment,\n        paymentMethods,\n        paymentStrategies,\n        remoteCheckout,\n        shippingAddress,\n        shippingCountries,\n        shippingStrategies,\n    };\n\n    return options.shouldWarnMutation ? createFreezeProxies(selectors) : selectors;\n}\n","export default function setPrototypeOf(object: any, prototype: object) {\n    if (Object.setPrototypeOf) {\n        Object.setPrototypeOf(object, prototype);\n    } else {\n        object.__proto__ = prototype;\n    }\n\n    return object;\n}\n","export default function isPrivate(key: string): boolean {\n    return `${key}`.indexOf('$$') === 0 || `${key}`.indexOf('_') === 0;\n}\n","import { isPlainObject, omitBy, transform } from 'lodash';\n\nexport default function omitDeep(object: any, predicate: (value: any, key: string) => boolean): any {\n    if (Array.isArray(object)) {\n        return object.map(value => omitDeep(value, predicate));\n    }\n\n    if (isPlainObject(object)) {\n        return transform(omitBy(object, predicate), (result, value, key) => {\n            result[key] = omitDeep(value, predicate);\n        }, {});\n    }\n\n    return object;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum ErrorActionType {\n    ClearError = 'CLEAR_ERROR',\n}\n\nexport type ErrorAction = ClearErrorAction;\n\nexport interface ClearErrorAction extends Action {\n    type: ErrorActionType.ClearError;\n    payload: Error;\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { cachableAction, ActionOptions } from '../common/action';\nimport { RequestOptions } from '../common/http-request';\n\nimport { LoadPaymentMethodsAction, LoadPaymentMethodAction, PaymentMethodActionType } from './payment-method-actions';\nimport PaymentMethodRequestSender from './payment-method-request-sender';\n\nexport default class PaymentMethodActionCreator {\n    constructor(\n        private _requestSender: PaymentMethodRequestSender\n    ) {}\n\n    loadPaymentMethods(options?: RequestOptions): Observable<LoadPaymentMethodsAction> {\n        return Observable.create((observer: Observer<LoadPaymentMethodsAction>) => {\n            observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodsRequested));\n\n            this._requestSender.loadPaymentMethods(options)\n                .then(response => {\n                    const meta = {\n                        deviceSessionId: response.headers['x-device-session-id'],\n                        sessionHash: response.headers['x-session-hash'],\n                    };\n\n                    observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodsSucceeded, response.body, meta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(PaymentMethodActionType.LoadPaymentMethodsFailed, response));\n                });\n        });\n    }\n\n    @cachableAction\n    loadPaymentMethod(methodId: string, options?: RequestOptions & ActionOptions): Observable<LoadPaymentMethodAction> {\n        return Observable.create((observer: Observer<LoadPaymentMethodAction>) => {\n            observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodRequested, undefined, { methodId }));\n\n            this._requestSender.loadPaymentMethod(methodId, options)\n                .then(response => {\n                    observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodSucceeded, response.body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(PaymentMethodActionType.LoadPaymentMethodFailed, response, { methodId }));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, INTERNAL_USE_ONLY, RequestOptions } from '../common/http-request';\n\nimport PaymentMethod from './payment-method';\n\nexport default class PaymentMethodRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadPaymentMethods({ timeout }: RequestOptions = {}): Promise<Response<PaymentMethod[]>> {\n        const url = '/api/storefront/payments';\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n        });\n    }\n\n    loadPaymentMethod(methodId: string, { timeout }: RequestOptions = {}): Promise<Response<PaymentMethod>> {\n        const url = `/api/storefront/payments/${methodId}`;\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n        });\n    }\n}\n","import EmbeddedCheckoutStyles from '../embedded-checkout-styles';\n\nexport enum EmbeddedContentEventType {\n    StyleConfigured = 'STYLE_CONFIGURED',\n}\n\nexport interface EmbeddedContentEventMap {\n    [EmbeddedContentEventType.StyleConfigured]: EmbeddedContentStyleConfiguredEvent;\n}\n\nexport type EmbeddedContentEvent = (\n    EmbeddedContentStyleConfiguredEvent\n);\n\nexport interface EmbeddedContentStyleConfiguredEvent {\n    type: EmbeddedContentEventType.StyleConfigured;\n    payload: EmbeddedCheckoutStyles;\n}\n","import { parseUrl } from '../common/url';\nimport { bindDecorator as bind } from '../common/utility';\n\nimport { IframeEventMap } from './iframe-event';\nimport isIframeEvent from './is-iframe-event';\n\nexport default class IframeEventListener<TEventMap extends IframeEventMap<keyof TEventMap>> {\n    private _isListening: boolean;\n    private _listeners: EventListeners<TEventMap>;\n    private _sourceOrigin: string;\n\n    constructor(\n        sourceOrigin: string\n    ) {\n        this._sourceOrigin = parseUrl(sourceOrigin).origin;\n        this._isListening = false;\n        this._listeners = {};\n    }\n\n    listen(): void {\n        if (this._isListening) {\n            return;\n        }\n\n        this._isListening = true;\n\n        window.addEventListener('message', this._handleMessage);\n    }\n\n    stopListen(): void {\n        if (!this._isListening) {\n            return;\n        }\n\n        this._isListening = false;\n\n        window.removeEventListener('message', this._handleMessage);\n    }\n\n    addListener<TType extends keyof TEventMap>(type: TType, listener: (event: TEventMap[TType]) => void): void {\n        let listeners = this._listeners[type];\n\n        if (!listeners) {\n            this._listeners[type] = listeners = [];\n        }\n\n        listeners.push(listener);\n    }\n\n    removeListener<TType extends keyof TEventMap>(type: TType, listener: (event: TEventMap[TType]) => void): void {\n        const listeners = this._listeners[type];\n\n        if (!listeners) {\n            return;\n        }\n\n        const index = listeners.indexOf(listener);\n\n        if (index >= 0) {\n            listeners.splice(index, 1);\n        }\n    }\n\n    trigger<TType extends keyof TEventMap>(event: TEventMap[TType]): void {\n        const listeners = this._listeners[event.type];\n\n        if (!listeners) {\n            return;\n        }\n\n        listeners.forEach(listener => listener(event));\n    }\n\n    @bind\n    private _handleMessage(event: MessageEvent): void {\n        if ((event.origin !== this._sourceOrigin) || !isIframeEvent(event.data, event.data.type)) {\n            return;\n        }\n\n        this.trigger(event.data);\n    }\n}\n\ntype EventListeners<TEventMap> = {\n    [key in keyof TEventMap]?: Array<(event: TEventMap[keyof TEventMap]) => void>;\n};\n","export const INTERNAL_USE_ONLY = 'This API endpoint is for internal use only and may change in the future';\n","import { find, some, values } from 'lodash';\n\nimport { selector } from '../common/selector';\n\nimport CheckoutButtonState from './checkout-button-state';\nimport { CheckoutButtonMethodType } from './strategies';\n\n@selector\nexport default class CheckoutButtonSelector {\n    constructor(\n        private _checkoutButton: CheckoutButtonState\n    ) {}\n\n    getState(): CheckoutButtonState {\n        return this._checkoutButton;\n    }\n\n    isInitializing(methodId?: CheckoutButtonMethodType): boolean {\n        if (methodId) {\n            const method = this._checkoutButton.statuses[methodId];\n\n            return (method && method.isInitializing) === true;\n        }\n\n        return some(this._checkoutButton.statuses, { isInitializing: true });\n    }\n\n    isInitialized(methodId: CheckoutButtonMethodType, containerId?: string): boolean {\n        const method = this._checkoutButton.data[methodId];\n\n        if (!method) {\n            return false;\n        }\n\n        if (!containerId) {\n            return some(method.initializedContainers, isInitialized => isInitialized === true);\n        }\n\n        return method.initializedContainers[containerId] === true;\n    }\n\n    isDeinitializing(methodId?: CheckoutButtonMethodType): boolean {\n        if (methodId) {\n            const method = this._checkoutButton.statuses[methodId];\n\n            return (method && method.isDeinitializing) === true;\n        }\n\n        return some(this._checkoutButton.statuses, { isDeinitializing: true });\n    }\n\n    getInitializeError(methodId?: CheckoutButtonMethodType): Error | undefined {\n        const method = methodId ?\n            this._checkoutButton.errors[methodId] :\n            find(values(this._checkoutButton.errors), method => !!(method && method.initializeError));\n\n        return method && method.initializeError;\n    }\n\n    getDeinitializeError(methodId?: CheckoutButtonMethodType): Error | undefined {\n        const method = methodId ?\n            this._checkoutButton.errors[methodId] :\n            find(values(this._checkoutButton.errors), method => !!(method && method.deinitializeError));\n\n        return method && method.deinitializeError;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutButtonAction, CheckoutButtonActionType } from './checkout-button-actions';\nimport CheckoutButtonState, { CheckoutButtonDataState, CheckoutButtonErrorsState, CheckoutButtonStatusesState } from './checkout-button-state';\n\nconst DEFAULT_STATE: CheckoutButtonState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n\nconst DEFAULT_DATA_STATE: CheckoutButtonDataState = { initializedContainers: {} };\nconst DEFAULT_ERROR_STATE: CheckoutButtonErrorsState = {};\nconst DEFAULT_STATUS_STATE: CheckoutButtonStatusesState = {};\n\nexport default function checkoutButtonReducer(\n    state: CheckoutButtonState = DEFAULT_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonState {\n    if (!action.meta || !action.meta.methodId) {\n        return state;\n    }\n\n    const reducer = combineReducers<CheckoutButtonState>({\n        data: combineReducers({\n            [action.meta.methodId]: dataReducer,\n        }),\n        errors: combineReducers({\n            [action.meta.methodId]: errorsReducer,\n        }),\n        statuses: combineReducers({\n            [action.meta.methodId]: statusesReducer,\n        }),\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: CheckoutButtonDataState = DEFAULT_DATA_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonDataState {\n    switch (action.type) {\n    case CheckoutButtonActionType.InitializeButtonSucceeded:\n        if (!action.meta || !action.meta.containerId) {\n            return data;\n        }\n\n        return {\n            ...data,\n            initializedContainers: {\n                ...data.initializedContainers,\n                [action.meta.containerId]: true,\n            },\n        };\n\n    case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n        return {\n            ...data,\n            initializedContainers: {},\n        };\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: CheckoutButtonErrorsState = DEFAULT_ERROR_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonErrorsState {\n    switch (action.type) {\n    case CheckoutButtonActionType.InitializeButtonRequested:\n    case CheckoutButtonActionType.InitializeButtonSucceeded:\n        return {\n            ...errors,\n            initializeError: undefined,\n        };\n\n    case CheckoutButtonActionType.InitializeButtonFailed:\n        return {\n            ...errors,\n            initializeError: action.payload,\n        };\n\n    case CheckoutButtonActionType.DeinitializeButtonRequested:\n    case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n        return {\n            ...errors,\n            deinitializeError: undefined,\n        };\n\n    case CheckoutButtonActionType.DeinitializeButtonFailed:\n        return {\n            ...errors,\n            deinitializeError: action.payload,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CheckoutButtonStatusesState = DEFAULT_STATUS_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonStatusesState {\n    switch (action.type) {\n    case CheckoutButtonActionType.InitializeButtonRequested:\n        return {\n            ...statuses,\n            isInitializing: true,\n        };\n\n    case CheckoutButtonActionType.InitializeButtonFailed:\n    case CheckoutButtonActionType.InitializeButtonSucceeded:\n        return {\n            ...statuses,\n            isInitializing: false,\n        };\n\n    case CheckoutButtonActionType.DeinitializeButtonRequested:\n        return {\n            ...statuses,\n            isDeinitializing: true,\n        };\n\n    case CheckoutButtonActionType.DeinitializeButtonFailed:\n    case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n        return {\n            ...statuses,\n            isDeinitializing: false,\n        };\n\n    default:\n        return statuses;\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport enum NotEmbeddableErrorType {\n    MissingContainer = 'missing_container',\n    MissingContent = 'missing_content',\n    UnknownError = 'unknown_error',\n}\n\nexport default class NotEmbeddableError extends StandardError {\n    constructor(\n        message?: string,\n        public subtype: NotEmbeddableErrorType = NotEmbeddableErrorType.UnknownError\n    ) {\n        super(message || 'Unable to embed the checkout form.');\n\n        this.type = 'not_embeddable';\n    }\n}\n","import { default as storage } from 'local-storage-fallback';\n\nexport default class BrowserStorage {\n    constructor(\n        private _namespace: string\n    ) {}\n\n    getItem<TValue = any>(key: string): TValue | null {\n        const rawValue = storage.getItem(this.withNamespace(key));\n\n        if (rawValue === null) {\n            return null;\n        }\n\n        try {\n            return JSON.parse(rawValue);\n        } catch (error) {\n            // Clean up invalid values\n            this.removeItem(this.withNamespace(key));\n\n            return null;\n        }\n    }\n\n    getItemOnce<TValue = any>(key: string): TValue | null {\n        const value = this.getItem(key);\n\n        this.removeItem(key);\n\n        return value;\n    }\n\n    setItem<TValue = any>(key: string, value: TValue): void {\n        return storage.setItem(this.withNamespace(key), JSON.stringify(value));\n    }\n\n    removeItem(key: string): void {\n        return storage.removeItem(this.withNamespace(key));\n    }\n\n    private withNamespace(key: string): string {\n        return `${this._namespace}.${key}`;\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { InternalErrorResponseBody } from '../../common/error';\nimport { RequestError } from '../../common/error/errors';\n\nexport default class InvalidLoginTokenError extends RequestError {\n    constructor(response: Response<InternalErrorResponseBody>) {\n        super(response, { message: response.body.title });\n\n        this.type = 'invalid_login_token';\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { IFrameComponent } from 'iframe-resizer';\n\nimport { BrowserStorage } from '../common/storage';\nimport { parseUrl } from '../common/url';\n\nimport EmbeddedCheckoutError from './embedded-checkout-error';\nimport { EmbeddedCheckoutEventMap, EmbeddedCheckoutEventType } from './embedded-checkout-events';\nimport EmbeddedCheckoutOptions from './embedded-checkout-options';\nimport { InvalidLoginTokenError, NotEmbeddableError, NotEmbeddableErrorType } from './errors';\nimport { EmbeddedContentEvent, EmbeddedContentEventType } from './iframe-content/embedded-content-events';\nimport IframeEventListener from './iframe-event-listener';\nimport IframeEventPoster from './iframe-event-poster';\nimport LoadingIndicator from './loading-indicator';\nimport ResizableIframeCreator from './resizable-iframe-creator';\n\nconst CAN_RETRY_ALLOW_COOKIE = 'canRetryAllowCookie';\nconst IS_COOKIE_ALLOWED_KEY = 'isCookieAllowed';\n\nexport default class EmbeddedCheckout {\n    private _iframe?: IFrameComponent;\n    private _isAttached: boolean;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _iframeCreator: ResizableIframeCreator,\n        private _messageListener: IframeEventListener<EmbeddedCheckoutEventMap>,\n        private _messagePoster: IframeEventPoster<EmbeddedContentEvent>,\n        private _loadingIndicator: LoadingIndicator,\n        private _requestSender: RequestSender,\n        private _storage: BrowserStorage,\n        private _location: Location,\n        private _options: EmbeddedCheckoutOptions\n    ) {\n        this._isAttached = false;\n\n        if (this._options.onComplete) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.CheckoutComplete, this._options.onComplete);\n        }\n\n        if (this._options.onError) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.CheckoutError, this._options.onError);\n        }\n\n        if (this._options.onLoad) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.CheckoutLoaded, this._options.onLoad);\n        }\n\n        if (this._options.onFrameLoad) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.FrameLoaded, this._options.onFrameLoad);\n        }\n\n        if (this._options.onSignOut) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.SignedOut, this._options.onSignOut);\n        }\n\n        this._messageListener.addListener(EmbeddedCheckoutEventType.FrameLoaded, () => this._configureStyles());\n    }\n\n    attach(): Promise<this> {\n        if (this._isAttached) {\n            return Promise.resolve(this);\n        }\n\n        this._isAttached = true;\n        this._messageListener.listen();\n        this._loadingIndicator.show(this._options.containerId);\n\n        return this._allowCookie()\n            .then(() => this._attemptLogin())\n            .then(url => this._iframeCreator.createFrame(url, this._options.containerId))\n            .then(iframe => {\n                this._iframe = iframe;\n\n                this._configureStyles();\n                this._loadingIndicator.hide();\n            })\n            .catch(error => {\n                this._isAttached = false;\n\n                return this._retryAllowCookie(error)\n                    .catch(() => {\n                        this._messageListener.trigger({\n                            type: EmbeddedCheckoutEventType.FrameError,\n                            payload: error,\n                        });\n\n                        this._loadingIndicator.hide();\n\n                        throw error;\n                    });\n            })\n            .then(() => this);\n    }\n\n    detach(): void {\n        if (!this._isAttached) {\n            return;\n        }\n\n        this._isAttached = false;\n        this._messageListener.stopListen();\n\n        if (this._iframe && this._iframe.parentNode) {\n            this._iframe.parentNode.removeChild(this._iframe);\n            this._iframe.iFrameResizer.close();\n        }\n    }\n\n    private _configureStyles(): void {\n        if (!this._iframe || !this._iframe.contentWindow || !this._options.styles) {\n            return;\n        }\n\n        this._messagePoster.setTarget(this._iframe.contentWindow);\n\n        this._messagePoster.post({\n            type: EmbeddedContentEventType.StyleConfigured,\n            payload: this._options.styles,\n        });\n    }\n\n    private _attemptLogin(): Promise<string> {\n        if (!/^\\/login\\/token/.test(parseUrl(this._options.url).pathname)) {\n            return Promise.resolve(this._options.url);\n        }\n\n        return this._requestSender.post(this._options.url)\n            .then(({ body: { redirectUrl } }) => redirectUrl)\n            .catch(response => Promise.reject(new InvalidLoginTokenError(response)));\n    }\n\n    /**\n     * This workaround is required for certain browsers (namely Safari) that\n     * prevent session cookies to be set for a third party website unless the\n     * user has recently visited such website. Therefore, before we attempt to\n     * login or set an active cart in the session, we need to first redirect the\n     * user to the domain of Embedded Checkout.\n     */\n    private _allowCookie(): Promise<void> {\n        if (this._storage.getItem(IS_COOKIE_ALLOWED_KEY)) {\n            // It could be possible that the flag is set to true but the browser\n            // has already removed the permission to store cookie. In that case,\n            // we should try to redirect the user again.\n            this._storage.setItem(CAN_RETRY_ALLOW_COOKIE, true);\n\n            return Promise.resolve();\n        }\n\n        this._storage.removeItem(CAN_RETRY_ALLOW_COOKIE);\n        this._storage.setItem(IS_COOKIE_ALLOWED_KEY, true);\n\n        const { origin } = parseUrl(this._options.url);\n        const redirectUrl = `${origin}/embedded-checkout/allow-cookie?returnUrl=${encodeURIComponent(this._location.href)}`;\n\n        document.body.style.visibility = 'hidden';\n        this._location.replace(redirectUrl);\n\n        return new Promise<never>(() => {});\n    }\n\n    private _retryAllowCookie(error: EmbeddedCheckoutError): Promise<void> {\n        const canRetry = (\n            this._storage.getItem(CAN_RETRY_ALLOW_COOKIE) &&\n            error instanceof NotEmbeddableError &&\n            error.subtype === NotEmbeddableErrorType.MissingContent\n        );\n\n        if (!canRetry) {\n            return Promise.reject();\n        }\n\n        this._storage.removeItem(CAN_RETRY_ALLOW_COOKIE);\n        this._storage.removeItem(IS_COOKIE_ALLOWED_KEY);\n\n        return this._allowCookie();\n    }\n}\n","import { LoadingIndicatorStyles } from './embedded-checkout-styles';\n\nconst DEFAULT_STYLES: LoadingIndicatorStyles = {\n    size: 70,\n    color: '#d9d9d9',\n    backgroundColor: '#ffffff',\n};\n\nconst ROTATION_ANIMATION = 'embedded-checkout-loading-indicator-rotation';\n\nexport default class LoadingIndicator {\n    private _container: HTMLElement;\n    private _indicator: HTMLElement;\n    private _styles: LoadingIndicatorStyles;\n\n    constructor(\n        options?: { styles?: LoadingIndicatorStyles }\n    ) {\n        this._styles = { ...DEFAULT_STYLES, ...options && options.styles };\n\n        this._defineAnimation();\n\n        this._container = this._buildContainer();\n        this._indicator = this._buildIndicator();\n\n        this._container.appendChild(this._indicator);\n    }\n\n    show(parentId?: string): void {\n        if (parentId) {\n            const parent = document.getElementById(parentId);\n\n            if (!parent) {\n                throw new Error('Unable to attach the loading indicator because the parent ID is not valid.');\n            }\n\n            parent.appendChild(this._container);\n        }\n\n        this._container.style.visibility = 'visible';\n        this._container.style.opacity = '1';\n    }\n\n    hide(): void {\n        const handleTransitionEnd = () => {\n            this._container.style.visibility = 'hidden';\n\n            this._container.removeEventListener('transitionend', handleTransitionEnd);\n        };\n\n        this._container.addEventListener('transitionend', handleTransitionEnd);\n\n        this._container.style.opacity = '0';\n    }\n\n    private _buildContainer(): HTMLElement {\n        const container = document.createElement('div');\n\n        container.style.display = 'block';\n        container.style.bottom = '0';\n        container.style.left = '0';\n        container.style.height = '100%';\n        container.style.width = '100%';\n        container.style.position = 'absolute';\n        container.style.right = '0';\n        container.style.top = '0';\n        container.style.transition = 'all 250ms ease-out';\n        container.style.opacity = '0';\n\n        return container;\n    }\n\n    private _buildIndicator(): HTMLElement {\n        const indicator = document.createElement('div');\n\n        indicator.style.display = 'block';\n        indicator.style.width = `${this._styles.size}px`;\n        indicator.style.height = `${this._styles.size}px`;\n        indicator.style.borderRadius = `${this._styles.size}px`;\n        indicator.style.border = 'solid 1px';\n        indicator.style.borderColor = `${this._styles.backgroundColor} ${this._styles.backgroundColor} ${this._styles.color} ${this._styles.color}`;\n        indicator.style.margin = '0 auto';\n        indicator.style.position = 'absolute';\n        indicator.style.left = '0';\n        indicator.style.right = '0';\n        indicator.style.top = '50%';\n        indicator.style.transform = 'translateY(-50%) rotate(0deg)';\n        indicator.style.transformStyle = 'preserve-3d';\n        indicator.style.animation = `${ROTATION_ANIMATION} 500ms infinite cubic-bezier(0.69, 0.31, 0.56, 0.83)`;\n\n        return indicator;\n    }\n\n    private _defineAnimation(): void {\n        // In order to define CSS animation, we need to insert a stylesheet into the host frame.\n        // We only have to do it once.\n        if (document.getElementById(ROTATION_ANIMATION)) {\n            return;\n        }\n\n        const style = document.createElement('style');\n\n        style.id = ROTATION_ANIMATION;\n\n        document.head.appendChild(style);\n\n        if (style.sheet instanceof CSSStyleSheet) {\n            style.sheet.insertRule(`\n                @keyframes ${ROTATION_ANIMATION} {\n                    0% { transform: translateY(-50%) rotate(0deg); }\n                    100% { transform: translateY(-50%) rotate(360deg); }\n                }\n            `);\n        }\n    }\n}\n","import { iframeResizer, IFrameComponent } from 'iframe-resizer';\n\nimport { parseUrl } from '../common/url';\n\nimport { EmbeddedCheckoutEventType } from './embedded-checkout-events';\nimport { NotEmbeddableError, NotEmbeddableErrorType } from './errors';\nimport isIframeEvent from './is-iframe-event';\n\nexport default class ResizableIframeCreator {\n    constructor(\n        private _options?: { timeout: number }\n    ) {}\n\n    createFrame(src: string, containerId: string): Promise<IFrameComponent> {\n        const container = document.getElementById(containerId);\n        const { timeout = 60000 } = this._options || {};\n\n        if (!container) {\n            throw new NotEmbeddableError(\n                'Unable to embed the iframe because the container element could not be found.',\n                NotEmbeddableErrorType.MissingContainer\n            );\n        }\n\n        const iframe = document.createElement('iframe');\n\n        iframe.src = src;\n        iframe.style.border = 'none';\n        iframe.style.display = 'none';\n        iframe.style.width = '100%';\n        iframe.allowPaymentRequest = true;\n\n        container.appendChild(iframe);\n\n        return this._toResizableFrame(iframe, timeout)\n            .catch(error => {\n                container.removeChild(iframe);\n\n                throw error;\n            });\n    }\n\n    private _toResizableFrame(iframe: HTMLIFrameElement, timeoutInterval: number): Promise<IFrameComponent> {\n        // Can't simply listen to `load` event because it always gets triggered even if there's an error.\n        // Instead, listen to the `load` inside the iframe and let the parent frame know when it happens.\n        return new Promise((resolve, reject) => {\n            const timeout = window.setTimeout(() => {\n                reject(new NotEmbeddableError('Unable to embed the iframe because the content could not be loaded.'));\n            }, timeoutInterval);\n\n            const handleMessage = (event: MessageEvent) => {\n                if (event.origin !== parseUrl(iframe.src).origin) {\n                    return;\n                }\n\n                if (isIframeEvent(event.data, EmbeddedCheckoutEventType.FrameError)) {\n                    teardown();\n                    reject(new NotEmbeddableError(event.data.payload.message, NotEmbeddableErrorType.MissingContent));\n                }\n\n                if (isIframeEvent(event.data, EmbeddedCheckoutEventType.FrameLoaded)) {\n                    iframe.style.display = '';\n\n                    const contentId = event.data.payload && event.data.payload.contentId;\n                    const iframes = iframeResizer({\n                        scrolling: false,\n                        sizeWidth: false,\n                        heightCalculationMethod: contentId ? 'taggedElement' : 'lowestElement',\n                    }, iframe);\n\n                    teardown();\n                    resolve(iframes[iframes.length - 1]);\n                }\n            };\n\n            const teardown = () => {\n                window.removeEventListener('message', handleMessage);\n                window.clearTimeout(timeout);\n            };\n\n            window.addEventListener('message', handleMessage);\n        });\n    }\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\n\nimport { BrowserStorage } from '../common/storage';\nimport { parseUrl } from '../common/url';\n\nimport EmbeddedCheckout from './embedded-checkout';\nimport { EmbeddedCheckoutEventMap } from './embedded-checkout-events';\nimport EmbeddedCheckoutOptions from './embedded-checkout-options';\nimport { EmbeddedContentEvent } from './iframe-content/embedded-content-events';\nimport IframeEventListener from './iframe-event-listener';\nimport IframeEventPoster from './iframe-event-poster';\nimport LoadingIndicator from './loading-indicator';\nimport ResizableIframeCreator from './resizable-iframe-creator';\n\nconst STORAGE_PREFIX = 'BigCommerce.EmbeddedCheckout';\n\n/**\n * Embed the checkout form in an iframe.\n *\n * @remarks\n * Once the iframe is embedded, it will automatically resize according to the\n * size of the checkout form. It will also notify the parent window when certain\n * events have occurred. i.e.: when the form is loaded and ready to be used.\n *\n * ```js\n * embedCheckout({\n *     url: 'https://checkout/url',\n *     containerId: 'container-id',\n * });\n * ```\n *\n * @param options - Options for embedding the checkout form.\n * @returns A promise that resolves to an instance of `EmbeddedCheckout`.\n */\nexport default function embedCheckout(options: EmbeddedCheckoutOptions): Promise<EmbeddedCheckout> {\n    const origin = parseUrl(options.url).origin;\n    const embeddedCheckout = new EmbeddedCheckout(\n        new ResizableIframeCreator(),\n        new IframeEventListener<EmbeddedCheckoutEventMap>(origin),\n        new IframeEventPoster<EmbeddedContentEvent>(origin),\n        new LoadingIndicator({ styles: options.styles && options.styles.loadingIndicator }),\n        createRequestSender(),\n        new BrowserStorage(STORAGE_PREFIX),\n        window.location,\n        options\n    );\n\n    return embeddedCheckout.attach();\n}\n","export { default as embedCheckout } from './embed-checkout';\n","import { keyBy, reduce, some } from 'lodash';\n\nimport { Checkout } from '../checkout';\nimport { mapToInternalCoupon, mapToInternalGiftCertificate } from '../coupon';\nimport { mapToDiscountNotifications } from '../promotion';\n\nimport { AmountTransformer } from '.';\nimport InternalCart from './internal-cart';\nimport mapToInternalLineItems from './map-to-internal-line-items';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalCart(checkout: Checkout): InternalCart {\n    const decimalPlaces = checkout.cart.currency.decimalPlaces;\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: checkout.cart.id,\n        items: mapToInternalLineItems(checkout.cart.lineItems, decimalPlaces),\n        currency: checkout.cart.currency.code,\n        coupon: {\n            discountedAmount: reduce(checkout.cart.coupons, (sum, coupon) => {\n                return sum + coupon.discountedAmount;\n            }, 0),\n            coupons: checkout.cart.coupons.map(mapToInternalCoupon),\n        },\n        discount: {\n            amount: checkout.cart.discountAmount,\n            integerAmount: amountTransformer.toInteger(checkout.cart.discountAmount),\n        },\n        discountNotifications: mapToDiscountNotifications(checkout.promotions),\n        giftCertificate: {\n            totalDiscountedAmount: reduce(checkout.giftCertificates, (sum, certificate) => {\n                return sum + certificate.used;\n            }, 0),\n            appliedGiftCertificates: keyBy(checkout.giftCertificates.map(mapToInternalGiftCertificate), 'code'),\n        },\n        shipping: {\n            amount: checkout.shippingCostTotal,\n            integerAmount: amountTransformer.toInteger(checkout.shippingCostTotal),\n            amountBeforeDiscount: checkout.shippingCostBeforeDiscount,\n            integerAmountBeforeDiscount: amountTransformer.toInteger(checkout.shippingCostBeforeDiscount),\n            required: some(checkout.cart.lineItems.physicalItems, lineItem => lineItem.isShippingRequired),\n        },\n        subtotal: {\n            amount: checkout.subtotal,\n            integerAmount: amountTransformer.toInteger(checkout.subtotal),\n        },\n        storeCredit: {\n            amount: checkout.customer ? checkout.customer.storeCredit : 0,\n        },\n        taxSubtotal: {\n            amount: checkout.taxTotal,\n            integerAmount: amountTransformer.toInteger(checkout.taxTotal),\n        },\n        taxes: checkout.taxes,\n        taxTotal: {\n            amount: checkout.taxTotal,\n            integerAmount: amountTransformer.toInteger(checkout.taxTotal),\n        },\n        handling: {\n            amount: checkout.handlingCostTotal,\n            integerAmount: amountTransformer.toInteger(checkout.handlingCostTotal),\n        },\n        grandTotal: {\n            amount: checkout.grandTotal,\n            integerAmount: amountTransformer.toInteger(checkout.grandTotal),\n        },\n    };\n}\n","import { DiscountNotification } from '../discount';\n\nimport { Promotion } from '.';\n\nexport default function mapToDiscountNotifications(promotions?: Promotion[]): DiscountNotification[] {\n    const notifications: DiscountNotification[] = [];\n\n    (promotions || []).forEach(promotion => {\n        (promotion.banners || []).forEach(banner => {\n            notifications.push({\n                placeholders: [],\n                discountType: null,\n                message: '',\n                messageHtml: banner.text,\n            });\n        });\n    });\n\n    return notifications;\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, merge, of, Observable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType, StandardError } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { ConfigActionCreator } from '../config';\n\nimport { CheckoutRequestBody } from './checkout';\nimport { CheckoutActionType, LoadCheckoutAction, UpdateCheckoutAction } from './checkout-actions';\nimport CheckoutRequestSender from './checkout-request-sender';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\nexport default class CheckoutActionCreator {\n    constructor(\n        private _checkoutRequestSender: CheckoutRequestSender,\n        private _configActionCreator: ConfigActionCreator\n    ) {}\n\n    loadCheckout(id: string, options?: RequestOptions): Observable<LoadCheckoutAction> {\n        return concat(\n            of(createAction(CheckoutActionType.LoadCheckoutRequested)),\n            merge(\n                this._configActionCreator.loadConfig({ ...options, useCache: true }),\n                defer(() => this._checkoutRequestSender.loadCheckout(id, options)\n                    .then(({ body }) => createAction(CheckoutActionType.LoadCheckoutSucceeded, body)))\n            )\n        ).pipe(\n            catchError(error => throwErrorAction(CheckoutActionType.LoadCheckoutFailed, error))\n        );\n    }\n\n    loadDefaultCheckout(options?: RequestOptions): ThunkAction<LoadCheckoutAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(CheckoutActionType.LoadCheckoutRequested)),\n            this._configActionCreator.loadConfig(),\n            defer(() => {\n                const state = store.getState();\n                const context = state.config.getContextConfig();\n\n                if (!context || !context.checkoutId) {\n                    throw new StandardError('Unable to load checkout: no cart is available');\n                }\n\n                return this._checkoutRequestSender.loadCheckout(context.checkoutId, options)\n                    .then(({ body }) => createAction(CheckoutActionType.LoadCheckoutSucceeded, body));\n            })\n        ).pipe(\n            catchError(error => throwErrorAction(CheckoutActionType.LoadCheckoutFailed, error))\n        );\n    }\n\n    updateCheckout(\n        body: CheckoutRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateCheckoutAction, InternalCheckoutSelectors> {\n        return store => new Observable(observer => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(CheckoutActionType.UpdateCheckoutRequested));\n\n            this._checkoutRequestSender.updateCheckout(checkout.id, body, options)\n                .then(({ body }) => {\n                    observer.next(createAction(CheckoutActionType.UpdateCheckoutSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CheckoutActionType.UpdateCheckoutFailed, response));\n                });\n        });\n    }\n\n    loadCurrentCheckout(options?: RequestOptions): ThunkAction<LoadCheckoutAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            return this.loadCheckout(checkout.id, options);\n        };\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { AddressRequestBody } from '../address';\nimport { Cart } from '../cart';\nimport { InternalCheckoutSelectors, ReadableCheckoutStore } from '../checkout';\nimport { CheckoutIncludes } from '../checkout/checkout-params';\nimport CheckoutRequestSender from '../checkout/checkout-request-sender';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport Consignment, {\n    ConsignmentsRequestBody,\n    ConsignmentAssignmentRequestBody,\n    ConsignmentCreateRequestBody,\n    ConsignmentLineItem,\n    ConsignmentRequestBody,\n    ConsignmentShippingOptionRequestBody,\n    ConsignmentUpdateRequestBody\n} from './consignment';\nimport {\n    ConsignmentActionType,\n    CreateConsignmentsAction,\n    DeleteConsignmentAction,\n    LoadShippingOptionsAction,\n    UpdateConsignmentAction,\n    UpdateShippingOptionAction,\n} from './consignment-actions';\nimport ConsignmentRequestSender from './consignment-request-sender';\n\nexport default class ConsignmentActionCreator {\n    constructor(\n        private _consignmentRequestSender: ConsignmentRequestSender,\n        private _checkoutRequestSender: CheckoutRequestSender\n    ) {}\n\n    unassignItemsByAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<DeleteConsignmentAction | UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const existingConsignment = state.consignments.getConsignmentByAddress(consignment.shippingAddress);\n\n            if (!existingConsignment) {\n                throw new InvalidArgumentError('No consignment found for the specified address');\n            }\n\n            const lineItems = this._removeLineItems(\n                consignment.lineItems,\n                existingConsignment,\n                state.cart.getCart()\n            );\n\n            if (!lineItems.length) {\n                return this.deleteConsignment(existingConsignment.id, options)(store);\n            }\n\n            return this.updateConsignment({\n                id: existingConsignment.id,\n                shippingAddress: consignment.shippingAddress,\n                lineItems,\n            }, options)(store);\n        };\n    }\n\n    assignItemsByAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateConsignmentAction | CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const existingConsignment = state.consignments.getConsignmentByAddress(consignment.shippingAddress);\n\n            return this._createOrUpdateConsignment({\n                id: existingConsignment && existingConsignment.id,\n                shippingAddress: consignment.shippingAddress,\n                lineItems: this._addLineItems(\n                    consignment.lineItems,\n                    existingConsignment,\n                    state.cart.getCart()\n                ),\n            }, options)(store);\n        };\n    }\n\n    selectShippingOption(\n        id: string,\n        options?: RequestOptions\n    ): ThunkAction<UpdateShippingOptionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateShippingOptionAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n            const consignments = state.consignments.getConsignments();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            if (!consignments || !consignments.length) {\n                throw new MissingDataError(MissingDataErrorType.MissingConsignments);\n            }\n\n            const consignmentUpdateBody = {\n                id: consignments[0].id,\n                shippingOptionId: id,\n            };\n\n            const consignmentMeta = {\n                id: consignments[0].id,\n            };\n\n            observer.next(createAction(ConsignmentActionType.UpdateShippingOptionRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignmentUpdateBody, options)\n                .then(({ body }) => {\n                    observer.next(createAction(\n                        ConsignmentActionType.UpdateShippingOptionSucceeded,\n                        body,\n                        consignmentMeta\n                    ));\n\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(\n                        ConsignmentActionType.UpdateShippingOptionFailed,\n                        response,\n                        consignmentMeta\n                    ));\n                });\n        });\n    }\n\n    loadShippingOptions(options?: RequestOptions): ThunkAction<LoadShippingOptionsAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<LoadShippingOptionsAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.LoadShippingOptionsRequested));\n\n            this._checkoutRequestSender.loadCheckout(checkout.id, {\n                ...options,\n                params: {\n                    include: [CheckoutIncludes.AvailableShippingOptions],\n                },\n            })\n            .then(({ body }) => {\n                observer.next(createAction(ConsignmentActionType.LoadShippingOptionsSucceeded, body));\n                observer.complete();\n            })\n            .catch(response => {\n                observer.error(createErrorAction(ConsignmentActionType.LoadShippingOptionsFailed, response));\n            });\n        });\n    }\n\n    updateAddress(\n        address: AddressRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<CreateConsignmentsAction | UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return store => {\n            const consignment = this._getConsignmentRequestBody(address, store);\n            const consignments = store.getState().consignments.getConsignments();\n\n            if (consignments && consignments.length) {\n                (consignment as ConsignmentUpdateRequestBody).id = consignments[0].id;\n            }\n\n            return this._createOrUpdateConsignment(consignment, options)(store);\n        };\n    }\n\n    createConsignments(\n        consignments: ConsignmentsRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<CreateConsignmentsAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.CreateConsignmentsRequested));\n\n            this._consignmentRequestSender.createConsignments(checkout.id, consignments, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.CreateConsignmentsSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.CreateConsignmentsFailed, response));\n                });\n        });\n    }\n\n    updateConsignment(\n        consignment: ConsignmentUpdateRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateConsignmentAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const consignmentMeta = { id: consignment.id };\n\n            observer.next(createAction(ConsignmentActionType.UpdateConsignmentRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignment, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.UpdateConsignmentSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.UpdateConsignmentFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    deleteConsignment(\n        consignmentId: string,\n        options?: RequestOptions\n    ): ThunkAction<DeleteConsignmentAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<DeleteConsignmentAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n            const consignmentMeta = { id: consignmentId };\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.DeleteConsignmentRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.deleteConsignment(checkout.id, consignmentId, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.DeleteConsignmentSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.DeleteConsignmentFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    updateShippingOption(\n        consignment: ConsignmentShippingOptionRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateShippingOptionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateShippingOptionAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const consignmentMeta = { id: consignment.id };\n\n            observer.next(createAction(ConsignmentActionType.UpdateShippingOptionRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignment, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.UpdateShippingOptionSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.UpdateShippingOptionFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    private _createOrUpdateConsignment(\n        consignment: ConsignmentCreateRequestBody | ConsignmentUpdateRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateConsignmentAction | CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return store => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            if (this._isUpdateConsignmentRequest(consignment)) {\n                return this.updateConsignment(consignment, options)(store);\n            }\n\n            return this.createConsignments([consignment], options)(store);\n        };\n    }\n\n    private _getConsignmentRequestBody(\n        shippingAddress: AddressRequestBody,\n        store: ReadableCheckoutStore\n    ): ConsignmentRequestBody {\n        const state = store.getState();\n        const cart = state.cart.getCart();\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        return {\n            shippingAddress,\n            lineItems: (cart.lineItems && cart.lineItems.physicalItems || [])\n                .map(item => ({\n                    itemId: item.id,\n                    quantity: item.quantity,\n                })\n            ),\n        };\n    }\n\n    private _removeLineItems(\n        lineItems: ConsignmentLineItem[],\n        consignment: Consignment,\n        cart?: Cart\n    ): ConsignmentLineItem[] {\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        return this._hydrateLineItems(consignment.lineItemIds, cart).map(existingItem => {\n            const sharedItem = lineItems.find(lineItem => lineItem.itemId === existingItem.itemId);\n\n            return {\n                ...existingItem,\n                quantity: sharedItem ? (existingItem.quantity - sharedItem.quantity) : existingItem.quantity,\n            };\n        }).filter(lineItem => lineItem.quantity > 0);\n    }\n\n    private _addLineItems(\n        lineItems: ConsignmentLineItem[],\n        consignment?: Consignment,\n        cart?: Cart\n    ): ConsignmentLineItem[] {\n        if (!consignment) {\n            return lineItems;\n        }\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        return lineItems\n            .concat(this._hydrateLineItems(consignment.lineItemIds, cart))\n            .filter(lineItem => lineItem.quantity > 0);\n    }\n\n    private _hydrateLineItems(lineItemIds: string[], cart: Cart): ConsignmentLineItem[] {\n        return lineItemIds.map(itemId => {\n            const item = cart.lineItems.physicalItems.find(lineItem => lineItem.id === itemId );\n\n            return {\n                itemId,\n                quantity: item ? item.quantity : 0,\n            };\n        });\n    }\n\n    private _isUpdateConsignmentRequest(\n        request: ConsignmentRequestBody\n    ): request is ConsignmentUpdateRequestBody {\n        const updateRequest = request as ConsignmentUpdateRequestBody;\n\n        return !!updateRequest.id;\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout } from '../checkout';\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nimport { ConsignmentsRequestBody, ConsignmentUpdateRequestBody } from './consignment';\n\nconst DEFAULT_PARAMS = {\n    include: [\n        'consignments.availableShippingOptions',\n        'cart.lineItems.physicalItems.options',\n        'cart.lineItems.digitalItems.options',\n        'customer',\n        'promotions.banners',\n    ].join(','),\n};\n\nexport default class ConsignmentRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    createConsignments(checkoutId: string, consignments: ConsignmentsRequestBody, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, { body: consignments, params: DEFAULT_PARAMS, headers, timeout });\n    }\n\n    updateConsignment(checkoutId: string, consignment: ConsignmentUpdateRequestBody, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const { id, ...body } = consignment;\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.put(url, { params: DEFAULT_PARAMS, body, headers, timeout });\n    }\n\n    deleteConsignment(checkoutId: string, consignmentId: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments/${consignmentId}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.delete(url, { params: DEFAULT_PARAMS, headers, timeout });\n    }\n}\n","import InternalShippingOption from './internal-shipping-option';\nimport ShippingOption from './shipping-option';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalShippingOption(option: ShippingOption, isSelected: boolean): InternalShippingOption {\n    return {\n        description: option.description,\n        module: option.type,\n        price: option.cost,\n        id: option.id,\n        selected: isSelected,\n        isRecommended: option.isRecommended,\n        imageUrl: option.imageUrl,\n        transitTime: option.transitTime,\n    };\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport RequestError from './request-error';\n\nexport default class UnrecoverableError extends RequestError {\n    constructor(response: Response, message?: string) {\n        super(response, {\n            message: message || 'An unexpected error has occurred. The checkout process cannot continue as a result.',\n        });\n\n        this.type = 'unrecoverable';\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { InternalErrorResponseBody } from '../error-response-body';\n\nimport RequestError from './request-error';\n\nexport default function mapFromInternalErrorResponse(\n    response: Response<InternalErrorResponseBody>,\n    message?: string\n): RequestError {\n    const { body } = response;\n    const { errors = [] } = body;\n\n    return new RequestError(response, {\n        message: joinErrors(errors) || body.detail || body.title || message,\n        errors: errors.length ?\n            errors.map(message => ({ code: body.type, message })) :\n            [{ code: body.type, message: body.detail || body.title }],\n    });\n}\n\nfunction joinErrors(errors: string[]): string | undefined {\n    return errors.reduce((result: string[], error) => {\n        if (error) {\n            return [...result, error];\n        }\n\n        return result;\n    }, []).join(' ');\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { PaymentErrorResponseBody } from '../error-response-body';\n\nimport RequestError from './request-error';\n\nexport default function mapFromPaymentErrorResponse(\n    response: Response<PaymentErrorResponseBody>,\n    message?: string\n): RequestError {\n    const { body } = response;\n    const { errors = [] } = body;\n\n    return new RequestError(response, {\n        message: joinErrors(errors) || message,\n        errors,\n    });\n}\n\nfunction joinErrors(errors: Array<{ code: string, message?: string }>): string | undefined {\n    if (!Array.isArray(errors)) {\n        return;\n    }\n\n    return errors.reduce((result: string[], error) => {\n        if (error && error.message) {\n            return [...result, error.message];\n        }\n\n        return result;\n    }, []).join(' ');\n}\n\nexport const PAYMENT_ERROR_CODES = [\n    'payment',\n    'transaction_declined',\n];\n","import { Response } from '@bigcommerce/request-sender';\nimport { last } from 'lodash';\n\nimport ErrorResponseBody, {\n    InternalErrorResponseBody,\n    StorefrontErrorResponseBody\n} from './error-response-body';\nimport { RequestError, TimeoutError } from './errors';\nimport mapFromInternalErrorResponse from './errors/map-from-internal-error-response';\nimport mapFromPaymentErrorResponse, { PAYMENT_ERROR_CODES } from './errors/map-from-payment-error-response';\nimport mapFromStorefrontErrorResponse from './errors/map-from-storefront-error-response';\n\nexport default class RequestErrorFactory {\n    private _factoryMethods: { [key: string]: ErrorFactoryMethod } = {};\n\n    constructor() {\n        this.register('default', (response, message) => new RequestError(response, { message }));\n        this.register('internal', (response, message) => mapFromInternalErrorResponse(response, message));\n        this.register('storefront', (response, message) => mapFromStorefrontErrorResponse(response, message));\n        this.register('payment', (response, message) => mapFromPaymentErrorResponse(response, message));\n        this.register('timeout', response => new TimeoutError(response));\n    }\n\n    register(type: string, factoryMethod: ErrorFactoryMethod): void {\n        this._factoryMethods[type] = factoryMethod;\n    }\n\n    createError(response: Response, message?: string): RequestError {\n        const factoryMethod = this._factoryMethods[this._getType(response)] || this._factoryMethods.default;\n\n        return factoryMethod(response, message);\n    }\n\n    private _getType(response: Response<ErrorResponseBody>): string {\n        if (response.status === 0) {\n            return 'timeout';\n        }\n\n        if (this._isStorefrontErrorResponseBody(response.body)) {\n            return 'storefront';\n        }\n\n        if (this._isInternalErrorResponseBody(response.body)) {\n            const internalType = last(response.body.type.split('/'));\n\n            return internalType && this._factoryMethods[internalType] ?\n                internalType :\n                'internal';\n        }\n\n        const error = last(response.body && response.body.errors);\n\n        if (error && PAYMENT_ERROR_CODES.indexOf(error.code) !== -1) {\n            return 'payment';\n        }\n\n        return error && error.code ? error.code : 'payment';\n    }\n\n    private _isStorefrontErrorResponseBody(\n        errorResponse: ErrorResponseBody\n    ): errorResponse is StorefrontErrorResponseBody {\n        const storefrontErrorResponse = errorResponse as StorefrontErrorResponseBody;\n\n        return !this._isInternalErrorResponseBody(errorResponse) &&\n            typeof storefrontErrorResponse.title === 'string' &&\n            typeof storefrontErrorResponse.type === 'string' &&\n            typeof storefrontErrorResponse.status === 'number' &&\n            typeof storefrontErrorResponse.detail === 'string';\n    }\n\n    private _isInternalErrorResponseBody(\n        errorResponse: ErrorResponseBody\n    ): errorResponse is InternalErrorResponseBody {\n        const internalErrorResponse = errorResponse as InternalErrorResponseBody;\n\n        return typeof internalErrorResponse.errors === 'object' &&\n            typeof internalErrorResponse.title === 'string' &&\n            typeof internalErrorResponse.type === 'string' &&\n            typeof internalErrorResponse.status === 'number';\n    }\n}\n\nexport type ErrorFactoryMethod = (response: Response, message?: string) => RequestError;\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { StorefrontErrorResponseBody } from '../error-response-body';\n\nimport RequestError from './request-error';\n\nexport default function mapFromStorefrontErrorResponse(\n    response: Response<StorefrontErrorResponseBody>,\n    message?: string\n): RequestError<StorefrontErrorResponseBody> {\n    const { body } = response;\n\n    return new RequestError(response, {\n        message: message || body.detail || body.title,\n        errors: [{\n            code: body.code || body.type,\n            message: body.detail || body.title,\n        }],\n    });\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { OrderAction, OrderActionType } from '../order';\n\nimport BillingAddress from './billing-address';\nimport { BillingAddressAction, BillingAddressActionType } from './billing-address-actions';\nimport BillingAddressState, { BillingAddressErrorsState, BillingAddressStatusesState } from './billing-address-state';\n\nconst DEFAULT_STATE: BillingAddressState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function billingAddressReducer(\n    state: BillingAddressState = DEFAULT_STATE,\n    action: Action\n): BillingAddressState {\n    const reducer = combineReducers<BillingAddressState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: BillingAddress | undefined,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddress | undefined {\n    switch (action.type) {\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case OrderActionType.LoadOrderSucceeded:\n        return action.payload ? action.payload.billingAddress : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: BillingAddressErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddressErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return { ...errors, loadError: action.payload };\n\n    case BillingAddressActionType.UpdateBillingAddressRequested:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n        return { ...errors, updateError: undefined };\n\n    case BillingAddressActionType.UpdateBillingAddressFailed:\n        return { ...errors, updateError: action.payload };\n\n    case BillingAddressActionType.ContinueAsGuestRequested:\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n        return { ...errors, continueAsGuestError: undefined };\n\n    case BillingAddressActionType.ContinueAsGuestFailed:\n        return { ...errors, continueAsGuestError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: BillingAddressStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddressStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return { ...statuses, isLoading: true };\n\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.LoadCheckoutFailed:\n        return { ...statuses, isLoading: false };\n\n    case BillingAddressActionType.UpdateBillingAddressRequested:\n        return { ...statuses, isUpdating: true };\n\n    case BillingAddressActionType.UpdateBillingAddressFailed:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n        return { ...statuses, isUpdating: false };\n\n    case BillingAddressActionType.ContinueAsGuestRequested:\n        return { ...statuses, isContinuingAsGuest: true };\n\n    case BillingAddressActionType.ContinueAsGuestFailed:\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n        return { ...statuses, isContinuingAsGuest: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\n\nimport Config from './config';\nimport { ConfigActionType, LoadConfigAction } from './config-actions';\nimport ConfigState, { ConfigErrorsState, ConfigStatusesState } from './config-state';\n\nconst DEFAULT_STATE: ConfigState = {\n    meta: {},\n    errors: {},\n    statuses: {},\n};\n\nexport default function configReducer(\n    state: ConfigState = DEFAULT_STATE,\n    action: Action\n): ConfigState {\n    const reducer = combineReducers<ConfigState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Config | undefined,\n    action: LoadConfigAction\n): Config | undefined {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigSucceeded:\n        return action.payload ? action.payload : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ConfigErrorsState = DEFAULT_STATE.errors,\n    action: LoadConfigAction\n): ConfigErrorsState {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case ConfigActionType.LoadConfigFailed:\n        return { ...errors, loadError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ConfigStatusesState = DEFAULT_STATE.statuses,\n    action: LoadConfigAction\n): ConfigStatusesState {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigRequested:\n        return { ...statuses, isLoading: true };\n\n    case ConfigActionType.LoadConfigSucceeded:\n    case ConfigActionType.LoadConfigFailed:\n        return { ...statuses, isLoading: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\n\nimport Country from './country';\nimport { CountryActionType, LoadCountriesAction } from './country-actions';\nimport CountryState, { CountryErrorsState, CountryStatusesState } from './country-state';\n\nconst DEFAULT_STATE: CountryState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function countryReducer(\n    state: CountryState = DEFAULT_STATE,\n    action: Action\n): CountryState {\n    const reducer = combineReducers<CountryState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Country[] | undefined,\n    action: LoadCountriesAction\n): Country[] | undefined {\n    switch (action.type) {\n    case CountryActionType.LoadCountriesSucceeded:\n        return action.payload || [];\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CountryErrorsState = DEFAULT_STATE.errors,\n    action: LoadCountriesAction\n): CountryErrorsState {\n    switch (action.type) {\n    case CountryActionType.LoadCountriesRequested:\n    case CountryActionType.LoadCountriesSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case CountryActionType.LoadCountriesFailed:\n        return { ...errors, loadError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CountryStatusesState = DEFAULT_STATE.statuses,\n    action: LoadCountriesAction\n): CountryStatusesState {\n    switch (action.type) {\n    case CountryActionType.LoadCountriesRequested:\n        return { ...statuses, isLoading: true };\n\n    case CountryActionType.LoadCountriesSucceeded:\n    case CountryActionType.LoadCountriesFailed:\n        return { ...statuses, isLoading: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { PaymentAction, PaymentActionType } from './payment-actions';\nimport PaymentResponseBody from './payment-response-body';\nimport PaymentState from './payment-state';\n\nexport default function paymentReducer(state: PaymentState = {}, action: PaymentAction): PaymentState {\n    const reducer = combineReducers<PaymentState, PaymentAction>({\n        data: dataReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(data: PaymentResponseBody | undefined, action: PaymentAction): PaymentResponseBody | undefined {\n    switch (action.type) {\n    case PaymentActionType.SubmitPaymentSucceeded:\n        return action.payload;\n\n    default:\n        return data;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { mergeOrPush } from '../common/utility';\n\nimport PaymentMethod from './payment-method';\nimport { PaymentMethodAction, PaymentMethodActionType } from './payment-method-actions';\nimport PaymentMethodMeta from './payment-method-meta';\nimport PaymentMethodState, { PaymentMethodErrorsState, PaymentMethodStatusesState } from './payment-method-state';\n\nconst DEFAULT_STATE: PaymentMethodState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function paymentMethodReducer(\n    state: PaymentMethodState = DEFAULT_STATE,\n    action: Action\n): PaymentMethodState {\n    const reducer = combineReducers<PaymentMethodState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: PaymentMethod[] | undefined,\n    action: PaymentMethodAction\n): PaymentMethod[] | undefined {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n        return action.payload ?\n            mergeOrPush(data || [], action.payload, {\n                id: action.payload.id,\n                gateway: action.payload.gateway,\n            }) :\n            data;\n\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        return action.payload ? action.payload : [];\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(\n    meta: PaymentMethodMeta | undefined,\n    action: PaymentMethodAction\n): PaymentMethodMeta | undefined {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        return action.meta ? { ...meta, ...action.meta } : meta;\n\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: PaymentMethodErrorsState = DEFAULT_STATE.errors,\n    action: PaymentMethodAction\n): PaymentMethodErrorsState {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodsRequested:\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case PaymentMethodActionType.LoadPaymentMethodsFailed:\n        return { ...errors, loadError: action.payload };\n\n    case PaymentMethodActionType.LoadPaymentMethodRequested:\n    case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n        return {\n            ...errors,\n            loadMethodId: undefined,\n            loadMethodError: undefined,\n        };\n\n    case PaymentMethodActionType.LoadPaymentMethodFailed:\n        return {\n            ...errors,\n            loadMethodId: action.meta.methodId,\n            loadMethodError: action.payload,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: PaymentMethodStatusesState = DEFAULT_STATE.statuses,\n    action: PaymentMethodAction\n): PaymentMethodStatusesState {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodsRequested:\n        return { ...statuses, isLoading: true };\n\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n    case PaymentMethodActionType.LoadPaymentMethodsFailed:\n        return { ...statuses, isLoading: false };\n\n    case PaymentMethodActionType.LoadPaymentMethodRequested:\n        return {\n            ...statuses,\n            isLoadingMethod: true,\n            loadMethodId: action.meta.methodId,\n        };\n\n    case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n    case PaymentMethodActionType.LoadPaymentMethodFailed:\n        return {\n            ...statuses,\n            isLoadingMethod: false,\n            loadMethodId: undefined,\n        };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\n\nimport { PaymentStrategyAction, PaymentStrategyActionType } from './payment-strategy-actions';\nimport PaymentStrategyState, { DEFAULT_STATE, PaymentStrategyDataState, PaymentStrategyErrorsState, PaymentStrategyStatusesState } from './payment-strategy-state';\n\nexport default function paymentStrategyReducer(\n    state: PaymentStrategyState = DEFAULT_STATE,\n    action: Action\n): PaymentStrategyState {\n    const reducer = combineReducers<PaymentStrategyState, PaymentStrategyAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: PaymentStrategyDataState = DEFAULT_STATE.data,\n    action: PaymentStrategyAction\n): PaymentStrategyDataState {\n    switch (action.type) {\n    case PaymentStrategyActionType.InitializeSucceeded:\n        return {\n            ...data,\n            [action.meta && action.meta.methodId]: {\n                isInitialized: true,\n            },\n        };\n\n    case PaymentStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...data,\n            [action.meta && action.meta.methodId]: {\n                isInitialized: false,\n            },\n        };\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: PaymentStrategyErrorsState = DEFAULT_STATE.errors,\n    action: PaymentStrategyAction\n): PaymentStrategyErrorsState {\n    switch (action.type) {\n    case PaymentStrategyActionType.InitializeRequested:\n    case PaymentStrategyActionType.InitializeSucceeded:\n        return {\n            ...errors,\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.InitializeFailed:\n        return {\n            ...errors,\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.DeinitializeRequested:\n    case PaymentStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...errors,\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.DeinitializeFailed:\n        return {\n            ...errors,\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.ExecuteRequested:\n    case PaymentStrategyActionType.ExecuteSucceeded:\n        return {\n            ...errors,\n            executeError: undefined,\n            executeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.ExecuteFailed:\n        return {\n            ...errors,\n            executeError: action.payload,\n            executeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.FinalizeRequested:\n    case PaymentStrategyActionType.FinalizeSucceeded:\n        return {\n            ...errors,\n            finalizeError: undefined,\n            finalizeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.FinalizeFailed:\n        return {\n            ...errors,\n            finalizeError: action.payload,\n            finalizeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.WidgetInteractionStarted:\n    case PaymentStrategyActionType.WidgetInteractionFinished:\n        return {\n            ...errors,\n            widgetInteractionError: undefined,\n            widgetInteractionMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.WidgetInteractionFailed:\n        return {\n            ...errors,\n            widgetInteractionError: action.payload,\n            widgetInteractionMethodId: action.meta.methodId,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: PaymentStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: PaymentStrategyAction\n): PaymentStrategyStatusesState {\n    switch (action.type) {\n    case PaymentStrategyActionType.InitializeRequested:\n        return {\n            ...statuses,\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.InitializeFailed:\n    case PaymentStrategyActionType.InitializeSucceeded:\n        return {\n            ...statuses,\n            isInitializing: false,\n            initializeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.DeinitializeRequested:\n        return {\n            ...statuses,\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.DeinitializeFailed:\n    case PaymentStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...statuses,\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.ExecuteRequested:\n        return {\n            ...statuses,\n            isExecuting: true,\n            executeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.ExecuteFailed:\n    case PaymentStrategyActionType.ExecuteSucceeded:\n        return {\n            ...statuses,\n            isExecuting: false,\n            executeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.FinalizeRequested:\n        return {\n            ...statuses,\n            isFinalizing: true,\n            finalizeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.FinalizeFailed:\n    case PaymentStrategyActionType.FinalizeSucceeded:\n        return {\n            ...statuses,\n            isFinalizing: false,\n            finalizeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.WidgetInteractionStarted:\n    return {\n        ...statuses,\n        isWidgetInteracting: true,\n        widgetInteractionMethodId: action.meta.methodId,\n     };\n\n    case PaymentStrategyActionType.WidgetInteractionFinished:\n    case PaymentStrategyActionType.WidgetInteractionFailed:\n     return {\n        ...statuses,\n        isWidgetInteracting: false,\n        widgetInteractionMethodId: undefined,\n     };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../../common/error';\n\nimport Instrument from './instrument';\nimport { InstrumentAction, InstrumentActionType } from './instrument-actions';\nimport InstrumentState, { InstrumentErrorState, InstrumentMeta, InstrumentStatusState } from './instrument-state';\n\nconst DEFAULT_STATE = {\n    data: [],\n    errors: {},\n    statuses: {},\n};\n\nexport default function instrumentReducer(\n    state: InstrumentState = DEFAULT_STATE,\n    action: Action\n): InstrumentState {\n    const reducer = combineReducers<InstrumentState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Instrument[] = DEFAULT_STATE.data,\n    action: InstrumentAction\n): Instrument[] {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n        return action.payload ? action.payload.vaultedInstruments : [];\n\n    case InstrumentActionType.DeleteInstrumentSucceeded:\n        return data.filter(instrument =>\n            instrument.bigpayToken !== action.meta.instrumentId\n        );\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(\n    meta: InstrumentMeta | undefined,\n    action: InstrumentAction\n): InstrumentMeta | undefined {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n    case InstrumentActionType.DeleteInstrumentSucceeded:\n        return { ...meta, ...action.meta };\n\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: InstrumentErrorState = DEFAULT_STATE.errors,\n    action: InstrumentAction\n): InstrumentErrorState {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsRequested:\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case InstrumentActionType.DeleteInstrumentRequested:\n    case InstrumentActionType.DeleteInstrumentSucceeded:\n        return {\n            ...errors,\n            deleteError: undefined,\n            failedInstrument: undefined,\n        };\n\n    case InstrumentActionType.LoadInstrumentsFailed:\n        return { ...errors, loadError: action.payload };\n\n    case InstrumentActionType.DeleteInstrumentFailed:\n        return {\n            ...errors,\n            deleteError: action.payload,\n            failedInstrument: action.meta.instrumentId,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: InstrumentStatusState = DEFAULT_STATE.statuses,\n    action: InstrumentAction\n): InstrumentStatusState {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsRequested:\n        return { ...statuses, isLoading: true };\n\n    case InstrumentActionType.DeleteInstrumentRequested:\n        return {\n            ...statuses,\n            isDeleting: true,\n            deletingInstrument: action.meta.instrumentId,\n        };\n\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n    case InstrumentActionType.LoadInstrumentsFailed:\n        return { ...statuses, isLoading: false };\n\n    case InstrumentActionType.DeleteInstrumentSucceeded:\n    case InstrumentActionType.DeleteInstrumentFailed:\n        return {\n            ...statuses,\n            isDeleting: false,\n            deletingInstrument: undefined,\n        };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport RemoteCheckout from './remote-checkout';\nimport { RemoteCheckoutAction, RemoteCheckoutActionType } from './remote-checkout-actions';\nimport RemoteCheckoutState, { RemoteCheckoutStateData } from './remote-checkout-state';\n\nconst DEFAULT_STATE: RemoteCheckoutState = {\n    data: {},\n};\n\nexport default function remoteCheckoutReducer(\n    state: RemoteCheckoutState = DEFAULT_STATE,\n    action: RemoteCheckoutAction\n): RemoteCheckoutState {\n    if (!action.meta || !action.meta.methodId) {\n        return state;\n    }\n\n    const reducer = combineReducers<RemoteCheckoutState>({\n        data: combineReducers<RemoteCheckoutStateData>({\n            [action.meta.methodId]: dataReducer,\n        }),\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: RemoteCheckout = DEFAULT_STATE.data,\n    action: RemoteCheckoutAction\n): RemoteCheckout {\n    switch (action.type) {\n    case RemoteCheckoutActionType.InitializeRemoteBillingSucceeded:\n        return action.payload ? { ...data, billing: action.payload.billing } : data;\n\n    case RemoteCheckoutActionType.InitializeRemoteShippingSucceeded:\n        return action.payload ? { ...data, shipping: action.payload.shipping } : data;\n\n    case RemoteCheckoutActionType.LoadRemoteSettingsSucceeded:\n        return { ...data, settings: action.payload };\n\n    case RemoteCheckoutActionType.UpdateRemoteCheckout:\n        return { ...data, ...action.payload };\n\n    default:\n        return data;\n    }\n}\n","import { createDataStore } from '@bigcommerce/data-store';\n\nimport { createRequestErrorFactory } from '../common/error';\n\nimport CheckoutStore, { CheckoutStoreOptions } from './checkout-store';\nimport CheckoutStoreState from './checkout-store-state';\nimport createActionTransformer from './create-action-transformer';\nimport createCheckoutStoreReducer from './create-checkout-store-reducer';\nimport createInternalCheckoutSelectors from './create-internal-checkout-selectors';\n\nexport default function createCheckoutStore(\n    initialState: Partial<CheckoutStoreState> = {},\n    options?: CheckoutStoreOptions\n): CheckoutStore {\n    const actionTransformer = createActionTransformer(createRequestErrorFactory());\n    const stateTransformer = (state: CheckoutStoreState) => createInternalCheckoutSelectors(state);\n\n    return createDataStore(\n        createCheckoutStoreReducer(),\n        initialState,\n        { actionTransformer, stateTransformer, ...options }\n    );\n}\n","import { PaymentMethodInvalidError } from '../../payment/errors';\n\nimport { UnrecoverableError } from './errors';\nimport RequestErrorFactory from './request-error-factory';\n\nexport default function createRequestErrorFactory(): RequestErrorFactory {\n    const factory = new RequestErrorFactory();\n\n    const unrecoverableErrorTypes = [\n        'catalog_only',\n        'empty_cart',\n        'invalid_order_id',\n        'invalid_order_token',\n        'missing_order_token',\n        'missing_provider_token',\n        'missing_shipping_method',\n        'order_completion_error',\n        'order_could_not_be_finalized_error',\n        'order_create_failed',\n        'provider_fatal_error',\n        'provider_setup_error',\n        'stock_too_low',\n    ];\n\n    unrecoverableErrorTypes.forEach(type => {\n        factory.register(type, (response, message) => new UnrecoverableError(response, message));\n    });\n\n    factory.register('invalid_payment_provider', response => new PaymentMethodInvalidError(response));\n    factory.register('payment_config_not_found', response => new PaymentMethodInvalidError(response));\n\n    return factory;\n}\n","import { combineReducers, Action, Reducer } from '@bigcommerce/data-store';\n\nimport { billingAddressReducer } from '../billing';\nimport { cartReducer } from '../cart';\nimport { checkoutButtonReducer } from '../checkout-buttons';\nimport { configReducer } from '../config';\nimport { couponReducer, giftCertificateReducer } from '../coupon';\nimport { customerReducer, customerStrategyReducer } from '../customer';\nimport { countryReducer } from '../geography';\nimport { orderReducer } from '../order';\nimport { paymentMethodReducer, paymentReducer, paymentStrategyReducer } from '../payment';\nimport { instrumentReducer } from '../payment/instrument';\nimport { remoteCheckoutReducer } from '../remote-checkout';\nimport { consignmentReducer, shippingCountryReducer, shippingStrategyReducer } from '../shipping';\n\nimport checkoutReducer from './checkout-reducer';\nimport CheckoutStoreState from './checkout-store-state';\n\nexport default function createCheckoutStoreReducer(): Reducer<CheckoutStoreState, Action> {\n    return combineReducers({\n        billingAddress: billingAddressReducer,\n        cart: cartReducer,\n        checkout: checkoutReducer,\n        checkoutButton: checkoutButtonReducer,\n        config: configReducer,\n        consignments: consignmentReducer,\n        countries: countryReducer,\n        coupons: couponReducer,\n        customer: customerReducer,\n        customerStrategies: customerStrategyReducer,\n        giftCertificates: giftCertificateReducer,\n        instruments: instrumentReducer,\n        order: orderReducer,\n        payment: paymentReducer,\n        paymentMethods: paymentMethodReducer,\n        paymentStrategies: paymentStrategyReducer,\n        remoteCheckout: remoteCheckoutReducer,\n        shippingCountries: shippingCountryReducer,\n        shippingStrategies: shippingStrategyReducer,\n    });\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { InternalErrorResponseBody } from '../../common/error';\nimport { RequestError } from '../../common/error/errors';\n\nexport default class CheckoutNotAvailableError extends RequestError {\n    constructor(response: Response<InternalErrorResponseBody>) {\n        super(response, { message: response.body.title });\n\n        this.type = 'checkout_not_available';\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { joinIncludes, ContentType, RequestOptions } from '../common/http-request';\n\nimport Checkout, { CheckoutRequestBody } from './checkout';\nimport CHECKOUT_DEFAULT_INCLUDES from './checkout-default-includes';\nimport CheckoutParams from './checkout-params';\nimport { CheckoutNotAvailableError } from './errors';\n\nexport default class CheckoutRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadCheckout(id: string, { params, timeout }: RequestOptions<CheckoutParams> = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkout/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.get(url, {\n            params: {\n                include: joinIncludes([\n                    ...CHECKOUT_DEFAULT_INCLUDES,\n                    ...(params && params.include || []),\n                ]),\n            },\n            headers,\n            timeout,\n        }).catch(error => {\n            if (error.status >= 400 && error.status < 500) {\n                throw new CheckoutNotAvailableError(error);\n            }\n\n            throw error;\n        });\n    }\n\n    updateCheckout(id: string, body: CheckoutRequestBody, { params, timeout }: RequestOptions<CheckoutParams> = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkout/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.put(url, {\n            params: {\n                include: joinIncludes([\n                    ...CHECKOUT_DEFAULT_INCLUDES,\n                    ...(params && params.include || []),\n                ]),\n            },\n            body,\n            headers,\n            timeout,\n        });\n    }\n}\n","import { identity, isEqual, pickBy } from 'lodash';\n\nimport Address from './address';\n\nexport default function isAddressEqual(addressA: Partial<Address>, addressB: Partial<Address>): boolean {\n    return isEqual(normalize(addressA), normalize(addressB));\n}\n\nfunction normalize(address: Partial<Address>): Partial<Address> {\n    return pickBy({\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        address1: address.address1,\n        address2: address.address2,\n        city: address.city,\n        stateOrProvince: address.stateOrProvince,\n        countryCode: address.countryCode,\n        postalCode: address.postalCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    }, identity);\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { GooglePayCreator } from '../googlepay';\n\nimport {\n    BraintreeClientCreator,\n    BraintreeDataCollectorCreator,\n    BraintreeHostWindow,\n    BraintreePaypalCheckoutCreator,\n    BraintreePaypalCreator,\n    BraintreeThreeDSecureCreator,\n    BraintreeVisaCheckoutCreator,\n} from './braintree';\n\nexport default class BraintreeScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: BraintreeHostWindow = window\n    ) {}\n\n    loadClient(): Promise<BraintreeClientCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/client.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.client) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.client;\n            });\n    }\n\n    load3DS(): Promise<BraintreeThreeDSecureCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/three-d-secure.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.threeDSecure) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.threeDSecure;\n            });\n    }\n\n    loadDataCollector(): Promise<BraintreeDataCollectorCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/data-collector.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.dataCollector) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.dataCollector;\n            });\n    }\n\n    loadPaypal(): Promise<BraintreePaypalCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/paypal.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.paypal) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.paypal;\n            });\n    }\n\n    loadPaypalCheckout(): Promise<BraintreePaypalCheckoutCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/paypal-checkout.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.paypalCheckout) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.paypalCheckout;\n            });\n    }\n\n    loadVisaCheckout(): Promise<BraintreeVisaCheckoutCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/visa-checkout.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.visaCheckout) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.visaCheckout;\n            });\n    }\n\n    loadGooglePayment(): Promise<GooglePayCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/google-payment.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.googlePayment) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.googlePayment;\n            });\n    }\n}\n","import { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\n\nimport {\n    BraintreeClient,\n    BraintreeDataCollector,\n    BraintreeModule,\n    BraintreePaypal,\n    BraintreePaypalCheckout,\n    BraintreeThreeDSecure,\n    BraintreeVisaCheckout,\n    GooglePayBraintreeSDK,\n} from './braintree';\nimport BraintreeScriptLoader from './braintree-script-loader';\n\nexport default class BraintreeSDKCreator {\n    private _client?: Promise<BraintreeClient>;\n    private _3ds?: Promise<BraintreeThreeDSecure>;\n    private _paypal?: Promise<BraintreePaypal>;\n    private _paypalCheckout?: Promise<BraintreePaypalCheckout>;\n    private _clientToken?: string;\n    private _visaCheckout?: Promise<BraintreeVisaCheckout>;\n    private _dataCollectors: {\n        default?: Promise<BraintreeDataCollector>,\n        paypal?: Promise<BraintreeDataCollector>,\n    } = {};\n    private _googlePay?: Promise<GooglePayBraintreeSDK>;\n\n    constructor(\n        private _braintreeScriptLoader: BraintreeScriptLoader\n    ) {}\n\n    initialize(clientToken: string) {\n        this._clientToken = clientToken;\n    }\n\n    getClient(): Promise<BraintreeClient> {\n        if (!this._clientToken) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!this._client) {\n            this._client = this._braintreeScriptLoader.loadClient()\n                .then(client => client.create({ authorization: this._clientToken }));\n        }\n\n        return this._client;\n    }\n\n    getPaypal(): Promise<BraintreePaypal> {\n        if (!this._paypal) {\n            this._paypal = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadPaypal(),\n            ])\n            .then(([client, paypal]) => paypal.create({ client }));\n        }\n\n        return this._paypal;\n    }\n\n    getPaypalCheckout(): Promise<BraintreePaypalCheckout> {\n        if (!this._paypalCheckout) {\n            this._paypalCheckout = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadPaypalCheckout(),\n            ])\n                .then(([client, paypalCheckout]) => paypalCheckout.create({ client }));\n        }\n\n        return this._paypalCheckout;\n    }\n\n    get3DS(): Promise<BraintreeThreeDSecure> {\n        if (!this._3ds) {\n            this._3ds = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.load3DS(),\n            ])\n            .then(([client, threeDSecure]) => threeDSecure.create({ client }));\n        }\n\n        return this._3ds;\n    }\n\n    getDataCollector(options?: { paypal: boolean }): Promise<BraintreeDataCollector> {\n        const cacheKey = options && options.paypal ? 'paypal' : 'default';\n        let cached = this._dataCollectors[cacheKey];\n\n        if (!cached) {\n            cached = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadDataCollector(),\n            ])\n            .then(([client, dataCollector]) => dataCollector.create({ client, kount: true, ...options }))\n            .catch(error => {\n                if (error && error.code === 'DATA_COLLECTOR_KOUNT_NOT_ENABLED') {\n                    return { deviceData: undefined, teardown: () => Promise.resolve() };\n                }\n\n                throw error;\n            });\n\n            this._dataCollectors[cacheKey] = cached;\n        }\n\n        return cached;\n    }\n\n    getVisaCheckout(): Promise<BraintreeVisaCheckout> {\n        if (!this._visaCheckout) {\n            this._visaCheckout = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadVisaCheckout(),\n            ])\n            .then(([client, visaCheckout]) => visaCheckout.create({ client }));\n        }\n\n        return this._visaCheckout;\n    }\n\n    getGooglePaymentComponent(): Promise<GooglePayBraintreeSDK> {\n        if (!this._googlePay) {\n            this._googlePay = Promise.all ([\n                this.getClient(),\n                this._braintreeScriptLoader.loadGooglePayment(),\n            ])\n                .then(([client, googlePay]) => googlePay.create({ client }));\n        }\n\n        return this._googlePay;\n    }\n\n    teardown(): Promise<void> {\n        return Promise.all([\n            this._teardown(this._3ds),\n            this._teardown(this._dataCollectors.default),\n            this._teardown(this._dataCollectors.paypal),\n            this._teardown(this._visaCheckout),\n            this._teardown(this._googlePay),\n        ]).then(() => {\n            this._3ds = undefined;\n            this._visaCheckout = undefined;\n            this._dataCollectors = {};\n            this._googlePay = undefined;\n        });\n    }\n\n    private _teardown(module?: Promise<BraintreeModule>) {\n        return module ?\n            module.then(mod => mod.teardown()) :\n            Promise.resolve();\n    }\n}\n","import Coupon from './coupon';\nimport InternalCoupon from './internal-coupon';\n\nconst couponTypes = [\n    'per_item_discount',\n    'percentage_discount',\n    'per_total_discount',\n    'shipping_discount',\n    'free_shipping',\n];\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalCoupon(coupon: Coupon): InternalCoupon {\n    return {\n        code: coupon.code,\n        discount: coupon.displayName,\n        discountType: couponTypes.indexOf(coupon.couponType),\n    };\n}\n","module.exports = require(\"iframe-resizer\");","import { isBillingAddressLike } from '../billing';\nimport BillingAddress from '../billing/billing-address';\nimport { Consignment } from '../shipping';\n\nimport Address from './address';\nimport InternalAddress from './internal-address';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalAddress(address: Address | BillingAddress, consignments?: Consignment[]): InternalAddress {\n    let addressId;\n\n    if (isBillingAddressLike(address)) {\n        addressId = address.id;\n    } else if (consignments && consignments.length) {\n        addressId = consignments[0].id;\n    }\n\n    return {\n        id: addressId,\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        addressLine1: address.address1,\n        addressLine2: address.address2,\n        city: address.city,\n        province: address.stateOrProvince,\n        provinceCode: address.stateOrProvinceCode,\n        postCode: address.postalCode,\n        country: address.country,\n        countryCode: address.countryCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    };\n}\n","import Address from '../address/address';\n\nimport BillingAddress from './billing-address';\n\nexport default function isBillingAddressLike(address: Address): address is BillingAddress {\n    const billingAddress = address as BillingAddress;\n\n    return typeof billingAddress.id !== 'undefined';\n}\n","import { uniq } from 'lodash';\n\nexport default function joinIncludes(includes: string[]): string {\n    return uniq(includes).join(',');\n}\n","import StandardError from './standard-error';\n\nexport enum NotInitializedErrorType {\n    CheckoutButtonNotInitialized,\n    CustomerNotInitialized,\n    PaymentNotInitialized,\n    ShippingNotInitialized,\n}\n\nexport default class NotInitializedError extends StandardError {\n    constructor(\n        public subtype: NotInitializedErrorType\n    ) {\n        super(getErrorMessage(subtype));\n\n        this.type = 'not_initialized';\n    }\n}\n\nfunction getErrorMessage(type: NotInitializedErrorType): string {\n    switch (type) {\n    case NotInitializedErrorType.CustomerNotInitialized:\n        return 'Unable to proceed because the customer step of checkout has not been initialized.';\n\n    case NotInitializedErrorType.PaymentNotInitialized:\n        return 'Unable to proceed because the payment step of checkout has not been initialized.';\n\n    case NotInitializedErrorType.ShippingNotInitialized:\n        return 'Unable to proceed because the shipping step of checkout has not been initialized.';\n\n    default:\n        return 'Unable to proceed because the required component has not been initialized.';\n    }\n}\n","import { InvalidArgumentError } from '../error/errors';\n\nimport Url from './url';\n\nexport default function parseUrl(url: string): Url {\n    if (!/^(https?:)?\\/\\//.test(url)) {\n        throw new InvalidArgumentError('The provided URL must be absolute.');\n    }\n\n    // new URL() is not supported in IE11, use anchor tag instead\n    const anchor = document.createElement('a');\n\n    anchor.href = url;\n\n    return {\n        hash: anchor.hash,\n        hostname: anchor.hostname,\n        href: anchor.href,\n        origin: anchor.origin,\n        pathname: anchor.pathname,\n        port: anchor.port,\n        protocol: anchor.protocol,\n        search: anchor.search,\n    };\n}\n","import cacheAction from './cache-action';\nimport isActionOptions from './is-action-options';\n\nexport default function cachableActionDecorator<TMethod extends (...args: any[]) => any>(\n    target: object,\n    key: string,\n    descriptor: TypedPropertyDescriptor<TMethod>\n): TypedPropertyDescriptor<TMethod> {\n    const memoizedMethods = new WeakMap<object, { [key: string]: TMethod }>();\n\n    function decorateMethod(this: object, method: TMethod): TMethod {\n        return ((...args: any[]) => {\n            const lastArg = args[args.length - 1];\n            const { useCache } = isActionOptions(lastArg) ? lastArg : { useCache: false };\n\n            if (!useCache) {\n                return method.call(this, ...args);\n            }\n\n            const instanceMethods = memoizedMethods.get(this) || {};\n\n            if (!memoizedMethods.get(this)) {\n                memoizedMethods.set(this, instanceMethods);\n            }\n\n            if (!instanceMethods[key]) {\n                instanceMethods[key] = cacheAction(method);\n            }\n\n            return instanceMethods[key].call(this, ...args);\n        }) as TMethod;\n    }\n\n    return {\n        get() {\n            if (typeof descriptor.value !== 'function') {\n                return descriptor.value;\n            }\n\n            const value = decorateMethod.call(this, descriptor.value);\n\n            Object.defineProperty(this, key, { ...descriptor, value });\n\n            return value;\n        },\n    };\n}\n","import ActionOptions from './action-options';\n\nexport default function isActionOptions(param: any): param is ActionOptions {\n    return param && typeof param.useCache === 'boolean';\n}\n","import { Action, ThunkAction } from '@bigcommerce/data-store';\nimport { memoize } from 'lodash';\nimport { from, Observable } from 'rxjs';\nimport { shareReplay } from 'rxjs/operators';\n\nimport { CacheKeyResolver } from '../utility';\n\nexport default function cacheAction<TFunction extends CreateActionFn>(\n    fn: TFunction\n): TFunction {\n    const resolver = new CacheKeyResolver();\n\n    function decoratedFn(this: any, ...args: any[]) {\n        const action = fn.call(this, ...args);\n\n        if (action instanceof Observable) {\n            return from(action).pipe(shareReplay());\n        }\n\n        if (typeof action === 'function') {\n            return memoize(store => from(action(store)).pipe(shareReplay()));\n        }\n\n        return action;\n    }\n\n    return memoize(\n        decoratedFn as TFunction,\n        (...args) => resolver.getKey(...args)\n    );\n}\n\ntype CreateActionFn = (...args: any[]) => Observable<Action> | ThunkAction<Action> | Action;\n","import { deepFreeze } from '@bigcommerce/data-store';\n\n// tslint:disable-next-line:ban-types\ntype FunctionProperties<T> = { [K in keyof T]: T[K] extends Function ? T[K] : never };\n\nexport default function createFreezeProxy<T extends object>(target: T): T {\n    return createProxy(target, (target, name) =>\n        (...args: any[]) => deepFreeze(target[name].call(target, ...args))\n    );\n}\n\nexport function createFreezeProxies<T extends { [key: string]: object }>(map: T): T {\n    return Object.keys(map)\n        .reduce((result, key) => {\n            result[key] = createFreezeProxy(map[key]);\n\n            return result;\n        }, {} as T);\n}\n\nfunction createProxy<T extends object>(target: T, trap: (target: FunctionProperties<T>, name: keyof FunctionProperties<T>, proxy: T) => any): T {\n    const proxy = Object.create(target);\n\n    traversePrototypeOf(target, prototype => {\n        Object.getOwnPropertyNames(prototype)\n            .forEach(name => {\n                if (name === 'constructor' || typeof proxy[name] !== 'function' || name.charAt(0) === '_') {\n                    return;\n                }\n\n                proxy[name] = trap(target as FunctionProperties<T>, name as keyof T, proxy);\n            });\n    });\n\n    return proxy;\n}\n\nfunction traversePrototypeOf(target: object, iteratee: (prototype: object) => void): void {\n    let prototype = Object.getPrototypeOf(target);\n\n    while (prototype) {\n        iteratee(prototype);\n\n        prototype = Object.getPrototypeOf(prototype);\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { Registry } from '../common/registry';\n\nimport CustomerCredentials from './customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from './customer-request-options';\nimport {\n    CustomerStrategyActionType,\n    CustomerStrategyDeinitializeAction,\n    CustomerStrategyInitializeAction,\n    CustomerStrategySignInAction,\n    CustomerStrategySignOutAction,\n    CustomerStrategyWidgetAction,\n} from './customer-strategy-actions';\nimport { CustomerStrategy } from './strategies';\n\nexport default class CustomerStrategyActionCreator {\n    constructor(\n        private _strategyRegistry: Registry<CustomerStrategy>\n    ) {}\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Observable<CustomerStrategySignInAction> {\n        return Observable.create((observer: Observer<CustomerStrategySignInAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.SignInRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .signIn(credentials, options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.SignInSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.SignInFailed, error, meta));\n                });\n        });\n    }\n\n    signOut(options?: CustomerRequestOptions): Observable<CustomerStrategySignOutAction> {\n        return Observable.create((observer: Observer<CustomerStrategySignOutAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.SignOutRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .signOut(options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.SignOutSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.SignOutFailed, error, meta));\n                });\n        });\n    }\n\n    initialize(options?: CustomerInitializeOptions): ThunkAction<CustomerStrategyInitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<CustomerStrategyInitializeAction>) => {\n            const state = store.getState();\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            if (methodId && state.customerStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(CustomerStrategyActionType.InitializeRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .initialize(options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.InitializeSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.InitializeFailed, error, meta));\n                });\n        });\n    }\n\n    deinitialize(options?: CustomerRequestOptions): ThunkAction<CustomerStrategyDeinitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<CustomerStrategyDeinitializeAction>) => {\n            const state = store.getState();\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            if (methodId && !state.customerStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(CustomerStrategyActionType.DeinitializeRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .deinitialize(options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.DeinitializeSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.DeinitializeFailed, error, meta));\n                });\n        });\n    }\n\n    widgetInteraction(method: () => Promise<any>, options?: CustomerRequestOptions): Observable<CustomerStrategyWidgetAction> {\n        return Observable.create((observer: Observer<CustomerStrategyWidgetAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.WidgetInteractionStarted, undefined, meta));\n\n            method().then(() => {\n                observer.next(createAction(CustomerStrategyActionType.WidgetInteractionFinished, undefined, meta));\n                observer.complete();\n            })\n            .catch(error => {\n                observer.error(createErrorAction(CustomerStrategyActionType.WidgetInteractionFailed, error, meta));\n            });\n        });\n    }\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, from, of } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\n\nimport { CheckoutActionCreator, InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { RequestOptions } from '../common/http-request';\n\nimport { CustomerActionType, SignInCustomerAction, SignOutCustomerAction } from './customer-actions';\nimport CustomerCredentials from './customer-credentials';\nimport CustomerRequestSender from './customer-request-sender';\n\nexport default class CustomerActionCreator {\n    constructor(\n        private _customerRequestSender: CustomerRequestSender,\n        private _checkoutActionCreator: CheckoutActionCreator\n    ) {}\n\n    signInCustomer(\n        credentials: CustomerCredentials,\n        options?: RequestOptions\n    ): ThunkAction<SignInCustomerAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(CustomerActionType.SignInCustomerRequested)),\n            from(this._customerRequestSender.signInCustomer(credentials, options))\n                .pipe(\n                    switchMap(({ body }) => concat(\n                        this._checkoutActionCreator.loadCurrentCheckout(options)(store),\n                        of(createAction(CustomerActionType.SignInCustomerSucceeded, body.data))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(CustomerActionType.SignInCustomerFailed, error))\n        );\n    }\n\n    signOutCustomer(\n        options?: RequestOptions\n    ): ThunkAction<SignOutCustomerAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(CustomerActionType.SignOutCustomerRequested)),\n            from(this._customerRequestSender.signOutCustomer(options))\n                .pipe(\n                    switchMap(({ body }) => concat(\n                        this._checkoutActionCreator.loadCurrentCheckout(options)(store),\n                        of(createAction(CustomerActionType.SignOutCustomerSucceeded, body.data))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(CustomerActionType.SignOutCustomerFailed, error))\n        );\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport CustomerCredentials from './customer-credentials';\nimport { InternalCustomerResponseBody } from './internal-customer-responses';\n\nexport default class CustomerRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    signInCustomer(credentials: CustomerCredentials, { timeout }: RequestOptions = {}): Promise<Response<InternalCustomerResponseBody>> {\n        const url = '/internalapi/v1/checkout/customer';\n\n        return this._requestSender.post(url, { timeout, body: credentials });\n    }\n\n    signOutCustomer({ timeout }: RequestOptions = {}): Promise<Response<InternalCustomerResponseBody>> {\n        const url = '/internalapi/v1/checkout/customer';\n\n        return this._requestSender.delete(url, { timeout });\n    }\n}\n","import { selector } from '../common/selector';\n\nimport Cart from './cart';\nimport CartState from './cart-state';\n\n@selector\nexport default class CartSelector {\n    constructor(\n        private _cart: CartState\n    ) {}\n\n    getCart(): Cart | undefined {\n        return this._cart.data;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._cart.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return !!this._cart.statuses.isLoading;\n    }\n}\n","import { RequestError } from '../common/error/errors';\nimport { selector } from '../common/selector';\n\nimport Coupon from './coupon';\nimport CouponState from './coupon-state';\n\n@selector\nexport default class CouponSelector {\n    constructor(\n        private _coupon: CouponState\n    ) {}\n\n    getCoupons(): Coupon[] | undefined {\n        return this._coupon.data;\n    }\n\n    getRemoveError(): RequestError | undefined {\n        return this._coupon.errors.removeCouponError;\n    }\n\n    getApplyError(): RequestError | undefined {\n        return this._coupon.errors.applyCouponError;\n    }\n\n    isApplying(): boolean {\n        return !!this._coupon.statuses.isApplyingCoupon;\n    }\n\n    isRemoving(): boolean {\n        return !!this._coupon.statuses.isRemovingCoupon;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport Customer from './customer';\nimport CustomerState from './customer-state';\n\n@selector\nexport default class CustomerSelector {\n    constructor(\n        private _customer: CustomerState\n    ) {}\n\n    getCustomer(): Customer | undefined {\n        return this._customer.data;\n    }\n}\n","import CustomerStrategyState from './customer-strategy-state';\n\nexport default class CustomerStrategySelector {\n    constructor(\n        private _customerStrategies: CustomerStrategyState\n    ) {}\n\n    getSignInError(methodId?: string): Error | undefined {\n        if (methodId && this._customerStrategies.errors.signInMethodId !== methodId) {\n            return;\n        }\n\n        return this._customerStrategies.errors.signInError;\n    }\n\n    getSignOutError(methodId?: string): Error | undefined {\n        if (methodId && this._customerStrategies.errors.signOutMethodId !== methodId) {\n            return;\n        }\n\n        return this._customerStrategies.errors.signOutError;\n    }\n\n    getInitializeError(methodId?: string): Error | undefined {\n        if (methodId && this._customerStrategies.errors.initializeMethodId !== methodId) {\n            return;\n        }\n\n        return this._customerStrategies.errors.initializeError;\n    }\n\n    getWidgetInteractionError(methodId?: string): Error | undefined {\n        if (methodId && this._customerStrategies.errors.widgetInteractionMethodId !== methodId) {\n            return;\n        }\n\n        return this._customerStrategies.errors.widgetInteractionError;\n    }\n\n    isSigningIn(methodId?: string): boolean {\n        if (methodId && this._customerStrategies.statuses.signInMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._customerStrategies.statuses.isSigningIn;\n    }\n\n    isSigningOut(methodId?: string): boolean {\n        if (methodId && this._customerStrategies.statuses.signOutMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._customerStrategies.statuses.isSigningOut;\n    }\n\n    isInitializing(methodId?: string): boolean {\n        if (methodId && this._customerStrategies.statuses.initializeMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._customerStrategies.statuses.isInitializing;\n    }\n\n    isInitialized(methodId: string): boolean {\n        return !!(\n            this._customerStrategies.data[methodId] &&\n            this._customerStrategies.data[methodId].isInitialized\n        );\n    }\n\n    isWidgetInteracting(methodId?: string): boolean {\n        if (methodId && this._customerStrategies.statuses.widgetInteractionMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._customerStrategies.statuses.isWidgetInteracting;\n    }}\n","import { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\nimport { selector } from '../common/selector';\n\nimport GiftCertificate from './gift-certificate';\nimport GiftCertificateState from './gift-certificate-state';\n\n@selector\nexport default class GiftCertificateSelector {\n    constructor(\n        private _giftCertificate: GiftCertificateState\n    ) {}\n\n    getGiftCertificates(): GiftCertificate[] | undefined {\n        return this._giftCertificate.data;\n    }\n\n    getRemoveError(): RequestError<StorefrontErrorResponseBody> | undefined {\n        return this._giftCertificate.errors.removeGiftCertificateError;\n    }\n\n    getApplyError(): RequestError<StorefrontErrorResponseBody> | undefined {\n        return this._giftCertificate.errors.applyGiftCertificateError;\n    }\n\n    isApplying(): boolean {\n        return !!this._giftCertificate.statuses.isApplyingGiftCertificate;\n    }\n\n    isRemoving(): boolean {\n        return !!this._giftCertificate.statuses.isRemovingGiftCertificate;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport { Address } from '../address';\n\nimport ConsignmentState from './consignment-state';\n\n@selector\nexport default class ShippingAddressSelector {\n    constructor(\n        private _consignments: ConsignmentState\n    ) {}\n\n    getShippingAddress(): Address | undefined {\n        const consignments = this._consignments.data;\n\n        if (!consignments || !consignments[0]) {\n            return;\n        }\n\n        return consignments[0].shippingAddress;\n    }\n}\n","import { selector } from '../common/selector';\nimport { Country } from '../geography';\n\nimport ShippingCountryState from './shipping-country-state';\n\n@selector\nexport default class ShippingCountrySelector {\n    constructor(\n        private _shippingCountries: ShippingCountryState\n    ) {}\n\n    getShippingCountries(): Country[] | undefined {\n        return this._shippingCountries.data;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._shippingCountries.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return !!this._shippingCountries.statuses.isLoading;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport ShippingStrategyState from './shipping-strategy-state';\n\n@selector\nexport default class ShippingStrategySelector {\n    constructor(\n        private _shippingStrategies: ShippingStrategyState\n    ) {}\n\n    getUpdateAddressError(methodId?: string): Error | undefined {\n        if (methodId && this._shippingStrategies.errors.updateAddressMethodId !== methodId) {\n            return;\n        }\n\n        return this._shippingStrategies.errors.updateAddressError;\n    }\n\n    getSelectOptionError(methodId?: string): Error | undefined {\n        if (methodId && this._shippingStrategies.errors.selectOptionMethodId !== methodId) {\n            return;\n        }\n\n        return this._shippingStrategies.errors.selectOptionError;\n    }\n\n    getInitializeError(methodId?: string): Error | undefined {\n        if (methodId && this._shippingStrategies.errors.initializeMethodId !== methodId) {\n            return;\n        }\n\n        return this._shippingStrategies.errors.initializeError;\n    }\n\n    isUpdatingAddress(methodId?: string): boolean {\n        if (methodId && this._shippingStrategies.statuses.updateAddressMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._shippingStrategies.statuses.isUpdatingAddress;\n    }\n\n    isSelectingOption(methodId?: string): boolean {\n        if (methodId && this._shippingStrategies.statuses.selectOptionMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._shippingStrategies.statuses.isSelectingOption;\n    }\n\n    isInitializing(methodId?: string): boolean {\n        if (methodId && this._shippingStrategies.statuses.initializeMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._shippingStrategies.statuses.isInitializing;\n    }\n\n    isInitialized(methodId: string): boolean {\n        return !!(\n            this._shippingStrategies.data[methodId] &&\n            this._shippingStrategies.data[methodId].isInitialized\n        );\n    }\n}\n","import { find } from 'lodash';\n\nimport { isAddressEqual, AddressRequestBody } from '../address';\nimport { CartSelector, PhysicalItem } from '../cart';\nimport { selector } from '../common/selector';\n\nimport Consignment from './consignment';\nimport ConsignmentState from './consignment-state';\nimport ShippingOption from './shipping-option';\n\n@selector\nexport default class ConsignmentSelector {\n    constructor(\n        private _consignments: ConsignmentState,\n        private _cart: CartSelector\n    ) {}\n\n    getConsignments(): Consignment[] | undefined {\n        return this._consignments.data;\n    }\n\n    getConsignmentById(id: string): Consignment | undefined {\n        const consignments = this._consignments.data;\n\n        if (!consignments || !consignments.length) {\n            return;\n        }\n\n        return find(consignments, { id });\n    }\n\n    getConsignmentByAddress(address: AddressRequestBody): Consignment | undefined {\n        const consignments = this._consignments.data;\n\n        if (!consignments || !consignments.length) {\n            return;\n        }\n\n        return find(consignments, consignment =>\n            isAddressEqual(consignment.shippingAddress, address)\n        );\n    }\n\n    getShippingOption(): ShippingOption | undefined {\n        const consignments = this._consignments.data;\n\n        if (consignments && consignments.length) {\n            return consignments[0].selectedShippingOption;\n        }\n    }\n\n    getLoadError(): Error | undefined {\n        return this._consignments.errors.loadError;\n    }\n\n    getCreateError(): Error | undefined {\n        return this._consignments.errors.createError;\n    }\n\n    getLoadShippingOptionsError(): Error | undefined {\n        return this._consignments.errors.loadShippingOptionsError;\n    }\n\n    getUnassignedItems(): PhysicalItem[] {\n        const cart = this._cart.getCart();\n\n        if (!cart) {\n            return [];\n        }\n\n        const assignedLineItemIds = (this.getConsignments() || []).reduce(\n            (itemIds, consignment) => itemIds.concat(consignment.lineItemIds),\n            [] as string[]\n        );\n\n        return (cart.lineItems.physicalItems || []).filter(\n            item => assignedLineItemIds.indexOf(item.id as string) < 0\n        );\n    }\n\n    getUpdateError(consignmentId?: string): Error | undefined {\n        if (consignmentId) {\n            return this._consignments.errors.updateError[consignmentId];\n        }\n\n        return find(this._consignments.errors.updateError);\n    }\n\n    getDeleteError(consignmentId?: string): Error | undefined {\n        if (consignmentId) {\n            return this._consignments.errors.deleteError[consignmentId];\n        }\n\n        return find(this._consignments.errors.deleteError);\n    }\n\n    getItemAssignmentError(address: AddressRequestBody): Error | undefined {\n        const consignment = this.getConsignmentByAddress(address);\n\n        return consignment ? this.getUpdateError(consignment.id) : this.getCreateError();\n    }\n\n    getUpdateShippingOptionError(consignmentId?: string): Error | undefined {\n        if (consignmentId) {\n            return this._consignments.errors.updateShippingOptionError[consignmentId];\n        }\n\n        return find(this._consignments.errors.updateShippingOptionError);\n    }\n\n    isLoading(): boolean {\n        return this._consignments.statuses.isLoading === true;\n    }\n\n    isLoadingShippingOptions(): boolean {\n        return this._consignments.statuses.isLoadingShippingOptions === true;\n    }\n\n    isCreating(): boolean {\n        return this._consignments.statuses.isCreating === true;\n    }\n\n    isUpdating(consignmentId?: string): boolean {\n        if (consignmentId) {\n            return this._consignments.statuses.isUpdating[consignmentId] === true;\n        }\n\n        return find(this._consignments.statuses.isUpdating) === true;\n    }\n\n    isDeleting(consignmentId?: string): boolean {\n        if (consignmentId) {\n            return this._consignments.statuses.isDeleting[consignmentId] === true;\n        }\n\n        return find(this._consignments.statuses.isDeleting) === true;\n    }\n\n    isAssigningItems(address: AddressRequestBody): boolean {\n        const consignment = this.getConsignmentByAddress(address);\n\n        return consignment ? this.isUpdating(consignment.id) : this.isCreating();\n    }\n\n    isUpdatingShippingOption(consignmentId?: string): boolean {\n        if (consignmentId) {\n            return this._consignments.statuses.isUpdatingShippingOption[consignmentId] === true;\n        }\n\n        return find(this._consignments.statuses.isUpdatingShippingOption) === true;\n    }\n}\n","import { BillingAddressSelector } from '../billing';\nimport { selector } from '../common/selector';\nimport { CouponSelector } from '../coupon';\n\nimport Order from './order';\nimport OrderState, { OrderMetaState } from './order-state';\n\n@selector\nexport default class OrderSelector {\n    constructor(\n        private _order: OrderState,\n        private _billingAddress: BillingAddressSelector,\n        private _coupons: CouponSelector\n    ) {}\n\n    getOrder(): Order | undefined {\n        const { data } = this._order;\n        const billingAddress = this._billingAddress.getBillingAddress();\n        const coupons = this._coupons.getCoupons() || [];\n\n        if (!data || !billingAddress) {\n            return;\n        }\n\n        return {\n            ...data,\n            billingAddress,\n            coupons,\n        };\n    }\n\n    getOrderMeta(): OrderMetaState | undefined {\n        return this._order.meta;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._order.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return !!this._order.statuses.isLoading;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { BillingAddressAction, BillingAddressActionType } from '../billing/billing-address-actions';\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { CouponAction, CouponActionType } from '../coupon/coupon-actions';\nimport { GiftCertificateAction, GiftCertificateActionType } from '../coupon/gift-certificate-actions';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping/consignment-actions';\n\nimport Cart from './cart';\nimport CartState, { CartErrorsState, CartStatusesState } from './cart-state';\n\nconst DEFAULT_STATE: CartState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function cartReducer(\n    state: CartState = DEFAULT_STATE,\n    action: Action\n): CartState {\n    const reducer = combineReducers<CartState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Cart | undefined,\n    action: BillingAddressAction | CheckoutAction | ConsignmentAction | CouponAction | GiftCertificateAction\n): Cart | undefined {\n    switch (action.type) {\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return action.payload ? { ...data, ...action.payload.cart } : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CartStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction\n): CartStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return { ...statuses, isLoading: true };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return { ...statuses, isLoading: false };\n\n    default:\n        return statuses;\n    }\n}\n\nfunction errorsReducer(\n    errors: CartErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction\n): CartErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return { ...errors, loadError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { CouponAction, CouponActionType } from '../coupon';\nimport { CustomerAction, CustomerActionType } from '../customer';\n\nimport Consignment from './consignment';\nimport { ConsignmentAction, ConsignmentActionType } from './consignment-actions';\nimport ConsignmentState, { ConsignmentErrorsState, ConsignmentStatusesState } from './consignment-state';\n\nconst DEFAULT_STATE: ConsignmentState = {\n    errors: {\n        updateShippingOptionError: {},\n        updateError: {},\n        deleteError: {},\n    },\n    statuses: {\n        isUpdating: {},\n        isUpdatingShippingOption: {},\n        isDeleting: {},\n    },\n};\n\nexport default function consignmentReducer(\n    state: ConsignmentState = DEFAULT_STATE,\n    action: Action\n): ConsignmentState {\n    const reducer = combineReducers<ConsignmentState, ConsignmentAction | CheckoutAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Consignment[] | undefined,\n    action: ConsignmentAction | CheckoutAction | CouponAction | CustomerAction\n): Consignment[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n        return action.payload ? action.payload.consignments : data;\n\n    case CustomerActionType.SignOutCustomerSucceeded:\n        return [];\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ConsignmentErrorsState = DEFAULT_STATE.errors,\n    action: ConsignmentAction | CheckoutAction\n): ConsignmentErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsRequested:\n        return { ...errors, loadError: undefined };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case ConsignmentActionType.LoadShippingOptionsFailed:\n        return { ...errors, loadError: action.payload };\n\n    case ConsignmentActionType.CreateConsignmentsRequested:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n        return { ...errors, createError: undefined };\n\n    case ConsignmentActionType.CreateConsignmentsFailed:\n        return { ...errors, createError: action.payload };\n\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentRequested:\n        if (action.meta) {\n            errors.updateError[action.meta.id] = undefined;\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateConsignmentFailed:\n        if (action.meta) {\n            errors.updateError[action.meta.id] = action.payload;\n        }\n\n        return errors;\n\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentRequested:\n        if (action.meta) {\n            errors.deleteError[action.meta.id] = undefined;\n        }\n\n        return errors;\n\n    case ConsignmentActionType.DeleteConsignmentFailed:\n        if (action.meta) {\n            errors.deleteError[action.meta.id] = action.payload;\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateShippingOptionRequested:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n        if (action.meta) {\n            errors.updateShippingOptionError[action.meta.id] = undefined;\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateShippingOptionFailed:\n        if (action.meta) {\n            errors.updateShippingOptionError[action.meta.id] = action.payload;\n        }\n\n        return errors;\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ConsignmentStatusesState = DEFAULT_STATE.statuses,\n    action: ConsignmentAction | CheckoutAction\n): ConsignmentStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return { ...statuses, isLoading: true };\n\n    case ConsignmentActionType.LoadShippingOptionsRequested:\n        return { ...statuses, isLoadingShippingOptions: true };\n\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.LoadCheckoutFailed:\n        return { ...statuses, isLoading: false };\n\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsFailed:\n        return { ...statuses, isLoadingShippingOptions: false };\n\n    case ConsignmentActionType.CreateConsignmentsRequested:\n        return { ...statuses, isCreating: true };\n\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.CreateConsignmentsFailed:\n        return { ...statuses, isCreating: false };\n\n    case ConsignmentActionType.UpdateConsignmentRequested:\n        if (action.meta) {\n            statuses.isUpdating[action.meta.id] = true;\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentFailed:\n        if (action.meta) {\n            statuses.isUpdating[action.meta.id] = false;\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.DeleteConsignmentRequested:\n        if (action.meta) {\n            statuses.isDeleting[action.meta.id] = true;\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentFailed:\n        if (action.meta) {\n            statuses.isDeleting[action.meta.id] = false;\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateShippingOptionRequested:\n        if (action.meta) {\n            statuses.isUpdatingShippingOption[action.meta.id] = true;\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionFailed:\n        if (action.meta) {\n            statuses.isUpdatingShippingOption[action.meta.id] = false;\n        }\n\n        return statuses;\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { OrderAction, OrderActionType } from '../order';\n\nimport Coupon from './coupon';\nimport { CouponAction, CouponActionType } from './coupon-actions';\nimport CouponState, { CouponErrorsState, CouponStatusesState } from './coupon-state';\n\nconst DEFAULT_STATE: CouponState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function couponReducer(\n    state: CouponState = DEFAULT_STATE,\n    action: Action\n): CouponState {\n    const reducer = combineReducers<CouponState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Coupon[] | undefined,\n    action: CouponAction | CheckoutAction | OrderAction\n): Coupon[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case OrderActionType.LoadOrderSucceeded:\n        return action.payload ? action.payload.coupons : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CouponErrorsState = {},\n    action: CouponAction\n): CouponErrorsState {\n    switch (action.type) {\n    case CouponActionType.ApplyCouponRequested:\n    case CouponActionType.ApplyCouponSucceeded:\n        return { ...errors, applyCouponError: undefined };\n\n    case CouponActionType.ApplyCouponFailed:\n        return { ...errors, applyCouponError: action.payload };\n\n    case CouponActionType.RemoveCouponRequested:\n    case CouponActionType.RemoveCouponSucceeded:\n        return { ...errors, removeCouponError: undefined };\n\n    case CouponActionType.RemoveCouponFailed:\n        return { ...errors, removeCouponError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CouponStatusesState = {},\n    action: CouponAction\n): CouponStatusesState {\n    switch (action.type) {\n    case CouponActionType.ApplyCouponRequested:\n        return { ...statuses, isApplyingCoupon: true };\n\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.ApplyCouponFailed:\n        return { ...statuses, isApplyingCoupon: false };\n\n    case CouponActionType.RemoveCouponRequested:\n        return { ...statuses, isRemovingCoupon: true };\n\n    case CouponActionType.RemoveCouponSucceeded:\n    case CouponActionType.RemoveCouponFailed:\n        return { ...statuses, isRemovingCoupon: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\n\nimport Customer from './customer';\nimport CustomerState from './customer-state';\n\nconst DEFAULT_STATE: CustomerState = {};\n\nexport default function customerReducer(\n    state: CustomerState = DEFAULT_STATE,\n    action: CheckoutAction\n): CustomerState {\n    const reducer = combineReducers<CustomerState, CheckoutAction>({\n        data: dataReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Customer | undefined,\n    action: CheckoutAction\n): Customer | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return action.payload ? { ...data, ...action.payload.customer } : data;\n\n    default:\n        return data;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping/consignment-actions';\n\nimport { CouponAction, CouponActionType } from './coupon-actions';\nimport GiftCertificate from './gift-certificate';\nimport { GiftCertificateAction, GiftCertificateActionType } from './gift-certificate-actions';\nimport GiftCertificateState, { GiftCertificateErrorsState, GiftCertificateStatusesState } from './gift-certificate-state';\n\nconst DEFAULT_STATE: GiftCertificateState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function giftCertificateReducer(\n    state: GiftCertificateState = DEFAULT_STATE,\n    action: Action\n): GiftCertificateState {\n    const reducer = combineReducers<GiftCertificateState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: GiftCertificate[] | undefined,\n    action: CheckoutAction | GiftCertificateAction | ConsignmentAction | CouponAction\n): GiftCertificate[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return action.payload ? action.payload.giftCertificates : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: GiftCertificateErrorsState = DEFAULT_STATE.errors,\n    action: GiftCertificateAction\n): GiftCertificateErrorsState {\n    switch (action.type) {\n    case GiftCertificateActionType.ApplyGiftCertificateRequested:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n        return { ...errors, applyGiftCertificateError: undefined };\n\n    case GiftCertificateActionType.ApplyGiftCertificateFailed:\n        return { ...errors, applyGiftCertificateError: action.payload };\n\n    case GiftCertificateActionType.RemoveGiftCertificateRequested:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return { ...errors, removeGiftCertificateError: undefined };\n\n    case GiftCertificateActionType.RemoveGiftCertificateFailed:\n        return { ...errors, removeGiftCertificateError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: GiftCertificateStatusesState = DEFAULT_STATE.statuses,\n    action: GiftCertificateAction\n): GiftCertificateStatusesState {\n    switch (action.type) {\n    case GiftCertificateActionType.ApplyGiftCertificateRequested:\n        return { ...statuses, isApplyingGiftCertificate: true };\n\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateFailed:\n        return { ...statuses, isApplyingGiftCertificate: false };\n\n    case GiftCertificateActionType.RemoveGiftCertificateRequested:\n        return { ...statuses, isRemovingGiftCertificate: true };\n\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateFailed:\n        return { ...statuses, isRemovingGiftCertificate: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\nimport { omit } from 'lodash';\n\nimport { clearErrorReducer } from '../common/error';\n\nimport { OrderAction, OrderActionType } from './order-actions';\nimport OrderState, { OrderDataState, OrderErrorsState, OrderMetaState, OrderStatusesState } from './order-state';\n\nconst DEFAULT_STATE: OrderState = {\n    errors: {},\n    meta: {},\n    statuses: {},\n};\n\nexport default function orderReducer(\n    state: OrderState = DEFAULT_STATE,\n    action: Action\n): OrderState {\n    const reducer = combineReducers<OrderState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: OrderDataState | undefined,\n    action: OrderAction\n): OrderDataState | undefined {\n    switch (action.type) {\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n        return action.payload\n            ? omit({ ...data, ...action.payload }, ['billingAddress', 'coupons'])\n            : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(\n    meta: OrderMetaState | undefined,\n    action: OrderAction\n): OrderMetaState | undefined {\n    switch (action.type) {\n    case OrderActionType.FinalizeOrderSucceeded:\n    case OrderActionType.SubmitOrderSucceeded:\n        return action.payload ? {\n            ...meta,\n            ...action.meta,\n            callbackUrl: action.payload.order.callbackUrl,\n            orderToken: action.payload.order.token,\n            payment: action.payload.order && action.payload.order.payment,\n        } : meta;\n\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: OrderErrorsState = DEFAULT_STATE.errors,\n    action: OrderAction\n): OrderErrorsState {\n    switch (action.type) {\n    case OrderActionType.LoadOrderRequested:\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n    case OrderActionType.LoadOrderPaymentsRequested:\n        return { ...errors, loadError: undefined };\n\n    case OrderActionType.LoadOrderFailed:\n    case OrderActionType.LoadOrderPaymentsFailed:\n        return { ...errors, loadError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: OrderStatusesState = DEFAULT_STATE.statuses,\n    action: OrderAction\n): OrderStatusesState {\n    switch (action.type) {\n    case OrderActionType.LoadOrderRequested:\n    case OrderActionType.LoadOrderPaymentsRequested:\n        return { ...statuses, isLoading: true };\n\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderFailed:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n    case OrderActionType.LoadOrderPaymentsFailed:\n        return { ...statuses, isLoading: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { assign, findIndex, isPlainObject, pickBy } from 'lodash';\n\nimport { PartialDeep } from '../types';\n\n/**\n * Push an item to an array if it doesn't exist in the array. Otherwise, merge\n * with the existing item in the array. This function always returns a new array.\n */\nexport default function mergeOrPush<T>(\n    array: T[],\n    item: T,\n    predicate: ((item: T) => boolean) | PartialDeep<T>\n): T[] {\n    const index = findIndex(array, typeof predicate === 'object' ? pickBy(predicate) : predicate);\n    const newArray = [...array];\n\n    if (index === -1) {\n        newArray.push(item);\n    } else {\n        newArray[index] = isPlainObject(item) ? assign({}, array[index], item) : item;\n    }\n\n    return newArray;\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { Country } from '../geography';\n\nimport { LoadShippingCountriesAction, ShippingCountryActionType } from './shipping-country-actions';\nimport ShippingCountryState, { ShippingCountryErrorsState, ShippingCountryStatusesState } from './shipping-country-state';\n\nconst DEFAULT_STATE: ShippingCountryState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function shippingCountryReducer(\n    state: ShippingCountryState = DEFAULT_STATE,\n    action: Action\n): ShippingCountryState {\n    const reducer = combineReducers<ShippingCountryState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Country[] | undefined,\n    action: LoadShippingCountriesAction\n): Country[] | undefined {\n    switch (action.type) {\n    case ShippingCountryActionType.LoadShippingCountriesSucceeded:\n        return action.payload || [];\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ShippingCountryErrorsState = DEFAULT_STATE.errors,\n    action: LoadShippingCountriesAction\n): ShippingCountryErrorsState {\n    switch (action.type) {\n    case ShippingCountryActionType.LoadShippingCountriesRequested:\n    case ShippingCountryActionType.LoadShippingCountriesSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case ShippingCountryActionType.LoadShippingCountriesFailed:\n        return { ...errors, loadError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ShippingCountryStatusesState = DEFAULT_STATE.statuses,\n    action: LoadShippingCountriesAction\n): ShippingCountryStatusesState {\n    switch (action.type) {\n    case ShippingCountryActionType.LoadShippingCountriesRequested:\n        return { ...statuses, isLoading: true };\n\n    case ShippingCountryActionType.LoadShippingCountriesSucceeded:\n    case ShippingCountryActionType.LoadShippingCountriesFailed:\n        return { ...statuses, isLoading: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { mapToInternalAddress } from '../address';\nimport { BillingAddress } from '../billing';\n\nimport { Customer } from '.';\nimport InternalCustomer from './internal-customer';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalCustomer(customer: Customer, billingAddress: BillingAddress): InternalCustomer {\n    const firstName = customer.firstName || billingAddress.firstName || '';\n    const lastName = customer.lastName || billingAddress.lastName || '';\n\n    return {\n        addresses: (customer.addresses || []).map(address => mapToInternalAddress(address)),\n        customerId: customer.id,\n        isGuest: customer.isGuest,\n        storeCredit: customer.storeCredit,\n        email: customer.email || billingAddress.email || '',\n        firstName,\n        lastName,\n        name: customer.fullName || [firstName, lastName].join(' '),\n    };\n}\n","import GiftCertificate from './gift-certificate';\nimport InternalGiftCertificate from './internal-gift-certificate';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalGiftCertificate(giftCertificate: GiftCertificate): InternalGiftCertificate {\n    return {\n        code: giftCertificate.code,\n        discountedAmount: giftCertificate.used,\n        remainingBalance: giftCertificate.remaining,\n        giftCertificate: {\n            balance: giftCertificate.balance,\n            code: giftCertificate.code,\n            purchaseDate: giftCertificate.purchaseDate,\n        },\n    };\n}\n","import { filter, find, keyBy, reduce } from 'lodash';\n\nimport { AmountTransformer, LineItem } from '../cart';\nimport { mapToInternalLineItems } from '../cart';\nimport { Checkout } from '../checkout';\nimport { mapToInternalCoupon } from '../coupon';\nimport { HOSTED } from '../payment';\n\nimport InternalOrder, { InternalGiftCertificateList, InternalIncompleteOrder, InternalOrderPayment, InternalSocialDataList } from './internal-order';\nimport Order, { GatewayOrderPayment, GiftCertificateOrderPayment, OrderPayment, OrderPayments } from './order';\nimport { OrderMetaState } from './order-state';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalOrder(order: Order, orderMeta: OrderMetaState = {}): InternalOrder {\n    const decimalPlaces = order.currency.decimalPlaces;\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: order.orderId,\n        items: mapToInternalLineItems(order.lineItems, order.currency.decimalPlaces, 'productId'),\n        orderId: order.orderId,\n        currency: order.currency.code,\n        customerCanBeCreated: order.customerCanBeCreated,\n        payment: mapToInteralOrderPayment(order.payments, orderMeta.payment),\n        subtotal: {\n            amount: order.baseAmount,\n            integerAmount: amountTransformer.toInteger(order.baseAmount),\n        },\n        coupon: {\n            discountedAmount: reduce(order.coupons, (sum, coupon) => {\n                return sum + coupon.discountedAmount;\n            }, 0),\n            coupons: order.coupons.map(mapToInternalCoupon),\n        },\n        discount: {\n            amount: order.discountAmount,\n            integerAmount: amountTransformer.toInteger(order.discountAmount),\n        },\n        token: orderMeta.orderToken,\n        callbackUrl: orderMeta.callbackUrl,\n        discountNotifications: [],\n        giftCertificate: mapToGiftCertificates(order.payments),\n        socialData: mapToInternalSocialDataList(order),\n        status: order.status,\n        hasDigitalItems: order.hasDigitalItems,\n        isDownloadable: order.isDownloadable,\n        isComplete: order.isComplete,\n        shipping: {\n            amount: order.shippingCostTotal,\n            integerAmount: amountTransformer.toInteger(order.shippingCostTotal),\n            amountBeforeDiscount: order.shippingCostBeforeDiscount,\n            integerAmountBeforeDiscount: amountTransformer.toInteger(order.shippingCostBeforeDiscount),\n        },\n        storeCredit: {\n            amount: mapToStoreCredit(order.payments),\n        },\n        taxes: order.taxes,\n        taxTotal: {\n            amount: order.taxTotal,\n            integerAmount: amountTransformer.toInteger(order.taxTotal),\n        },\n        handling: {\n            amount: order.handlingCostTotal,\n            integerAmount: amountTransformer.toInteger(order.handlingCostTotal),\n        },\n        grandTotal: {\n            amount: order.orderAmount,\n            integerAmount: order.orderAmountAsInteger,\n        },\n    };\n}\n\nexport function mapToInternalIncompleteOrder(checkout: Checkout): InternalIncompleteOrder {\n    const payment = find(checkout.payments, { providerType: HOSTED });\n\n    return {\n        orderId: null,\n        isComplete: false,\n        payment: !payment ? {} : {\n            id: payment.providerId,\n            gateway: payment.gatewayId,\n            status: mapToInternalPaymentStatus(payment.detail.step),\n        },\n    };\n}\n\nfunction mapToInternalPaymentStatus(status: string): string {\n    return `PAYMENT_STATUS_${status}`;\n}\n\nfunction mapToStoreCredit(payments?: OrderPayments): number {\n    const item = find(payments, { providerId: 'storecredit' });\n\n    return item ? item.amount : 0;\n}\n\nfunction mapToGiftCertificates(payments?: OrderPayments): InternalGiftCertificateList {\n    const items = filter(payments, { providerId: 'giftcertificate' }) as GiftCertificateOrderPayment[];\n\n    return {\n        totalDiscountedAmount: reduce(items, (sum, item) => item.amount + sum, 0),\n        appliedGiftCertificates: keyBy(items.map(item => ({\n            code: item.detail.code,\n            discountedAmount: item.amount,\n            remainingBalance: item.detail.remaining,\n            giftCertificate: {\n                balance: item.amount + item.detail.remaining,\n                code: item.detail.code,\n                purchaseDate: '',\n            },\n        })), 'code'),\n    };\n}\n\nfunction mapToInteralOrderPayment(payments?: OrderPayments, payment: InternalOrderPayment = {}): InternalOrderPayment {\n    const item = find(payments, isDefaultOrderPayment) as GatewayOrderPayment;\n\n    if (!item) {\n        return {};\n    }\n\n    return {\n        id: item.providerId,\n        status: mapToInternalPaymentStatus(item.detail.step),\n        helpText: item.detail.instructions,\n        returnUrl: payment.returnUrl,\n    };\n}\n\nfunction isDefaultOrderPayment(payment: OrderPayment): payment is GatewayOrderPayment {\n    return payment.providerId !== 'giftcertificate' && payment.providerId !== 'storecredit';\n}\n\nfunction mapToInternalSocialDataList(order: Order): { [itemId: string]: InternalSocialDataList } | undefined {\n    const socialDataObject: { [itemId: string]: InternalSocialDataList } = {};\n    const items = [\n        ...order.lineItems.physicalItems,\n        ...order.lineItems.digitalItems,\n    ];\n\n    items.forEach(item => {\n        socialDataObject[item.id] = mapToInternalSocialData(item);\n    });\n\n    return socialDataObject;\n}\n\nfunction mapToInternalSocialData(lineItem: LineItem): InternalSocialDataList {\n    const codes = ['fb', 'tw', 'gp'];\n\n    return codes.reduce((socialData, code) => {\n        const item = lineItem.socialMedia && lineItem.socialMedia.find(item => item.code === code);\n\n        if (!item) {\n            return socialData;\n        }\n\n        socialData[code] = {\n            name: lineItem.name,\n            description: lineItem.name,\n            image: lineItem.imageUrl,\n            url: item.link,\n            shareText: item.text,\n            sharingLink: item.link,\n            channelName: item.channel,\n            channelCode: item.code,\n        };\n\n        return socialData;\n    }, {} as InternalSocialDataList);\n}\n","export default interface ShippingStrategyState {\n    data: ShippingStrategyDataState;\n    errors: ShippingStrategyErrorsState;\n    statuses: ShippingStrategyStatusesState;\n}\n\nexport interface ShippingStrategyDataState {\n    [key: string]: {\n        isInitialized: boolean,\n    };\n}\n\nexport interface ShippingStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    updateAddressError?: Error;\n    updateAddressMethodId?: string;\n    selectOptionError?: Error;\n    selectOptionMethodId?: string;\n}\n\nexport interface ShippingStrategyStatusesState {\n    deinitializeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isInitializing?: boolean;\n    isUpdatingAddress?: boolean;\n    isSelectingOption?: boolean;\n    updateAddressMethodId?: string;\n    selectOptionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: ShippingStrategyState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\n\nimport { ShippingStrategyAction, ShippingStrategyActionType } from './shipping-strategy-actions';\nimport ShippingStrategyState, { DEFAULT_STATE, ShippingStrategyDataState, ShippingStrategyErrorsState, ShippingStrategyStatusesState } from './shipping-strategy-state';\n\nexport default function shippingStrategyReducer(\n    state: ShippingStrategyState = DEFAULT_STATE,\n    action: Action\n): ShippingStrategyState {\n    const reducer = combineReducers<ShippingStrategyState, ShippingStrategyAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: ShippingStrategyDataState = DEFAULT_STATE.data,\n    action: ShippingStrategyAction\n): ShippingStrategyDataState {\n    switch (action.type) {\n    case ShippingStrategyActionType.InitializeSucceeded:\n        return {\n            ...data,\n            [action.meta && action.meta.methodId]: {\n                isInitialized: true,\n            },\n        };\n\n    case ShippingStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...data,\n            [action.meta && action.meta.methodId]: {\n                isInitialized: false,\n            },\n        };\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: ShippingStrategyErrorsState = DEFAULT_STATE.errors,\n    action: ShippingStrategyAction\n): ShippingStrategyErrorsState {\n    switch (action.type) {\n    case ShippingStrategyActionType.InitializeRequested:\n    case ShippingStrategyActionType.InitializeSucceeded:\n        return {\n            ...errors,\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.InitializeFailed:\n        return {\n            ...errors,\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.DeinitializeRequested:\n    case ShippingStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...errors,\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.DeinitializeFailed:\n        return {\n            ...errors,\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.UpdateAddressRequested:\n    case ShippingStrategyActionType.UpdateAddressSucceeded:\n        return {\n            ...errors,\n            updateAddressError: undefined,\n            updateAddressMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.UpdateAddressFailed:\n        return {\n            ...errors,\n            updateAddressError: action.payload,\n            updateAddressMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.SelectOptionRequested:\n    case ShippingStrategyActionType.SelectOptionSucceeded:\n        return {\n            ...errors,\n            selectOptionError: undefined,\n            selectOptionMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.SelectOptionFailed:\n        return {\n            ...errors,\n            selectOptionError: action.payload,\n            selectOptionMethodId: action.meta && action.meta.methodId,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ShippingStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: ShippingStrategyAction\n): ShippingStrategyStatusesState {\n    switch (action.type) {\n    case ShippingStrategyActionType.InitializeRequested:\n        return {\n            ...statuses,\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.InitializeFailed:\n    case ShippingStrategyActionType.InitializeSucceeded:\n        return {\n            ...statuses,\n            isInitializing: false,\n            initializeMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.DeinitializeRequested:\n        return {\n            ...statuses,\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.DeinitializeFailed:\n    case ShippingStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...statuses,\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.UpdateAddressRequested:\n        return {\n            ...statuses,\n            isUpdatingAddress: true,\n            updateAddressMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.UpdateAddressFailed:\n    case ShippingStrategyActionType.UpdateAddressSucceeded:\n        return {\n            ...statuses,\n            isUpdatingAddress: false,\n            updateAddressMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.SelectOptionRequested:\n        return {\n            ...statuses,\n            isSelectingOption: true,\n            selectOptionMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.SelectOptionFailed:\n    case ShippingStrategyActionType.SelectOptionSucceeded:\n        return {\n            ...statuses,\n            isSelectingOption: false,\n            selectOptionMethodId: undefined,\n        };\n\n    default:\n        return statuses;\n    }\n}\n","export default interface CustomerStrategyState {\n    data: CustomerStrategyDataState;\n    errors: CustomerStrategyErrorsState;\n    statuses: CustomerStrategyStatusesState;\n}\n\nexport interface CustomerStrategyDataState {\n    [key: string]: {\n        isInitialized: boolean,\n    };\n}\n\nexport interface CustomerStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    signInError?: Error;\n    signInMethodId?: string;\n    signOutError?: Error;\n    signOutMethodId?: string;\n    widgetInteractionError?: Error;\n    widgetInteractionMethodId?: string;\n}\n\nexport interface CustomerStrategyStatusesState {\n    deinitializeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isInitializing?: boolean;\n    isSigningIn?: boolean;\n    isSigningOut?: boolean;\n    signInMethodId?: string;\n    signOutMethodId?: string;\n    isWidgetInteracting?: boolean;\n    widgetInteractionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: CustomerStrategyState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\n\nimport { CustomerStrategyAction, CustomerStrategyActionType } from './customer-strategy-actions';\nimport CustomerStrategyState, { CustomerStrategyDataState, CustomerStrategyErrorsState, CustomerStrategyStatusesState, DEFAULT_STATE } from './customer-strategy-state';\n\nexport default function customerStrategyReducer(\n    state: CustomerStrategyState = DEFAULT_STATE,\n    action: Action\n): CustomerStrategyState {\n    const reducer = combineReducers<CustomerStrategyState, CustomerStrategyAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: CustomerStrategyDataState = DEFAULT_STATE.data,\n    action: CustomerStrategyAction\n): CustomerStrategyDataState {\n    switch (action.type) {\n    case CustomerStrategyActionType.InitializeSucceeded:\n        return {\n            ...data,\n            [action.meta && action.meta.methodId]: {\n                isInitialized: true,\n            },\n        };\n\n    case CustomerStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...data,\n            [action.meta && action.meta.methodId]: {\n                isInitialized: false,\n            },\n        };\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: CustomerStrategyErrorsState = DEFAULT_STATE.errors,\n    action: CustomerStrategyAction\n): CustomerStrategyErrorsState {\n    switch (action.type) {\n    case CustomerStrategyActionType.InitializeRequested:\n    case CustomerStrategyActionType.InitializeSucceeded:\n        return {\n            ...errors,\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.InitializeFailed:\n        return {\n            ...errors,\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.DeinitializeRequested:\n    case CustomerStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...errors,\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.DeinitializeFailed:\n        return {\n            ...errors,\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.SignInRequested:\n    case CustomerStrategyActionType.SignInSucceeded:\n        return {\n            ...errors,\n            signInError: undefined,\n            signInMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.SignInFailed:\n        return {\n            ...errors,\n            signInError: action.payload,\n            signInMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.SignOutRequested:\n    case CustomerStrategyActionType.SignOutSucceeded:\n        return {\n            ...errors,\n            signOutError: undefined,\n            signOutMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.SignOutFailed:\n        return {\n            ...errors,\n            signOutError: action.payload,\n            signOutMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.WidgetInteractionStarted:\n    case CustomerStrategyActionType.WidgetInteractionFinished:\n        return {\n            ...errors,\n            widgetInteractionError: undefined,\n            widgetInteractionMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.WidgetInteractionFailed:\n        return {\n            ...errors,\n            widgetInteractionError: action.payload,\n            widgetInteractionMethodId: action.meta.methodId,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CustomerStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: CustomerStrategyAction\n): CustomerStrategyStatusesState {\n    switch (action.type) {\n    case CustomerStrategyActionType.InitializeRequested:\n        return {\n            ...statuses,\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.InitializeFailed:\n    case CustomerStrategyActionType.InitializeSucceeded:\n        return {\n            ...statuses,\n            isInitializing: false,\n            initializeMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.DeinitializeRequested:\n        return {\n            ...statuses,\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.DeinitializeFailed:\n    case CustomerStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...statuses,\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.SignInRequested:\n        return {\n            ...statuses,\n            isSigningIn: true,\n            signInMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.SignInFailed:\n    case CustomerStrategyActionType.SignInSucceeded:\n        return {\n            ...statuses,\n            isSigningIn: false,\n            signInMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.SignOutRequested:\n        return {\n            ...statuses,\n            isSigningOut: true,\n            signOutMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.SignOutFailed:\n    case CustomerStrategyActionType.SignOutSucceeded:\n        return {\n            ...statuses,\n            isSigningOut: false,\n            signOutMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.WidgetInteractionStarted:\n        return {\n            ...statuses,\n            isWidgetInteracting: true,\n            widgetInteractionMethodId: action.meta.methodId,\n         };\n\n    case CustomerStrategyActionType.WidgetInteractionFinished:\n    case CustomerStrategyActionType.WidgetInteractionFailed:\n         return {\n            ...statuses,\n            isWidgetInteracting: false,\n            widgetInteractionMethodId: undefined,\n         };\n\n    default:\n        return statuses;\n    }\n}\n","export default function getCallbackUrl(origin: string): string {\n    return `${window.location.origin}/checkout.php?action=set_external_checkout&provider=masterpass&gateway=stripe&origin=${origin}`;\n}\n","import isPrivate from './is-private';\nimport omitDeep from './omit-deep';\n\nexport default function omitPrivate(object: any): any {\n    return omitDeep(object, (value: any, key: string) => isPrivate(key));\n}\n","export default function getEnvironment(): string {\n    try {\n        return process.env.NODE_ENV || 'development';\n    } catch (e) {\n        return 'development';\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nimport InternalOrderRequestBody from './internal-order-request-body';\nimport { InternalOrderResponseBody } from './internal-order-responses';\nimport Order from './order';\n\nexport default class OrderRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadOrder(orderId: number, { timeout }: RequestOptions = {}): Promise<Response<Order>> {\n        const url = `/api/storefront/orders/${orderId}`;\n        const headers = { Accept: ContentType.JsonV1 };\n        const params = {\n            include: [\n                'payments',\n                'lineItems.physicalItems.socialMedia',\n                'lineItems.physicalItems.options',\n                'lineItems.digitalItems.socialMedia',\n                'lineItems.digitalItems.options',\n            ].join(','),\n        };\n\n        return this._requestSender.get(url, {\n            params,\n            headers,\n            timeout,\n        });\n    }\n\n    submitOrder(body: InternalOrderRequestBody, { timeout }: RequestOptions = {}): Promise<Response<InternalOrderResponseBody>> {\n        const url = '/internalapi/v1/checkout/order';\n\n        return this._requestSender.post(url, { body, timeout });\n    }\n\n    finalizeOrder(orderId: number, { timeout }: RequestOptions = {}): Promise<Response<InternalOrderResponseBody>> {\n        const url = `/internalapi/v1/checkout/order/${orderId}`;\n\n        return this._requestSender.post(url, { timeout });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, from, of, Observable, Observer } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\n\nimport { CheckoutValidator, InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport InternalOrderRequestBody from './internal-order-request-body';\nimport { FinalizeOrderAction, LoadOrderAction, LoadOrderPaymentsAction, OrderActionType, SubmitOrderAction } from './order-actions';\nimport OrderRequestBody from './order-request-body';\nimport OrderRequestSender from './order-request-sender';\n\nexport default class OrderActionCreator {\n    constructor(\n        private _orderRequestSender: OrderRequestSender,\n        private _checkoutValidator: CheckoutValidator\n    ) {}\n\n    loadOrder(orderId: number, options?: RequestOptions): Observable<LoadOrderAction> {\n        return new Observable((observer: Observer<LoadOrderAction>) => {\n            observer.next(createAction(OrderActionType.LoadOrderRequested));\n\n            this._orderRequestSender.loadOrder(orderId, options)\n                .then(response => {\n                    observer.next(createAction(OrderActionType.LoadOrderSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(OrderActionType.LoadOrderFailed, response));\n                });\n        });\n    }\n\n    // TODO: Remove when checkout does not contain unrelated order data.\n    loadOrderPayments(orderId: number, options?: RequestOptions): Observable<LoadOrderPaymentsAction> {\n        return new Observable((observer: Observer<LoadOrderPaymentsAction>) => {\n            observer.next(createAction(OrderActionType.LoadOrderPaymentsRequested));\n\n            this._orderRequestSender.loadOrder(orderId, options)\n                .then(response => {\n                    observer.next(createAction(OrderActionType.LoadOrderPaymentsSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(OrderActionType.LoadOrderPaymentsFailed, response));\n                });\n        });\n    }\n\n    loadCurrentOrder(options?: RequestOptions): ThunkAction<LoadOrderAction, InternalCheckoutSelectors> {\n        return store => defer(() => {\n            const orderId = this._getCurrentOrderId(store.getState());\n\n            if (!orderId) {\n                throw new MissingDataError(MissingDataErrorType.MissingOrderId);\n            }\n\n            return this.loadOrder(orderId, options);\n        });\n    }\n\n    submitOrder(payload: OrderRequestBody, options?: RequestOptions): ThunkAction<SubmitOrderAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(OrderActionType.SubmitOrderRequested)),\n            defer(() => {\n                const state = store.getState();\n                const externalSource = state.config.getExternalSource();\n                const checkout = state.checkout.getCheckout();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                return from(\n                    this._checkoutValidator.validate(checkout, options)\n                        .then(() => this._orderRequestSender.submitOrder(this._mapToOrderRequestBody(payload, checkout.customerMessage, externalSource), options))\n                ).pipe(\n                    switchMap(response => concat(\n                        // TODO: Remove once we can submit orders using storefront API\n                        this.loadOrder(response.body.data.order.orderId, options),\n                        of(createAction(OrderActionType.SubmitOrderSucceeded, response.body.data, { ...response.body.meta, token: response.headers.token }))\n                    ))\n                );\n            }).pipe(\n                catchError(error => throwErrorAction(OrderActionType.SubmitOrderFailed, error))\n            )\n        );\n    }\n\n    finalizeOrder(orderId: number, options?: RequestOptions): Observable<FinalizeOrderAction | LoadOrderAction> {\n        return concat(\n            of(createAction(OrderActionType.FinalizeOrderRequested)),\n            from(this._orderRequestSender.finalizeOrder(orderId, options))\n                .pipe(\n                    switchMap(response => concat(\n                        this.loadOrder(orderId, options),\n                        of(createAction(OrderActionType.FinalizeOrderSucceeded, response.body.data))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(OrderActionType.FinalizeOrderFailed, error))\n        );\n    }\n\n    private _getCurrentOrderId(state: InternalCheckoutSelectors): number | undefined {\n        const order = state.order.getOrder();\n        const checkout = state.checkout.getCheckout();\n\n        return (order && order.orderId) || (checkout && checkout.orderId);\n    }\n\n    private _mapToOrderRequestBody(payload: OrderRequestBody, customerMessage: string, externalSource?: string): InternalOrderRequestBody {\n        const { payment, ...order } = payload;\n\n        if (!payment) {\n            return {\n                ...order,\n                customerMessage,\n                externalSource,\n            };\n        }\n\n        return {\n            ...order,\n            customerMessage,\n            externalSource,\n            payment: {\n                paymentData: payment.paymentData,\n                name: payment.methodId,\n                gateway: payment.gatewayId,\n            },\n        };\n    }\n}\n","import { isEqual } from 'lodash';\n\nimport { PartialDeep } from '../common/types';\n\nimport Cart from './cart';\n\nexport default class CartComparator {\n    isEqual(cartA: Cart, cartB: Cart): boolean {\n        return isEqual(\n            this._normalize(cartA),\n            this._normalize(cartB)\n        );\n    }\n\n    private _normalize(cart: Cart): PartialDeep<Cart> {\n        return {\n            cartAmount: cart.cartAmount,\n            currency: cart.currency,\n            id: cart.id,\n            lineItems: {\n                digitalItems: cart.lineItems.digitalItems\n                    .slice()\n                    .sort((itemA, itemB) =>\n                        `${itemA.productId}${itemA.variantId}`.localeCompare(`${itemB.productId}${itemB.variantId}`)\n                    )\n                    .map(item => ({\n                        extendedSalePrice: item.extendedSalePrice,\n                        productId: item.productId,\n                        quantity: item.quantity,\n                        variantId: item.variantId,\n                    })),\n                giftCertificates: cart.lineItems.giftCertificates\n                    .slice()\n                    .sort((itemA, itemB) => `${itemA.id}`.localeCompare(`${itemB.id}`))\n                    .map(item => ({\n                        amount: item.amount,\n                        recipient: item.recipient,\n                    })),\n                physicalItems: cart.lineItems.physicalItems\n                    .slice()\n                    .sort((itemA, itemB) =>\n                        `${itemA.productId}${itemA.variantId}`.localeCompare(`${itemB.productId}${itemB.variantId}`)\n                    )\n                    .map(item => ({\n                        extendedSalePrice: item.extendedSalePrice,\n                        productId: item.productId,\n                        quantity: item.quantity,\n                        variantId: item.variantId,\n                        giftWrapping: item.giftWrapping,\n                    })),\n            },\n        };\n    }\n}\n","export default function toSingleLine(input?: string) {\n    if (!input) {\n        return '';\n    }\n\n    return input.split(/(?:\\r\\n|\\n|\\r)/)\n        .map(line => line.replace(/^\\s+/gm, ''))\n        .join(' ')\n        .trim();\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport { ApplyCouponAction, CouponAction, CouponActionType, RemoveCouponAction } from './coupon-actions';\nimport CouponRequestSender from './coupon-request-sender';\n\nexport default class CouponActionCreator {\n    constructor(\n        private _couponRequestSender: CouponRequestSender\n    ) {}\n\n    applyCoupon(code: string, options?: RequestOptions): ThunkAction<CouponAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ApplyCouponAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(CouponActionType.ApplyCouponRequested));\n\n            this._couponRequestSender.applyCoupon(checkout.id, code, options)\n                .then(({ body }) => {\n                    observer.next(createAction(CouponActionType.ApplyCouponSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CouponActionType.ApplyCouponFailed, response));\n                });\n        });\n    }\n\n    removeCoupon(code: string, options?: RequestOptions): ThunkAction<CouponAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<RemoveCouponAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(CouponActionType.RemoveCouponRequested));\n\n            this._couponRequestSender.removeCoupon(checkout.id, code, options)\n                .then(({ body }) => {\n                    observer.next(createAction(CouponActionType.RemoveCouponSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CouponActionType.RemoveCouponFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout, CheckoutIncludes, CHECKOUT_DEFAULT_INCLUDES } from '../checkout';\nimport { joinIncludes, ContentType, RequestOptions } from '../common/http-request';\n\nexport default class CouponRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    applyCoupon(checkoutId: string, couponCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/coupons`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes([\n                    ...CHECKOUT_DEFAULT_INCLUDES,\n                    CheckoutIncludes.AvailableShippingOptions,\n                ]),\n            },\n            body: { couponCode },\n        });\n    }\n\n    removeCoupon(checkoutId: string, couponCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/coupons/${couponCode}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.delete(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes([\n                    ...CHECKOUT_DEFAULT_INCLUDES,\n                    CheckoutIncludes.AvailableShippingOptions,\n                ]),\n            },\n        });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable ,  Observer } from 'rxjs';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport { GiftCertificateRequestSender } from '.';\nimport { ApplyGiftCertificateAction, GiftCertificateActionType, RemoveGiftCertificateAction } from './gift-certificate-actions';\n\nexport default class GiftCertificateActionCreator {\n    constructor(\n        private _giftCertificateRequestSender: GiftCertificateRequestSender\n    ) {}\n\n    applyGiftCertificate(giftCertificate: string, options?: RequestOptions): ThunkAction<ApplyGiftCertificateAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ApplyGiftCertificateAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(GiftCertificateActionType.ApplyGiftCertificateRequested));\n\n            this._giftCertificateRequestSender.applyGiftCertificate(checkout.id, giftCertificate, options)\n                .then(({ body }) => {\n                    observer.next(createAction(GiftCertificateActionType.ApplyGiftCertificateSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(GiftCertificateActionType.ApplyGiftCertificateFailed, response));\n                });\n        });\n    }\n\n    removeGiftCertificate(giftCertificate: string, options?: RequestOptions): ThunkAction<RemoveGiftCertificateAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<RemoveGiftCertificateAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(GiftCertificateActionType.RemoveGiftCertificateRequested));\n\n            this._giftCertificateRequestSender.removeGiftCertificate(checkout.id, giftCertificate, options)\n                .then(({ body }) => {\n                    observer.next(createAction(GiftCertificateActionType.RemoveGiftCertificateSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(GiftCertificateActionType.RemoveGiftCertificateFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout, CHECKOUT_DEFAULT_INCLUDES } from '../checkout';\nimport { joinIncludes, ContentType, RequestOptions } from '../common/http-request';\n\nexport default class GiftCertificateRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    applyGiftCertificate(checkoutId: string, giftCertificateCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/gift-certificates`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes(CHECKOUT_DEFAULT_INCLUDES),\n            },\n            body: { giftCertificateCode },\n        });\n    }\n\n    removeGiftCertificate(checkoutId: string, giftCertificateCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/gift-certificates/${giftCertificateCode}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.delete(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes(CHECKOUT_DEFAULT_INCLUDES),\n            },\n        });\n    }\n}\n","export default class CancellablePromise<T> {\n    promise: Promise<T>;\n    cancel!: (reason?: any) => void;\n\n    constructor(promise: Promise<T>) {\n        const cancellable = new Promise<T>((resolve, reject) => {\n            this.cancel = reject;\n        });\n\n        this.promise = Promise.race([promise, cancellable]);\n    }\n}\n","import { isEqual } from 'lodash';\n\nimport { omitPrivate } from '../common/utility';\n\nimport InternalAddress from './internal-address';\n\nexport default function isInternalAddressEqual(addressA: Partial<InternalAddress>, addressB: Partial<InternalAddress>): boolean {\n    return isEqual(normalize(addressA), normalize(addressB));\n}\n\nfunction normalize(address: Partial<InternalAddress>): Partial<InternalAddress> {\n    const ignoredKeys = ['id', 'provinceCode'];\n\n    return (Object.keys(omitPrivate(address) || {}) as Array<keyof InternalAddress>)\n        .reduce(\n            (result, key) => ignoredKeys.indexOf(key) === -1 && address[key] ?\n                { ...result, [key]: address[key] } :\n                result,\n            {}\n        );\n}\n","import { BillingAddress } from '../billing';\n\nimport Address from './address';\nimport InternalAddress from './internal-address';\n\nexport default function mapFromInternalAddress(address: InternalAddress): Address | BillingAddress {\n    return {\n        id: address.id,\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        address1: address.addressLine1,\n        address2: address.addressLine2,\n        city: address.city,\n        stateOrProvince: address.province,\n        stateOrProvinceCode: address.provinceCode,\n        postalCode: address.postCode,\n        country: address.country,\n        countryCode: address.countryCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    };\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport { LoadShippingCountriesAction, ShippingCountryActionType } from './shipping-country-actions';\nimport ShippingCountryRequestSender from './shipping-country-request-sender';\n\nexport default class ShippingCountryActionCreator {\n    constructor(\n        private _shippingCountryRequestSender: ShippingCountryRequestSender\n    ) {}\n\n    loadCountries(options?: RequestOptions): Observable<LoadShippingCountriesAction> {\n        return Observable.create((observer: Observer<LoadShippingCountriesAction>) => {\n            observer.next(createAction(ShippingCountryActionType.LoadShippingCountriesRequested));\n\n            this._shippingCountryRequestSender.loadCountries(options)\n                .then(response => {\n                    observer.next(createAction(ShippingCountryActionType.LoadShippingCountriesSucceeded, response.body.data));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ShippingCountryActionType.LoadShippingCountriesFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\nimport { CountryResponseBody } from '../geography';\n\nexport default class ShippingCountryRequestSender {\n    constructor(\n        private _requestSender: RequestSender,\n        private _config: { locale?: string }\n    ) {}\n\n    loadCountries({ timeout }: RequestOptions = {}): Promise<Response<CountryResponseBody>> {\n        const url = '/internalapi/v1/shipping/countries';\n        const headers = {\n            'Accept-Language': this._config.locale,\n        };\n\n        return this._requestSender.get(url, { headers, timeout });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { AddressRequestBody } from '../address';\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { Registry } from '../common/registry';\n\nimport { ShippingInitializeOptions, ShippingRequestOptions } from './shipping-request-options';\nimport {\n    ShippingStrategyActionType,\n    ShippingStrategyDeinitializeAction,\n    ShippingStrategyInitializeAction,\n    ShippingStrategySelectOptionAction,\n    ShippingStrategyUpdateAddressAction,\n} from './shipping-strategy-actions';\nimport { ShippingStrategy } from './strategies';\n\nexport default class ShippingStrategyActionCreator {\n    constructor(\n        private _strategyRegistry: Registry<ShippingStrategy>\n    ) {}\n\n    updateAddress(address: AddressRequestBody, options?: ShippingRequestOptions): ThunkAction<ShippingStrategyUpdateAddressAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategyUpdateAddressAction>) => {\n            const payment = store.getState().payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n\n            observer.next(createAction(ShippingStrategyActionType.UpdateAddressRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .updateAddress(address, { ...options, methodId })\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.UpdateAddressSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.UpdateAddressFailed, error, { methodId }));\n                });\n        });\n    }\n\n    selectOption(shippingOptionId: string, options?: ShippingRequestOptions): ThunkAction<ShippingStrategySelectOptionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategySelectOptionAction>) => {\n            const payment = store.getState().payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n\n            observer.next(createAction(ShippingStrategyActionType.SelectOptionRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .selectOption(shippingOptionId, { ...options, methodId })\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.SelectOptionSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.SelectOptionFailed, error, { methodId }));\n                });\n        });\n    }\n\n    initialize(options?: ShippingInitializeOptions): ThunkAction<ShippingStrategyInitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategyInitializeAction>) => {\n            const state = store.getState();\n            const payment = state.payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n            const mergedOptions = { ...options, methodId };\n\n            if (methodId && state.shippingStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(ShippingStrategyActionType.InitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .initialize(mergedOptions)\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.InitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.InitializeFailed, error, { methodId }));\n                });\n        });\n    }\n\n    deinitialize(options?: ShippingRequestOptions): ThunkAction<ShippingStrategyDeinitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategyDeinitializeAction>) => {\n            const state = store.getState();\n            const payment = state.payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n\n            if (methodId && !state.shippingStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(ShippingStrategyActionType.DeinitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .deinitialize({ ...options, methodId })\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.DeinitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.DeinitializeFailed, error, { methodId }));\n                });\n        });\n    }\n}\n","import StandardError from './standard-error';\n\nexport default class NotImplementedError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Not implemented.');\n\n        this.type = 'not_implemented';\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors} from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { AmazonPayLoginButton, AmazonPayScriptLoader, AmazonPayWindow } from '../../../payment/strategies/amazon-pay';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../../../remote-checkout';\nimport CustomerCredentials from '../../customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nimport AmazonPayCustomerInitializeOptions from './amazon-pay-customer-initialize-options';\n\nexport default class AmazonPayCustomerStrategy implements CustomerStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _window: AmazonPayWindow;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _remoteCheckoutRequestSender: RemoteCheckoutRequestSender,\n        private _scriptLoader: AmazonPayScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { amazon: amazonOptions, methodId } = options;\n\n        if (!amazonOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.amazon\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => new Promise((resolve, reject) => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const { onError = () => {} } = amazonOptions;\n                const onReady = () => {\n                    this._createSignInButton({\n                        ...amazonOptions,\n                        onError: error => {\n                            reject(error);\n                            onError(error);\n                        },\n                    });\n\n                    resolve();\n                };\n\n                this._scriptLoader.loadWidget(this._paymentMethod, onReady)\n                    .catch(reject);\n            }))\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via AmazonPay, the shopper must click on \"Login with Amazon\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _createSignInButton(options: AmazonPayCustomerInitializeOptions): AmazonPayLoginButton {\n        if (!this._paymentMethod || !this._window.OffAmazonPayments) {\n            throw new NotInitializedError(NotInitializedErrorType.CustomerNotInitialized);\n        }\n\n        if (!this._paymentMethod.config.merchantId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { initializationData } = this._paymentMethod;\n\n        return new this._window.OffAmazonPayments.Button(options.container, this._paymentMethod.config.merchantId, {\n            color: options.color || 'Gold',\n            size: options.size || 'small',\n            type: 'PwA',\n            useAmazonAddressBook: true,\n            onError: options.onError,\n            authorization: () => {\n                this._handleAuthorization(initializationData);\n            },\n        });\n    }\n\n    private _handleAuthorization(options: AuthorizationOptions): void {\n        this._remoteCheckoutRequestSender.generateToken()\n            .then(({ body }) => {\n                if (!this._window.amazon) {\n                    throw new NotInitializedError(NotInitializedErrorType.ShippingNotInitialized);\n                }\n\n                this._window.amazon.Login.authorize({\n                    popup: false,\n                    scope: 'payments:shipping_address payments:billing_address payments:widget profile',\n                    state: `${options.tokenPrefix}${body.token}`,\n                }, options.redirectUrl);\n\n                this._remoteCheckoutRequestSender.trackAuthorizationEvent();\n            });\n    }\n}\n\ninterface AuthorizationOptions {\n    redirectUrl: string;\n    tokenPrefix: string;\n}\n","import { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError } from '../../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { BraintreeVisaCheckoutPaymentProcessor } from '../../../payment/strategies/braintree';\nimport { VisaCheckoutScriptLoader } from '../../../payment/strategies/braintree';\nimport { VisaCheckoutPaymentSuccessPayload } from '../../../payment/strategies/braintree/visacheckout';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport CustomerCredentials from '../../customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategyActionCreator from '../../customer-strategy-action-creator';\n\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class BraintreeVisaCheckoutCustomerStrategy implements CustomerStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _buttonClassName: string = 'visa-checkout-wrapper';\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _customerStrategyActionCreator: CustomerStrategyActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _braintreeVisaCheckoutPaymentProcessor: BraintreeVisaCheckoutPaymentProcessor,\n        private _visaCheckoutScriptLoader: VisaCheckoutScriptLoader\n    ) {}\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { braintreevisacheckout: visaCheckoutOptions, methodId } = options;\n\n        if (!visaCheckoutOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.braintreevisacheckout\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                const checkout = state.checkout.getCheckout();\n                const storeConfig = state.config.getStoreConfig();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const {\n                    container,\n                    onError = () => {},\n                } = visaCheckoutOptions;\n\n                const initOptions = {\n                    locale: storeConfig.storeProfile.storeLanguage,\n                    collectShipping: true,\n                    subtotal: checkout.subtotal,\n                    currencyCode: storeConfig.currency.code,\n                };\n\n                return Promise.all([\n                    this._visaCheckoutScriptLoader.load(this._paymentMethod.config.testMode),\n                    this._braintreeVisaCheckoutPaymentProcessor.initialize(this._paymentMethod.clientToken, initOptions),\n                ])\n                .then(([visaCheckout, initOptions]) => {\n                    const signInButton = this._createSignInButton(container, this._buttonClassName);\n\n                    visaCheckout.init(initOptions);\n                    visaCheckout.on('payment.success', (paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) =>\n                        this._paymentInstrumentSelected(paymentSuccessPayload)\n                            .catch(error => onError(error))\n                    );\n                    visaCheckout.on('payment.error', (payment, error) => onError(error));\n\n                    return signInButton;\n                })\n                .then(signInButton => { signInButton.style.visibility = 'visible'; });\n            })\n            .then(() => this._store.getState());\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via VisaCheckout, the shopper must click on \"Visa Checkout\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut('braintreevisacheckout', options)\n        );\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        return this._braintreeVisaCheckoutPaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    private _paymentInstrumentSelected(paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) {\n        const state = this._store.getState();\n\n        if (!this._paymentMethod) {\n            throw new Error('Payment method not initialized');\n        }\n\n        const { id: methodId } = this._paymentMethod;\n\n        return this._store.dispatch(\n            this._customerStrategyActionCreator.widgetInteraction(() => {\n                return this._braintreeVisaCheckoutPaymentProcessor.handleSuccess(\n                    paymentSuccessPayload,\n                    state.shippingAddress.getShippingAddress(),\n                    state.billingAddress.getBillingAddress()\n                )\n                .then(() => this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()));\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _createSignInButton(containerId: string, buttonClass: string): HTMLElement {\n        const container = document.querySelector(`#${containerId}`);\n\n        if (!container) {\n            throw new Error('Need a container to place the button');\n        }\n\n        return (container.querySelector('.' + buttonClass) as HTMLElement) ||\n            this._insertVisaCheckoutButton(container, buttonClass);\n    }\n\n    private _insertVisaCheckoutButton(container: Element, buttonClass: string): HTMLElement {\n        const buttonSource = 'https://secure.checkout.visa.com/wallet-services-web/xo/button.png?acceptCanadianVisaDebit=false&cobrand=true&size=154';\n        const buttonTemplate = `\n            <img\n                alt=\"Visa Checkout\"\n                class=\"v-button\"\n                role=\"button\"\n                src=\"${buttonSource}\"\n                />\n            <a class=\"v-learn v-learn-default\" style=\"text-align: right; display: block; font-size: 10px; color: #003366;\" href=\"#\" data-locale=\"en_US\">Tell Me More</a>`;\n\n        const visaCheckoutButton = document.createElement('div');\n        visaCheckoutButton.style.visibility = 'hidden';\n        visaCheckoutButton.className = buttonClass;\n        visaCheckoutButton.innerHTML = buttonTemplate;\n\n        container.appendChild(visaCheckoutButton);\n\n        return visaCheckoutButton;\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { toFormUrlEncoded } from '../../../common/http-request';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { ChasePayScriptLoader, ChasePaySuccessPayload } from '../../../payment/strategies/chasepay';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport CustomerCredentials from '../../customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\n\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class ChasePayCustomerStrategy implements CustomerStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _chasePayScriptLoader: ChasePayScriptLoader,\n        private _requestSender: RequestSender,\n        private _formPoster: FormPoster\n    ) {}\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { chasepay: chasePayOptions, methodId } = options;\n\n        if (!chasePayOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.chasepay\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                const cart = state.cart.getCart();\n                const storeConfig = state.config.getStoreConfig();\n\n                if (!cart) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCart);\n                }\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!this._paymentMethod || !this._paymentMethod.initializationData.digitalSessionId) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n\n                const { container } = chasePayOptions;\n\n                return this._chasePayScriptLoader.load(this._paymentMethod.config.testMode)\n                    .then(JPMC => {\n                        const ChasePay = JPMC.ChasePay;\n\n                        ChasePay.configure({\n                            language: storeConfig.storeProfile.storeLanguage,\n                        });\n\n                        if (ChasePay.isChasePayUp) {\n                            ChasePay.insertButtons({\n                                containers: [container],\n                            });\n                        }\n\n                        ChasePay.on(ChasePay.EventType.START_CHECKOUT, () => {\n                            this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n                                .then(() => {\n                                    const state = this._store.getState();\n                                    const method = state.paymentMethods.getPaymentMethod(methodId);\n                                    const sessionId = method && method.initializationData && method.initializationData.digitalSessionId;\n\n                                    if (sessionId) {\n                                        ChasePay.startCheckout(sessionId);\n                                    }\n                                });\n                        });\n\n                        ChasePay.on(ChasePay.EventType.COMPLETE_CHECKOUT, (payload: ChasePaySuccessPayload) => {\n                            const state = this._store.getState();\n                            const method = state.paymentMethods.getPaymentMethod(methodId);\n                            const requestId = method && method.initializationData && method.initializationData.merchantRequestId;\n\n                            if (requestId) {\n                                this._setExternalCheckoutData(payload, requestId)\n                                    .then(() => {\n                                        this._reloadPage();\n                                });\n                            }\n                        });\n                    });\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Chase Pay®, the shopper must click on \"Chase Pay®\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _setExternalCheckoutData(payload: ChasePaySuccessPayload, requestId: string): Promise<Response> {\n        const url = `checkout.php?provider=chasepay&action=set_external_checkout`;\n        const options = {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\n            },\n            body: toFormUrlEncoded({\n                sessionToken: payload.sessionToken,\n                merchantRequestId: requestId,\n            }),\n            method: 'post',\n        };\n\n        return this._requestSender.sendRequest(url, options);\n    }\n\n    private _reloadPage() {\n        this._formPoster.postForm('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            params: {\n                fromChasePay: true,\n            },\n        });\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport CustomerActionCreator from '../../customer-action-creator';\nimport CustomerCredentials from '../../customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\n\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class DefaultCustomerStrategy implements CustomerStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _customerActionCreator: CustomerActionCreator\n    ) {}\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._customerActionCreator.signInCustomer(credentials, options)\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._customerActionCreator.signOutCustomer(options)\n        );\n    }\n\n    initialize(options?: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError } from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { GooglePayPaymentProcessor } from '../../../payment/strategies/googlepay';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport CustomerCredentials from '../../customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nimport GooglePayCustomerInitializeOptions from './googlepay-customer-initialize-options';\n\nexport default class GooglePayCustomerStrategy implements CustomerStrategy {\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _googlePayPaymentProcessor: GooglePayPaymentProcessor,\n        private _formPoster: FormPoster\n    ) {}\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId }  = options;\n\n        const googlePayOptions = this._getGooglePayOptions(options);\n\n        if (!methodId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._googlePayPaymentProcessor.initialize(methodId)\n            .then(() => {\n                this._walletButton = this._createSignInButton(googlePayOptions.container);\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._walletButton && this._walletButton.parentNode) {\n            this._walletButton.parentNode.removeChild(this._walletButton);\n            this._walletButton = undefined;\n        }\n\n        return this._googlePayPaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Google Pay, the shopper must click on \"Google Pay\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const container = document.querySelector(`#${containerId}`);\n\n        if (!container) {\n            throw new InvalidArgumentError('Unable to create sign-in button without valid container ID.');\n        }\n\n        const button = this._googlePayPaymentProcessor.createButton(this._handleWalletButtonClick);\n\n        container.appendChild(button);\n\n        return button;\n    }\n\n    private _getGooglePayOptions(options: CustomerInitializeOptions): GooglePayCustomerInitializeOptions {\n        if (options.methodId === 'googlepaybraintree' && options.googlepaybraintree) {\n            return options.googlepaybraintree;\n        }\n\n        if (options.methodId === 'googlepaystripe' && options.googlepaystripe) {\n            return options.googlepaystripe;\n        }\n\n        throw new InvalidArgumentError();\n    }\n\n    private _onPaymentSelectComplete(): void {\n        this._formPoster.postForm('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n        });\n    }\n\n    private _onError(error?: Error): void {\n        if (error && error.message !== 'CANCELED') {\n            throw error;\n        }\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): Promise<void> {\n        event.preventDefault();\n\n        return this._googlePayPaymentProcessor.displayWallet()\n            .then(paymentData => this._googlePayPaymentProcessor.handleSuccess(paymentData)\n            .then(() => {\n                if (paymentData.shippingAddress) {\n                    this._googlePayPaymentProcessor.updateShippingAddress(paymentData.shippingAddress);\n                }\n            }))\n            .then(() => this._onPaymentSelectComplete())\n            .catch(error => this._onError(error));\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotImplementedError\n} from '../../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { getCallbackUrl, MasterpassScriptLoader } from '../../../payment/strategies/masterpass';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport CustomerCredentials from '../../customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\n\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class MasterpassCustomerStrategy implements CustomerStrategy {\n    private _signInButton?: HTMLElement;\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _masterpassScriptLoader: MasterpassScriptLoader\n    ) {}\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { masterpass: masterpassOptions, methodId } = options;\n\n        if (!masterpassOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.masterpass\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n                if (!this._paymentMethod || !this._paymentMethod.initializationData.checkoutId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const cart = state.cart.getCart();\n                if (!cart) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCart);\n                }\n\n                const { container } = masterpassOptions;\n\n                const payload = {\n                    checkoutId: this._paymentMethod.initializationData.checkoutId,\n                    allowedCardTypes: this._paymentMethod.initializationData.allowedCardTypes,\n                    amount: cart.cartAmount.toString(),\n                    currency: cart.currency.code,\n                    cartId: cart.id,\n                    suppressShippingAddress: false,\n                    callbackUrl: getCallbackUrl('checkout'),\n                };\n\n                return this._masterpassScriptLoader.load(this._paymentMethod.config.testMode)\n                    .then(Masterpass => {\n                        this._signInButton = this._createSignInButton(container);\n\n                        this._signInButton.addEventListener('click', () => {\n                            Masterpass.checkout(payload);\n                        });\n                    });\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        if (this._signInButton && this._signInButton.parentNode) {\n            this._signInButton.parentNode.removeChild(this._signInButton);\n            this._signInButton = undefined;\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Masterpass, the shopper must click on \"Masterpass\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const container = document.querySelector(`#${containerId}`);\n\n        if (!container) {\n            throw new InvalidArgumentError('Unable to create sign-in button without valid container ID.');\n        }\n\n        const button = document.createElement('input');\n\n        button.type = 'image';\n        button.src = 'https://static.masterpass.com/dyn/img/btn/global/mp_chk_btn_160x037px.svg';\n        container.appendChild(button);\n\n        return button;\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { NotImplementedError} from '../../../common/error/errors';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport CustomerCredentials from '../../customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\n\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class SquareCustomerStrategy implements CustomerStrategy {\n\n    constructor(\n        private _store: CheckoutStore,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator\n    ) {}\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Masterpass, the shopper must click on \"Masterpass\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    initialize(options?: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { CheckoutActionCreator, CheckoutRequestSender, CheckoutStore } from '../checkout';\nimport { Registry } from '../common/registry';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { PaymentMethodActionCreator, PaymentMethodRequestSender } from '../payment';\nimport { AmazonPayScriptLoader } from '../payment/strategies/amazon-pay';\nimport {\n    createBraintreeVisaCheckoutPaymentProcessor,\n    BraintreeScriptLoader,\n    BraintreeSDKCreator,\n    VisaCheckoutScriptLoader\n} from '../payment/strategies/braintree';\nimport { ChasePayScriptLoader } from '../payment/strategies/chasepay';\nimport { createGooglePayPaymentProcessor, GooglePayBraintreeInitializer, GooglePayStripeInitializer } from '../payment/strategies/googlepay';\nimport { MasterpassScriptLoader } from '../payment/strategies/masterpass';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../remote-checkout';\n\nimport CustomerActionCreator from './customer-action-creator';\nimport CustomerRequestSender from './customer-request-sender';\nimport CustomerStrategyActionCreator from './customer-strategy-action-creator';\nimport { CustomerStrategy } from './strategies';\nimport { AmazonPayCustomerStrategy } from './strategies/amazon';\nimport { BraintreeVisaCheckoutCustomerStrategy } from './strategies/braintree';\nimport { ChasePayCustomerStrategy } from './strategies/chasepay';\nimport { DefaultCustomerStrategy } from './strategies/default';\nimport { GooglePayCustomerStrategy } from './strategies/googlepay';\nimport { MasterpassCustomerStrategy } from './strategies/masterpass';\nimport { SquareCustomerStrategy } from './strategies/square';\n\nexport default function createCustomerStrategyRegistry(\n    store: CheckoutStore,\n    requestSender: RequestSender\n): Registry<CustomerStrategy> {\n    const registry = new Registry<CustomerStrategy>();\n    const scriptLoader = getScriptLoader();\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const checkoutActionCreator = new CheckoutActionCreator(\n        checkoutRequestSender,\n        new ConfigActionCreator(new ConfigRequestSender(requestSender))\n    );\n    const formPoster = createFormPoster();\n    const paymentMethodActionCreator = new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender));\n    const remoteCheckoutRequestSender = new RemoteCheckoutRequestSender(requestSender);\n    const remoteCheckoutActionCreator = new RemoteCheckoutActionCreator(remoteCheckoutRequestSender);\n\n    registry.register('amazon', () =>\n        new AmazonPayCustomerStrategy(\n            store,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            remoteCheckoutRequestSender,\n            new AmazonPayScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('braintreevisacheckout', () =>\n        new BraintreeVisaCheckoutCustomerStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            new CustomerStrategyActionCreator(registry),\n            remoteCheckoutActionCreator,\n            createBraintreeVisaCheckoutPaymentProcessor(scriptLoader, requestSender),\n            new VisaCheckoutScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('chasepay', () =>\n        new ChasePayCustomerStrategy(\n            store,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new ChasePayScriptLoader(scriptLoader),\n            requestSender,\n            formPoster\n        )\n    );\n\n    registry.register('squarev2', () =>\n        new SquareCustomerStrategy(\n            store,\n            new RemoteCheckoutActionCreator(remoteCheckoutRequestSender)\n        )\n    );\n\n    registry.register('masterpass', () =>\n        new MasterpassCustomerStrategy(\n            store,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new MasterpassScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('googlepaybraintree', () =>\n        new GooglePayCustomerStrategy(\n            store,\n            remoteCheckoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayBraintreeInitializer(\n                    new BraintreeSDKCreator(\n                        new BraintreeScriptLoader(scriptLoader)\n                    )\n                )\n            ),\n            formPoster\n        )\n    );\n\n    registry.register('googlepaystripe', () =>\n        new GooglePayCustomerStrategy(\n            store,\n            remoteCheckoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayStripeInitializer()\n            ),\n            formPoster\n    )\n);\n\n    registry.register('default', () =>\n        new DefaultCustomerStrategy(\n            store,\n            new CustomerActionCreator(\n                new CustomerRequestSender(requestSender),\n                checkoutActionCreator\n            )\n        )\n    );\n\n    return registry;\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\n\nimport { isInternalAddressEqual, mapFromInternalAddress, AddressRequestBody } from '../../../address';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { AmazonPayAddressBook, AmazonPayOrderReference, AmazonPayScriptLoader, AmazonPayWindow } from '../../../payment/strategies/amazon-pay';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { RemoteCheckoutSynchronizationError } from '../../../remote-checkout/errors';\nimport ConsignmentActionCreator from '../../consignment-action-creator';\nimport { ShippingInitializeOptions, ShippingRequestOptions } from '../../shipping-request-options';\nimport { ShippingStrategyActionType } from '../../shipping-strategy-actions';\nimport ShippingStrategy from '../shipping-strategy';\n\nimport AmazonPayShippingInitializeOptions from './amazon-pay-shipping-initialize-options';\n\nexport default class AmazonPayShippingStrategy implements ShippingStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _window: AmazonPayWindow;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _consignmentActionCreator: ConsignmentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _scriptLoader: AmazonPayScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    initialize(options: ShippingInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { amazon: amazonOptions, methodId } = options;\n\n        if (!amazonOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.amazon\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => new Promise((resolve, reject) => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const onReady = () => {\n                    this._createAddressBook(amazonOptions)\n                        .then(resolve)\n                        .catch(reject);\n                };\n\n                this._scriptLoader.loadWidget(this._paymentMethod, onReady)\n                    .catch(reject);\n            }))\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    updateAddress(address: AddressRequestBody, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    selectOption(optionId: string, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.selectShippingOption(optionId, options)\n        );\n    }\n\n    private _createAddressBook(options: AmazonPayShippingInitializeOptions): Promise<AmazonPayAddressBook> {\n        return new Promise((resolve, reject) => {\n            const { container, onAddressSelect = () => {}, onError = () => {}, onReady = () => {} } = options;\n            const merchantId = this._paymentMethod && this._paymentMethod.config.merchantId;\n\n            if (!document.getElementById(container)) {\n                return reject(new InvalidArgumentError('Unable to create AmazonPay AddressBook widget without valid container ID.'));\n            }\n\n            if (!this._window.OffAmazonPayments) {\n                return reject(new NotInitializedError(NotInitializedErrorType.ShippingNotInitialized));\n            }\n\n            if (!merchantId) {\n                return reject(new MissingDataError(MissingDataErrorType.MissingPaymentMethod));\n            }\n\n            const widget = new this._window.OffAmazonPayments.Widgets.AddressBook({\n                design: {\n                    designMode: 'responsive',\n                },\n                scope: 'payments:billing_address payments:shipping_address payments:widget profile',\n                sellerId: merchantId,\n                onAddressSelect: orderReference => {\n                    this._synchronizeShippingAddress()\n                        .then(() => onAddressSelect(orderReference))\n                        .catch(onError);\n                },\n                onError: error => {\n                    reject(error);\n                    onError(error);\n                },\n                onReady: orderReference => {\n                    this._updateOrderReference(orderReference)\n                        .then(() => {\n                            resolve();\n                            onReady(orderReference);\n                        })\n                        .catch(onError);\n                },\n            });\n\n            widget.bind(container);\n\n            return widget;\n        });\n    }\n\n    private _synchronizeShippingAddress(): Promise<InternalCheckoutSelectors> {\n        const methodId = this._paymentMethod && this._paymentMethod.id;\n        const amazon = this._store.getState().remoteCheckout.getCheckout('amazon');\n        const referenceId = amazon ? amazon.referenceId : undefined;\n\n        if (!methodId || !referenceId) {\n            throw new RemoteCheckoutSynchronizationError();\n        }\n\n        return this._store.dispatch(\n            createAction(ShippingStrategyActionType.UpdateAddressRequested, undefined, { methodId })\n        )\n            .then(() => this._store.dispatch(\n                this._remoteCheckoutActionCreator.initializeShipping(methodId, { referenceId })\n            ))\n            .then(state => {\n                const amazon = state.remoteCheckout.getCheckout('amazon');\n                const remoteAddress = amazon && amazon.shipping && amazon.shipping.address;\n                const address = state.shippingAddress.getShippingAddress();\n\n                if (remoteAddress === false) {\n                    throw new RemoteCheckoutSynchronizationError();\n                }\n\n                if (!remoteAddress || isInternalAddressEqual(remoteAddress, address || {})) {\n                    return this._store.getState();\n                }\n\n                return this._store.dispatch(\n                    this._consignmentActionCreator.updateAddress(mapFromInternalAddress(remoteAddress))\n                );\n            })\n            .then(() => this._store.dispatch(\n                createAction(ShippingStrategyActionType.UpdateAddressSucceeded, undefined, { methodId })\n            ))\n            .catch(error => this._store.dispatch(\n                createErrorAction(ShippingStrategyActionType.UpdateAddressFailed, error, { methodId })\n            ));\n    }\n\n    private _updateOrderReference(orderReference: AmazonPayOrderReference): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.updateCheckout('amazon', {\n                referenceId: orderReference.getAmazonOrderReferenceId(),\n            })\n        );\n    }\n}\n","import { AddressRequestBody } from '../../../address';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport ConsignmentActionCreator from '../../consignment-action-creator';\nimport { ShippingRequestOptions } from '../../shipping-request-options';\n\nimport ShippingStrategy from '../shipping-strategy';\n\nexport default class DefaultShippingStrategy implements ShippingStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _consignmentActionCreator: ConsignmentActionCreator\n    ) {}\n\n    updateAddress(address: AddressRequestBody, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.updateAddress(address, options)\n        );\n    }\n\n    selectOption(optionId: string, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.selectShippingOption(optionId, options)\n        );\n    }\n\n    initialize(options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { CheckoutRequestSender, CheckoutStore } from '../checkout';\nimport { Registry } from '../common/registry';\nimport { PaymentMethodActionCreator, PaymentMethodRequestSender } from '../payment';\nimport { AmazonPayScriptLoader } from '../payment/strategies/amazon-pay';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../remote-checkout';\n\nimport ConsignmentActionCreator from './consignment-action-creator';\nimport ConsignmentRequestSender from './consignment-request-sender';\nimport { ShippingStrategy } from './strategies';\nimport { AmazonPayShippingStrategy } from './strategies/amazon';\nimport { DefaultShippingStrategy } from './strategies/default';\n\nexport default function createShippingStrategyRegistry(\n    store: CheckoutStore,\n    requestSender: RequestSender\n): Registry<ShippingStrategy> {\n    const registry = new Registry<ShippingStrategy>();\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const consignmentRequestSender = new ConsignmentRequestSender(requestSender);\n    const consignmentActionCreator = new ConsignmentActionCreator(consignmentRequestSender, checkoutRequestSender);\n\n    registry.register('amazon', () =>\n        new AmazonPayShippingStrategy(\n            store,\n            consignmentActionCreator,\n            new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender)),\n            new RemoteCheckoutActionCreator(new RemoteCheckoutRequestSender(requestSender)),\n            new AmazonPayScriptLoader(getScriptLoader())\n        )\n    );\n\n    registry.register('default', () =>\n        new DefaultShippingStrategy(\n            store,\n            consignmentActionCreator\n        )\n    );\n\n    return registry;\n}\n","module.exports = require(\"@bigcommerce/bigpay-client\");","module.exports = require(\"messageformat\");","import { Response } from '@bigcommerce/request-sender';\n\nimport RequestError from './request-error';\n\nexport default class TimeoutError extends RequestError<{}> {\n    constructor(response?: Response) {\n        super(response, {\n            message: 'The request has timed out or aborted.',\n        });\n\n        this.type = 'timeout';\n    }\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { cachableAction, ActionOptions } from '../common/action';\nimport { RequestOptions } from '../common/http-request';\n\nimport { ConfigRequestSender } from '.';\nimport { ConfigActionType, LoadConfigAction } from './config-actions';\n\nexport default class ConfigActionCreator {\n    constructor(\n        private _configRequestSender: ConfigRequestSender\n    ) {}\n\n    @cachableAction\n    loadConfig(options?: RequestOptions & ActionOptions): Observable<LoadConfigAction> {\n        return Observable.create((observer: Observer<LoadConfigAction>) => {\n            observer.next(createAction(ConfigActionType.LoadConfigRequested));\n\n            this._configRequestSender.loadConfig(options)\n                .then(response => {\n                    observer.next(createAction(ConfigActionType.LoadConfigSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConfigActionType.LoadConfigFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, INTERNAL_USE_ONLY, RequestOptions } from '../common/http-request';\n\nimport Config from './config';\n\nexport default class ConfigRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadConfig({ timeout }: RequestOptions = {}): Promise<Response<Config>> {\n        const url = '/api/storefront/checkout-settings';\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n        });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Response } from '@bigcommerce/request-sender';\nimport { Observable, Observer } from 'rxjs';\n\nimport { Checkout, InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType, StandardError } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { GuestCredentials } from '../customer';\n\nimport { BillingAddressRequestSender } from '.';\nimport { BillingAddressUpdateRequestBody } from './billing-address';\nimport { BillingAddressActionType, ContinueAsGuestAction, UpdateBillingAddressAction } from './billing-address-actions';\n\nexport default class BillingAddressActionCreator {\n    constructor(\n        private _requestSender: BillingAddressRequestSender\n    ) {}\n\n    continueAsGuest(\n        credentials: GuestCredentials,\n        options?: RequestOptions\n    ): ThunkAction<ContinueAsGuestAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ContinueAsGuestAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const customer = state.customer.getCustomer();\n\n            if (customer && !customer.isGuest) {\n                throw new StandardError('Cannot continue as guest: customer is logged in.');\n            }\n\n            const billingAddress = state.billingAddress.getBillingAddress();\n\n            let billingAddressRequestBody;\n\n            if (!billingAddress) {\n                billingAddressRequestBody = credentials;\n            } else {\n                const { country, ...existingBillingAddressRequestBody } = billingAddress;\n\n                billingAddressRequestBody = {\n                    ...existingBillingAddressRequestBody,\n                    ...credentials,\n                };\n            }\n\n            observer.next(createAction(BillingAddressActionType.ContinueAsGuestRequested));\n\n            this._createOrUpdateBillingAddress(checkout.id, billingAddressRequestBody, options)\n                .then(({ body }) => {\n                    observer.next(createAction(BillingAddressActionType.ContinueAsGuestSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(BillingAddressActionType.ContinueAsGuestFailed, response));\n                });\n        });\n    }\n\n    updateAddress(\n        address: Partial<BillingAddressUpdateRequestBody>,\n        options?: RequestOptions\n    ): ThunkAction<UpdateBillingAddressAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateBillingAddressAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(BillingAddressActionType.UpdateBillingAddressRequested));\n\n            const billingAddress = state.billingAddress.getBillingAddress();\n\n            // If email is not present in the address provided by the client, then\n            // fall back to the stored email as it could have been set separately\n            // using a convenience method. We can't rely on billingAddress having\n            // an ID to consider that there's a preexisting email, as billingAddress\n            // object from Order doesn't have an ID.\n            const billingAddressRequestBody = {\n                ...address,\n                email: typeof address.email === 'undefined' && billingAddress ? billingAddress.email : address.email,\n            };\n\n            if (billingAddress && billingAddress.id) {\n                billingAddressRequestBody.id = billingAddress.id;\n            }\n\n            this._createOrUpdateBillingAddress(checkout.id, billingAddressRequestBody, options)\n                .then(({ body }) => {\n                    observer.next(createAction(BillingAddressActionType.UpdateBillingAddressSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(BillingAddressActionType.UpdateBillingAddressFailed, response));\n                });\n        });\n    }\n\n    private _createOrUpdateBillingAddress(\n        checkoutId: string,\n        address: Partial<BillingAddressUpdateRequestBody>,\n        options?: RequestOptions\n    ): Promise<Response<Checkout>> {\n        if (!address.id) {\n            return this._requestSender.createAddress(checkoutId, address, options);\n        }\n\n        return this._requestSender.updateAddress(checkoutId, address, options);\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { AddressRequestBody } from '../address';\nimport { Checkout } from '../checkout';\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nimport { BillingAddressUpdateRequestBody } from './billing-address';\n\nconst DEFAULT_PARAMS = {\n    include: [\n        'cart.lineItems.physicalItems.options',\n        'cart.lineItems.digitalItems.options',\n        'customer',\n        'promotions.banners',\n    ].join(','),\n};\n\nexport default class BillingAddressRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    createAddress(checkoutId: string, address: Partial<AddressRequestBody>, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/billing-address`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, { body: address, params: DEFAULT_PARAMS, headers, timeout });\n    }\n\n    updateAddress(checkoutId: string, address: Partial<BillingAddressUpdateRequestBody>, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const { id, ...body } = address;\n        const url = `/api/storefront/checkouts/${checkoutId}/billing-address/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.put(url, { params: DEFAULT_PARAMS, body, headers, timeout });\n    }\n}\n","import { InvalidArgumentError } from '../error/errors';\n\nexport default class Registry<T, K extends string = string> {\n    private _factories: { [key: string]: Factory<T> };\n    private _instances: { [key: string]: T };\n    private _options: RegistryOptions;\n\n    constructor(options?: RegistryOptions) {\n        this._factories = {};\n        this._instances = {};\n        this._options = { defaultToken: 'default', ...options };\n    }\n\n    get(token?: K, cacheToken?: string): T {\n        try {\n            return this._getInstance(\n                token || this._options.defaultToken,\n                cacheToken || token || this._options.defaultToken\n            );\n        } catch (error) {\n            return this._getInstance(\n                this._options.defaultToken,\n                cacheToken || this._options.defaultToken\n            );\n        }\n    }\n\n    register(token: K, factory: Factory<T>): void {\n        if (this._hasFactory(token)) {\n            throw new InvalidArgumentError(`'${token}' is already registered.`);\n        }\n\n        this._factories[token] = factory;\n    }\n\n    protected _hasFactory(token: string): boolean {\n        return !!this._factories[token];\n    }\n\n    private _hasInstance(token: string): boolean {\n        return !!this._instances[token];\n    }\n\n    private _getInstance(token: string, cacheToken: string): T {\n        if (!this._hasInstance(cacheToken)) {\n            const factory = this._factories[token];\n\n            if (!factory) {\n                throw new InvalidArgumentError(`'${token}' is not registered.`);\n            }\n\n            this._instances[cacheToken] = factory();\n        }\n\n        return this._instances[cacheToken];\n    }\n}\n\nexport type Factory<T> = () => T;\n\nexport interface RegistryOptions {\n    defaultToken: string;\n}\n","export default function toFormUrlEncoded(data: { [key: string]: object | string | undefined }): string {\n    return Object.keys(data)\n        .filter(key => data[key] !== undefined)\n        .map(key => {\n            const value = data[key];\n\n            if (typeof value === 'string') {\n                return `${key}=${encodeURIComponent(value)}`;\n            }\n\n            return `${key}=${encodeURIComponent(JSON.stringify(value) || '')}`;\n        })\n        .join('&');\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { Masterpass, MasterpassHostWindow } from './masterpass';\n\nexport default class MasterpassScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        public _window: MasterpassHostWindow = window\n    ) {}\n\n    load(testMode?: boolean): Promise<Masterpass> {\n        return this._scriptLoader\n            .loadScript(`//${testMode ? 'sandbox.' : ''}masterpass.com/integration/merchant.js`)\n            .then(() => {\n                if (!this._window.masterpass) {\n                    throw new StandardError();\n                }\n\n                return this._window.masterpass;\n            });\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class RemoteCheckoutSynchronizationError extends StandardError {\n    constructor(\n        public error?: Error\n    ) {\n        super('Unable to synchronize your checkout details with a third party provider. Please try again later.');\n\n        this.type = 'remote_checkout_synchronization';\n    }\n}\n","import { round } from 'lodash';\n\nimport { Checkout } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport PaymentMethod from '../../payment-method';\nimport { BraintreeSDKCreator, GooglePayBraintreeSDK } from '../braintree';\n\nimport {\n    GooglePaymentData,\n    GooglePayInitializer,\n    GooglePayPaymentDataRequestV2,\n    TokenizePayload\n} from './googlepay';\nimport { GooglePayBraintreeDataRequest, GooglePayBraintreePaymentDataRequestV1 } from './googlepay-braintree';\n\nexport default class GooglePayBraintreeInitializer implements GooglePayInitializer {\n    private _googlePaymentInstance!: GooglePayBraintreeSDK;\n\n    constructor(\n        private _braintreeSDKCreator: BraintreeSDKCreator\n    ) {}\n\n    initialize(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        if (!paymentMethod.clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._braintreeSDKCreator.initialize(paymentMethod.clientToken);\n\n        return this._braintreeSDKCreator.getGooglePaymentComponent()\n            .then(googleBraintreePaymentInstance => {\n                this._googlePaymentInstance = googleBraintreePaymentInstance;\n\n                return this._createGooglePayPayload(\n                    checkout,\n                    paymentMethod.initializationData,\n                    hasShippingAddress\n                );\n            });\n    }\n\n    teardown(): Promise<void> {\n        return this._braintreeSDKCreator.teardown();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): TokenizePayload {\n        const payload = JSON.parse(paymentData.paymentMethodData.tokenizationData.token).androidPayCards[0];\n\n        return {\n            nonce: payload.nonce,\n            type: payload.type,\n            description: payload.description,\n            details: {\n                cardType: payload.details.cardType,\n                lastFour: payload.details.lastFour,\n                lastTwo: payload.details.lastTwo,\n            },\n            binData: payload.binData,\n        };\n    }\n\n    private _createGooglePayPayload(\n        checkout: Checkout,\n        initializationData: any,\n        hasShippingAddress: boolean\n    ): GooglePayPaymentDataRequestV2 {\n        if (!initializationData.platformToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const googlePayBraintreePaymentDataRequest: GooglePayBraintreeDataRequest = {\n            merchantInfo: {\n                authJwt: initializationData.platformToken,\n                merchantName: initializationData.googleMerchantName,\n                merchantId: initializationData.googleMerchantId,\n            },\n            transactionInfo: {\n                currencyCode: checkout.cart.currency.code,\n                totalPriceStatus: 'FINAL',\n                totalPrice: round(checkout.grandTotal, 2).toFixed(2),\n            },\n            cardRequirements: {\n                billingAddressRequired: true,\n                billingAddressFormat: 'FULL',\n            },\n            shippingAddressRequired: !hasShippingAddress,\n            emailRequired: true,\n            phoneNumberRequired: true,\n        };\n\n        return this._mapGooglePayBraintreeDataRequestToGooglePayDataRequestV2(\n            this._googlePaymentInstance.createPaymentDataRequest(googlePayBraintreePaymentDataRequest)\n        );\n    }\n\n    private _mapGooglePayBraintreeDataRequestToGooglePayDataRequestV2(googlePayBraintreeDataRequestV1: GooglePayBraintreePaymentDataRequestV1): GooglePayPaymentDataRequestV2 {\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt: googlePayBraintreeDataRequestV1.merchantInfo.authJwt,\n                merchantId: googlePayBraintreeDataRequestV1.merchantInfo.merchantId,\n                merchantName: googlePayBraintreeDataRequestV1.merchantInfo.merchantName,\n            },\n            allowedPaymentMethods: [{\n                type: 'CARD',\n                parameters: {\n                    allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                    allowedCardNetworks: googlePayBraintreeDataRequestV1.cardRequirements.allowedCardNetworks,\n                    billingAddressRequired: true,\n                    billingAddressParameters: {\n                        format: 'FULL',\n                        phoneNumberRequired: true,\n                    },\n                },\n                tokenizationSpecification: {\n                    type: 'PAYMENT_GATEWAY',\n                    parameters: {\n                        gateway: 'braintree',\n                        'braintree:apiVersion': 'v1',\n                        'braintree:authorizationFingerprint': googlePayBraintreeDataRequestV1.paymentMethodTokenizationParameters.parameters['braintree:authorizationFingerprint'],\n                        'braintree:merchantId': googlePayBraintreeDataRequestV1.paymentMethodTokenizationParameters.parameters['braintree:merchantId'],\n                        'braintree:sdkVersion': googlePayBraintreeDataRequestV1.paymentMethodTokenizationParameters.parameters['braintree:sdkVersion'],\n                    },\n                },\n            }],\n            transactionInfo: googlePayBraintreeDataRequestV1.transactionInfo,\n            emailRequired: true,\n            shippingAddressRequired: googlePayBraintreeDataRequestV1.shippingAddressRequired,\n            shippingAddressParameters: {\n                phoneNumberRequired: googlePayBraintreeDataRequestV1.phoneNumberRequired,\n            },\n        };\n    }\n}\n","import { round } from 'lodash';\n\nimport { Checkout } from '../../../checkout';\nimport { InvalidArgumentError } from '../../../common/error/errors';\nimport PaymentMethod from '../../payment-method';\n\nimport {\n    GooglePaymentData,\n    GooglePayInitializer,\n    GooglePayPaymentDataRequestV2,\n    TokenizePayload\n} from './googlepay';\n\nexport default class GooglePayStripeInitializer implements GooglePayInitializer {\n    initialize(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        return Promise.resolve(this._mapGooglePayStripeDataRequestToGooglePayDataRequestV2(\n            checkout,\n            paymentMethod.initializationData,\n            hasShippingAddress\n        ));\n    }\n\n    teardown(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): TokenizePayload {\n        try {\n            const payload = JSON.parse(paymentData.paymentMethodData.tokenizationData.token);\n\n            return {\n                nonce: payload.id,\n                type: payload.type,\n                details: {\n                    cardType: payload.card.brand,\n                    lastFour: payload.card.last4,\n                },\n            };\n        } catch (err) {\n            throw new InvalidArgumentError('Unable to parse response from Google Pay.');\n        }\n    }\n\n    private _mapGooglePayStripeDataRequestToGooglePayDataRequestV2(\n        checkout: Checkout,\n        initializationData: any,\n        hasShippingAddress: boolean\n    ): GooglePayPaymentDataRequestV2 {\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt: initializationData.platformToken,\n                merchantId: initializationData.googleMerchantId,\n                merchantName: initializationData.googleMerchantName,\n            },\n            allowedPaymentMethods: [{\n                type: 'CARD',\n                parameters: {\n                    allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                    allowedCardNetworks: ['AMEX', 'DISCOVER', 'JCB', 'MASTERCARD', 'VISA'],\n                    billingAddressRequired: true,\n                    billingAddressParameters: {\n                        format: 'FULL',\n                        phoneNumberRequired: true,\n                    },\n                },\n                tokenizationSpecification: {\n                    type: 'PAYMENT_GATEWAY',\n                    parameters: {\n                        gateway: 'stripe',\n                        'stripe:version': initializationData.stripeVersion,\n                        'stripe:publishableKey': initializationData.stripePublishableKey,\n                    },\n                },\n            }],\n            transactionInfo: {\n                currencyCode: checkout.cart.currency.code,\n                totalPriceStatus: 'FINAL',\n                totalPrice: round(checkout.grandTotal, 2).toFixed(2),\n            },\n            emailRequired: true,\n            shippingAddressRequired: !hasShippingAddress,\n            shippingAddressParameters: {\n                phoneNumberRequired: true,\n            },\n        };\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { PaypalHostWindow, PaypalSDK } from './paypal-sdk';\n\nexport default class PaypalScriptLoader {\n    private _window: PaypalHostWindow;\n\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    loadPaypal(): Promise<PaypalSDK> {\n        return this._scriptLoader\n            .loadScript('//www.paypalobjects.com/api/checkout.min.js')\n            .then(() => {\n                if (!this._window.paypal) {\n                    throw new StandardError();\n                }\n\n                return this._window.paypal;\n            });\n    }\n}\n","module.exports = require(\"iframe-resizer/js/iframeResizer.contentWindow\");","import { EmbeddedCheckoutFrameLoadedEvent } from '../embedded-checkout-events';\n\nexport default function handleFrameLoadedEvent(message: EmbeddedCheckoutFrameLoadedEvent): void {\n    if (!message.payload || !message.payload.contentId) {\n        return;\n    }\n\n    const body = document.getElementById(message.payload.contentId);\n\n    if (!body || body.hasAttribute('data-iframe-height')) {\n        return;\n    }\n\n    body.setAttribute('data-iframe-height', '');\n}\n","export default interface CustomError extends Error {\n    message: string;\n    type: string;\n    subtype?: string;\n}\n\nexport function isCustomError(error: any): error is CustomError {\n    return (\n        typeof error.message === 'string' &&\n        typeof error.type === 'string' &&\n        (typeof error.subtype === 'string' || !error.subtype) &&\n        error instanceof Error\n    );\n}\n","import { isCustomError, CustomError } from '../../common/error/errors';\nimport EmbeddedCheckoutError from '../embedded-checkout-error';\nimport {\n    EmbeddedCheckoutCompleteEvent,\n    EmbeddedCheckoutErrorEvent,\n    EmbeddedCheckoutEvent,\n    EmbeddedCheckoutEventMap,\n    EmbeddedCheckoutEventType,\n    EmbeddedCheckoutFrameErrorEvent,\n    EmbeddedCheckoutFrameLoadedEvent,\n    EmbeddedCheckoutLoadedEvent,\n    EmbeddedCheckoutSignedOutEvent,\n} from '../embedded-checkout-events';\nimport EmbeddedCheckoutStyles from '../embedded-checkout-styles';\nimport IframeEventListener from '../iframe-event-listener';\nimport IframeEventPoster from '../iframe-event-poster';\n\nimport EmbeddedCheckoutMessenger from './embedded-checkout-messenger';\nimport { EmbeddedContentEventMap, EmbeddedContentEventType } from './embedded-content-events';\nimport EmbeddedContentOptions from './embedded-content-options';\n\nexport default class IframeEmbeddedCheckoutMessenger implements EmbeddedCheckoutMessenger {\n    /**\n     * @internal\n     */\n    constructor(\n        private _messageListener: IframeEventListener<EmbeddedContentEventMap>,\n        private _messagePoster: IframeEventPoster<EmbeddedCheckoutEvent>,\n        private _untargetedMessagePoster: IframeEventPoster<EmbeddedCheckoutEvent>,\n        private _messageHandlers: EventCallbacks<EmbeddedCheckoutEventMap> = {}\n    ) {\n        this._messageListener.listen();\n    }\n\n    postComplete(): void {\n        const message: EmbeddedCheckoutCompleteEvent = {\n            type: EmbeddedCheckoutEventType.CheckoutComplete,\n        };\n\n        this._postMessage(message);\n    }\n\n    postError(payload: Error | CustomError): void {\n        const message: EmbeddedCheckoutErrorEvent = {\n            type: EmbeddedCheckoutEventType.CheckoutError,\n            payload: this._transformError(payload),\n        };\n\n        this._postMessage(message);\n    }\n\n    postFrameError(payload: Error | CustomError): void {\n        const message: EmbeddedCheckoutFrameErrorEvent = {\n            type: EmbeddedCheckoutEventType.FrameError,\n            payload: this._transformError(payload),\n        };\n\n        // Ideally, all messages should be targeted at a specific origin.\n        // However, for `FrameError` message, we have to post it in an\n        // untargeted fashion. This is because the error could be caused by a\n        // missing cart. That makes it not possible to determine of site origin\n        // of the parent window. Nevertheless, we still want to notify the\n        // parent window about the error.\n        this._postMessage(message, { untargeted: true });\n    }\n\n    postFrameLoaded(payload?: EmbeddedContentOptions): void {\n        const message: EmbeddedCheckoutFrameLoadedEvent = {\n            type: EmbeddedCheckoutEventType.FrameLoaded,\n            payload,\n        };\n\n        this._postMessage(message);\n    }\n\n    postLoaded(): void {\n        const message: EmbeddedCheckoutLoadedEvent = {\n            type: EmbeddedCheckoutEventType.CheckoutLoaded,\n        };\n\n        this._postMessage(message);\n    }\n\n    postSignedOut(): void {\n        const message: EmbeddedCheckoutSignedOutEvent = {\n            type: EmbeddedCheckoutEventType.SignedOut,\n        };\n\n        this._postMessage(message);\n    }\n\n    receiveStyles(handler: (styles: EmbeddedCheckoutStyles) => void): void {\n        this._messageListener.addListener(EmbeddedContentEventType.StyleConfigured, ({ payload }) => {\n            handler(payload);\n        });\n    }\n\n    private _postMessage(message: EmbeddedCheckoutEvent, options?: { untargeted?: boolean }): void {\n        this._notifyMessageHandlers(message);\n\n        if (options && options.untargeted) {\n            return this._untargetedMessagePoster.post(message);\n        }\n\n        this._messagePoster.post(message);\n    }\n\n    private _notifyMessageHandlers(message: EmbeddedCheckoutEvent): void {\n        Object.keys(this._messageHandlers)\n            .forEach(key => {\n                const handler = this._messageHandlers[key as keyof EmbeddedCheckoutEventMap];\n\n                if (handler) {\n                    handler.call(null, message);\n                }\n            });\n    }\n\n    private _transformError(error: Error | CustomError): EmbeddedCheckoutError {\n        return {\n            message: error.message,\n            type: isCustomError(error) ? error.type : undefined,\n            subtype: isCustomError(error) ? error.subtype : undefined,\n        };\n    }\n}\n\nexport type EventCallbacks<TEventMap> = {\n    [key in keyof TEventMap]?: (event: TEventMap[key]) => void;\n};\n","import EmbeddedCheckoutMessenger from './embedded-checkout-messenger';\n\nexport default class NoopEmbeddedCheckoutMessenger implements EmbeddedCheckoutMessenger {\n    postComplete(): void {}\n\n    postError(): void {}\n\n    postFrameError(): void {}\n\n    postFrameLoaded(): void {}\n\n    postLoaded(): void {}\n\n    postSignedOut(): void {}\n\n    receiveStyles(): void {}\n}\n","import { EmbeddedCheckoutEvent, EmbeddedCheckoutEventType } from '../embedded-checkout-events';\nimport IframeEventListener from '../iframe-event-listener';\nimport IframeEventPoster from '../iframe-event-poster';\n\nimport EmbeddedCheckoutMessenger from './embedded-checkout-messenger';\nimport EmbeddedCheckoutMessengerOptions from './embedded-checkout-messenger-options';\nimport { EmbeddedContentEventMap } from './embedded-content-events';\nimport handleFrameLoadedEvent from './handle-frame-loaded-event';\nimport IframeEmbeddedCheckoutMessenger from './iframe-embedded-checkout-messenger';\nimport NoopEmbeddedCheckoutMessenger from './noop-embedded-checkout-messenger';\n\n/**\n * Create an instance of `EmbeddedCheckoutMessenger`.\n *\n * @remarks\n * The object is responsible for posting messages to the parent window from the\n * iframe when certain events have occurred. For example, when the checkout\n * form is first loaded, you should notify the parent window about it.\n *\n * The iframe can only be embedded in domains that are allowed by the store.\n *\n * ```ts\n * const messenger = createEmbeddedCheckoutMessenger({\n *     parentOrigin: 'https://some/website',\n * });\n *\n * messenger.postFrameLoaded();\n * ```\n *\n * @alpha\n * Please note that this feature is currently in an early stage of development.\n * Therefore the API is unstable and not ready for public consumption.\n *\n * @param options - Options for creating `EmbeddedCheckoutMessenger`\n * @returns - An instance of `EmbeddedCheckoutMessenger`\n */\nexport default function createEmbeddedCheckoutMessenger(options: EmbeddedCheckoutMessengerOptions): EmbeddedCheckoutMessenger {\n    const parentWindow = options.parentWindow || window.parent;\n\n    // Return a No-op messenger if it is not called inside an iframe\n    if (window === parentWindow) {\n        return new NoopEmbeddedCheckoutMessenger();\n    }\n\n    return new IframeEmbeddedCheckoutMessenger(\n        new IframeEventListener<EmbeddedContentEventMap>(options.parentOrigin),\n        new IframeEventPoster<EmbeddedCheckoutEvent>(options.parentOrigin, parentWindow),\n        new IframeEventPoster<EmbeddedCheckoutEvent>('*', parentWindow),\n        { [EmbeddedCheckoutEventType.FrameLoaded]: handleFrameLoadedEvent }\n    );\n}\n","import { isObject, union } from 'lodash';\nimport * as MessageFormat from 'messageformat';\n\nimport Logger from '../common/log/logger';\n\nimport LanguageConfig, { Locales, Translations } from './language-config';\n\nconst DEFAULT_LOCALE = 'en';\nconst KEY_PREFIX = 'optimized_checkout';\n\n/**\n * Responsible for getting language strings.\n *\n * This object can be used to retrieve language strings that are most\n * appropriate for a given locale.\n *\n * The language strings provided to the object should follow [ICU\n * MessageFormat](http://userguide.icu-project.org/formatparse/messages) syntax.\n */\nexport default class LanguageService {\n    private _locale: string;\n    private _locales: Locales;\n    private _translations: Translations;\n    private _formatters: { [key: string]: any };\n\n    /**\n     * @internal\n     */\n    constructor(\n        config: Partial<LanguageConfig>,\n        private _logger: Logger\n    ) {\n        const { locale, locales, translations } = this._transformConfig(config);\n\n        this._locale = locale;\n        this._locales = locales;\n        this._translations = translations;\n        this._formatters = {};\n    }\n\n    /**\n     * Remaps a set of language strings with a different set of keys.\n     *\n     * ```js\n     * service.mapKeys({\n     *     'new_key': 'existing_key',\n     * });\n     *\n     * console.log(service.translate('new_key'));\n     * ```\n     *\n     * @param maps - The set of language strings.\n     */\n    mapKeys(maps: { [key: string]: string }): void {\n        Object.keys(maps).forEach(key => {\n            const translationKey = `${KEY_PREFIX}.${maps[key]}`;\n\n            this._translations[`${KEY_PREFIX}.${key}`] = this._translations[translationKey];\n        });\n    }\n\n    /**\n     * Gets the preferred locale of the current customer.\n     *\n     * @returns The preferred locale code.\n     */\n    getLocale(): string {\n        return this._hasTranslations() ? this._locale : DEFAULT_LOCALE;\n    }\n\n    /**\n     * Gets a language string by a key.\n     *\n     * ```js\n     * service.translate('language_key');\n     * ```\n     *\n     * If the language string contains a placeholder, you can replace it by\n     * providing a second argument.\n     *\n     * ```js\n     * service.translate('language_key', { placeholder: 'Hello' });\n     * ```\n     *\n     * @param key - The language key.\n     * @param data - Data for replacing placeholders in the language string.\n     * @returns The translated language string.\n     */\n    translate(key: string, data: TranslationData = {}): string {\n        const prefixedKey = `${KEY_PREFIX}.${key}`;\n\n        if (typeof this._translations[prefixedKey] !== 'string') {\n            this._logger.warn(`Translation key \"${prefixedKey}\" is missing`);\n\n            return prefixedKey;\n        }\n\n        if (!this._formatters[prefixedKey]) {\n            const messageFormat = new MessageFormat(this._locales[prefixedKey]);\n\n            this._formatters[prefixedKey] = messageFormat.compile(this._translations[prefixedKey] || '');\n        }\n\n        return this._formatters[prefixedKey](this._transformData(data));\n    }\n\n    private _transformConfig(config: Partial<LanguageConfig> = {}): LanguageConfig {\n        const output: LanguageConfig = {\n            defaultTranslations: {},\n            translations: {},\n            locales: {},\n            locale: config.locale || DEFAULT_LOCALE,\n        };\n\n        const locales = config.locales || {};\n        const translations = this._flattenObject(config.translations || {});\n        const defaultTranslations = this._flattenObject(config.defaultTranslations || {});\n        const translationKeys = union(Object.keys(defaultTranslations), Object.keys(translations));\n\n        translationKeys.forEach(key => {\n            if (translations && translations[key]) {\n                output.translations[key] = translations[key];\n                output.locales[key] = locales[key] || output.locale;\n            } else {\n                output.translations[key] = defaultTranslations[key];\n                output.locales[key] = DEFAULT_LOCALE;\n            }\n        });\n\n        return output;\n    }\n\n    private _flattenObject(object: Translations, result: Translations = {}, parentKey: string = ''): Translations {\n        try {\n            Object.keys(object).forEach(key => {\n                const value = object[key];\n                const resultKey = parentKey ? `${parentKey}.${key}` : key;\n\n                if (isObject(value)) {\n                    return this._flattenObject(value as Translations, result, resultKey);\n                }\n\n                result[resultKey] = value;\n            });\n        } catch (err) {\n            this._logger.warn(`Unable to parse object: ${err}`);\n        }\n\n        return result;\n    }\n\n    private _transformData(data: TranslationData): TranslationData {\n        return Object.keys(data).reduce((result, key) => {\n            const value = data[key];\n\n            result[key] = value === null || value === undefined ? '' : value;\n\n            return result;\n        }, {} as TranslationData);\n    }\n\n    private _hasTranslations(): boolean {\n        return Object.keys(this._locales).map(key => this._locales[key])\n            .filter(code => code.split('-')[0] === this._locale.split('-')[0])\n            .length > 0;\n    }\n}\n\nexport interface TranslationData {\n    [key: string]: string | number;\n}\n","import { getDefaultLogger } from '../common/log';\n\nimport LanguageConfig from './language-config';\nimport LanguageService from './language-service';\n\n/**\n * Creates an instance of `LanguageService`.\n *\n * @remarks\n * ```js\n * const language = {{{langJson 'optimized_checkout'}}}; // `langJson` is a Handlebars helper provided by BigCommerce's Stencil template engine.\n * const service = createLanguageService(language);\n *\n * console.log(service.translate('address.city_label'));\n * ```\n *\n * @param config - A configuration object.\n * @returns An instance of `LanguageService`.\n */\nexport default function createLanguageService(config: Partial<LanguageConfig> = {}): LanguageService {\n    return new LanguageService(\n        config,\n        getDefaultLogger()\n    );\n}\n","import { InvalidArgumentError } from '../common/error/errors';\n\nimport { CurrencyConfig } from './currency';\n\nexport default class CurrencyFormatter {\n    private _decimalPlaces: number;\n    private _symbolLocation: string;\n    private _symbol: string;\n    private _thousandsSeparator: string;\n    private _decimalSeparator: string;\n\n    constructor(\n        currencySettings: CurrencyConfig\n    ) {\n        if (!currencySettings) {\n            throw new Error('Currency settings missing');\n        }\n\n        const {\n            decimalPlaces,\n            symbolLocation,\n            symbol,\n            thousandsSeparator,\n            decimalSeparator,\n        } = currencySettings;\n\n        if (\n            typeof symbolLocation !== 'string' ||\n            typeof symbol !== 'string' ||\n            typeof thousandsSeparator !== 'string' ||\n            typeof decimalSeparator !== 'string' ||\n            typeof decimalPlaces !== 'string'\n        ) {\n            throw new InvalidArgumentError('Invalid currency settings provided');\n        }\n\n        this._decimalPlaces = parseInt(decimalPlaces, 10);\n        this._symbolLocation = symbolLocation;\n        this._symbol = symbol;\n        this._thousandsSeparator = thousandsSeparator;\n        this._decimalSeparator = decimalSeparator;\n    }\n\n    format(amount?: number): string {\n        if (typeof amount !== 'number') {\n            throw new InvalidArgumentError('Invalid amount provided');\n        }\n\n        const formattedNumber = this._formatNumber(amount);\n\n        const formattedCurrency = this._formatCurrency(formattedNumber);\n\n        return amount < 0 ?\n            `-${formattedCurrency}` :\n            formattedCurrency;\n    }\n\n    private _formatNumber(amount: number): string {\n        const positiveAmount = Math.abs(amount);\n        const [ integerAmount, decimalAmount = '' ] = (this._toFixed(positiveAmount, this._decimalPlaces)).split('.');\n        const parsedIntegerAmount = integerAmount.replace(/\\B(?=(\\d{3})+(?!\\d))/g, this._thousandsSeparator);\n\n        if (this._decimalPlaces < 1) {\n            return parsedIntegerAmount;\n        }\n\n        return [\n            parsedIntegerAmount,\n            decimalAmount,\n        ].join(this._decimalSeparator);\n    }\n\n    private _formatCurrency(formattedNumber: string): string {\n        return (this._symbolLocation.toLowerCase() === 'left') ?\n            `${this._symbol}${formattedNumber}` :\n            `${formattedNumber}${this._symbol}`;\n    }\n\n    private _toFixed(value: number, precision: number): string {\n        return (+(Math.round(+(value + 'e' + precision)) + 'e' + -precision)).toFixed(precision);\n    }\n}\n","import { StoreConfig } from '../config';\n\nimport CurrencyFormatter from './currency-formatter';\n\n/**\n * Responsible for formatting and converting currencies.\n */\nexport default class CurrencyService {\n    private _customerFormatter: CurrencyFormatter;\n    private _storeFormatter: CurrencyFormatter;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _storeConfig: StoreConfig\n    ) {\n        this._customerFormatter = new CurrencyFormatter(this._storeConfig.shopperCurrency);\n        this._storeFormatter = new CurrencyFormatter(this._storeConfig.currency);\n    }\n\n    toCustomerCurrency(amount: number): string {\n        const exchangeRate = this._storeConfig.shopperCurrency.exchangeRate;\n\n        return this._customerFormatter.format(amount * exchangeRate);\n    }\n\n    toStoreCurrency(amount: number): string {\n        return this._storeFormatter.format(amount);\n    }\n}\n","import { StoreConfig } from '../config';\n\nimport CurrencyService from './currency-service';\n\n/**\n * Creates an instance of `CurrencyService`.\n *\n * @remarks\n * ```js\n * const { data } = checkoutService.getState();\n * const config = data.getConfig();\n * const checkout = data.getCheckout();\n * const currencyService = createCurrencyService(config);\n *\n * currencyService.toStoreCurrency(checkout.grandTotal);\n * currencyService.toCustomerCurrency(checkout.grandTotal);\n * ```\n *\n * @alpha\n * Please note that `CurrencyService` is currently in an early stage\n * of development. Therefore the API is unstable and not ready for public\n * consumption.\n *\n * @param config - The config object containing the currency configuration\n * @returns an instance of `CurrencyService`.\n */\nexport default function createCurrencyService(\n    config: StoreConfig\n): CurrencyService {\n    return new CurrencyService(config);\n}\n","export { createTimeout } from '@bigcommerce/request-sender';\n\nexport { createCheckoutService } from './checkout';\nexport { createCheckoutButtonInitializer } from './checkout-buttons';\nexport { embedCheckout } from './embedded-checkout';\nexport { createEmbeddedCheckoutMessenger } from './embedded-checkout/iframe-content';\nexport { createLanguageService } from './locale';\nexport { createCurrencyService } from './currency';\n","import { Checkout } from '../../../checkout';\nimport PaymentMethod from '../../payment-method';\nimport { BraintreeModuleCreator, GooglePayBraintreeSDK } from '../braintree';\n\nexport type EnvironmentType = 'PRODUCTION' | 'TEST';\ntype TokenizeType = 'AndroidPayCard' | 'CreditCard';\n\nexport interface GooglePayInitializer {\n    initialize(checkout: Checkout, paymentMethod: PaymentMethod, hasShippingAddress: boolean, publishableKey?: string): Promise<GooglePayPaymentDataRequestV2>;\n    teardown(): Promise<void>;\n    parseResponse(paymentData: GooglePaymentData): TokenizePayload;\n}\n\nexport interface GooglePayCreator extends BraintreeModuleCreator<GooglePayBraintreeSDK> {}\n\nexport interface GooglePayPaymentOptions {\n    environment: EnvironmentType;\n}\n\nexport interface GooglePayIsReadyToPayResponse {\n    result: boolean;\n    paymentMethodPresend?: boolean;\n}\n\nexport interface GooglePaySDK {\n    payments: {\n        api: {\n            PaymentsClient: {\n                new(options: GooglePayPaymentOptions): GooglePayClient;\n            },\n        },\n    };\n}\n\nexport interface GooglePayClient {\n    isReadyToPay(options: object): Promise<GooglePayIsReadyToPayResponse>;\n    loadPaymentData(paymentDataRequest: GooglePayPaymentDataRequestV2): Promise<GooglePaymentData>;\n    createButton(options: { [key: string]: string | object }): HTMLElement;\n}\n\nexport interface GooglePayHostWindow extends Window {\n    google?: GooglePaySDK;\n}\n\nexport interface TokenizePayload {\n    nonce: string;\n    details: {\n        cardType: string;\n        lastFour: string;\n        lastTwo?: string;\n    };\n    description?: string;\n    type: TokenizeType;\n    binData?: {\n        commercial: string;\n        countryOfIssuance: string;\n        debit: string;\n        durbinRegulated: string;\n        healthcare: string;\n        issuingBank: string;\n        payroll: string;\n        prepaid: string;\n        productId: string;\n    };\n}\n\nexport interface GooglePaymentData {\n    apiVersion: number;\n    apiVersionMinor: number;\n    paymentMethodData: {\n        description: string;\n        info: {\n            cardDetails: string;\n            cardNetwork: string;\n            billingAddress: GooglePayAddress;\n        };\n        tokenizationData: {\n            token: string;\n            type: string;\n        }\n        type: string;\n    };\n    shippingAddress: GooglePayAddress;\n    email: string;\n}\n\nexport interface GooglePayAddress {\n    address1: string;\n    address2: string;\n    address3: string;\n    administrativeArea: string;\n    companyName: string;\n    countryCode: string;\n    locality: string;\n    name: string;\n    postalCode: string;\n    sortingCode: string;\n    phoneNumber: string;\n}\n\nexport interface GooglePaymentsError {\n    statusCode: string;\n    statusMessage?: string;\n}\n\nexport interface PaymentMethodData {\n    methodId: string;\n    paymentData: {\n        method: string,\n        nonce: string,\n        cardInformation: {\n            type: string,\n            number: string,\n        },\n    };\n}\n\nexport enum ButtonType {\n    Long = 'long',\n    Short = 'short',\n}\nexport enum ButtonColor {\n    Default = 'default',\n    Black = 'black',\n    White = 'white',\n}\n\nexport interface GooglePayPaymentDataRequestV2 {\n    apiVersion: number;\n    apiVersionMinor: number;\n    merchantInfo: {\n        authJwt?: string;\n        merchantId?: string;\n        merchantName?: string;\n    };\n    allowedPaymentMethods: [{\n        type: string;\n        parameters: {\n            allowedAuthMethods: string[];\n            allowedCardNetworks: string[];\n            allowPrepaidCards?: boolean;\n            billingAddressRequired?: boolean;\n            billingAddressParameters?: {\n                format?: string;\n                phoneNumberRequired?: boolean;\n            };\n        },\n        tokenizationSpecification?: {\n            type: string;\n            parameters: {\n                gateway: string;\n                gatewayMerchantId?: string;\n                'braintree:apiVersion'?: string;\n                'braintree:clientKey'?: string;\n                'braintree:merchantId'?: string;\n                'braintree:sdkVersion'?: string;\n                'braintree:authorizationFingerprint'?: string;\n                'stripe:version'?: string;\n                'stripe:publishableKey'?: string;\n            };\n        };\n    }];\n    transactionInfo: {\n        currencyCode: string;\n        totalPriceStatus: string;\n        totalPrice?: string;\n        checkoutOption?: string;\n    };\n    emailRequired?: boolean;\n    shippingAddressRequired?: boolean;\n    shippingAddressParameters?: {\n        allowedCountryCodes?: string[];\n        phoneNumberRequired?: boolean;\n    };\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { AddressRequestBody } from '../../../address';\nimport { BillingAddressActionCreator, BillingAddressUpdateRequestBody } from '../../../billing';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n} from '../../../common/error/errors';\nimport { toFormUrlEncoded } from '../../../common/http-request/';\nimport { RemoteCheckoutSynchronizationError } from '../../../remote-checkout/errors';\nimport { ConsignmentActionCreator } from '../../../shipping';\nimport PaymentMethodInvalidError from '../../errors/payment-method-invalid-error';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\n\nimport {\n    ButtonColor,\n    ButtonType,\n    EnvironmentType,\n    GooglePaymentData,\n    GooglePayAddress,\n    GooglePayClient,\n    GooglePayInitializer,\n    GooglePayPaymentDataRequestV2,\n    GooglePaySDK,\n    TokenizePayload\n} from './googlepay';\nimport GooglePayScriptLoader from './googlepay-script-loader';\n\nexport default class GooglePayPaymentProcessor {\n    private _googlePayClient?: GooglePayClient;\n    private _methodId?: string;\n    private _paymentDataRequest?: GooglePayPaymentDataRequestV2;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _googlePayScriptLoader: GooglePayScriptLoader,\n        private _googlePayInitializer: GooglePayInitializer,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _consigmentActionCreator: ConsignmentActionCreator,\n        private _requestSender: RequestSender\n    ) {}\n\n    initialize(methodId: string): Promise<void> {\n        this._methodId = methodId;\n\n        return this._configureWallet();\n    }\n\n    deinitialize(): Promise<void> {\n        return this._googlePayInitializer.teardown();\n    }\n\n    createButton(\n        onClick: (event: Event) => Promise<void>,\n        buttonType: ButtonType = ButtonType.Short,\n        buttonColor: ButtonColor = ButtonColor.Default\n    ): HTMLElement {\n        if (!this._googlePayClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._googlePayClient.createButton({\n            buttonColor,\n            buttonType,\n            onClick,\n        });\n    }\n\n    displayWallet(): Promise<GooglePaymentData> {\n        if (!this._googlePayClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._googlePayClient.loadPaymentData(this._getPaymentDataRequest());\n    }\n\n    handleSuccess(paymentData: GooglePaymentData): Promise<InternalCheckoutSelectors> {\n        return this._postForm(this._googlePayInitializer.parseResponse(paymentData))\n            .then(() => this._updateBillingAddress(paymentData));\n    }\n\n    updateShippingAddress(shippingAddress: GooglePayAddress): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consigmentActionCreator.updateAddress(this._mapGooglePayAddressToShippingAddress(shippingAddress))\n        );\n    }\n\n    private _configureWallet(): Promise<void> {\n        const methodId = this._getMethodId();\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n                const checkout = state.checkout.getCheckout();\n                const hasShippingAddress = !!state.shippingAddress.getShippingAddress();\n\n                if (!paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                const { testMode } = paymentMethod.config;\n\n                return Promise.all([\n                    this._googlePayScriptLoader.load(),\n                    this._googlePayInitializer.initialize(checkout, paymentMethod, hasShippingAddress),\n                ]).then(([googlePay, paymentDataRequest]) => {\n                    this._googlePayClient = this._getGooglePayClient(googlePay, testMode);\n                    this._paymentDataRequest = paymentDataRequest;\n\n                    return this._googlePayClient.isReadyToPay({\n                        allowedPaymentMethods: [\n                            {\n                                type: paymentDataRequest.allowedPaymentMethods[0].type,\n                                parameters: {\n                                    allowedAuthMethods: paymentDataRequest.allowedPaymentMethods[0].parameters.allowedAuthMethods,\n                                    allowedCardNetworks: paymentDataRequest.allowedPaymentMethods[0].parameters.allowedCardNetworks,\n                                },\n                            },\n                        ],\n                        apiVersion: paymentDataRequest.apiVersion,\n                        apiVersionMinor: paymentDataRequest.apiVersionMinor,\n                    }).then(response => {\n                        if (response.result) {\n                            return;\n                        }\n\n                        throw new PaymentMethodInvalidError();\n                    });\n                });\n            });\n    }\n\n    private _getCardInformation(cardInformation: { cardType: string, lastFour: string }) {\n        return {\n            type: cardInformation.cardType,\n            number: cardInformation.lastFour,\n        };\n    }\n\n    private _getPaymentDataRequest(): GooglePayPaymentDataRequestV2 {\n        if (!this._paymentDataRequest) {\n            throw new RemoteCheckoutSynchronizationError();\n        }\n\n        return this._paymentDataRequest;\n    }\n\n    private _getGooglePayClient(google: GooglePaySDK, testMode?: boolean): GooglePayClient {\n        if (testMode === undefined) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const environment: EnvironmentType = testMode ? 'TEST' : 'PRODUCTION';\n\n        return new google.payments.api.PaymentsClient({ environment });\n    }\n\n    private _getMethodId(): string {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._methodId;\n    }\n\n    private _mapGooglePayAddressToBillingAddress(paymentData: GooglePaymentData, id: string): BillingAddressUpdateRequestBody {\n        return {\n            id,\n            firstName: paymentData.paymentMethodData.info.billingAddress.name.split(' ').slice(0, -1).join(' '),\n            lastName: paymentData.paymentMethodData.info.billingAddress.name.split(' ').slice(-1).join(' '),\n            company: paymentData.paymentMethodData.info.billingAddress.companyName,\n            address1: paymentData.paymentMethodData.info.billingAddress.address1,\n            address2: paymentData.paymentMethodData.info.billingAddress.address2 + paymentData.paymentMethodData.info.billingAddress.address3,\n            city: paymentData.paymentMethodData.info.billingAddress.locality,\n            stateOrProvince: paymentData.paymentMethodData.info.billingAddress.administrativeArea,\n            stateOrProvinceCode: paymentData.paymentMethodData.info.billingAddress.administrativeArea,\n            postalCode: paymentData.paymentMethodData.info.billingAddress.postalCode,\n            countryCode: paymentData.paymentMethodData.info.billingAddress.countryCode,\n            phone: paymentData.paymentMethodData.info.billingAddress.phoneNumber,\n            customFields: [],\n            email: paymentData.email,\n        };\n    }\n\n    private _mapGooglePayAddressToShippingAddress(address: GooglePayAddress): AddressRequestBody {\n        return {\n            firstName: address.name.split(' ').slice(0, -1).join(' '),\n            lastName: address.name.split(' ').slice(-1).join(' '),\n            company: address.companyName,\n            address1: address.address1,\n            address2: address.address2 + address.address3,\n            city: address.locality,\n            stateOrProvince: address.administrativeArea,\n            stateOrProvinceCode: address.administrativeArea,\n            postalCode: address.postalCode,\n            countryCode: address.countryCode,\n            phone: address.phoneNumber,\n            customFields: [],\n        };\n    }\n\n    private _postForm(postPaymentData: TokenizePayload): Promise<Response<void>> {\n        const cardInformation = postPaymentData.details;\n\n        return this._requestSender.post('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: toFormUrlEncoded({\n                payment_type: postPaymentData.type,\n                nonce: postPaymentData.nonce,\n                provider: this._getMethodId(),\n                action: 'set_external_checkout',\n                card_information: this._getCardInformation(cardInformation),\n            }),\n        });\n    }\n\n    private _updateBillingAddress(paymentData: GooglePaymentData): Promise<InternalCheckoutSelectors> {\n        const remoteBillingAddress = this._store.getState().billingAddress.getBillingAddress();\n\n        if (!remoteBillingAddress) {\n            throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n        }\n\n        const googlePayAddressMapped = this._mapGooglePayAddressToBillingAddress(paymentData, remoteBillingAddress.id);\n\n        return this._store.dispatch(\n            this._billingAddressActionCreator.updateAddress(googlePayAddressMapped)\n        );\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { GooglePayHostWindow, GooglePaySDK } from './googlepay';\n\nexport default class GooglePayScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: GooglePayHostWindow = window\n    ) {}\n\n    load(): Promise<GooglePaySDK> {\n        return this._scriptLoader\n            .loadScript('https://pay.google.com/gp/p/js/pay.js')\n            .then(() => {\n                if (!this._window.google) {\n                    throw new StandardError();\n                }\n\n                return this._window.google;\n            });\n    }\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../../../billing';\nimport { CheckoutRequestSender, CheckoutStore } from '../../../checkout';\nimport { ConsignmentActionCreator, ConsignmentRequestSender } from '../../../shipping';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport PaymentMethodRequestSender from '../../payment-method-request-sender';\n\nimport { GooglePayInitializer } from './googlepay';\nimport GooglePayPaymentProcessor from './googlepay-payment-processor';\nimport GooglePayScriptLoader from './googlepay-script-loader';\n\nexport default function createGooglePayPaymentProcessor(store: CheckoutStore, initializer: GooglePayInitializer): GooglePayPaymentProcessor {\n    const requestSender = createRequestSender();\n    const scriptLoader = getScriptLoader();\n\n    return new GooglePayPaymentProcessor(\n        store,\n        new PaymentMethodActionCreator(\n            new PaymentMethodRequestSender(requestSender)\n        ),\n        new GooglePayScriptLoader(scriptLoader),\n        initializer,\n        new BillingAddressActionCreator(\n            new BillingAddressRequestSender(requestSender)\n        ),\n        new ConsignmentActionCreator(\n            new ConsignmentRequestSender(requestSender),\n            new CheckoutRequestSender(requestSender)\n        ),\n        requestSender\n    );\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\n\n/**\n * @todo Convert this file into TypeScript properly\n */\nexport default class RemoteCheckoutRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    initializeBilling(methodName: string, params?: { referenceId: string }, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/billing`;\n\n        return this._requestSender.get(url, { params, timeout });\n    }\n\n    initializeShipping(methodName: string, params?: { referenceId: string }, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/shipping`;\n\n        return this._requestSender.get(url, { params, timeout });\n    }\n\n    initializePayment(methodName: string, params?: InitializePaymentOptions, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/payment`;\n\n        return this._requestSender.get(url, { params, timeout });\n    }\n\n    loadSettings(methodName: string, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/settings`;\n\n        return this._requestSender.get(url, { timeout });\n    }\n\n    signOut(methodName: string, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/signout`;\n\n        return this._requestSender.get(url, { timeout });\n    }\n\n    generateToken({ timeout }: RequestOptions = {}): Promise<Response> {\n        const url = '/remote-checkout-token';\n\n        return this._requestSender.get(url, { timeout });\n    }\n\n    trackAuthorizationEvent({ timeout }: RequestOptions = {}): Promise<Response> {\n        const url = '/remote-checkout/events/shopper-checkout-service-provider-authorization-requested';\n\n        return this._requestSender.post(url, { timeout });\n    }\n}\n\nexport interface InitializePaymentOptions {\n    authorizationToken?: string;\n    customerMessage?: string;\n    referenceId?: string;\n    useStoreCredit?: boolean;\n}\n","import { createAction, createErrorAction, Action } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport { RemoteCheckoutActionType } from './remote-checkout-actions';\nimport RemoteCheckoutRequestSender, { InitializePaymentOptions } from './remote-checkout-request-sender';\nimport { RemoteCheckoutStateData } from './remote-checkout-state';\n\n/**\n * @todo Convert this file into TypeScript properly\n * i.e.: Action<T>\n */\nexport default class RemoteCheckoutActionCreator {\n    constructor(\n        private _remoteCheckoutRequestSender: RemoteCheckoutRequestSender\n    ) {}\n\n    initializeBilling(methodId: string, params?: { referenceId: string }, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.InitializeRemoteBillingRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.initializeBilling(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(createAction(RemoteCheckoutActionType.InitializeRemoteBillingSucceeded, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.InitializeRemoteBillingFailed, response, { methodId }));\n                });\n        });\n    }\n\n    initializeShipping(methodId: string, params?: { referenceId: string }, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.InitializeRemoteShippingRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.initializeShipping(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(createAction(RemoteCheckoutActionType.InitializeRemoteShippingSucceeded, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.InitializeRemoteShippingFailed, response, { methodId }));\n                });\n        });\n    }\n\n    initializePayment(methodId: string, params?: InitializePaymentOptions, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.InitializeRemotePaymentRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.initializePayment(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(createAction(RemoteCheckoutActionType.InitializeRemotePaymentSucceeded, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.InitializeRemotePaymentFailed, response, { methodId }));\n                });\n        });\n    }\n\n    loadSettings(methodId: string, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.LoadRemoteSettingsRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.loadSettings(methodId, options)\n                .then(({ body }) => {\n                    observer.next(createAction(RemoteCheckoutActionType.LoadRemoteSettingsSucceeded, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.LoadRemoteSettingsFailed, response, { methodId }));\n                });\n        });\n    }\n\n    signOut(methodId: string, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.SignOutRemoteCustomerRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.signOut(methodId, options)\n                .then(() => {\n                    observer.next(createAction(RemoteCheckoutActionType.SignOutRemoteCustomerSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.SignOutRemoteCustomerFailed, response, { methodId }));\n                });\n        });\n    }\n\n    updateCheckout<K extends keyof RemoteCheckoutStateData>(methodId: K, data: Partial<RemoteCheckoutStateData[K]>): Action {\n        return createAction(RemoteCheckoutActionType.UpdateRemoteCheckout, data, { methodId });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport PaymentMethod from '../../payment-method';\n\nimport AmazonPayWindow from './amazon-pay-window';\n\nexport default class AmazonPayScriptLoader {\n    private _window: AmazonPayWindow;\n\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    loadWidget(method: PaymentMethod, onPaymentReady?: () => void): Promise<Event> {\n        const {\n            config: { merchantId, testMode },\n            initializationData: { region = 'us' } = {},\n        } = method;\n\n        const url = 'https://' +\n            (region.toLowerCase() !== 'us' ? 'static-eu.' : 'static-na.') +\n            'payments-amazon.com/OffAmazonPayments/' +\n            `${region.toLowerCase()}/` +\n            (testMode ? 'sandbox/' : '') +\n            (region.toLowerCase() !== 'us' ? 'lpa/' : '') +\n            `js/Widgets.js?sellerId=${merchantId}`;\n\n        this._configureWidget(method, onPaymentReady);\n\n        return this._scriptLoader.loadScript(url);\n    }\n\n    private _configureWidget(method: PaymentMethod, onPaymentReady?: () => void): void {\n        const onLoginReady = () => {\n            if (!this._window.amazon) {\n                return;\n            }\n\n            this._window.amazon.Login.setClientId(method.initializationData.clientId);\n            this._window.amazon.Login.setUseCookie(true);\n        };\n\n        if (this._window.amazon && this._window.amazon.Login) {\n            onLoginReady();\n        } else {\n            this._window.onAmazonLoginReady = onLoginReady;\n        }\n\n        if (this._window.OffAmazonPayments && onPaymentReady) {\n            onPaymentReady();\n        } else {\n            this._window.onAmazonPaymentsReady = onPaymentReady;\n        }\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { VisaCheckoutHostWindow, VisaCheckoutSDK } from './visacheckout';\n\nexport default class VisaCheckoutScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: VisaCheckoutHostWindow = window\n    ) {}\n\n    load(testMode?: boolean): Promise<VisaCheckoutSDK> {\n        return this._scriptLoader\n            .loadScript(`//${testMode ? 'sandbox-' : ''}assets.secure.checkout.visa.com/checkout-widget/resources/js/integration/v1/sdk.js`)\n            .then(() => {\n                if (!this._window.V) {\n                    throw new StandardError();\n                }\n\n                return this._window.V;\n            });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { ChasePayHostWindow, JPMC } from '../chasepay/chasepay';\n\nexport default class ChasePayScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        public _window: ChasePayHostWindow = window\n    ) {}\n\n    load(testMode?: boolean): Promise<JPMC> {\n        return this._scriptLoader\n            .loadScript(`//pwc${testMode ? 'psb' : ''}.chase.com/pwc/checkout/js/v20170521/list.action?type=raw&applId=PWC&channelId=CWC&version=1`)\n            .then(() => {\n                if (!this._window.JPMC) {\n                    throw new StandardError();\n                }\n\n                return this._window.JPMC;\n            });\n    }\n}\n","import Logger from './logger';\n\nexport default class ConsoleLogger implements Logger {\n    constructor(\n        private _console?: Console\n    ) {}\n\n    log(...messages: any[]): void {\n        this._logToConsole('log', ...messages);\n    }\n\n    info(...messages: any[]): void {\n        this._logToConsole('info', ...messages);\n    }\n\n    warn(...messages: any[]): void {\n        this._logToConsole('warn', ...messages);\n    }\n\n    error(...messages: any[]): void {\n        this._logToConsole('error', ...messages);\n    }\n\n    debug(...messages: any[]): void {\n        this._logToConsole('debug', ...messages);\n    }\n\n    private _logToConsole(type: keyof Console, ...messages: any[]): void {\n        if (!this._console || !this._console[type]) {\n            return;\n        }\n\n        this._console[type].call(this._console, ...messages);\n    }\n}\n","import Logger from './logger';\n\nexport default class NoopLogger implements Logger {\n    log(): void {}\n\n    info(): void {}\n\n    warn(): void {}\n\n    error(): void {}\n\n    debug(): void {}\n}\n","import { getEnvironment } from '../utility';\n\nimport createLogger from './create-logger';\nimport Logger from './logger';\n\nconst logger = createLogger(getEnvironment() !== 'test');\n\nexport default function getDefaultLogger(): Logger {\n    return logger;\n}\n","import ConsoleLogger from './console-logger';\nimport Logger from './logger';\nimport NoopLogger from './noop-logger';\n\nexport default function createLogger(isEnabled = true): Logger {\n    if (!isEnabled) {\n        return new NoopLogger();\n    }\n\n    return new ConsoleLogger(console);\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\n\nimport { Address, LegacyAddress } from '../../../address';\nimport { toFormUrlEncoded } from '../../../common/http-request';\n\nimport { BraintreeDataCollector } from './braintree';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\nimport {\n    VisaCheckoutAddress,\n    VisaCheckoutInitOptions,\n    VisaCheckoutPaymentSuccessPayload,\n    VisaCheckoutTokenizedPayload,\n} from './visacheckout';\n\nexport default class BraintreeVisaCheckoutPaymentProcessor {\n    constructor(\n        private _braintreeSDKCreator: BraintreeSDKCreator,\n        private _requestSender: RequestSender\n    ) {}\n\n    initialize(clientToken: string, options: VisaCheckoutInitializeOptions): Promise<VisaCheckoutInitOptions> {\n        this._braintreeSDKCreator.initialize(clientToken);\n\n        return this._braintreeSDKCreator.getVisaCheckout()\n            .then(visaCheckout => visaCheckout.createInitOptions({\n                settings: {\n                    locale: options.locale,\n                    shipping: {\n                        collectShipping: options.collectShipping,\n                    },\n                },\n                paymentRequest: {\n                    currencyCode: options.currencyCode,\n                    subtotal: String(options.subtotal),\n                },\n            }));\n    }\n\n    deinitialize(): Promise<void> {\n        return this._braintreeSDKCreator.teardown();\n    }\n\n    handleSuccess(payment: VisaCheckoutPaymentSuccessPayload, shipping?: Address, billing?: Address): Promise<any> {\n        return this._braintreeSDKCreator.getVisaCheckout()\n            .then(braintreeVisaCheckout => Promise.all([\n                braintreeVisaCheckout.tokenize(payment),\n                this._braintreeSDKCreator.getDataCollector(),\n            ])\n            .then(([tokenizedPayload, dataCollector]) => {\n                const {\n                    shippingAddress = this._toVisaCheckoutAddress(shipping),\n                    billingAddress = this._toVisaCheckoutAddress(billing),\n                } = tokenizedPayload;\n\n                return this._postForm({\n                    ...tokenizedPayload,\n                    shippingAddress,\n                    billingAddress,\n                }, dataCollector);\n            }));\n    }\n\n    private _postForm(paymentData: VisaCheckoutTokenizedPayload, dataCollector: BraintreeDataCollector) {\n        const {\n            userData,\n            billingAddress,\n            shippingAddress,\n            details: cardInformation,\n        } = paymentData;\n        const { userEmail } = userData;\n        const { deviceData } = dataCollector;\n\n        return this._requestSender.post('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: toFormUrlEncoded({\n                payment_type: paymentData.type,\n                nonce: paymentData.nonce,\n                provider: 'braintreevisacheckout',\n                action: 'set_external_checkout',\n                device_data: deviceData,\n                card_information: this._getCardInformation(cardInformation),\n                billing_address: this._getAddress(userEmail, billingAddress),\n                shipping_address: this._getAddress(userEmail, shippingAddress),\n            }),\n        });\n    }\n\n    private _toVisaCheckoutAddress(address?: Address): VisaCheckoutAddress {\n        if (!address) {\n            return {};\n        }\n\n        return {\n            firstName: address.firstName,\n            lastName: address.lastName,\n            phoneNumber: address.phone,\n            streetAddress: address.address1,\n            extendedAddress: address.address2,\n            locality: address.city,\n            region: address.stateOrProvinceCode,\n            countryCode: address.countryCode,\n            postalCode: address.postalCode,\n        };\n    }\n\n    private _getAddress(email: string, address: VisaCheckoutAddress = {}): Partial<LegacyAddress> {\n        return {\n            email,\n            first_name: address.firstName,\n            last_name: address.lastName,\n            phone_number: address.phoneNumber,\n            address_line_1: address.streetAddress,\n            address_line_2: address.extendedAddress,\n            city: address.locality,\n            state: address.region,\n            country_code: address.countryCode,\n            postal_code: address.postalCode,\n        };\n    }\n\n    private _getCardInformation(cardInformation: { cardType: string, lastTwo: string }) {\n        return {\n            type: cardInformation.cardType,\n            number: cardInformation.lastTwo,\n        };\n    }\n}\n\nexport interface VisaCheckoutInitializeOptions {\n    locale?: string;\n    collectShipping?: boolean;\n    subtotal?: number;\n    currencyCode?: string;\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport BraintreeScriptLoader from './braintree-script-loader';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\nimport BraintreeVisaCheckoutPaymentProcessor from './braintree-visacheckout-payment-processor';\n\nexport default function createBraintreeVisaCheckoutPaymentProcessor(\n    scriptLoader: ScriptLoader,\n    requestSender: RequestSender\n) {\n    const braintreeScriptLoader = new BraintreeScriptLoader(scriptLoader);\n    const braintreeSDKCreator = new BraintreeSDKCreator(braintreeScriptLoader);\n\n    return new BraintreeVisaCheckoutPaymentProcessor(braintreeSDKCreator, requestSender);\n}\n"],"sourceRoot":""}